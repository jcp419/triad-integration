
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb80  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800ec40  0800ec40  0001ec40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f200  0800f200  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f200  0800f200  0001f200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f208  0800f208  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f208  0800f208  0001f208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f20c  0800f20c  0001f20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800f210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200001fc  0800f40c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  0800f40c  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002511e  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c31  00000000  00000000  00045342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00048f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  0004a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000571a  00000000  00000000  0004baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc3b  00000000  00000000  0005120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca6ca  00000000  00000000  0006de45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013850f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c0  00000000  00000000  00138564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001fc 	.word	0x200001fc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ec24 	.word	0x0800ec24

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000200 	.word	0x20000200
 8000100:	0800ec24 	.word	0x0800ec24

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f81f 	bl	800147c <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff69 	bl	8001320 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f811 	bl	800147c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f807 	bl	800147c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff8b 	bl	8001398 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff81 	bl	8001398 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	1c08      	adds	r0, r1, #0
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 fef0 	bl	80022e8 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 feeb 	bl	80022e8 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	46d6      	mov	lr, sl
 8000682:	4646      	mov	r6, r8
 8000684:	000d      	movs	r5, r1
 8000686:	0001      	movs	r1, r0
 8000688:	0018      	movs	r0, r3
 800068a:	b5c0      	push	{r6, r7, lr}
 800068c:	0017      	movs	r7, r2
 800068e:	032b      	lsls	r3, r5, #12
 8000690:	0a5a      	lsrs	r2, r3, #9
 8000692:	0f4b      	lsrs	r3, r1, #29
 8000694:	4313      	orrs	r3, r2
 8000696:	00ca      	lsls	r2, r1, #3
 8000698:	4691      	mov	r9, r2
 800069a:	0302      	lsls	r2, r0, #12
 800069c:	006e      	lsls	r6, r5, #1
 800069e:	0041      	lsls	r1, r0, #1
 80006a0:	0a52      	lsrs	r2, r2, #9
 80006a2:	0fec      	lsrs	r4, r5, #31
 80006a4:	0f7d      	lsrs	r5, r7, #29
 80006a6:	4315      	orrs	r5, r2
 80006a8:	0d76      	lsrs	r6, r6, #21
 80006aa:	0d49      	lsrs	r1, r1, #21
 80006ac:	0fc0      	lsrs	r0, r0, #31
 80006ae:	4682      	mov	sl, r0
 80006b0:	46ac      	mov	ip, r5
 80006b2:	00ff      	lsls	r7, r7, #3
 80006b4:	1a72      	subs	r2, r6, r1
 80006b6:	4284      	cmp	r4, r0
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x40>
 80006ba:	e098      	b.n	80007ee <__aeabi_dadd+0x172>
 80006bc:	2a00      	cmp	r2, #0
 80006be:	dc00      	bgt.n	80006c2 <__aeabi_dadd+0x46>
 80006c0:	e081      	b.n	80007c6 <__aeabi_dadd+0x14a>
 80006c2:	2900      	cmp	r1, #0
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x4c>
 80006c6:	e0b6      	b.n	8000836 <__aeabi_dadd+0x1ba>
 80006c8:	49c9      	ldr	r1, [pc, #804]	; (80009f0 <__aeabi_dadd+0x374>)
 80006ca:	428e      	cmp	r6, r1
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x54>
 80006ce:	e172      	b.n	80009b6 <__aeabi_dadd+0x33a>
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	0028      	movs	r0, r5
 80006d4:	0409      	lsls	r1, r1, #16
 80006d6:	4308      	orrs	r0, r1
 80006d8:	4684      	mov	ip, r0
 80006da:	2a38      	cmp	r2, #56	; 0x38
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_dadd+0x64>
 80006de:	e15e      	b.n	800099e <__aeabi_dadd+0x322>
 80006e0:	2a1f      	cmp	r2, #31
 80006e2:	dd00      	ble.n	80006e6 <__aeabi_dadd+0x6a>
 80006e4:	e1ee      	b.n	8000ac4 <__aeabi_dadd+0x448>
 80006e6:	2020      	movs	r0, #32
 80006e8:	0039      	movs	r1, r7
 80006ea:	4665      	mov	r5, ip
 80006ec:	1a80      	subs	r0, r0, r2
 80006ee:	4087      	lsls	r7, r0
 80006f0:	40d1      	lsrs	r1, r2
 80006f2:	4085      	lsls	r5, r0
 80006f4:	430d      	orrs	r5, r1
 80006f6:	0039      	movs	r1, r7
 80006f8:	1e4f      	subs	r7, r1, #1
 80006fa:	41b9      	sbcs	r1, r7
 80006fc:	4667      	mov	r7, ip
 80006fe:	40d7      	lsrs	r7, r2
 8000700:	4329      	orrs	r1, r5
 8000702:	1bdb      	subs	r3, r3, r7
 8000704:	464a      	mov	r2, r9
 8000706:	1a55      	subs	r5, r2, r1
 8000708:	45a9      	cmp	r9, r5
 800070a:	4189      	sbcs	r1, r1
 800070c:	4249      	negs	r1, r1
 800070e:	1a5b      	subs	r3, r3, r1
 8000710:	4698      	mov	r8, r3
 8000712:	4643      	mov	r3, r8
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	d400      	bmi.n	800071a <__aeabi_dadd+0x9e>
 8000718:	e0cc      	b.n	80008b4 <__aeabi_dadd+0x238>
 800071a:	4643      	mov	r3, r8
 800071c:	025b      	lsls	r3, r3, #9
 800071e:	0a5b      	lsrs	r3, r3, #9
 8000720:	4698      	mov	r8, r3
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0xae>
 8000728:	e12c      	b.n	8000984 <__aeabi_dadd+0x308>
 800072a:	4640      	mov	r0, r8
 800072c:	f001 fdbe 	bl	80022ac <__clzsi2>
 8000730:	0001      	movs	r1, r0
 8000732:	3908      	subs	r1, #8
 8000734:	2220      	movs	r2, #32
 8000736:	0028      	movs	r0, r5
 8000738:	4643      	mov	r3, r8
 800073a:	1a52      	subs	r2, r2, r1
 800073c:	408b      	lsls	r3, r1
 800073e:	40d0      	lsrs	r0, r2
 8000740:	408d      	lsls	r5, r1
 8000742:	4303      	orrs	r3, r0
 8000744:	428e      	cmp	r6, r1
 8000746:	dd00      	ble.n	800074a <__aeabi_dadd+0xce>
 8000748:	e117      	b.n	800097a <__aeabi_dadd+0x2fe>
 800074a:	1b8e      	subs	r6, r1, r6
 800074c:	1c72      	adds	r2, r6, #1
 800074e:	2a1f      	cmp	r2, #31
 8000750:	dd00      	ble.n	8000754 <__aeabi_dadd+0xd8>
 8000752:	e1a7      	b.n	8000aa4 <__aeabi_dadd+0x428>
 8000754:	2120      	movs	r1, #32
 8000756:	0018      	movs	r0, r3
 8000758:	002e      	movs	r6, r5
 800075a:	1a89      	subs	r1, r1, r2
 800075c:	408d      	lsls	r5, r1
 800075e:	4088      	lsls	r0, r1
 8000760:	40d6      	lsrs	r6, r2
 8000762:	40d3      	lsrs	r3, r2
 8000764:	1e69      	subs	r1, r5, #1
 8000766:	418d      	sbcs	r5, r1
 8000768:	4330      	orrs	r0, r6
 800076a:	4698      	mov	r8, r3
 800076c:	2600      	movs	r6, #0
 800076e:	4305      	orrs	r5, r0
 8000770:	076b      	lsls	r3, r5, #29
 8000772:	d009      	beq.n	8000788 <__aeabi_dadd+0x10c>
 8000774:	230f      	movs	r3, #15
 8000776:	402b      	ands	r3, r5
 8000778:	2b04      	cmp	r3, #4
 800077a:	d005      	beq.n	8000788 <__aeabi_dadd+0x10c>
 800077c:	1d2b      	adds	r3, r5, #4
 800077e:	42ab      	cmp	r3, r5
 8000780:	41ad      	sbcs	r5, r5
 8000782:	426d      	negs	r5, r5
 8000784:	44a8      	add	r8, r5
 8000786:	001d      	movs	r5, r3
 8000788:	4643      	mov	r3, r8
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	d400      	bmi.n	8000790 <__aeabi_dadd+0x114>
 800078e:	e094      	b.n	80008ba <__aeabi_dadd+0x23e>
 8000790:	4b97      	ldr	r3, [pc, #604]	; (80009f0 <__aeabi_dadd+0x374>)
 8000792:	1c72      	adds	r2, r6, #1
 8000794:	429a      	cmp	r2, r3
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x11e>
 8000798:	e09d      	b.n	80008d6 <__aeabi_dadd+0x25a>
 800079a:	4641      	mov	r1, r8
 800079c:	4b95      	ldr	r3, [pc, #596]	; (80009f4 <__aeabi_dadd+0x378>)
 800079e:	08ed      	lsrs	r5, r5, #3
 80007a0:	4019      	ands	r1, r3
 80007a2:	000b      	movs	r3, r1
 80007a4:	0552      	lsls	r2, r2, #21
 80007a6:	0749      	lsls	r1, r1, #29
 80007a8:	025b      	lsls	r3, r3, #9
 80007aa:	4329      	orrs	r1, r5
 80007ac:	0b1b      	lsrs	r3, r3, #12
 80007ae:	0d52      	lsrs	r2, r2, #21
 80007b0:	0512      	lsls	r2, r2, #20
 80007b2:	4313      	orrs	r3, r2
 80007b4:	07e4      	lsls	r4, r4, #31
 80007b6:	4323      	orrs	r3, r4
 80007b8:	0008      	movs	r0, r1
 80007ba:	0019      	movs	r1, r3
 80007bc:	bce0      	pop	{r5, r6, r7}
 80007be:	46ba      	mov	sl, r7
 80007c0:	46b1      	mov	r9, r6
 80007c2:	46a8      	mov	r8, r5
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d043      	beq.n	8000852 <__aeabi_dadd+0x1d6>
 80007ca:	1b8a      	subs	r2, r1, r6
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d000      	beq.n	80007d2 <__aeabi_dadd+0x156>
 80007d0:	e12a      	b.n	8000a28 <__aeabi_dadd+0x3ac>
 80007d2:	464c      	mov	r4, r9
 80007d4:	431c      	orrs	r4, r3
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x15e>
 80007d8:	e1d1      	b.n	8000b7e <__aeabi_dadd+0x502>
 80007da:	1e54      	subs	r4, r2, #1
 80007dc:	2a01      	cmp	r2, #1
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x166>
 80007e0:	e21f      	b.n	8000c22 <__aeabi_dadd+0x5a6>
 80007e2:	4d83      	ldr	r5, [pc, #524]	; (80009f0 <__aeabi_dadd+0x374>)
 80007e4:	42aa      	cmp	r2, r5
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x16e>
 80007e8:	e272      	b.n	8000cd0 <__aeabi_dadd+0x654>
 80007ea:	0022      	movs	r2, r4
 80007ec:	e123      	b.n	8000a36 <__aeabi_dadd+0x3ba>
 80007ee:	2a00      	cmp	r2, #0
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_dadd+0x178>
 80007f2:	e098      	b.n	8000926 <__aeabi_dadd+0x2aa>
 80007f4:	2900      	cmp	r1, #0
 80007f6:	d042      	beq.n	800087e <__aeabi_dadd+0x202>
 80007f8:	497d      	ldr	r1, [pc, #500]	; (80009f0 <__aeabi_dadd+0x374>)
 80007fa:	428e      	cmp	r6, r1
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x184>
 80007fe:	e0da      	b.n	80009b6 <__aeabi_dadd+0x33a>
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	0028      	movs	r0, r5
 8000804:	0409      	lsls	r1, r1, #16
 8000806:	4308      	orrs	r0, r1
 8000808:	4684      	mov	ip, r0
 800080a:	2a38      	cmp	r2, #56	; 0x38
 800080c:	dd00      	ble.n	8000810 <__aeabi_dadd+0x194>
 800080e:	e129      	b.n	8000a64 <__aeabi_dadd+0x3e8>
 8000810:	2a1f      	cmp	r2, #31
 8000812:	dc00      	bgt.n	8000816 <__aeabi_dadd+0x19a>
 8000814:	e187      	b.n	8000b26 <__aeabi_dadd+0x4aa>
 8000816:	0011      	movs	r1, r2
 8000818:	4665      	mov	r5, ip
 800081a:	3920      	subs	r1, #32
 800081c:	40cd      	lsrs	r5, r1
 800081e:	2a20      	cmp	r2, #32
 8000820:	d004      	beq.n	800082c <__aeabi_dadd+0x1b0>
 8000822:	2040      	movs	r0, #64	; 0x40
 8000824:	4661      	mov	r1, ip
 8000826:	1a82      	subs	r2, r0, r2
 8000828:	4091      	lsls	r1, r2
 800082a:	430f      	orrs	r7, r1
 800082c:	0039      	movs	r1, r7
 800082e:	1e4f      	subs	r7, r1, #1
 8000830:	41b9      	sbcs	r1, r7
 8000832:	430d      	orrs	r5, r1
 8000834:	e11b      	b.n	8000a6e <__aeabi_dadd+0x3f2>
 8000836:	0029      	movs	r1, r5
 8000838:	4339      	orrs	r1, r7
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x1c2>
 800083c:	e0b5      	b.n	80009aa <__aeabi_dadd+0x32e>
 800083e:	1e51      	subs	r1, r2, #1
 8000840:	2a01      	cmp	r2, #1
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x1ca>
 8000844:	e1ab      	b.n	8000b9e <__aeabi_dadd+0x522>
 8000846:	486a      	ldr	r0, [pc, #424]	; (80009f0 <__aeabi_dadd+0x374>)
 8000848:	4282      	cmp	r2, r0
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x1d2>
 800084c:	e1b2      	b.n	8000bb4 <__aeabi_dadd+0x538>
 800084e:	000a      	movs	r2, r1
 8000850:	e743      	b.n	80006da <__aeabi_dadd+0x5e>
 8000852:	4969      	ldr	r1, [pc, #420]	; (80009f8 <__aeabi_dadd+0x37c>)
 8000854:	1c75      	adds	r5, r6, #1
 8000856:	420d      	tst	r5, r1
 8000858:	d000      	beq.n	800085c <__aeabi_dadd+0x1e0>
 800085a:	e0cf      	b.n	80009fc <__aeabi_dadd+0x380>
 800085c:	2e00      	cmp	r6, #0
 800085e:	d000      	beq.n	8000862 <__aeabi_dadd+0x1e6>
 8000860:	e193      	b.n	8000b8a <__aeabi_dadd+0x50e>
 8000862:	4649      	mov	r1, r9
 8000864:	4319      	orrs	r1, r3
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x1ee>
 8000868:	e1d1      	b.n	8000c0e <__aeabi_dadd+0x592>
 800086a:	4661      	mov	r1, ip
 800086c:	4339      	orrs	r1, r7
 800086e:	d000      	beq.n	8000872 <__aeabi_dadd+0x1f6>
 8000870:	e1e3      	b.n	8000c3a <__aeabi_dadd+0x5be>
 8000872:	4649      	mov	r1, r9
 8000874:	0758      	lsls	r0, r3, #29
 8000876:	08c9      	lsrs	r1, r1, #3
 8000878:	4301      	orrs	r1, r0
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	e026      	b.n	80008cc <__aeabi_dadd+0x250>
 800087e:	0029      	movs	r1, r5
 8000880:	4339      	orrs	r1, r7
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x20a>
 8000884:	e091      	b.n	80009aa <__aeabi_dadd+0x32e>
 8000886:	1e51      	subs	r1, r2, #1
 8000888:	2a01      	cmp	r2, #1
 800088a:	d005      	beq.n	8000898 <__aeabi_dadd+0x21c>
 800088c:	4858      	ldr	r0, [pc, #352]	; (80009f0 <__aeabi_dadd+0x374>)
 800088e:	4282      	cmp	r2, r0
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x218>
 8000892:	e18f      	b.n	8000bb4 <__aeabi_dadd+0x538>
 8000894:	000a      	movs	r2, r1
 8000896:	e7b8      	b.n	800080a <__aeabi_dadd+0x18e>
 8000898:	003d      	movs	r5, r7
 800089a:	444d      	add	r5, r9
 800089c:	454d      	cmp	r5, r9
 800089e:	4189      	sbcs	r1, r1
 80008a0:	4463      	add	r3, ip
 80008a2:	4698      	mov	r8, r3
 80008a4:	4249      	negs	r1, r1
 80008a6:	4488      	add	r8, r1
 80008a8:	4643      	mov	r3, r8
 80008aa:	2602      	movs	r6, #2
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	d500      	bpl.n	80008b2 <__aeabi_dadd+0x236>
 80008b0:	e0eb      	b.n	8000a8a <__aeabi_dadd+0x40e>
 80008b2:	3e01      	subs	r6, #1
 80008b4:	076b      	lsls	r3, r5, #29
 80008b6:	d000      	beq.n	80008ba <__aeabi_dadd+0x23e>
 80008b8:	e75c      	b.n	8000774 <__aeabi_dadd+0xf8>
 80008ba:	4643      	mov	r3, r8
 80008bc:	08e9      	lsrs	r1, r5, #3
 80008be:	075a      	lsls	r2, r3, #29
 80008c0:	4311      	orrs	r1, r2
 80008c2:	0032      	movs	r2, r6
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	484a      	ldr	r0, [pc, #296]	; (80009f0 <__aeabi_dadd+0x374>)
 80008c8:	4282      	cmp	r2, r0
 80008ca:	d021      	beq.n	8000910 <__aeabi_dadd+0x294>
 80008cc:	031b      	lsls	r3, r3, #12
 80008ce:	0552      	lsls	r2, r2, #21
 80008d0:	0b1b      	lsrs	r3, r3, #12
 80008d2:	0d52      	lsrs	r2, r2, #21
 80008d4:	e76c      	b.n	80007b0 <__aeabi_dadd+0x134>
 80008d6:	2300      	movs	r3, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	e769      	b.n	80007b0 <__aeabi_dadd+0x134>
 80008dc:	002a      	movs	r2, r5
 80008de:	433a      	orrs	r2, r7
 80008e0:	d069      	beq.n	80009b6 <__aeabi_dadd+0x33a>
 80008e2:	464a      	mov	r2, r9
 80008e4:	0758      	lsls	r0, r3, #29
 80008e6:	08d1      	lsrs	r1, r2, #3
 80008e8:	08da      	lsrs	r2, r3, #3
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	031b      	lsls	r3, r3, #12
 80008ee:	4308      	orrs	r0, r1
 80008f0:	421a      	tst	r2, r3
 80008f2:	d007      	beq.n	8000904 <__aeabi_dadd+0x288>
 80008f4:	0029      	movs	r1, r5
 80008f6:	08ed      	lsrs	r5, r5, #3
 80008f8:	421d      	tst	r5, r3
 80008fa:	d103      	bne.n	8000904 <__aeabi_dadd+0x288>
 80008fc:	002a      	movs	r2, r5
 80008fe:	08ff      	lsrs	r7, r7, #3
 8000900:	0748      	lsls	r0, r1, #29
 8000902:	4338      	orrs	r0, r7
 8000904:	0f43      	lsrs	r3, r0, #29
 8000906:	00c1      	lsls	r1, r0, #3
 8000908:	075b      	lsls	r3, r3, #29
 800090a:	08c9      	lsrs	r1, r1, #3
 800090c:	4319      	orrs	r1, r3
 800090e:	0013      	movs	r3, r2
 8000910:	000a      	movs	r2, r1
 8000912:	431a      	orrs	r2, r3
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x29c>
 8000916:	e213      	b.n	8000d40 <__aeabi_dadd+0x6c4>
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	0312      	lsls	r2, r2, #12
 800091c:	4313      	orrs	r3, r2
 800091e:	031b      	lsls	r3, r3, #12
 8000920:	4a33      	ldr	r2, [pc, #204]	; (80009f0 <__aeabi_dadd+0x374>)
 8000922:	0b1b      	lsrs	r3, r3, #12
 8000924:	e744      	b.n	80007b0 <__aeabi_dadd+0x134>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d04b      	beq.n	80009c2 <__aeabi_dadd+0x346>
 800092a:	1b8a      	subs	r2, r1, r6
 800092c:	2e00      	cmp	r6, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x2b6>
 8000930:	e0e7      	b.n	8000b02 <__aeabi_dadd+0x486>
 8000932:	482f      	ldr	r0, [pc, #188]	; (80009f0 <__aeabi_dadd+0x374>)
 8000934:	4281      	cmp	r1, r0
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x2be>
 8000938:	e195      	b.n	8000c66 <__aeabi_dadd+0x5ea>
 800093a:	2080      	movs	r0, #128	; 0x80
 800093c:	0400      	lsls	r0, r0, #16
 800093e:	4303      	orrs	r3, r0
 8000940:	2a38      	cmp	r2, #56	; 0x38
 8000942:	dd00      	ble.n	8000946 <__aeabi_dadd+0x2ca>
 8000944:	e143      	b.n	8000bce <__aeabi_dadd+0x552>
 8000946:	2a1f      	cmp	r2, #31
 8000948:	dd00      	ble.n	800094c <__aeabi_dadd+0x2d0>
 800094a:	e1db      	b.n	8000d04 <__aeabi_dadd+0x688>
 800094c:	2020      	movs	r0, #32
 800094e:	001d      	movs	r5, r3
 8000950:	464e      	mov	r6, r9
 8000952:	1a80      	subs	r0, r0, r2
 8000954:	4085      	lsls	r5, r0
 8000956:	40d6      	lsrs	r6, r2
 8000958:	4335      	orrs	r5, r6
 800095a:	464e      	mov	r6, r9
 800095c:	4086      	lsls	r6, r0
 800095e:	0030      	movs	r0, r6
 8000960:	40d3      	lsrs	r3, r2
 8000962:	1e46      	subs	r6, r0, #1
 8000964:	41b0      	sbcs	r0, r6
 8000966:	449c      	add	ip, r3
 8000968:	4305      	orrs	r5, r0
 800096a:	19ed      	adds	r5, r5, r7
 800096c:	42bd      	cmp	r5, r7
 800096e:	419b      	sbcs	r3, r3
 8000970:	425b      	negs	r3, r3
 8000972:	4463      	add	r3, ip
 8000974:	4698      	mov	r8, r3
 8000976:	000e      	movs	r6, r1
 8000978:	e07f      	b.n	8000a7a <__aeabi_dadd+0x3fe>
 800097a:	4a1e      	ldr	r2, [pc, #120]	; (80009f4 <__aeabi_dadd+0x378>)
 800097c:	1a76      	subs	r6, r6, r1
 800097e:	4013      	ands	r3, r2
 8000980:	4698      	mov	r8, r3
 8000982:	e6f5      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000984:	0028      	movs	r0, r5
 8000986:	f001 fc91 	bl	80022ac <__clzsi2>
 800098a:	0001      	movs	r1, r0
 800098c:	3118      	adds	r1, #24
 800098e:	291f      	cmp	r1, #31
 8000990:	dc00      	bgt.n	8000994 <__aeabi_dadd+0x318>
 8000992:	e6cf      	b.n	8000734 <__aeabi_dadd+0xb8>
 8000994:	002b      	movs	r3, r5
 8000996:	3808      	subs	r0, #8
 8000998:	4083      	lsls	r3, r0
 800099a:	2500      	movs	r5, #0
 800099c:	e6d2      	b.n	8000744 <__aeabi_dadd+0xc8>
 800099e:	4662      	mov	r2, ip
 80009a0:	433a      	orrs	r2, r7
 80009a2:	0011      	movs	r1, r2
 80009a4:	1e4f      	subs	r7, r1, #1
 80009a6:	41b9      	sbcs	r1, r7
 80009a8:	e6ac      	b.n	8000704 <__aeabi_dadd+0x88>
 80009aa:	4649      	mov	r1, r9
 80009ac:	0758      	lsls	r0, r3, #29
 80009ae:	08c9      	lsrs	r1, r1, #3
 80009b0:	4301      	orrs	r1, r0
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	e787      	b.n	80008c6 <__aeabi_dadd+0x24a>
 80009b6:	4649      	mov	r1, r9
 80009b8:	075a      	lsls	r2, r3, #29
 80009ba:	08c9      	lsrs	r1, r1, #3
 80009bc:	4311      	orrs	r1, r2
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	e7a6      	b.n	8000910 <__aeabi_dadd+0x294>
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <__aeabi_dadd+0x37c>)
 80009c4:	1c70      	adds	r0, r6, #1
 80009c6:	4208      	tst	r0, r1
 80009c8:	d000      	beq.n	80009cc <__aeabi_dadd+0x350>
 80009ca:	e0bb      	b.n	8000b44 <__aeabi_dadd+0x4c8>
 80009cc:	2e00      	cmp	r6, #0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_dadd+0x356>
 80009d0:	e114      	b.n	8000bfc <__aeabi_dadd+0x580>
 80009d2:	4649      	mov	r1, r9
 80009d4:	4319      	orrs	r1, r3
 80009d6:	d100      	bne.n	80009da <__aeabi_dadd+0x35e>
 80009d8:	e175      	b.n	8000cc6 <__aeabi_dadd+0x64a>
 80009da:	0029      	movs	r1, r5
 80009dc:	4339      	orrs	r1, r7
 80009de:	d000      	beq.n	80009e2 <__aeabi_dadd+0x366>
 80009e0:	e17e      	b.n	8000ce0 <__aeabi_dadd+0x664>
 80009e2:	4649      	mov	r1, r9
 80009e4:	0758      	lsls	r0, r3, #29
 80009e6:	08c9      	lsrs	r1, r1, #3
 80009e8:	4301      	orrs	r1, r0
 80009ea:	08db      	lsrs	r3, r3, #3
 80009ec:	e76e      	b.n	80008cc <__aeabi_dadd+0x250>
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	000007ff 	.word	0x000007ff
 80009f4:	ff7fffff 	.word	0xff7fffff
 80009f8:	000007fe 	.word	0x000007fe
 80009fc:	4649      	mov	r1, r9
 80009fe:	1bcd      	subs	r5, r1, r7
 8000a00:	4661      	mov	r1, ip
 8000a02:	1a58      	subs	r0, r3, r1
 8000a04:	45a9      	cmp	r9, r5
 8000a06:	4189      	sbcs	r1, r1
 8000a08:	4249      	negs	r1, r1
 8000a0a:	4688      	mov	r8, r1
 8000a0c:	0001      	movs	r1, r0
 8000a0e:	4640      	mov	r0, r8
 8000a10:	1a09      	subs	r1, r1, r0
 8000a12:	4688      	mov	r8, r1
 8000a14:	0209      	lsls	r1, r1, #8
 8000a16:	d500      	bpl.n	8000a1a <__aeabi_dadd+0x39e>
 8000a18:	e0a6      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 8000a1a:	4641      	mov	r1, r8
 8000a1c:	4329      	orrs	r1, r5
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x3a6>
 8000a20:	e67f      	b.n	8000722 <__aeabi_dadd+0xa6>
 8000a22:	2300      	movs	r3, #0
 8000a24:	2400      	movs	r4, #0
 8000a26:	e751      	b.n	80008cc <__aeabi_dadd+0x250>
 8000a28:	4cc7      	ldr	r4, [pc, #796]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000a2a:	42a1      	cmp	r1, r4
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dadd+0x3b4>
 8000a2e:	e0c7      	b.n	8000bc0 <__aeabi_dadd+0x544>
 8000a30:	2480      	movs	r4, #128	; 0x80
 8000a32:	0424      	lsls	r4, r4, #16
 8000a34:	4323      	orrs	r3, r4
 8000a36:	2a38      	cmp	r2, #56	; 0x38
 8000a38:	dc54      	bgt.n	8000ae4 <__aeabi_dadd+0x468>
 8000a3a:	2a1f      	cmp	r2, #31
 8000a3c:	dd00      	ble.n	8000a40 <__aeabi_dadd+0x3c4>
 8000a3e:	e0cc      	b.n	8000bda <__aeabi_dadd+0x55e>
 8000a40:	2420      	movs	r4, #32
 8000a42:	4648      	mov	r0, r9
 8000a44:	1aa4      	subs	r4, r4, r2
 8000a46:	001d      	movs	r5, r3
 8000a48:	464e      	mov	r6, r9
 8000a4a:	40a0      	lsls	r0, r4
 8000a4c:	40d6      	lsrs	r6, r2
 8000a4e:	40a5      	lsls	r5, r4
 8000a50:	0004      	movs	r4, r0
 8000a52:	40d3      	lsrs	r3, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	4335      	orrs	r5, r6
 8000a58:	1e66      	subs	r6, r4, #1
 8000a5a:	41b4      	sbcs	r4, r6
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	469c      	mov	ip, r3
 8000a60:	4325      	orrs	r5, r4
 8000a62:	e044      	b.n	8000aee <__aeabi_dadd+0x472>
 8000a64:	4662      	mov	r2, ip
 8000a66:	433a      	orrs	r2, r7
 8000a68:	0015      	movs	r5, r2
 8000a6a:	1e6f      	subs	r7, r5, #1
 8000a6c:	41bd      	sbcs	r5, r7
 8000a6e:	444d      	add	r5, r9
 8000a70:	454d      	cmp	r5, r9
 8000a72:	4189      	sbcs	r1, r1
 8000a74:	4249      	negs	r1, r1
 8000a76:	4688      	mov	r8, r1
 8000a78:	4498      	add	r8, r3
 8000a7a:	4643      	mov	r3, r8
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	d400      	bmi.n	8000a82 <__aeabi_dadd+0x406>
 8000a80:	e718      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000a82:	4bb1      	ldr	r3, [pc, #708]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000a84:	3601      	adds	r6, #1
 8000a86:	429e      	cmp	r6, r3
 8000a88:	d049      	beq.n	8000b1e <__aeabi_dadd+0x4a2>
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	4baf      	ldr	r3, [pc, #700]	; (8000d4c <__aeabi_dadd+0x6d0>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	401a      	ands	r2, r3
 8000a92:	0013      	movs	r3, r2
 8000a94:	086a      	lsrs	r2, r5, #1
 8000a96:	400d      	ands	r5, r1
 8000a98:	4315      	orrs	r5, r2
 8000a9a:	07d9      	lsls	r1, r3, #31
 8000a9c:	085b      	lsrs	r3, r3, #1
 8000a9e:	4698      	mov	r8, r3
 8000aa0:	430d      	orrs	r5, r1
 8000aa2:	e665      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	3e1f      	subs	r6, #31
 8000aa8:	40f0      	lsrs	r0, r6
 8000aaa:	2a20      	cmp	r2, #32
 8000aac:	d003      	beq.n	8000ab6 <__aeabi_dadd+0x43a>
 8000aae:	2140      	movs	r1, #64	; 0x40
 8000ab0:	1a8a      	subs	r2, r1, r2
 8000ab2:	4093      	lsls	r3, r2
 8000ab4:	431d      	orrs	r5, r3
 8000ab6:	1e69      	subs	r1, r5, #1
 8000ab8:	418d      	sbcs	r5, r1
 8000aba:	2300      	movs	r3, #0
 8000abc:	2600      	movs	r6, #0
 8000abe:	4698      	mov	r8, r3
 8000ac0:	4305      	orrs	r5, r0
 8000ac2:	e6f7      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	4665      	mov	r5, ip
 8000ac8:	3920      	subs	r1, #32
 8000aca:	40cd      	lsrs	r5, r1
 8000acc:	2a20      	cmp	r2, #32
 8000ace:	d004      	beq.n	8000ada <__aeabi_dadd+0x45e>
 8000ad0:	2040      	movs	r0, #64	; 0x40
 8000ad2:	4661      	mov	r1, ip
 8000ad4:	1a82      	subs	r2, r0, r2
 8000ad6:	4091      	lsls	r1, r2
 8000ad8:	430f      	orrs	r7, r1
 8000ada:	0039      	movs	r1, r7
 8000adc:	1e4f      	subs	r7, r1, #1
 8000ade:	41b9      	sbcs	r1, r7
 8000ae0:	4329      	orrs	r1, r5
 8000ae2:	e60f      	b.n	8000704 <__aeabi_dadd+0x88>
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	001d      	movs	r5, r3
 8000aea:	1e6b      	subs	r3, r5, #1
 8000aec:	419d      	sbcs	r5, r3
 8000aee:	1b7d      	subs	r5, r7, r5
 8000af0:	42af      	cmp	r7, r5
 8000af2:	419b      	sbcs	r3, r3
 8000af4:	4662      	mov	r2, ip
 8000af6:	425b      	negs	r3, r3
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	4698      	mov	r8, r3
 8000afc:	4654      	mov	r4, sl
 8000afe:	000e      	movs	r6, r1
 8000b00:	e607      	b.n	8000712 <__aeabi_dadd+0x96>
 8000b02:	4648      	mov	r0, r9
 8000b04:	4318      	orrs	r0, r3
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x48e>
 8000b08:	e0b3      	b.n	8000c72 <__aeabi_dadd+0x5f6>
 8000b0a:	1e50      	subs	r0, r2, #1
 8000b0c:	2a01      	cmp	r2, #1
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x496>
 8000b10:	e10d      	b.n	8000d2e <__aeabi_dadd+0x6b2>
 8000b12:	4d8d      	ldr	r5, [pc, #564]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000b14:	42aa      	cmp	r2, r5
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x49e>
 8000b18:	e0a5      	b.n	8000c66 <__aeabi_dadd+0x5ea>
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	e710      	b.n	8000940 <__aeabi_dadd+0x2c4>
 8000b1e:	0032      	movs	r2, r6
 8000b20:	2300      	movs	r3, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	e644      	b.n	80007b0 <__aeabi_dadd+0x134>
 8000b26:	2120      	movs	r1, #32
 8000b28:	0038      	movs	r0, r7
 8000b2a:	1a89      	subs	r1, r1, r2
 8000b2c:	4665      	mov	r5, ip
 8000b2e:	408f      	lsls	r7, r1
 8000b30:	408d      	lsls	r5, r1
 8000b32:	40d0      	lsrs	r0, r2
 8000b34:	1e79      	subs	r1, r7, #1
 8000b36:	418f      	sbcs	r7, r1
 8000b38:	4305      	orrs	r5, r0
 8000b3a:	433d      	orrs	r5, r7
 8000b3c:	4667      	mov	r7, ip
 8000b3e:	40d7      	lsrs	r7, r2
 8000b40:	19db      	adds	r3, r3, r7
 8000b42:	e794      	b.n	8000a6e <__aeabi_dadd+0x3f2>
 8000b44:	4a80      	ldr	r2, [pc, #512]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000b46:	4290      	cmp	r0, r2
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x4d0>
 8000b4a:	e0ec      	b.n	8000d26 <__aeabi_dadd+0x6aa>
 8000b4c:	0039      	movs	r1, r7
 8000b4e:	4449      	add	r1, r9
 8000b50:	4549      	cmp	r1, r9
 8000b52:	4192      	sbcs	r2, r2
 8000b54:	4463      	add	r3, ip
 8000b56:	4252      	negs	r2, r2
 8000b58:	189b      	adds	r3, r3, r2
 8000b5a:	07dd      	lsls	r5, r3, #31
 8000b5c:	0849      	lsrs	r1, r1, #1
 8000b5e:	085b      	lsrs	r3, r3, #1
 8000b60:	4698      	mov	r8, r3
 8000b62:	0006      	movs	r6, r0
 8000b64:	430d      	orrs	r5, r1
 8000b66:	e6a5      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1abd      	subs	r5, r7, r2
 8000b6c:	42af      	cmp	r7, r5
 8000b6e:	4189      	sbcs	r1, r1
 8000b70:	4662      	mov	r2, ip
 8000b72:	4249      	negs	r1, r1
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	1a5b      	subs	r3, r3, r1
 8000b78:	4698      	mov	r8, r3
 8000b7a:	4654      	mov	r4, sl
 8000b7c:	e5d1      	b.n	8000722 <__aeabi_dadd+0xa6>
 8000b7e:	076c      	lsls	r4, r5, #29
 8000b80:	08f9      	lsrs	r1, r7, #3
 8000b82:	4321      	orrs	r1, r4
 8000b84:	08eb      	lsrs	r3, r5, #3
 8000b86:	0004      	movs	r4, r0
 8000b88:	e69d      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b8a:	464a      	mov	r2, r9
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	d175      	bne.n	8000c7c <__aeabi_dadd+0x600>
 8000b90:	4661      	mov	r1, ip
 8000b92:	4339      	orrs	r1, r7
 8000b94:	d114      	bne.n	8000bc0 <__aeabi_dadd+0x544>
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	2400      	movs	r4, #0
 8000b9a:	031b      	lsls	r3, r3, #12
 8000b9c:	e6bc      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b9e:	464a      	mov	r2, r9
 8000ba0:	1bd5      	subs	r5, r2, r7
 8000ba2:	45a9      	cmp	r9, r5
 8000ba4:	4189      	sbcs	r1, r1
 8000ba6:	4662      	mov	r2, ip
 8000ba8:	4249      	negs	r1, r1
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	4698      	mov	r8, r3
 8000bb0:	2601      	movs	r6, #1
 8000bb2:	e5ae      	b.n	8000712 <__aeabi_dadd+0x96>
 8000bb4:	464a      	mov	r2, r9
 8000bb6:	08d1      	lsrs	r1, r2, #3
 8000bb8:	075a      	lsls	r2, r3, #29
 8000bba:	4311      	orrs	r1, r2
 8000bbc:	08db      	lsrs	r3, r3, #3
 8000bbe:	e6a7      	b.n	8000910 <__aeabi_dadd+0x294>
 8000bc0:	4663      	mov	r3, ip
 8000bc2:	08f9      	lsrs	r1, r7, #3
 8000bc4:	075a      	lsls	r2, r3, #29
 8000bc6:	4654      	mov	r4, sl
 8000bc8:	4311      	orrs	r1, r2
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	e6a0      	b.n	8000910 <__aeabi_dadd+0x294>
 8000bce:	464a      	mov	r2, r9
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	001d      	movs	r5, r3
 8000bd4:	1e6b      	subs	r3, r5, #1
 8000bd6:	419d      	sbcs	r5, r3
 8000bd8:	e6c7      	b.n	800096a <__aeabi_dadd+0x2ee>
 8000bda:	0014      	movs	r4, r2
 8000bdc:	001e      	movs	r6, r3
 8000bde:	3c20      	subs	r4, #32
 8000be0:	40e6      	lsrs	r6, r4
 8000be2:	2a20      	cmp	r2, #32
 8000be4:	d005      	beq.n	8000bf2 <__aeabi_dadd+0x576>
 8000be6:	2440      	movs	r4, #64	; 0x40
 8000be8:	1aa2      	subs	r2, r4, r2
 8000bea:	4093      	lsls	r3, r2
 8000bec:	464a      	mov	r2, r9
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	4691      	mov	r9, r2
 8000bf2:	464d      	mov	r5, r9
 8000bf4:	1e6b      	subs	r3, r5, #1
 8000bf6:	419d      	sbcs	r5, r3
 8000bf8:	4335      	orrs	r5, r6
 8000bfa:	e778      	b.n	8000aee <__aeabi_dadd+0x472>
 8000bfc:	464a      	mov	r2, r9
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	d000      	beq.n	8000c04 <__aeabi_dadd+0x588>
 8000c02:	e66b      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c04:	076b      	lsls	r3, r5, #29
 8000c06:	08f9      	lsrs	r1, r7, #3
 8000c08:	4319      	orrs	r1, r3
 8000c0a:	08eb      	lsrs	r3, r5, #3
 8000c0c:	e680      	b.n	8000910 <__aeabi_dadd+0x294>
 8000c0e:	4661      	mov	r1, ip
 8000c10:	4339      	orrs	r1, r7
 8000c12:	d054      	beq.n	8000cbe <__aeabi_dadd+0x642>
 8000c14:	4663      	mov	r3, ip
 8000c16:	08f9      	lsrs	r1, r7, #3
 8000c18:	075c      	lsls	r4, r3, #29
 8000c1a:	4321      	orrs	r1, r4
 8000c1c:	08db      	lsrs	r3, r3, #3
 8000c1e:	0004      	movs	r4, r0
 8000c20:	e654      	b.n	80008cc <__aeabi_dadd+0x250>
 8000c22:	464a      	mov	r2, r9
 8000c24:	1abd      	subs	r5, r7, r2
 8000c26:	42af      	cmp	r7, r5
 8000c28:	4189      	sbcs	r1, r1
 8000c2a:	4662      	mov	r2, ip
 8000c2c:	4249      	negs	r1, r1
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	4698      	mov	r8, r3
 8000c34:	0004      	movs	r4, r0
 8000c36:	2601      	movs	r6, #1
 8000c38:	e56b      	b.n	8000712 <__aeabi_dadd+0x96>
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	1bd5      	subs	r5, r2, r7
 8000c3e:	45a9      	cmp	r9, r5
 8000c40:	4189      	sbcs	r1, r1
 8000c42:	4662      	mov	r2, ip
 8000c44:	4249      	negs	r1, r1
 8000c46:	1a9a      	subs	r2, r3, r2
 8000c48:	1a52      	subs	r2, r2, r1
 8000c4a:	4690      	mov	r8, r2
 8000c4c:	0212      	lsls	r2, r2, #8
 8000c4e:	d532      	bpl.n	8000cb6 <__aeabi_dadd+0x63a>
 8000c50:	464a      	mov	r2, r9
 8000c52:	1abd      	subs	r5, r7, r2
 8000c54:	42af      	cmp	r7, r5
 8000c56:	4189      	sbcs	r1, r1
 8000c58:	4662      	mov	r2, ip
 8000c5a:	4249      	negs	r1, r1
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	1a5b      	subs	r3, r3, r1
 8000c60:	4698      	mov	r8, r3
 8000c62:	0004      	movs	r4, r0
 8000c64:	e584      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000c66:	4663      	mov	r3, ip
 8000c68:	08f9      	lsrs	r1, r7, #3
 8000c6a:	075a      	lsls	r2, r3, #29
 8000c6c:	4311      	orrs	r1, r2
 8000c6e:	08db      	lsrs	r3, r3, #3
 8000c70:	e64e      	b.n	8000910 <__aeabi_dadd+0x294>
 8000c72:	08f9      	lsrs	r1, r7, #3
 8000c74:	0768      	lsls	r0, r5, #29
 8000c76:	4301      	orrs	r1, r0
 8000c78:	08eb      	lsrs	r3, r5, #3
 8000c7a:	e624      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c7c:	4662      	mov	r2, ip
 8000c7e:	433a      	orrs	r2, r7
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dadd+0x608>
 8000c82:	e698      	b.n	80009b6 <__aeabi_dadd+0x33a>
 8000c84:	464a      	mov	r2, r9
 8000c86:	08d1      	lsrs	r1, r2, #3
 8000c88:	075a      	lsls	r2, r3, #29
 8000c8a:	4311      	orrs	r1, r2
 8000c8c:	08da      	lsrs	r2, r3, #3
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	031b      	lsls	r3, r3, #12
 8000c92:	421a      	tst	r2, r3
 8000c94:	d008      	beq.n	8000ca8 <__aeabi_dadd+0x62c>
 8000c96:	4660      	mov	r0, ip
 8000c98:	08c5      	lsrs	r5, r0, #3
 8000c9a:	421d      	tst	r5, r3
 8000c9c:	d104      	bne.n	8000ca8 <__aeabi_dadd+0x62c>
 8000c9e:	4654      	mov	r4, sl
 8000ca0:	002a      	movs	r2, r5
 8000ca2:	08f9      	lsrs	r1, r7, #3
 8000ca4:	0743      	lsls	r3, r0, #29
 8000ca6:	4319      	orrs	r1, r3
 8000ca8:	0f4b      	lsrs	r3, r1, #29
 8000caa:	00c9      	lsls	r1, r1, #3
 8000cac:	075b      	lsls	r3, r3, #29
 8000cae:	08c9      	lsrs	r1, r1, #3
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	e62c      	b.n	8000910 <__aeabi_dadd+0x294>
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	4329      	orrs	r1, r5
 8000cba:	d000      	beq.n	8000cbe <__aeabi_dadd+0x642>
 8000cbc:	e5fa      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	000a      	movs	r2, r1
 8000cc2:	2400      	movs	r4, #0
 8000cc4:	e602      	b.n	80008cc <__aeabi_dadd+0x250>
 8000cc6:	076b      	lsls	r3, r5, #29
 8000cc8:	08f9      	lsrs	r1, r7, #3
 8000cca:	4319      	orrs	r1, r3
 8000ccc:	08eb      	lsrs	r3, r5, #3
 8000cce:	e5fd      	b.n	80008cc <__aeabi_dadd+0x250>
 8000cd0:	4663      	mov	r3, ip
 8000cd2:	08f9      	lsrs	r1, r7, #3
 8000cd4:	075b      	lsls	r3, r3, #29
 8000cd6:	4319      	orrs	r1, r3
 8000cd8:	4663      	mov	r3, ip
 8000cda:	0004      	movs	r4, r0
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	e617      	b.n	8000910 <__aeabi_dadd+0x294>
 8000ce0:	003d      	movs	r5, r7
 8000ce2:	444d      	add	r5, r9
 8000ce4:	4463      	add	r3, ip
 8000ce6:	454d      	cmp	r5, r9
 8000ce8:	4189      	sbcs	r1, r1
 8000cea:	4698      	mov	r8, r3
 8000cec:	4249      	negs	r1, r1
 8000cee:	4488      	add	r8, r1
 8000cf0:	4643      	mov	r3, r8
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	d400      	bmi.n	8000cf8 <__aeabi_dadd+0x67c>
 8000cf6:	e5dd      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000cf8:	4642      	mov	r2, r8
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <__aeabi_dadd+0x6d0>)
 8000cfc:	2601      	movs	r6, #1
 8000cfe:	401a      	ands	r2, r3
 8000d00:	4690      	mov	r8, r2
 8000d02:	e5d7      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000d04:	0010      	movs	r0, r2
 8000d06:	001e      	movs	r6, r3
 8000d08:	3820      	subs	r0, #32
 8000d0a:	40c6      	lsrs	r6, r0
 8000d0c:	2a20      	cmp	r2, #32
 8000d0e:	d005      	beq.n	8000d1c <__aeabi_dadd+0x6a0>
 8000d10:	2040      	movs	r0, #64	; 0x40
 8000d12:	1a82      	subs	r2, r0, r2
 8000d14:	4093      	lsls	r3, r2
 8000d16:	464a      	mov	r2, r9
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	464d      	mov	r5, r9
 8000d1e:	1e6b      	subs	r3, r5, #1
 8000d20:	419d      	sbcs	r5, r3
 8000d22:	4335      	orrs	r5, r6
 8000d24:	e621      	b.n	800096a <__aeabi_dadd+0x2ee>
 8000d26:	0002      	movs	r2, r0
 8000d28:	2300      	movs	r3, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e540      	b.n	80007b0 <__aeabi_dadd+0x134>
 8000d2e:	464a      	mov	r2, r9
 8000d30:	19d5      	adds	r5, r2, r7
 8000d32:	42bd      	cmp	r5, r7
 8000d34:	4189      	sbcs	r1, r1
 8000d36:	4463      	add	r3, ip
 8000d38:	4698      	mov	r8, r3
 8000d3a:	4249      	negs	r1, r1
 8000d3c:	4488      	add	r8, r1
 8000d3e:	e5b3      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000d40:	2100      	movs	r1, #0
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000d44:	000b      	movs	r3, r1
 8000d46:	e533      	b.n	80007b0 <__aeabi_dadd+0x134>
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	ff7fffff 	.word	0xff7fffff

08000d50 <__aeabi_ddiv>:
 8000d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d52:	4657      	mov	r7, sl
 8000d54:	464e      	mov	r6, r9
 8000d56:	4645      	mov	r5, r8
 8000d58:	46de      	mov	lr, fp
 8000d5a:	b5e0      	push	{r5, r6, r7, lr}
 8000d5c:	4681      	mov	r9, r0
 8000d5e:	0005      	movs	r5, r0
 8000d60:	030c      	lsls	r4, r1, #12
 8000d62:	0048      	lsls	r0, r1, #1
 8000d64:	4692      	mov	sl, r2
 8000d66:	001f      	movs	r7, r3
 8000d68:	b085      	sub	sp, #20
 8000d6a:	0b24      	lsrs	r4, r4, #12
 8000d6c:	0d40      	lsrs	r0, r0, #21
 8000d6e:	0fce      	lsrs	r6, r1, #31
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d059      	beq.n	8000e28 <__aeabi_ddiv+0xd8>
 8000d74:	4b87      	ldr	r3, [pc, #540]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000d76:	4298      	cmp	r0, r3
 8000d78:	d100      	bne.n	8000d7c <__aeabi_ddiv+0x2c>
 8000d7a:	e098      	b.n	8000eae <__aeabi_ddiv+0x15e>
 8000d7c:	0f6b      	lsrs	r3, r5, #29
 8000d7e:	00e4      	lsls	r4, r4, #3
 8000d80:	431c      	orrs	r4, r3
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	041b      	lsls	r3, r3, #16
 8000d86:	4323      	orrs	r3, r4
 8000d88:	4698      	mov	r8, r3
 8000d8a:	4b83      	ldr	r3, [pc, #524]	; (8000f98 <__aeabi_ddiv+0x248>)
 8000d8c:	00ed      	lsls	r5, r5, #3
 8000d8e:	469b      	mov	fp, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	4699      	mov	r9, r3
 8000d94:	4483      	add	fp, r0
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	033c      	lsls	r4, r7, #12
 8000d9a:	007b      	lsls	r3, r7, #1
 8000d9c:	4650      	mov	r0, sl
 8000d9e:	0b24      	lsrs	r4, r4, #12
 8000da0:	0d5b      	lsrs	r3, r3, #21
 8000da2:	0fff      	lsrs	r7, r7, #31
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d067      	beq.n	8000e78 <__aeabi_ddiv+0x128>
 8000da8:	4a7a      	ldr	r2, [pc, #488]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d018      	beq.n	8000de0 <__aeabi_ddiv+0x90>
 8000dae:	497a      	ldr	r1, [pc, #488]	; (8000f98 <__aeabi_ddiv+0x248>)
 8000db0:	0f42      	lsrs	r2, r0, #29
 8000db2:	468c      	mov	ip, r1
 8000db4:	00e4      	lsls	r4, r4, #3
 8000db6:	4659      	mov	r1, fp
 8000db8:	4314      	orrs	r4, r2
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	4463      	add	r3, ip
 8000dbe:	0412      	lsls	r2, r2, #16
 8000dc0:	1acb      	subs	r3, r1, r3
 8000dc2:	4314      	orrs	r4, r2
 8000dc4:	469b      	mov	fp, r3
 8000dc6:	00c2      	lsls	r2, r0, #3
 8000dc8:	2000      	movs	r0, #0
 8000dca:	0033      	movs	r3, r6
 8000dcc:	407b      	eors	r3, r7
 8000dce:	469a      	mov	sl, r3
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	d900      	bls.n	8000dd8 <__aeabi_ddiv+0x88>
 8000dd6:	e0ef      	b.n	8000fb8 <__aeabi_ddiv+0x268>
 8000dd8:	4970      	ldr	r1, [pc, #448]	; (8000f9c <__aeabi_ddiv+0x24c>)
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	58cb      	ldr	r3, [r1, r3]
 8000dde:	469f      	mov	pc, r3
 8000de0:	4b6f      	ldr	r3, [pc, #444]	; (8000fa0 <__aeabi_ddiv+0x250>)
 8000de2:	4652      	mov	r2, sl
 8000de4:	469c      	mov	ip, r3
 8000de6:	4322      	orrs	r2, r4
 8000de8:	44e3      	add	fp, ip
 8000dea:	2a00      	cmp	r2, #0
 8000dec:	d000      	beq.n	8000df0 <__aeabi_ddiv+0xa0>
 8000dee:	e095      	b.n	8000f1c <__aeabi_ddiv+0x1cc>
 8000df0:	4649      	mov	r1, r9
 8000df2:	2302      	movs	r3, #2
 8000df4:	4319      	orrs	r1, r3
 8000df6:	4689      	mov	r9, r1
 8000df8:	2400      	movs	r4, #0
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	e7e5      	b.n	8000dca <__aeabi_ddiv+0x7a>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	2400      	movs	r4, #0
 8000e02:	2500      	movs	r5, #0
 8000e04:	4652      	mov	r2, sl
 8000e06:	051b      	lsls	r3, r3, #20
 8000e08:	4323      	orrs	r3, r4
 8000e0a:	07d2      	lsls	r2, r2, #31
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	0028      	movs	r0, r5
 8000e10:	0019      	movs	r1, r3
 8000e12:	b005      	add	sp, #20
 8000e14:	bcf0      	pop	{r4, r5, r6, r7}
 8000e16:	46bb      	mov	fp, r7
 8000e18:	46b2      	mov	sl, r6
 8000e1a:	46a9      	mov	r9, r5
 8000e1c:	46a0      	mov	r8, r4
 8000e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e20:	2400      	movs	r4, #0
 8000e22:	2500      	movs	r5, #0
 8000e24:	4b5b      	ldr	r3, [pc, #364]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000e26:	e7ed      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000e28:	464b      	mov	r3, r9
 8000e2a:	4323      	orrs	r3, r4
 8000e2c:	4698      	mov	r8, r3
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_ddiv+0xe2>
 8000e30:	e089      	b.n	8000f46 <__aeabi_ddiv+0x1f6>
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0xe8>
 8000e36:	e1e0      	b.n	80011fa <__aeabi_ddiv+0x4aa>
 8000e38:	0020      	movs	r0, r4
 8000e3a:	f001 fa37 	bl	80022ac <__clzsi2>
 8000e3e:	0001      	movs	r1, r0
 8000e40:	0002      	movs	r2, r0
 8000e42:	390b      	subs	r1, #11
 8000e44:	231d      	movs	r3, #29
 8000e46:	1a5b      	subs	r3, r3, r1
 8000e48:	4649      	mov	r1, r9
 8000e4a:	0010      	movs	r0, r2
 8000e4c:	40d9      	lsrs	r1, r3
 8000e4e:	3808      	subs	r0, #8
 8000e50:	4084      	lsls	r4, r0
 8000e52:	000b      	movs	r3, r1
 8000e54:	464d      	mov	r5, r9
 8000e56:	4323      	orrs	r3, r4
 8000e58:	4698      	mov	r8, r3
 8000e5a:	4085      	lsls	r5, r0
 8000e5c:	4851      	ldr	r0, [pc, #324]	; (8000fa4 <__aeabi_ddiv+0x254>)
 8000e5e:	033c      	lsls	r4, r7, #12
 8000e60:	1a83      	subs	r3, r0, r2
 8000e62:	469b      	mov	fp, r3
 8000e64:	2300      	movs	r3, #0
 8000e66:	4699      	mov	r9, r3
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	007b      	lsls	r3, r7, #1
 8000e6c:	4650      	mov	r0, sl
 8000e6e:	0b24      	lsrs	r4, r4, #12
 8000e70:	0d5b      	lsrs	r3, r3, #21
 8000e72:	0fff      	lsrs	r7, r7, #31
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d197      	bne.n	8000da8 <__aeabi_ddiv+0x58>
 8000e78:	4652      	mov	r2, sl
 8000e7a:	4322      	orrs	r2, r4
 8000e7c:	d055      	beq.n	8000f2a <__aeabi_ddiv+0x1da>
 8000e7e:	2c00      	cmp	r4, #0
 8000e80:	d100      	bne.n	8000e84 <__aeabi_ddiv+0x134>
 8000e82:	e1ca      	b.n	800121a <__aeabi_ddiv+0x4ca>
 8000e84:	0020      	movs	r0, r4
 8000e86:	f001 fa11 	bl	80022ac <__clzsi2>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	3a0b      	subs	r2, #11
 8000e8e:	231d      	movs	r3, #29
 8000e90:	0001      	movs	r1, r0
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	4652      	mov	r2, sl
 8000e96:	3908      	subs	r1, #8
 8000e98:	40da      	lsrs	r2, r3
 8000e9a:	408c      	lsls	r4, r1
 8000e9c:	4314      	orrs	r4, r2
 8000e9e:	4652      	mov	r2, sl
 8000ea0:	408a      	lsls	r2, r1
 8000ea2:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <__aeabi_ddiv+0x258>)
 8000ea4:	4458      	add	r0, fp
 8000ea6:	469b      	mov	fp, r3
 8000ea8:	4483      	add	fp, r0
 8000eaa:	2000      	movs	r0, #0
 8000eac:	e78d      	b.n	8000dca <__aeabi_ddiv+0x7a>
 8000eae:	464b      	mov	r3, r9
 8000eb0:	4323      	orrs	r3, r4
 8000eb2:	4698      	mov	r8, r3
 8000eb4:	d140      	bne.n	8000f38 <__aeabi_ddiv+0x1e8>
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	4699      	mov	r9, r3
 8000eba:	3b06      	subs	r3, #6
 8000ebc:	2500      	movs	r5, #0
 8000ebe:	4683      	mov	fp, r0
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	e769      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000ec4:	46b2      	mov	sl, r6
 8000ec6:	9b00      	ldr	r3, [sp, #0]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d0a9      	beq.n	8000e20 <__aeabi_ddiv+0xd0>
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_ddiv+0x182>
 8000ed0:	e211      	b.n	80012f6 <__aeabi_ddiv+0x5a6>
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d093      	beq.n	8000dfe <__aeabi_ddiv+0xae>
 8000ed6:	4a35      	ldr	r2, [pc, #212]	; (8000fac <__aeabi_ddiv+0x25c>)
 8000ed8:	445a      	add	r2, fp
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	dc00      	bgt.n	8000ee0 <__aeabi_ddiv+0x190>
 8000ede:	e13c      	b.n	800115a <__aeabi_ddiv+0x40a>
 8000ee0:	076b      	lsls	r3, r5, #29
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_ddiv+0x196>
 8000ee4:	e1a7      	b.n	8001236 <__aeabi_ddiv+0x4e6>
 8000ee6:	08ed      	lsrs	r5, r5, #3
 8000ee8:	4643      	mov	r3, r8
 8000eea:	01db      	lsls	r3, r3, #7
 8000eec:	d506      	bpl.n	8000efc <__aeabi_ddiv+0x1ac>
 8000eee:	4642      	mov	r2, r8
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <__aeabi_ddiv+0x260>)
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	4690      	mov	r8, r2
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	00d2      	lsls	r2, r2, #3
 8000efa:	445a      	add	r2, fp
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <__aeabi_ddiv+0x264>)
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dc8e      	bgt.n	8000e20 <__aeabi_ddiv+0xd0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	0552      	lsls	r2, r2, #21
 8000f06:	0758      	lsls	r0, r3, #29
 8000f08:	025c      	lsls	r4, r3, #9
 8000f0a:	4305      	orrs	r5, r0
 8000f0c:	0b24      	lsrs	r4, r4, #12
 8000f0e:	0d53      	lsrs	r3, r2, #21
 8000f10:	e778      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000f12:	46ba      	mov	sl, r7
 8000f14:	46a0      	mov	r8, r4
 8000f16:	0015      	movs	r5, r2
 8000f18:	9000      	str	r0, [sp, #0]
 8000f1a:	e7d4      	b.n	8000ec6 <__aeabi_ddiv+0x176>
 8000f1c:	464a      	mov	r2, r9
 8000f1e:	2303      	movs	r3, #3
 8000f20:	431a      	orrs	r2, r3
 8000f22:	4691      	mov	r9, r2
 8000f24:	2003      	movs	r0, #3
 8000f26:	4652      	mov	r2, sl
 8000f28:	e74f      	b.n	8000dca <__aeabi_ddiv+0x7a>
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	4319      	orrs	r1, r3
 8000f30:	4689      	mov	r9, r1
 8000f32:	2400      	movs	r4, #0
 8000f34:	2001      	movs	r0, #1
 8000f36:	e748      	b.n	8000dca <__aeabi_ddiv+0x7a>
 8000f38:	230c      	movs	r3, #12
 8000f3a:	4699      	mov	r9, r3
 8000f3c:	3b09      	subs	r3, #9
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	4683      	mov	fp, r0
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	e728      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000f46:	2304      	movs	r3, #4
 8000f48:	4699      	mov	r9, r3
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	469b      	mov	fp, r3
 8000f4e:	3301      	adds	r3, #1
 8000f50:	2500      	movs	r5, #0
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	e720      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000f56:	2300      	movs	r3, #0
 8000f58:	2480      	movs	r4, #128	; 0x80
 8000f5a:	469a      	mov	sl, r3
 8000f5c:	2500      	movs	r5, #0
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	e74f      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	4641      	mov	r1, r8
 8000f68:	031b      	lsls	r3, r3, #12
 8000f6a:	4219      	tst	r1, r3
 8000f6c:	d008      	beq.n	8000f80 <__aeabi_ddiv+0x230>
 8000f6e:	421c      	tst	r4, r3
 8000f70:	d106      	bne.n	8000f80 <__aeabi_ddiv+0x230>
 8000f72:	431c      	orrs	r4, r3
 8000f74:	0324      	lsls	r4, r4, #12
 8000f76:	46ba      	mov	sl, r7
 8000f78:	0015      	movs	r5, r2
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000f7c:	0b24      	lsrs	r4, r4, #12
 8000f7e:	e741      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000f80:	2480      	movs	r4, #128	; 0x80
 8000f82:	4643      	mov	r3, r8
 8000f84:	0324      	lsls	r4, r4, #12
 8000f86:	431c      	orrs	r4, r3
 8000f88:	0324      	lsls	r4, r4, #12
 8000f8a:	46b2      	mov	sl, r6
 8000f8c:	4b01      	ldr	r3, [pc, #4]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000f8e:	0b24      	lsrs	r4, r4, #12
 8000f90:	e738      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	000007ff 	.word	0x000007ff
 8000f98:	fffffc01 	.word	0xfffffc01
 8000f9c:	0800ecc0 	.word	0x0800ecc0
 8000fa0:	fffff801 	.word	0xfffff801
 8000fa4:	fffffc0d 	.word	0xfffffc0d
 8000fa8:	000003f3 	.word	0x000003f3
 8000fac:	000003ff 	.word	0x000003ff
 8000fb0:	feffffff 	.word	0xfeffffff
 8000fb4:	000007fe 	.word	0x000007fe
 8000fb8:	4544      	cmp	r4, r8
 8000fba:	d200      	bcs.n	8000fbe <__aeabi_ddiv+0x26e>
 8000fbc:	e116      	b.n	80011ec <__aeabi_ddiv+0x49c>
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x272>
 8000fc0:	e111      	b.n	80011e6 <__aeabi_ddiv+0x496>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	425b      	negs	r3, r3
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	002e      	movs	r6, r5
 8000fca:	4640      	mov	r0, r8
 8000fcc:	2500      	movs	r5, #0
 8000fce:	44e3      	add	fp, ip
 8000fd0:	0223      	lsls	r3, r4, #8
 8000fd2:	0e14      	lsrs	r4, r2, #24
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0c1b      	lsrs	r3, r3, #16
 8000fd8:	4699      	mov	r9, r3
 8000fda:	0423      	lsls	r3, r4, #16
 8000fdc:	0c1f      	lsrs	r7, r3, #16
 8000fde:	0212      	lsls	r2, r2, #8
 8000fe0:	4649      	mov	r1, r9
 8000fe2:	9200      	str	r2, [sp, #0]
 8000fe4:	9701      	str	r7, [sp, #4]
 8000fe6:	f7ff f92f 	bl	8000248 <__aeabi_uidivmod>
 8000fea:	0002      	movs	r2, r0
 8000fec:	437a      	muls	r2, r7
 8000fee:	040b      	lsls	r3, r1, #16
 8000ff0:	0c31      	lsrs	r1, r6, #16
 8000ff2:	4680      	mov	r8, r0
 8000ff4:	4319      	orrs	r1, r3
 8000ff6:	428a      	cmp	r2, r1
 8000ff8:	d90b      	bls.n	8001012 <__aeabi_ddiv+0x2c2>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	469c      	mov	ip, r3
 8001000:	1909      	adds	r1, r1, r4
 8001002:	44e0      	add	r8, ip
 8001004:	428c      	cmp	r4, r1
 8001006:	d804      	bhi.n	8001012 <__aeabi_ddiv+0x2c2>
 8001008:	428a      	cmp	r2, r1
 800100a:	d902      	bls.n	8001012 <__aeabi_ddiv+0x2c2>
 800100c:	1e83      	subs	r3, r0, #2
 800100e:	4698      	mov	r8, r3
 8001010:	1909      	adds	r1, r1, r4
 8001012:	1a88      	subs	r0, r1, r2
 8001014:	4649      	mov	r1, r9
 8001016:	f7ff f917 	bl	8000248 <__aeabi_uidivmod>
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	468c      	mov	ip, r1
 800101e:	0431      	lsls	r1, r6, #16
 8001020:	4666      	mov	r6, ip
 8001022:	9a01      	ldr	r2, [sp, #4]
 8001024:	0c09      	lsrs	r1, r1, #16
 8001026:	4342      	muls	r2, r0
 8001028:	0003      	movs	r3, r0
 800102a:	4331      	orrs	r1, r6
 800102c:	428a      	cmp	r2, r1
 800102e:	d904      	bls.n	800103a <__aeabi_ddiv+0x2ea>
 8001030:	1909      	adds	r1, r1, r4
 8001032:	3b01      	subs	r3, #1
 8001034:	428c      	cmp	r4, r1
 8001036:	d800      	bhi.n	800103a <__aeabi_ddiv+0x2ea>
 8001038:	e111      	b.n	800125e <__aeabi_ddiv+0x50e>
 800103a:	1a89      	subs	r1, r1, r2
 800103c:	4642      	mov	r2, r8
 800103e:	9e00      	ldr	r6, [sp, #0]
 8001040:	0412      	lsls	r2, r2, #16
 8001042:	431a      	orrs	r2, r3
 8001044:	0c33      	lsrs	r3, r6, #16
 8001046:	001f      	movs	r7, r3
 8001048:	0c10      	lsrs	r0, r2, #16
 800104a:	4690      	mov	r8, r2
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	0413      	lsls	r3, r2, #16
 8001050:	0432      	lsls	r2, r6, #16
 8001052:	0c16      	lsrs	r6, r2, #16
 8001054:	0032      	movs	r2, r6
 8001056:	0c1b      	lsrs	r3, r3, #16
 8001058:	435a      	muls	r2, r3
 800105a:	9603      	str	r6, [sp, #12]
 800105c:	437b      	muls	r3, r7
 800105e:	4346      	muls	r6, r0
 8001060:	4378      	muls	r0, r7
 8001062:	0c17      	lsrs	r7, r2, #16
 8001064:	46bc      	mov	ip, r7
 8001066:	199b      	adds	r3, r3, r6
 8001068:	4463      	add	r3, ip
 800106a:	429e      	cmp	r6, r3
 800106c:	d903      	bls.n	8001076 <__aeabi_ddiv+0x326>
 800106e:	2680      	movs	r6, #128	; 0x80
 8001070:	0276      	lsls	r6, r6, #9
 8001072:	46b4      	mov	ip, r6
 8001074:	4460      	add	r0, ip
 8001076:	0c1e      	lsrs	r6, r3, #16
 8001078:	1830      	adds	r0, r6, r0
 800107a:	0416      	lsls	r6, r2, #16
 800107c:	041b      	lsls	r3, r3, #16
 800107e:	0c36      	lsrs	r6, r6, #16
 8001080:	199e      	adds	r6, r3, r6
 8001082:	4281      	cmp	r1, r0
 8001084:	d200      	bcs.n	8001088 <__aeabi_ddiv+0x338>
 8001086:	e09c      	b.n	80011c2 <__aeabi_ddiv+0x472>
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0x33c>
 800108a:	e097      	b.n	80011bc <__aeabi_ddiv+0x46c>
 800108c:	1bae      	subs	r6, r5, r6
 800108e:	1a09      	subs	r1, r1, r0
 8001090:	42b5      	cmp	r5, r6
 8001092:	4180      	sbcs	r0, r0
 8001094:	4240      	negs	r0, r0
 8001096:	1a08      	subs	r0, r1, r0
 8001098:	4284      	cmp	r4, r0
 800109a:	d100      	bne.n	800109e <__aeabi_ddiv+0x34e>
 800109c:	e111      	b.n	80012c2 <__aeabi_ddiv+0x572>
 800109e:	4649      	mov	r1, r9
 80010a0:	f7ff f8d2 	bl	8000248 <__aeabi_uidivmod>
 80010a4:	9a01      	ldr	r2, [sp, #4]
 80010a6:	040b      	lsls	r3, r1, #16
 80010a8:	4342      	muls	r2, r0
 80010aa:	0c31      	lsrs	r1, r6, #16
 80010ac:	0005      	movs	r5, r0
 80010ae:	4319      	orrs	r1, r3
 80010b0:	428a      	cmp	r2, r1
 80010b2:	d907      	bls.n	80010c4 <__aeabi_ddiv+0x374>
 80010b4:	1909      	adds	r1, r1, r4
 80010b6:	3d01      	subs	r5, #1
 80010b8:	428c      	cmp	r4, r1
 80010ba:	d803      	bhi.n	80010c4 <__aeabi_ddiv+0x374>
 80010bc:	428a      	cmp	r2, r1
 80010be:	d901      	bls.n	80010c4 <__aeabi_ddiv+0x374>
 80010c0:	1e85      	subs	r5, r0, #2
 80010c2:	1909      	adds	r1, r1, r4
 80010c4:	1a88      	subs	r0, r1, r2
 80010c6:	4649      	mov	r1, r9
 80010c8:	f7ff f8be 	bl	8000248 <__aeabi_uidivmod>
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	468c      	mov	ip, r1
 80010d0:	0431      	lsls	r1, r6, #16
 80010d2:	4666      	mov	r6, ip
 80010d4:	9a01      	ldr	r2, [sp, #4]
 80010d6:	0c09      	lsrs	r1, r1, #16
 80010d8:	4342      	muls	r2, r0
 80010da:	0003      	movs	r3, r0
 80010dc:	4331      	orrs	r1, r6
 80010de:	428a      	cmp	r2, r1
 80010e0:	d907      	bls.n	80010f2 <__aeabi_ddiv+0x3a2>
 80010e2:	1909      	adds	r1, r1, r4
 80010e4:	3b01      	subs	r3, #1
 80010e6:	428c      	cmp	r4, r1
 80010e8:	d803      	bhi.n	80010f2 <__aeabi_ddiv+0x3a2>
 80010ea:	428a      	cmp	r2, r1
 80010ec:	d901      	bls.n	80010f2 <__aeabi_ddiv+0x3a2>
 80010ee:	1e83      	subs	r3, r0, #2
 80010f0:	1909      	adds	r1, r1, r4
 80010f2:	9e03      	ldr	r6, [sp, #12]
 80010f4:	1a89      	subs	r1, r1, r2
 80010f6:	0032      	movs	r2, r6
 80010f8:	042d      	lsls	r5, r5, #16
 80010fa:	431d      	orrs	r5, r3
 80010fc:	9f02      	ldr	r7, [sp, #8]
 80010fe:	042b      	lsls	r3, r5, #16
 8001100:	0c1b      	lsrs	r3, r3, #16
 8001102:	435a      	muls	r2, r3
 8001104:	437b      	muls	r3, r7
 8001106:	469c      	mov	ip, r3
 8001108:	0c28      	lsrs	r0, r5, #16
 800110a:	4346      	muls	r6, r0
 800110c:	0c13      	lsrs	r3, r2, #16
 800110e:	44b4      	add	ip, r6
 8001110:	4463      	add	r3, ip
 8001112:	4378      	muls	r0, r7
 8001114:	429e      	cmp	r6, r3
 8001116:	d903      	bls.n	8001120 <__aeabi_ddiv+0x3d0>
 8001118:	2680      	movs	r6, #128	; 0x80
 800111a:	0276      	lsls	r6, r6, #9
 800111c:	46b4      	mov	ip, r6
 800111e:	4460      	add	r0, ip
 8001120:	0c1e      	lsrs	r6, r3, #16
 8001122:	0412      	lsls	r2, r2, #16
 8001124:	041b      	lsls	r3, r3, #16
 8001126:	0c12      	lsrs	r2, r2, #16
 8001128:	1830      	adds	r0, r6, r0
 800112a:	189b      	adds	r3, r3, r2
 800112c:	4281      	cmp	r1, r0
 800112e:	d306      	bcc.n	800113e <__aeabi_ddiv+0x3ee>
 8001130:	d002      	beq.n	8001138 <__aeabi_ddiv+0x3e8>
 8001132:	2301      	movs	r3, #1
 8001134:	431d      	orrs	r5, r3
 8001136:	e6ce      	b.n	8000ed6 <__aeabi_ddiv+0x186>
 8001138:	2b00      	cmp	r3, #0
 800113a:	d100      	bne.n	800113e <__aeabi_ddiv+0x3ee>
 800113c:	e6cb      	b.n	8000ed6 <__aeabi_ddiv+0x186>
 800113e:	1861      	adds	r1, r4, r1
 8001140:	1e6e      	subs	r6, r5, #1
 8001142:	42a1      	cmp	r1, r4
 8001144:	d200      	bcs.n	8001148 <__aeabi_ddiv+0x3f8>
 8001146:	e0a4      	b.n	8001292 <__aeabi_ddiv+0x542>
 8001148:	4281      	cmp	r1, r0
 800114a:	d200      	bcs.n	800114e <__aeabi_ddiv+0x3fe>
 800114c:	e0c9      	b.n	80012e2 <__aeabi_ddiv+0x592>
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x402>
 8001150:	e0d9      	b.n	8001306 <__aeabi_ddiv+0x5b6>
 8001152:	0035      	movs	r5, r6
 8001154:	e7ed      	b.n	8001132 <__aeabi_ddiv+0x3e2>
 8001156:	2501      	movs	r5, #1
 8001158:	426d      	negs	r5, r5
 800115a:	2101      	movs	r1, #1
 800115c:	1a89      	subs	r1, r1, r2
 800115e:	2938      	cmp	r1, #56	; 0x38
 8001160:	dd00      	ble.n	8001164 <__aeabi_ddiv+0x414>
 8001162:	e64c      	b.n	8000dfe <__aeabi_ddiv+0xae>
 8001164:	291f      	cmp	r1, #31
 8001166:	dc00      	bgt.n	800116a <__aeabi_ddiv+0x41a>
 8001168:	e07f      	b.n	800126a <__aeabi_ddiv+0x51a>
 800116a:	231f      	movs	r3, #31
 800116c:	425b      	negs	r3, r3
 800116e:	1a9a      	subs	r2, r3, r2
 8001170:	4643      	mov	r3, r8
 8001172:	40d3      	lsrs	r3, r2
 8001174:	2920      	cmp	r1, #32
 8001176:	d004      	beq.n	8001182 <__aeabi_ddiv+0x432>
 8001178:	4644      	mov	r4, r8
 800117a:	4a65      	ldr	r2, [pc, #404]	; (8001310 <__aeabi_ddiv+0x5c0>)
 800117c:	445a      	add	r2, fp
 800117e:	4094      	lsls	r4, r2
 8001180:	4325      	orrs	r5, r4
 8001182:	1e6a      	subs	r2, r5, #1
 8001184:	4195      	sbcs	r5, r2
 8001186:	2207      	movs	r2, #7
 8001188:	432b      	orrs	r3, r5
 800118a:	0015      	movs	r5, r2
 800118c:	2400      	movs	r4, #0
 800118e:	401d      	ands	r5, r3
 8001190:	421a      	tst	r2, r3
 8001192:	d100      	bne.n	8001196 <__aeabi_ddiv+0x446>
 8001194:	e0a1      	b.n	80012da <__aeabi_ddiv+0x58a>
 8001196:	220f      	movs	r2, #15
 8001198:	2400      	movs	r4, #0
 800119a:	401a      	ands	r2, r3
 800119c:	2a04      	cmp	r2, #4
 800119e:	d100      	bne.n	80011a2 <__aeabi_ddiv+0x452>
 80011a0:	e098      	b.n	80012d4 <__aeabi_ddiv+0x584>
 80011a2:	1d1a      	adds	r2, r3, #4
 80011a4:	429a      	cmp	r2, r3
 80011a6:	419b      	sbcs	r3, r3
 80011a8:	425b      	negs	r3, r3
 80011aa:	18e4      	adds	r4, r4, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	0222      	lsls	r2, r4, #8
 80011b0:	d400      	bmi.n	80011b4 <__aeabi_ddiv+0x464>
 80011b2:	e08f      	b.n	80012d4 <__aeabi_ddiv+0x584>
 80011b4:	2301      	movs	r3, #1
 80011b6:	2400      	movs	r4, #0
 80011b8:	2500      	movs	r5, #0
 80011ba:	e623      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 80011bc:	42b5      	cmp	r5, r6
 80011be:	d300      	bcc.n	80011c2 <__aeabi_ddiv+0x472>
 80011c0:	e764      	b.n	800108c <__aeabi_ddiv+0x33c>
 80011c2:	4643      	mov	r3, r8
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	9b00      	ldr	r3, [sp, #0]
 80011c8:	469c      	mov	ip, r3
 80011ca:	4465      	add	r5, ip
 80011cc:	001f      	movs	r7, r3
 80011ce:	429d      	cmp	r5, r3
 80011d0:	419b      	sbcs	r3, r3
 80011d2:	425b      	negs	r3, r3
 80011d4:	191b      	adds	r3, r3, r4
 80011d6:	18c9      	adds	r1, r1, r3
 80011d8:	428c      	cmp	r4, r1
 80011da:	d23a      	bcs.n	8001252 <__aeabi_ddiv+0x502>
 80011dc:	4288      	cmp	r0, r1
 80011de:	d863      	bhi.n	80012a8 <__aeabi_ddiv+0x558>
 80011e0:	d060      	beq.n	80012a4 <__aeabi_ddiv+0x554>
 80011e2:	4690      	mov	r8, r2
 80011e4:	e752      	b.n	800108c <__aeabi_ddiv+0x33c>
 80011e6:	42aa      	cmp	r2, r5
 80011e8:	d900      	bls.n	80011ec <__aeabi_ddiv+0x49c>
 80011ea:	e6ea      	b.n	8000fc2 <__aeabi_ddiv+0x272>
 80011ec:	4643      	mov	r3, r8
 80011ee:	07de      	lsls	r6, r3, #31
 80011f0:	0858      	lsrs	r0, r3, #1
 80011f2:	086b      	lsrs	r3, r5, #1
 80011f4:	431e      	orrs	r6, r3
 80011f6:	07ed      	lsls	r5, r5, #31
 80011f8:	e6ea      	b.n	8000fd0 <__aeabi_ddiv+0x280>
 80011fa:	4648      	mov	r0, r9
 80011fc:	f001 f856 	bl	80022ac <__clzsi2>
 8001200:	0001      	movs	r1, r0
 8001202:	0002      	movs	r2, r0
 8001204:	3115      	adds	r1, #21
 8001206:	3220      	adds	r2, #32
 8001208:	291c      	cmp	r1, #28
 800120a:	dc00      	bgt.n	800120e <__aeabi_ddiv+0x4be>
 800120c:	e61a      	b.n	8000e44 <__aeabi_ddiv+0xf4>
 800120e:	464b      	mov	r3, r9
 8001210:	3808      	subs	r0, #8
 8001212:	4083      	lsls	r3, r0
 8001214:	2500      	movs	r5, #0
 8001216:	4698      	mov	r8, r3
 8001218:	e620      	b.n	8000e5c <__aeabi_ddiv+0x10c>
 800121a:	f001 f847 	bl	80022ac <__clzsi2>
 800121e:	0003      	movs	r3, r0
 8001220:	001a      	movs	r2, r3
 8001222:	3215      	adds	r2, #21
 8001224:	3020      	adds	r0, #32
 8001226:	2a1c      	cmp	r2, #28
 8001228:	dc00      	bgt.n	800122c <__aeabi_ddiv+0x4dc>
 800122a:	e630      	b.n	8000e8e <__aeabi_ddiv+0x13e>
 800122c:	4654      	mov	r4, sl
 800122e:	3b08      	subs	r3, #8
 8001230:	2200      	movs	r2, #0
 8001232:	409c      	lsls	r4, r3
 8001234:	e635      	b.n	8000ea2 <__aeabi_ddiv+0x152>
 8001236:	230f      	movs	r3, #15
 8001238:	402b      	ands	r3, r5
 800123a:	2b04      	cmp	r3, #4
 800123c:	d100      	bne.n	8001240 <__aeabi_ddiv+0x4f0>
 800123e:	e652      	b.n	8000ee6 <__aeabi_ddiv+0x196>
 8001240:	2305      	movs	r3, #5
 8001242:	425b      	negs	r3, r3
 8001244:	42ab      	cmp	r3, r5
 8001246:	419b      	sbcs	r3, r3
 8001248:	3504      	adds	r5, #4
 800124a:	425b      	negs	r3, r3
 800124c:	08ed      	lsrs	r5, r5, #3
 800124e:	4498      	add	r8, r3
 8001250:	e64a      	b.n	8000ee8 <__aeabi_ddiv+0x198>
 8001252:	428c      	cmp	r4, r1
 8001254:	d1c5      	bne.n	80011e2 <__aeabi_ddiv+0x492>
 8001256:	42af      	cmp	r7, r5
 8001258:	d9c0      	bls.n	80011dc <__aeabi_ddiv+0x48c>
 800125a:	4690      	mov	r8, r2
 800125c:	e716      	b.n	800108c <__aeabi_ddiv+0x33c>
 800125e:	428a      	cmp	r2, r1
 8001260:	d800      	bhi.n	8001264 <__aeabi_ddiv+0x514>
 8001262:	e6ea      	b.n	800103a <__aeabi_ddiv+0x2ea>
 8001264:	1e83      	subs	r3, r0, #2
 8001266:	1909      	adds	r1, r1, r4
 8001268:	e6e7      	b.n	800103a <__aeabi_ddiv+0x2ea>
 800126a:	4a2a      	ldr	r2, [pc, #168]	; (8001314 <__aeabi_ddiv+0x5c4>)
 800126c:	0028      	movs	r0, r5
 800126e:	445a      	add	r2, fp
 8001270:	4643      	mov	r3, r8
 8001272:	4095      	lsls	r5, r2
 8001274:	4093      	lsls	r3, r2
 8001276:	40c8      	lsrs	r0, r1
 8001278:	1e6a      	subs	r2, r5, #1
 800127a:	4195      	sbcs	r5, r2
 800127c:	4644      	mov	r4, r8
 800127e:	4303      	orrs	r3, r0
 8001280:	432b      	orrs	r3, r5
 8001282:	40cc      	lsrs	r4, r1
 8001284:	075a      	lsls	r2, r3, #29
 8001286:	d092      	beq.n	80011ae <__aeabi_ddiv+0x45e>
 8001288:	220f      	movs	r2, #15
 800128a:	401a      	ands	r2, r3
 800128c:	2a04      	cmp	r2, #4
 800128e:	d188      	bne.n	80011a2 <__aeabi_ddiv+0x452>
 8001290:	e78d      	b.n	80011ae <__aeabi_ddiv+0x45e>
 8001292:	0035      	movs	r5, r6
 8001294:	4281      	cmp	r1, r0
 8001296:	d000      	beq.n	800129a <__aeabi_ddiv+0x54a>
 8001298:	e74b      	b.n	8001132 <__aeabi_ddiv+0x3e2>
 800129a:	9a00      	ldr	r2, [sp, #0]
 800129c:	4293      	cmp	r3, r2
 800129e:	d000      	beq.n	80012a2 <__aeabi_ddiv+0x552>
 80012a0:	e747      	b.n	8001132 <__aeabi_ddiv+0x3e2>
 80012a2:	e618      	b.n	8000ed6 <__aeabi_ddiv+0x186>
 80012a4:	42ae      	cmp	r6, r5
 80012a6:	d99c      	bls.n	80011e2 <__aeabi_ddiv+0x492>
 80012a8:	2302      	movs	r3, #2
 80012aa:	425b      	negs	r3, r3
 80012ac:	469c      	mov	ip, r3
 80012ae:	9b00      	ldr	r3, [sp, #0]
 80012b0:	44e0      	add	r8, ip
 80012b2:	469c      	mov	ip, r3
 80012b4:	4465      	add	r5, ip
 80012b6:	429d      	cmp	r5, r3
 80012b8:	419b      	sbcs	r3, r3
 80012ba:	425b      	negs	r3, r3
 80012bc:	191b      	adds	r3, r3, r4
 80012be:	18c9      	adds	r1, r1, r3
 80012c0:	e6e4      	b.n	800108c <__aeabi_ddiv+0x33c>
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <__aeabi_ddiv+0x5c8>)
 80012c4:	445a      	add	r2, fp
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	dc00      	bgt.n	80012cc <__aeabi_ddiv+0x57c>
 80012ca:	e744      	b.n	8001156 <__aeabi_ddiv+0x406>
 80012cc:	2301      	movs	r3, #1
 80012ce:	2500      	movs	r5, #0
 80012d0:	4498      	add	r8, r3
 80012d2:	e609      	b.n	8000ee8 <__aeabi_ddiv+0x198>
 80012d4:	0765      	lsls	r5, r4, #29
 80012d6:	0264      	lsls	r4, r4, #9
 80012d8:	0b24      	lsrs	r4, r4, #12
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	431d      	orrs	r5, r3
 80012de:	2300      	movs	r3, #0
 80012e0:	e590      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 80012e2:	9e00      	ldr	r6, [sp, #0]
 80012e4:	3d02      	subs	r5, #2
 80012e6:	0072      	lsls	r2, r6, #1
 80012e8:	42b2      	cmp	r2, r6
 80012ea:	41bf      	sbcs	r7, r7
 80012ec:	427f      	negs	r7, r7
 80012ee:	193c      	adds	r4, r7, r4
 80012f0:	1909      	adds	r1, r1, r4
 80012f2:	9200      	str	r2, [sp, #0]
 80012f4:	e7ce      	b.n	8001294 <__aeabi_ddiv+0x544>
 80012f6:	2480      	movs	r4, #128	; 0x80
 80012f8:	4643      	mov	r3, r8
 80012fa:	0324      	lsls	r4, r4, #12
 80012fc:	431c      	orrs	r4, r3
 80012fe:	0324      	lsls	r4, r4, #12
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <__aeabi_ddiv+0x5cc>)
 8001302:	0b24      	lsrs	r4, r4, #12
 8001304:	e57e      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8001306:	9a00      	ldr	r2, [sp, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3ea      	bcc.n	80012e2 <__aeabi_ddiv+0x592>
 800130c:	0035      	movs	r5, r6
 800130e:	e7c4      	b.n	800129a <__aeabi_ddiv+0x54a>
 8001310:	0000043e 	.word	0x0000043e
 8001314:	0000041e 	.word	0x0000041e
 8001318:	000003ff 	.word	0x000003ff
 800131c:	000007ff 	.word	0x000007ff

08001320 <__eqdf2>:
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	464f      	mov	r7, r9
 8001324:	4646      	mov	r6, r8
 8001326:	46d6      	mov	lr, sl
 8001328:	4694      	mov	ip, r2
 800132a:	4691      	mov	r9, r2
 800132c:	031a      	lsls	r2, r3, #12
 800132e:	0b12      	lsrs	r2, r2, #12
 8001330:	4d18      	ldr	r5, [pc, #96]	; (8001394 <__eqdf2+0x74>)
 8001332:	b5c0      	push	{r6, r7, lr}
 8001334:	004c      	lsls	r4, r1, #1
 8001336:	030f      	lsls	r7, r1, #12
 8001338:	4692      	mov	sl, r2
 800133a:	005a      	lsls	r2, r3, #1
 800133c:	0006      	movs	r6, r0
 800133e:	4680      	mov	r8, r0
 8001340:	0b3f      	lsrs	r7, r7, #12
 8001342:	2001      	movs	r0, #1
 8001344:	0d64      	lsrs	r4, r4, #21
 8001346:	0fc9      	lsrs	r1, r1, #31
 8001348:	0d52      	lsrs	r2, r2, #21
 800134a:	0fdb      	lsrs	r3, r3, #31
 800134c:	42ac      	cmp	r4, r5
 800134e:	d00a      	beq.n	8001366 <__eqdf2+0x46>
 8001350:	42aa      	cmp	r2, r5
 8001352:	d003      	beq.n	800135c <__eqdf2+0x3c>
 8001354:	4294      	cmp	r4, r2
 8001356:	d101      	bne.n	800135c <__eqdf2+0x3c>
 8001358:	4557      	cmp	r7, sl
 800135a:	d00d      	beq.n	8001378 <__eqdf2+0x58>
 800135c:	bce0      	pop	{r5, r6, r7}
 800135e:	46ba      	mov	sl, r7
 8001360:	46b1      	mov	r9, r6
 8001362:	46a8      	mov	r8, r5
 8001364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001366:	003d      	movs	r5, r7
 8001368:	4335      	orrs	r5, r6
 800136a:	d1f7      	bne.n	800135c <__eqdf2+0x3c>
 800136c:	42a2      	cmp	r2, r4
 800136e:	d1f5      	bne.n	800135c <__eqdf2+0x3c>
 8001370:	4652      	mov	r2, sl
 8001372:	4665      	mov	r5, ip
 8001374:	432a      	orrs	r2, r5
 8001376:	d1f1      	bne.n	800135c <__eqdf2+0x3c>
 8001378:	2001      	movs	r0, #1
 800137a:	45c8      	cmp	r8, r9
 800137c:	d1ee      	bne.n	800135c <__eqdf2+0x3c>
 800137e:	4299      	cmp	r1, r3
 8001380:	d006      	beq.n	8001390 <__eqdf2+0x70>
 8001382:	2c00      	cmp	r4, #0
 8001384:	d1ea      	bne.n	800135c <__eqdf2+0x3c>
 8001386:	433e      	orrs	r6, r7
 8001388:	0030      	movs	r0, r6
 800138a:	1e46      	subs	r6, r0, #1
 800138c:	41b0      	sbcs	r0, r6
 800138e:	e7e5      	b.n	800135c <__eqdf2+0x3c>
 8001390:	2000      	movs	r0, #0
 8001392:	e7e3      	b.n	800135c <__eqdf2+0x3c>
 8001394:	000007ff 	.word	0x000007ff

08001398 <__gedf2>:
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	464e      	mov	r6, r9
 800139c:	4645      	mov	r5, r8
 800139e:	4657      	mov	r7, sl
 80013a0:	46de      	mov	lr, fp
 80013a2:	0004      	movs	r4, r0
 80013a4:	0018      	movs	r0, r3
 80013a6:	b5e0      	push	{r5, r6, r7, lr}
 80013a8:	0016      	movs	r6, r2
 80013aa:	031b      	lsls	r3, r3, #12
 80013ac:	0b1b      	lsrs	r3, r3, #12
 80013ae:	4d32      	ldr	r5, [pc, #200]	; (8001478 <__gedf2+0xe0>)
 80013b0:	030f      	lsls	r7, r1, #12
 80013b2:	004a      	lsls	r2, r1, #1
 80013b4:	4699      	mov	r9, r3
 80013b6:	0043      	lsls	r3, r0, #1
 80013b8:	46a4      	mov	ip, r4
 80013ba:	46b0      	mov	r8, r6
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	0d52      	lsrs	r2, r2, #21
 80013c0:	0fc9      	lsrs	r1, r1, #31
 80013c2:	0d5b      	lsrs	r3, r3, #21
 80013c4:	0fc0      	lsrs	r0, r0, #31
 80013c6:	42aa      	cmp	r2, r5
 80013c8:	d029      	beq.n	800141e <__gedf2+0x86>
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	d018      	beq.n	8001400 <__gedf2+0x68>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d12a      	bne.n	8001428 <__gedf2+0x90>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	46a3      	mov	fp, r4
 80013d6:	4265      	negs	r5, r4
 80013d8:	4165      	adcs	r5, r4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <__gedf2+0x4c>
 80013de:	464c      	mov	r4, r9
 80013e0:	4326      	orrs	r6, r4
 80013e2:	d027      	beq.n	8001434 <__gedf2+0x9c>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d115      	bne.n	8001414 <__gedf2+0x7c>
 80013e8:	4281      	cmp	r1, r0
 80013ea:	d028      	beq.n	800143e <__gedf2+0xa6>
 80013ec:	2002      	movs	r0, #2
 80013ee:	3901      	subs	r1, #1
 80013f0:	4008      	ands	r0, r1
 80013f2:	3801      	subs	r0, #1
 80013f4:	bcf0      	pop	{r4, r5, r6, r7}
 80013f6:	46bb      	mov	fp, r7
 80013f8:	46b2      	mov	sl, r6
 80013fa:	46a9      	mov	r9, r5
 80013fc:	46a0      	mov	r8, r4
 80013fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001400:	464d      	mov	r5, r9
 8001402:	432e      	orrs	r6, r5
 8001404:	d12f      	bne.n	8001466 <__gedf2+0xce>
 8001406:	2a00      	cmp	r2, #0
 8001408:	d1ee      	bne.n	80013e8 <__gedf2+0x50>
 800140a:	433c      	orrs	r4, r7
 800140c:	4265      	negs	r5, r4
 800140e:	4165      	adcs	r5, r4
 8001410:	2d00      	cmp	r5, #0
 8001412:	d0e9      	beq.n	80013e8 <__gedf2+0x50>
 8001414:	2800      	cmp	r0, #0
 8001416:	d1ed      	bne.n	80013f4 <__gedf2+0x5c>
 8001418:	2001      	movs	r0, #1
 800141a:	4240      	negs	r0, r0
 800141c:	e7ea      	b.n	80013f4 <__gedf2+0x5c>
 800141e:	003d      	movs	r5, r7
 8001420:	4325      	orrs	r5, r4
 8001422:	d120      	bne.n	8001466 <__gedf2+0xce>
 8001424:	4293      	cmp	r3, r2
 8001426:	d0eb      	beq.n	8001400 <__gedf2+0x68>
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1dd      	bne.n	80013e8 <__gedf2+0x50>
 800142c:	464c      	mov	r4, r9
 800142e:	4326      	orrs	r6, r4
 8001430:	d1da      	bne.n	80013e8 <__gedf2+0x50>
 8001432:	e7db      	b.n	80013ec <__gedf2+0x54>
 8001434:	465b      	mov	r3, fp
 8001436:	2000      	movs	r0, #0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0db      	beq.n	80013f4 <__gedf2+0x5c>
 800143c:	e7d6      	b.n	80013ec <__gedf2+0x54>
 800143e:	429a      	cmp	r2, r3
 8001440:	dc0a      	bgt.n	8001458 <__gedf2+0xc0>
 8001442:	dbe7      	blt.n	8001414 <__gedf2+0x7c>
 8001444:	454f      	cmp	r7, r9
 8001446:	d8d1      	bhi.n	80013ec <__gedf2+0x54>
 8001448:	d010      	beq.n	800146c <__gedf2+0xd4>
 800144a:	2000      	movs	r0, #0
 800144c:	454f      	cmp	r7, r9
 800144e:	d2d1      	bcs.n	80013f4 <__gedf2+0x5c>
 8001450:	2900      	cmp	r1, #0
 8001452:	d0e1      	beq.n	8001418 <__gedf2+0x80>
 8001454:	0008      	movs	r0, r1
 8001456:	e7cd      	b.n	80013f4 <__gedf2+0x5c>
 8001458:	4243      	negs	r3, r0
 800145a:	4158      	adcs	r0, r3
 800145c:	2302      	movs	r3, #2
 800145e:	4240      	negs	r0, r0
 8001460:	4018      	ands	r0, r3
 8001462:	3801      	subs	r0, #1
 8001464:	e7c6      	b.n	80013f4 <__gedf2+0x5c>
 8001466:	2002      	movs	r0, #2
 8001468:	4240      	negs	r0, r0
 800146a:	e7c3      	b.n	80013f4 <__gedf2+0x5c>
 800146c:	45c4      	cmp	ip, r8
 800146e:	d8bd      	bhi.n	80013ec <__gedf2+0x54>
 8001470:	2000      	movs	r0, #0
 8001472:	45c4      	cmp	ip, r8
 8001474:	d2be      	bcs.n	80013f4 <__gedf2+0x5c>
 8001476:	e7eb      	b.n	8001450 <__gedf2+0xb8>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__ledf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	464e      	mov	r6, r9
 8001480:	4645      	mov	r5, r8
 8001482:	4657      	mov	r7, sl
 8001484:	46de      	mov	lr, fp
 8001486:	0004      	movs	r4, r0
 8001488:	0018      	movs	r0, r3
 800148a:	b5e0      	push	{r5, r6, r7, lr}
 800148c:	0016      	movs	r6, r2
 800148e:	031b      	lsls	r3, r3, #12
 8001490:	0b1b      	lsrs	r3, r3, #12
 8001492:	4d31      	ldr	r5, [pc, #196]	; (8001558 <__ledf2+0xdc>)
 8001494:	030f      	lsls	r7, r1, #12
 8001496:	004a      	lsls	r2, r1, #1
 8001498:	4699      	mov	r9, r3
 800149a:	0043      	lsls	r3, r0, #1
 800149c:	46a4      	mov	ip, r4
 800149e:	46b0      	mov	r8, r6
 80014a0:	0b3f      	lsrs	r7, r7, #12
 80014a2:	0d52      	lsrs	r2, r2, #21
 80014a4:	0fc9      	lsrs	r1, r1, #31
 80014a6:	0d5b      	lsrs	r3, r3, #21
 80014a8:	0fc0      	lsrs	r0, r0, #31
 80014aa:	42aa      	cmp	r2, r5
 80014ac:	d011      	beq.n	80014d2 <__ledf2+0x56>
 80014ae:	42ab      	cmp	r3, r5
 80014b0:	d014      	beq.n	80014dc <__ledf2+0x60>
 80014b2:	2a00      	cmp	r2, #0
 80014b4:	d12f      	bne.n	8001516 <__ledf2+0x9a>
 80014b6:	433c      	orrs	r4, r7
 80014b8:	46a3      	mov	fp, r4
 80014ba:	4265      	negs	r5, r4
 80014bc:	4165      	adcs	r5, r4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d114      	bne.n	80014ec <__ledf2+0x70>
 80014c2:	464c      	mov	r4, r9
 80014c4:	4326      	orrs	r6, r4
 80014c6:	d111      	bne.n	80014ec <__ledf2+0x70>
 80014c8:	465b      	mov	r3, fp
 80014ca:	2000      	movs	r0, #0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d017      	beq.n	8001500 <__ledf2+0x84>
 80014d0:	e010      	b.n	80014f4 <__ledf2+0x78>
 80014d2:	003d      	movs	r5, r7
 80014d4:	4325      	orrs	r5, r4
 80014d6:	d112      	bne.n	80014fe <__ledf2+0x82>
 80014d8:	4293      	cmp	r3, r2
 80014da:	d11c      	bne.n	8001516 <__ledf2+0x9a>
 80014dc:	464d      	mov	r5, r9
 80014de:	432e      	orrs	r6, r5
 80014e0:	d10d      	bne.n	80014fe <__ledf2+0x82>
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	d104      	bne.n	80014f0 <__ledf2+0x74>
 80014e6:	433c      	orrs	r4, r7
 80014e8:	4265      	negs	r5, r4
 80014ea:	4165      	adcs	r5, r4
 80014ec:	2d00      	cmp	r5, #0
 80014ee:	d10d      	bne.n	800150c <__ledf2+0x90>
 80014f0:	4281      	cmp	r1, r0
 80014f2:	d016      	beq.n	8001522 <__ledf2+0xa6>
 80014f4:	2002      	movs	r0, #2
 80014f6:	3901      	subs	r1, #1
 80014f8:	4008      	ands	r0, r1
 80014fa:	3801      	subs	r0, #1
 80014fc:	e000      	b.n	8001500 <__ledf2+0x84>
 80014fe:	2002      	movs	r0, #2
 8001500:	bcf0      	pop	{r4, r5, r6, r7}
 8001502:	46bb      	mov	fp, r7
 8001504:	46b2      	mov	sl, r6
 8001506:	46a9      	mov	r9, r5
 8001508:	46a0      	mov	r8, r4
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f7      	bne.n	8001500 <__ledf2+0x84>
 8001510:	2001      	movs	r0, #1
 8001512:	4240      	negs	r0, r0
 8001514:	e7f4      	b.n	8001500 <__ledf2+0x84>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ea      	bne.n	80014f0 <__ledf2+0x74>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d1e7      	bne.n	80014f0 <__ledf2+0x74>
 8001520:	e7e8      	b.n	80014f4 <__ledf2+0x78>
 8001522:	429a      	cmp	r2, r3
 8001524:	dd06      	ble.n	8001534 <__ledf2+0xb8>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	2302      	movs	r3, #2
 800152c:	4240      	negs	r0, r0
 800152e:	4018      	ands	r0, r3
 8001530:	3801      	subs	r0, #1
 8001532:	e7e5      	b.n	8001500 <__ledf2+0x84>
 8001534:	429a      	cmp	r2, r3
 8001536:	dbe9      	blt.n	800150c <__ledf2+0x90>
 8001538:	454f      	cmp	r7, r9
 800153a:	d8db      	bhi.n	80014f4 <__ledf2+0x78>
 800153c:	d006      	beq.n	800154c <__ledf2+0xd0>
 800153e:	2000      	movs	r0, #0
 8001540:	454f      	cmp	r7, r9
 8001542:	d2dd      	bcs.n	8001500 <__ledf2+0x84>
 8001544:	2900      	cmp	r1, #0
 8001546:	d0e3      	beq.n	8001510 <__ledf2+0x94>
 8001548:	0008      	movs	r0, r1
 800154a:	e7d9      	b.n	8001500 <__ledf2+0x84>
 800154c:	45c4      	cmp	ip, r8
 800154e:	d8d1      	bhi.n	80014f4 <__ledf2+0x78>
 8001550:	2000      	movs	r0, #0
 8001552:	45c4      	cmp	ip, r8
 8001554:	d2d4      	bcs.n	8001500 <__ledf2+0x84>
 8001556:	e7f5      	b.n	8001544 <__ledf2+0xc8>
 8001558:	000007ff 	.word	0x000007ff

0800155c <__aeabi_dmul>:
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	4657      	mov	r7, sl
 8001560:	464e      	mov	r6, r9
 8001562:	4645      	mov	r5, r8
 8001564:	46de      	mov	lr, fp
 8001566:	b5e0      	push	{r5, r6, r7, lr}
 8001568:	4698      	mov	r8, r3
 800156a:	030c      	lsls	r4, r1, #12
 800156c:	004b      	lsls	r3, r1, #1
 800156e:	0006      	movs	r6, r0
 8001570:	4692      	mov	sl, r2
 8001572:	b087      	sub	sp, #28
 8001574:	0b24      	lsrs	r4, r4, #12
 8001576:	0d5b      	lsrs	r3, r3, #21
 8001578:	0fcf      	lsrs	r7, r1, #31
 800157a:	2b00      	cmp	r3, #0
 800157c:	d06c      	beq.n	8001658 <__aeabi_dmul+0xfc>
 800157e:	4add      	ldr	r2, [pc, #884]	; (80018f4 <__aeabi_dmul+0x398>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d100      	bne.n	8001586 <__aeabi_dmul+0x2a>
 8001584:	e086      	b.n	8001694 <__aeabi_dmul+0x138>
 8001586:	0f42      	lsrs	r2, r0, #29
 8001588:	00e4      	lsls	r4, r4, #3
 800158a:	4314      	orrs	r4, r2
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	0412      	lsls	r2, r2, #16
 8001590:	4314      	orrs	r4, r2
 8001592:	4ad9      	ldr	r2, [pc, #868]	; (80018f8 <__aeabi_dmul+0x39c>)
 8001594:	00c5      	lsls	r5, r0, #3
 8001596:	4694      	mov	ip, r2
 8001598:	4463      	add	r3, ip
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2300      	movs	r3, #0
 800159e:	4699      	mov	r9, r3
 80015a0:	469b      	mov	fp, r3
 80015a2:	4643      	mov	r3, r8
 80015a4:	4642      	mov	r2, r8
 80015a6:	031e      	lsls	r6, r3, #12
 80015a8:	0fd2      	lsrs	r2, r2, #31
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4650      	mov	r0, sl
 80015ae:	4690      	mov	r8, r2
 80015b0:	0b36      	lsrs	r6, r6, #12
 80015b2:	0d5b      	lsrs	r3, r3, #21
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dmul+0x5c>
 80015b6:	e078      	b.n	80016aa <__aeabi_dmul+0x14e>
 80015b8:	4ace      	ldr	r2, [pc, #824]	; (80018f4 <__aeabi_dmul+0x398>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01d      	beq.n	80015fa <__aeabi_dmul+0x9e>
 80015be:	49ce      	ldr	r1, [pc, #824]	; (80018f8 <__aeabi_dmul+0x39c>)
 80015c0:	0f42      	lsrs	r2, r0, #29
 80015c2:	468c      	mov	ip, r1
 80015c4:	9900      	ldr	r1, [sp, #0]
 80015c6:	4463      	add	r3, ip
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	468c      	mov	ip, r1
 80015cc:	4316      	orrs	r6, r2
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	449c      	add	ip, r3
 80015d2:	0412      	lsls	r2, r2, #16
 80015d4:	4663      	mov	r3, ip
 80015d6:	4316      	orrs	r6, r2
 80015d8:	00c2      	lsls	r2, r0, #3
 80015da:	2000      	movs	r0, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	3101      	adds	r1, #1
 80015e4:	468c      	mov	ip, r1
 80015e6:	4649      	mov	r1, r9
 80015e8:	407b      	eors	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	290f      	cmp	r1, #15
 80015ee:	d900      	bls.n	80015f2 <__aeabi_dmul+0x96>
 80015f0:	e07e      	b.n	80016f0 <__aeabi_dmul+0x194>
 80015f2:	4bc2      	ldr	r3, [pc, #776]	; (80018fc <__aeabi_dmul+0x3a0>)
 80015f4:	0089      	lsls	r1, r1, #2
 80015f6:	5859      	ldr	r1, [r3, r1]
 80015f8:	468f      	mov	pc, r1
 80015fa:	4652      	mov	r2, sl
 80015fc:	9b00      	ldr	r3, [sp, #0]
 80015fe:	4332      	orrs	r2, r6
 8001600:	d000      	beq.n	8001604 <__aeabi_dmul+0xa8>
 8001602:	e156      	b.n	80018b2 <__aeabi_dmul+0x356>
 8001604:	49bb      	ldr	r1, [pc, #748]	; (80018f4 <__aeabi_dmul+0x398>)
 8001606:	2600      	movs	r6, #0
 8001608:	468c      	mov	ip, r1
 800160a:	4463      	add	r3, ip
 800160c:	4649      	mov	r1, r9
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2302      	movs	r3, #2
 8001612:	4319      	orrs	r1, r3
 8001614:	4689      	mov	r9, r1
 8001616:	2002      	movs	r0, #2
 8001618:	e7e1      	b.n	80015de <__aeabi_dmul+0x82>
 800161a:	4643      	mov	r3, r8
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	0034      	movs	r4, r6
 8001620:	0015      	movs	r5, r2
 8001622:	4683      	mov	fp, r0
 8001624:	465b      	mov	r3, fp
 8001626:	2b02      	cmp	r3, #2
 8001628:	d05e      	beq.n	80016e8 <__aeabi_dmul+0x18c>
 800162a:	2b03      	cmp	r3, #3
 800162c:	d100      	bne.n	8001630 <__aeabi_dmul+0xd4>
 800162e:	e1f3      	b.n	8001a18 <__aeabi_dmul+0x4bc>
 8001630:	2b01      	cmp	r3, #1
 8001632:	d000      	beq.n	8001636 <__aeabi_dmul+0xda>
 8001634:	e118      	b.n	8001868 <__aeabi_dmul+0x30c>
 8001636:	2200      	movs	r2, #0
 8001638:	2400      	movs	r4, #0
 800163a:	2500      	movs	r5, #0
 800163c:	9b01      	ldr	r3, [sp, #4]
 800163e:	0512      	lsls	r2, r2, #20
 8001640:	4322      	orrs	r2, r4
 8001642:	07db      	lsls	r3, r3, #31
 8001644:	431a      	orrs	r2, r3
 8001646:	0028      	movs	r0, r5
 8001648:	0011      	movs	r1, r2
 800164a:	b007      	add	sp, #28
 800164c:	bcf0      	pop	{r4, r5, r6, r7}
 800164e:	46bb      	mov	fp, r7
 8001650:	46b2      	mov	sl, r6
 8001652:	46a9      	mov	r9, r5
 8001654:	46a0      	mov	r8, r4
 8001656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001658:	0025      	movs	r5, r4
 800165a:	4305      	orrs	r5, r0
 800165c:	d100      	bne.n	8001660 <__aeabi_dmul+0x104>
 800165e:	e141      	b.n	80018e4 <__aeabi_dmul+0x388>
 8001660:	2c00      	cmp	r4, #0
 8001662:	d100      	bne.n	8001666 <__aeabi_dmul+0x10a>
 8001664:	e1ad      	b.n	80019c2 <__aeabi_dmul+0x466>
 8001666:	0020      	movs	r0, r4
 8001668:	f000 fe20 	bl	80022ac <__clzsi2>
 800166c:	0001      	movs	r1, r0
 800166e:	0002      	movs	r2, r0
 8001670:	390b      	subs	r1, #11
 8001672:	231d      	movs	r3, #29
 8001674:	0010      	movs	r0, r2
 8001676:	1a5b      	subs	r3, r3, r1
 8001678:	0031      	movs	r1, r6
 800167a:	0035      	movs	r5, r6
 800167c:	3808      	subs	r0, #8
 800167e:	4084      	lsls	r4, r0
 8001680:	40d9      	lsrs	r1, r3
 8001682:	4085      	lsls	r5, r0
 8001684:	430c      	orrs	r4, r1
 8001686:	489e      	ldr	r0, [pc, #632]	; (8001900 <__aeabi_dmul+0x3a4>)
 8001688:	1a83      	subs	r3, r0, r2
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2300      	movs	r3, #0
 800168e:	4699      	mov	r9, r3
 8001690:	469b      	mov	fp, r3
 8001692:	e786      	b.n	80015a2 <__aeabi_dmul+0x46>
 8001694:	0005      	movs	r5, r0
 8001696:	4325      	orrs	r5, r4
 8001698:	d000      	beq.n	800169c <__aeabi_dmul+0x140>
 800169a:	e11c      	b.n	80018d6 <__aeabi_dmul+0x37a>
 800169c:	2208      	movs	r2, #8
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2302      	movs	r3, #2
 80016a2:	2400      	movs	r4, #0
 80016a4:	4691      	mov	r9, r2
 80016a6:	469b      	mov	fp, r3
 80016a8:	e77b      	b.n	80015a2 <__aeabi_dmul+0x46>
 80016aa:	4652      	mov	r2, sl
 80016ac:	4332      	orrs	r2, r6
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x156>
 80016b0:	e10a      	b.n	80018c8 <__aeabi_dmul+0x36c>
 80016b2:	2e00      	cmp	r6, #0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dmul+0x15c>
 80016b6:	e176      	b.n	80019a6 <__aeabi_dmul+0x44a>
 80016b8:	0030      	movs	r0, r6
 80016ba:	f000 fdf7 	bl	80022ac <__clzsi2>
 80016be:	0002      	movs	r2, r0
 80016c0:	3a0b      	subs	r2, #11
 80016c2:	231d      	movs	r3, #29
 80016c4:	0001      	movs	r1, r0
 80016c6:	1a9b      	subs	r3, r3, r2
 80016c8:	4652      	mov	r2, sl
 80016ca:	3908      	subs	r1, #8
 80016cc:	40da      	lsrs	r2, r3
 80016ce:	408e      	lsls	r6, r1
 80016d0:	4316      	orrs	r6, r2
 80016d2:	4652      	mov	r2, sl
 80016d4:	408a      	lsls	r2, r1
 80016d6:	9b00      	ldr	r3, [sp, #0]
 80016d8:	4989      	ldr	r1, [pc, #548]	; (8001900 <__aeabi_dmul+0x3a4>)
 80016da:	1a18      	subs	r0, r3, r0
 80016dc:	0003      	movs	r3, r0
 80016de:	468c      	mov	ip, r1
 80016e0:	4463      	add	r3, ip
 80016e2:	2000      	movs	r0, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	e77a      	b.n	80015de <__aeabi_dmul+0x82>
 80016e8:	2400      	movs	r4, #0
 80016ea:	2500      	movs	r5, #0
 80016ec:	4a81      	ldr	r2, [pc, #516]	; (80018f4 <__aeabi_dmul+0x398>)
 80016ee:	e7a5      	b.n	800163c <__aeabi_dmul+0xe0>
 80016f0:	0c2f      	lsrs	r7, r5, #16
 80016f2:	042d      	lsls	r5, r5, #16
 80016f4:	0c2d      	lsrs	r5, r5, #16
 80016f6:	002b      	movs	r3, r5
 80016f8:	0c11      	lsrs	r1, r2, #16
 80016fa:	0412      	lsls	r2, r2, #16
 80016fc:	0c12      	lsrs	r2, r2, #16
 80016fe:	4353      	muls	r3, r2
 8001700:	4698      	mov	r8, r3
 8001702:	0013      	movs	r3, r2
 8001704:	0028      	movs	r0, r5
 8001706:	437b      	muls	r3, r7
 8001708:	4699      	mov	r9, r3
 800170a:	4348      	muls	r0, r1
 800170c:	4448      	add	r0, r9
 800170e:	4683      	mov	fp, r0
 8001710:	4640      	mov	r0, r8
 8001712:	000b      	movs	r3, r1
 8001714:	0c00      	lsrs	r0, r0, #16
 8001716:	4682      	mov	sl, r0
 8001718:	4658      	mov	r0, fp
 800171a:	437b      	muls	r3, r7
 800171c:	4450      	add	r0, sl
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	4581      	cmp	r9, r0
 8001722:	d906      	bls.n	8001732 <__aeabi_dmul+0x1d6>
 8001724:	469a      	mov	sl, r3
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	4699      	mov	r9, r3
 800172c:	44ca      	add	sl, r9
 800172e:	4653      	mov	r3, sl
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	0c03      	lsrs	r3, r0, #16
 8001734:	469b      	mov	fp, r3
 8001736:	4643      	mov	r3, r8
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	0400      	lsls	r0, r0, #16
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	4698      	mov	r8, r3
 8001740:	0003      	movs	r3, r0
 8001742:	4443      	add	r3, r8
 8001744:	9304      	str	r3, [sp, #16]
 8001746:	0c33      	lsrs	r3, r6, #16
 8001748:	4699      	mov	r9, r3
 800174a:	002b      	movs	r3, r5
 800174c:	0436      	lsls	r6, r6, #16
 800174e:	0c36      	lsrs	r6, r6, #16
 8001750:	4373      	muls	r3, r6
 8001752:	4698      	mov	r8, r3
 8001754:	0033      	movs	r3, r6
 8001756:	437b      	muls	r3, r7
 8001758:	469a      	mov	sl, r3
 800175a:	464b      	mov	r3, r9
 800175c:	435d      	muls	r5, r3
 800175e:	435f      	muls	r7, r3
 8001760:	4643      	mov	r3, r8
 8001762:	4455      	add	r5, sl
 8001764:	0c18      	lsrs	r0, r3, #16
 8001766:	1940      	adds	r0, r0, r5
 8001768:	4582      	cmp	sl, r0
 800176a:	d903      	bls.n	8001774 <__aeabi_dmul+0x218>
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	469a      	mov	sl, r3
 8001772:	4457      	add	r7, sl
 8001774:	0c05      	lsrs	r5, r0, #16
 8001776:	19eb      	adds	r3, r5, r7
 8001778:	9305      	str	r3, [sp, #20]
 800177a:	4643      	mov	r3, r8
 800177c:	041d      	lsls	r5, r3, #16
 800177e:	0c2d      	lsrs	r5, r5, #16
 8001780:	0400      	lsls	r0, r0, #16
 8001782:	1940      	adds	r0, r0, r5
 8001784:	0c25      	lsrs	r5, r4, #16
 8001786:	0424      	lsls	r4, r4, #16
 8001788:	0c24      	lsrs	r4, r4, #16
 800178a:	0027      	movs	r7, r4
 800178c:	4357      	muls	r7, r2
 800178e:	436a      	muls	r2, r5
 8001790:	4690      	mov	r8, r2
 8001792:	002a      	movs	r2, r5
 8001794:	0c3b      	lsrs	r3, r7, #16
 8001796:	469a      	mov	sl, r3
 8001798:	434a      	muls	r2, r1
 800179a:	4361      	muls	r1, r4
 800179c:	4441      	add	r1, r8
 800179e:	4451      	add	r1, sl
 80017a0:	4483      	add	fp, r0
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x252>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	4698      	mov	r8, r3
 80017ac:	4442      	add	r2, r8
 80017ae:	043f      	lsls	r7, r7, #16
 80017b0:	0c0b      	lsrs	r3, r1, #16
 80017b2:	0c3f      	lsrs	r7, r7, #16
 80017b4:	0409      	lsls	r1, r1, #16
 80017b6:	19c9      	adds	r1, r1, r7
 80017b8:	0027      	movs	r7, r4
 80017ba:	4698      	mov	r8, r3
 80017bc:	464b      	mov	r3, r9
 80017be:	4377      	muls	r7, r6
 80017c0:	435c      	muls	r4, r3
 80017c2:	436e      	muls	r6, r5
 80017c4:	435d      	muls	r5, r3
 80017c6:	0c3b      	lsrs	r3, r7, #16
 80017c8:	4699      	mov	r9, r3
 80017ca:	19a4      	adds	r4, r4, r6
 80017cc:	444c      	add	r4, r9
 80017ce:	4442      	add	r2, r8
 80017d0:	9503      	str	r5, [sp, #12]
 80017d2:	42a6      	cmp	r6, r4
 80017d4:	d904      	bls.n	80017e0 <__aeabi_dmul+0x284>
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	025b      	lsls	r3, r3, #9
 80017da:	4698      	mov	r8, r3
 80017dc:	4445      	add	r5, r8
 80017de:	9503      	str	r5, [sp, #12]
 80017e0:	9b02      	ldr	r3, [sp, #8]
 80017e2:	043f      	lsls	r7, r7, #16
 80017e4:	445b      	add	r3, fp
 80017e6:	001e      	movs	r6, r3
 80017e8:	4283      	cmp	r3, r0
 80017ea:	4180      	sbcs	r0, r0
 80017ec:	0423      	lsls	r3, r4, #16
 80017ee:	4698      	mov	r8, r3
 80017f0:	9b05      	ldr	r3, [sp, #20]
 80017f2:	0c3f      	lsrs	r7, r7, #16
 80017f4:	4447      	add	r7, r8
 80017f6:	4698      	mov	r8, r3
 80017f8:	1876      	adds	r6, r6, r1
 80017fa:	428e      	cmp	r6, r1
 80017fc:	4189      	sbcs	r1, r1
 80017fe:	4447      	add	r7, r8
 8001800:	4240      	negs	r0, r0
 8001802:	183d      	adds	r5, r7, r0
 8001804:	46a8      	mov	r8, r5
 8001806:	4693      	mov	fp, r2
 8001808:	4249      	negs	r1, r1
 800180a:	468a      	mov	sl, r1
 800180c:	44c3      	add	fp, r8
 800180e:	429f      	cmp	r7, r3
 8001810:	41bf      	sbcs	r7, r7
 8001812:	4580      	cmp	r8, r0
 8001814:	4180      	sbcs	r0, r0
 8001816:	9b03      	ldr	r3, [sp, #12]
 8001818:	44da      	add	sl, fp
 800181a:	4698      	mov	r8, r3
 800181c:	4653      	mov	r3, sl
 800181e:	4240      	negs	r0, r0
 8001820:	427f      	negs	r7, r7
 8001822:	4307      	orrs	r7, r0
 8001824:	0c24      	lsrs	r4, r4, #16
 8001826:	4593      	cmp	fp, r2
 8001828:	4192      	sbcs	r2, r2
 800182a:	458a      	cmp	sl, r1
 800182c:	4189      	sbcs	r1, r1
 800182e:	193f      	adds	r7, r7, r4
 8001830:	0ddc      	lsrs	r4, r3, #23
 8001832:	9b04      	ldr	r3, [sp, #16]
 8001834:	0275      	lsls	r5, r6, #9
 8001836:	431d      	orrs	r5, r3
 8001838:	1e68      	subs	r0, r5, #1
 800183a:	4185      	sbcs	r5, r0
 800183c:	4653      	mov	r3, sl
 800183e:	4252      	negs	r2, r2
 8001840:	4249      	negs	r1, r1
 8001842:	430a      	orrs	r2, r1
 8001844:	18bf      	adds	r7, r7, r2
 8001846:	4447      	add	r7, r8
 8001848:	0df6      	lsrs	r6, r6, #23
 800184a:	027f      	lsls	r7, r7, #9
 800184c:	4335      	orrs	r5, r6
 800184e:	025a      	lsls	r2, r3, #9
 8001850:	433c      	orrs	r4, r7
 8001852:	4315      	orrs	r5, r2
 8001854:	01fb      	lsls	r3, r7, #7
 8001856:	d400      	bmi.n	800185a <__aeabi_dmul+0x2fe>
 8001858:	e0c1      	b.n	80019de <__aeabi_dmul+0x482>
 800185a:	2101      	movs	r1, #1
 800185c:	086a      	lsrs	r2, r5, #1
 800185e:	400d      	ands	r5, r1
 8001860:	4315      	orrs	r5, r2
 8001862:	07e2      	lsls	r2, r4, #31
 8001864:	4315      	orrs	r5, r2
 8001866:	0864      	lsrs	r4, r4, #1
 8001868:	4926      	ldr	r1, [pc, #152]	; (8001904 <__aeabi_dmul+0x3a8>)
 800186a:	4461      	add	r1, ip
 800186c:	2900      	cmp	r1, #0
 800186e:	dd56      	ble.n	800191e <__aeabi_dmul+0x3c2>
 8001870:	076b      	lsls	r3, r5, #29
 8001872:	d009      	beq.n	8001888 <__aeabi_dmul+0x32c>
 8001874:	220f      	movs	r2, #15
 8001876:	402a      	ands	r2, r5
 8001878:	2a04      	cmp	r2, #4
 800187a:	d005      	beq.n	8001888 <__aeabi_dmul+0x32c>
 800187c:	1d2a      	adds	r2, r5, #4
 800187e:	42aa      	cmp	r2, r5
 8001880:	41ad      	sbcs	r5, r5
 8001882:	426d      	negs	r5, r5
 8001884:	1964      	adds	r4, r4, r5
 8001886:	0015      	movs	r5, r2
 8001888:	01e3      	lsls	r3, r4, #7
 800188a:	d504      	bpl.n	8001896 <__aeabi_dmul+0x33a>
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <__aeabi_dmul+0x3ac>)
 8001890:	00c9      	lsls	r1, r1, #3
 8001892:	4014      	ands	r4, r2
 8001894:	4461      	add	r1, ip
 8001896:	4a1d      	ldr	r2, [pc, #116]	; (800190c <__aeabi_dmul+0x3b0>)
 8001898:	4291      	cmp	r1, r2
 800189a:	dd00      	ble.n	800189e <__aeabi_dmul+0x342>
 800189c:	e724      	b.n	80016e8 <__aeabi_dmul+0x18c>
 800189e:	0762      	lsls	r2, r4, #29
 80018a0:	08ed      	lsrs	r5, r5, #3
 80018a2:	0264      	lsls	r4, r4, #9
 80018a4:	0549      	lsls	r1, r1, #21
 80018a6:	4315      	orrs	r5, r2
 80018a8:	0b24      	lsrs	r4, r4, #12
 80018aa:	0d4a      	lsrs	r2, r1, #21
 80018ac:	e6c6      	b.n	800163c <__aeabi_dmul+0xe0>
 80018ae:	9701      	str	r7, [sp, #4]
 80018b0:	e6b8      	b.n	8001624 <__aeabi_dmul+0xc8>
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <__aeabi_dmul+0x398>)
 80018b4:	2003      	movs	r0, #3
 80018b6:	4694      	mov	ip, r2
 80018b8:	4463      	add	r3, ip
 80018ba:	464a      	mov	r2, r9
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2303      	movs	r3, #3
 80018c0:	431a      	orrs	r2, r3
 80018c2:	4691      	mov	r9, r2
 80018c4:	4652      	mov	r2, sl
 80018c6:	e68a      	b.n	80015de <__aeabi_dmul+0x82>
 80018c8:	4649      	mov	r1, r9
 80018ca:	2301      	movs	r3, #1
 80018cc:	4319      	orrs	r1, r3
 80018ce:	4689      	mov	r9, r1
 80018d0:	2600      	movs	r6, #0
 80018d2:	2001      	movs	r0, #1
 80018d4:	e683      	b.n	80015de <__aeabi_dmul+0x82>
 80018d6:	220c      	movs	r2, #12
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2303      	movs	r3, #3
 80018dc:	0005      	movs	r5, r0
 80018de:	4691      	mov	r9, r2
 80018e0:	469b      	mov	fp, r3
 80018e2:	e65e      	b.n	80015a2 <__aeabi_dmul+0x46>
 80018e4:	2304      	movs	r3, #4
 80018e6:	4699      	mov	r9, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	2400      	movs	r4, #0
 80018f0:	469b      	mov	fp, r3
 80018f2:	e656      	b.n	80015a2 <__aeabi_dmul+0x46>
 80018f4:	000007ff 	.word	0x000007ff
 80018f8:	fffffc01 	.word	0xfffffc01
 80018fc:	0800ed00 	.word	0x0800ed00
 8001900:	fffffc0d 	.word	0xfffffc0d
 8001904:	000003ff 	.word	0x000003ff
 8001908:	feffffff 	.word	0xfeffffff
 800190c:	000007fe 	.word	0x000007fe
 8001910:	2300      	movs	r3, #0
 8001912:	2480      	movs	r4, #128	; 0x80
 8001914:	2500      	movs	r5, #0
 8001916:	4a44      	ldr	r2, [pc, #272]	; (8001a28 <__aeabi_dmul+0x4cc>)
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	0324      	lsls	r4, r4, #12
 800191c:	e68e      	b.n	800163c <__aeabi_dmul+0xe0>
 800191e:	2001      	movs	r0, #1
 8001920:	1a40      	subs	r0, r0, r1
 8001922:	2838      	cmp	r0, #56	; 0x38
 8001924:	dd00      	ble.n	8001928 <__aeabi_dmul+0x3cc>
 8001926:	e686      	b.n	8001636 <__aeabi_dmul+0xda>
 8001928:	281f      	cmp	r0, #31
 800192a:	dd5b      	ble.n	80019e4 <__aeabi_dmul+0x488>
 800192c:	221f      	movs	r2, #31
 800192e:	0023      	movs	r3, r4
 8001930:	4252      	negs	r2, r2
 8001932:	1a51      	subs	r1, r2, r1
 8001934:	40cb      	lsrs	r3, r1
 8001936:	0019      	movs	r1, r3
 8001938:	2820      	cmp	r0, #32
 800193a:	d003      	beq.n	8001944 <__aeabi_dmul+0x3e8>
 800193c:	4a3b      	ldr	r2, [pc, #236]	; (8001a2c <__aeabi_dmul+0x4d0>)
 800193e:	4462      	add	r2, ip
 8001940:	4094      	lsls	r4, r2
 8001942:	4325      	orrs	r5, r4
 8001944:	1e6a      	subs	r2, r5, #1
 8001946:	4195      	sbcs	r5, r2
 8001948:	002a      	movs	r2, r5
 800194a:	430a      	orrs	r2, r1
 800194c:	2107      	movs	r1, #7
 800194e:	000d      	movs	r5, r1
 8001950:	2400      	movs	r4, #0
 8001952:	4015      	ands	r5, r2
 8001954:	4211      	tst	r1, r2
 8001956:	d05b      	beq.n	8001a10 <__aeabi_dmul+0x4b4>
 8001958:	210f      	movs	r1, #15
 800195a:	2400      	movs	r4, #0
 800195c:	4011      	ands	r1, r2
 800195e:	2904      	cmp	r1, #4
 8001960:	d053      	beq.n	8001a0a <__aeabi_dmul+0x4ae>
 8001962:	1d11      	adds	r1, r2, #4
 8001964:	4291      	cmp	r1, r2
 8001966:	4192      	sbcs	r2, r2
 8001968:	4252      	negs	r2, r2
 800196a:	18a4      	adds	r4, r4, r2
 800196c:	000a      	movs	r2, r1
 800196e:	0223      	lsls	r3, r4, #8
 8001970:	d54b      	bpl.n	8001a0a <__aeabi_dmul+0x4ae>
 8001972:	2201      	movs	r2, #1
 8001974:	2400      	movs	r4, #0
 8001976:	2500      	movs	r5, #0
 8001978:	e660      	b.n	800163c <__aeabi_dmul+0xe0>
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	031b      	lsls	r3, r3, #12
 800197e:	421c      	tst	r4, r3
 8001980:	d009      	beq.n	8001996 <__aeabi_dmul+0x43a>
 8001982:	421e      	tst	r6, r3
 8001984:	d107      	bne.n	8001996 <__aeabi_dmul+0x43a>
 8001986:	4333      	orrs	r3, r6
 8001988:	031c      	lsls	r4, r3, #12
 800198a:	4643      	mov	r3, r8
 800198c:	0015      	movs	r5, r2
 800198e:	0b24      	lsrs	r4, r4, #12
 8001990:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <__aeabi_dmul+0x4cc>)
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	e652      	b.n	800163c <__aeabi_dmul+0xe0>
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	0312      	lsls	r2, r2, #12
 800199a:	4314      	orrs	r4, r2
 800199c:	0324      	lsls	r4, r4, #12
 800199e:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <__aeabi_dmul+0x4cc>)
 80019a0:	0b24      	lsrs	r4, r4, #12
 80019a2:	9701      	str	r7, [sp, #4]
 80019a4:	e64a      	b.n	800163c <__aeabi_dmul+0xe0>
 80019a6:	f000 fc81 	bl	80022ac <__clzsi2>
 80019aa:	0003      	movs	r3, r0
 80019ac:	001a      	movs	r2, r3
 80019ae:	3215      	adds	r2, #21
 80019b0:	3020      	adds	r0, #32
 80019b2:	2a1c      	cmp	r2, #28
 80019b4:	dc00      	bgt.n	80019b8 <__aeabi_dmul+0x45c>
 80019b6:	e684      	b.n	80016c2 <__aeabi_dmul+0x166>
 80019b8:	4656      	mov	r6, sl
 80019ba:	3b08      	subs	r3, #8
 80019bc:	2200      	movs	r2, #0
 80019be:	409e      	lsls	r6, r3
 80019c0:	e689      	b.n	80016d6 <__aeabi_dmul+0x17a>
 80019c2:	f000 fc73 	bl	80022ac <__clzsi2>
 80019c6:	0001      	movs	r1, r0
 80019c8:	0002      	movs	r2, r0
 80019ca:	3115      	adds	r1, #21
 80019cc:	3220      	adds	r2, #32
 80019ce:	291c      	cmp	r1, #28
 80019d0:	dc00      	bgt.n	80019d4 <__aeabi_dmul+0x478>
 80019d2:	e64e      	b.n	8001672 <__aeabi_dmul+0x116>
 80019d4:	0034      	movs	r4, r6
 80019d6:	3808      	subs	r0, #8
 80019d8:	2500      	movs	r5, #0
 80019da:	4084      	lsls	r4, r0
 80019dc:	e653      	b.n	8001686 <__aeabi_dmul+0x12a>
 80019de:	9b00      	ldr	r3, [sp, #0]
 80019e0:	469c      	mov	ip, r3
 80019e2:	e741      	b.n	8001868 <__aeabi_dmul+0x30c>
 80019e4:	4912      	ldr	r1, [pc, #72]	; (8001a30 <__aeabi_dmul+0x4d4>)
 80019e6:	0022      	movs	r2, r4
 80019e8:	4461      	add	r1, ip
 80019ea:	002e      	movs	r6, r5
 80019ec:	408d      	lsls	r5, r1
 80019ee:	408a      	lsls	r2, r1
 80019f0:	40c6      	lsrs	r6, r0
 80019f2:	1e69      	subs	r1, r5, #1
 80019f4:	418d      	sbcs	r5, r1
 80019f6:	4332      	orrs	r2, r6
 80019f8:	432a      	orrs	r2, r5
 80019fa:	40c4      	lsrs	r4, r0
 80019fc:	0753      	lsls	r3, r2, #29
 80019fe:	d0b6      	beq.n	800196e <__aeabi_dmul+0x412>
 8001a00:	210f      	movs	r1, #15
 8001a02:	4011      	ands	r1, r2
 8001a04:	2904      	cmp	r1, #4
 8001a06:	d1ac      	bne.n	8001962 <__aeabi_dmul+0x406>
 8001a08:	e7b1      	b.n	800196e <__aeabi_dmul+0x412>
 8001a0a:	0765      	lsls	r5, r4, #29
 8001a0c:	0264      	lsls	r4, r4, #9
 8001a0e:	0b24      	lsrs	r4, r4, #12
 8001a10:	08d2      	lsrs	r2, r2, #3
 8001a12:	4315      	orrs	r5, r2
 8001a14:	2200      	movs	r2, #0
 8001a16:	e611      	b.n	800163c <__aeabi_dmul+0xe0>
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	4314      	orrs	r4, r2
 8001a1e:	0324      	lsls	r4, r4, #12
 8001a20:	4a01      	ldr	r2, [pc, #4]	; (8001a28 <__aeabi_dmul+0x4cc>)
 8001a22:	0b24      	lsrs	r4, r4, #12
 8001a24:	e60a      	b.n	800163c <__aeabi_dmul+0xe0>
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	000007ff 	.word	0x000007ff
 8001a2c:	0000043e 	.word	0x0000043e
 8001a30:	0000041e 	.word	0x0000041e

08001a34 <__aeabi_dsub>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	4657      	mov	r7, sl
 8001a38:	464e      	mov	r6, r9
 8001a3a:	4645      	mov	r5, r8
 8001a3c:	46de      	mov	lr, fp
 8001a3e:	0004      	movs	r4, r0
 8001a40:	b5e0      	push	{r5, r6, r7, lr}
 8001a42:	001f      	movs	r7, r3
 8001a44:	0010      	movs	r0, r2
 8001a46:	030b      	lsls	r3, r1, #12
 8001a48:	0f62      	lsrs	r2, r4, #29
 8001a4a:	004e      	lsls	r6, r1, #1
 8001a4c:	0fcd      	lsrs	r5, r1, #31
 8001a4e:	0a5b      	lsrs	r3, r3, #9
 8001a50:	0339      	lsls	r1, r7, #12
 8001a52:	4313      	orrs	r3, r2
 8001a54:	0a49      	lsrs	r1, r1, #9
 8001a56:	00e2      	lsls	r2, r4, #3
 8001a58:	0f44      	lsrs	r4, r0, #29
 8001a5a:	4321      	orrs	r1, r4
 8001a5c:	4cc2      	ldr	r4, [pc, #776]	; (8001d68 <__aeabi_dsub+0x334>)
 8001a5e:	4691      	mov	r9, r2
 8001a60:	4692      	mov	sl, r2
 8001a62:	00c0      	lsls	r0, r0, #3
 8001a64:	007a      	lsls	r2, r7, #1
 8001a66:	4680      	mov	r8, r0
 8001a68:	0d76      	lsrs	r6, r6, #21
 8001a6a:	0d52      	lsrs	r2, r2, #21
 8001a6c:	0fff      	lsrs	r7, r7, #31
 8001a6e:	42a2      	cmp	r2, r4
 8001a70:	d100      	bne.n	8001a74 <__aeabi_dsub+0x40>
 8001a72:	e0b4      	b.n	8001bde <__aeabi_dsub+0x1aa>
 8001a74:	2401      	movs	r4, #1
 8001a76:	4067      	eors	r7, r4
 8001a78:	46bb      	mov	fp, r7
 8001a7a:	42bd      	cmp	r5, r7
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x4c>
 8001a7e:	e088      	b.n	8001b92 <__aeabi_dsub+0x15e>
 8001a80:	1ab4      	subs	r4, r6, r2
 8001a82:	46a4      	mov	ip, r4
 8001a84:	2c00      	cmp	r4, #0
 8001a86:	dc00      	bgt.n	8001a8a <__aeabi_dsub+0x56>
 8001a88:	e0b2      	b.n	8001bf0 <__aeabi_dsub+0x1bc>
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x5c>
 8001a8e:	e0c5      	b.n	8001c1c <__aeabi_dsub+0x1e8>
 8001a90:	4ab5      	ldr	r2, [pc, #724]	; (8001d68 <__aeabi_dsub+0x334>)
 8001a92:	4296      	cmp	r6, r2
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0x64>
 8001a96:	e28b      	b.n	8001fb0 <__aeabi_dsub+0x57c>
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	0412      	lsls	r2, r2, #16
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	4662      	mov	r2, ip
 8001aa0:	2a38      	cmp	r2, #56	; 0x38
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x72>
 8001aa4:	e1a1      	b.n	8001dea <__aeabi_dsub+0x3b6>
 8001aa6:	2a1f      	cmp	r2, #31
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_dsub+0x78>
 8001aaa:	e216      	b.n	8001eda <__aeabi_dsub+0x4a6>
 8001aac:	2720      	movs	r7, #32
 8001aae:	000c      	movs	r4, r1
 8001ab0:	1abf      	subs	r7, r7, r2
 8001ab2:	40bc      	lsls	r4, r7
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	46a0      	mov	r8, r4
 8001ab8:	4664      	mov	r4, ip
 8001aba:	40b8      	lsls	r0, r7
 8001abc:	40e2      	lsrs	r2, r4
 8001abe:	4644      	mov	r4, r8
 8001ac0:	4314      	orrs	r4, r2
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	1e50      	subs	r0, r2, #1
 8001ac6:	4182      	sbcs	r2, r0
 8001ac8:	4660      	mov	r0, ip
 8001aca:	40c1      	lsrs	r1, r0
 8001acc:	4322      	orrs	r2, r4
 8001ace:	1a5b      	subs	r3, r3, r1
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	1a8c      	subs	r4, r1, r2
 8001ad4:	45a1      	cmp	r9, r4
 8001ad6:	4192      	sbcs	r2, r2
 8001ad8:	4252      	negs	r2, r2
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	4698      	mov	r8, r3
 8001ade:	4643      	mov	r3, r8
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	d400      	bmi.n	8001ae6 <__aeabi_dsub+0xb2>
 8001ae4:	e117      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 8001ae6:	4643      	mov	r3, r8
 8001ae8:	025b      	lsls	r3, r3, #9
 8001aea:	0a5b      	lsrs	r3, r3, #9
 8001aec:	4698      	mov	r8, r3
 8001aee:	4643      	mov	r3, r8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0xc2>
 8001af4:	e16c      	b.n	8001dd0 <__aeabi_dsub+0x39c>
 8001af6:	4640      	mov	r0, r8
 8001af8:	f000 fbd8 	bl	80022ac <__clzsi2>
 8001afc:	0002      	movs	r2, r0
 8001afe:	3a08      	subs	r2, #8
 8001b00:	2120      	movs	r1, #32
 8001b02:	0020      	movs	r0, r4
 8001b04:	4643      	mov	r3, r8
 8001b06:	1a89      	subs	r1, r1, r2
 8001b08:	4093      	lsls	r3, r2
 8001b0a:	40c8      	lsrs	r0, r1
 8001b0c:	4094      	lsls	r4, r2
 8001b0e:	4303      	orrs	r3, r0
 8001b10:	4296      	cmp	r6, r2
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0xe2>
 8001b14:	e157      	b.n	8001dc6 <__aeabi_dsub+0x392>
 8001b16:	1b96      	subs	r6, r2, r6
 8001b18:	1c71      	adds	r1, r6, #1
 8001b1a:	291f      	cmp	r1, #31
 8001b1c:	dd00      	ble.n	8001b20 <__aeabi_dsub+0xec>
 8001b1e:	e1cb      	b.n	8001eb8 <__aeabi_dsub+0x484>
 8001b20:	2220      	movs	r2, #32
 8001b22:	0018      	movs	r0, r3
 8001b24:	0026      	movs	r6, r4
 8001b26:	1a52      	subs	r2, r2, r1
 8001b28:	4094      	lsls	r4, r2
 8001b2a:	4090      	lsls	r0, r2
 8001b2c:	40ce      	lsrs	r6, r1
 8001b2e:	40cb      	lsrs	r3, r1
 8001b30:	1e62      	subs	r2, r4, #1
 8001b32:	4194      	sbcs	r4, r2
 8001b34:	4330      	orrs	r0, r6
 8001b36:	4698      	mov	r8, r3
 8001b38:	2600      	movs	r6, #0
 8001b3a:	4304      	orrs	r4, r0
 8001b3c:	0763      	lsls	r3, r4, #29
 8001b3e:	d009      	beq.n	8001b54 <__aeabi_dsub+0x120>
 8001b40:	230f      	movs	r3, #15
 8001b42:	4023      	ands	r3, r4
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d005      	beq.n	8001b54 <__aeabi_dsub+0x120>
 8001b48:	1d23      	adds	r3, r4, #4
 8001b4a:	42a3      	cmp	r3, r4
 8001b4c:	41a4      	sbcs	r4, r4
 8001b4e:	4264      	negs	r4, r4
 8001b50:	44a0      	add	r8, r4
 8001b52:	001c      	movs	r4, r3
 8001b54:	4643      	mov	r3, r8
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	d400      	bmi.n	8001b5c <__aeabi_dsub+0x128>
 8001b5a:	e0df      	b.n	8001d1c <__aeabi_dsub+0x2e8>
 8001b5c:	4b82      	ldr	r3, [pc, #520]	; (8001d68 <__aeabi_dsub+0x334>)
 8001b5e:	3601      	adds	r6, #1
 8001b60:	429e      	cmp	r6, r3
 8001b62:	d100      	bne.n	8001b66 <__aeabi_dsub+0x132>
 8001b64:	e0fb      	b.n	8001d5e <__aeabi_dsub+0x32a>
 8001b66:	4642      	mov	r2, r8
 8001b68:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <__aeabi_dsub+0x338>)
 8001b6a:	08e4      	lsrs	r4, r4, #3
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	0571      	lsls	r1, r6, #21
 8001b72:	0752      	lsls	r2, r2, #29
 8001b74:	025b      	lsls	r3, r3, #9
 8001b76:	4322      	orrs	r2, r4
 8001b78:	0b1b      	lsrs	r3, r3, #12
 8001b7a:	0d49      	lsrs	r1, r1, #21
 8001b7c:	0509      	lsls	r1, r1, #20
 8001b7e:	07ed      	lsls	r5, r5, #31
 8001b80:	4319      	orrs	r1, r3
 8001b82:	4329      	orrs	r1, r5
 8001b84:	0010      	movs	r0, r2
 8001b86:	bcf0      	pop	{r4, r5, r6, r7}
 8001b88:	46bb      	mov	fp, r7
 8001b8a:	46b2      	mov	sl, r6
 8001b8c:	46a9      	mov	r9, r5
 8001b8e:	46a0      	mov	r8, r4
 8001b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b92:	1ab4      	subs	r4, r6, r2
 8001b94:	46a4      	mov	ip, r4
 8001b96:	2c00      	cmp	r4, #0
 8001b98:	dd58      	ble.n	8001c4c <__aeabi_dsub+0x218>
 8001b9a:	2a00      	cmp	r2, #0
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dsub+0x16c>
 8001b9e:	e09e      	b.n	8001cde <__aeabi_dsub+0x2aa>
 8001ba0:	4a71      	ldr	r2, [pc, #452]	; (8001d68 <__aeabi_dsub+0x334>)
 8001ba2:	4296      	cmp	r6, r2
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x174>
 8001ba6:	e13b      	b.n	8001e20 <__aeabi_dsub+0x3ec>
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	0412      	lsls	r2, r2, #16
 8001bac:	4311      	orrs	r1, r2
 8001bae:	4662      	mov	r2, ip
 8001bb0:	2a38      	cmp	r2, #56	; 0x38
 8001bb2:	dd00      	ble.n	8001bb6 <__aeabi_dsub+0x182>
 8001bb4:	e0c1      	b.n	8001d3a <__aeabi_dsub+0x306>
 8001bb6:	2a1f      	cmp	r2, #31
 8001bb8:	dc00      	bgt.n	8001bbc <__aeabi_dsub+0x188>
 8001bba:	e1bb      	b.n	8001f34 <__aeabi_dsub+0x500>
 8001bbc:	000c      	movs	r4, r1
 8001bbe:	3a20      	subs	r2, #32
 8001bc0:	40d4      	lsrs	r4, r2
 8001bc2:	0022      	movs	r2, r4
 8001bc4:	4664      	mov	r4, ip
 8001bc6:	2c20      	cmp	r4, #32
 8001bc8:	d004      	beq.n	8001bd4 <__aeabi_dsub+0x1a0>
 8001bca:	2740      	movs	r7, #64	; 0x40
 8001bcc:	1b3f      	subs	r7, r7, r4
 8001bce:	40b9      	lsls	r1, r7
 8001bd0:	4308      	orrs	r0, r1
 8001bd2:	4680      	mov	r8, r0
 8001bd4:	4644      	mov	r4, r8
 8001bd6:	1e61      	subs	r1, r4, #1
 8001bd8:	418c      	sbcs	r4, r1
 8001bda:	4314      	orrs	r4, r2
 8001bdc:	e0b1      	b.n	8001d42 <__aeabi_dsub+0x30e>
 8001bde:	000c      	movs	r4, r1
 8001be0:	4304      	orrs	r4, r0
 8001be2:	d02a      	beq.n	8001c3a <__aeabi_dsub+0x206>
 8001be4:	46bb      	mov	fp, r7
 8001be6:	42bd      	cmp	r5, r7
 8001be8:	d02d      	beq.n	8001c46 <__aeabi_dsub+0x212>
 8001bea:	4c61      	ldr	r4, [pc, #388]	; (8001d70 <__aeabi_dsub+0x33c>)
 8001bec:	46a4      	mov	ip, r4
 8001bee:	44b4      	add	ip, r6
 8001bf0:	4664      	mov	r4, ip
 8001bf2:	2c00      	cmp	r4, #0
 8001bf4:	d05c      	beq.n	8001cb0 <__aeabi_dsub+0x27c>
 8001bf6:	1b94      	subs	r4, r2, r6
 8001bf8:	46a4      	mov	ip, r4
 8001bfa:	2e00      	cmp	r6, #0
 8001bfc:	d000      	beq.n	8001c00 <__aeabi_dsub+0x1cc>
 8001bfe:	e115      	b.n	8001e2c <__aeabi_dsub+0x3f8>
 8001c00:	464d      	mov	r5, r9
 8001c02:	431d      	orrs	r5, r3
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0x1d4>
 8001c06:	e1c3      	b.n	8001f90 <__aeabi_dsub+0x55c>
 8001c08:	1e65      	subs	r5, r4, #1
 8001c0a:	2c01      	cmp	r4, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x1dc>
 8001c0e:	e20c      	b.n	800202a <__aeabi_dsub+0x5f6>
 8001c10:	4e55      	ldr	r6, [pc, #340]	; (8001d68 <__aeabi_dsub+0x334>)
 8001c12:	42b4      	cmp	r4, r6
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1e4>
 8001c16:	e1f8      	b.n	800200a <__aeabi_dsub+0x5d6>
 8001c18:	46ac      	mov	ip, r5
 8001c1a:	e10e      	b.n	8001e3a <__aeabi_dsub+0x406>
 8001c1c:	000a      	movs	r2, r1
 8001c1e:	4302      	orrs	r2, r0
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dsub+0x1f0>
 8001c22:	e136      	b.n	8001e92 <__aeabi_dsub+0x45e>
 8001c24:	0022      	movs	r2, r4
 8001c26:	3a01      	subs	r2, #1
 8001c28:	2c01      	cmp	r4, #1
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x1fa>
 8001c2c:	e1c6      	b.n	8001fbc <__aeabi_dsub+0x588>
 8001c2e:	4c4e      	ldr	r4, [pc, #312]	; (8001d68 <__aeabi_dsub+0x334>)
 8001c30:	45a4      	cmp	ip, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x202>
 8001c34:	e0f4      	b.n	8001e20 <__aeabi_dsub+0x3ec>
 8001c36:	4694      	mov	ip, r2
 8001c38:	e731      	b.n	8001a9e <__aeabi_dsub+0x6a>
 8001c3a:	2401      	movs	r4, #1
 8001c3c:	4067      	eors	r7, r4
 8001c3e:	46bb      	mov	fp, r7
 8001c40:	42bd      	cmp	r5, r7
 8001c42:	d000      	beq.n	8001c46 <__aeabi_dsub+0x212>
 8001c44:	e71c      	b.n	8001a80 <__aeabi_dsub+0x4c>
 8001c46:	4c4a      	ldr	r4, [pc, #296]	; (8001d70 <__aeabi_dsub+0x33c>)
 8001c48:	46a4      	mov	ip, r4
 8001c4a:	44b4      	add	ip, r6
 8001c4c:	4664      	mov	r4, ip
 8001c4e:	2c00      	cmp	r4, #0
 8001c50:	d100      	bne.n	8001c54 <__aeabi_dsub+0x220>
 8001c52:	e0cf      	b.n	8001df4 <__aeabi_dsub+0x3c0>
 8001c54:	1b94      	subs	r4, r2, r6
 8001c56:	46a4      	mov	ip, r4
 8001c58:	2e00      	cmp	r6, #0
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x22a>
 8001c5c:	e15c      	b.n	8001f18 <__aeabi_dsub+0x4e4>
 8001c5e:	4e42      	ldr	r6, [pc, #264]	; (8001d68 <__aeabi_dsub+0x334>)
 8001c60:	42b2      	cmp	r2, r6
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dsub+0x232>
 8001c64:	e1ec      	b.n	8002040 <__aeabi_dsub+0x60c>
 8001c66:	2680      	movs	r6, #128	; 0x80
 8001c68:	0436      	lsls	r6, r6, #16
 8001c6a:	4333      	orrs	r3, r6
 8001c6c:	4664      	mov	r4, ip
 8001c6e:	2c38      	cmp	r4, #56	; 0x38
 8001c70:	dd00      	ble.n	8001c74 <__aeabi_dsub+0x240>
 8001c72:	e1b3      	b.n	8001fdc <__aeabi_dsub+0x5a8>
 8001c74:	2c1f      	cmp	r4, #31
 8001c76:	dd00      	ble.n	8001c7a <__aeabi_dsub+0x246>
 8001c78:	e238      	b.n	80020ec <__aeabi_dsub+0x6b8>
 8001c7a:	2620      	movs	r6, #32
 8001c7c:	1b36      	subs	r6, r6, r4
 8001c7e:	001c      	movs	r4, r3
 8001c80:	40b4      	lsls	r4, r6
 8001c82:	464f      	mov	r7, r9
 8001c84:	46a0      	mov	r8, r4
 8001c86:	4664      	mov	r4, ip
 8001c88:	40e7      	lsrs	r7, r4
 8001c8a:	4644      	mov	r4, r8
 8001c8c:	433c      	orrs	r4, r7
 8001c8e:	464f      	mov	r7, r9
 8001c90:	40b7      	lsls	r7, r6
 8001c92:	003e      	movs	r6, r7
 8001c94:	1e77      	subs	r7, r6, #1
 8001c96:	41be      	sbcs	r6, r7
 8001c98:	4334      	orrs	r4, r6
 8001c9a:	4666      	mov	r6, ip
 8001c9c:	40f3      	lsrs	r3, r6
 8001c9e:	18c9      	adds	r1, r1, r3
 8001ca0:	1824      	adds	r4, r4, r0
 8001ca2:	4284      	cmp	r4, r0
 8001ca4:	419b      	sbcs	r3, r3
 8001ca6:	425b      	negs	r3, r3
 8001ca8:	4698      	mov	r8, r3
 8001caa:	0016      	movs	r6, r2
 8001cac:	4488      	add	r8, r1
 8001cae:	e04e      	b.n	8001d4e <__aeabi_dsub+0x31a>
 8001cb0:	4a30      	ldr	r2, [pc, #192]	; (8001d74 <__aeabi_dsub+0x340>)
 8001cb2:	1c74      	adds	r4, r6, #1
 8001cb4:	4214      	tst	r4, r2
 8001cb6:	d000      	beq.n	8001cba <__aeabi_dsub+0x286>
 8001cb8:	e0d6      	b.n	8001e68 <__aeabi_dsub+0x434>
 8001cba:	464a      	mov	r2, r9
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	2e00      	cmp	r6, #0
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dsub+0x290>
 8001cc2:	e15b      	b.n	8001f7c <__aeabi_dsub+0x548>
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d100      	bne.n	8001cca <__aeabi_dsub+0x296>
 8001cc8:	e1a5      	b.n	8002016 <__aeabi_dsub+0x5e2>
 8001cca:	000a      	movs	r2, r1
 8001ccc:	4302      	orrs	r2, r0
 8001cce:	d000      	beq.n	8001cd2 <__aeabi_dsub+0x29e>
 8001cd0:	e1bb      	b.n	800204a <__aeabi_dsub+0x616>
 8001cd2:	464a      	mov	r2, r9
 8001cd4:	0759      	lsls	r1, r3, #29
 8001cd6:	08d2      	lsrs	r2, r2, #3
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	08db      	lsrs	r3, r3, #3
 8001cdc:	e027      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 8001cde:	000a      	movs	r2, r1
 8001ce0:	4302      	orrs	r2, r0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x2b2>
 8001ce4:	e174      	b.n	8001fd0 <__aeabi_dsub+0x59c>
 8001ce6:	0022      	movs	r2, r4
 8001ce8:	3a01      	subs	r2, #1
 8001cea:	2c01      	cmp	r4, #1
 8001cec:	d005      	beq.n	8001cfa <__aeabi_dsub+0x2c6>
 8001cee:	4c1e      	ldr	r4, [pc, #120]	; (8001d68 <__aeabi_dsub+0x334>)
 8001cf0:	45a4      	cmp	ip, r4
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x2c2>
 8001cf4:	e094      	b.n	8001e20 <__aeabi_dsub+0x3ec>
 8001cf6:	4694      	mov	ip, r2
 8001cf8:	e759      	b.n	8001bae <__aeabi_dsub+0x17a>
 8001cfa:	4448      	add	r0, r9
 8001cfc:	4548      	cmp	r0, r9
 8001cfe:	4192      	sbcs	r2, r2
 8001d00:	185b      	adds	r3, r3, r1
 8001d02:	4698      	mov	r8, r3
 8001d04:	0004      	movs	r4, r0
 8001d06:	4252      	negs	r2, r2
 8001d08:	4490      	add	r8, r2
 8001d0a:	4643      	mov	r3, r8
 8001d0c:	2602      	movs	r6, #2
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	d500      	bpl.n	8001d14 <__aeabi_dsub+0x2e0>
 8001d12:	e0c4      	b.n	8001e9e <__aeabi_dsub+0x46a>
 8001d14:	3e01      	subs	r6, #1
 8001d16:	0763      	lsls	r3, r4, #29
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dsub+0x2e8>
 8001d1a:	e711      	b.n	8001b40 <__aeabi_dsub+0x10c>
 8001d1c:	4643      	mov	r3, r8
 8001d1e:	46b4      	mov	ip, r6
 8001d20:	0759      	lsls	r1, r3, #29
 8001d22:	08e2      	lsrs	r2, r4, #3
 8001d24:	430a      	orrs	r2, r1
 8001d26:	08db      	lsrs	r3, r3, #3
 8001d28:	490f      	ldr	r1, [pc, #60]	; (8001d68 <__aeabi_dsub+0x334>)
 8001d2a:	458c      	cmp	ip, r1
 8001d2c:	d040      	beq.n	8001db0 <__aeabi_dsub+0x37c>
 8001d2e:	4661      	mov	r1, ip
 8001d30:	031b      	lsls	r3, r3, #12
 8001d32:	0549      	lsls	r1, r1, #21
 8001d34:	0b1b      	lsrs	r3, r3, #12
 8001d36:	0d49      	lsrs	r1, r1, #21
 8001d38:	e720      	b.n	8001b7c <__aeabi_dsub+0x148>
 8001d3a:	4301      	orrs	r1, r0
 8001d3c:	000c      	movs	r4, r1
 8001d3e:	1e61      	subs	r1, r4, #1
 8001d40:	418c      	sbcs	r4, r1
 8001d42:	444c      	add	r4, r9
 8001d44:	454c      	cmp	r4, r9
 8001d46:	4192      	sbcs	r2, r2
 8001d48:	4252      	negs	r2, r2
 8001d4a:	4690      	mov	r8, r2
 8001d4c:	4498      	add	r8, r3
 8001d4e:	4643      	mov	r3, r8
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	d5e0      	bpl.n	8001d16 <__aeabi_dsub+0x2e2>
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__aeabi_dsub+0x334>)
 8001d56:	3601      	adds	r6, #1
 8001d58:	429e      	cmp	r6, r3
 8001d5a:	d000      	beq.n	8001d5e <__aeabi_dsub+0x32a>
 8001d5c:	e09f      	b.n	8001e9e <__aeabi_dsub+0x46a>
 8001d5e:	0031      	movs	r1, r6
 8001d60:	2300      	movs	r3, #0
 8001d62:	2200      	movs	r2, #0
 8001d64:	e70a      	b.n	8001b7c <__aeabi_dsub+0x148>
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	000007ff 	.word	0x000007ff
 8001d6c:	ff7fffff 	.word	0xff7fffff
 8001d70:	fffff801 	.word	0xfffff801
 8001d74:	000007fe 	.word	0x000007fe
 8001d78:	2a00      	cmp	r2, #0
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_dsub+0x34a>
 8001d7c:	e160      	b.n	8002040 <__aeabi_dsub+0x60c>
 8001d7e:	000a      	movs	r2, r1
 8001d80:	4302      	orrs	r2, r0
 8001d82:	d04d      	beq.n	8001e20 <__aeabi_dsub+0x3ec>
 8001d84:	464a      	mov	r2, r9
 8001d86:	075c      	lsls	r4, r3, #29
 8001d88:	08d2      	lsrs	r2, r2, #3
 8001d8a:	4322      	orrs	r2, r4
 8001d8c:	2480      	movs	r4, #128	; 0x80
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	0324      	lsls	r4, r4, #12
 8001d92:	4223      	tst	r3, r4
 8001d94:	d007      	beq.n	8001da6 <__aeabi_dsub+0x372>
 8001d96:	08ce      	lsrs	r6, r1, #3
 8001d98:	4226      	tst	r6, r4
 8001d9a:	d104      	bne.n	8001da6 <__aeabi_dsub+0x372>
 8001d9c:	465d      	mov	r5, fp
 8001d9e:	0033      	movs	r3, r6
 8001da0:	08c2      	lsrs	r2, r0, #3
 8001da2:	0749      	lsls	r1, r1, #29
 8001da4:	430a      	orrs	r2, r1
 8001da6:	0f51      	lsrs	r1, r2, #29
 8001da8:	00d2      	lsls	r2, r2, #3
 8001daa:	08d2      	lsrs	r2, r2, #3
 8001dac:	0749      	lsls	r1, r1, #29
 8001dae:	430a      	orrs	r2, r1
 8001db0:	0011      	movs	r1, r2
 8001db2:	4319      	orrs	r1, r3
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x384>
 8001db6:	e1c8      	b.n	800214a <__aeabi_dsub+0x716>
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	0309      	lsls	r1, r1, #12
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	031b      	lsls	r3, r3, #12
 8001dc0:	49d5      	ldr	r1, [pc, #852]	; (8002118 <__aeabi_dsub+0x6e4>)
 8001dc2:	0b1b      	lsrs	r3, r3, #12
 8001dc4:	e6da      	b.n	8001b7c <__aeabi_dsub+0x148>
 8001dc6:	49d5      	ldr	r1, [pc, #852]	; (800211c <__aeabi_dsub+0x6e8>)
 8001dc8:	1ab6      	subs	r6, r6, r2
 8001dca:	400b      	ands	r3, r1
 8001dcc:	4698      	mov	r8, r3
 8001dce:	e6b5      	b.n	8001b3c <__aeabi_dsub+0x108>
 8001dd0:	0020      	movs	r0, r4
 8001dd2:	f000 fa6b 	bl	80022ac <__clzsi2>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	3218      	adds	r2, #24
 8001dda:	2a1f      	cmp	r2, #31
 8001ddc:	dc00      	bgt.n	8001de0 <__aeabi_dsub+0x3ac>
 8001dde:	e68f      	b.n	8001b00 <__aeabi_dsub+0xcc>
 8001de0:	0023      	movs	r3, r4
 8001de2:	3808      	subs	r0, #8
 8001de4:	4083      	lsls	r3, r0
 8001de6:	2400      	movs	r4, #0
 8001de8:	e692      	b.n	8001b10 <__aeabi_dsub+0xdc>
 8001dea:	4308      	orrs	r0, r1
 8001dec:	0002      	movs	r2, r0
 8001dee:	1e50      	subs	r0, r2, #1
 8001df0:	4182      	sbcs	r2, r0
 8001df2:	e66d      	b.n	8001ad0 <__aeabi_dsub+0x9c>
 8001df4:	4cca      	ldr	r4, [pc, #808]	; (8002120 <__aeabi_dsub+0x6ec>)
 8001df6:	1c72      	adds	r2, r6, #1
 8001df8:	4222      	tst	r2, r4
 8001dfa:	d000      	beq.n	8001dfe <__aeabi_dsub+0x3ca>
 8001dfc:	e0ad      	b.n	8001f5a <__aeabi_dsub+0x526>
 8001dfe:	464a      	mov	r2, r9
 8001e00:	431a      	orrs	r2, r3
 8001e02:	2e00      	cmp	r6, #0
 8001e04:	d1b8      	bne.n	8001d78 <__aeabi_dsub+0x344>
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x3d8>
 8001e0a:	e158      	b.n	80020be <__aeabi_dsub+0x68a>
 8001e0c:	000a      	movs	r2, r1
 8001e0e:	4302      	orrs	r2, r0
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x3e0>
 8001e12:	e159      	b.n	80020c8 <__aeabi_dsub+0x694>
 8001e14:	464a      	mov	r2, r9
 8001e16:	0759      	lsls	r1, r3, #29
 8001e18:	08d2      	lsrs	r2, r2, #3
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	e786      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 8001e20:	464a      	mov	r2, r9
 8001e22:	0759      	lsls	r1, r3, #29
 8001e24:	08d2      	lsrs	r2, r2, #3
 8001e26:	430a      	orrs	r2, r1
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	e7c1      	b.n	8001db0 <__aeabi_dsub+0x37c>
 8001e2c:	4dba      	ldr	r5, [pc, #744]	; (8002118 <__aeabi_dsub+0x6e4>)
 8001e2e:	42aa      	cmp	r2, r5
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x400>
 8001e32:	e11e      	b.n	8002072 <__aeabi_dsub+0x63e>
 8001e34:	2580      	movs	r5, #128	; 0x80
 8001e36:	042d      	lsls	r5, r5, #16
 8001e38:	432b      	orrs	r3, r5
 8001e3a:	4664      	mov	r4, ip
 8001e3c:	2c38      	cmp	r4, #56	; 0x38
 8001e3e:	dc5d      	bgt.n	8001efc <__aeabi_dsub+0x4c8>
 8001e40:	2c1f      	cmp	r4, #31
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x412>
 8001e44:	e0d0      	b.n	8001fe8 <__aeabi_dsub+0x5b4>
 8001e46:	2520      	movs	r5, #32
 8001e48:	4667      	mov	r7, ip
 8001e4a:	1b2d      	subs	r5, r5, r4
 8001e4c:	464e      	mov	r6, r9
 8001e4e:	001c      	movs	r4, r3
 8001e50:	40fe      	lsrs	r6, r7
 8001e52:	40ac      	lsls	r4, r5
 8001e54:	4334      	orrs	r4, r6
 8001e56:	464e      	mov	r6, r9
 8001e58:	40ae      	lsls	r6, r5
 8001e5a:	0035      	movs	r5, r6
 8001e5c:	40fb      	lsrs	r3, r7
 8001e5e:	1e6e      	subs	r6, r5, #1
 8001e60:	41b5      	sbcs	r5, r6
 8001e62:	1ac9      	subs	r1, r1, r3
 8001e64:	432c      	orrs	r4, r5
 8001e66:	e04e      	b.n	8001f06 <__aeabi_dsub+0x4d2>
 8001e68:	464a      	mov	r2, r9
 8001e6a:	1a14      	subs	r4, r2, r0
 8001e6c:	45a1      	cmp	r9, r4
 8001e6e:	4192      	sbcs	r2, r2
 8001e70:	4252      	negs	r2, r2
 8001e72:	4690      	mov	r8, r2
 8001e74:	1a5f      	subs	r7, r3, r1
 8001e76:	003a      	movs	r2, r7
 8001e78:	4647      	mov	r7, r8
 8001e7a:	1bd2      	subs	r2, r2, r7
 8001e7c:	4690      	mov	r8, r2
 8001e7e:	0212      	lsls	r2, r2, #8
 8001e80:	d500      	bpl.n	8001e84 <__aeabi_dsub+0x450>
 8001e82:	e08b      	b.n	8001f9c <__aeabi_dsub+0x568>
 8001e84:	4642      	mov	r2, r8
 8001e86:	4322      	orrs	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x458>
 8001e8a:	e630      	b.n	8001aee <__aeabi_dsub+0xba>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2500      	movs	r5, #0
 8001e90:	e74d      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 8001e92:	464a      	mov	r2, r9
 8001e94:	0759      	lsls	r1, r3, #29
 8001e96:	08d2      	lsrs	r2, r2, #3
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	08db      	lsrs	r3, r3, #3
 8001e9c:	e744      	b.n	8001d28 <__aeabi_dsub+0x2f4>
 8001e9e:	4642      	mov	r2, r8
 8001ea0:	4b9e      	ldr	r3, [pc, #632]	; (800211c <__aeabi_dsub+0x6e8>)
 8001ea2:	0861      	lsrs	r1, r4, #1
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4014      	ands	r4, r2
 8001eac:	430c      	orrs	r4, r1
 8001eae:	07da      	lsls	r2, r3, #31
 8001eb0:	085b      	lsrs	r3, r3, #1
 8001eb2:	4698      	mov	r8, r3
 8001eb4:	4314      	orrs	r4, r2
 8001eb6:	e641      	b.n	8001b3c <__aeabi_dsub+0x108>
 8001eb8:	001a      	movs	r2, r3
 8001eba:	3e1f      	subs	r6, #31
 8001ebc:	40f2      	lsrs	r2, r6
 8001ebe:	0016      	movs	r6, r2
 8001ec0:	2920      	cmp	r1, #32
 8001ec2:	d003      	beq.n	8001ecc <__aeabi_dsub+0x498>
 8001ec4:	2240      	movs	r2, #64	; 0x40
 8001ec6:	1a51      	subs	r1, r2, r1
 8001ec8:	408b      	lsls	r3, r1
 8001eca:	431c      	orrs	r4, r3
 8001ecc:	1e62      	subs	r2, r4, #1
 8001ece:	4194      	sbcs	r4, r2
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	4334      	orrs	r4, r6
 8001ed4:	4698      	mov	r8, r3
 8001ed6:	2600      	movs	r6, #0
 8001ed8:	e71d      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 8001eda:	000c      	movs	r4, r1
 8001edc:	3a20      	subs	r2, #32
 8001ede:	40d4      	lsrs	r4, r2
 8001ee0:	0022      	movs	r2, r4
 8001ee2:	4664      	mov	r4, ip
 8001ee4:	2c20      	cmp	r4, #32
 8001ee6:	d004      	beq.n	8001ef2 <__aeabi_dsub+0x4be>
 8001ee8:	2740      	movs	r7, #64	; 0x40
 8001eea:	1b3f      	subs	r7, r7, r4
 8001eec:	40b9      	lsls	r1, r7
 8001eee:	4308      	orrs	r0, r1
 8001ef0:	4680      	mov	r8, r0
 8001ef2:	4644      	mov	r4, r8
 8001ef4:	1e61      	subs	r1, r4, #1
 8001ef6:	418c      	sbcs	r4, r1
 8001ef8:	4322      	orrs	r2, r4
 8001efa:	e5e9      	b.n	8001ad0 <__aeabi_dsub+0x9c>
 8001efc:	464c      	mov	r4, r9
 8001efe:	4323      	orrs	r3, r4
 8001f00:	001c      	movs	r4, r3
 8001f02:	1e63      	subs	r3, r4, #1
 8001f04:	419c      	sbcs	r4, r3
 8001f06:	1b04      	subs	r4, r0, r4
 8001f08:	42a0      	cmp	r0, r4
 8001f0a:	419b      	sbcs	r3, r3
 8001f0c:	425b      	negs	r3, r3
 8001f0e:	1acb      	subs	r3, r1, r3
 8001f10:	4698      	mov	r8, r3
 8001f12:	465d      	mov	r5, fp
 8001f14:	0016      	movs	r6, r2
 8001f16:	e5e2      	b.n	8001ade <__aeabi_dsub+0xaa>
 8001f18:	464e      	mov	r6, r9
 8001f1a:	431e      	orrs	r6, r3
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_dsub+0x4ec>
 8001f1e:	e0ae      	b.n	800207e <__aeabi_dsub+0x64a>
 8001f20:	1e66      	subs	r6, r4, #1
 8001f22:	2c01      	cmp	r4, #1
 8001f24:	d100      	bne.n	8001f28 <__aeabi_dsub+0x4f4>
 8001f26:	e0fd      	b.n	8002124 <__aeabi_dsub+0x6f0>
 8001f28:	4f7b      	ldr	r7, [pc, #492]	; (8002118 <__aeabi_dsub+0x6e4>)
 8001f2a:	42bc      	cmp	r4, r7
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x4fc>
 8001f2e:	e107      	b.n	8002140 <__aeabi_dsub+0x70c>
 8001f30:	46b4      	mov	ip, r6
 8001f32:	e69b      	b.n	8001c6c <__aeabi_dsub+0x238>
 8001f34:	4664      	mov	r4, ip
 8001f36:	2220      	movs	r2, #32
 8001f38:	1b12      	subs	r2, r2, r4
 8001f3a:	000c      	movs	r4, r1
 8001f3c:	4094      	lsls	r4, r2
 8001f3e:	0007      	movs	r7, r0
 8001f40:	4090      	lsls	r0, r2
 8001f42:	46a0      	mov	r8, r4
 8001f44:	4664      	mov	r4, ip
 8001f46:	1e42      	subs	r2, r0, #1
 8001f48:	4190      	sbcs	r0, r2
 8001f4a:	4662      	mov	r2, ip
 8001f4c:	40e7      	lsrs	r7, r4
 8001f4e:	4644      	mov	r4, r8
 8001f50:	40d1      	lsrs	r1, r2
 8001f52:	433c      	orrs	r4, r7
 8001f54:	4304      	orrs	r4, r0
 8001f56:	185b      	adds	r3, r3, r1
 8001f58:	e6f3      	b.n	8001d42 <__aeabi_dsub+0x30e>
 8001f5a:	4c6f      	ldr	r4, [pc, #444]	; (8002118 <__aeabi_dsub+0x6e4>)
 8001f5c:	42a2      	cmp	r2, r4
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x52e>
 8001f60:	e0d5      	b.n	800210e <__aeabi_dsub+0x6da>
 8001f62:	4448      	add	r0, r9
 8001f64:	185b      	adds	r3, r3, r1
 8001f66:	4548      	cmp	r0, r9
 8001f68:	4189      	sbcs	r1, r1
 8001f6a:	4249      	negs	r1, r1
 8001f6c:	185b      	adds	r3, r3, r1
 8001f6e:	07dc      	lsls	r4, r3, #31
 8001f70:	0840      	lsrs	r0, r0, #1
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	4698      	mov	r8, r3
 8001f76:	0016      	movs	r6, r2
 8001f78:	4304      	orrs	r4, r0
 8001f7a:	e6cc      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x54e>
 8001f80:	e082      	b.n	8002088 <__aeabi_dsub+0x654>
 8001f82:	000a      	movs	r2, r1
 8001f84:	4302      	orrs	r2, r0
 8001f86:	d140      	bne.n	800200a <__aeabi_dsub+0x5d6>
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	2500      	movs	r5, #0
 8001f8c:	031b      	lsls	r3, r3, #12
 8001f8e:	e713      	b.n	8001db8 <__aeabi_dsub+0x384>
 8001f90:	074b      	lsls	r3, r1, #29
 8001f92:	08c2      	lsrs	r2, r0, #3
 8001f94:	431a      	orrs	r2, r3
 8001f96:	465d      	mov	r5, fp
 8001f98:	08cb      	lsrs	r3, r1, #3
 8001f9a:	e6c5      	b.n	8001d28 <__aeabi_dsub+0x2f4>
 8001f9c:	464a      	mov	r2, r9
 8001f9e:	1a84      	subs	r4, r0, r2
 8001fa0:	42a0      	cmp	r0, r4
 8001fa2:	4192      	sbcs	r2, r2
 8001fa4:	1acb      	subs	r3, r1, r3
 8001fa6:	4252      	negs	r2, r2
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	4698      	mov	r8, r3
 8001fac:	465d      	mov	r5, fp
 8001fae:	e59e      	b.n	8001aee <__aeabi_dsub+0xba>
 8001fb0:	464a      	mov	r2, r9
 8001fb2:	0759      	lsls	r1, r3, #29
 8001fb4:	08d2      	lsrs	r2, r2, #3
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	e6f9      	b.n	8001db0 <__aeabi_dsub+0x37c>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	1a14      	subs	r4, r2, r0
 8001fc0:	45a1      	cmp	r9, r4
 8001fc2:	4192      	sbcs	r2, r2
 8001fc4:	1a5b      	subs	r3, r3, r1
 8001fc6:	4252      	negs	r2, r2
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	4698      	mov	r8, r3
 8001fcc:	2601      	movs	r6, #1
 8001fce:	e586      	b.n	8001ade <__aeabi_dsub+0xaa>
 8001fd0:	464a      	mov	r2, r9
 8001fd2:	0759      	lsls	r1, r3, #29
 8001fd4:	08d2      	lsrs	r2, r2, #3
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	e6a5      	b.n	8001d28 <__aeabi_dsub+0x2f4>
 8001fdc:	464c      	mov	r4, r9
 8001fde:	4323      	orrs	r3, r4
 8001fe0:	001c      	movs	r4, r3
 8001fe2:	1e63      	subs	r3, r4, #1
 8001fe4:	419c      	sbcs	r4, r3
 8001fe6:	e65b      	b.n	8001ca0 <__aeabi_dsub+0x26c>
 8001fe8:	4665      	mov	r5, ip
 8001fea:	001e      	movs	r6, r3
 8001fec:	3d20      	subs	r5, #32
 8001fee:	40ee      	lsrs	r6, r5
 8001ff0:	2c20      	cmp	r4, #32
 8001ff2:	d005      	beq.n	8002000 <__aeabi_dsub+0x5cc>
 8001ff4:	2540      	movs	r5, #64	; 0x40
 8001ff6:	1b2d      	subs	r5, r5, r4
 8001ff8:	40ab      	lsls	r3, r5
 8001ffa:	464c      	mov	r4, r9
 8001ffc:	431c      	orrs	r4, r3
 8001ffe:	46a2      	mov	sl, r4
 8002000:	4654      	mov	r4, sl
 8002002:	1e63      	subs	r3, r4, #1
 8002004:	419c      	sbcs	r4, r3
 8002006:	4334      	orrs	r4, r6
 8002008:	e77d      	b.n	8001f06 <__aeabi_dsub+0x4d2>
 800200a:	074b      	lsls	r3, r1, #29
 800200c:	08c2      	lsrs	r2, r0, #3
 800200e:	431a      	orrs	r2, r3
 8002010:	465d      	mov	r5, fp
 8002012:	08cb      	lsrs	r3, r1, #3
 8002014:	e6cc      	b.n	8001db0 <__aeabi_dsub+0x37c>
 8002016:	000a      	movs	r2, r1
 8002018:	4302      	orrs	r2, r0
 800201a:	d100      	bne.n	800201e <__aeabi_dsub+0x5ea>
 800201c:	e736      	b.n	8001e8c <__aeabi_dsub+0x458>
 800201e:	074b      	lsls	r3, r1, #29
 8002020:	08c2      	lsrs	r2, r0, #3
 8002022:	431a      	orrs	r2, r3
 8002024:	465d      	mov	r5, fp
 8002026:	08cb      	lsrs	r3, r1, #3
 8002028:	e681      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 800202a:	464a      	mov	r2, r9
 800202c:	1a84      	subs	r4, r0, r2
 800202e:	42a0      	cmp	r0, r4
 8002030:	4192      	sbcs	r2, r2
 8002032:	1acb      	subs	r3, r1, r3
 8002034:	4252      	negs	r2, r2
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	4698      	mov	r8, r3
 800203a:	465d      	mov	r5, fp
 800203c:	2601      	movs	r6, #1
 800203e:	e54e      	b.n	8001ade <__aeabi_dsub+0xaa>
 8002040:	074b      	lsls	r3, r1, #29
 8002042:	08c2      	lsrs	r2, r0, #3
 8002044:	431a      	orrs	r2, r3
 8002046:	08cb      	lsrs	r3, r1, #3
 8002048:	e6b2      	b.n	8001db0 <__aeabi_dsub+0x37c>
 800204a:	464a      	mov	r2, r9
 800204c:	1a14      	subs	r4, r2, r0
 800204e:	45a1      	cmp	r9, r4
 8002050:	4192      	sbcs	r2, r2
 8002052:	1a5f      	subs	r7, r3, r1
 8002054:	4252      	negs	r2, r2
 8002056:	1aba      	subs	r2, r7, r2
 8002058:	4690      	mov	r8, r2
 800205a:	0212      	lsls	r2, r2, #8
 800205c:	d56b      	bpl.n	8002136 <__aeabi_dsub+0x702>
 800205e:	464a      	mov	r2, r9
 8002060:	1a84      	subs	r4, r0, r2
 8002062:	42a0      	cmp	r0, r4
 8002064:	4192      	sbcs	r2, r2
 8002066:	1acb      	subs	r3, r1, r3
 8002068:	4252      	negs	r2, r2
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	4698      	mov	r8, r3
 800206e:	465d      	mov	r5, fp
 8002070:	e564      	b.n	8001b3c <__aeabi_dsub+0x108>
 8002072:	074b      	lsls	r3, r1, #29
 8002074:	08c2      	lsrs	r2, r0, #3
 8002076:	431a      	orrs	r2, r3
 8002078:	465d      	mov	r5, fp
 800207a:	08cb      	lsrs	r3, r1, #3
 800207c:	e698      	b.n	8001db0 <__aeabi_dsub+0x37c>
 800207e:	074b      	lsls	r3, r1, #29
 8002080:	08c2      	lsrs	r2, r0, #3
 8002082:	431a      	orrs	r2, r3
 8002084:	08cb      	lsrs	r3, r1, #3
 8002086:	e64f      	b.n	8001d28 <__aeabi_dsub+0x2f4>
 8002088:	000a      	movs	r2, r1
 800208a:	4302      	orrs	r2, r0
 800208c:	d090      	beq.n	8001fb0 <__aeabi_dsub+0x57c>
 800208e:	464a      	mov	r2, r9
 8002090:	075c      	lsls	r4, r3, #29
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4314      	orrs	r4, r2
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	0312      	lsls	r2, r2, #12
 800209c:	4213      	tst	r3, r2
 800209e:	d008      	beq.n	80020b2 <__aeabi_dsub+0x67e>
 80020a0:	08ce      	lsrs	r6, r1, #3
 80020a2:	4216      	tst	r6, r2
 80020a4:	d105      	bne.n	80020b2 <__aeabi_dsub+0x67e>
 80020a6:	08c0      	lsrs	r0, r0, #3
 80020a8:	0749      	lsls	r1, r1, #29
 80020aa:	4308      	orrs	r0, r1
 80020ac:	0004      	movs	r4, r0
 80020ae:	465d      	mov	r5, fp
 80020b0:	0033      	movs	r3, r6
 80020b2:	0f61      	lsrs	r1, r4, #29
 80020b4:	00e2      	lsls	r2, r4, #3
 80020b6:	0749      	lsls	r1, r1, #29
 80020b8:	08d2      	lsrs	r2, r2, #3
 80020ba:	430a      	orrs	r2, r1
 80020bc:	e678      	b.n	8001db0 <__aeabi_dsub+0x37c>
 80020be:	074b      	lsls	r3, r1, #29
 80020c0:	08c2      	lsrs	r2, r0, #3
 80020c2:	431a      	orrs	r2, r3
 80020c4:	08cb      	lsrs	r3, r1, #3
 80020c6:	e632      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 80020c8:	4448      	add	r0, r9
 80020ca:	185b      	adds	r3, r3, r1
 80020cc:	4548      	cmp	r0, r9
 80020ce:	4192      	sbcs	r2, r2
 80020d0:	4698      	mov	r8, r3
 80020d2:	4252      	negs	r2, r2
 80020d4:	4490      	add	r8, r2
 80020d6:	4643      	mov	r3, r8
 80020d8:	0004      	movs	r4, r0
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	d400      	bmi.n	80020e0 <__aeabi_dsub+0x6ac>
 80020de:	e61a      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 80020e0:	4642      	mov	r2, r8
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <__aeabi_dsub+0x6e8>)
 80020e4:	2601      	movs	r6, #1
 80020e6:	401a      	ands	r2, r3
 80020e8:	4690      	mov	r8, r2
 80020ea:	e614      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 80020ec:	4666      	mov	r6, ip
 80020ee:	001f      	movs	r7, r3
 80020f0:	3e20      	subs	r6, #32
 80020f2:	40f7      	lsrs	r7, r6
 80020f4:	2c20      	cmp	r4, #32
 80020f6:	d005      	beq.n	8002104 <__aeabi_dsub+0x6d0>
 80020f8:	2640      	movs	r6, #64	; 0x40
 80020fa:	1b36      	subs	r6, r6, r4
 80020fc:	40b3      	lsls	r3, r6
 80020fe:	464c      	mov	r4, r9
 8002100:	431c      	orrs	r4, r3
 8002102:	46a2      	mov	sl, r4
 8002104:	4654      	mov	r4, sl
 8002106:	1e63      	subs	r3, r4, #1
 8002108:	419c      	sbcs	r4, r3
 800210a:	433c      	orrs	r4, r7
 800210c:	e5c8      	b.n	8001ca0 <__aeabi_dsub+0x26c>
 800210e:	0011      	movs	r1, r2
 8002110:	2300      	movs	r3, #0
 8002112:	2200      	movs	r2, #0
 8002114:	e532      	b.n	8001b7c <__aeabi_dsub+0x148>
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	000007ff 	.word	0x000007ff
 800211c:	ff7fffff 	.word	0xff7fffff
 8002120:	000007fe 	.word	0x000007fe
 8002124:	464a      	mov	r2, r9
 8002126:	1814      	adds	r4, r2, r0
 8002128:	4284      	cmp	r4, r0
 800212a:	4192      	sbcs	r2, r2
 800212c:	185b      	adds	r3, r3, r1
 800212e:	4698      	mov	r8, r3
 8002130:	4252      	negs	r2, r2
 8002132:	4490      	add	r8, r2
 8002134:	e5e9      	b.n	8001d0a <__aeabi_dsub+0x2d6>
 8002136:	4642      	mov	r2, r8
 8002138:	4322      	orrs	r2, r4
 800213a:	d100      	bne.n	800213e <__aeabi_dsub+0x70a>
 800213c:	e6a6      	b.n	8001e8c <__aeabi_dsub+0x458>
 800213e:	e5ea      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 8002140:	074b      	lsls	r3, r1, #29
 8002142:	08c2      	lsrs	r2, r0, #3
 8002144:	431a      	orrs	r2, r3
 8002146:	08cb      	lsrs	r3, r1, #3
 8002148:	e632      	b.n	8001db0 <__aeabi_dsub+0x37c>
 800214a:	2200      	movs	r2, #0
 800214c:	4901      	ldr	r1, [pc, #4]	; (8002154 <__aeabi_dsub+0x720>)
 800214e:	0013      	movs	r3, r2
 8002150:	e514      	b.n	8001b7c <__aeabi_dsub+0x148>
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	000007ff 	.word	0x000007ff

08002158 <__aeabi_dcmpun>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	0005      	movs	r5, r0
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <__aeabi_dcmpun+0x38>)
 800215e:	030c      	lsls	r4, r1, #12
 8002160:	0016      	movs	r6, r2
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	031a      	lsls	r2, r3, #12
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	0d49      	lsrs	r1, r1, #21
 800216c:	0b12      	lsrs	r2, r2, #12
 800216e:	0d5b      	lsrs	r3, r3, #21
 8002170:	4281      	cmp	r1, r0
 8002172:	d008      	beq.n	8002186 <__aeabi_dcmpun+0x2e>
 8002174:	4906      	ldr	r1, [pc, #24]	; (8002190 <__aeabi_dcmpun+0x38>)
 8002176:	2000      	movs	r0, #0
 8002178:	428b      	cmp	r3, r1
 800217a:	d103      	bne.n	8002184 <__aeabi_dcmpun+0x2c>
 800217c:	4332      	orrs	r2, r6
 800217e:	0010      	movs	r0, r2
 8002180:	1e42      	subs	r2, r0, #1
 8002182:	4190      	sbcs	r0, r2
 8002184:	bd70      	pop	{r4, r5, r6, pc}
 8002186:	2001      	movs	r0, #1
 8002188:	432c      	orrs	r4, r5
 800218a:	d1fb      	bne.n	8002184 <__aeabi_dcmpun+0x2c>
 800218c:	e7f2      	b.n	8002174 <__aeabi_dcmpun+0x1c>
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	000007ff 	.word	0x000007ff

08002194 <__aeabi_d2iz>:
 8002194:	000a      	movs	r2, r1
 8002196:	b530      	push	{r4, r5, lr}
 8002198:	4c13      	ldr	r4, [pc, #76]	; (80021e8 <__aeabi_d2iz+0x54>)
 800219a:	0053      	lsls	r3, r2, #1
 800219c:	0309      	lsls	r1, r1, #12
 800219e:	0005      	movs	r5, r0
 80021a0:	0b09      	lsrs	r1, r1, #12
 80021a2:	2000      	movs	r0, #0
 80021a4:	0d5b      	lsrs	r3, r3, #21
 80021a6:	0fd2      	lsrs	r2, r2, #31
 80021a8:	42a3      	cmp	r3, r4
 80021aa:	dd04      	ble.n	80021b6 <__aeabi_d2iz+0x22>
 80021ac:	480f      	ldr	r0, [pc, #60]	; (80021ec <__aeabi_d2iz+0x58>)
 80021ae:	4283      	cmp	r3, r0
 80021b0:	dd02      	ble.n	80021b8 <__aeabi_d2iz+0x24>
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <__aeabi_d2iz+0x5c>)
 80021b4:	18d0      	adds	r0, r2, r3
 80021b6:	bd30      	pop	{r4, r5, pc}
 80021b8:	2080      	movs	r0, #128	; 0x80
 80021ba:	0340      	lsls	r0, r0, #13
 80021bc:	4301      	orrs	r1, r0
 80021be:	480d      	ldr	r0, [pc, #52]	; (80021f4 <__aeabi_d2iz+0x60>)
 80021c0:	1ac0      	subs	r0, r0, r3
 80021c2:	281f      	cmp	r0, #31
 80021c4:	dd08      	ble.n	80021d8 <__aeabi_d2iz+0x44>
 80021c6:	480c      	ldr	r0, [pc, #48]	; (80021f8 <__aeabi_d2iz+0x64>)
 80021c8:	1ac3      	subs	r3, r0, r3
 80021ca:	40d9      	lsrs	r1, r3
 80021cc:	000b      	movs	r3, r1
 80021ce:	4258      	negs	r0, r3
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	d1f0      	bne.n	80021b6 <__aeabi_d2iz+0x22>
 80021d4:	0018      	movs	r0, r3
 80021d6:	e7ee      	b.n	80021b6 <__aeabi_d2iz+0x22>
 80021d8:	4c08      	ldr	r4, [pc, #32]	; (80021fc <__aeabi_d2iz+0x68>)
 80021da:	40c5      	lsrs	r5, r0
 80021dc:	46a4      	mov	ip, r4
 80021de:	4463      	add	r3, ip
 80021e0:	4099      	lsls	r1, r3
 80021e2:	000b      	movs	r3, r1
 80021e4:	432b      	orrs	r3, r5
 80021e6:	e7f2      	b.n	80021ce <__aeabi_d2iz+0x3a>
 80021e8:	000003fe 	.word	0x000003fe
 80021ec:	0000041d 	.word	0x0000041d
 80021f0:	7fffffff 	.word	0x7fffffff
 80021f4:	00000433 	.word	0x00000433
 80021f8:	00000413 	.word	0x00000413
 80021fc:	fffffbed 	.word	0xfffffbed

08002200 <__aeabi_i2d>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	2800      	cmp	r0, #0
 8002204:	d016      	beq.n	8002234 <__aeabi_i2d+0x34>
 8002206:	17c3      	asrs	r3, r0, #31
 8002208:	18c5      	adds	r5, r0, r3
 800220a:	405d      	eors	r5, r3
 800220c:	0fc4      	lsrs	r4, r0, #31
 800220e:	0028      	movs	r0, r5
 8002210:	f000 f84c 	bl	80022ac <__clzsi2>
 8002214:	4a11      	ldr	r2, [pc, #68]	; (800225c <__aeabi_i2d+0x5c>)
 8002216:	1a12      	subs	r2, r2, r0
 8002218:	280a      	cmp	r0, #10
 800221a:	dc16      	bgt.n	800224a <__aeabi_i2d+0x4a>
 800221c:	0003      	movs	r3, r0
 800221e:	002e      	movs	r6, r5
 8002220:	3315      	adds	r3, #21
 8002222:	409e      	lsls	r6, r3
 8002224:	230b      	movs	r3, #11
 8002226:	1a18      	subs	r0, r3, r0
 8002228:	40c5      	lsrs	r5, r0
 800222a:	0553      	lsls	r3, r2, #21
 800222c:	032d      	lsls	r5, r5, #12
 800222e:	0b2d      	lsrs	r5, r5, #12
 8002230:	0d5b      	lsrs	r3, r3, #21
 8002232:	e003      	b.n	800223c <__aeabi_i2d+0x3c>
 8002234:	2400      	movs	r4, #0
 8002236:	2300      	movs	r3, #0
 8002238:	2500      	movs	r5, #0
 800223a:	2600      	movs	r6, #0
 800223c:	051b      	lsls	r3, r3, #20
 800223e:	432b      	orrs	r3, r5
 8002240:	07e4      	lsls	r4, r4, #31
 8002242:	4323      	orrs	r3, r4
 8002244:	0030      	movs	r0, r6
 8002246:	0019      	movs	r1, r3
 8002248:	bd70      	pop	{r4, r5, r6, pc}
 800224a:	380b      	subs	r0, #11
 800224c:	4085      	lsls	r5, r0
 800224e:	0553      	lsls	r3, r2, #21
 8002250:	032d      	lsls	r5, r5, #12
 8002252:	2600      	movs	r6, #0
 8002254:	0b2d      	lsrs	r5, r5, #12
 8002256:	0d5b      	lsrs	r3, r3, #21
 8002258:	e7f0      	b.n	800223c <__aeabi_i2d+0x3c>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	0000041e 	.word	0x0000041e

08002260 <__aeabi_ui2d>:
 8002260:	b510      	push	{r4, lr}
 8002262:	1e04      	subs	r4, r0, #0
 8002264:	d010      	beq.n	8002288 <__aeabi_ui2d+0x28>
 8002266:	f000 f821 	bl	80022ac <__clzsi2>
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <__aeabi_ui2d+0x48>)
 800226c:	1a1b      	subs	r3, r3, r0
 800226e:	280a      	cmp	r0, #10
 8002270:	dc11      	bgt.n	8002296 <__aeabi_ui2d+0x36>
 8002272:	220b      	movs	r2, #11
 8002274:	0021      	movs	r1, r4
 8002276:	1a12      	subs	r2, r2, r0
 8002278:	40d1      	lsrs	r1, r2
 800227a:	3015      	adds	r0, #21
 800227c:	030a      	lsls	r2, r1, #12
 800227e:	055b      	lsls	r3, r3, #21
 8002280:	4084      	lsls	r4, r0
 8002282:	0b12      	lsrs	r2, r2, #12
 8002284:	0d5b      	lsrs	r3, r3, #21
 8002286:	e001      	b.n	800228c <__aeabi_ui2d+0x2c>
 8002288:	2300      	movs	r3, #0
 800228a:	2200      	movs	r2, #0
 800228c:	051b      	lsls	r3, r3, #20
 800228e:	4313      	orrs	r3, r2
 8002290:	0020      	movs	r0, r4
 8002292:	0019      	movs	r1, r3
 8002294:	bd10      	pop	{r4, pc}
 8002296:	0022      	movs	r2, r4
 8002298:	380b      	subs	r0, #11
 800229a:	4082      	lsls	r2, r0
 800229c:	055b      	lsls	r3, r3, #21
 800229e:	0312      	lsls	r2, r2, #12
 80022a0:	2400      	movs	r4, #0
 80022a2:	0b12      	lsrs	r2, r2, #12
 80022a4:	0d5b      	lsrs	r3, r3, #21
 80022a6:	e7f1      	b.n	800228c <__aeabi_ui2d+0x2c>
 80022a8:	0000041e 	.word	0x0000041e

080022ac <__clzsi2>:
 80022ac:	211c      	movs	r1, #28
 80022ae:	2301      	movs	r3, #1
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d301      	bcc.n	80022ba <__clzsi2+0xe>
 80022b6:	0c00      	lsrs	r0, r0, #16
 80022b8:	3910      	subs	r1, #16
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	4298      	cmp	r0, r3
 80022be:	d301      	bcc.n	80022c4 <__clzsi2+0x18>
 80022c0:	0a00      	lsrs	r0, r0, #8
 80022c2:	3908      	subs	r1, #8
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	4298      	cmp	r0, r3
 80022c8:	d301      	bcc.n	80022ce <__clzsi2+0x22>
 80022ca:	0900      	lsrs	r0, r0, #4
 80022cc:	3904      	subs	r1, #4
 80022ce:	a202      	add	r2, pc, #8	; (adr r2, 80022d8 <__clzsi2+0x2c>)
 80022d0:	5c10      	ldrb	r0, [r2, r0]
 80022d2:	1840      	adds	r0, r0, r1
 80022d4:	4770      	bx	lr
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	02020304 	.word	0x02020304
 80022dc:	01010101 	.word	0x01010101
	...

080022e8 <__clzdi2>:
 80022e8:	b510      	push	{r4, lr}
 80022ea:	2900      	cmp	r1, #0
 80022ec:	d103      	bne.n	80022f6 <__clzdi2+0xe>
 80022ee:	f7ff ffdd 	bl	80022ac <__clzsi2>
 80022f2:	3020      	adds	r0, #32
 80022f4:	e002      	b.n	80022fc <__clzdi2+0x14>
 80022f6:	1c08      	adds	r0, r1, #0
 80022f8:	f7ff ffd8 	bl	80022ac <__clzsi2>
 80022fc:	bd10      	pop	{r4, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)

08002300 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Callback to be called after HAL_UART_RECEIVE_IT finishes getting data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	// Disable Interrupts
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002308:	201b      	movs	r0, #27
 800230a:	f002 fe12 	bl	8004f32 <HAL_NVIC_DisableIRQ>
	// Set received flag
	cmd_received = 1;
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_UART_RxCpltCallback+0x84>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]
	// Copy the receive buffer into the command buffer.
	memcpy(cmd_data,Rx_data,20);
 8002314:	4a1c      	ldr	r2, [pc, #112]	; (8002388 <HAL_UART_RxCpltCallback+0x88>)
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_UART_RxCpltCallback+0x8c>)
 8002318:	0010      	movs	r0, r2
 800231a:	0019      	movs	r1, r3
 800231c:	2314      	movs	r3, #20
 800231e:	001a      	movs	r2, r3
 8002320:	f009 fd34 	bl	800bd8c <memcpy>
	// Save the last command
	// Enable Interrupts
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002324:	201b      	movs	r0, #27
 8002326:	f002 fdf4 	bl	8004f12 <HAL_NVIC_EnableIRQ>
	ret = HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 800232a:	4918      	ldr	r1, [pc, #96]	; (800238c <HAL_UART_RxCpltCallback+0x8c>)
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_UART_RxCpltCallback+0x90>)
 800232e:	2214      	movs	r2, #20
 8002330:	0018      	movs	r0, r3
 8002332:	f007 fcf1 	bl	8009d18 <HAL_UART_Receive_DMA>
 8002336:	0003      	movs	r3, r0
 8002338:	001a      	movs	r2, r3
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_UART_RxCpltCallback+0x94>)
 800233c:	701a      	strb	r2, [r3, #0]

	//__HAL_UART_CLEAR_FLAG(JETSON_UART, UART_CLEAR_OREF);
	//__HAL_UART_SEND_REQ(JETSON_UART, UART_RXDATA_FLUSH_REQUEST);

	if (ret != HAL_OK) {
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_UART_RxCpltCallback+0x94>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01a      	beq.n	800237c <HAL_UART_RxCpltCallback+0x7c>
		Error_Handler();
 8002346:	f000 fc21 	bl	8002b8c <Error_Handler>
		HAL_UART_Abort_IT(&huart1);
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_UART_RxCpltCallback+0x98>)
 800234c:	0018      	movs	r0, r3
 800234e:	f007 fd53 	bl	8009df8 <HAL_UART_Abort_IT>
	    SET_BIT(huart1.Instance->CR3, USART_CR3_EIE);
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_UART_RxCpltCallback+0x98>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <HAL_UART_RxCpltCallback+0x98>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	430a      	orrs	r2, r1
 8002360:	609a      	str	r2, [r3, #8]
	    //This flag no longer exists
	    //SET_BIT(huart1.Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
	    HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 8002362:	201b      	movs	r0, #27
 8002364:	f002 fe02 	bl	8004f6c <HAL_NVIC_ClearPendingIRQ>

	    ret = HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 8002368:	4908      	ldr	r1, [pc, #32]	; (800238c <HAL_UART_RxCpltCallback+0x8c>)
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_UART_RxCpltCallback+0x90>)
 800236c:	2214      	movs	r2, #20
 800236e:	0018      	movs	r0, r3
 8002370:	f007 fcd2 	bl	8009d18 <HAL_UART_Receive_DMA>
 8002374:	0003      	movs	r3, r0
 8002376:	001a      	movs	r2, r3
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_UART_RxCpltCallback+0x94>)
 800237a:	701a      	strb	r2, [r3, #0]
	}
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000218 	.word	0x20000218
 8002388:	200003f8 	.word	0x200003f8
 800238c:	200002d4 	.word	0x200002d4
 8002390:	200004e8 	.word	0x200004e8
 8002394:	20000578 	.word	0x20000578
 8002398:	2000040c 	.word	0x2000040c

0800239c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}

080023ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b0:	f001 ff52 	bl	8004258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b4:	f000 f816 	bl	80023e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023b8:	f000 fb14 	bl	80029e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80023bc:	f000 faec 	bl	8002998 <MX_DMA_Init>
  MX_ADC1_Init();
 80023c0:	f000 f87e 	bl	80024c0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80023c4:	f000 f928 	bl	8002618 <MX_TIM1_Init>
  MX_TIM3_Init();
 80023c8:	f000 f9de 	bl	8002788 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80023cc:	f000 fa48 	bl	8002860 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80023d0:	f000 fa94 	bl	80028fc <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80023d4:	f000 f8e0 	bl	8002598 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  main_preloop();
 80023d8:	f000 fc84 	bl	8002ce4 <main_preloop>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  main_loop();
 80023dc:	f000 fbdc 	bl	8002b98 <main_loop>
 80023e0:	e7fc      	b.n	80023dc <main+0x30>
	...

080023e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b0a7      	sub	sp, #156	; 0x9c
 80023e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ea:	245c      	movs	r4, #92	; 0x5c
 80023ec:	193b      	adds	r3, r7, r4
 80023ee:	0018      	movs	r0, r3
 80023f0:	233c      	movs	r3, #60	; 0x3c
 80023f2:	001a      	movs	r2, r3
 80023f4:	2100      	movs	r1, #0
 80023f6:	f009 fcd2 	bl	800bd9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023fa:	234c      	movs	r3, #76	; 0x4c
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	0018      	movs	r0, r3
 8002400:	2310      	movs	r3, #16
 8002402:	001a      	movs	r2, r3
 8002404:	2100      	movs	r1, #0
 8002406:	f009 fcca 	bl	800bd9e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800240a:	003b      	movs	r3, r7
 800240c:	0018      	movs	r0, r3
 800240e:	234c      	movs	r3, #76	; 0x4c
 8002410:	001a      	movs	r2, r3
 8002412:	2100      	movs	r1, #0
 8002414:	f009 fcc3 	bl	800bd9e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	0018      	movs	r0, r3
 800241e:	f005 fd6d 	bl	8007efc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002422:	193b      	adds	r3, r7, r4
 8002424:	2202      	movs	r2, #2
 8002426:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002428:	193b      	adds	r3, r7, r4
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	0052      	lsls	r2, r2, #1
 800242e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002430:	193b      	adds	r3, r7, r4
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002436:	193b      	adds	r3, r7, r4
 8002438:	2240      	movs	r2, #64	; 0x40
 800243a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800243c:	193b      	adds	r3, r7, r4
 800243e:	2200      	movs	r2, #0
 8002440:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002442:	193b      	adds	r3, r7, r4
 8002444:	0018      	movs	r0, r3
 8002446:	f005 fda5 	bl	8007f94 <HAL_RCC_OscConfig>
 800244a:	1e03      	subs	r3, r0, #0
 800244c:	d001      	beq.n	8002452 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800244e:	f000 fb9d 	bl	8002b8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002452:	214c      	movs	r1, #76	; 0x4c
 8002454:	187b      	adds	r3, r7, r1
 8002456:	2207      	movs	r2, #7
 8002458:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800245a:	187b      	adds	r3, r7, r1
 800245c:	2200      	movs	r2, #0
 800245e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002460:	187b      	adds	r3, r7, r1
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002466:	187b      	adds	r3, r7, r1
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800246c:	187b      	adds	r3, r7, r1
 800246e:	2100      	movs	r1, #0
 8002470:	0018      	movs	r0, r3
 8002472:	f006 f8f5 	bl	8008660 <HAL_RCC_ClockConfig>
 8002476:	1e03      	subs	r3, r0, #0
 8002478:	d001      	beq.n	800247e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800247a:	f000 fb87 	bl	8002b8c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800247e:	003b      	movs	r3, r7
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <SystemClock_Config+0xd8>)
 8002482:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002484:	003b      	movs	r3, r7
 8002486:	2200      	movs	r2, #0
 8002488:	605a      	str	r2, [r3, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800248a:	003b      	movs	r3, r7
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002490:	003b      	movs	r3, r7
 8002492:	2200      	movs	r2, #0
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002496:	003b      	movs	r3, r7
 8002498:	2200      	movs	r2, #0
 800249a:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800249c:	003b      	movs	r3, r7
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a2:	003b      	movs	r3, r7
 80024a4:	0018      	movs	r0, r3
 80024a6:	f006 fa85 	bl	80089b4 <HAL_RCCEx_PeriphCLKConfig>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d001      	beq.n	80024b2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80024ae:	f000 fb6d 	bl	8002b8c <Error_Handler>
  }
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b027      	add	sp, #156	; 0x9c
 80024b8:	bd90      	pop	{r4, r7, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	00204043 	.word	0x00204043

080024c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	0018      	movs	r0, r3
 80024ca:	230c      	movs	r3, #12
 80024cc:	001a      	movs	r2, r3
 80024ce:	2100      	movs	r1, #0
 80024d0:	f009 fc65 	bl	800bd9e <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024d4:	4b2d      	ldr	r3, [pc, #180]	; (800258c <MX_ADC1_Init+0xcc>)
 80024d6:	4a2e      	ldr	r2, [pc, #184]	; (8002590 <MX_ADC1_Init+0xd0>)
 80024d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80024da:	4b2c      	ldr	r3, [pc, #176]	; (800258c <MX_ADC1_Init+0xcc>)
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	05d2      	lsls	r2, r2, #23
 80024e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <MX_ADC1_Init+0xcc>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024e8:	4b28      	ldr	r3, [pc, #160]	; (800258c <MX_ADC1_Init+0xcc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024ee:	4b27      	ldr	r3, [pc, #156]	; (800258c <MX_ADC1_Init+0xcc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024f4:	4b25      	ldr	r3, [pc, #148]	; (800258c <MX_ADC1_Init+0xcc>)
 80024f6:	2204      	movs	r2, #4
 80024f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <MX_ADC1_Init+0xcc>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <MX_ADC1_Init+0xcc>)
 8002502:	2200      	movs	r2, #0
 8002504:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002506:	4b21      	ldr	r3, [pc, #132]	; (800258c <MX_ADC1_Init+0xcc>)
 8002508:	2200      	movs	r2, #0
 800250a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <MX_ADC1_Init+0xcc>)
 800250e:	2201      	movs	r2, #1
 8002510:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <MX_ADC1_Init+0xcc>)
 8002514:	2220      	movs	r2, #32
 8002516:	2100      	movs	r1, #0
 8002518:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800251a:	4b1c      	ldr	r3, [pc, #112]	; (800258c <MX_ADC1_Init+0xcc>)
 800251c:	2200      	movs	r2, #0
 800251e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <MX_ADC1_Init+0xcc>)
 8002522:	2200      	movs	r2, #0
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <MX_ADC1_Init+0xcc>)
 8002528:	222c      	movs	r2, #44	; 0x2c
 800252a:	2100      	movs	r1, #0
 800252c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <MX_ADC1_Init+0xcc>)
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <MX_ADC1_Init+0xcc>)
 8002536:	2200      	movs	r2, #0
 8002538:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <MX_ADC1_Init+0xcc>)
 800253c:	2200      	movs	r2, #0
 800253e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <MX_ADC1_Init+0xcc>)
 8002542:	223c      	movs	r2, #60	; 0x3c
 8002544:	2100      	movs	r1, #0
 8002546:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002548:	4b10      	ldr	r3, [pc, #64]	; (800258c <MX_ADC1_Init+0xcc>)
 800254a:	2200      	movs	r2, #0
 800254c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <MX_ADC1_Init+0xcc>)
 8002550:	0018      	movs	r0, r3
 8002552:	f002 f829 	bl	80045a8 <HAL_ADC_Init>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d001      	beq.n	800255e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800255a:	f000 fb17 	bl	8002b8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <MX_ADC1_Init+0xd4>)
 8002562:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	2200      	movs	r2, #0
 8002568:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002570:	1d3a      	adds	r2, r7, #4
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <MX_ADC1_Init+0xcc>)
 8002574:	0011      	movs	r1, r2
 8002576:	0018      	movs	r0, r3
 8002578:	f002 f9f4 	bl	8004964 <HAL_ADC_ConfigChannel>
 800257c:	1e03      	subs	r3, r0, #0
 800257e:	d001      	beq.n	8002584 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002580:	f000 fb04 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b004      	add	sp, #16
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000334 	.word	0x20000334
 8002590:	40012400 	.word	0x40012400
 8002594:	0c000008 	.word	0x0c000008

08002598 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <MX_I2C2_Init+0x74>)
 800259e:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <MX_I2C2_Init+0x78>)
 80025a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <MX_I2C2_Init+0x74>)
 80025a4:	4a1b      	ldr	r2, [pc, #108]	; (8002614 <MX_I2C2_Init+0x7c>)
 80025a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <MX_I2C2_Init+0x74>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <MX_I2C2_Init+0x74>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b4:	4b15      	ldr	r3, [pc, #84]	; (800260c <MX_I2C2_Init+0x74>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <MX_I2C2_Init+0x74>)
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <MX_I2C2_Init+0x74>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <MX_I2C2_Init+0x74>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <MX_I2C2_Init+0x74>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_I2C2_Init+0x74>)
 80025d4:	0018      	movs	r0, r3
 80025d6:	f003 f9d7 	bl	8005988 <HAL_I2C_Init>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d001      	beq.n	80025e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80025de:	f000 fad5 	bl	8002b8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <MX_I2C2_Init+0x74>)
 80025e4:	2100      	movs	r1, #0
 80025e6:	0018      	movs	r0, r3
 80025e8:	f005 fbf0 	bl	8007dcc <HAL_I2CEx_ConfigAnalogFilter>
 80025ec:	1e03      	subs	r3, r0, #0
 80025ee:	d001      	beq.n	80025f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80025f0:	f000 facc 	bl	8002b8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <MX_I2C2_Init+0x74>)
 80025f6:	2100      	movs	r1, #0
 80025f8:	0018      	movs	r0, r3
 80025fa:	f005 fc33 	bl	8007e64 <HAL_I2CEx_ConfigDigitalFilter>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d001      	beq.n	8002606 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002602:	f000 fac3 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000288 	.word	0x20000288
 8002610:	40005800 	.word	0x40005800
 8002614:	00303d5b 	.word	0x00303d5b

08002618 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b098      	sub	sp, #96	; 0x60
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261e:	2354      	movs	r3, #84	; 0x54
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	0018      	movs	r0, r3
 8002624:	230c      	movs	r3, #12
 8002626:	001a      	movs	r2, r3
 8002628:	2100      	movs	r1, #0
 800262a:	f009 fbb8 	bl	800bd9e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800262e:	2338      	movs	r3, #56	; 0x38
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	0018      	movs	r0, r3
 8002634:	231c      	movs	r3, #28
 8002636:	001a      	movs	r2, r3
 8002638:	2100      	movs	r1, #0
 800263a:	f009 fbb0 	bl	800bd9e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	0018      	movs	r0, r3
 8002642:	2334      	movs	r3, #52	; 0x34
 8002644:	001a      	movs	r2, r3
 8002646:	2100      	movs	r1, #0
 8002648:	f009 fba9 	bl	800bd9e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800264c:	4b4b      	ldr	r3, [pc, #300]	; (800277c <MX_TIM1_Init+0x164>)
 800264e:	4a4c      	ldr	r2, [pc, #304]	; (8002780 <MX_TIM1_Init+0x168>)
 8002650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002652:	4b4a      	ldr	r3, [pc, #296]	; (800277c <MX_TIM1_Init+0x164>)
 8002654:	2200      	movs	r2, #0
 8002656:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002658:	4b48      	ldr	r3, [pc, #288]	; (800277c <MX_TIM1_Init+0x164>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <MX_TIM1_Init+0x164>)
 8002660:	4a48      	ldr	r2, [pc, #288]	; (8002784 <MX_TIM1_Init+0x16c>)
 8002662:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002664:	4b45      	ldr	r3, [pc, #276]	; (800277c <MX_TIM1_Init+0x164>)
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800266a:	4b44      	ldr	r3, [pc, #272]	; (800277c <MX_TIM1_Init+0x164>)
 800266c:	2200      	movs	r2, #0
 800266e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002670:	4b42      	ldr	r3, [pc, #264]	; (800277c <MX_TIM1_Init+0x164>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <MX_TIM1_Init+0x164>)
 8002678:	0018      	movs	r0, r3
 800267a:	f006 fbd7 	bl	8008e2c <HAL_TIM_PWM_Init>
 800267e:	1e03      	subs	r3, r0, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002682:	f000 fa83 	bl	8002b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002686:	2154      	movs	r1, #84	; 0x54
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800269a:	187a      	adds	r2, r7, r1
 800269c:	4b37      	ldr	r3, [pc, #220]	; (800277c <MX_TIM1_Init+0x164>)
 800269e:	0011      	movs	r1, r2
 80026a0:	0018      	movs	r0, r3
 80026a2:	f007 f85f 	bl	8009764 <HAL_TIMEx_MasterConfigSynchronization>
 80026a6:	1e03      	subs	r3, r0, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80026aa:	f000 fa6f 	bl	8002b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ae:	2138      	movs	r1, #56	; 0x38
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	2260      	movs	r2, #96	; 0x60
 80026b4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2200      	movs	r2, #0
 80026ba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2200      	movs	r2, #0
 80026c6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026da:	1879      	adds	r1, r7, r1
 80026dc:	4b27      	ldr	r3, [pc, #156]	; (800277c <MX_TIM1_Init+0x164>)
 80026de:	2200      	movs	r2, #0
 80026e0:	0018      	movs	r0, r3
 80026e2:	f006 fbfb 	bl	8008edc <HAL_TIM_PWM_ConfigChannel>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80026ea:	f000 fa4f 	bl	8002b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026ee:	2338      	movs	r3, #56	; 0x38
 80026f0:	18f9      	adds	r1, r7, r3
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <MX_TIM1_Init+0x164>)
 80026f4:	2204      	movs	r2, #4
 80026f6:	0018      	movs	r0, r3
 80026f8:	f006 fbf0 	bl	8008edc <HAL_TIM_PWM_ConfigChannel>
 80026fc:	1e03      	subs	r3, r0, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8002700:	f000 fa44 	bl	8002b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	2200      	movs	r2, #0
 800270e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2200      	movs	r2, #0
 800271a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	0192      	lsls	r2, r2, #6
 8002728:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	0492      	lsls	r2, r2, #18
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	2200      	movs	r2, #0
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	2200      	movs	r2, #0
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	2200      	movs	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002756:	1d3a      	adds	r2, r7, #4
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <MX_TIM1_Init+0x164>)
 800275a:	0011      	movs	r1, r2
 800275c:	0018      	movs	r0, r3
 800275e:	f007 f877 	bl	8009850 <HAL_TIMEx_ConfigBreakDeadTime>
 8002762:	1e03      	subs	r3, r0, #0
 8002764:	d001      	beq.n	800276a <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8002766:	f000 fa11 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <MX_TIM1_Init+0x164>)
 800276c:	0018      	movs	r0, r3
 800276e:	f000 fd9f 	bl	80032b0 <HAL_TIM_MspPostInit>

}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b018      	add	sp, #96	; 0x60
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	2000049c 	.word	0x2000049c
 8002780:	40012c00 	.word	0x40012c00
 8002784:	0000ffff 	.word	0x0000ffff

08002788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278e:	231c      	movs	r3, #28
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	0018      	movs	r0, r3
 8002794:	230c      	movs	r3, #12
 8002796:	001a      	movs	r2, r3
 8002798:	2100      	movs	r1, #0
 800279a:	f009 fb00 	bl	800bd9e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800279e:	003b      	movs	r3, r7
 80027a0:	0018      	movs	r0, r3
 80027a2:	231c      	movs	r3, #28
 80027a4:	001a      	movs	r2, r3
 80027a6:	2100      	movs	r1, #0
 80027a8:	f009 faf9 	bl	800bd9e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027ac:	4b29      	ldr	r3, [pc, #164]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027ae:	4a2a      	ldr	r2, [pc, #168]	; (8002858 <MX_TIM3_Init+0xd0>)
 80027b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027b2:	4b28      	ldr	r3, [pc, #160]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b8:	4b26      	ldr	r3, [pc, #152]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <MX_TIM3_Init+0xd4>)
 80027c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027d2:	0018      	movs	r0, r3
 80027d4:	f006 fb2a 	bl	8008e2c <HAL_TIM_PWM_Init>
 80027d8:	1e03      	subs	r3, r0, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80027dc:	f000 f9d6 	bl	8002b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e0:	211c      	movs	r1, #28
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027ee:	187a      	adds	r2, r7, r1
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027f2:	0011      	movs	r1, r2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f006 ffb5 	bl	8009764 <HAL_TIMEx_MasterConfigSynchronization>
 80027fa:	1e03      	subs	r3, r0, #0
 80027fc:	d001      	beq.n	8002802 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80027fe:	f000 f9c5 	bl	8002b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002802:	003b      	movs	r3, r7
 8002804:	2260      	movs	r2, #96	; 0x60
 8002806:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002808:	003b      	movs	r3, r7
 800280a:	2200      	movs	r2, #0
 800280c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800280e:	003b      	movs	r3, r7
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002814:	003b      	movs	r3, r7
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800281a:	0039      	movs	r1, r7
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <MX_TIM3_Init+0xcc>)
 800281e:	2200      	movs	r2, #0
 8002820:	0018      	movs	r0, r3
 8002822:	f006 fb5b 	bl	8008edc <HAL_TIM_PWM_ConfigChannel>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d001      	beq.n	800282e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800282a:	f000 f9af 	bl	8002b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800282e:	0039      	movs	r1, r7
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <MX_TIM3_Init+0xcc>)
 8002832:	2204      	movs	r2, #4
 8002834:	0018      	movs	r0, r3
 8002836:	f006 fb51 	bl	8008edc <HAL_TIM_PWM_ConfigChannel>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800283e:	f000 f9a5 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <MX_TIM3_Init+0xcc>)
 8002844:	0018      	movs	r0, r3
 8002846:	f000 fd33 	bl	80032b0 <HAL_TIM_MspPostInit>

}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b00a      	add	sp, #40	; 0x28
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	200002e8 	.word	0x200002e8
 8002858:	40000400 	.word	0x40000400
 800285c:	0000ffff 	.word	0x0000ffff

08002860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002866:	4a24      	ldr	r2, [pc, #144]	; (80028f8 <MX_USART1_UART_Init+0x98>)
 8002868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800286a:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 800286c:	2296      	movs	r2, #150	; 0x96
 800286e:	0212      	lsls	r2, r2, #8
 8002870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002878:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002886:	220c      	movs	r2, #12
 8002888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_CTS;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002894:	2200      	movs	r2, #0
 8002896:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002898:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 800289a:	2200      	movs	r2, #0
 800289c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028ac:	0018      	movs	r0, r3
 80028ae:	f007 f875 	bl	800999c <HAL_UART_Init>
 80028b2:	1e03      	subs	r3, r0, #0
 80028b4:	d001      	beq.n	80028ba <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80028b6:	f000 f969 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028bc:	2100      	movs	r1, #0
 80028be:	0018      	movs	r0, r3
 80028c0:	f009 f950 	bl	800bb64 <HAL_UARTEx_SetTxFifoThreshold>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d001      	beq.n	80028cc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80028c8:	f000 f960 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028ce:	2100      	movs	r1, #0
 80028d0:	0018      	movs	r0, r3
 80028d2:	f009 f987 	bl	800bbe4 <HAL_UARTEx_SetRxFifoThreshold>
 80028d6:	1e03      	subs	r3, r0, #0
 80028d8:	d001      	beq.n	80028de <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80028da:	f000 f957 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028e0:	0018      	movs	r0, r3
 80028e2:	f009 f905 	bl	800baf0 <HAL_UARTEx_DisableFifoMode>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d001      	beq.n	80028ee <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80028ea:	f000 f94f 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	2000040c 	.word	0x2000040c
 80028f8:	40013800 	.word	0x40013800

080028fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002900:	4b23      	ldr	r3, [pc, #140]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002902:	4a24      	ldr	r2, [pc, #144]	; (8002994 <MX_USART2_UART_Init+0x98>)
 8002904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002906:	4b22      	ldr	r3, [pc, #136]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002908:	2296      	movs	r2, #150	; 0x96
 800290a:	0212      	lsls	r2, r2, #8
 800290c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <MX_USART2_UART_Init+0x94>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002922:	220c      	movs	r2, #12
 8002924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <MX_USART2_UART_Init+0x94>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002934:	2200      	movs	r2, #0
 8002936:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <MX_USART2_UART_Init+0x94>)
 800293a:	2200      	movs	r2, #0
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002940:	2200      	movs	r2, #0
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002946:	0018      	movs	r0, r3
 8002948:	f007 f828 	bl	800999c <HAL_UART_Init>
 800294c:	1e03      	subs	r3, r0, #0
 800294e:	d001      	beq.n	8002954 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002950:	f000 f91c 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002956:	2100      	movs	r1, #0
 8002958:	0018      	movs	r0, r3
 800295a:	f009 f903 	bl	800bb64 <HAL_UARTEx_SetTxFifoThreshold>
 800295e:	1e03      	subs	r3, r0, #0
 8002960:	d001      	beq.n	8002966 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002962:	f000 f913 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002968:	2100      	movs	r1, #0
 800296a:	0018      	movs	r0, r3
 800296c:	f009 f93a 	bl	800bbe4 <HAL_UARTEx_SetRxFifoThreshold>
 8002970:	1e03      	subs	r3, r0, #0
 8002972:	d001      	beq.n	8002978 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002974:	f000 f90a 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <MX_USART2_UART_Init+0x94>)
 800297a:	0018      	movs	r0, r3
 800297c:	f009 f8b8 	bl	800baf0 <HAL_UARTEx_DisableFifoMode>
 8002980:	1e03      	subs	r3, r0, #0
 8002982:	d001      	beq.n	8002988 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002984:	f000 f902 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	200004e8 	.word	0x200004e8
 8002994:	40004400 	.word	0x40004400

08002998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <MX_DMA_Init+0x48>)
 80029a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_DMA_Init+0x48>)
 80029a4:	2101      	movs	r1, #1
 80029a6:	430a      	orrs	r2, r1
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
 80029aa:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <MX_DMA_Init+0x48>)
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	2201      	movs	r2, #1
 80029b0:	4013      	ands	r3, r2
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2009      	movs	r0, #9
 80029bc:	f002 fa94 	bl	8004ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80029c0:	2009      	movs	r0, #9
 80029c2:	f002 faa6 	bl	8004f12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	200a      	movs	r0, #10
 80029cc:	f002 fa8c 	bl	8004ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80029d0:	200a      	movs	r0, #10
 80029d2:	f002 fa9e 	bl	8004f12 <HAL_NVIC_EnableIRQ>

}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b002      	add	sp, #8
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	40021000 	.word	0x40021000

080029e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b08b      	sub	sp, #44	; 0x2c
 80029e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ea:	2414      	movs	r4, #20
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	0018      	movs	r0, r3
 80029f0:	2314      	movs	r3, #20
 80029f2:	001a      	movs	r2, r3
 80029f4:	2100      	movs	r1, #0
 80029f6:	f009 f9d2 	bl	800bd9e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fa:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <MX_GPIO_Init+0x190>)
 80029fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fe:	4b5d      	ldr	r3, [pc, #372]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a00:	2104      	movs	r1, #4
 8002a02:	430a      	orrs	r2, r1
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34
 8002a06:	4b5b      	ldr	r3, [pc, #364]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a12:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a16:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a18:	2120      	movs	r1, #32
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a1e:	4b55      	ldr	r3, [pc, #340]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a22:	2220      	movs	r2, #32
 8002a24:	4013      	ands	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	4b52      	ldr	r3, [pc, #328]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	430a      	orrs	r2, r1
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
 8002a36:	4b4f      	ldr	r3, [pc, #316]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a46:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a48:	2102      	movs	r1, #2
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a4e:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	2202      	movs	r2, #2
 8002a54:	4013      	ands	r3, r2
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a5a:	4b46      	ldr	r3, [pc, #280]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a5e:	4b45      	ldr	r3, [pc, #276]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a60:	2108      	movs	r1, #8
 8002a62:	430a      	orrs	r2, r1
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34
 8002a66:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HBRIDGE_BWD_Pin|LIMIT_SWITCH_0_Pin, GPIO_PIN_RESET);
 8002a72:	23c0      	movs	r3, #192	; 0xc0
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	4840      	ldr	r0, [pc, #256]	; (8002b78 <MX_GPIO_Init+0x194>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	f002 ff66 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, GPIO_PIN_RESET);
 8002a80:	4b3e      	ldr	r3, [pc, #248]	; (8002b7c <MX_GPIO_Init+0x198>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	2102      	movs	r1, #2
 8002a86:	0018      	movs	r0, r3
 8002a88:	f002 ff60 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIMIT_SWITCH_2_GPIO_Port, LIMIT_SWITCH_2_Pin, GPIO_PIN_RESET);
 8002a8c:	23a0      	movs	r3, #160	; 0xa0
 8002a8e:	05db      	lsls	r3, r3, #23
 8002a90:	2200      	movs	r2, #0
 8002a92:	2101      	movs	r1, #1
 8002a94:	0018      	movs	r0, r3
 8002a96:	f002 ff59 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WHITE_LED_Pin|UV_BULB_Pin|RAMAN_LASER_Pin|NICHROME_WIRE_0_Pin
 8002a9a:	4939      	ldr	r1, [pc, #228]	; (8002b80 <MX_GPIO_Init+0x19c>)
 8002a9c:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <MX_GPIO_Init+0x1a0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f002 ff53 	bl	800594c <HAL_GPIO_WritePin>
                          |AUTON_LED_1_AND_LASER_Pin|AUTON_LED_0_Pin|SERVO_PWM_2_Pin|AUTON_LED_2_AND_UV_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NICHROME_WIRE_1_Pin|NICHROME_WIRE_2_Pin, GPIO_PIN_RESET);
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <MX_GPIO_Init+0x1a4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	210a      	movs	r1, #10
 8002aac:	0018      	movs	r0, r3
 8002aae:	f002 ff4d 	bl	800594c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HBRIDGE_BWD_Pin LIMIT_SWITCH_0_Pin */
  GPIO_InitStruct.Pin = HBRIDGE_BWD_Pin|LIMIT_SWITCH_0_Pin;
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	22c0      	movs	r2, #192	; 0xc0
 8002ab6:	0212      	lsls	r2, r2, #8
 8002ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	2201      	movs	r2, #1
 8002abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	193b      	adds	r3, r7, r4
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002acc:	193b      	adds	r3, r7, r4
 8002ace:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <MX_GPIO_Init+0x194>)
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	0010      	movs	r0, r2
 8002ad4:	f002 fdce 	bl	8005674 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_SWITCH_1_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin;
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	2202      	movs	r2, #2
 8002adc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ade:	193b      	adds	r3, r7, r4
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	193b      	adds	r3, r7, r4
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	193b      	adds	r3, r7, r4
 8002aec:	2200      	movs	r2, #0
 8002aee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIMIT_SWITCH_1_GPIO_Port, &GPIO_InitStruct);
 8002af0:	193b      	adds	r3, r7, r4
 8002af2:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <MX_GPIO_Init+0x198>)
 8002af4:	0019      	movs	r1, r3
 8002af6:	0010      	movs	r0, r2
 8002af8:	f002 fdbc 	bl	8005674 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_2_Pin;
 8002afc:	193b      	adds	r3, r7, r4
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b02:	193b      	adds	r3, r7, r4
 8002b04:	2201      	movs	r2, #1
 8002b06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	193b      	adds	r3, r7, r4
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	193b      	adds	r3, r7, r4
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIMIT_SWITCH_2_GPIO_Port, &GPIO_InitStruct);
 8002b14:	193a      	adds	r2, r7, r4
 8002b16:	23a0      	movs	r3, #160	; 0xa0
 8002b18:	05db      	lsls	r3, r3, #23
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f002 fda9 	bl	8005674 <HAL_GPIO_Init>

  /*Configure GPIO pins : WHITE_LED_Pin UV_BULB_Pin RAMAN_LASER_Pin NICHROME_WIRE_0_Pin
                           AUTON_LED_1_AND_LASER_Pin AUTON_LED_0_Pin SERVO_PWM_2_Pin AUTON_LED_2_AND_UV_LED_Pin */
  GPIO_InitStruct.Pin = WHITE_LED_Pin|UV_BULB_Pin|RAMAN_LASER_Pin|NICHROME_WIRE_0_Pin
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <MX_GPIO_Init+0x19c>)
 8002b26:	601a      	str	r2, [r3, #0]
                          |AUTON_LED_1_AND_LASER_Pin|AUTON_LED_0_Pin|SERVO_PWM_2_Pin|AUTON_LED_2_AND_UV_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b28:	193b      	adds	r3, r7, r4
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	193b      	adds	r3, r7, r4
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	193b      	adds	r3, r7, r4
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	193b      	adds	r3, r7, r4
 8002b3c:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <MX_GPIO_Init+0x1a0>)
 8002b3e:	0019      	movs	r1, r3
 8002b40:	0010      	movs	r0, r2
 8002b42:	f002 fd97 	bl	8005674 <HAL_GPIO_Init>

  /*Configure GPIO pins : NICHROME_WIRE_1_Pin NICHROME_WIRE_2_Pin */
  GPIO_InitStruct.Pin = NICHROME_WIRE_1_Pin|NICHROME_WIRE_2_Pin;
 8002b46:	0021      	movs	r1, r4
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	220a      	movs	r2, #10
 8002b4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4e:	187b      	adds	r3, r7, r1
 8002b50:	2201      	movs	r2, #1
 8002b52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <MX_GPIO_Init+0x1a4>)
 8002b64:	0019      	movs	r1, r3
 8002b66:	0010      	movs	r0, r2
 8002b68:	f002 fd84 	bl	8005674 <HAL_GPIO_Init>

}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b00b      	add	sp, #44	; 0x2c
 8002b72:	bd90      	pop	{r4, r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	50000800 	.word	0x50000800
 8002b7c:	50001400 	.word	0x50001400
 8002b80:	00003e70 	.word	0x00003e70
 8002b84:	50000400 	.word	0x50000400
 8002b88:	50000c00 	.word	0x50000c00

08002b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b90:	b672      	cpsid	i
}
 8002b92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b94:	e7fe      	b.n	8002b94 <Error_Handler+0x8>
	...

08002b98 <main_loop>:
extern SMBus *i2cBus;
extern Device *triad[3];

#define JETSON_UART &huart2

int main_loop(){
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
	// Read and send all thermistor data over Jetson UART
	send_thermistor_data(thermistors, JETSON_UART);
#endif

	//Disable interrupts
	    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002b9e:	201b      	movs	r0, #27
 8002ba0:	f002 f9c7 	bl	8004f32 <HAL_NVIC_DisableIRQ>
	   	uint8_t message[20];
	   	for(int i = 0; i< 20; ++i){
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
 8002ba8:	e007      	b.n	8002bba <main_loop+0x22>
	   		message[i] = 0;
 8002baa:	003a      	movs	r2, r7
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	18d3      	adds	r3, r2, r3
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
	   	for(int i = 0; i< 20; ++i){
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b13      	cmp	r3, #19
 8002bbe:	ddf4      	ble.n	8002baa <main_loop+0x12>
	   	}
	   	if(cmd_received == 1){
 8002bc0:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <main_loop+0x134>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d10a      	bne.n	8002bde <main_loop+0x46>
	   		cmd_received = 0;
 8002bc8:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <main_loop+0x134>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
	   		memcpy(message,cmd_data,20);
 8002bce:	003a      	movs	r2, r7
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	; (8002cd0 <main_loop+0x138>)
 8002bd2:	0010      	movs	r0, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	2314      	movs	r3, #20
 8002bd8:	001a      	movs	r2, r3
 8002bda:	f009 f8d7 	bl	800bd8c <memcpy>
	   	}
	   	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bde:	201b      	movs	r0, #27
 8002be0:	f002 f997 	bl	8004f12 <HAL_NVIC_EnableIRQ>

#ifdef TRIAD_ENABLE
	// strcpy((char*)buf, "Hello!\r\n");
	// HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	// HAL_Delay(500);
	Channel *channel = new_channel(0, 0);
 8002be4:	2100      	movs	r1, #0
 8002be6:	2000      	movs	r0, #0
 8002be8:	f000 ff48 	bl	8003a7c <new_channel>
 8002bec:	0003      	movs	r3, r0
 8002bee:	617b      	str	r3, [r7, #20]

	// TODO: Don't hardcode the 0 here
	channel_select(mux, mux->channel_list[0]);
 8002bf0:	4b38      	ldr	r3, [pc, #224]	; (8002cd4 <main_loop+0x13c>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <main_loop+0x13c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	0010      	movs	r0, r2
 8002bfe:	f000 f90f 	bl	8002e20 <channel_select>

	for (uint8_t i = 0; i < 3; ++i) {
 8002c02:	231b      	movs	r3, #27
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e04b      	b.n	8002ca4 <main_loop+0x10c>
	  virtual_write(DEV_SEL, triad[i]->dev_register);
 8002c0c:	231b      	movs	r3, #27
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <main_loop+0x140>)
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	58d3      	ldr	r3, [r2, r3]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	204f      	movs	r0, #79	; 0x4f
 8002c1e:	f000 fedf 	bl	80039e0 <virtual_write>
	  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8002c22:	231a      	movs	r3, #26
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e030      	b.n	8002c8e <main_loop+0xf6>
		  channel = triad[i]->channels[j];
 8002c2c:	251b      	movs	r5, #27
 8002c2e:	197b      	adds	r3, r7, r5
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <main_loop+0x140>)
 8002c34:	0092      	lsls	r2, r2, #2
 8002c36:	58d2      	ldr	r2, [r2, r3]
 8002c38:	241a      	movs	r4, #26
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	18d3      	adds	r3, r2, r3
 8002c42:	3304      	adds	r3, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	617b      	str	r3, [r7, #20]
		  channel->color_data = get_decimal(channel->lsb_register, channel->msb_register);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	781a      	ldrb	r2, [r3, #0]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	0019      	movs	r1, r3
 8002c52:	0010      	movs	r0, r2
 8002c54:	f000 fdf3 	bl	800383e <get_decimal>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	805a      	strh	r2, [r3, #2]
		  // less complicated way
		  triad_data[(i*CHANNELS) + j] = channel->color_data;
 8002c60:	197b      	adds	r3, r7, r5
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	0013      	movs	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	189b      	adds	r3, r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	001a      	movs	r2, r3
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	18d2      	adds	r2, r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	8859      	ldrh	r1, [r3, #2]
 8002c78:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <main_loop+0x144>)
 8002c7a:	0052      	lsls	r2, r2, #1
 8002c7c:	52d1      	strh	r1, [r2, r3]

		  HAL_Delay(10);
 8002c7e:	200a      	movs	r0, #10
 8002c80:	f001 fb70 	bl	8004364 <HAL_Delay>
	  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8002c84:	193b      	adds	r3, r7, r4
 8002c86:	193a      	adds	r2, r7, r4
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	3201      	adds	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	231a      	movs	r3, #26
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d9c9      	bls.n	8002c2c <main_loop+0x94>
	for (uint8_t i = 0; i < 3; ++i) {
 8002c98:	221b      	movs	r2, #27
 8002c9a:	18bb      	adds	r3, r7, r2
 8002c9c:	18ba      	adds	r2, r7, r2
 8002c9e:	7812      	ldrb	r2, [r2, #0]
 8002ca0:	3201      	adds	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	231b      	movs	r3, #27
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d9ae      	bls.n	8002c0c <main_loop+0x74>
	  }
	}
	send_triad_data(triad_data, &huart2);
 8002cae:	4a0c      	ldr	r2, [pc, #48]	; (8002ce0 <main_loop+0x148>)
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <main_loop+0x144>)
 8002cb2:	0011      	movs	r1, r2
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 feff 	bl	8003ab8 <send_triad_data>

	HAL_Delay(10);
 8002cba:	200a      	movs	r0, #10
 8002cbc:	f001 fb52 	bl	8004364 <HAL_Delay>
#endif

	return 0;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b008      	add	sp, #32
 8002cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	20000218 	.word	0x20000218
 8002cd0:	200003f8 	.word	0x200003f8
 8002cd4:	200005a8 	.word	0x200005a8
 8002cd8:	200005f0 	.word	0x200005f0
 8002cdc:	200005ac 	.word	0x200005ac
 8002ce0:	200004e8 	.word	0x200004e8

08002ce4 <main_preloop>:
#include "main.h"
#include "main_loop.h"

#define JETSON_UART &huart2

int main_preloop(){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 8002ce8:	4926      	ldr	r1, [pc, #152]	; (8002d84 <main_preloop+0xa0>)
 8002cea:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <main_preloop+0xa4>)
 8002cec:	2214      	movs	r2, #20
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f007 f812 	bl	8009d18 <HAL_UART_Receive_DMA>

  mosfetcopy = (char *)malloc(21);
#endif

#ifdef MUX_ENABLE
  	i2cBus = new_smbus(&hi2c2, &huart2);
 8002cf4:	4a24      	ldr	r2, [pc, #144]	; (8002d88 <main_preloop+0xa4>)
 8002cf6:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <main_preloop+0xa8>)
 8002cf8:	0011      	movs	r1, r2
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 f8a1 	bl	8002e42 <new_smbus>
 8002d00:	0002      	movs	r2, r0
 8002d02:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <main_preloop+0xac>)
 8002d04:	601a      	str	r2, [r3, #0]
  	disable_DMA(i2cBus);
 8002d06:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <main_preloop+0xac>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 f8b9 	bl	8002e82 <disable_DMA>
  	mux = new_mux(i2cBus);
 8002d10:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <main_preloop+0xac>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f000 f841 	bl	8002d9c <new_mux>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <main_preloop+0xb0>)
 8002d1e:	601a      	str	r2, [r3, #0]

//	add_channel(mux, SPECTRAL_DEVICES);
//	channel_select(mux, mux->channel_list[SPECTRAL_DEVICES]);

	// TODO: Don't harcode 0 in here
	add_channel(mux, 0);
 8002d20:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <main_preloop+0xb0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2100      	movs	r1, #0
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 f85c 	bl	8002de4 <add_channel>
	channel_select(mux, mux->channel_list[0]);
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <main_preloop+0xb0>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <main_preloop+0xb0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	0019      	movs	r1, r3
 8002d38:	0010      	movs	r0, r2
 8002d3a:	f000 f871 	bl	8002e20 <channel_select>


	triad[0] = new_device(0x00);
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f000 fda0 	bl	8003884 <new_device>
 8002d44:	0002      	movs	r2, r0
 8002d46:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <main_preloop+0xb4>)
 8002d48:	601a      	str	r2, [r3, #0]
	triad[1] = new_device(0x01);
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	f000 fd9a 	bl	8003884 <new_device>
 8002d50:	0002      	movs	r2, r0
 8002d52:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <main_preloop+0xb4>)
 8002d54:	605a      	str	r2, [r3, #4]
	triad[2] = new_device(0x02);
 8002d56:	2002      	movs	r0, #2
 8002d58:	f000 fd94 	bl	8003884 <new_device>
 8002d5c:	0002      	movs	r2, r0
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <main_preloop+0xb4>)
 8002d60:	609a      	str	r2, [r3, #8]

	virtual_write(0x04, 0x28);
 8002d62:	2128      	movs	r1, #40	; 0x28
 8002d64:	2004      	movs	r0, #4
 8002d66:	f000 fe3b 	bl	80039e0 <virtual_write>
	virtual_write(0x04, 0x28);
 8002d6a:	2128      	movs	r1, #40	; 0x28
 8002d6c:	2004      	movs	r0, #4
 8002d6e:	f000 fe37 	bl	80039e0 <virtual_write>
	virtual_write(0x05, 0xFF);
 8002d72:	21ff      	movs	r1, #255	; 0xff
 8002d74:	2005      	movs	r0, #5
 8002d76:	f000 fe33 	bl	80039e0 <virtual_write>

#endif

	return 0;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	200002d4 	.word	0x200002d4
 8002d88:	200004e8 	.word	0x200004e8
 8002d8c:	20000288 	.word	0x20000288
 8002d90:	200005a0 	.word	0x200005a0
 8002d94:	200005a8 	.word	0x200005a8
 8002d98:	200005f0 	.word	0x200005f0

08002d9c <new_mux>:
#include "mux.h"
#include "smbus.h"

int channel_map[8] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };

Mux *new_mux(SMBus *i2cBus) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
    Mux *mux = malloc(sizeof(Mux));
 8002da4:	2028      	movs	r0, #40	; 0x28
 8002da6:	f008 ffe7 	bl	800bd78 <malloc>
 8002daa:	0003      	movs	r3, r0
 8002dac:	60bb      	str	r3, [r7, #8]
    mux->i2cBus = i2cBus;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; ++i) {
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e009      	b.n	8002dce <new_mux+0x32>
        mux->channel_list[i] = 0x00;
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	18d3      	adds	r3, r2, r3
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; ++i) {
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b07      	cmp	r3, #7
 8002dd2:	ddf2      	ble.n	8002dba <new_mux+0x1e>
    }
    mux->channels_active = 0;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24

    return mux;
 8002dda:	68bb      	ldr	r3, [r7, #8]
}
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b004      	add	sp, #16
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <add_channel>:

void add_channel(Mux *mux, int channel) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
    if (channel > 7) {
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b07      	cmp	r3, #7
 8002df2:	dc0f      	bgt.n	8002e14 <add_channel+0x30>
        return;
    }
    mux->channel_list[channel] = channel_map[channel];
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <add_channel+0x38>)
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	0092      	lsls	r2, r2, #2
 8002dfa:	58d2      	ldr	r2, [r2, r3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	18cb      	adds	r3, r1, r3
 8002e04:	3304      	adds	r3, #4
 8002e06:	601a      	str	r2, [r3, #0]
    mux->channels_active += 1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
 8002e12:	e000      	b.n	8002e16 <add_channel+0x32>
        return;
 8002e14:	46c0      	nop			; (mov r8, r8)
}
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000000 	.word	0x20000000

08002e20 <channel_select>:

void channel_select(Mux *mux, int channel){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
    write_byte_data(mux->i2cBus, I2C_MUX_ADDRESS, MUX_CMD, channel);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	22cc      	movs	r2, #204	; 0xcc
 8002e34:	2170      	movs	r1, #112	; 0x70
 8002e36:	f000 f8aa 	bl	8002f8e <write_byte_data>
}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b002      	add	sp, #8
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <new_smbus>:
#include "smbus.h"


SMBus *new_smbus(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
    SMBus *smbus = malloc(sizeof(SMBus));
 8002e4c:	2028      	movs	r0, #40	; 0x28
 8002e4e:	f008 ff93 	bl	800bd78 <malloc>
 8002e52:	0003      	movs	r3, r0
 8002e54:	60fb      	str	r3, [r7, #12]
    smbus->i2c = hi2c;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	601a      	str	r2, [r3, #0]
    smbus->uart = huart;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	605a      	str	r2, [r3, #4]
    smbus->DMA = TRUE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2227      	movs	r2, #39	; 0x27
 8002e66:	2101      	movs	r1, #1
 8002e68:	5499      	strb	r1, [r3, r2]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3309      	adds	r3, #9
 8002e6e:	221e      	movs	r2, #30
 8002e70:	2100      	movs	r1, #0
 8002e72:	0018      	movs	r0, r3
 8002e74:	f008 ff93 	bl	800bd9e <memset>

    return smbus;
 8002e78:	68fb      	ldr	r3, [r7, #12]
}
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b004      	add	sp, #16
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <disable_DMA>:

void disable_DMA(SMBus *smbus) {
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
    smbus->DMA = FALSE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2227      	movs	r2, #39	; 0x27
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]
}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b002      	add	sp, #8
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <read_byte_data>:
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
    }
    _check_error(smbus);
}

long read_byte_data(SMBus *smbus, uint8_t addr, char cmd) {
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af02      	add	r7, sp, #8
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	0008      	movs	r0, r1
 8002ea4:	0011      	movs	r1, r2
 8002ea6:	1cfb      	adds	r3, r7, #3
 8002ea8:	1c02      	adds	r2, r0, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
 8002eac:	1cbb      	adds	r3, r7, #2
 8002eae:	1c0a      	adds	r2, r1, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
    //transmits the address to read from
    smbus->buf[0] = cmd;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	1cba      	adds	r2, r7, #2
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	725a      	strb	r2, [r3, #9]
    if (!smbus->DMA) {
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2227      	movs	r2, #39	; 0x27
 8002ebe:	5c9b      	ldrb	r3, [r3, r2]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d114      	bne.n	8002eee <read_byte_data+0x54>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, 1000);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	1cfb      	adds	r3, r7, #3
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	18db      	adds	r3, r3, r3
 8002ed0:	b299      	uxth	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3309      	adds	r3, #9
 8002ed6:	001a      	movs	r2, r3
 8002ed8:	23fa      	movs	r3, #250	; 0xfa
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f002 fde8 	bl	8005ab4 <HAL_I2C_Master_Transmit>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	001a      	movs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	721a      	strb	r2, [r3, #8]
 8002eec:	e010      	b.n	8002f10 <read_byte_data+0x76>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	1cfb      	adds	r3, r7, #3
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	18db      	adds	r3, r3, r3
 8002efa:	b299      	uxth	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3309      	adds	r3, #9
 8002f00:	001a      	movs	r2, r3
 8002f02:	2301      	movs	r3, #1
 8002f04:	f002 ffe6 	bl	8005ed4 <HAL_I2C_Master_Transmit_DMA>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 f886 	bl	8003024 <_check_error>
    //reads from address sent above
    if (!smbus->DMA) {
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2227      	movs	r2, #39	; 0x27
 8002f1c:	5c9b      	ldrb	r3, [r3, r2]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d117      	bne.n	8002f52 <read_byte_data+0xb8>
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 1, 1000);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	1cfb      	adds	r3, r7, #3
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	b21b      	sxth	r3, r3
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4313      	orrs	r3, r2
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	b299      	uxth	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3309      	adds	r3, #9
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	23fa      	movs	r3, #250	; 0xfa
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	2301      	movs	r3, #1
 8002f44:	f002 febe 	bl	8005cc4 <HAL_I2C_Master_Receive>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	721a      	strb	r2, [r3, #8]
 8002f50:	e013      	b.n	8002f7a <read_byte_data+0xe0>
    }
    else {
        smbus->ret = HAL_I2C_Master_Receive_DMA(smbus->i2c, (addr << 1) | 1, smbus->buf, 1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	1cfb      	adds	r3, r7, #3
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	2201      	movs	r2, #1
 8002f60:	4313      	orrs	r3, r2
 8002f62:	b21b      	sxth	r3, r3
 8002f64:	b299      	uxth	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3309      	adds	r3, #9
 8002f6a:	001a      	movs	r2, r3
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f003 f8b7 	bl	80060e0 <HAL_I2C_Master_Receive_DMA>
 8002f72:	0003      	movs	r3, r0
 8002f74:	001a      	movs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f851 	bl	8003024 <_check_error>
    return smbus->buf[0];
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7a5b      	ldrb	r3, [r3, #9]
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b002      	add	sp, #8
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <write_byte_data>:

void write_byte_data(SMBus *smbus, uint8_t addr, char cmd, uint8_t data) {
 8002f8e:	b590      	push	{r4, r7, lr}
 8002f90:	b085      	sub	sp, #20
 8002f92:	af02      	add	r7, sp, #8
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	000c      	movs	r4, r1
 8002f98:	0010      	movs	r0, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	1cfb      	adds	r3, r7, #3
 8002f9e:	1c22      	adds	r2, r4, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	1cbb      	adds	r3, r7, #2
 8002fa4:	1c02      	adds	r2, r0, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	1c7b      	adds	r3, r7, #1
 8002faa:	1c0a      	adds	r2, r1, #0
 8002fac:	701a      	strb	r2, [r3, #0]
    smbus->buf[0] = cmd;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	1cba      	adds	r2, r7, #2
 8002fb2:	7812      	ldrb	r2, [r2, #0]
 8002fb4:	725a      	strb	r2, [r3, #9]
    smbus->buf[1] = data;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	1c7a      	adds	r2, r7, #1
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	729a      	strb	r2, [r3, #10]

    //SMBUS docs first byte is cmd to write, second is data
    if (!smbus->DMA) {
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2227      	movs	r2, #39	; 0x27
 8002fc2:	5c9b      	ldrb	r3, [r3, r2]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d114      	bne.n	8002ff2 <write_byte_data+0x64>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 2, 1000);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	1cfb      	adds	r3, r7, #3
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	18db      	adds	r3, r3, r3
 8002fd4:	b299      	uxth	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3309      	adds	r3, #9
 8002fda:	001a      	movs	r2, r3
 8002fdc:	23fa      	movs	r3, #250	; 0xfa
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	f002 fd66 	bl	8005ab4 <HAL_I2C_Master_Transmit>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	001a      	movs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	721a      	strb	r2, [r3, #8]
 8002ff0:	e010      	b.n	8003014 <write_byte_data+0x86>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 2);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	1cfb      	adds	r3, r7, #3
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	18db      	adds	r3, r3, r3
 8002ffe:	b299      	uxth	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3309      	adds	r3, #9
 8003004:	001a      	movs	r2, r3
 8003006:	2302      	movs	r3, #2
 8003008:	f002 ff64 	bl	8005ed4 <HAL_I2C_Master_Transmit_DMA>
 800300c:	0003      	movs	r3, r0
 800300e:	001a      	movs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f804 	bl	8003024 <_check_error>
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b003      	add	sp, #12
 8003022:	bd90      	pop	{r4, r7, pc}

08003024 <_check_error>:
    }
    
    _check_error(smbus);
}

int _check_error(SMBus *smbus) {
 8003024:	b5b0      	push	{r4, r5, r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
    if (smbus->ret != HAL_OK) {
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7a1b      	ldrb	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d020      	beq.n	8003076 <_check_error+0x52>
        strcpy((char*)smbus->buf, "Err \r\n");
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3309      	adds	r3, #9
 8003038:	001a      	movs	r2, r3
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <_check_error+0x5c>)
 800303c:	0010      	movs	r0, r2
 800303e:	0019      	movs	r1, r3
 8003040:	2307      	movs	r3, #7
 8003042:	001a      	movs	r2, r3
 8003044:	f008 fea2 	bl	800bd8c <memcpy>

        HAL_UART_Transmit(smbus->uart, smbus->buf, strlen((char*)smbus->buf), 1000);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685c      	ldr	r4, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3309      	adds	r3, #9
 8003050:	001d      	movs	r5, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3309      	adds	r3, #9
 8003056:	0018      	movs	r0, r3
 8003058:	f7fd f854 	bl	8000104 <strlen>
 800305c:	0003      	movs	r3, r0
 800305e:	b29a      	uxth	r2, r3
 8003060:	23fa      	movs	r3, #250	; 0xfa
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	0029      	movs	r1, r5
 8003066:	0020      	movs	r0, r4
 8003068:	f006 fcee 	bl	8009a48 <HAL_UART_Transmit>
        HAL_Delay(10);
 800306c:	200a      	movs	r0, #10
 800306e:	f001 f979 	bl	8004364 <HAL_Delay>
        return FALSE;
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <_check_error+0x54>
    }
    return TRUE;
 8003076:	2301      	movs	r3, #1
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b002      	add	sp, #8
 800307e:	bdb0      	pop	{r4, r5, r7, pc}
 8003080:	0800ec40 	.word	0x0800ec40

08003084 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_MspInit+0x4c>)
 800308c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <HAL_MspInit+0x4c>)
 8003090:	2101      	movs	r1, #1
 8003092:	430a      	orrs	r2, r1
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_MspInit+0x4c>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	2201      	movs	r2, #1
 800309c:	4013      	ands	r3, r2
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_MspInit+0x4c>)
 80030a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_MspInit+0x4c>)
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	0549      	lsls	r1, r1, #21
 80030ac:	430a      	orrs	r2, r1
 80030ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <HAL_MspInit+0x4c>)
 80030b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	055b      	lsls	r3, r3, #21
 80030b8:	4013      	ands	r3, r2
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80030be:	23c0      	movs	r3, #192	; 0xc0
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	0018      	movs	r0, r3
 80030c4:	f001 f972 	bl	80043ac <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b08b      	sub	sp, #44	; 0x2c
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	2414      	movs	r4, #20
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	0018      	movs	r0, r3
 80030e2:	2314      	movs	r3, #20
 80030e4:	001a      	movs	r2, r3
 80030e6:	2100      	movs	r1, #0
 80030e8:	f008 fe59 	bl	800bd9e <memset>
  if(hadc->Instance==ADC1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a18      	ldr	r2, [pc, #96]	; (8003154 <HAL_ADC_MspInit+0x80>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d129      	bne.n	800314a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80030f6:	4b18      	ldr	r3, [pc, #96]	; (8003158 <HAL_ADC_MspInit+0x84>)
 80030f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030fa:	4b17      	ldr	r3, [pc, #92]	; (8003158 <HAL_ADC_MspInit+0x84>)
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	0349      	lsls	r1, r1, #13
 8003100:	430a      	orrs	r2, r1
 8003102:	641a      	str	r2, [r3, #64]	; 0x40
 8003104:	4b14      	ldr	r3, [pc, #80]	; (8003158 <HAL_ADC_MspInit+0x84>)
 8003106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	035b      	lsls	r3, r3, #13
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	4b11      	ldr	r3, [pc, #68]	; (8003158 <HAL_ADC_MspInit+0x84>)
 8003114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_ADC_MspInit+0x84>)
 8003118:	2101      	movs	r1, #1
 800311a:	430a      	orrs	r2, r1
 800311c:	635a      	str	r2, [r3, #52]	; 0x34
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <HAL_ADC_MspInit+0x84>)
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	2201      	movs	r2, #1
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = THERMISTOR_1_Pin|THERMISTOR_2_Pin|THERMISTOR_0_Pin;
 800312a:	193b      	adds	r3, r7, r4
 800312c:	2238      	movs	r2, #56	; 0x38
 800312e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003130:	193b      	adds	r3, r7, r4
 8003132:	2203      	movs	r2, #3
 8003134:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	193b      	adds	r3, r7, r4
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313c:	193a      	adds	r2, r7, r4
 800313e:	23a0      	movs	r3, #160	; 0xa0
 8003140:	05db      	lsls	r3, r3, #23
 8003142:	0011      	movs	r1, r2
 8003144:	0018      	movs	r0, r3
 8003146:	f002 fa95 	bl	8005674 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46bd      	mov	sp, r7
 800314e:	b00b      	add	sp, #44	; 0x2c
 8003150:	bd90      	pop	{r4, r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	40012400 	.word	0x40012400
 8003158:	40021000 	.word	0x40021000

0800315c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b08b      	sub	sp, #44	; 0x2c
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	2414      	movs	r4, #20
 8003166:	193b      	adds	r3, r7, r4
 8003168:	0018      	movs	r0, r3
 800316a:	2314      	movs	r3, #20
 800316c:	001a      	movs	r2, r3
 800316e:	2100      	movs	r1, #0
 8003170:	f008 fe15 	bl	800bd9e <memset>
  if(hi2c->Instance==I2C2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a30      	ldr	r2, [pc, #192]	; (800323c <HAL_I2C_MspInit+0xe0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d15a      	bne.n	8003234 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317e:	4b30      	ldr	r3, [pc, #192]	; (8003240 <HAL_I2C_MspInit+0xe4>)
 8003180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003182:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <HAL_I2C_MspInit+0xe4>)
 8003184:	2101      	movs	r1, #1
 8003186:	430a      	orrs	r2, r1
 8003188:	635a      	str	r2, [r3, #52]	; 0x34
 800318a:	4b2d      	ldr	r3, [pc, #180]	; (8003240 <HAL_I2C_MspInit+0xe4>)
 800318c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318e:	2201      	movs	r2, #1
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003196:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <HAL_I2C_MspInit+0xe4>)
 8003198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319a:	4b29      	ldr	r3, [pc, #164]	; (8003240 <HAL_I2C_MspInit+0xe4>)
 800319c:	2102      	movs	r1, #2
 800319e:	430a      	orrs	r2, r1
 80031a0:	635a      	str	r2, [r3, #52]	; 0x34
 80031a2:	4b27      	ldr	r3, [pc, #156]	; (8003240 <HAL_I2C_MspInit+0xe4>)
 80031a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a6:	2202      	movs	r2, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA7     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MUX_SCL_Pin;
 80031ae:	193b      	adds	r3, r7, r4
 80031b0:	2280      	movs	r2, #128	; 0x80
 80031b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031b4:	193b      	adds	r3, r7, r4
 80031b6:	2212      	movs	r2, #18
 80031b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	193b      	adds	r3, r7, r4
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	193b      	adds	r3, r7, r4
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 80031c6:	193b      	adds	r3, r7, r4
 80031c8:	2208      	movs	r2, #8
 80031ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MUX_SCL_GPIO_Port, &GPIO_InitStruct);
 80031cc:	193a      	adds	r2, r7, r4
 80031ce:	23a0      	movs	r3, #160	; 0xa0
 80031d0:	05db      	lsls	r3, r3, #23
 80031d2:	0011      	movs	r1, r2
 80031d4:	0018      	movs	r0, r3
 80031d6:	f002 fa4d 	bl	8005674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MUX_SDA_Pin;
 80031da:	0021      	movs	r1, r4
 80031dc:	187b      	adds	r3, r7, r1
 80031de:	2280      	movs	r2, #128	; 0x80
 80031e0:	01d2      	lsls	r2, r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	2212      	movs	r2, #18
 80031e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	187b      	adds	r3, r7, r1
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	2200      	movs	r2, #0
 80031f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	2206      	movs	r2, #6
 80031fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MUX_SDA_GPIO_Port, &GPIO_InitStruct);
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	4a11      	ldr	r2, [pc, #68]	; (8003244 <HAL_I2C_MspInit+0xe8>)
 8003200:	0019      	movs	r1, r3
 8003202:	0010      	movs	r0, r2
 8003204:	f002 fa36 	bl	8005674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003208:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <HAL_I2C_MspInit+0xe4>)
 800320a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <HAL_I2C_MspInit+0xe4>)
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	03c9      	lsls	r1, r1, #15
 8003212:	430a      	orrs	r2, r1
 8003214:	63da      	str	r2, [r3, #60]	; 0x3c
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_I2C_MspInit+0xe4>)
 8003218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	03db      	lsls	r3, r3, #15
 800321e:	4013      	ands	r3, r2
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_3_IRQn, 0, 0);
 8003224:	2200      	movs	r2, #0
 8003226:	2100      	movs	r1, #0
 8003228:	2018      	movs	r0, #24
 800322a:	f001 fe5d 	bl	8004ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_3_IRQn);
 800322e:	2018      	movs	r0, #24
 8003230:	f001 fe6f 	bl	8004f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b00b      	add	sp, #44	; 0x2c
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	40005800 	.word	0x40005800
 8003240:	40021000 	.word	0x40021000
 8003244:	50000400 	.word	0x50000400

08003248 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a13      	ldr	r2, [pc, #76]	; (80032a4 <HAL_TIM_PWM_MspInit+0x5c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10e      	bne.n	8003278 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_TIM_PWM_MspInit+0x60>)
 800325c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_TIM_PWM_MspInit+0x60>)
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	0109      	lsls	r1, r1, #4
 8003264:	430a      	orrs	r2, r1
 8003266:	641a      	str	r2, [r3, #64]	; 0x40
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_TIM_PWM_MspInit+0x60>)
 800326a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	4013      	ands	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003276:	e010      	b.n	800329a <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM3)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <HAL_TIM_PWM_MspInit+0x64>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d10b      	bne.n	800329a <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_TIM_PWM_MspInit+0x60>)
 8003284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_TIM_PWM_MspInit+0x60>)
 8003288:	2102      	movs	r1, #2
 800328a:	430a      	orrs	r2, r1
 800328c:	63da      	str	r2, [r3, #60]	; 0x3c
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_TIM_PWM_MspInit+0x60>)
 8003290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003292:	2202      	movs	r2, #2
 8003294:	4013      	ands	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b004      	add	sp, #16
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40000400 	.word	0x40000400

080032b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b08d      	sub	sp, #52	; 0x34
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	241c      	movs	r4, #28
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	0018      	movs	r0, r3
 80032be:	2314      	movs	r3, #20
 80032c0:	001a      	movs	r2, r3
 80032c2:	2100      	movs	r1, #0
 80032c4:	f008 fd6b 	bl	800bd9e <memset>
  if(htim->Instance==TIM1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a4b      	ldr	r2, [pc, #300]	; (80033fc <HAL_TIM_MspPostInit+0x14c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d145      	bne.n	800335e <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d2:	4b4b      	ldr	r3, [pc, #300]	; (8003400 <HAL_TIM_MspPostInit+0x150>)
 80032d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d6:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_TIM_MspPostInit+0x150>)
 80032d8:	2101      	movs	r1, #1
 80032da:	430a      	orrs	r2, r1
 80032dc:	635a      	str	r2, [r3, #52]	; 0x34
 80032de:	4b48      	ldr	r3, [pc, #288]	; (8003400 <HAL_TIM_MspPostInit+0x150>)
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	2201      	movs	r2, #1
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ea:	4b45      	ldr	r3, [pc, #276]	; (8003400 <HAL_TIM_MspPostInit+0x150>)
 80032ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ee:	4b44      	ldr	r3, [pc, #272]	; (8003400 <HAL_TIM_MspPostInit+0x150>)
 80032f0:	2102      	movs	r1, #2
 80032f2:	430a      	orrs	r2, r1
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
 80032f6:	4b42      	ldr	r3, [pc, #264]	; (8003400 <HAL_TIM_MspPostInit+0x150>)
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	2202      	movs	r2, #2
 80032fc:	4013      	ands	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_0_Pin;
 8003302:	193b      	adds	r3, r7, r4
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	0052      	lsls	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330a:	193b      	adds	r3, r7, r4
 800330c:	2202      	movs	r2, #2
 800330e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	193b      	adds	r3, r7, r4
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	193b      	adds	r3, r7, r4
 8003318:	2200      	movs	r2, #0
 800331a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800331c:	193b      	adds	r3, r7, r4
 800331e:	2202      	movs	r2, #2
 8003320:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_0_GPIO_Port, &GPIO_InitStruct);
 8003322:	193a      	adds	r2, r7, r4
 8003324:	23a0      	movs	r3, #160	; 0xa0
 8003326:	05db      	lsls	r3, r3, #23
 8003328:	0011      	movs	r1, r2
 800332a:	0018      	movs	r0, r3
 800332c:	f002 f9a2 	bl	8005674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8003330:	0021      	movs	r1, r4
 8003332:	187b      	adds	r3, r7, r1
 8003334:	2208      	movs	r2, #8
 8003336:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003338:	187b      	adds	r3, r7, r1
 800333a:	2202      	movs	r2, #2
 800333c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	187b      	adds	r3, r7, r1
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003344:	187b      	adds	r3, r7, r1
 8003346:	2200      	movs	r2, #0
 8003348:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800334a:	187b      	adds	r3, r7, r1
 800334c:	2201      	movs	r2, #1
 800334e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8003350:	187b      	adds	r3, r7, r1
 8003352:	4a2c      	ldr	r2, [pc, #176]	; (8003404 <HAL_TIM_MspPostInit+0x154>)
 8003354:	0019      	movs	r1, r3
 8003356:	0010      	movs	r0, r2
 8003358:	f002 f98c 	bl	8005674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800335c:	e049      	b.n	80033f2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM3)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a29      	ldr	r2, [pc, #164]	; (8003408 <HAL_TIM_MspPostInit+0x158>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d144      	bne.n	80033f2 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003368:	4b25      	ldr	r3, [pc, #148]	; (8003400 <HAL_TIM_MspPostInit+0x150>)
 800336a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336c:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_TIM_MspPostInit+0x150>)
 800336e:	2101      	movs	r1, #1
 8003370:	430a      	orrs	r2, r1
 8003372:	635a      	str	r2, [r3, #52]	; 0x34
 8003374:	4b22      	ldr	r3, [pc, #136]	; (8003400 <HAL_TIM_MspPostInit+0x150>)
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	2201      	movs	r2, #1
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003380:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <HAL_TIM_MspPostInit+0x150>)
 8003382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003384:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_TIM_MspPostInit+0x150>)
 8003386:	2104      	movs	r1, #4
 8003388:	430a      	orrs	r2, r1
 800338a:	635a      	str	r2, [r3, #52]	; 0x34
 800338c:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <HAL_TIM_MspPostInit+0x150>)
 800338e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003390:	2204      	movs	r2, #4
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HBRIDGE_PWM_Pin;
 8003398:	241c      	movs	r4, #28
 800339a:	193b      	adds	r3, r7, r4
 800339c:	2240      	movs	r2, #64	; 0x40
 800339e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	193b      	adds	r3, r7, r4
 80033a2:	2202      	movs	r2, #2
 80033a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	193b      	adds	r3, r7, r4
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	193b      	adds	r3, r7, r4
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80033b2:	193b      	adds	r3, r7, r4
 80033b4:	2201      	movs	r2, #1
 80033b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HBRIDGE_PWM_GPIO_Port, &GPIO_InitStruct);
 80033b8:	193a      	adds	r2, r7, r4
 80033ba:	23a0      	movs	r3, #160	; 0xa0
 80033bc:	05db      	lsls	r3, r3, #23
 80033be:	0011      	movs	r1, r2
 80033c0:	0018      	movs	r0, r3
 80033c2:	f002 f957 	bl	8005674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HBRIDGE_FWD_Pin;
 80033c6:	0021      	movs	r1, r4
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	2280      	movs	r2, #128	; 0x80
 80033cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	2202      	movs	r2, #2
 80033d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	187b      	adds	r3, r7, r1
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033da:	187b      	adds	r3, r7, r1
 80033dc:	2200      	movs	r2, #0
 80033de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80033e0:	187b      	adds	r3, r7, r1
 80033e2:	2201      	movs	r2, #1
 80033e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HBRIDGE_FWD_GPIO_Port, &GPIO_InitStruct);
 80033e6:	187b      	adds	r3, r7, r1
 80033e8:	4a08      	ldr	r2, [pc, #32]	; (800340c <HAL_TIM_MspPostInit+0x15c>)
 80033ea:	0019      	movs	r1, r3
 80033ec:	0010      	movs	r0, r2
 80033ee:	f002 f941 	bl	8005674 <HAL_GPIO_Init>
}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b00d      	add	sp, #52	; 0x34
 80033f8:	bd90      	pop	{r4, r7, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	40021000 	.word	0x40021000
 8003404:	50000400 	.word	0x50000400
 8003408:	40000400 	.word	0x40000400
 800340c:	50000800 	.word	0x50000800

08003410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b08d      	sub	sp, #52	; 0x34
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003418:	241c      	movs	r4, #28
 800341a:	193b      	adds	r3, r7, r4
 800341c:	0018      	movs	r0, r3
 800341e:	2314      	movs	r3, #20
 8003420:	001a      	movs	r2, r3
 8003422:	2100      	movs	r1, #0
 8003424:	f008 fcbb 	bl	800bd9e <memset>
  if(huart->Instance==USART1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a70      	ldr	r2, [pc, #448]	; (80035f0 <HAL_UART_MspInit+0x1e0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d172      	bne.n	8003518 <HAL_UART_MspInit+0x108>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003432:	4b70      	ldr	r3, [pc, #448]	; (80035f4 <HAL_UART_MspInit+0x1e4>)
 8003434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003436:	4b6f      	ldr	r3, [pc, #444]	; (80035f4 <HAL_UART_MspInit+0x1e4>)
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	01c9      	lsls	r1, r1, #7
 800343c:	430a      	orrs	r2, r1
 800343e:	641a      	str	r2, [r3, #64]	; 0x40
 8003440:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <HAL_UART_MspInit+0x1e4>)
 8003442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	01db      	lsls	r3, r3, #7
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	4b69      	ldr	r3, [pc, #420]	; (80035f4 <HAL_UART_MspInit+0x1e4>)
 8003450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003452:	4b68      	ldr	r3, [pc, #416]	; (80035f4 <HAL_UART_MspInit+0x1e4>)
 8003454:	2101      	movs	r1, #1
 8003456:	430a      	orrs	r2, r1
 8003458:	635a      	str	r2, [r3, #52]	; 0x34
 800345a:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <HAL_UART_MspInit+0x1e4>)
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	2201      	movs	r2, #1
 8003460:	4013      	ands	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11 [PA9]     ------> USART1_CTS
    */
    GPIO_InitStruct.Pin = JETSON_UART_TX_Pin|JETSON_UART_RX_Pin;
 8003466:	193b      	adds	r3, r7, r4
 8003468:	22c0      	movs	r2, #192	; 0xc0
 800346a:	00d2      	lsls	r2, r2, #3
 800346c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	193b      	adds	r3, r7, r4
 8003470:	2202      	movs	r2, #2
 8003472:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	193b      	adds	r3, r7, r4
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800347a:	193b      	adds	r3, r7, r4
 800347c:	2202      	movs	r2, #2
 800347e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003480:	193b      	adds	r3, r7, r4
 8003482:	2201      	movs	r2, #1
 8003484:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003486:	193a      	adds	r2, r7, r4
 8003488:	23a0      	movs	r3, #160	; 0xa0
 800348a:	05db      	lsls	r3, r3, #23
 800348c:	0011      	movs	r1, r2
 800348e:	0018      	movs	r0, r3
 8003490:	f002 f8f0 	bl	8005674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JETSON_UART_CTS_Pin;
 8003494:	0021      	movs	r1, r4
 8003496:	187b      	adds	r3, r7, r1
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	2202      	movs	r2, #2
 80034a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2200      	movs	r2, #0
 80034ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2201      	movs	r2, #1
 80034b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(JETSON_UART_CTS_GPIO_Port, &GPIO_InitStruct);
 80034b6:	187a      	adds	r2, r7, r1
 80034b8:	23a0      	movs	r3, #160	; 0xa0
 80034ba:	05db      	lsls	r3, r3, #23
 80034bc:	0011      	movs	r1, r2
 80034be:	0018      	movs	r0, r3
 80034c0:	f002 f8d8 	bl	8005674 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80034c4:	4b4c      	ldr	r3, [pc, #304]	; (80035f8 <HAL_UART_MspInit+0x1e8>)
 80034c6:	4a4d      	ldr	r2, [pc, #308]	; (80035fc <HAL_UART_MspInit+0x1ec>)
 80034c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80034ca:	4b4b      	ldr	r3, [pc, #300]	; (80035f8 <HAL_UART_MspInit+0x1e8>)
 80034cc:	2232      	movs	r2, #50	; 0x32
 80034ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034d0:	4b49      	ldr	r3, [pc, #292]	; (80035f8 <HAL_UART_MspInit+0x1e8>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034d6:	4b48      	ldr	r3, [pc, #288]	; (80035f8 <HAL_UART_MspInit+0x1e8>)
 80034d8:	2200      	movs	r2, #0
 80034da:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034dc:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <HAL_UART_MspInit+0x1e8>)
 80034de:	2280      	movs	r2, #128	; 0x80
 80034e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034e2:	4b45      	ldr	r3, [pc, #276]	; (80035f8 <HAL_UART_MspInit+0x1e8>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034e8:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <HAL_UART_MspInit+0x1e8>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80034ee:	4b42      	ldr	r3, [pc, #264]	; (80035f8 <HAL_UART_MspInit+0x1e8>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034f4:	4b40      	ldr	r3, [pc, #256]	; (80035f8 <HAL_UART_MspInit+0x1e8>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034fa:	4b3f      	ldr	r3, [pc, #252]	; (80035f8 <HAL_UART_MspInit+0x1e8>)
 80034fc:	0018      	movs	r0, r3
 80034fe:	f001 fd45 	bl	8004f8c <HAL_DMA_Init>
 8003502:	1e03      	subs	r3, r0, #0
 8003504:	d001      	beq.n	800350a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8003506:	f7ff fb41 	bl	8002b8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a3a      	ldr	r2, [pc, #232]	; (80035f8 <HAL_UART_MspInit+0x1e8>)
 800350e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003510:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <HAL_UART_MspInit+0x1e8>)
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003516:	e066      	b.n	80035e6 <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a38      	ldr	r2, [pc, #224]	; (8003600 <HAL_UART_MspInit+0x1f0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d161      	bne.n	80035e6 <HAL_UART_MspInit+0x1d6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003522:	4b34      	ldr	r3, [pc, #208]	; (80035f4 <HAL_UART_MspInit+0x1e4>)
 8003524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003526:	4b33      	ldr	r3, [pc, #204]	; (80035f4 <HAL_UART_MspInit+0x1e4>)
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	0289      	lsls	r1, r1, #10
 800352c:	430a      	orrs	r2, r1
 800352e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003530:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <HAL_UART_MspInit+0x1e4>)
 8003532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	029b      	lsls	r3, r3, #10
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353e:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <HAL_UART_MspInit+0x1e4>)
 8003540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003542:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <HAL_UART_MspInit+0x1e4>)
 8003544:	2101      	movs	r1, #1
 8003546:	430a      	orrs	r2, r1
 8003548:	635a      	str	r2, [r3, #52]	; 0x34
 800354a:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <HAL_UART_MspInit+0x1e4>)
 800354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8003556:	211c      	movs	r1, #28
 8003558:	187b      	adds	r3, r7, r1
 800355a:	4a2a      	ldr	r2, [pc, #168]	; (8003604 <HAL_UART_MspInit+0x1f4>)
 800355c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	187b      	adds	r3, r7, r1
 8003560:	2202      	movs	r2, #2
 8003562:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	187b      	adds	r3, r7, r1
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356a:	187b      	adds	r3, r7, r1
 800356c:	2200      	movs	r2, #0
 800356e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003570:	187b      	adds	r3, r7, r1
 8003572:	2201      	movs	r2, #1
 8003574:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003576:	187a      	adds	r2, r7, r1
 8003578:	23a0      	movs	r3, #160	; 0xa0
 800357a:	05db      	lsls	r3, r3, #23
 800357c:	0011      	movs	r1, r2
 800357e:	0018      	movs	r0, r3
 8003580:	f002 f878 	bl	8005674 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003584:	4b20      	ldr	r3, [pc, #128]	; (8003608 <HAL_UART_MspInit+0x1f8>)
 8003586:	4a21      	ldr	r2, [pc, #132]	; (800360c <HAL_UART_MspInit+0x1fc>)
 8003588:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <HAL_UART_MspInit+0x1f8>)
 800358c:	2234      	movs	r2, #52	; 0x34
 800358e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003590:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_UART_MspInit+0x1f8>)
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003596:	4b1c      	ldr	r3, [pc, #112]	; (8003608 <HAL_UART_MspInit+0x1f8>)
 8003598:	2200      	movs	r2, #0
 800359a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800359c:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_UART_MspInit+0x1f8>)
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035a2:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HAL_UART_MspInit+0x1f8>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <HAL_UART_MspInit+0x1f8>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_UART_MspInit+0x1f8>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <HAL_UART_MspInit+0x1f8>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HAL_UART_MspInit+0x1f8>)
 80035bc:	0018      	movs	r0, r3
 80035be:	f001 fce5 	bl	8004f8c <HAL_DMA_Init>
 80035c2:	1e03      	subs	r3, r0, #0
 80035c4:	d001      	beq.n	80035ca <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 80035c6:	f7ff fae1 	bl	8002b8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <HAL_UART_MspInit+0x1f8>)
 80035ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80035d0:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_UART_MspInit+0x1f8>)
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2100      	movs	r1, #0
 80035da:	201c      	movs	r0, #28
 80035dc:	f001 fc84 	bl	8004ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 80035e0:	201c      	movs	r0, #28
 80035e2:	f001 fc96 	bl	8004f12 <HAL_NVIC_EnableIRQ>
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b00d      	add	sp, #52	; 0x34
 80035ec:	bd90      	pop	{r4, r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	40013800 	.word	0x40013800
 80035f4:	40021000 	.word	0x40021000
 80035f8:	20000398 	.word	0x20000398
 80035fc:	40020008 	.word	0x40020008
 8003600:	40004400 	.word	0x40004400
 8003604:	00008004 	.word	0x00008004
 8003608:	20000228 	.word	0x20000228
 800360c:	4002001c 	.word	0x4002001c

08003610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003614:	e7fe      	b.n	8003614 <NMI_Handler+0x4>

08003616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800361a:	e7fe      	b.n	800361a <HardFault_Handler+0x4>

0800361c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003634:	f000 fe7a 	bl	800432c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <DMA1_Channel1_IRQHandler+0x14>)
 8003646:	0018      	movs	r0, r3
 8003648:	f001 fe9a 	bl	8005380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	20000398 	.word	0x20000398

08003658 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <DMA1_Channel2_3_IRQHandler+0x14>)
 800365e:	0018      	movs	r0, r3
 8003660:	f001 fe8e 	bl	8005380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	20000228 	.word	0x20000228

08003670 <I2C2_3_IRQHandler>:

/**
  * @brief This function handles I2C2, I2C3 Interrupt (combined with EXTI 24 and EXTI 22).
  */
void I2C2_3_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_3_IRQn 0 */

  /* USER CODE END I2C2_3_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <I2C2_3_IRQHandler+0x2c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	23e0      	movs	r3, #224	; 0xe0
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4013      	ands	r3, r2
 8003680:	d004      	beq.n	800368c <I2C2_3_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <I2C2_3_IRQHandler+0x2c>)
 8003684:	0018      	movs	r0, r3
 8003686:	f002 fe4b 	bl	8006320 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_3_IRQn 1 */

  /* USER CODE END I2C2_3_IRQn 1 */
}
 800368a:	e003      	b.n	8003694 <I2C2_3_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 800368c:	4b03      	ldr	r3, [pc, #12]	; (800369c <I2C2_3_IRQHandler+0x2c>)
 800368e:	0018      	movs	r0, r3
 8003690:	f002 fe2c 	bl	80062ec <HAL_I2C_EV_IRQHandler>
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	20000288 	.word	0x20000288

080036a0 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <USART2_LPUART2_IRQHandler+0x14>)
 80036a6:	0018      	movs	r0, r3
 80036a8:	f006 fcd4 	bl	800a054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	200004e8 	.word	0x200004e8

080036b8 <_getpid>:
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	2301      	movs	r3, #1
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_kill>:
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
 80036ce:	f008 fb29 	bl	800bd24 <__errno>
 80036d2:	0003      	movs	r3, r0
 80036d4:	2216      	movs	r2, #22
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	2301      	movs	r3, #1
 80036da:	425b      	negs	r3, r3
 80036dc:	0018      	movs	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <_exit>:
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	2301      	movs	r3, #1
 80036ee:	425a      	negs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0011      	movs	r1, r2
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff ffe5 	bl	80036c4 <_kill>
 80036fa:	e7fe      	b.n	80036fa <_exit+0x16>

080036fc <_read>:
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	e00a      	b.n	8003724 <_read+0x28>
 800370e:	e000      	b.n	8003712 <_read+0x16>
 8003710:	bf00      	nop
 8003712:	0001      	movs	r1, r0
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	60ba      	str	r2, [r7, #8]
 800371a:	b2ca      	uxtb	r2, r1
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	3301      	adds	r3, #1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	429a      	cmp	r2, r3
 800372a:	dbf0      	blt.n	800370e <_read+0x12>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0018      	movs	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	b006      	add	sp, #24
 8003734:	bd80      	pop	{r7, pc}

08003736 <_write>:
 8003736:	b580      	push	{r7, lr}
 8003738:	b086      	sub	sp, #24
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e009      	b.n	800375c <_write+0x26>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	60ba      	str	r2, [r7, #8]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	0018      	movs	r0, r3
 8003752:	e000      	b.n	8003756 <_write+0x20>
 8003754:	bf00      	nop
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3301      	adds	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	dbf1      	blt.n	8003748 <_write+0x12>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b006      	add	sp, #24
 800376c:	bd80      	pop	{r7, pc}

0800376e <_close>:
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	2301      	movs	r3, #1
 8003778:	425b      	negs	r3, r3
 800377a:	0018      	movs	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	b002      	add	sp, #8
 8003780:	bd80      	pop	{r7, pc}

08003782 <_fstat>:
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	0192      	lsls	r2, r2, #6
 8003792:	605a      	str	r2, [r3, #4]
 8003794:	2300      	movs	r3, #0
 8003796:	0018      	movs	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	b002      	add	sp, #8
 800379c:	bd80      	pop	{r7, pc}

0800379e <_isatty>:
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	2301      	movs	r3, #1
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b002      	add	sp, #8
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <_lseek>:
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	2300      	movs	r3, #0
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <_sbrk>:
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	4a14      	ldr	r2, [pc, #80]	; (8003824 <_sbrk+0x5c>)
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <_sbrk+0x60>)
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	4b13      	ldr	r3, [pc, #76]	; (800382c <_sbrk+0x64>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <_sbrk+0x22>
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <_sbrk+0x64>)
 80037e6:	4a12      	ldr	r2, [pc, #72]	; (8003830 <_sbrk+0x68>)
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <_sbrk+0x64>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	18d3      	adds	r3, r2, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d207      	bcs.n	8003808 <_sbrk+0x40>
 80037f8:	f008 fa94 	bl	800bd24 <__errno>
 80037fc:	0003      	movs	r3, r0
 80037fe:	220c      	movs	r2, #12
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	2301      	movs	r3, #1
 8003804:	425b      	negs	r3, r3
 8003806:	e009      	b.n	800381c <_sbrk+0x54>
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <_sbrk+0x64>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <_sbrk+0x64>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	18d2      	adds	r2, r2, r3
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <_sbrk+0x64>)
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	b006      	add	sp, #24
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20024000 	.word	0x20024000
 8003828:	00000400 	.word	0x00000400
 800382c:	2000021c 	.word	0x2000021c
 8003830:	20000610 	.word	0x20000610

08003834 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <get_decimal>:
SMBus *i2cBus;
Device *triad[3];

uint16_t triad_data[18];

uint16_t get_decimal(uint8_t virtual_reg_l, uint8_t virtual_reg_h) {
 800383e:	b590      	push	{r4, r7, lr}
 8003840:	b085      	sub	sp, #20
 8003842:	af00      	add	r7, sp, #0
 8003844:	0002      	movs	r2, r0
 8003846:	1dfb      	adds	r3, r7, #7
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	1dbb      	adds	r3, r7, #6
 800384c:	1c0a      	adds	r2, r1, #0
 800384e:	701a      	strb	r2, [r3, #0]
	uint16_t high = virtual_read(virtual_reg_h) << 8;
 8003850:	1dbb      	adds	r3, r7, #6
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	0018      	movs	r0, r3
 8003856:	f000 f85d 	bl	8003914 <virtual_read>
 800385a:	0003      	movs	r3, r0
 800385c:	b29a      	uxth	r2, r3
 800385e:	240e      	movs	r4, #14
 8003860:	193b      	adds	r3, r7, r4
 8003862:	0212      	lsls	r2, r2, #8
 8003864:	801a      	strh	r2, [r3, #0]
	return high | (virtual_read(virtual_reg_l) & 0xFF);
 8003866:	1dfb      	adds	r3, r7, #7
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	0018      	movs	r0, r3
 800386c:	f000 f852 	bl	8003914 <virtual_read>
 8003870:	0003      	movs	r3, r0
 8003872:	b29a      	uxth	r2, r3
 8003874:	193b      	adds	r3, r7, r4
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	4313      	orrs	r3, r2
 800387a:	b29b      	uxth	r3, r3
}
 800387c:	0018      	movs	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	b005      	add	sp, #20
 8003882:	bd90      	pop	{r4, r7, pc}

08003884 <new_device>:

Device* new_device(uint8_t dev_register) {
 8003884:	b5b0      	push	{r4, r5, r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	0002      	movs	r2, r0
 800388c:	1dfb      	adds	r3, r7, #7
 800388e:	701a      	strb	r2, [r3, #0]
	Device* dev = malloc(sizeof(Device));
 8003890:	201c      	movs	r0, #28
 8003892:	f008 fa71 	bl	800bd78 <malloc>
 8003896:	0003      	movs	r3, r0
 8003898:	613b      	str	r3, [r7, #16]
	dev->dev_register = dev_register;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1dfa      	adds	r2, r7, #7
 800389e:	7812      	ldrb	r2, [r2, #0]
 80038a0:	701a      	strb	r2, [r3, #0]

	uint8_t START_REG = 0x08; //RAW_VALUE_RGA_LOW;
 80038a2:	230f      	movs	r3, #15
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	2208      	movs	r2, #8
 80038a8:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < CHANNELS; ++i) {
 80038aa:	2317      	movs	r3, #23
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	e024      	b.n	80038fe <new_device+0x7a>
		dev->channels[i] = new_channel(START_REG + (2 * i), START_REG + (2 * i) + 1);
 80038b4:	2117      	movs	r1, #23
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	18db      	adds	r3, r3, r3
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	240f      	movs	r4, #15
 80038c0:	193b      	adds	r3, r7, r4
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	18d3      	adds	r3, r2, r3
 80038c6:	b2d8      	uxtb	r0, r3
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	18db      	adds	r3, r3, r3
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	193b      	adds	r3, r7, r4
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	18d3      	adds	r3, r2, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	3301      	adds	r3, #1
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	000d      	movs	r5, r1
 80038de:	187b      	adds	r3, r7, r1
 80038e0:	781c      	ldrb	r4, [r3, #0]
 80038e2:	0011      	movs	r1, r2
 80038e4:	f000 f8ca 	bl	8003a7c <new_channel>
 80038e8:	0001      	movs	r1, r0
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	00a3      	lsls	r3, r4, #2
 80038ee:	18d3      	adds	r3, r2, r3
 80038f0:	3304      	adds	r3, #4
 80038f2:	6019      	str	r1, [r3, #0]
	for (uint8_t i = 0; i < CHANNELS; ++i) {
 80038f4:	197b      	adds	r3, r7, r5
 80038f6:	197a      	adds	r2, r7, r5
 80038f8:	7812      	ldrb	r2, [r2, #0]
 80038fa:	3201      	adds	r2, #1
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	2317      	movs	r3, #23
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b05      	cmp	r3, #5
 8003906:	d9d5      	bls.n	80038b4 <new_device+0x30>
	}
	return dev;
 8003908:	693b      	ldr	r3, [r7, #16]
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	b006      	add	sp, #24
 8003910:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003914 <virtual_read>:

uint8_t virtual_read(uint8_t v_reg) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	0002      	movs	r2, r0
 800391c:	1dfb      	adds	r3, r7, #7
 800391e:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t d;

	// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
	status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003920:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <virtual_read+0xc8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2200      	movs	r2, #0
 8003926:	2149      	movs	r1, #73	; 0x49
 8003928:	0018      	movs	r0, r3
 800392a:	f7ff fab6 	bl	8002e9a <read_byte_data>
 800392e:	0002      	movs	r2, r0
 8003930:	210f      	movs	r1, #15
 8003932:	187b      	adds	r3, r7, r1
 8003934:	701a      	strb	r2, [r3, #0]

	if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8003936:	187b      	adds	r3, r7, r1
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2201      	movs	r2, #1
 800393c:	4013      	ands	r3, r2
 800393e:	d00a      	beq.n	8003956 <virtual_read+0x42>
		// d = nucleo_byte_read(I2C_AS72XX_SLAVE_READ_REG);
		d = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <virtual_read+0xc8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2202      	movs	r2, #2
 8003946:	2149      	movs	r1, #73	; 0x49
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff faa6 	bl	8002e9a <read_byte_data>
 800394e:	0002      	movs	r2, r0
 8003950:	230e      	movs	r3, #14
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	701a      	strb	r2, [r3, #0]
	}

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003956:	4b21      	ldr	r3, [pc, #132]	; (80039dc <virtual_read+0xc8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	2149      	movs	r1, #73	; 0x49
 800395e:	0018      	movs	r0, r3
 8003960:	f7ff fa9b 	bl	8002e9a <read_byte_data>
 8003964:	0002      	movs	r2, r0
 8003966:	210f      	movs	r1, #15
 8003968:	187b      	adds	r3, r7, r1
 800396a:	701a      	strb	r2, [r3, #0]

		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 800396c:	187b      	adds	r3, r7, r1
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2202      	movs	r2, #2
 8003972:	4013      	ands	r3, r2
 8003974:	d003      	beq.n	800397e <virtual_read+0x6a>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 8003976:	2005      	movs	r0, #5
 8003978:	f000 fcf4 	bl	8004364 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 800397c:	e7eb      	b.n	8003956 <virtual_read+0x42>
			break;
 800397e:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
 8003980:	4b16      	ldr	r3, [pc, #88]	; (80039dc <virtual_read+0xc8>)
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	1dfb      	adds	r3, r7, #7
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2201      	movs	r2, #1
 800398a:	2149      	movs	r1, #73	; 0x49
 800398c:	f7ff faff 	bl	8002f8e <write_byte_data>

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003990:	4b12      	ldr	r3, [pc, #72]	; (80039dc <virtual_read+0xc8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2200      	movs	r2, #0
 8003996:	2149      	movs	r1, #73	; 0x49
 8003998:	0018      	movs	r0, r3
 800399a:	f7ff fa7e 	bl	8002e9a <read_byte_data>
 800399e:	0002      	movs	r2, r0
 80039a0:	210f      	movs	r1, #15
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	701a      	strb	r2, [r3, #0]

		if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 80039a6:	187b      	adds	r3, r7, r1
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2201      	movs	r2, #1
 80039ac:	4013      	ands	r3, r2
 80039ae:	d103      	bne.n	80039b8 <virtual_read+0xa4>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 80039b0:	2005      	movs	r0, #5
 80039b2:	f000 fcd7 	bl	8004364 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 80039b6:	e7eb      	b.n	8003990 <virtual_read+0x7c>
			break;
 80039b8:	46c0      	nop			; (mov r8, r8)
	}

	// d = nucleo_byte_read( I2C_AS72XX_SLAVE_READ_REG);

	d = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <virtual_read+0xc8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2202      	movs	r2, #2
 80039c0:	2149      	movs	r1, #73	; 0x49
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7ff fa69 	bl	8002e9a <read_byte_data>
 80039c8:	0002      	movs	r2, r0
 80039ca:	210e      	movs	r1, #14
 80039cc:	187b      	adds	r3, r7, r1
 80039ce:	701a      	strb	r2, [r3, #0]

	return d;
 80039d0:	187b      	adds	r3, r7, r1
 80039d2:	781b      	ldrb	r3, [r3, #0]
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b004      	add	sp, #16
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	200005a0 	.word	0x200005a0

080039e0 <virtual_write>:


void virtual_write(uint8_t v_reg, uint8_t data) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	0002      	movs	r2, r0
 80039e8:	1dfb      	adds	r3, r7, #7
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	1dbb      	adds	r3, r7, #6
 80039ee:	1c0a      	adds	r2, r1, #0
 80039f0:	701a      	strb	r2, [r3, #0]
	uint8_t status;

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 80039f2:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <virtual_write+0x98>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2200      	movs	r2, #0
 80039f8:	2149      	movs	r1, #73	; 0x49
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7ff fa4d 	bl	8002e9a <read_byte_data>
 8003a00:	0002      	movs	r2, r0
 8003a02:	210f      	movs	r1, #15
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	701a      	strb	r2, [r3, #0]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8003a08:	187b      	adds	r3, r7, r1
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d003      	beq.n	8003a1a <virtual_write+0x3a>
			break;
		}
		HAL_Delay(5);
 8003a12:	2005      	movs	r0, #5
 8003a14:	f000 fca6 	bl	8004364 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003a18:	e7eb      	b.n	80039f2 <virtual_write+0x12>
			break;
 8003a1a:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
 8003a1c:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <virtual_write+0x98>)
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	1dfb      	adds	r3, r7, #7
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2280      	movs	r2, #128	; 0x80
 8003a26:	4252      	negs	r2, r2
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	2149      	movs	r1, #73	; 0x49
 8003a30:	f7ff faad 	bl	8002f8e <write_byte_data>

	while(1) {
//		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <virtual_write+0x98>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2149      	movs	r1, #73	; 0x49
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7ff fa2c 	bl	8002e9a <read_byte_data>
 8003a42:	0002      	movs	r2, r0
 8003a44:	210f      	movs	r1, #15
 8003a46:	187b      	adds	r3, r7, r1
 8003a48:	701a      	strb	r2, [r3, #0]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8003a4a:	187b      	adds	r3, r7, r1
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	4013      	ands	r3, r2
 8003a52:	d003      	beq.n	8003a5c <virtual_write+0x7c>
			break;
		}
		HAL_Delay(5);
 8003a54:	2005      	movs	r0, #5
 8003a56:	f000 fc85 	bl	8004364 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003a5a:	e7eb      	b.n	8003a34 <virtual_write+0x54>
			break;
 8003a5c:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, data);
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, data);
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <virtual_write+0x98>)
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	1dbb      	adds	r3, r7, #6
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2201      	movs	r2, #1
 8003a68:	2149      	movs	r1, #73	; 0x49
 8003a6a:	f7ff fa90 	bl	8002f8e <write_byte_data>
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	200005a0 	.word	0x200005a0

08003a7c <new_channel>:

Channel* new_channel(uint8_t lsb_r, uint8_t msb_r) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	0002      	movs	r2, r0
 8003a84:	1dfb      	adds	r3, r7, #7
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	1dbb      	adds	r3, r7, #6
 8003a8a:	1c0a      	adds	r2, r1, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
	Channel* ch = malloc(sizeof(Channel));
 8003a8e:	2004      	movs	r0, #4
 8003a90:	f008 f972 	bl	800bd78 <malloc>
 8003a94:	0003      	movs	r3, r0
 8003a96:	60fb      	str	r3, [r7, #12]
	ch->color_data = 0;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	805a      	strh	r2, [r3, #2]
	ch->lsb_register = lsb_r;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1dfa      	adds	r2, r7, #7
 8003aa2:	7812      	ldrb	r2, [r2, #0]
 8003aa4:	701a      	strb	r2, [r3, #0]
	ch->msb_register = msb_r;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1dba      	adds	r2, r7, #6
 8003aaa:	7812      	ldrb	r2, [r2, #0]
 8003aac:	705a      	strb	r2, [r3, #1]
	return ch;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b004      	add	sp, #16
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <send_triad_data>:

//transmits the triad data as a sentence
//$TRIAD,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,
void send_triad_data(uint16_t *data, UART_HandleTypeDef * huart){
 8003ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aba:	46de      	mov	lr, fp
 8003abc:	4657      	mov	r7, sl
 8003abe:	464e      	mov	r6, r9
 8003ac0:	4645      	mov	r5, r8
 8003ac2:	b5e0      	push	{r5, r6, r7, lr}
 8003ac4:	4c2a      	ldr	r4, [pc, #168]	; (8003b70 <send_triad_data+0xb8>)
 8003ac6:	44a5      	add	sp, r4
 8003ac8:	af22      	add	r7, sp, #136	; 0x88
 8003aca:	67f8      	str	r0, [r7, #124]	; 0x7c
 8003acc:	67b9      	str	r1, [r7, #120]	; 0x78
	int channels = 6;
 8003ace:	2306      	movs	r3, #6
 8003ad0:	22a0      	movs	r2, #160	; 0xa0
 8003ad2:	0052      	lsls	r2, r2, #1
 8003ad4:	2170      	movs	r1, #112	; 0x70
 8003ad6:	468c      	mov	ip, r1
 8003ad8:	2108      	movs	r1, #8
 8003ada:	4688      	mov	r8, r1
 8003adc:	44b8      	add	r8, r7
 8003ade:	44c4      	add	ip, r8
 8003ae0:	4462      	add	r2, ip
 8003ae2:	6013      	str	r3, [r2, #0]
	int devices = 3;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	229e      	movs	r2, #158	; 0x9e
 8003ae8:	0052      	lsls	r2, r2, #1
 8003aea:	2170      	movs	r1, #112	; 0x70
 8003aec:	468c      	mov	ip, r1
 8003aee:	2108      	movs	r1, #8
 8003af0:	4688      	mov	r8, r1
 8003af2:	44b8      	add	r8, r7
 8003af4:	44c4      	add	ip, r8
 8003af6:	4462      	add	r2, ip
 8003af8:	6013      	str	r3, [r2, #0]

	// 150 - total length of output string $TRIAD,x,y,z...
	char string[150] = "";
 8003afa:	239c      	movs	r3, #156	; 0x9c
 8003afc:	2270      	movs	r2, #112	; 0x70
 8003afe:	4694      	mov	ip, r2
 8003b00:	2208      	movs	r2, #8
 8003b02:	4690      	mov	r8, r2
 8003b04:	44b8      	add	r8, r7
 8003b06:	44c4      	add	ip, r8
 8003b08:	4463      	add	r3, ip
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	2292      	movs	r2, #146	; 0x92
 8003b12:	2100      	movs	r1, #0
 8003b14:	0018      	movs	r0, r3
 8003b16:	f008 f942 	bl	800bd9e <memset>

	// 36 - 18 channels w/ msb & lsb for each
	int separated_data[36] = {0};
 8003b1a:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <send_triad_data+0xbc>)
 8003b1c:	22a4      	movs	r2, #164	; 0xa4
 8003b1e:	0052      	lsls	r2, r2, #1
 8003b20:	4694      	mov	ip, r2
 8003b22:	2270      	movs	r2, #112	; 0x70
 8003b24:	4690      	mov	r8, r2
 8003b26:	2208      	movs	r2, #8
 8003b28:	4691      	mov	r9, r2
 8003b2a:	44b9      	add	r9, r7
 8003b2c:	44c8      	add	r8, r9
 8003b2e:	44c4      	add	ip, r8
 8003b30:	4463      	add	r3, ip
 8003b32:	0018      	movs	r0, r3
 8003b34:	2390      	movs	r3, #144	; 0x90
 8003b36:	001a      	movs	r2, r3
 8003b38:	2100      	movs	r1, #0
 8003b3a:	f008 f930 	bl	800bd9e <memset>

	for (uint8_t i = 0; i < devices; ++i) {
 8003b3e:	2348      	movs	r3, #72	; 0x48
 8003b40:	33ff      	adds	r3, #255	; 0xff
 8003b42:	2270      	movs	r2, #112	; 0x70
 8003b44:	4694      	mov	ip, r2
 8003b46:	2208      	movs	r2, #8
 8003b48:	4690      	mov	r8, r2
 8003b4a:	44b8      	add	r8, r7
 8003b4c:	44c4      	add	ip, r8
 8003b4e:	4463      	add	r3, ip
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	e0e7      	b.n	8003d26 <send_triad_data+0x26e>

		for (uint8_t j = 0; j < channels; ++j) {
 8003b56:	23a3      	movs	r3, #163	; 0xa3
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2270      	movs	r2, #112	; 0x70
 8003b5c:	4694      	mov	ip, r2
 8003b5e:	2208      	movs	r2, #8
 8003b60:	4690      	mov	r8, r2
 8003b62:	44b8      	add	r8, r7
 8003b64:	44c4      	add	ip, r8
 8003b66:	4463      	add	r3, ip
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	e0b2      	b.n	8003cd4 <send_triad_data+0x21c>
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	fffffdb4 	.word	0xfffffdb4
 8003b74:	fffffec4 	.word	0xfffffec4

			unsigned int msb = (data[i*channels + j] >> 8) & 0xff;
 8003b78:	2448      	movs	r4, #72	; 0x48
 8003b7a:	34ff      	adds	r4, #255	; 0xff
 8003b7c:	2070      	movs	r0, #112	; 0x70
 8003b7e:	2308      	movs	r3, #8
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	181b      	adds	r3, r3, r0
 8003b84:	191b      	adds	r3, r3, r4
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	25a0      	movs	r5, #160	; 0xa0
 8003b8a:	006d      	lsls	r5, r5, #1
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	18ba      	adds	r2, r7, r2
 8003b90:	1812      	adds	r2, r2, r0
 8003b92:	1952      	adds	r2, r2, r5
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	435a      	muls	r2, r3
 8003b98:	21a3      	movs	r1, #163	; 0xa3
 8003b9a:	0049      	lsls	r1, r1, #1
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	181b      	adds	r3, r3, r0
 8003ba2:	185b      	adds	r3, r3, r1
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	18d3      	adds	r3, r2, r3
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003bac:	18d3      	adds	r3, r2, r3
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	001a      	movs	r2, r3
 8003bb6:	23ff      	movs	r3, #255	; 0xff
 8003bb8:	4013      	ands	r3, r2
 8003bba:	269c      	movs	r6, #156	; 0x9c
 8003bbc:	0076      	lsls	r6, r6, #1
 8003bbe:	603e      	str	r6, [r7, #0]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	18ba      	adds	r2, r7, r2
 8003bc4:	1812      	adds	r2, r2, r0
 8003bc6:	1992      	adds	r2, r2, r6
 8003bc8:	6013      	str	r3, [r2, #0]
			unsigned int lsb = (data[i*channels + j]) & 0xff;
 8003bca:	2308      	movs	r3, #8
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	181b      	adds	r3, r3, r0
 8003bd0:	191b      	adds	r3, r3, r4
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	18ba      	adds	r2, r7, r2
 8003bd8:	1812      	adds	r2, r2, r0
 8003bda:	1952      	adds	r2, r2, r5
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	435a      	muls	r2, r3
 8003be0:	2308      	movs	r3, #8
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	181b      	adds	r3, r3, r0
 8003be6:	185b      	adds	r3, r3, r1
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	18d3      	adds	r3, r2, r3
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003bf0:	18d3      	adds	r3, r2, r3
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	001a      	movs	r2, r3
 8003bf6:	23ff      	movs	r3, #255	; 0xff
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	229a      	movs	r2, #154	; 0x9a
 8003bfc:	0052      	lsls	r2, r2, #1
 8003bfe:	2608      	movs	r6, #8
 8003c00:	46b4      	mov	ip, r6
 8003c02:	44bc      	add	ip, r7
 8003c04:	4460      	add	r0, ip
 8003c06:	1880      	adds	r0, r0, r2
 8003c08:	6003      	str	r3, [r0, #0]

			separated_data[(2*i*channels) + (2*j)] =  msb;
 8003c0a:	2070      	movs	r0, #112	; 0x70
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	181b      	adds	r3, r3, r0
 8003c12:	191b      	adds	r3, r3, r4
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2208      	movs	r2, #8
 8003c18:	18ba      	adds	r2, r7, r2
 8003c1a:	1812      	adds	r2, r2, r0
 8003c1c:	1950      	adds	r0, r2, r5
 8003c1e:	6802      	ldr	r2, [r0, #0]
 8003c20:	435a      	muls	r2, r3
 8003c22:	0008      	movs	r0, r1
 8003c24:	2370      	movs	r3, #112	; 0x70
 8003c26:	2608      	movs	r6, #8
 8003c28:	46b4      	mov	ip, r6
 8003c2a:	44bc      	add	ip, r7
 8003c2c:	4463      	add	r3, ip
 8003c2e:	185b      	adds	r3, r3, r1
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	18d3      	adds	r3, r2, r3
 8003c34:	005a      	lsls	r2, r3, #1
 8003c36:	683e      	ldr	r6, [r7, #0]
 8003c38:	2370      	movs	r3, #112	; 0x70
 8003c3a:	2108      	movs	r1, #8
 8003c3c:	1879      	adds	r1, r7, r1
 8003c3e:	18c9      	adds	r1, r1, r3
 8003c40:	1989      	adds	r1, r1, r6
 8003c42:	6809      	ldr	r1, [r1, #0]
 8003c44:	4bfd      	ldr	r3, [pc, #1012]	; (800403c <send_triad_data+0x584>)
 8003c46:	26a4      	movs	r6, #164	; 0xa4
 8003c48:	0076      	lsls	r6, r6, #1
 8003c4a:	46b4      	mov	ip, r6
 8003c4c:	2670      	movs	r6, #112	; 0x70
 8003c4e:	46b0      	mov	r8, r6
 8003c50:	2608      	movs	r6, #8
 8003c52:	46b1      	mov	r9, r6
 8003c54:	44b9      	add	r9, r7
 8003c56:	44c8      	add	r8, r9
 8003c58:	44c4      	add	ip, r8
 8003c5a:	4463      	add	r3, ip
 8003c5c:	0092      	lsls	r2, r2, #2
 8003c5e:	50d1      	str	r1, [r2, r3]
			separated_data[(2*i*channels) + (2*j) + 1] =  lsb;
 8003c60:	2270      	movs	r2, #112	; 0x70
 8003c62:	2308      	movs	r3, #8
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	189b      	adds	r3, r3, r2
 8003c68:	191b      	adds	r3, r3, r4
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	0014      	movs	r4, r2
 8003c6e:	2108      	movs	r1, #8
 8003c70:	468c      	mov	ip, r1
 8003c72:	44bc      	add	ip, r7
 8003c74:	4462      	add	r2, ip
 8003c76:	1951      	adds	r1, r2, r5
 8003c78:	680a      	ldr	r2, [r1, #0]
 8003c7a:	435a      	muls	r2, r3
 8003c7c:	0025      	movs	r5, r4
 8003c7e:	2308      	movs	r3, #8
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	191b      	adds	r3, r3, r4
 8003c84:	181b      	adds	r3, r3, r0
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	18d3      	adds	r3, r2, r3
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	239a      	movs	r3, #154	; 0x9a
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2170      	movs	r1, #112	; 0x70
 8003c94:	468c      	mov	ip, r1
 8003c96:	2108      	movs	r1, #8
 8003c98:	4688      	mov	r8, r1
 8003c9a:	44b8      	add	r8, r7
 8003c9c:	44c4      	add	ip, r8
 8003c9e:	4463      	add	r3, ip
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	4be6      	ldr	r3, [pc, #920]	; (800403c <send_triad_data+0x584>)
 8003ca4:	24a4      	movs	r4, #164	; 0xa4
 8003ca6:	0064      	lsls	r4, r4, #1
 8003ca8:	46a4      	mov	ip, r4
 8003caa:	2470      	movs	r4, #112	; 0x70
 8003cac:	46a0      	mov	r8, r4
 8003cae:	2408      	movs	r4, #8
 8003cb0:	46a1      	mov	r9, r4
 8003cb2:	44b9      	add	r9, r7
 8003cb4:	44c8      	add	r8, r9
 8003cb6:	44c4      	add	ip, r8
 8003cb8:	4463      	add	r3, ip
 8003cba:	0092      	lsls	r2, r2, #2
 8003cbc:	50d1      	str	r1, [r2, r3]
		for (uint8_t j = 0; j < channels; ++j) {
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	195b      	adds	r3, r3, r5
 8003cc4:	181b      	adds	r3, r3, r0
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	18ba      	adds	r2, r7, r2
 8003cca:	1952      	adds	r2, r2, r5
 8003ccc:	1812      	adds	r2, r2, r0
 8003cce:	7812      	ldrb	r2, [r2, #0]
 8003cd0:	3201      	adds	r2, #1
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	23a3      	movs	r3, #163	; 0xa3
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2270      	movs	r2, #112	; 0x70
 8003cda:	4694      	mov	ip, r2
 8003cdc:	2208      	movs	r2, #8
 8003cde:	4690      	mov	r8, r2
 8003ce0:	44b8      	add	r8, r7
 8003ce2:	44c4      	add	ip, r8
 8003ce4:	4463      	add	r3, ip
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	22a0      	movs	r2, #160	; 0xa0
 8003cea:	0052      	lsls	r2, r2, #1
 8003cec:	2170      	movs	r1, #112	; 0x70
 8003cee:	468c      	mov	ip, r1
 8003cf0:	2108      	movs	r1, #8
 8003cf2:	4688      	mov	r8, r1
 8003cf4:	44b8      	add	r8, r7
 8003cf6:	44c4      	add	ip, r8
 8003cf8:	4462      	add	r2, ip
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	dd00      	ble.n	8003d02 <send_triad_data+0x24a>
 8003d00:	e73a      	b.n	8003b78 <send_triad_data+0xc0>
	for (uint8_t i = 0; i < devices; ++i) {
 8003d02:	2248      	movs	r2, #72	; 0x48
 8003d04:	32ff      	adds	r2, #255	; 0xff
 8003d06:	2370      	movs	r3, #112	; 0x70
 8003d08:	2108      	movs	r1, #8
 8003d0a:	468c      	mov	ip, r1
 8003d0c:	44bc      	add	ip, r7
 8003d0e:	4463      	add	r3, ip
 8003d10:	189b      	adds	r3, r3, r2
 8003d12:	2170      	movs	r1, #112	; 0x70
 8003d14:	468c      	mov	ip, r1
 8003d16:	2108      	movs	r1, #8
 8003d18:	4688      	mov	r8, r1
 8003d1a:	44b8      	add	r8, r7
 8003d1c:	44c4      	add	ip, r8
 8003d1e:	4462      	add	r2, ip
 8003d20:	7812      	ldrb	r2, [r2, #0]
 8003d22:	3201      	adds	r2, #1
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	2348      	movs	r3, #72	; 0x48
 8003d28:	33ff      	adds	r3, #255	; 0xff
 8003d2a:	2270      	movs	r2, #112	; 0x70
 8003d2c:	4694      	mov	ip, r2
 8003d2e:	2208      	movs	r2, #8
 8003d30:	4690      	mov	r8, r2
 8003d32:	44b8      	add	r8, r7
 8003d34:	44c4      	add	ip, r8
 8003d36:	4463      	add	r3, ip
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	229e      	movs	r2, #158	; 0x9e
 8003d3c:	0052      	lsls	r2, r2, #1
 8003d3e:	2170      	movs	r1, #112	; 0x70
 8003d40:	468c      	mov	ip, r1
 8003d42:	2108      	movs	r1, #8
 8003d44:	4688      	mov	r8, r1
 8003d46:	44b8      	add	r8, r7
 8003d48:	44c4      	add	ip, r8
 8003d4a:	4462      	add	r2, ip
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	dd00      	ble.n	8003d54 <send_triad_data+0x29c>
 8003d52:	e700      	b.n	8003b56 <send_triad_data+0x9e>

		}

	}

	sprintf((char *)string, "$TRIAD,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u \r\n",\
 8003d54:	4bb9      	ldr	r3, [pc, #740]	; (800403c <send_triad_data+0x584>)
 8003d56:	22a4      	movs	r2, #164	; 0xa4
 8003d58:	0052      	lsls	r2, r2, #1
 8003d5a:	4694      	mov	ip, r2
 8003d5c:	2270      	movs	r2, #112	; 0x70
 8003d5e:	4690      	mov	r8, r2
 8003d60:	2208      	movs	r2, #8
 8003d62:	4691      	mov	r9, r2
 8003d64:	44b9      	add	r9, r7
 8003d66:	44c8      	add	r8, r9
 8003d68:	44c4      	add	ip, r8
 8003d6a:	4463      	add	r3, ip
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	677b      	str	r3, [r7, #116]	; 0x74
 8003d70:	4bb2      	ldr	r3, [pc, #712]	; (800403c <send_triad_data+0x584>)
 8003d72:	21a4      	movs	r1, #164	; 0xa4
 8003d74:	0049      	lsls	r1, r1, #1
 8003d76:	468c      	mov	ip, r1
 8003d78:	2270      	movs	r2, #112	; 0x70
 8003d7a:	4690      	mov	r8, r2
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	4691      	mov	r9, r2
 8003d80:	44b9      	add	r9, r7
 8003d82:	44c8      	add	r8, r9
 8003d84:	44c4      	add	ip, r8
 8003d86:	4463      	add	r3, ip
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	6739      	str	r1, [r7, #112]	; 0x70
 8003d8c:	4bab      	ldr	r3, [pc, #684]	; (800403c <send_triad_data+0x584>)
 8003d8e:	20a4      	movs	r0, #164	; 0xa4
 8003d90:	0040      	lsls	r0, r0, #1
 8003d92:	4684      	mov	ip, r0
 8003d94:	2270      	movs	r2, #112	; 0x70
 8003d96:	4690      	mov	r8, r2
 8003d98:	2208      	movs	r2, #8
 8003d9a:	4691      	mov	r9, r2
 8003d9c:	44b9      	add	r9, r7
 8003d9e:	44c8      	add	r8, r9
 8003da0:	44c4      	add	ip, r8
 8003da2:	4463      	add	r3, ip
 8003da4:	6898      	ldr	r0, [r3, #8]
 8003da6:	66f8      	str	r0, [r7, #108]	; 0x6c
 8003da8:	4ba4      	ldr	r3, [pc, #656]	; (800403c <send_triad_data+0x584>)
 8003daa:	24a4      	movs	r4, #164	; 0xa4
 8003dac:	0064      	lsls	r4, r4, #1
 8003dae:	46a4      	mov	ip, r4
 8003db0:	2270      	movs	r2, #112	; 0x70
 8003db2:	4690      	mov	r8, r2
 8003db4:	2208      	movs	r2, #8
 8003db6:	4691      	mov	r9, r2
 8003db8:	44b9      	add	r9, r7
 8003dba:	44c8      	add	r8, r9
 8003dbc:	44c4      	add	ip, r8
 8003dbe:	4463      	add	r3, ip
 8003dc0:	68dc      	ldr	r4, [r3, #12]
 8003dc2:	66bc      	str	r4, [r7, #104]	; 0x68
 8003dc4:	4b9d      	ldr	r3, [pc, #628]	; (800403c <send_triad_data+0x584>)
 8003dc6:	25a4      	movs	r5, #164	; 0xa4
 8003dc8:	006d      	lsls	r5, r5, #1
 8003dca:	46ac      	mov	ip, r5
 8003dcc:	2270      	movs	r2, #112	; 0x70
 8003dce:	4690      	mov	r8, r2
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	4691      	mov	r9, r2
 8003dd4:	44b9      	add	r9, r7
 8003dd6:	44c8      	add	r8, r9
 8003dd8:	44c4      	add	ip, r8
 8003dda:	4463      	add	r3, ip
 8003ddc:	691d      	ldr	r5, [r3, #16]
 8003dde:	667d      	str	r5, [r7, #100]	; 0x64
 8003de0:	4b96      	ldr	r3, [pc, #600]	; (800403c <send_triad_data+0x584>)
 8003de2:	26a4      	movs	r6, #164	; 0xa4
 8003de4:	0076      	lsls	r6, r6, #1
 8003de6:	46b4      	mov	ip, r6
 8003de8:	2270      	movs	r2, #112	; 0x70
 8003dea:	4690      	mov	r8, r2
 8003dec:	2208      	movs	r2, #8
 8003dee:	4691      	mov	r9, r2
 8003df0:	44b9      	add	r9, r7
 8003df2:	44c8      	add	r8, r9
 8003df4:	44c4      	add	ip, r8
 8003df6:	4463      	add	r3, ip
 8003df8:	695e      	ldr	r6, [r3, #20]
 8003dfa:	663e      	str	r6, [r7, #96]	; 0x60
 8003dfc:	4b8f      	ldr	r3, [pc, #572]	; (800403c <send_triad_data+0x584>)
 8003dfe:	22a4      	movs	r2, #164	; 0xa4
 8003e00:	0052      	lsls	r2, r2, #1
 8003e02:	4694      	mov	ip, r2
 8003e04:	2270      	movs	r2, #112	; 0x70
 8003e06:	4690      	mov	r8, r2
 8003e08:	2208      	movs	r2, #8
 8003e0a:	4691      	mov	r9, r2
 8003e0c:	44b9      	add	r9, r7
 8003e0e:	44c8      	add	r8, r9
 8003e10:	44c4      	add	ip, r8
 8003e12:	4463      	add	r3, ip
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e18:	4b88      	ldr	r3, [pc, #544]	; (800403c <send_triad_data+0x584>)
 8003e1a:	21a4      	movs	r1, #164	; 0xa4
 8003e1c:	0049      	lsls	r1, r1, #1
 8003e1e:	468c      	mov	ip, r1
 8003e20:	2270      	movs	r2, #112	; 0x70
 8003e22:	4690      	mov	r8, r2
 8003e24:	2208      	movs	r2, #8
 8003e26:	4691      	mov	r9, r2
 8003e28:	44b9      	add	r9, r7
 8003e2a:	44c8      	add	r8, r9
 8003e2c:	44c4      	add	ip, r8
 8003e2e:	4463      	add	r3, ip
 8003e30:	69d9      	ldr	r1, [r3, #28]
 8003e32:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e34:	4b81      	ldr	r3, [pc, #516]	; (800403c <send_triad_data+0x584>)
 8003e36:	20a4      	movs	r0, #164	; 0xa4
 8003e38:	0040      	lsls	r0, r0, #1
 8003e3a:	4684      	mov	ip, r0
 8003e3c:	2270      	movs	r2, #112	; 0x70
 8003e3e:	4690      	mov	r8, r2
 8003e40:	2208      	movs	r2, #8
 8003e42:	4691      	mov	r9, r2
 8003e44:	44b9      	add	r9, r7
 8003e46:	44c8      	add	r8, r9
 8003e48:	44c4      	add	ip, r8
 8003e4a:	4463      	add	r3, ip
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e50:	4b7a      	ldr	r3, [pc, #488]	; (800403c <send_triad_data+0x584>)
 8003e52:	20a4      	movs	r0, #164	; 0xa4
 8003e54:	0040      	lsls	r0, r0, #1
 8003e56:	4684      	mov	ip, r0
 8003e58:	2270      	movs	r2, #112	; 0x70
 8003e5a:	4690      	mov	r8, r2
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	4691      	mov	r9, r2
 8003e60:	44b9      	add	r9, r7
 8003e62:	44c8      	add	r8, r9
 8003e64:	44c4      	add	ip, r8
 8003e66:	4463      	add	r3, ip
 8003e68:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003e6a:	6538      	str	r0, [r7, #80]	; 0x50
 8003e6c:	4b73      	ldr	r3, [pc, #460]	; (800403c <send_triad_data+0x584>)
 8003e6e:	24a4      	movs	r4, #164	; 0xa4
 8003e70:	0064      	lsls	r4, r4, #1
 8003e72:	46a4      	mov	ip, r4
 8003e74:	2270      	movs	r2, #112	; 0x70
 8003e76:	4690      	mov	r8, r2
 8003e78:	2208      	movs	r2, #8
 8003e7a:	4691      	mov	r9, r2
 8003e7c:	44b9      	add	r9, r7
 8003e7e:	44c8      	add	r8, r9
 8003e80:	44c4      	add	ip, r8
 8003e82:	4463      	add	r3, ip
 8003e84:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003e86:	64fc      	str	r4, [r7, #76]	; 0x4c
 8003e88:	4b6c      	ldr	r3, [pc, #432]	; (800403c <send_triad_data+0x584>)
 8003e8a:	25a4      	movs	r5, #164	; 0xa4
 8003e8c:	006d      	lsls	r5, r5, #1
 8003e8e:	46ac      	mov	ip, r5
 8003e90:	2270      	movs	r2, #112	; 0x70
 8003e92:	4690      	mov	r8, r2
 8003e94:	2208      	movs	r2, #8
 8003e96:	4691      	mov	r9, r2
 8003e98:	44b9      	add	r9, r7
 8003e9a:	44c8      	add	r8, r9
 8003e9c:	44c4      	add	ip, r8
 8003e9e:	4463      	add	r3, ip
 8003ea0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003ea2:	64bd      	str	r5, [r7, #72]	; 0x48
 8003ea4:	4b65      	ldr	r3, [pc, #404]	; (800403c <send_triad_data+0x584>)
 8003ea6:	26a4      	movs	r6, #164	; 0xa4
 8003ea8:	0076      	lsls	r6, r6, #1
 8003eaa:	46b4      	mov	ip, r6
 8003eac:	2270      	movs	r2, #112	; 0x70
 8003eae:	4690      	mov	r8, r2
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	4691      	mov	r9, r2
 8003eb4:	44b9      	add	r9, r7
 8003eb6:	44c8      	add	r8, r9
 8003eb8:	44c4      	add	ip, r8
 8003eba:	4463      	add	r3, ip
 8003ebc:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8003ebe:	647e      	str	r6, [r7, #68]	; 0x44
 8003ec0:	4b5e      	ldr	r3, [pc, #376]	; (800403c <send_triad_data+0x584>)
 8003ec2:	22a4      	movs	r2, #164	; 0xa4
 8003ec4:	0052      	lsls	r2, r2, #1
 8003ec6:	4694      	mov	ip, r2
 8003ec8:	2270      	movs	r2, #112	; 0x70
 8003eca:	4690      	mov	r8, r2
 8003ecc:	2208      	movs	r2, #8
 8003ece:	4691      	mov	r9, r2
 8003ed0:	44b9      	add	r9, r7
 8003ed2:	44c8      	add	r8, r9
 8003ed4:	44c4      	add	ip, r8
 8003ed6:	4463      	add	r3, ip
 8003ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eda:	643a      	str	r2, [r7, #64]	; 0x40
 8003edc:	4b57      	ldr	r3, [pc, #348]	; (800403c <send_triad_data+0x584>)
 8003ede:	21a4      	movs	r1, #164	; 0xa4
 8003ee0:	0049      	lsls	r1, r1, #1
 8003ee2:	468c      	mov	ip, r1
 8003ee4:	2270      	movs	r2, #112	; 0x70
 8003ee6:	4690      	mov	r8, r2
 8003ee8:	2208      	movs	r2, #8
 8003eea:	4691      	mov	r9, r2
 8003eec:	44b9      	add	r9, r7
 8003eee:	44c8      	add	r8, r9
 8003ef0:	44c4      	add	ip, r8
 8003ef2:	4463      	add	r3, ip
 8003ef4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003ef6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003ef8:	4b50      	ldr	r3, [pc, #320]	; (800403c <send_triad_data+0x584>)
 8003efa:	20a4      	movs	r0, #164	; 0xa4
 8003efc:	0040      	lsls	r0, r0, #1
 8003efe:	4684      	mov	ip, r0
 8003f00:	2270      	movs	r2, #112	; 0x70
 8003f02:	4690      	mov	r8, r2
 8003f04:	2208      	movs	r2, #8
 8003f06:	4691      	mov	r9, r2
 8003f08:	44b9      	add	r9, r7
 8003f0a:	44c8      	add	r8, r9
 8003f0c:	44c4      	add	ip, r8
 8003f0e:	4463      	add	r3, ip
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f14:	4b49      	ldr	r3, [pc, #292]	; (800403c <send_triad_data+0x584>)
 8003f16:	20a4      	movs	r0, #164	; 0xa4
 8003f18:	0040      	lsls	r0, r0, #1
 8003f1a:	4684      	mov	ip, r0
 8003f1c:	2270      	movs	r2, #112	; 0x70
 8003f1e:	4690      	mov	r8, r2
 8003f20:	2208      	movs	r2, #8
 8003f22:	4691      	mov	r9, r2
 8003f24:	44b9      	add	r9, r7
 8003f26:	44c8      	add	r8, r9
 8003f28:	44c4      	add	ip, r8
 8003f2a:	4463      	add	r3, ip
 8003f2c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003f2e:	6378      	str	r0, [r7, #52]	; 0x34
 8003f30:	4b42      	ldr	r3, [pc, #264]	; (800403c <send_triad_data+0x584>)
 8003f32:	24a4      	movs	r4, #164	; 0xa4
 8003f34:	0064      	lsls	r4, r4, #1
 8003f36:	46a4      	mov	ip, r4
 8003f38:	2270      	movs	r2, #112	; 0x70
 8003f3a:	4690      	mov	r8, r2
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	4691      	mov	r9, r2
 8003f40:	44b9      	add	r9, r7
 8003f42:	44c8      	add	r8, r9
 8003f44:	44c4      	add	ip, r8
 8003f46:	4463      	add	r3, ip
 8003f48:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003f4a:	633c      	str	r4, [r7, #48]	; 0x30
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	; (800403c <send_triad_data+0x584>)
 8003f4e:	25a4      	movs	r5, #164	; 0xa4
 8003f50:	006d      	lsls	r5, r5, #1
 8003f52:	46ac      	mov	ip, r5
 8003f54:	2270      	movs	r2, #112	; 0x70
 8003f56:	4690      	mov	r8, r2
 8003f58:	2208      	movs	r2, #8
 8003f5a:	4691      	mov	r9, r2
 8003f5c:	44b9      	add	r9, r7
 8003f5e:	44c8      	add	r8, r9
 8003f60:	44c4      	add	ip, r8
 8003f62:	4463      	add	r3, ip
 8003f64:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8003f66:	62fd      	str	r5, [r7, #44]	; 0x2c
 8003f68:	4b34      	ldr	r3, [pc, #208]	; (800403c <send_triad_data+0x584>)
 8003f6a:	26a4      	movs	r6, #164	; 0xa4
 8003f6c:	0076      	lsls	r6, r6, #1
 8003f6e:	46b4      	mov	ip, r6
 8003f70:	2270      	movs	r2, #112	; 0x70
 8003f72:	4690      	mov	r8, r2
 8003f74:	2208      	movs	r2, #8
 8003f76:	4691      	mov	r9, r2
 8003f78:	44b9      	add	r9, r7
 8003f7a:	44c8      	add	r8, r9
 8003f7c:	44c4      	add	ip, r8
 8003f7e:	4463      	add	r3, ip
 8003f80:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8003f82:	62be      	str	r6, [r7, #40]	; 0x28
 8003f84:	4b2d      	ldr	r3, [pc, #180]	; (800403c <send_triad_data+0x584>)
 8003f86:	22a4      	movs	r2, #164	; 0xa4
 8003f88:	0052      	lsls	r2, r2, #1
 8003f8a:	4694      	mov	ip, r2
 8003f8c:	2270      	movs	r2, #112	; 0x70
 8003f8e:	4690      	mov	r8, r2
 8003f90:	2208      	movs	r2, #8
 8003f92:	4691      	mov	r9, r2
 8003f94:	44b9      	add	r9, r7
 8003f96:	44c8      	add	r8, r9
 8003f98:	44c4      	add	ip, r8
 8003f9a:	4463      	add	r3, ip
 8003f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f9e:	627a      	str	r2, [r7, #36]	; 0x24
 8003fa0:	4b26      	ldr	r3, [pc, #152]	; (800403c <send_triad_data+0x584>)
 8003fa2:	21a4      	movs	r1, #164	; 0xa4
 8003fa4:	0049      	lsls	r1, r1, #1
 8003fa6:	468c      	mov	ip, r1
 8003fa8:	2270      	movs	r2, #112	; 0x70
 8003faa:	4690      	mov	r8, r2
 8003fac:	2208      	movs	r2, #8
 8003fae:	4691      	mov	r9, r2
 8003fb0:	44b9      	add	r9, r7
 8003fb2:	44c8      	add	r8, r9
 8003fb4:	44c4      	add	ip, r8
 8003fb6:	4463      	add	r3, ip
 8003fb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fba:	6239      	str	r1, [r7, #32]
 8003fbc:	4b1f      	ldr	r3, [pc, #124]	; (800403c <send_triad_data+0x584>)
 8003fbe:	20a4      	movs	r0, #164	; 0xa4
 8003fc0:	0040      	lsls	r0, r0, #1
 8003fc2:	4684      	mov	ip, r0
 8003fc4:	2270      	movs	r2, #112	; 0x70
 8003fc6:	4690      	mov	r8, r2
 8003fc8:	2208      	movs	r2, #8
 8003fca:	4691      	mov	r9, r2
 8003fcc:	44b9      	add	r9, r7
 8003fce:	44c8      	add	r8, r9
 8003fd0:	44c4      	add	ip, r8
 8003fd2:	4463      	add	r3, ip
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	4b18      	ldr	r3, [pc, #96]	; (800403c <send_triad_data+0x584>)
 8003fda:	20a4      	movs	r0, #164	; 0xa4
 8003fdc:	0040      	lsls	r0, r0, #1
 8003fde:	4684      	mov	ip, r0
 8003fe0:	2270      	movs	r2, #112	; 0x70
 8003fe2:	4690      	mov	r8, r2
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	4691      	mov	r9, r2
 8003fe8:	44b9      	add	r9, r7
 8003fea:	44c8      	add	r8, r9
 8003fec:	44c4      	add	ip, r8
 8003fee:	4463      	add	r3, ip
 8003ff0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8003ff2:	61b8      	str	r0, [r7, #24]
 8003ff4:	4b11      	ldr	r3, [pc, #68]	; (800403c <send_triad_data+0x584>)
 8003ff6:	24a4      	movs	r4, #164	; 0xa4
 8003ff8:	0064      	lsls	r4, r4, #1
 8003ffa:	46a4      	mov	ip, r4
 8003ffc:	2270      	movs	r2, #112	; 0x70
 8003ffe:	4690      	mov	r8, r2
 8004000:	2208      	movs	r2, #8
 8004002:	4691      	mov	r9, r2
 8004004:	44b9      	add	r9, r7
 8004006:	44c8      	add	r8, r9
 8004008:	44c4      	add	ip, r8
 800400a:	4463      	add	r3, ip
 800400c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800400e:	617c      	str	r4, [r7, #20]
 8004010:	4b0a      	ldr	r3, [pc, #40]	; (800403c <send_triad_data+0x584>)
 8004012:	25a4      	movs	r5, #164	; 0xa4
 8004014:	006d      	lsls	r5, r5, #1
 8004016:	46ac      	mov	ip, r5
 8004018:	2270      	movs	r2, #112	; 0x70
 800401a:	4690      	mov	r8, r2
 800401c:	2208      	movs	r2, #8
 800401e:	4691      	mov	r9, r2
 8004020:	44b9      	add	r9, r7
 8004022:	44c8      	add	r8, r9
 8004024:	44c4      	add	ip, r8
 8004026:	4463      	add	r3, ip
 8004028:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800402a:	613d      	str	r5, [r7, #16]
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <send_triad_data+0x584>)
 800402e:	26a4      	movs	r6, #164	; 0xa4
 8004030:	0076      	lsls	r6, r6, #1
 8004032:	46b4      	mov	ip, r6
 8004034:	2270      	movs	r2, #112	; 0x70
 8004036:	4690      	mov	r8, r2
 8004038:	e002      	b.n	8004040 <send_triad_data+0x588>
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	fffffec4 	.word	0xfffffec4
 8004040:	2208      	movs	r2, #8
 8004042:	4691      	mov	r9, r2
 8004044:	44b9      	add	r9, r7
 8004046:	44c8      	add	r8, r9
 8004048:	44c4      	add	ip, r8
 800404a:	4463      	add	r3, ip
 800404c:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 800404e:	60fe      	str	r6, [r7, #12]
 8004050:	4b6a      	ldr	r3, [pc, #424]	; (80041fc <send_triad_data+0x744>)
 8004052:	22a4      	movs	r2, #164	; 0xa4
 8004054:	0052      	lsls	r2, r2, #1
 8004056:	4694      	mov	ip, r2
 8004058:	2270      	movs	r2, #112	; 0x70
 800405a:	4690      	mov	r8, r2
 800405c:	2208      	movs	r2, #8
 800405e:	4691      	mov	r9, r2
 8004060:	44b9      	add	r9, r7
 8004062:	44c8      	add	r8, r9
 8004064:	44c4      	add	ip, r8
 8004066:	4463      	add	r3, ip
 8004068:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800406a:	4693      	mov	fp, r2
 800406c:	4b63      	ldr	r3, [pc, #396]	; (80041fc <send_triad_data+0x744>)
 800406e:	22a4      	movs	r2, #164	; 0xa4
 8004070:	0052      	lsls	r2, r2, #1
 8004072:	4694      	mov	ip, r2
 8004074:	2270      	movs	r2, #112	; 0x70
 8004076:	4690      	mov	r8, r2
 8004078:	2208      	movs	r2, #8
 800407a:	4691      	mov	r9, r2
 800407c:	44b9      	add	r9, r7
 800407e:	44c8      	add	r8, r9
 8004080:	44c4      	add	ip, r8
 8004082:	4463      	add	r3, ip
 8004084:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004086:	4692      	mov	sl, r2
 8004088:	4b5c      	ldr	r3, [pc, #368]	; (80041fc <send_triad_data+0x744>)
 800408a:	22a4      	movs	r2, #164	; 0xa4
 800408c:	0052      	lsls	r2, r2, #1
 800408e:	4694      	mov	ip, r2
 8004090:	2270      	movs	r2, #112	; 0x70
 8004092:	4690      	mov	r8, r2
 8004094:	2208      	movs	r2, #8
 8004096:	4691      	mov	r9, r2
 8004098:	44b9      	add	r9, r7
 800409a:	44c8      	add	r8, r9
 800409c:	44c4      	add	ip, r8
 800409e:	4463      	add	r3, ip
 80040a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80040a2:	603a      	str	r2, [r7, #0]
 80040a4:	4b55      	ldr	r3, [pc, #340]	; (80041fc <send_triad_data+0x744>)
 80040a6:	22a4      	movs	r2, #164	; 0xa4
 80040a8:	0052      	lsls	r2, r2, #1
 80040aa:	4694      	mov	ip, r2
 80040ac:	2270      	movs	r2, #112	; 0x70
 80040ae:	4690      	mov	r8, r2
 80040b0:	2208      	movs	r2, #8
 80040b2:	4691      	mov	r9, r2
 80040b4:	44b9      	add	r9, r7
 80040b6:	44c8      	add	r8, r9
 80040b8:	44c4      	add	ip, r8
 80040ba:	4463      	add	r3, ip
 80040bc:	6f9e      	ldr	r6, [r3, #120]	; 0x78
 80040be:	4b4f      	ldr	r3, [pc, #316]	; (80041fc <send_triad_data+0x744>)
 80040c0:	22a4      	movs	r2, #164	; 0xa4
 80040c2:	0052      	lsls	r2, r2, #1
 80040c4:	4694      	mov	ip, r2
 80040c6:	2270      	movs	r2, #112	; 0x70
 80040c8:	4690      	mov	r8, r2
 80040ca:	2208      	movs	r2, #8
 80040cc:	4691      	mov	r9, r2
 80040ce:	44b9      	add	r9, r7
 80040d0:	44c8      	add	r8, r9
 80040d2:	44c4      	add	ip, r8
 80040d4:	4463      	add	r3, ip
 80040d6:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 80040d8:	4b48      	ldr	r3, [pc, #288]	; (80041fc <send_triad_data+0x744>)
 80040da:	21a4      	movs	r1, #164	; 0xa4
 80040dc:	0049      	lsls	r1, r1, #1
 80040de:	2070      	movs	r0, #112	; 0x70
 80040e0:	2208      	movs	r2, #8
 80040e2:	18ba      	adds	r2, r7, r2
 80040e4:	1812      	adds	r2, r2, r0
 80040e6:	1852      	adds	r2, r2, r1
 80040e8:	18d2      	adds	r2, r2, r3
 80040ea:	2380      	movs	r3, #128	; 0x80
 80040ec:	58d4      	ldr	r4, [r2, r3]
 80040ee:	4b43      	ldr	r3, [pc, #268]	; (80041fc <send_triad_data+0x744>)
 80040f0:	2208      	movs	r2, #8
 80040f2:	18ba      	adds	r2, r7, r2
 80040f4:	1812      	adds	r2, r2, r0
 80040f6:	1852      	adds	r2, r2, r1
 80040f8:	18d2      	adds	r2, r2, r3
 80040fa:	2384      	movs	r3, #132	; 0x84
 80040fc:	58d3      	ldr	r3, [r2, r3]
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	4b3e      	ldr	r3, [pc, #248]	; (80041fc <send_triad_data+0x744>)
 8004102:	0002      	movs	r2, r0
 8004104:	2008      	movs	r0, #8
 8004106:	1838      	adds	r0, r7, r0
 8004108:	1880      	adds	r0, r0, r2
 800410a:	1842      	adds	r2, r0, r1
 800410c:	18d2      	adds	r2, r2, r3
 800410e:	2388      	movs	r3, #136	; 0x88
 8004110:	58d1      	ldr	r1, [r2, r3]
 8004112:	4b3a      	ldr	r3, [pc, #232]	; (80041fc <send_triad_data+0x744>)
 8004114:	22a4      	movs	r2, #164	; 0xa4
 8004116:	0052      	lsls	r2, r2, #1
 8004118:	2070      	movs	r0, #112	; 0x70
 800411a:	4684      	mov	ip, r0
 800411c:	2008      	movs	r0, #8
 800411e:	4680      	mov	r8, r0
 8004120:	44b8      	add	r8, r7
 8004122:	44c4      	add	ip, r8
 8004124:	4462      	add	r2, ip
 8004126:	18d2      	adds	r2, r2, r3
 8004128:	238c      	movs	r3, #140	; 0x8c
 800412a:	58d3      	ldr	r3, [r2, r3]
 800412c:	4a34      	ldr	r2, [pc, #208]	; (8004200 <send_triad_data+0x748>)
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	229c      	movs	r2, #156	; 0x9c
 8004132:	4694      	mov	ip, r2
 8004134:	2070      	movs	r0, #112	; 0x70
 8004136:	4680      	mov	r8, r0
 8004138:	2208      	movs	r2, #8
 800413a:	4691      	mov	r9, r2
 800413c:	44b9      	add	r9, r7
 800413e:	44c8      	add	r8, r9
 8004140:	44c4      	add	ip, r8
 8004142:	9321      	str	r3, [sp, #132]	; 0x84
 8004144:	9120      	str	r1, [sp, #128]	; 0x80
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	931f      	str	r3, [sp, #124]	; 0x7c
 800414a:	941e      	str	r4, [sp, #120]	; 0x78
 800414c:	951d      	str	r5, [sp, #116]	; 0x74
 800414e:	961c      	str	r6, [sp, #112]	; 0x70
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	921b      	str	r2, [sp, #108]	; 0x6c
 8004154:	4652      	mov	r2, sl
 8004156:	921a      	str	r2, [sp, #104]	; 0x68
 8004158:	465a      	mov	r2, fp
 800415a:	9219      	str	r2, [sp, #100]	; 0x64
 800415c:	68fe      	ldr	r6, [r7, #12]
 800415e:	9618      	str	r6, [sp, #96]	; 0x60
 8004160:	693d      	ldr	r5, [r7, #16]
 8004162:	9517      	str	r5, [sp, #92]	; 0x5c
 8004164:	697c      	ldr	r4, [r7, #20]
 8004166:	9416      	str	r4, [sp, #88]	; 0x58
 8004168:	69b8      	ldr	r0, [r7, #24]
 800416a:	9015      	str	r0, [sp, #84]	; 0x54
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	9314      	str	r3, [sp, #80]	; 0x50
 8004170:	6a39      	ldr	r1, [r7, #32]
 8004172:	9113      	str	r1, [sp, #76]	; 0x4c
 8004174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004176:	9212      	str	r2, [sp, #72]	; 0x48
 8004178:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800417a:	9611      	str	r6, [sp, #68]	; 0x44
 800417c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800417e:	9510      	str	r5, [sp, #64]	; 0x40
 8004180:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8004182:	940f      	str	r4, [sp, #60]	; 0x3c
 8004184:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004186:	900e      	str	r0, [sp, #56]	; 0x38
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	930d      	str	r3, [sp, #52]	; 0x34
 800418c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800418e:	910c      	str	r1, [sp, #48]	; 0x30
 8004190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004192:	920b      	str	r2, [sp, #44]	; 0x2c
 8004194:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8004196:	960a      	str	r6, [sp, #40]	; 0x28
 8004198:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800419a:	9509      	str	r5, [sp, #36]	; 0x24
 800419c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800419e:	9408      	str	r4, [sp, #32]
 80041a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80041a2:	9007      	str	r0, [sp, #28]
 80041a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a6:	9306      	str	r3, [sp, #24]
 80041a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041aa:	9105      	str	r1, [sp, #20]
 80041ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041ae:	9204      	str	r2, [sp, #16]
 80041b0:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 80041b2:	9603      	str	r6, [sp, #12]
 80041b4:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 80041b6:	9502      	str	r5, [sp, #8]
 80041b8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80041ba:	9401      	str	r4, [sp, #4]
 80041bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041be:	9000      	str	r0, [sp, #0]
 80041c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4660      	mov	r0, ip
 80041c8:	f008 fb26 	bl	800c818 <siprintf>
		  separated_data[18], separated_data[19], separated_data[20], separated_data[21], separated_data[22], separated_data[23], \
		  separated_data[24], separated_data[25], separated_data[26], separated_data[27], separated_data[28], separated_data[29], \
		  separated_data[30], separated_data[31], separated_data[32], separated_data[33], separated_data[34], separated_data[35]);


	HAL_UART_Transmit_IT(huart, (uint8_t *)string, sizeof(string));
 80041cc:	239c      	movs	r3, #156	; 0x9c
 80041ce:	2270      	movs	r2, #112	; 0x70
 80041d0:	2108      	movs	r1, #8
 80041d2:	468c      	mov	ip, r1
 80041d4:	44bc      	add	ip, r7
 80041d6:	4462      	add	r2, ip
 80041d8:	18d1      	adds	r1, r2, r3
 80041da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041dc:	2296      	movs	r2, #150	; 0x96
 80041de:	0018      	movs	r0, r3
 80041e0:	f005 fcde 	bl	8009ba0 <HAL_UART_Transmit_IT>
	HAL_Delay(40);
 80041e4:	2028      	movs	r0, #40	; 0x28
 80041e6:	f000 f8bd 	bl	8004364 <HAL_Delay>
}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b071      	add	sp, #452	; 0x1c4
 80041f0:	bcf0      	pop	{r4, r5, r6, r7}
 80041f2:	46bb      	mov	fp, r7
 80041f4:	46b2      	mov	sl, r6
 80041f6:	46a9      	mov	r9, r5
 80041f8:	46a0      	mov	r8, r4
 80041fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041fc:	fffffec4 	.word	0xfffffec4
 8004200:	0800ec48 	.word	0x0800ec48

08004204 <Reset_Handler>:
 8004204:	480d      	ldr	r0, [pc, #52]	; (800423c <LoopForever+0x2>)
 8004206:	4685      	mov	sp, r0
 8004208:	f7ff fb14 	bl	8003834 <SystemInit>
 800420c:	480c      	ldr	r0, [pc, #48]	; (8004240 <LoopForever+0x6>)
 800420e:	490d      	ldr	r1, [pc, #52]	; (8004244 <LoopForever+0xa>)
 8004210:	4a0d      	ldr	r2, [pc, #52]	; (8004248 <LoopForever+0xe>)
 8004212:	2300      	movs	r3, #0
 8004214:	e002      	b.n	800421c <LoopCopyDataInit>

08004216 <CopyDataInit>:
 8004216:	58d4      	ldr	r4, [r2, r3]
 8004218:	50c4      	str	r4, [r0, r3]
 800421a:	3304      	adds	r3, #4

0800421c <LoopCopyDataInit>:
 800421c:	18c4      	adds	r4, r0, r3
 800421e:	428c      	cmp	r4, r1
 8004220:	d3f9      	bcc.n	8004216 <CopyDataInit>
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <LoopForever+0x12>)
 8004224:	4c0a      	ldr	r4, [pc, #40]	; (8004250 <LoopForever+0x16>)
 8004226:	2300      	movs	r3, #0
 8004228:	e001      	b.n	800422e <LoopFillZerobss>

0800422a <FillZerobss>:
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	3204      	adds	r2, #4

0800422e <LoopFillZerobss>:
 800422e:	42a2      	cmp	r2, r4
 8004230:	d3fb      	bcc.n	800422a <FillZerobss>
 8004232:	f007 fd7d 	bl	800bd30 <__libc_init_array>
 8004236:	f7fe f8b9 	bl	80023ac <main>

0800423a <LoopForever>:
 800423a:	e7fe      	b.n	800423a <LoopForever>
 800423c:	20024000 	.word	0x20024000
 8004240:	20000000 	.word	0x20000000
 8004244:	200001fc 	.word	0x200001fc
 8004248:	0800f210 	.word	0x0800f210
 800424c:	200001fc 	.word	0x200001fc
 8004250:	20000610 	.word	0x20000610

08004254 <ADC1_COMP_IRQHandler>:
 8004254:	e7fe      	b.n	8004254 <ADC1_COMP_IRQHandler>
	...

08004258 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800425e:	1dfb      	adds	r3, r7, #7
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_Init+0x3c>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <HAL_Init+0x3c>)
 800426a:	2180      	movs	r1, #128	; 0x80
 800426c:	0049      	lsls	r1, r1, #1
 800426e:	430a      	orrs	r2, r1
 8004270:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004272:	2000      	movs	r0, #0
 8004274:	f000 f810 	bl	8004298 <HAL_InitTick>
 8004278:	1e03      	subs	r3, r0, #0
 800427a:	d003      	beq.n	8004284 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800427c:	1dfb      	adds	r3, r7, #7
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e001      	b.n	8004288 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004284:	f7fe fefe 	bl	8003084 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004288:	1dfb      	adds	r3, r7, #7
 800428a:	781b      	ldrb	r3, [r3, #0]
}
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	b002      	add	sp, #8
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40022000 	.word	0x40022000

08004298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042a0:	230f      	movs	r3, #15
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80042a8:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <HAL_InitTick+0x88>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02b      	beq.n	8004308 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80042b0:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <HAL_InitTick+0x8c>)
 80042b2:	681c      	ldr	r4, [r3, #0]
 80042b4:	4b1a      	ldr	r3, [pc, #104]	; (8004320 <HAL_InitTick+0x88>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	0019      	movs	r1, r3
 80042ba:	23fa      	movs	r3, #250	; 0xfa
 80042bc:	0098      	lsls	r0, r3, #2
 80042be:	f7fb ff3d 	bl	800013c <__udivsi3>
 80042c2:	0003      	movs	r3, r0
 80042c4:	0019      	movs	r1, r3
 80042c6:	0020      	movs	r0, r4
 80042c8:	f7fb ff38 	bl	800013c <__udivsi3>
 80042cc:	0003      	movs	r3, r0
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 fe3f 	bl	8004f52 <HAL_SYSTICK_Config>
 80042d4:	1e03      	subs	r3, r0, #0
 80042d6:	d112      	bne.n	80042fe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d80a      	bhi.n	80042f4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	2301      	movs	r3, #1
 80042e2:	425b      	negs	r3, r3
 80042e4:	2200      	movs	r2, #0
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 fdfe 	bl	8004ee8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80042ec:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <HAL_InitTick+0x90>)
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e00d      	b.n	8004310 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80042f4:	230f      	movs	r3, #15
 80042f6:	18fb      	adds	r3, r7, r3
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e008      	b.n	8004310 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80042fe:	230f      	movs	r3, #15
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	e003      	b.n	8004310 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004308:	230f      	movs	r3, #15
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004310:	230f      	movs	r3, #15
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	781b      	ldrb	r3, [r3, #0]
}
 8004316:	0018      	movs	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	b005      	add	sp, #20
 800431c:	bd90      	pop	{r4, r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	20000028 	.word	0x20000028
 8004324:	20000020 	.word	0x20000020
 8004328:	20000024 	.word	0x20000024

0800432c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_IncTick+0x1c>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	001a      	movs	r2, r3
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_IncTick+0x20>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	18d2      	adds	r2, r2, r3
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <HAL_IncTick+0x20>)
 800433e:	601a      	str	r2, [r3, #0]
}
 8004340:	46c0      	nop			; (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	20000028 	.word	0x20000028
 800434c:	200005fc 	.word	0x200005fc

08004350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  return uwTick;
 8004354:	4b02      	ldr	r3, [pc, #8]	; (8004360 <HAL_GetTick+0x10>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	200005fc 	.word	0x200005fc

08004364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800436c:	f7ff fff0 	bl	8004350 <HAL_GetTick>
 8004370:	0003      	movs	r3, r0
 8004372:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3301      	adds	r3, #1
 800437c:	d005      	beq.n	800438a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_Delay+0x44>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	001a      	movs	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	189b      	adds	r3, r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	f7ff ffe0 	bl	8004350 <HAL_GetTick>
 8004390:	0002      	movs	r2, r0
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	d8f7      	bhi.n	800438c <HAL_Delay+0x28>
  {
  }
}
 800439c:	46c0      	nop			; (mov r8, r8)
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b004      	add	sp, #16
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	20000028 	.word	0x20000028

080043ac <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a06      	ldr	r2, [pc, #24]	; (80043d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]
}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b002      	add	sp, #8
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	40010000 	.word	0x40010000
 80043d4:	fffff9ff 	.word	0xfffff9ff

080043d8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a05      	ldr	r2, [pc, #20]	; (80043fc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80043e8:	401a      	ands	r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b002      	add	sp, #8
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	fe3fffff 	.word	0xfe3fffff

08004400 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	23e0      	movs	r3, #224	; 0xe0
 800440e:	045b      	lsls	r3, r3, #17
 8004410:	4013      	ands	r3, r2
}
 8004412:	0018      	movs	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	b002      	add	sp, #8
 8004418:	bd80      	pop	{r7, pc}

0800441a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	2104      	movs	r1, #4
 800442e:	400a      	ands	r2, r1
 8004430:	2107      	movs	r1, #7
 8004432:	4091      	lsls	r1, r2
 8004434:	000a      	movs	r2, r1
 8004436:	43d2      	mvns	r2, r2
 8004438:	401a      	ands	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2104      	movs	r1, #4
 800443e:	400b      	ands	r3, r1
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4099      	lsls	r1, r3
 8004444:	000b      	movs	r3, r1
 8004446:	431a      	orrs	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b004      	add	sp, #16
 8004452:	bd80      	pop	{r7, pc}

08004454 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	211f      	movs	r1, #31
 8004468:	400a      	ands	r2, r1
 800446a:	210f      	movs	r1, #15
 800446c:	4091      	lsls	r1, r2
 800446e:	000a      	movs	r2, r1
 8004470:	43d2      	mvns	r2, r2
 8004472:	401a      	ands	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	0e9b      	lsrs	r3, r3, #26
 8004478:	210f      	movs	r1, #15
 800447a:	4019      	ands	r1, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	201f      	movs	r0, #31
 8004480:	4003      	ands	r3, r0
 8004482:	4099      	lsls	r1, r3
 8004484:	000b      	movs	r3, r1
 8004486:	431a      	orrs	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800448c:	46c0      	nop			; (mov r8, r8)
 800448e:	46bd      	mov	sp, r7
 8004490:	b004      	add	sp, #16
 8004492:	bd80      	pop	{r7, pc}

08004494 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	035b      	lsls	r3, r3, #13
 80044a6:	0b5b      	lsrs	r3, r3, #13
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b002      	add	sp, #8
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	0352      	lsls	r2, r2, #13
 80044c8:	0b52      	lsrs	r2, r2, #13
 80044ca:	43d2      	mvns	r2, r2
 80044cc:	401a      	ands	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b002      	add	sp, #8
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	0212      	lsls	r2, r2, #8
 80044f0:	43d2      	mvns	r2, r2
 80044f2:	401a      	ands	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	400b      	ands	r3, r1
 80044fc:	4904      	ldr	r1, [pc, #16]	; (8004510 <LL_ADC_SetChannelSamplingTime+0x34>)
 80044fe:	400b      	ands	r3, r1
 8004500:	431a      	orrs	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	46bd      	mov	sp, r7
 800450a:	b004      	add	sp, #16
 800450c:	bd80      	pop	{r7, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	07ffff00 	.word	0x07ffff00

08004514 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a05      	ldr	r2, [pc, #20]	; (8004538 <LL_ADC_EnableInternalRegulator+0x24>)
 8004522:	4013      	ands	r3, r2
 8004524:	2280      	movs	r2, #128	; 0x80
 8004526:	0552      	lsls	r2, r2, #21
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	46bd      	mov	sp, r7
 8004532:	b002      	add	sp, #8
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	6fffffe8 	.word	0x6fffffe8

0800453c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	055b      	lsls	r3, r3, #21
 800454c:	401a      	ands	r2, r3
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	055b      	lsls	r3, r3, #21
 8004552:	429a      	cmp	r2, r3
 8004554:	d101      	bne.n	800455a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800455a:	2300      	movs	r3, #0
}
 800455c:	0018      	movs	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	b002      	add	sp, #8
 8004562:	bd80      	pop	{r7, pc}

08004564 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2201      	movs	r2, #1
 8004572:	4013      	ands	r3, r2
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <LL_ADC_IsEnabled+0x18>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <LL_ADC_IsEnabled+0x1a>
 800457c:	2300      	movs	r3, #0
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b002      	add	sp, #8
 8004584:	bd80      	pop	{r7, pc}

08004586 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2204      	movs	r2, #4
 8004594:	4013      	ands	r3, r2
 8004596:	2b04      	cmp	r3, #4
 8004598:	d101      	bne.n	800459e <LL_ADC_REG_IsConversionOngoing+0x18>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800459e:	2300      	movs	r3, #0
}
 80045a0:	0018      	movs	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b002      	add	sp, #8
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045b0:	231f      	movs	r3, #31
 80045b2:	18fb      	adds	r3, r7, r3
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e1b1      	b.n	8004932 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	0018      	movs	r0, r3
 80045da:	f7fe fd7b 	bl	80030d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2254      	movs	r2, #84	; 0x54
 80045e8:	2100      	movs	r1, #0
 80045ea:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7ff ffa3 	bl	800453c <LL_ADC_IsInternalRegulatorEnabled>
 80045f6:	1e03      	subs	r3, r0, #0
 80045f8:	d115      	bne.n	8004626 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	0018      	movs	r0, r3
 8004600:	f7ff ff88 	bl	8004514 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004604:	4bcd      	ldr	r3, [pc, #820]	; (800493c <HAL_ADC_Init+0x394>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	49cd      	ldr	r1, [pc, #820]	; (8004940 <HAL_ADC_Init+0x398>)
 800460a:	0018      	movs	r0, r3
 800460c:	f7fb fd96 	bl	800013c <__udivsi3>
 8004610:	0003      	movs	r3, r0
 8004612:	3301      	adds	r3, #1
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004618:	e002      	b.n	8004620 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	3b01      	subs	r3, #1
 800461e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f9      	bne.n	800461a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	0018      	movs	r0, r3
 800462c:	f7ff ff86 	bl	800453c <LL_ADC_IsInternalRegulatorEnabled>
 8004630:	1e03      	subs	r3, r0, #0
 8004632:	d10f      	bne.n	8004654 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	2210      	movs	r2, #16
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004644:	2201      	movs	r2, #1
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800464c:	231f      	movs	r3, #31
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	2201      	movs	r2, #1
 8004652:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	0018      	movs	r0, r3
 800465a:	f7ff ff94 	bl	8004586 <LL_ADC_REG_IsConversionOngoing>
 800465e:	0003      	movs	r3, r0
 8004660:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	2210      	movs	r2, #16
 8004668:	4013      	ands	r3, r2
 800466a:	d000      	beq.n	800466e <HAL_ADC_Init+0xc6>
 800466c:	e154      	b.n	8004918 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d000      	beq.n	8004676 <HAL_ADC_Init+0xce>
 8004674:	e150      	b.n	8004918 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467a:	4ab2      	ldr	r2, [pc, #712]	; (8004944 <HAL_ADC_Init+0x39c>)
 800467c:	4013      	ands	r3, r2
 800467e:	2202      	movs	r2, #2
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	0018      	movs	r0, r3
 800468c:	f7ff ff6a 	bl	8004564 <LL_ADC_IsEnabled>
 8004690:	1e03      	subs	r3, r0, #0
 8004692:	d156      	bne.n	8004742 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	2218      	movs	r2, #24
 800469c:	4393      	bics	r3, r2
 800469e:	0019      	movs	r1, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	0f9b      	lsrs	r3, r3, #30
 80046b2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046b8:	4313      	orrs	r3, r2
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	223c      	movs	r2, #60	; 0x3c
 80046c4:	5c9b      	ldrb	r3, [r3, r2]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d111      	bne.n	80046ee <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	0f9b      	lsrs	r3, r3, #30
 80046d0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046d6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80046dc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80046e2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	2201      	movs	r2, #1
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	4a94      	ldr	r2, [pc, #592]	; (8004948 <HAL_ADC_Init+0x3a0>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	0019      	movs	r1, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	430a      	orrs	r2, r1
 8004702:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	23c0      	movs	r3, #192	; 0xc0
 800470a:	061b      	lsls	r3, r3, #24
 800470c:	429a      	cmp	r2, r3
 800470e:	d018      	beq.n	8004742 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	05db      	lsls	r3, r3, #23
 8004718:	429a      	cmp	r2, r3
 800471a:	d012      	beq.n	8004742 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	061b      	lsls	r3, r3, #24
 8004724:	429a      	cmp	r2, r3
 8004726:	d00c      	beq.n	8004742 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004728:	4b88      	ldr	r3, [pc, #544]	; (800494c <HAL_ADC_Init+0x3a4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a88      	ldr	r2, [pc, #544]	; (8004950 <HAL_ADC_Init+0x3a8>)
 800472e:	4013      	ands	r3, r2
 8004730:	0019      	movs	r1, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	23f0      	movs	r3, #240	; 0xf0
 8004738:	039b      	lsls	r3, r3, #14
 800473a:	401a      	ands	r2, r3
 800473c:	4b83      	ldr	r3, [pc, #524]	; (800494c <HAL_ADC_Init+0x3a4>)
 800473e:	430a      	orrs	r2, r1
 8004740:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	7e1b      	ldrb	r3, [r3, #24]
 8004746:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	7e5b      	ldrb	r3, [r3, #25]
 800474c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800474e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	7e9b      	ldrb	r3, [r3, #26]
 8004754:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004756:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_ADC_Init+0x1be>
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	015b      	lsls	r3, r3, #5
 8004764:	e000      	b.n	8004768 <HAL_ADC_Init+0x1c0>
 8004766:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004768:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800476e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	da04      	bge.n	8004782 <HAL_ADC_Init+0x1da>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	e001      	b.n	8004786 <HAL_ADC_Init+0x1de>
 8004782:	2380      	movs	r3, #128	; 0x80
 8004784:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8004786:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	212c      	movs	r1, #44	; 0x2c
 800478c:	5c5b      	ldrb	r3, [r3, r1]
 800478e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004790:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	5c9b      	ldrb	r3, [r3, r2]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d115      	bne.n	80047ce <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	7e9b      	ldrb	r3, [r3, #26]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d105      	bne.n	80047b6 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2280      	movs	r2, #128	; 0x80
 80047ae:	0252      	lsls	r2, r2, #9
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	e00b      	b.n	80047ce <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	2220      	movs	r2, #32
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	2201      	movs	r2, #1
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047da:	23e0      	movs	r3, #224	; 0xe0
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80047e4:	4313      	orrs	r3, r2
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	4a58      	ldr	r2, [pc, #352]	; (8004954 <HAL_ADC_Init+0x3ac>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	0019      	movs	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	430a      	orrs	r2, r1
 8004800:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	4a53      	ldr	r2, [pc, #332]	; (8004958 <HAL_ADC_Init+0x3b0>)
 800480a:	4013      	ands	r3, r2
 800480c:	0019      	movs	r1, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	430a      	orrs	r2, r1
 8004816:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	001a      	movs	r2, r3
 8004822:	2100      	movs	r1, #0
 8004824:	f7ff fdf9 	bl	800441a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	494a      	ldr	r1, [pc, #296]	; (800495c <HAL_ADC_Init+0x3b4>)
 8004832:	001a      	movs	r2, r3
 8004834:	f7ff fdf1 	bl	800441a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2110      	movs	r1, #16
 800484c:	4249      	negs	r1, r1
 800484e:	430a      	orrs	r2, r1
 8004850:	629a      	str	r2, [r3, #40]	; 0x28
 8004852:	e03a      	b.n	80048ca <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	039b      	lsls	r3, r3, #14
 800485c:	429a      	cmp	r2, r3
 800485e:	d134      	bne.n	80048ca <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8004860:	2300      	movs	r3, #0
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	e00c      	b.n	8004880 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	40da      	lsrs	r2, r3
 8004870:	0013      	movs	r3, r2
 8004872:	220f      	movs	r2, #15
 8004874:	4013      	ands	r3, r2
 8004876:	2b0f      	cmp	r3, #15
 8004878:	d006      	beq.n	8004888 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	3301      	adds	r3, #1
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b07      	cmp	r3, #7
 8004884:	d9ef      	bls.n	8004866 <HAL_ADC_Init+0x2be>
 8004886:	e000      	b.n	800488a <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8004888:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d109      	bne.n	80048a4 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2110      	movs	r1, #16
 800489c:	4249      	negs	r1, r1
 800489e:	430a      	orrs	r2, r1
 80048a0:	629a      	str	r2, [r3, #40]	; 0x28
 80048a2:	e012      	b.n	80048ca <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	221c      	movs	r2, #28
 80048b4:	4013      	ands	r3, r2
 80048b6:	2210      	movs	r2, #16
 80048b8:	4252      	negs	r2, r2
 80048ba:	409a      	lsls	r2, r3
 80048bc:	0011      	movs	r1, r2
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a23      	ldr	r2, [pc, #140]	; (8004960 <HAL_ADC_Init+0x3b8>)
 80048d2:	4013      	ands	r3, r2
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d10b      	bne.n	80048f2 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	2203      	movs	r2, #3
 80048e6:	4393      	bics	r3, r2
 80048e8:	2201      	movs	r2, #1
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80048f0:	e01c      	b.n	800492c <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	2212      	movs	r2, #18
 80048f8:	4393      	bics	r3, r2
 80048fa:	2210      	movs	r2, #16
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004906:	2201      	movs	r2, #1
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800490e:	231f      	movs	r3, #31
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004916:	e009      	b.n	800492c <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491c:	2210      	movs	r2, #16
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004924:	231f      	movs	r3, #31
 8004926:	18fb      	adds	r3, r7, r3
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800492c:	231f      	movs	r3, #31
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	781b      	ldrb	r3, [r3, #0]
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b008      	add	sp, #32
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	20000020 	.word	0x20000020
 8004940:	00030d40 	.word	0x00030d40
 8004944:	fffffefd 	.word	0xfffffefd
 8004948:	1ffffc02 	.word	0x1ffffc02
 800494c:	40012708 	.word	0x40012708
 8004950:	ffc3ffff 	.word	0xffc3ffff
 8004954:	fffe0219 	.word	0xfffe0219
 8004958:	dffffc02 	.word	0xdffffc02
 800495c:	07ffff04 	.word	0x07ffff04
 8004960:	833fffe7 	.word	0x833fffe7

08004964 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800496e:	2317      	movs	r3, #23
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2254      	movs	r2, #84	; 0x54
 800497e:	5c9b      	ldrb	r3, [r3, r2]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x24>
 8004984:	2302      	movs	r3, #2
 8004986:	e1c0      	b.n	8004d0a <HAL_ADC_ConfigChannel+0x3a6>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2254      	movs	r2, #84	; 0x54
 800498c:	2101      	movs	r1, #1
 800498e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	0018      	movs	r0, r3
 8004996:	f7ff fdf6 	bl	8004586 <LL_ADC_REG_IsConversionOngoing>
 800499a:	1e03      	subs	r3, r0, #0
 800499c:	d000      	beq.n	80049a0 <HAL_ADC_ConfigChannel+0x3c>
 800499e:	e1a3      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d100      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x46>
 80049a8:	e143      	b.n	8004c32 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	061b      	lsls	r3, r3, #24
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d004      	beq.n	80049c0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049ba:	4ac1      	ldr	r2, [pc, #772]	; (8004cc0 <HAL_ADC_ConfigChannel+0x35c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d108      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	0019      	movs	r1, r3
 80049ca:	0010      	movs	r0, r2
 80049cc:	f7ff fd62 	bl	8004494 <LL_ADC_REG_SetSequencerChAdd>
 80049d0:	e0c9      	b.n	8004b66 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	211f      	movs	r1, #31
 80049dc:	400b      	ands	r3, r1
 80049de:	210f      	movs	r1, #15
 80049e0:	4099      	lsls	r1, r3
 80049e2:	000b      	movs	r3, r1
 80049e4:	43db      	mvns	r3, r3
 80049e6:	4013      	ands	r3, r2
 80049e8:	0019      	movs	r1, r3
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	035b      	lsls	r3, r3, #13
 80049f0:	0b5b      	lsrs	r3, r3, #13
 80049f2:	d105      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x9c>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	0e9b      	lsrs	r3, r3, #26
 80049fa:	221f      	movs	r2, #31
 80049fc:	4013      	ands	r3, r2
 80049fe:	e098      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2201      	movs	r2, #1
 8004a06:	4013      	ands	r3, r2
 8004a08:	d000      	beq.n	8004a0c <HAL_ADC_ConfigChannel+0xa8>
 8004a0a:	e091      	b.n	8004b30 <HAL_ADC_ConfigChannel+0x1cc>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2202      	movs	r2, #2
 8004a12:	4013      	ands	r3, r2
 8004a14:	d000      	beq.n	8004a18 <HAL_ADC_ConfigChannel+0xb4>
 8004a16:	e089      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x1c8>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d000      	beq.n	8004a24 <HAL_ADC_ConfigChannel+0xc0>
 8004a22:	e081      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x1c4>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2208      	movs	r2, #8
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d000      	beq.n	8004a30 <HAL_ADC_ConfigChannel+0xcc>
 8004a2e:	e079      	b.n	8004b24 <HAL_ADC_ConfigChannel+0x1c0>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2210      	movs	r2, #16
 8004a36:	4013      	ands	r3, r2
 8004a38:	d000      	beq.n	8004a3c <HAL_ADC_ConfigChannel+0xd8>
 8004a3a:	e071      	b.n	8004b20 <HAL_ADC_ConfigChannel+0x1bc>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2220      	movs	r2, #32
 8004a42:	4013      	ands	r3, r2
 8004a44:	d000      	beq.n	8004a48 <HAL_ADC_ConfigChannel+0xe4>
 8004a46:	e069      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x1b8>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2240      	movs	r2, #64	; 0x40
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d000      	beq.n	8004a54 <HAL_ADC_ConfigChannel+0xf0>
 8004a52:	e061      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x1b4>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2280      	movs	r2, #128	; 0x80
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d000      	beq.n	8004a60 <HAL_ADC_ConfigChannel+0xfc>
 8004a5e:	e059      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x1b0>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d151      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x1ac>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4013      	ands	r3, r2
 8004a76:	d149      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x1a8>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4013      	ands	r3, r2
 8004a82:	d141      	bne.n	8004b08 <HAL_ADC_ConfigChannel+0x1a4>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d139      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x1a0>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	015b      	lsls	r3, r3, #5
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d131      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x19c>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	019b      	lsls	r3, r3, #6
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d129      	bne.n	8004afc <HAL_ADC_ConfigChannel+0x198>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	2380      	movs	r3, #128	; 0x80
 8004aae:	01db      	lsls	r3, r3, #7
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d121      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x194>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	4013      	ands	r3, r2
 8004abe:	d119      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x190>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	025b      	lsls	r3, r3, #9
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d111      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x18c>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	029b      	lsls	r3, r3, #10
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d109      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x188>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	02db      	lsls	r3, r3, #11
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d001      	beq.n	8004ae8 <HAL_ADC_ConfigChannel+0x184>
 8004ae4:	2312      	movs	r3, #18
 8004ae6:	e024      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e022      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004aec:	2311      	movs	r3, #17
 8004aee:	e020      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004af0:	2310      	movs	r3, #16
 8004af2:	e01e      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004af4:	230f      	movs	r3, #15
 8004af6:	e01c      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004af8:	230e      	movs	r3, #14
 8004afa:	e01a      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004afc:	230d      	movs	r3, #13
 8004afe:	e018      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b00:	230c      	movs	r3, #12
 8004b02:	e016      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b04:	230b      	movs	r3, #11
 8004b06:	e014      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b08:	230a      	movs	r3, #10
 8004b0a:	e012      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b0c:	2309      	movs	r3, #9
 8004b0e:	e010      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b10:	2308      	movs	r3, #8
 8004b12:	e00e      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b14:	2307      	movs	r3, #7
 8004b16:	e00c      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b18:	2306      	movs	r3, #6
 8004b1a:	e00a      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b1c:	2305      	movs	r3, #5
 8004b1e:	e008      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b20:	2304      	movs	r3, #4
 8004b22:	e006      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b24:	2303      	movs	r3, #3
 8004b26:	e004      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e002      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x1ce>
 8004b30:	2300      	movs	r3, #0
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	6852      	ldr	r2, [r2, #4]
 8004b36:	201f      	movs	r0, #31
 8004b38:	4002      	ands	r2, r0
 8004b3a:	4093      	lsls	r3, r2
 8004b3c:	000a      	movs	r2, r1
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d808      	bhi.n	8004b66 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6859      	ldr	r1, [r3, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	001a      	movs	r2, r3
 8004b62:	f7ff fc77 	bl	8004454 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6819      	ldr	r1, [r3, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	001a      	movs	r2, r3
 8004b74:	f7ff fcb2 	bl	80044dc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	db00      	blt.n	8004b82 <HAL_ADC_ConfigChannel+0x21e>
 8004b80:	e0bc      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b82:	4b50      	ldr	r3, [pc, #320]	; (8004cc4 <HAL_ADC_ConfigChannel+0x360>)
 8004b84:	0018      	movs	r0, r3
 8004b86:	f7ff fc3b 	bl	8004400 <LL_ADC_GetCommonPathInternalCh>
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a4d      	ldr	r2, [pc, #308]	; (8004cc8 <HAL_ADC_ConfigChannel+0x364>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d122      	bne.n	8004bde <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	2380      	movs	r3, #128	; 0x80
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ba0:	d11d      	bne.n	8004bde <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2280      	movs	r2, #128	; 0x80
 8004ba6:	0412      	lsls	r2, r2, #16
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	4a46      	ldr	r2, [pc, #280]	; (8004cc4 <HAL_ADC_ConfigChannel+0x360>)
 8004bac:	0019      	movs	r1, r3
 8004bae:	0010      	movs	r0, r2
 8004bb0:	f7ff fc12 	bl	80043d8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bb4:	4b45      	ldr	r3, [pc, #276]	; (8004ccc <HAL_ADC_ConfigChannel+0x368>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4945      	ldr	r1, [pc, #276]	; (8004cd0 <HAL_ADC_ConfigChannel+0x36c>)
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f7fb fabe 	bl	800013c <__udivsi3>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	0013      	movs	r3, r2
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	189b      	adds	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bce:	e002      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f9      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004bdc:	e08e      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a3c      	ldr	r2, [pc, #240]	; (8004cd4 <HAL_ADC_ConfigChannel+0x370>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d10e      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x2a2>
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	045b      	lsls	r3, r3, #17
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d109      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2280      	movs	r2, #128	; 0x80
 8004bf6:	0452      	lsls	r2, r2, #17
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	4a32      	ldr	r2, [pc, #200]	; (8004cc4 <HAL_ADC_ConfigChannel+0x360>)
 8004bfc:	0019      	movs	r1, r3
 8004bfe:	0010      	movs	r0, r2
 8004c00:	f7ff fbea 	bl	80043d8 <LL_ADC_SetCommonPathInternalCh>
 8004c04:	e07a      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a33      	ldr	r2, [pc, #204]	; (8004cd8 <HAL_ADC_ConfigChannel+0x374>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d000      	beq.n	8004c12 <HAL_ADC_ConfigChannel+0x2ae>
 8004c10:	e074      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	03db      	lsls	r3, r3, #15
 8004c18:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c1a:	d000      	beq.n	8004c1e <HAL_ADC_ConfigChannel+0x2ba>
 8004c1c:	e06e      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2280      	movs	r2, #128	; 0x80
 8004c22:	03d2      	lsls	r2, r2, #15
 8004c24:	4313      	orrs	r3, r2
 8004c26:	4a27      	ldr	r2, [pc, #156]	; (8004cc4 <HAL_ADC_ConfigChannel+0x360>)
 8004c28:	0019      	movs	r1, r3
 8004c2a:	0010      	movs	r0, r2
 8004c2c:	f7ff fbd4 	bl	80043d8 <LL_ADC_SetCommonPathInternalCh>
 8004c30:	e064      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	061b      	lsls	r3, r3, #24
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d004      	beq.n	8004c48 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c42:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <HAL_ADC_ConfigChannel+0x35c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d107      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	0019      	movs	r1, r3
 8004c52:	0010      	movs	r0, r2
 8004c54:	f7ff fc2f 	bl	80044b6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da4d      	bge.n	8004cfc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c60:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <HAL_ADC_ConfigChannel+0x360>)
 8004c62:	0018      	movs	r0, r3
 8004c64:	f7ff fbcc 	bl	8004400 <LL_ADC_GetCommonPathInternalCh>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a15      	ldr	r2, [pc, #84]	; (8004cc8 <HAL_ADC_ConfigChannel+0x364>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d108      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <HAL_ADC_ConfigChannel+0x378>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	4a11      	ldr	r2, [pc, #68]	; (8004cc4 <HAL_ADC_ConfigChannel+0x360>)
 8004c7e:	0019      	movs	r1, r3
 8004c80:	0010      	movs	r0, r2
 8004c82:	f7ff fba9 	bl	80043d8 <LL_ADC_SetCommonPathInternalCh>
 8004c86:	e039      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a11      	ldr	r2, [pc, #68]	; (8004cd4 <HAL_ADC_ConfigChannel+0x370>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d108      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <HAL_ADC_ConfigChannel+0x37c>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <HAL_ADC_ConfigChannel+0x360>)
 8004c9a:	0019      	movs	r1, r3
 8004c9c:	0010      	movs	r0, r2
 8004c9e:	f7ff fb9b 	bl	80043d8 <LL_ADC_SetCommonPathInternalCh>
 8004ca2:	e02b      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a0b      	ldr	r2, [pc, #44]	; (8004cd8 <HAL_ADC_ConfigChannel+0x374>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d126      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	4a0c      	ldr	r2, [pc, #48]	; (8004ce4 <HAL_ADC_ConfigChannel+0x380>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	4a03      	ldr	r2, [pc, #12]	; (8004cc4 <HAL_ADC_ConfigChannel+0x360>)
 8004cb6:	0019      	movs	r1, r3
 8004cb8:	0010      	movs	r0, r2
 8004cba:	f7ff fb8d 	bl	80043d8 <LL_ADC_SetCommonPathInternalCh>
 8004cbe:	e01d      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x398>
 8004cc0:	80000004 	.word	0x80000004
 8004cc4:	40012708 	.word	0x40012708
 8004cc8:	b0001000 	.word	0xb0001000
 8004ccc:	20000020 	.word	0x20000020
 8004cd0:	00030d40 	.word	0x00030d40
 8004cd4:	b8004000 	.word	0xb8004000
 8004cd8:	b4002000 	.word	0xb4002000
 8004cdc:	ff7fffff 	.word	0xff7fffff
 8004ce0:	feffffff 	.word	0xfeffffff
 8004ce4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	2220      	movs	r2, #32
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004cf4:	2317      	movs	r3, #23
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2254      	movs	r2, #84	; 0x54
 8004d00:	2100      	movs	r1, #0
 8004d02:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004d04:	2317      	movs	r3, #23
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	781b      	ldrb	r3, [r3, #0]
}
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b006      	add	sp, #24
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	46c0      	nop			; (mov r8, r8)

08004d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	0002      	movs	r2, r0
 8004d1c:	1dfb      	adds	r3, r7, #7
 8004d1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d20:	1dfb      	adds	r3, r7, #7
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b7f      	cmp	r3, #127	; 0x7f
 8004d26:	d809      	bhi.n	8004d3c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d28:	1dfb      	adds	r3, r7, #7
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	231f      	movs	r3, #31
 8004d30:	401a      	ands	r2, r3
 8004d32:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <__NVIC_EnableIRQ+0x30>)
 8004d34:	2101      	movs	r1, #1
 8004d36:	4091      	lsls	r1, r2
 8004d38:	000a      	movs	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b002      	add	sp, #8
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	e000e100 	.word	0xe000e100

08004d48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	0002      	movs	r2, r0
 8004d50:	1dfb      	adds	r3, r7, #7
 8004d52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d54:	1dfb      	adds	r3, r7, #7
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b7f      	cmp	r3, #127	; 0x7f
 8004d5a:	d810      	bhi.n	8004d7e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d5c:	1dfb      	adds	r3, r7, #7
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	001a      	movs	r2, r3
 8004d62:	231f      	movs	r3, #31
 8004d64:	4013      	ands	r3, r2
 8004d66:	4908      	ldr	r1, [pc, #32]	; (8004d88 <__NVIC_DisableIRQ+0x40>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	0013      	movs	r3, r2
 8004d6e:	2280      	movs	r2, #128	; 0x80
 8004d70:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004d72:	f3bf 8f4f 	dsb	sy
}
 8004d76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8004d78:	f3bf 8f6f 	isb	sy
}
 8004d7c:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b002      	add	sp, #8
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	e000e100 	.word	0xe000e100

08004d8c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	0002      	movs	r2, r0
 8004d94:	1dfb      	adds	r3, r7, #7
 8004d96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d98:	1dfb      	adds	r3, r7, #7
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9e:	d80a      	bhi.n	8004db6 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004da0:	1dfb      	adds	r3, r7, #7
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	001a      	movs	r2, r3
 8004da6:	231f      	movs	r3, #31
 8004da8:	4013      	ands	r3, r2
 8004daa:	4905      	ldr	r1, [pc, #20]	; (8004dc0 <__NVIC_ClearPendingIRQ+0x34>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	409a      	lsls	r2, r3
 8004db0:	23c0      	movs	r3, #192	; 0xc0
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	50ca      	str	r2, [r1, r3]
  }
}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b002      	add	sp, #8
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	e000e100 	.word	0xe000e100

08004dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dc4:	b590      	push	{r4, r7, lr}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	0002      	movs	r2, r0
 8004dcc:	6039      	str	r1, [r7, #0]
 8004dce:	1dfb      	adds	r3, r7, #7
 8004dd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004dd2:	1dfb      	adds	r3, r7, #7
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd8:	d828      	bhi.n	8004e2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dda:	4a2f      	ldr	r2, [pc, #188]	; (8004e98 <__NVIC_SetPriority+0xd4>)
 8004ddc:	1dfb      	adds	r3, r7, #7
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	b25b      	sxtb	r3, r3
 8004de2:	089b      	lsrs	r3, r3, #2
 8004de4:	33c0      	adds	r3, #192	; 0xc0
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	589b      	ldr	r3, [r3, r2]
 8004dea:	1dfa      	adds	r2, r7, #7
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	0011      	movs	r1, r2
 8004df0:	2203      	movs	r2, #3
 8004df2:	400a      	ands	r2, r1
 8004df4:	00d2      	lsls	r2, r2, #3
 8004df6:	21ff      	movs	r1, #255	; 0xff
 8004df8:	4091      	lsls	r1, r2
 8004dfa:	000a      	movs	r2, r1
 8004dfc:	43d2      	mvns	r2, r2
 8004dfe:	401a      	ands	r2, r3
 8004e00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	019b      	lsls	r3, r3, #6
 8004e06:	22ff      	movs	r2, #255	; 0xff
 8004e08:	401a      	ands	r2, r3
 8004e0a:	1dfb      	adds	r3, r7, #7
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	0018      	movs	r0, r3
 8004e10:	2303      	movs	r3, #3
 8004e12:	4003      	ands	r3, r0
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e18:	481f      	ldr	r0, [pc, #124]	; (8004e98 <__NVIC_SetPriority+0xd4>)
 8004e1a:	1dfb      	adds	r3, r7, #7
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	b25b      	sxtb	r3, r3
 8004e20:	089b      	lsrs	r3, r3, #2
 8004e22:	430a      	orrs	r2, r1
 8004e24:	33c0      	adds	r3, #192	; 0xc0
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004e2a:	e031      	b.n	8004e90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e2c:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <__NVIC_SetPriority+0xd8>)
 8004e2e:	1dfb      	adds	r3, r7, #7
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	0019      	movs	r1, r3
 8004e34:	230f      	movs	r3, #15
 8004e36:	400b      	ands	r3, r1
 8004e38:	3b08      	subs	r3, #8
 8004e3a:	089b      	lsrs	r3, r3, #2
 8004e3c:	3306      	adds	r3, #6
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	18d3      	adds	r3, r2, r3
 8004e42:	3304      	adds	r3, #4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	1dfa      	adds	r2, r7, #7
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	0011      	movs	r1, r2
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	400a      	ands	r2, r1
 8004e50:	00d2      	lsls	r2, r2, #3
 8004e52:	21ff      	movs	r1, #255	; 0xff
 8004e54:	4091      	lsls	r1, r2
 8004e56:	000a      	movs	r2, r1
 8004e58:	43d2      	mvns	r2, r2
 8004e5a:	401a      	ands	r2, r3
 8004e5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	019b      	lsls	r3, r3, #6
 8004e62:	22ff      	movs	r2, #255	; 0xff
 8004e64:	401a      	ands	r2, r3
 8004e66:	1dfb      	adds	r3, r7, #7
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	4003      	ands	r3, r0
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e74:	4809      	ldr	r0, [pc, #36]	; (8004e9c <__NVIC_SetPriority+0xd8>)
 8004e76:	1dfb      	adds	r3, r7, #7
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	001c      	movs	r4, r3
 8004e7c:	230f      	movs	r3, #15
 8004e7e:	4023      	ands	r3, r4
 8004e80:	3b08      	subs	r3, #8
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	430a      	orrs	r2, r1
 8004e86:	3306      	adds	r3, #6
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	18c3      	adds	r3, r0, r3
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	601a      	str	r2, [r3, #0]
}
 8004e90:	46c0      	nop			; (mov r8, r8)
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b003      	add	sp, #12
 8004e96:	bd90      	pop	{r4, r7, pc}
 8004e98:	e000e100 	.word	0xe000e100
 8004e9c:	e000ed00 	.word	0xe000ed00

08004ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	1e5a      	subs	r2, r3, #1
 8004eac:	2380      	movs	r3, #128	; 0x80
 8004eae:	045b      	lsls	r3, r3, #17
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d301      	bcc.n	8004eb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e010      	b.n	8004eda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <SysTick_Config+0x44>)
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	3a01      	subs	r2, #1
 8004ebe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	425b      	negs	r3, r3
 8004ec4:	2103      	movs	r1, #3
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f7ff ff7c 	bl	8004dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <SysTick_Config+0x44>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ed2:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <SysTick_Config+0x44>)
 8004ed4:	2207      	movs	r2, #7
 8004ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	0018      	movs	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b002      	add	sp, #8
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	e000e010 	.word	0xe000e010

08004ee8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
 8004ef2:	210f      	movs	r1, #15
 8004ef4:	187b      	adds	r3, r7, r1
 8004ef6:	1c02      	adds	r2, r0, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	187b      	adds	r3, r7, r1
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	b25b      	sxtb	r3, r3
 8004f02:	0011      	movs	r1, r2
 8004f04:	0018      	movs	r0, r3
 8004f06:	f7ff ff5d 	bl	8004dc4 <__NVIC_SetPriority>
}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b004      	add	sp, #16
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	0002      	movs	r2, r0
 8004f1a:	1dfb      	adds	r3, r7, #7
 8004f1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f1e:	1dfb      	adds	r3, r7, #7
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	b25b      	sxtb	r3, r3
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7ff fef5 	bl	8004d14 <__NVIC_EnableIRQ>
}
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	b002      	add	sp, #8
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	0002      	movs	r2, r0
 8004f3a:	1dfb      	adds	r3, r7, #7
 8004f3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004f3e:	1dfb      	adds	r3, r7, #7
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b25b      	sxtb	r3, r3
 8004f44:	0018      	movs	r0, r3
 8004f46:	f7ff feff 	bl	8004d48 <__NVIC_DisableIRQ>
}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b002      	add	sp, #8
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f7ff ff9f 	bl	8004ea0 <SysTick_Config>
 8004f62:	0003      	movs	r3, r0
}
 8004f64:	0018      	movs	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	0002      	movs	r2, r0
 8004f74:	1dfb      	adds	r3, r7, #7
 8004f76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004f78:	1dfb      	adds	r3, r7, #7
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	b25b      	sxtb	r3, r3
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f7ff ff04 	bl	8004d8c <__NVIC_ClearPendingIRQ>
}
 8004f84:	46c0      	nop			; (mov r8, r8)
 8004f86:	46bd      	mov	sp, r7
 8004f88:	b002      	add	sp, #8
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e091      	b.n	80050c2 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	001a      	movs	r2, r3
 8004fa4:	4b49      	ldr	r3, [pc, #292]	; (80050cc <HAL_DMA_Init+0x140>)
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d810      	bhi.n	8004fcc <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a48      	ldr	r2, [pc, #288]	; (80050d0 <HAL_DMA_Init+0x144>)
 8004fb0:	4694      	mov	ip, r2
 8004fb2:	4463      	add	r3, ip
 8004fb4:	2114      	movs	r1, #20
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f7fb f8c0 	bl	800013c <__udivsi3>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	009a      	lsls	r2, r3, #2
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a43      	ldr	r2, [pc, #268]	; (80050d4 <HAL_DMA_Init+0x148>)
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40
 8004fca:	e00f      	b.n	8004fec <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a41      	ldr	r2, [pc, #260]	; (80050d8 <HAL_DMA_Init+0x14c>)
 8004fd2:	4694      	mov	ip, r2
 8004fd4:	4463      	add	r3, ip
 8004fd6:	2114      	movs	r1, #20
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f7fb f8af 	bl	800013c <__udivsi3>
 8004fde:	0003      	movs	r3, r0
 8004fe0:	009a      	lsls	r2, r3, #2
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a3c      	ldr	r2, [pc, #240]	; (80050dc <HAL_DMA_Init+0x150>)
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2225      	movs	r2, #37	; 0x25
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4938      	ldr	r1, [pc, #224]	; (80050e0 <HAL_DMA_Init+0x154>)
 8005000:	400a      	ands	r2, r1
 8005002:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6819      	ldr	r1, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0018      	movs	r0, r3
 800503e:	f000 faab 	bl	8005598 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	2380      	movs	r3, #128	; 0x80
 8005048:	01db      	lsls	r3, r3, #7
 800504a:	429a      	cmp	r2, r3
 800504c:	d102      	bne.n	8005054 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800505c:	217f      	movs	r1, #127	; 0x7f
 800505e:	400a      	ands	r2, r1
 8005060:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800506a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d011      	beq.n	8005098 <HAL_DMA_Init+0x10c>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b04      	cmp	r3, #4
 800507a:	d80d      	bhi.n	8005098 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	0018      	movs	r0, r3
 8005080:	f000 fad4 	bl	800562c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	e008      	b.n	80050aa <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2225      	movs	r2, #37	; 0x25
 80050b4:	2101      	movs	r1, #1
 80050b6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2224      	movs	r2, #36	; 0x24
 80050bc:	2100      	movs	r1, #0
 80050be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	0018      	movs	r0, r3
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b002      	add	sp, #8
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	40020407 	.word	0x40020407
 80050d0:	bffdfff8 	.word	0xbffdfff8
 80050d4:	40020000 	.word	0x40020000
 80050d8:	bffdfbf8 	.word	0xbffdfbf8
 80050dc:	40020400 	.word	0x40020400
 80050e0:	ffff800f 	.word	0xffff800f

080050e4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050f2:	2317      	movs	r3, #23
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2224      	movs	r2, #36	; 0x24
 80050fe:	5c9b      	ldrb	r3, [r3, r2]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_DMA_Start_IT+0x24>
 8005104:	2302      	movs	r3, #2
 8005106:	e06f      	b.n	80051e8 <HAL_DMA_Start_IT+0x104>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2224      	movs	r2, #36	; 0x24
 800510c:	2101      	movs	r1, #1
 800510e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2225      	movs	r2, #37	; 0x25
 8005114:	5c9b      	ldrb	r3, [r3, r2]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	d157      	bne.n	80051cc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2225      	movs	r2, #37	; 0x25
 8005120:	2102      	movs	r1, #2
 8005122:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2101      	movs	r1, #1
 8005136:	438a      	bics	r2, r1
 8005138:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f9ed 	bl	8005520 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	210e      	movs	r1, #14
 800515a:	430a      	orrs	r2, r1
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e00f      	b.n	8005180 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2104      	movs	r1, #4
 800516c:	438a      	bics	r2, r1
 800516e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	210a      	movs	r1, #10
 800517c:	430a      	orrs	r2, r1
 800517e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	2380      	movs	r3, #128	; 0x80
 8005188:	025b      	lsls	r3, r3, #9
 800518a:	4013      	ands	r3, r2
 800518c:	d008      	beq.n	80051a0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005198:	2180      	movs	r1, #128	; 0x80
 800519a:	0049      	lsls	r1, r1, #1
 800519c:	430a      	orrs	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	2180      	movs	r1, #128	; 0x80
 80051b4:	0049      	lsls	r1, r1, #1
 80051b6:	430a      	orrs	r2, r1
 80051b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2101      	movs	r1, #1
 80051c6:	430a      	orrs	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e00a      	b.n	80051e2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2224      	movs	r2, #36	; 0x24
 80051d6:	2100      	movs	r1, #0
 80051d8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80051da:	2317      	movs	r3, #23
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80051e2:	2317      	movs	r3, #23
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	781b      	ldrb	r3, [r3, #0]
}
 80051e8:	0018      	movs	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b006      	add	sp, #24
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e04f      	b.n	80052a2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2225      	movs	r2, #37	; 0x25
 8005206:	5c9b      	ldrb	r3, [r3, r2]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d008      	beq.n	8005220 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2204      	movs	r2, #4
 8005212:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2224      	movs	r2, #36	; 0x24
 8005218:	2100      	movs	r1, #0
 800521a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e040      	b.n	80052a2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	210e      	movs	r1, #14
 800522c:	438a      	bics	r2, r1
 800522e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523a:	491c      	ldr	r1, [pc, #112]	; (80052ac <HAL_DMA_Abort+0xbc>)
 800523c:	400a      	ands	r2, r1
 800523e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2101      	movs	r1, #1
 800524c:	438a      	bics	r2, r1
 800524e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005254:	221c      	movs	r2, #28
 8005256:	401a      	ands	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	2101      	movs	r1, #1
 800525e:	4091      	lsls	r1, r2
 8005260:	000a      	movs	r2, r1
 8005262:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800526c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00c      	beq.n	8005290 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005280:	490a      	ldr	r1, [pc, #40]	; (80052ac <HAL_DMA_Abort+0xbc>)
 8005282:	400a      	ands	r2, r1
 8005284:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800528e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2225      	movs	r2, #37	; 0x25
 8005294:	2101      	movs	r1, #1
 8005296:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2224      	movs	r2, #36	; 0x24
 800529c:	2100      	movs	r1, #0
 800529e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	0018      	movs	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b002      	add	sp, #8
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	fffffeff 	.word	0xfffffeff

080052b0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b8:	210f      	movs	r1, #15
 80052ba:	187b      	adds	r3, r7, r1
 80052bc:	2200      	movs	r2, #0
 80052be:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2225      	movs	r2, #37	; 0x25
 80052c4:	5c9b      	ldrb	r3, [r3, r2]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d006      	beq.n	80052da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2204      	movs	r2, #4
 80052d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80052d2:	187b      	adds	r3, r7, r1
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e048      	b.n	800536c <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	210e      	movs	r1, #14
 80052e6:	438a      	bics	r2, r1
 80052e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2101      	movs	r1, #1
 80052f6:	438a      	bics	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005304:	491d      	ldr	r1, [pc, #116]	; (800537c <HAL_DMA_Abort_IT+0xcc>)
 8005306:	400a      	ands	r2, r1
 8005308:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	221c      	movs	r2, #28
 8005310:	401a      	ands	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	2101      	movs	r1, #1
 8005318:	4091      	lsls	r1, r2
 800531a:	000a      	movs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005326:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00c      	beq.n	800534a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533a:	4910      	ldr	r1, [pc, #64]	; (800537c <HAL_DMA_Abort_IT+0xcc>)
 800533c:	400a      	ands	r2, r1
 800533e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005348:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2225      	movs	r2, #37	; 0x25
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2224      	movs	r2, #36	; 0x24
 8005356:	2100      	movs	r1, #0
 8005358:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	0010      	movs	r0, r2
 800536a:	4798      	blx	r3
    }
  }
  return status;
 800536c:	230f      	movs	r3, #15
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	781b      	ldrb	r3, [r3, #0]
}
 8005372:	0018      	movs	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	b004      	add	sp, #16
 8005378:	bd80      	pop	{r7, pc}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	fffffeff 	.word	0xfffffeff

08005380 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539c:	221c      	movs	r2, #28
 800539e:	4013      	ands	r3, r2
 80053a0:	2204      	movs	r2, #4
 80053a2:	409a      	lsls	r2, r3
 80053a4:	0013      	movs	r3, r2
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4013      	ands	r3, r2
 80053aa:	d026      	beq.n	80053fa <HAL_DMA_IRQHandler+0x7a>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2204      	movs	r2, #4
 80053b0:	4013      	ands	r3, r2
 80053b2:	d022      	beq.n	80053fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2220      	movs	r2, #32
 80053bc:	4013      	ands	r3, r2
 80053be:	d107      	bne.n	80053d0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2104      	movs	r1, #4
 80053cc:	438a      	bics	r2, r1
 80053ce:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d4:	221c      	movs	r2, #28
 80053d6:	401a      	ands	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	2104      	movs	r1, #4
 80053de:	4091      	lsls	r1, r2
 80053e0:	000a      	movs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d100      	bne.n	80053ee <HAL_DMA_IRQHandler+0x6e>
 80053ec:	e080      	b.n	80054f0 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	0010      	movs	r0, r2
 80053f6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80053f8:	e07a      	b.n	80054f0 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fe:	221c      	movs	r2, #28
 8005400:	4013      	ands	r3, r2
 8005402:	2202      	movs	r2, #2
 8005404:	409a      	lsls	r2, r3
 8005406:	0013      	movs	r3, r2
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4013      	ands	r3, r2
 800540c:	d03c      	beq.n	8005488 <HAL_DMA_IRQHandler+0x108>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2202      	movs	r2, #2
 8005412:	4013      	ands	r3, r2
 8005414:	d038      	beq.n	8005488 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2220      	movs	r2, #32
 800541e:	4013      	ands	r3, r2
 8005420:	d10b      	bne.n	800543a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	210a      	movs	r1, #10
 800542e:	438a      	bics	r2, r1
 8005430:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2225      	movs	r2, #37	; 0x25
 8005436:	2101      	movs	r1, #1
 8005438:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	001a      	movs	r2, r3
 8005440:	4b2e      	ldr	r3, [pc, #184]	; (80054fc <HAL_DMA_IRQHandler+0x17c>)
 8005442:	429a      	cmp	r2, r3
 8005444:	d909      	bls.n	800545a <HAL_DMA_IRQHandler+0xda>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	221c      	movs	r2, #28
 800544c:	401a      	ands	r2, r3
 800544e:	4b2c      	ldr	r3, [pc, #176]	; (8005500 <HAL_DMA_IRQHandler+0x180>)
 8005450:	2102      	movs	r1, #2
 8005452:	4091      	lsls	r1, r2
 8005454:	000a      	movs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
 8005458:	e008      	b.n	800546c <HAL_DMA_IRQHandler+0xec>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545e:	221c      	movs	r2, #28
 8005460:	401a      	ands	r2, r3
 8005462:	4b28      	ldr	r3, [pc, #160]	; (8005504 <HAL_DMA_IRQHandler+0x184>)
 8005464:	2102      	movs	r1, #2
 8005466:	4091      	lsls	r1, r2
 8005468:	000a      	movs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2224      	movs	r2, #36	; 0x24
 8005470:	2100      	movs	r1, #0
 8005472:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	2b00      	cmp	r3, #0
 800547a:	d039      	beq.n	80054f0 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	0010      	movs	r0, r2
 8005484:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005486:	e033      	b.n	80054f0 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548c:	221c      	movs	r2, #28
 800548e:	4013      	ands	r3, r2
 8005490:	2208      	movs	r2, #8
 8005492:	409a      	lsls	r2, r3
 8005494:	0013      	movs	r3, r2
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4013      	ands	r3, r2
 800549a:	d02a      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x172>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2208      	movs	r2, #8
 80054a0:	4013      	ands	r3, r2
 80054a2:	d026      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	210e      	movs	r1, #14
 80054b0:	438a      	bics	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b8:	221c      	movs	r2, #28
 80054ba:	401a      	ands	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	2101      	movs	r1, #1
 80054c2:	4091      	lsls	r1, r2
 80054c4:	000a      	movs	r2, r1
 80054c6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2225      	movs	r2, #37	; 0x25
 80054d2:	2101      	movs	r1, #1
 80054d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2224      	movs	r2, #36	; 0x24
 80054da:	2100      	movs	r1, #0
 80054dc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	0010      	movs	r0, r2
 80054ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054f0:	46c0      	nop			; (mov r8, r8)
 80054f2:	46c0      	nop			; (mov r8, r8)
}
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b004      	add	sp, #16
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	40020080 	.word	0x40020080
 8005500:	40020400 	.word	0x40020400
 8005504:	40020000 	.word	0x40020000

08005508 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2225      	movs	r2, #37	; 0x25
 8005514:	5c9b      	ldrb	r3, [r3, r2]
 8005516:	b2db      	uxtb	r3, r3
}
 8005518:	0018      	movs	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	b002      	add	sp, #8
 800551e:	bd80      	pop	{r7, pc}

08005520 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005536:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553c:	2b00      	cmp	r3, #0
 800553e:	d004      	beq.n	800554a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005548:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	221c      	movs	r2, #28
 8005550:	401a      	ands	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	2101      	movs	r1, #1
 8005558:	4091      	lsls	r1, r2
 800555a:	000a      	movs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	2b10      	cmp	r3, #16
 800556c:	d108      	bne.n	8005580 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800557e:	e007      	b.n	8005590 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	60da      	str	r2, [r3, #12]
}
 8005590:	46c0      	nop			; (mov r8, r8)
 8005592:	46bd      	mov	sp, r7
 8005594:	b004      	add	sp, #16
 8005596:	bd80      	pop	{r7, pc}

08005598 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	001a      	movs	r2, r3
 80055a6:	4b1d      	ldr	r3, [pc, #116]	; (800561c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d814      	bhi.n	80055d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b0:	089b      	lsrs	r3, r3, #2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4a1a      	ldr	r2, [pc, #104]	; (8005620 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80055b6:	189a      	adds	r2, r3, r2
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	001a      	movs	r2, r3
 80055c2:	23ff      	movs	r3, #255	; 0xff
 80055c4:	4013      	ands	r3, r2
 80055c6:	3b08      	subs	r3, #8
 80055c8:	2114      	movs	r1, #20
 80055ca:	0018      	movs	r0, r3
 80055cc:	f7fa fdb6 	bl	800013c <__udivsi3>
 80055d0:	0003      	movs	r3, r0
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e014      	b.n	8005600 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	089b      	lsrs	r3, r3, #2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4a11      	ldr	r2, [pc, #68]	; (8005624 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80055e0:	189a      	adds	r2, r3, r2
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	001a      	movs	r2, r3
 80055ec:	23ff      	movs	r3, #255	; 0xff
 80055ee:	4013      	ands	r3, r2
 80055f0:	3b08      	subs	r3, #8
 80055f2:	2114      	movs	r1, #20
 80055f4:	0018      	movs	r0, r3
 80055f6:	f7fa fda1 	bl	800013c <__udivsi3>
 80055fa:	0003      	movs	r3, r0
 80055fc:	3307      	adds	r3, #7
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a09      	ldr	r2, [pc, #36]	; (8005628 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8005604:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	221f      	movs	r2, #31
 800560a:	4013      	ands	r3, r2
 800560c:	2201      	movs	r2, #1
 800560e:	409a      	lsls	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005614:	46c0      	nop			; (mov r8, r8)
 8005616:	46bd      	mov	sp, r7
 8005618:	b004      	add	sp, #16
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40020407 	.word	0x40020407
 8005620:	40020800 	.word	0x40020800
 8005624:	4002081c 	.word	0x4002081c
 8005628:	40020880 	.word	0x40020880

0800562c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	227f      	movs	r2, #127	; 0x7f
 800563a:	4013      	ands	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4a0a      	ldr	r2, [pc, #40]	; (800566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005642:	4694      	mov	ip, r2
 8005644:	4463      	add	r3, ip
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	001a      	movs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a07      	ldr	r2, [pc, #28]	; (8005670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005652:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b01      	subs	r3, #1
 8005658:	2203      	movs	r2, #3
 800565a:	4013      	ands	r3, r2
 800565c:	2201      	movs	r2, #1
 800565e:	409a      	lsls	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005664:	46c0      	nop			; (mov r8, r8)
 8005666:	46bd      	mov	sp, r7
 8005668:	b004      	add	sp, #16
 800566a:	bd80      	pop	{r7, pc}
 800566c:	1000823f 	.word	0x1000823f
 8005670:	40020940 	.word	0x40020940

08005674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005682:	e14d      	b.n	8005920 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2101      	movs	r1, #1
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4091      	lsls	r1, r2
 800568e:	000a      	movs	r2, r1
 8005690:	4013      	ands	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d100      	bne.n	800569c <HAL_GPIO_Init+0x28>
 800569a:	e13e      	b.n	800591a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2203      	movs	r2, #3
 80056a2:	4013      	ands	r3, r2
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d005      	beq.n	80056b4 <HAL_GPIO_Init+0x40>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2203      	movs	r2, #3
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d130      	bne.n	8005716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	2203      	movs	r2, #3
 80056c0:	409a      	lsls	r2, r3
 80056c2:	0013      	movs	r3, r2
 80056c4:	43da      	mvns	r2, r3
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4013      	ands	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	409a      	lsls	r2, r3
 80056d6:	0013      	movs	r3, r2
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ea:	2201      	movs	r2, #1
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	409a      	lsls	r2, r3
 80056f0:	0013      	movs	r3, r2
 80056f2:	43da      	mvns	r2, r3
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	4013      	ands	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	091b      	lsrs	r3, r3, #4
 8005700:	2201      	movs	r2, #1
 8005702:	401a      	ands	r2, r3
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	409a      	lsls	r2, r3
 8005708:	0013      	movs	r3, r2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2203      	movs	r2, #3
 800571c:	4013      	ands	r3, r2
 800571e:	2b03      	cmp	r3, #3
 8005720:	d017      	beq.n	8005752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	2203      	movs	r2, #3
 800572e:	409a      	lsls	r2, r3
 8005730:	0013      	movs	r3, r2
 8005732:	43da      	mvns	r2, r3
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4013      	ands	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	409a      	lsls	r2, r3
 8005744:	0013      	movs	r3, r2
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2203      	movs	r2, #3
 8005758:	4013      	ands	r3, r2
 800575a:	2b02      	cmp	r3, #2
 800575c:	d123      	bne.n	80057a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	08da      	lsrs	r2, r3, #3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3208      	adds	r2, #8
 8005766:	0092      	lsls	r2, r2, #2
 8005768:	58d3      	ldr	r3, [r2, r3]
 800576a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2207      	movs	r2, #7
 8005770:	4013      	ands	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	220f      	movs	r2, #15
 8005776:	409a      	lsls	r2, r3
 8005778:	0013      	movs	r3, r2
 800577a:	43da      	mvns	r2, r3
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	4013      	ands	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2107      	movs	r1, #7
 800578a:	400b      	ands	r3, r1
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	409a      	lsls	r2, r3
 8005790:	0013      	movs	r3, r2
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	08da      	lsrs	r2, r3, #3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3208      	adds	r2, #8
 80057a0:	0092      	lsls	r2, r2, #2
 80057a2:	6939      	ldr	r1, [r7, #16]
 80057a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	2203      	movs	r2, #3
 80057b2:	409a      	lsls	r2, r3
 80057b4:	0013      	movs	r3, r2
 80057b6:	43da      	mvns	r2, r3
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4013      	ands	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2203      	movs	r2, #3
 80057c4:	401a      	ands	r2, r3
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	409a      	lsls	r2, r3
 80057cc:	0013      	movs	r3, r2
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	23c0      	movs	r3, #192	; 0xc0
 80057e0:	029b      	lsls	r3, r3, #10
 80057e2:	4013      	ands	r3, r2
 80057e4:	d100      	bne.n	80057e8 <HAL_GPIO_Init+0x174>
 80057e6:	e098      	b.n	800591a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80057e8:	4a53      	ldr	r2, [pc, #332]	; (8005938 <HAL_GPIO_Init+0x2c4>)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	089b      	lsrs	r3, r3, #2
 80057ee:	3318      	adds	r3, #24
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	589b      	ldr	r3, [r3, r2]
 80057f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2203      	movs	r2, #3
 80057fa:	4013      	ands	r3, r2
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	220f      	movs	r2, #15
 8005800:	409a      	lsls	r2, r3
 8005802:	0013      	movs	r3, r2
 8005804:	43da      	mvns	r2, r3
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	4013      	ands	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	23a0      	movs	r3, #160	; 0xa0
 8005810:	05db      	lsls	r3, r3, #23
 8005812:	429a      	cmp	r2, r3
 8005814:	d019      	beq.n	800584a <HAL_GPIO_Init+0x1d6>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a48      	ldr	r2, [pc, #288]	; (800593c <HAL_GPIO_Init+0x2c8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <HAL_GPIO_Init+0x1d2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a47      	ldr	r2, [pc, #284]	; (8005940 <HAL_GPIO_Init+0x2cc>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00d      	beq.n	8005842 <HAL_GPIO_Init+0x1ce>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a46      	ldr	r2, [pc, #280]	; (8005944 <HAL_GPIO_Init+0x2d0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d007      	beq.n	800583e <HAL_GPIO_Init+0x1ca>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a45      	ldr	r2, [pc, #276]	; (8005948 <HAL_GPIO_Init+0x2d4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d101      	bne.n	800583a <HAL_GPIO_Init+0x1c6>
 8005836:	2304      	movs	r3, #4
 8005838:	e008      	b.n	800584c <HAL_GPIO_Init+0x1d8>
 800583a:	2305      	movs	r3, #5
 800583c:	e006      	b.n	800584c <HAL_GPIO_Init+0x1d8>
 800583e:	2303      	movs	r3, #3
 8005840:	e004      	b.n	800584c <HAL_GPIO_Init+0x1d8>
 8005842:	2302      	movs	r3, #2
 8005844:	e002      	b.n	800584c <HAL_GPIO_Init+0x1d8>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <HAL_GPIO_Init+0x1d8>
 800584a:	2300      	movs	r3, #0
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	2103      	movs	r1, #3
 8005850:	400a      	ands	r2, r1
 8005852:	00d2      	lsls	r2, r2, #3
 8005854:	4093      	lsls	r3, r2
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800585c:	4936      	ldr	r1, [pc, #216]	; (8005938 <HAL_GPIO_Init+0x2c4>)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	089b      	lsrs	r3, r3, #2
 8005862:	3318      	adds	r3, #24
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800586a:	4a33      	ldr	r2, [pc, #204]	; (8005938 <HAL_GPIO_Init+0x2c4>)
 800586c:	2380      	movs	r3, #128	; 0x80
 800586e:	58d3      	ldr	r3, [r2, r3]
 8005870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	43da      	mvns	r2, r3
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4013      	ands	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	025b      	lsls	r3, r3, #9
 8005884:	4013      	ands	r3, r2
 8005886:	d003      	beq.n	8005890 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005890:	4929      	ldr	r1, [pc, #164]	; (8005938 <HAL_GPIO_Init+0x2c4>)
 8005892:	2280      	movs	r2, #128	; 0x80
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8005898:	4a27      	ldr	r2, [pc, #156]	; (8005938 <HAL_GPIO_Init+0x2c4>)
 800589a:	2384      	movs	r3, #132	; 0x84
 800589c:	58d3      	ldr	r3, [r2, r3]
 800589e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	43da      	mvns	r2, r3
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4013      	ands	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	029b      	lsls	r3, r3, #10
 80058b2:	4013      	ands	r3, r2
 80058b4:	d003      	beq.n	80058be <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058be:	491e      	ldr	r1, [pc, #120]	; (8005938 <HAL_GPIO_Init+0x2c4>)
 80058c0:	2284      	movs	r2, #132	; 0x84
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058c6:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <HAL_GPIO_Init+0x2c4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	43da      	mvns	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4013      	ands	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	035b      	lsls	r3, r3, #13
 80058de:	4013      	ands	r3, r2
 80058e0:	d003      	beq.n	80058ea <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058ea:	4b13      	ldr	r3, [pc, #76]	; (8005938 <HAL_GPIO_Init+0x2c4>)
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <HAL_GPIO_Init+0x2c4>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	43da      	mvns	r2, r3
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4013      	ands	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	2380      	movs	r3, #128	; 0x80
 8005906:	039b      	lsls	r3, r3, #14
 8005908:	4013      	ands	r3, r2
 800590a:	d003      	beq.n	8005914 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005914:	4b08      	ldr	r3, [pc, #32]	; (8005938 <HAL_GPIO_Init+0x2c4>)
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	3301      	adds	r3, #1
 800591e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	40da      	lsrs	r2, r3
 8005928:	1e13      	subs	r3, r2, #0
 800592a:	d000      	beq.n	800592e <HAL_GPIO_Init+0x2ba>
 800592c:	e6aa      	b.n	8005684 <HAL_GPIO_Init+0x10>
  }
}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	46c0      	nop			; (mov r8, r8)
 8005932:	46bd      	mov	sp, r7
 8005934:	b006      	add	sp, #24
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40021800 	.word	0x40021800
 800593c:	50000400 	.word	0x50000400
 8005940:	50000800 	.word	0x50000800
 8005944:	50000c00 	.word	0x50000c00
 8005948:	50001000 	.word	0x50001000

0800594c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	0008      	movs	r0, r1
 8005956:	0011      	movs	r1, r2
 8005958:	1cbb      	adds	r3, r7, #2
 800595a:	1c02      	adds	r2, r0, #0
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	1c7b      	adds	r3, r7, #1
 8005960:	1c0a      	adds	r2, r1, #0
 8005962:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005964:	1c7b      	adds	r3, r7, #1
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d004      	beq.n	8005976 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800596c:	1cbb      	adds	r3, r7, #2
 800596e:	881a      	ldrh	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005974:	e003      	b.n	800597e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005976:	1cbb      	adds	r3, r7, #2
 8005978:	881a      	ldrh	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b002      	add	sp, #8
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e082      	b.n	8005aa0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2241      	movs	r2, #65	; 0x41
 800599e:	5c9b      	ldrb	r3, [r3, r2]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d107      	bne.n	80059b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2240      	movs	r2, #64	; 0x40
 80059aa:	2100      	movs	r1, #0
 80059ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	0018      	movs	r0, r3
 80059b2:	f7fd fbd3 	bl	800315c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2241      	movs	r2, #65	; 0x41
 80059ba:	2124      	movs	r1, #36	; 0x24
 80059bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2101      	movs	r1, #1
 80059ca:	438a      	bics	r2, r1
 80059cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4934      	ldr	r1, [pc, #208]	; (8005aa8 <HAL_I2C_Init+0x120>)
 80059d8:	400a      	ands	r2, r1
 80059da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4931      	ldr	r1, [pc, #196]	; (8005aac <HAL_I2C_Init+0x124>)
 80059e8:	400a      	ands	r2, r1
 80059ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d108      	bne.n	8005a06 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2180      	movs	r1, #128	; 0x80
 80059fe:	0209      	lsls	r1, r1, #8
 8005a00:	430a      	orrs	r2, r1
 8005a02:	609a      	str	r2, [r3, #8]
 8005a04:	e007      	b.n	8005a16 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2184      	movs	r1, #132	; 0x84
 8005a10:	0209      	lsls	r1, r1, #8
 8005a12:	430a      	orrs	r2, r1
 8005a14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d104      	bne.n	8005a28 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	0112      	lsls	r2, r2, #4
 8005a26:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	491f      	ldr	r1, [pc, #124]	; (8005ab0 <HAL_I2C_Init+0x128>)
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	491a      	ldr	r1, [pc, #104]	; (8005aac <HAL_I2C_Init+0x124>)
 8005a44:	400a      	ands	r2, r1
 8005a46:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	431a      	orrs	r2, r3
 8005a52:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69d9      	ldr	r1, [r3, #28]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1a      	ldr	r2, [r3, #32]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2241      	movs	r2, #65	; 0x41
 8005a8c:	2120      	movs	r1, #32
 8005a8e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2242      	movs	r2, #66	; 0x42
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b002      	add	sp, #8
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	f0ffffff 	.word	0xf0ffffff
 8005aac:	ffff7fff 	.word	0xffff7fff
 8005ab0:	02008000 	.word	0x02008000

08005ab4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 8005ab4:	b590      	push	{r4, r7, lr}
 8005ab6:	b089      	sub	sp, #36	; 0x24
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	0008      	movs	r0, r1
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	0019      	movs	r1, r3
 8005ac2:	230a      	movs	r3, #10
 8005ac4:	18fb      	adds	r3, r7, r3
 8005ac6:	1c02      	adds	r2, r0, #0
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	2308      	movs	r3, #8
 8005acc:	18fb      	adds	r3, r7, r3
 8005ace:	1c0a      	adds	r2, r1, #0
 8005ad0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2241      	movs	r2, #65	; 0x41
 8005ad6:	5c9b      	ldrb	r3, [r3, r2]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d000      	beq.n	8005ae0 <HAL_I2C_Master_Transmit+0x2c>
 8005ade:	e0e7      	b.n	8005cb0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2240      	movs	r2, #64	; 0x40
 8005ae4:	5c9b      	ldrb	r3, [r3, r2]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_I2C_Master_Transmit+0x3a>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e0e1      	b.n	8005cb2 <HAL_I2C_Master_Transmit+0x1fe>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2240      	movs	r2, #64	; 0x40
 8005af2:	2101      	movs	r1, #1
 8005af4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005af6:	f7fe fc2b 	bl	8004350 <HAL_GetTick>
 8005afa:	0003      	movs	r3, r0
 8005afc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	0219      	lsls	r1, r3, #8
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	2319      	movs	r3, #25
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f001 febc 	bl	8007888 <I2C_WaitOnFlagUntilTimeout>
 8005b10:	1e03      	subs	r3, r0, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0cc      	b.n	8005cb2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2241      	movs	r2, #65	; 0x41
 8005b1c:	2121      	movs	r1, #33	; 0x21
 8005b1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2242      	movs	r2, #66	; 0x42
 8005b24:	2110      	movs	r1, #16
 8005b26:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2208      	movs	r2, #8
 8005b38:	18ba      	adds	r2, r7, r2
 8005b3a:	8812      	ldrh	r2, [r2, #0]
 8005b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2bff      	cmp	r3, #255	; 0xff
 8005b4c:	d911      	bls.n	8005b72 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	22ff      	movs	r2, #255	; 0xff
 8005b52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	2380      	movs	r3, #128	; 0x80
 8005b5c:	045c      	lsls	r4, r3, #17
 8005b5e:	230a      	movs	r3, #10
 8005b60:	18fb      	adds	r3, r7, r3
 8005b62:	8819      	ldrh	r1, [r3, #0]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	4b55      	ldr	r3, [pc, #340]	; (8005cbc <HAL_I2C_Master_Transmit+0x208>)
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	0023      	movs	r3, r4
 8005b6c:	f002 f82c 	bl	8007bc8 <I2C_TransferConfig>
 8005b70:	e075      	b.n	8005c5e <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	2380      	movs	r3, #128	; 0x80
 8005b84:	049c      	lsls	r4, r3, #18
 8005b86:	230a      	movs	r3, #10
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	8819      	ldrh	r1, [r3, #0]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	4b4b      	ldr	r3, [pc, #300]	; (8005cbc <HAL_I2C_Master_Transmit+0x208>)
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	0023      	movs	r3, r4
 8005b94:	f002 f818 	bl	8007bc8 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b98:	e061      	b.n	8005c5e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f001 feb0 	bl	8007906 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ba6:	1e03      	subs	r3, r0, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e081      	b.n	8005cb2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	781a      	ldrb	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d03a      	beq.n	8005c5e <HAL_I2C_Master_Transmit+0x1aa>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d136      	bne.n	8005c5e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	0013      	movs	r3, r2
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2180      	movs	r1, #128	; 0x80
 8005bfe:	f001 fe43 	bl	8007888 <I2C_WaitOnFlagUntilTimeout>
 8005c02:	1e03      	subs	r3, r0, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e053      	b.n	8005cb2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2bff      	cmp	r3, #255	; 0xff
 8005c12:	d911      	bls.n	8005c38 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	22ff      	movs	r2, #255	; 0xff
 8005c18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	2380      	movs	r3, #128	; 0x80
 8005c22:	045c      	lsls	r4, r3, #17
 8005c24:	230a      	movs	r3, #10
 8005c26:	18fb      	adds	r3, r7, r3
 8005c28:	8819      	ldrh	r1, [r3, #0]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	0023      	movs	r3, r4
 8005c32:	f001 ffc9 	bl	8007bc8 <I2C_TransferConfig>
 8005c36:	e012      	b.n	8005c5e <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	2380      	movs	r3, #128	; 0x80
 8005c4a:	049c      	lsls	r4, r3, #18
 8005c4c:	230a      	movs	r3, #10
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	8819      	ldrh	r1, [r3, #0]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	2300      	movs	r3, #0
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	0023      	movs	r3, r4
 8005c5a:	f001 ffb5 	bl	8007bc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d198      	bne.n	8005b9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f001 fe88 	bl	8007984 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c74:	1e03      	subs	r3, r0, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e01a      	b.n	8005cb2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2220      	movs	r2, #32
 8005c82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	490c      	ldr	r1, [pc, #48]	; (8005cc0 <HAL_I2C_Master_Transmit+0x20c>)
 8005c90:	400a      	ands	r2, r1
 8005c92:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2241      	movs	r2, #65	; 0x41
 8005c98:	2120      	movs	r1, #32
 8005c9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2242      	movs	r2, #66	; 0x42
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2240      	movs	r2, #64	; 0x40
 8005ca8:	2100      	movs	r1, #0
 8005caa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e000      	b.n	8005cb2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005cb0:	2302      	movs	r3, #2
  }
}
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b007      	add	sp, #28
 8005cb8:	bd90      	pop	{r4, r7, pc}
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	80002000 	.word	0x80002000
 8005cc0:	fe00e800 	.word	0xfe00e800

08005cc4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b089      	sub	sp, #36	; 0x24
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	0008      	movs	r0, r1
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	0019      	movs	r1, r3
 8005cd2:	230a      	movs	r3, #10
 8005cd4:	18fb      	adds	r3, r7, r3
 8005cd6:	1c02      	adds	r2, r0, #0
 8005cd8:	801a      	strh	r2, [r3, #0]
 8005cda:	2308      	movs	r3, #8
 8005cdc:	18fb      	adds	r3, r7, r3
 8005cde:	1c0a      	adds	r2, r1, #0
 8005ce0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2241      	movs	r2, #65	; 0x41
 8005ce6:	5c9b      	ldrb	r3, [r3, r2]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d000      	beq.n	8005cf0 <HAL_I2C_Master_Receive+0x2c>
 8005cee:	e0e8      	b.n	8005ec2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2240      	movs	r2, #64	; 0x40
 8005cf4:	5c9b      	ldrb	r3, [r3, r2]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_I2C_Master_Receive+0x3a>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e0e2      	b.n	8005ec4 <HAL_I2C_Master_Receive+0x200>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2240      	movs	r2, #64	; 0x40
 8005d02:	2101      	movs	r1, #1
 8005d04:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d06:	f7fe fb23 	bl	8004350 <HAL_GetTick>
 8005d0a:	0003      	movs	r3, r0
 8005d0c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	0219      	lsls	r1, r3, #8
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	2319      	movs	r3, #25
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f001 fdb4 	bl	8007888 <I2C_WaitOnFlagUntilTimeout>
 8005d20:	1e03      	subs	r3, r0, #0
 8005d22:	d001      	beq.n	8005d28 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0cd      	b.n	8005ec4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2241      	movs	r2, #65	; 0x41
 8005d2c:	2122      	movs	r1, #34	; 0x22
 8005d2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2242      	movs	r2, #66	; 0x42
 8005d34:	2110      	movs	r1, #16
 8005d36:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2208      	movs	r2, #8
 8005d48:	18ba      	adds	r2, r7, r2
 8005d4a:	8812      	ldrh	r2, [r2, #0]
 8005d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2bff      	cmp	r3, #255	; 0xff
 8005d5c:	d911      	bls.n	8005d82 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	22ff      	movs	r2, #255	; 0xff
 8005d62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	2380      	movs	r3, #128	; 0x80
 8005d6c:	045c      	lsls	r4, r3, #17
 8005d6e:	230a      	movs	r3, #10
 8005d70:	18fb      	adds	r3, r7, r3
 8005d72:	8819      	ldrh	r1, [r3, #0]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	4b55      	ldr	r3, [pc, #340]	; (8005ecc <HAL_I2C_Master_Receive+0x208>)
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	0023      	movs	r3, r4
 8005d7c:	f001 ff24 	bl	8007bc8 <I2C_TransferConfig>
 8005d80:	e076      	b.n	8005e70 <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	2380      	movs	r3, #128	; 0x80
 8005d94:	049c      	lsls	r4, r3, #18
 8005d96:	230a      	movs	r3, #10
 8005d98:	18fb      	adds	r3, r7, r3
 8005d9a:	8819      	ldrh	r1, [r3, #0]
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	4b4b      	ldr	r3, [pc, #300]	; (8005ecc <HAL_I2C_Master_Receive+0x208>)
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	0023      	movs	r3, r4
 8005da4:	f001 ff10 	bl	8007bc8 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005da8:	e062      	b.n	8005e70 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	0018      	movs	r0, r3
 8005db2:	f001 fe23 	bl	80079fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005db6:	1e03      	subs	r3, r0, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e082      	b.n	8005ec4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d03a      	beq.n	8005e70 <HAL_I2C_Master_Receive+0x1ac>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d136      	bne.n	8005e70 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	0013      	movs	r3, r2
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2180      	movs	r1, #128	; 0x80
 8005e10:	f001 fd3a 	bl	8007888 <I2C_WaitOnFlagUntilTimeout>
 8005e14:	1e03      	subs	r3, r0, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e053      	b.n	8005ec4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2bff      	cmp	r3, #255	; 0xff
 8005e24:	d911      	bls.n	8005e4a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	22ff      	movs	r2, #255	; 0xff
 8005e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	045c      	lsls	r4, r3, #17
 8005e36:	230a      	movs	r3, #10
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	8819      	ldrh	r1, [r3, #0]
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	0023      	movs	r3, r4
 8005e44:	f001 fec0 	bl	8007bc8 <I2C_TransferConfig>
 8005e48:	e012      	b.n	8005e70 <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	2380      	movs	r3, #128	; 0x80
 8005e5c:	049c      	lsls	r4, r3, #18
 8005e5e:	230a      	movs	r3, #10
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	8819      	ldrh	r1, [r3, #0]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	2300      	movs	r3, #0
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	0023      	movs	r3, r4
 8005e6c:	f001 feac 	bl	8007bc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d197      	bne.n	8005daa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	0018      	movs	r0, r3
 8005e82:	f001 fd7f 	bl	8007984 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e86:	1e03      	subs	r3, r0, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e01a      	b.n	8005ec4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2220      	movs	r2, #32
 8005e94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	490b      	ldr	r1, [pc, #44]	; (8005ed0 <HAL_I2C_Master_Receive+0x20c>)
 8005ea2:	400a      	ands	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2241      	movs	r2, #65	; 0x41
 8005eaa:	2120      	movs	r1, #32
 8005eac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2242      	movs	r2, #66	; 0x42
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2240      	movs	r2, #64	; 0x40
 8005eba:	2100      	movs	r1, #0
 8005ebc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e000      	b.n	8005ec4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
  }
}
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b007      	add	sp, #28
 8005eca:	bd90      	pop	{r4, r7, pc}
 8005ecc:	80002400 	.word	0x80002400
 8005ed0:	fe00e800 	.word	0xfe00e800

08005ed4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005ed4:	b5b0      	push	{r4, r5, r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	0008      	movs	r0, r1
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	0019      	movs	r1, r3
 8005ee2:	230a      	movs	r3, #10
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	1c02      	adds	r2, r0, #0
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	2308      	movs	r3, #8
 8005eec:	18fb      	adds	r3, r7, r3
 8005eee:	1c0a      	adds	r2, r1, #0
 8005ef0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2241      	movs	r2, #65	; 0x41
 8005ef6:	5c9b      	ldrb	r3, [r3, r2]
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b20      	cmp	r3, #32
 8005efc:	d000      	beq.n	8005f00 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8005efe:	e0dd      	b.n	80060bc <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699a      	ldr	r2, [r3, #24]
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	2380      	movs	r3, #128	; 0x80
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d101      	bne.n	8005f18 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8005f14:	2302      	movs	r3, #2
 8005f16:	e0d2      	b.n	80060be <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2240      	movs	r2, #64	; 0x40
 8005f1c:	5c9b      	ldrb	r3, [r3, r2]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_I2C_Master_Transmit_DMA+0x52>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e0cb      	b.n	80060be <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2240      	movs	r2, #64	; 0x40
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2241      	movs	r2, #65	; 0x41
 8005f32:	2121      	movs	r1, #33	; 0x21
 8005f34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2242      	movs	r2, #66	; 0x42
 8005f3a:	2110      	movs	r1, #16
 8005f3c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	18ba      	adds	r2, r7, r2
 8005f50:	8812      	ldrh	r2, [r2, #0]
 8005f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4a5c      	ldr	r2, [pc, #368]	; (80060c8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8005f58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4a5b      	ldr	r2, [pc, #364]	; (80060cc <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8005f5e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2bff      	cmp	r3, #255	; 0xff
 8005f68:	d906      	bls.n	8005f78 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	22ff      	movs	r2, #255	; 0xff
 8005f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	045b      	lsls	r3, r3, #17
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	e007      	b.n	8005f88 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005f82:	2380      	movs	r3, #128	; 0x80
 8005f84:	049b      	lsls	r3, r3, #18
 8005f86:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d100      	bne.n	8005f92 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8005f90:	e078      	b.n	8006084 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d023      	beq.n	8005fe2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	4a4c      	ldr	r2, [pc, #304]	; (80060d0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8005fa0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	4a4b      	ldr	r2, [pc, #300]	; (80060d4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8005fa8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	2200      	movs	r2, #0
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3328      	adds	r3, #40	; 0x28
 8005fc6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005fcc:	2513      	movs	r5, #19
 8005fce:	197c      	adds	r4, r7, r5
 8005fd0:	f7ff f888 	bl	80050e4 <HAL_DMA_Start_IT>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005fd8:	197b      	adds	r3, r7, r5
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d13d      	bne.n	800605c <HAL_I2C_Master_Transmit_DMA+0x188>
 8005fe0:	e013      	b.n	800600a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2241      	movs	r2, #65	; 0x41
 8005fe6:	2120      	movs	r1, #32
 8005fe8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2242      	movs	r2, #66	; 0x42
 8005fee:	2100      	movs	r1, #0
 8005ff0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	2280      	movs	r2, #128	; 0x80
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2240      	movs	r2, #64	; 0x40
 8006002:	2100      	movs	r1, #0
 8006004:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e059      	b.n	80060be <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600e:	b2da      	uxtb	r2, r3
 8006010:	697c      	ldr	r4, [r7, #20]
 8006012:	230a      	movs	r3, #10
 8006014:	18fb      	adds	r3, r7, r3
 8006016:	8819      	ldrh	r1, [r3, #0]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	4b2f      	ldr	r3, [pc, #188]	; (80060d8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	0023      	movs	r3, r4
 8006020:	f001 fdd2 	bl	8007bc8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2240      	movs	r2, #64	; 0x40
 800603a:	2100      	movs	r1, #0
 800603c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2110      	movs	r1, #16
 8006042:	0018      	movs	r0, r3
 8006044:	f001 fdf6 	bl	8007c34 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2180      	movs	r1, #128	; 0x80
 8006054:	01c9      	lsls	r1, r1, #7
 8006056:	430a      	orrs	r2, r1
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	e02d      	b.n	80060b8 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2241      	movs	r2, #65	; 0x41
 8006060:	2120      	movs	r1, #32
 8006062:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2242      	movs	r2, #66	; 0x42
 8006068:	2100      	movs	r1, #0
 800606a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006070:	2210      	movs	r2, #16
 8006072:	431a      	orrs	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2240      	movs	r2, #64	; 0x40
 800607c:	2100      	movs	r1, #0
 800607e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e01c      	b.n	80060be <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4a15      	ldr	r2, [pc, #84]	; (80060dc <HAL_I2C_Master_Transmit_DMA+0x208>)
 8006088:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608e:	b2da      	uxtb	r2, r3
 8006090:	2380      	movs	r3, #128	; 0x80
 8006092:	049c      	lsls	r4, r3, #18
 8006094:	230a      	movs	r3, #10
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	8819      	ldrh	r1, [r3, #0]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	4b0e      	ldr	r3, [pc, #56]	; (80060d8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	0023      	movs	r3, r4
 80060a2:	f001 fd91 	bl	8007bc8 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2240      	movs	r2, #64	; 0x40
 80060aa:	2100      	movs	r1, #0
 80060ac:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2101      	movs	r1, #1
 80060b2:	0018      	movs	r0, r3
 80060b4:	f001 fdbe 	bl	8007c34 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	e000      	b.n	80060be <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
  }
}
 80060be:	0018      	movs	r0, r3
 80060c0:	46bd      	mov	sp, r7
 80060c2:	b006      	add	sp, #24
 80060c4:	bdb0      	pop	{r4, r5, r7, pc}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	ffff0000 	.word	0xffff0000
 80060cc:	08006941 	.word	0x08006941
 80060d0:	080076d9 	.word	0x080076d9
 80060d4:	08007819 	.word	0x08007819
 80060d8:	80002000 	.word	0x80002000
 80060dc:	08006495 	.word	0x08006495

080060e0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80060e0:	b5b0      	push	{r4, r5, r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	0008      	movs	r0, r1
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	0019      	movs	r1, r3
 80060ee:	230a      	movs	r3, #10
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	1c02      	adds	r2, r0, #0
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	2308      	movs	r3, #8
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	1c0a      	adds	r2, r1, #0
 80060fc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2241      	movs	r2, #65	; 0x41
 8006102:	5c9b      	ldrb	r3, [r3, r2]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b20      	cmp	r3, #32
 8006108:	d000      	beq.n	800610c <HAL_I2C_Master_Receive_DMA+0x2c>
 800610a:	e0dd      	b.n	80062c8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	2380      	movs	r3, #128	; 0x80
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	401a      	ands	r2, r3
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	021b      	lsls	r3, r3, #8
 800611c:	429a      	cmp	r2, r3
 800611e:	d101      	bne.n	8006124 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
 8006122:	e0d2      	b.n	80062ca <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2240      	movs	r2, #64	; 0x40
 8006128:	5c9b      	ldrb	r3, [r3, r2]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_I2C_Master_Receive_DMA+0x52>
 800612e:	2302      	movs	r3, #2
 8006130:	e0cb      	b.n	80062ca <HAL_I2C_Master_Receive_DMA+0x1ea>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2240      	movs	r2, #64	; 0x40
 8006136:	2101      	movs	r1, #1
 8006138:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2241      	movs	r2, #65	; 0x41
 800613e:	2122      	movs	r1, #34	; 0x22
 8006140:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2242      	movs	r2, #66	; 0x42
 8006146:	2110      	movs	r1, #16
 8006148:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2208      	movs	r2, #8
 800615a:	18ba      	adds	r2, r7, r2
 800615c:	8812      	ldrh	r2, [r2, #0]
 800615e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4a5c      	ldr	r2, [pc, #368]	; (80062d4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8006164:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a5b      	ldr	r2, [pc, #364]	; (80062d8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800616a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006170:	b29b      	uxth	r3, r3
 8006172:	2bff      	cmp	r3, #255	; 0xff
 8006174:	d906      	bls.n	8006184 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	22ff      	movs	r2, #255	; 0xff
 800617a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800617c:	2380      	movs	r3, #128	; 0x80
 800617e:	045b      	lsls	r3, r3, #17
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	e007      	b.n	8006194 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800618e:	2380      	movs	r3, #128	; 0x80
 8006190:	049b      	lsls	r3, r3, #18
 8006192:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	d100      	bne.n	800619e <HAL_I2C_Master_Receive_DMA+0xbe>
 800619c:	e078      	b.n	8006290 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d023      	beq.n	80061ee <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	4a4c      	ldr	r2, [pc, #304]	; (80062dc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80061ac:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	4a4b      	ldr	r2, [pc, #300]	; (80062e0 <HAL_I2C_Master_Receive_DMA+0x200>)
 80061b4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c2:	2200      	movs	r2, #0
 80061c4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3324      	adds	r3, #36	; 0x24
 80061d0:	0019      	movs	r1, r3
 80061d2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80061d8:	2513      	movs	r5, #19
 80061da:	197c      	adds	r4, r7, r5
 80061dc:	f7fe ff82 	bl	80050e4 <HAL_DMA_Start_IT>
 80061e0:	0003      	movs	r3, r0
 80061e2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80061e4:	197b      	adds	r3, r7, r5
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d13d      	bne.n	8006268 <HAL_I2C_Master_Receive_DMA+0x188>
 80061ec:	e013      	b.n	8006216 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2241      	movs	r2, #65	; 0x41
 80061f2:	2120      	movs	r1, #32
 80061f4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2242      	movs	r2, #66	; 0x42
 80061fa:	2100      	movs	r1, #0
 80061fc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006202:	2280      	movs	r2, #128	; 0x80
 8006204:	431a      	orrs	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2240      	movs	r2, #64	; 0x40
 800620e:	2100      	movs	r1, #0
 8006210:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e059      	b.n	80062ca <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621a:	b2da      	uxtb	r2, r3
 800621c:	697c      	ldr	r4, [r7, #20]
 800621e:	230a      	movs	r3, #10
 8006220:	18fb      	adds	r3, r7, r3
 8006222:	8819      	ldrh	r1, [r3, #0]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	4b2f      	ldr	r3, [pc, #188]	; (80062e4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	0023      	movs	r3, r4
 800622c:	f001 fccc 	bl	8007bc8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2240      	movs	r2, #64	; 0x40
 8006246:	2100      	movs	r1, #0
 8006248:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2110      	movs	r1, #16
 800624e:	0018      	movs	r0, r3
 8006250:	f001 fcf0 	bl	8007c34 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2180      	movs	r1, #128	; 0x80
 8006260:	0209      	lsls	r1, r1, #8
 8006262:	430a      	orrs	r2, r1
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	e02d      	b.n	80062c4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2241      	movs	r2, #65	; 0x41
 800626c:	2120      	movs	r1, #32
 800626e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2242      	movs	r2, #66	; 0x42
 8006274:	2100      	movs	r1, #0
 8006276:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627c:	2210      	movs	r2, #16
 800627e:	431a      	orrs	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2240      	movs	r2, #64	; 0x40
 8006288:	2100      	movs	r1, #0
 800628a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e01c      	b.n	80062ca <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4a15      	ldr	r2, [pc, #84]	; (80062e8 <HAL_I2C_Master_Receive_DMA+0x208>)
 8006294:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629a:	b2da      	uxtb	r2, r3
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	049c      	lsls	r4, r3, #18
 80062a0:	230a      	movs	r3, #10
 80062a2:	18fb      	adds	r3, r7, r3
 80062a4:	8819      	ldrh	r1, [r3, #0]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <HAL_I2C_Master_Receive_DMA+0x204>)
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	0023      	movs	r3, r4
 80062ae:	f001 fc8b 	bl	8007bc8 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2240      	movs	r2, #64	; 0x40
 80062b6:	2100      	movs	r1, #0
 80062b8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2101      	movs	r1, #1
 80062be:	0018      	movs	r0, r3
 80062c0:	f001 fcb8 	bl	8007c34 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e000      	b.n	80062ca <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80062c8:	2302      	movs	r3, #2
  }
}
 80062ca:	0018      	movs	r0, r3
 80062cc:	46bd      	mov	sp, r7
 80062ce:	b006      	add	sp, #24
 80062d0:	bdb0      	pop	{r4, r5, r7, pc}
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	ffff0000 	.word	0xffff0000
 80062d8:	08006941 	.word	0x08006941
 80062dc:	08007779 	.word	0x08007779
 80062e0:	08007819 	.word	0x08007819
 80062e4:	80002400 	.word	0x80002400
 80062e8:	08006495 	.word	0x08006495

080062ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006308:	2b00      	cmp	r3, #0
 800630a:	d005      	beq.n	8006318 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	4798      	blx	r3
  }
}
 8006318:	46c0      	nop			; (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	b004      	add	sp, #16
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	001a      	movs	r2, r3
 800633e:	2301      	movs	r3, #1
 8006340:	4013      	ands	r3, r2
 8006342:	d010      	beq.n	8006366 <HAL_I2C_ER_IRQHandler+0x46>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	09db      	lsrs	r3, r3, #7
 8006348:	001a      	movs	r2, r3
 800634a:	2301      	movs	r3, #1
 800634c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800634e:	d00a      	beq.n	8006366 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006354:	2201      	movs	r2, #1
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2280      	movs	r2, #128	; 0x80
 8006362:	0052      	lsls	r2, r2, #1
 8006364:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	0a9b      	lsrs	r3, r3, #10
 800636a:	001a      	movs	r2, r3
 800636c:	2301      	movs	r3, #1
 800636e:	4013      	ands	r3, r2
 8006370:	d010      	beq.n	8006394 <HAL_I2C_ER_IRQHandler+0x74>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	09db      	lsrs	r3, r3, #7
 8006376:	001a      	movs	r2, r3
 8006378:	2301      	movs	r3, #1
 800637a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800637c:	d00a      	beq.n	8006394 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	2208      	movs	r2, #8
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2280      	movs	r2, #128	; 0x80
 8006390:	00d2      	lsls	r2, r2, #3
 8006392:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	0a5b      	lsrs	r3, r3, #9
 8006398:	001a      	movs	r2, r3
 800639a:	2301      	movs	r3, #1
 800639c:	4013      	ands	r3, r2
 800639e:	d010      	beq.n	80063c2 <HAL_I2C_ER_IRQHandler+0xa2>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	09db      	lsrs	r3, r3, #7
 80063a4:	001a      	movs	r2, r3
 80063a6:	2301      	movs	r3, #1
 80063a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80063aa:	d00a      	beq.n	80063c2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b0:	2202      	movs	r2, #2
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2280      	movs	r2, #128	; 0x80
 80063be:	0092      	lsls	r2, r2, #2
 80063c0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	220b      	movs	r2, #11
 80063cc:	4013      	ands	r3, r2
 80063ce:	d005      	beq.n	80063dc <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	0011      	movs	r1, r2
 80063d6:	0018      	movs	r0, r3
 80063d8:	f001 f850 	bl	800747c <I2C_ITError>
  }
}
 80063dc:	46c0      	nop			; (mov r8, r8)
 80063de:	46bd      	mov	sp, r7
 80063e0:	b006      	add	sp, #24
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80063ec:	46c0      	nop			; (mov r8, r8)
 80063ee:	46bd      	mov	sp, r7
 80063f0:	b002      	add	sp, #8
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80063fc:	46c0      	nop			; (mov r8, r8)
 80063fe:	46bd      	mov	sp, r7
 8006400:	b002      	add	sp, #8
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800640c:	46c0      	nop			; (mov r8, r8)
 800640e:	46bd      	mov	sp, r7
 8006410:	b002      	add	sp, #8
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800641c:	46c0      	nop			; (mov r8, r8)
 800641e:	46bd      	mov	sp, r7
 8006420:	b002      	add	sp, #8
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	0008      	movs	r0, r1
 800642e:	0011      	movs	r1, r2
 8006430:	1cfb      	adds	r3, r7, #3
 8006432:	1c02      	adds	r2, r0, #0
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	003b      	movs	r3, r7
 8006438:	1c0a      	adds	r2, r1, #0
 800643a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800643c:	46c0      	nop			; (mov r8, r8)
 800643e:	46bd      	mov	sp, r7
 8006440:	b002      	add	sp, #8
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800644c:	46c0      	nop			; (mov r8, r8)
 800644e:	46bd      	mov	sp, r7
 8006450:	b002      	add	sp, #8
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800645c:	46c0      	nop			; (mov r8, r8)
 800645e:	46bd      	mov	sp, r7
 8006460:	b002      	add	sp, #8
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800646c:	46c0      	nop			; (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	b002      	add	sp, #8
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800647c:	46c0      	nop			; (mov r8, r8)
 800647e:	46bd      	mov	sp, r7
 8006480:	b002      	add	sp, #8
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800648c:	46c0      	nop			; (mov r8, r8)
 800648e:	46bd      	mov	sp, r7
 8006490:	b002      	add	sp, #8
 8006492:	bd80      	pop	{r7, pc}

08006494 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 8006494:	b590      	push	{r4, r7, lr}
 8006496:	b089      	sub	sp, #36	; 0x24
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2240      	movs	r2, #64	; 0x40
 80064a8:	5c9b      	ldrb	r3, [r3, r2]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <I2C_Master_ISR_IT+0x1e>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e12b      	b.n	800670a <I2C_Master_ISR_IT+0x276>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2240      	movs	r2, #64	; 0x40
 80064b6:	2101      	movs	r1, #1
 80064b8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	091b      	lsrs	r3, r3, #4
 80064be:	001a      	movs	r2, r3
 80064c0:	2301      	movs	r3, #1
 80064c2:	4013      	ands	r3, r2
 80064c4:	d014      	beq.n	80064f0 <I2C_Master_ISR_IT+0x5c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	091b      	lsrs	r3, r3, #4
 80064ca:	001a      	movs	r2, r3
 80064cc:	2301      	movs	r3, #1
 80064ce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064d0:	d00e      	beq.n	80064f0 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2210      	movs	r2, #16
 80064d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064de:	2204      	movs	r2, #4
 80064e0:	431a      	orrs	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	0018      	movs	r0, r3
 80064ea:	f001 f8d2 	bl	8007692 <I2C_Flush_TXDR>
 80064ee:	e0f5      	b.n	80066dc <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	089b      	lsrs	r3, r3, #2
 80064f4:	001a      	movs	r2, r3
 80064f6:	2301      	movs	r3, #1
 80064f8:	4013      	ands	r3, r2
 80064fa:	d023      	beq.n	8006544 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	089b      	lsrs	r3, r3, #2
 8006500:	001a      	movs	r2, r3
 8006502:	2301      	movs	r3, #1
 8006504:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006506:	d01d      	beq.n	8006544 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2204      	movs	r2, #4
 800650c:	4393      	bics	r3, r2
 800650e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006542:	e0cb      	b.n	80066dc <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	085b      	lsrs	r3, r3, #1
 8006548:	001a      	movs	r2, r3
 800654a:	2301      	movs	r3, #1
 800654c:	4013      	ands	r3, r2
 800654e:	d01e      	beq.n	800658e <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	001a      	movs	r2, r3
 8006556:	2301      	movs	r3, #1
 8006558:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800655a:	d018      	beq.n	800658e <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	781a      	ldrb	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800658c:	e0a6      	b.n	80066dc <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	09db      	lsrs	r3, r3, #7
 8006592:	001a      	movs	r2, r3
 8006594:	2301      	movs	r3, #1
 8006596:	4013      	ands	r3, r2
 8006598:	d100      	bne.n	800659c <I2C_Master_ISR_IT+0x108>
 800659a:	e06b      	b.n	8006674 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	099b      	lsrs	r3, r3, #6
 80065a0:	001a      	movs	r2, r3
 80065a2:	2301      	movs	r3, #1
 80065a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065a6:	d065      	beq.n	8006674 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d04a      	beq.n	8006648 <I2C_Master_ISR_IT+0x1b4>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d146      	bne.n	8006648 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	2112      	movs	r1, #18
 80065c4:	187b      	adds	r3, r7, r1
 80065c6:	0592      	lsls	r2, r2, #22
 80065c8:	0d92      	lsrs	r2, r2, #22
 80065ca:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2bff      	cmp	r3, #255	; 0xff
 80065d4:	d910      	bls.n	80065f8 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	22ff      	movs	r2, #255	; 0xff
 80065da:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	2380      	movs	r3, #128	; 0x80
 80065e4:	045c      	lsls	r4, r3, #17
 80065e6:	187b      	adds	r3, r7, r1
 80065e8:	8819      	ldrh	r1, [r3, #0]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	2300      	movs	r3, #0
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	0023      	movs	r3, r4
 80065f2:	f001 fae9 	bl	8007bc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065f6:	e03c      	b.n	8006672 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	4a43      	ldr	r2, [pc, #268]	; (8006714 <I2C_Master_ISR_IT+0x280>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00e      	beq.n	800662a <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006610:	b2da      	uxtb	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006616:	2312      	movs	r3, #18
 8006618:	18fb      	adds	r3, r7, r3
 800661a:	8819      	ldrh	r1, [r3, #0]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	2300      	movs	r3, #0
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	0023      	movs	r3, r4
 8006624:	f001 fad0 	bl	8007bc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006628:	e023      	b.n	8006672 <I2C_Master_ISR_IT+0x1de>
                                hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662e:	b2da      	uxtb	r2, r3
 8006630:	2380      	movs	r3, #128	; 0x80
 8006632:	049c      	lsls	r4, r3, #18
 8006634:	2312      	movs	r3, #18
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	8819      	ldrh	r1, [r3, #0]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	2300      	movs	r3, #0
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	0023      	movs	r3, r4
 8006642:	f001 fac1 	bl	8007bc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006646:	e014      	b.n	8006672 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	2380      	movs	r3, #128	; 0x80
 8006650:	049b      	lsls	r3, r3, #18
 8006652:	401a      	ands	r2, r3
 8006654:	2380      	movs	r3, #128	; 0x80
 8006656:	049b      	lsls	r3, r3, #18
 8006658:	429a      	cmp	r2, r3
 800665a:	d004      	beq.n	8006666 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	0018      	movs	r0, r3
 8006660:	f000 fc14 	bl	8006e8c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006664:	e03a      	b.n	80066dc <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2140      	movs	r1, #64	; 0x40
 800666a:	0018      	movs	r0, r3
 800666c:	f000 ff06 	bl	800747c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006670:	e034      	b.n	80066dc <I2C_Master_ISR_IT+0x248>
 8006672:	e033      	b.n	80066dc <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	099b      	lsrs	r3, r3, #6
 8006678:	001a      	movs	r2, r3
 800667a:	2301      	movs	r3, #1
 800667c:	4013      	ands	r3, r2
 800667e:	d02d      	beq.n	80066dc <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	099b      	lsrs	r3, r3, #6
 8006684:	001a      	movs	r2, r3
 8006686:	2301      	movs	r3, #1
 8006688:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800668a:	d027      	beq.n	80066dc <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d11d      	bne.n	80066d2 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	2380      	movs	r3, #128	; 0x80
 800669e:	049b      	lsls	r3, r3, #18
 80066a0:	401a      	ands	r2, r3
 80066a2:	2380      	movs	r3, #128	; 0x80
 80066a4:	049b      	lsls	r3, r3, #18
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d018      	beq.n	80066dc <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ae:	4a19      	ldr	r2, [pc, #100]	; (8006714 <I2C_Master_ISR_IT+0x280>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d109      	bne.n	80066c8 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2180      	movs	r1, #128	; 0x80
 80066c0:	01c9      	lsls	r1, r1, #7
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
 80066c6:	e009      	b.n	80066dc <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	0018      	movs	r0, r3
 80066cc:	f000 fbde 	bl	8006e8c <I2C_ITMasterSeqCplt>
 80066d0:	e004      	b.n	80066dc <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2140      	movs	r1, #64	; 0x40
 80066d6:	0018      	movs	r0, r3
 80066d8:	f000 fed0 	bl	800747c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	001a      	movs	r2, r3
 80066e2:	2301      	movs	r3, #1
 80066e4:	4013      	ands	r3, r2
 80066e6:	d00b      	beq.n	8006700 <I2C_Master_ISR_IT+0x26c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	001a      	movs	r2, r3
 80066ee:	2301      	movs	r3, #1
 80066f0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066f2:	d005      	beq.n	8006700 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	0011      	movs	r1, r2
 80066fa:	0018      	movs	r0, r3
 80066fc:	f000 fc6e 	bl	8006fdc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2240      	movs	r2, #64	; 0x40
 8006704:	2100      	movs	r1, #0
 8006706:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	0018      	movs	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	b007      	add	sp, #28
 8006710:	bd90      	pop	{r4, r7, pc}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	ffff0000 	.word	0xffff0000

08006718 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2240      	movs	r2, #64	; 0x40
 8006732:	5c9b      	ldrb	r3, [r3, r2]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <I2C_Slave_ISR_IT+0x24>
 8006738:	2302      	movs	r3, #2
 800673a:	e0fa      	b.n	8006932 <I2C_Slave_ISR_IT+0x21a>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	2101      	movs	r1, #1
 8006742:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	001a      	movs	r2, r3
 800674a:	2301      	movs	r3, #1
 800674c:	4013      	ands	r3, r2
 800674e:	d00b      	beq.n	8006768 <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	001a      	movs	r2, r3
 8006756:	2301      	movs	r3, #1
 8006758:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800675a:	d005      	beq.n	8006768 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	0011      	movs	r1, r2
 8006762:	0018      	movs	r0, r3
 8006764:	f000 fd0c 	bl	8007180 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	091b      	lsrs	r3, r3, #4
 800676c:	001a      	movs	r2, r3
 800676e:	2301      	movs	r3, #1
 8006770:	4013      	ands	r3, r2
 8006772:	d054      	beq.n	800681e <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	091b      	lsrs	r3, r3, #4
 8006778:	001a      	movs	r2, r3
 800677a:	2301      	movs	r3, #1
 800677c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800677e:	d04e      	beq.n	800681e <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d12d      	bne.n	80067e6 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2241      	movs	r2, #65	; 0x41
 800678e:	5c9b      	ldrb	r3, [r3, r2]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b28      	cmp	r3, #40	; 0x28
 8006794:	d10b      	bne.n	80067ae <I2C_Slave_ISR_IT+0x96>
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	2380      	movs	r3, #128	; 0x80
 800679a:	049b      	lsls	r3, r3, #18
 800679c:	429a      	cmp	r2, r3
 800679e:	d106      	bne.n	80067ae <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	0011      	movs	r1, r2
 80067a6:	0018      	movs	r0, r3
 80067a8:	f000 fe0e 	bl	80073c8 <I2C_ITListenCplt>
 80067ac:	e036      	b.n	800681c <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2241      	movs	r2, #65	; 0x41
 80067b2:	5c9b      	ldrb	r3, [r3, r2]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b29      	cmp	r3, #41	; 0x29
 80067b8:	d110      	bne.n	80067dc <I2C_Slave_ISR_IT+0xc4>
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	4a5f      	ldr	r2, [pc, #380]	; (800693c <I2C_Slave_ISR_IT+0x224>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00c      	beq.n	80067dc <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2210      	movs	r2, #16
 80067c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	0018      	movs	r0, r3
 80067ce:	f000 ff60 	bl	8007692 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	0018      	movs	r0, r3
 80067d6:	f000 fb9b 	bl	8006f10 <I2C_ITSlaveSeqCplt>
 80067da:	e01f      	b.n	800681c <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2210      	movs	r2, #16
 80067e2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80067e4:	e09d      	b.n	8006922 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2210      	movs	r2, #16
 80067ec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f2:	2204      	movs	r2, #4
 80067f4:	431a      	orrs	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <I2C_Slave_ISR_IT+0xf4>
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	2380      	movs	r3, #128	; 0x80
 8006804:	045b      	lsls	r3, r3, #17
 8006806:	429a      	cmp	r2, r3
 8006808:	d000      	beq.n	800680c <I2C_Slave_ISR_IT+0xf4>
 800680a:	e08a      	b.n	8006922 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	0011      	movs	r1, r2
 8006814:	0018      	movs	r0, r3
 8006816:	f000 fe31 	bl	800747c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800681a:	e082      	b.n	8006922 <I2C_Slave_ISR_IT+0x20a>
 800681c:	e081      	b.n	8006922 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	089b      	lsrs	r3, r3, #2
 8006822:	001a      	movs	r2, r3
 8006824:	2301      	movs	r3, #1
 8006826:	4013      	ands	r3, r2
 8006828:	d031      	beq.n	800688e <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	089b      	lsrs	r3, r3, #2
 800682e:	001a      	movs	r2, r3
 8006830:	2301      	movs	r3, #1
 8006832:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006834:	d02b      	beq.n	800688e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d018      	beq.n	8006872 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685c:	3b01      	subs	r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d154      	bne.n	8006926 <I2C_Slave_ISR_IT+0x20e>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	4a2f      	ldr	r2, [pc, #188]	; (800693c <I2C_Slave_ISR_IT+0x224>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d050      	beq.n	8006926 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	0018      	movs	r0, r3
 8006888:	f000 fb42 	bl	8006f10 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800688c:	e04b      	b.n	8006926 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	08db      	lsrs	r3, r3, #3
 8006892:	001a      	movs	r2, r3
 8006894:	2301      	movs	r3, #1
 8006896:	4013      	ands	r3, r2
 8006898:	d00c      	beq.n	80068b4 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	08db      	lsrs	r3, r3, #3
 800689e:	001a      	movs	r2, r3
 80068a0:	2301      	movs	r3, #1
 80068a2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068a4:	d006      	beq.n	80068b4 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	0011      	movs	r1, r2
 80068ac:	0018      	movs	r0, r3
 80068ae:	f000 fa49 	bl	8006d44 <I2C_ITAddrCplt>
 80068b2:	e039      	b.n	8006928 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	001a      	movs	r2, r3
 80068ba:	2301      	movs	r3, #1
 80068bc:	4013      	ands	r3, r2
 80068be:	d033      	beq.n	8006928 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	001a      	movs	r2, r3
 80068c6:	2301      	movs	r3, #1
 80068c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068ca:	d02d      	beq.n	8006928 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d018      	beq.n	8006908 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	781a      	ldrb	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	851a      	strh	r2, [r3, #40]	; 0x28
 8006906:	e00f      	b.n	8006928 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	2380      	movs	r3, #128	; 0x80
 800690c:	045b      	lsls	r3, r3, #17
 800690e:	429a      	cmp	r2, r3
 8006910:	d002      	beq.n	8006918 <I2C_Slave_ISR_IT+0x200>
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d107      	bne.n	8006928 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	0018      	movs	r0, r3
 800691c:	f000 faf8 	bl	8006f10 <I2C_ITSlaveSeqCplt>
 8006920:	e002      	b.n	8006928 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	e000      	b.n	8006928 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006926:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2240      	movs	r2, #64	; 0x40
 800692c:	2100      	movs	r1, #0
 800692e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	0018      	movs	r0, r3
 8006934:	46bd      	mov	sp, r7
 8006936:	b006      	add	sp, #24
 8006938:	bd80      	pop	{r7, pc}
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	ffff0000 	.word	0xffff0000

08006940 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                               uint32_t ITSources)
{
 8006940:	b590      	push	{r4, r7, lr}
 8006942:	b089      	sub	sp, #36	; 0x24
 8006944:	af02      	add	r7, sp, #8
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2240      	movs	r2, #64	; 0x40
 8006950:	5c9b      	ldrb	r3, [r3, r2]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <I2C_Master_ISR_DMA+0x1a>
 8006956:	2302      	movs	r3, #2
 8006958:	e0f7      	b.n	8006b4a <I2C_Master_ISR_DMA+0x20a>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2240      	movs	r2, #64	; 0x40
 800695e:	2101      	movs	r1, #1
 8006960:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	091b      	lsrs	r3, r3, #4
 8006966:	001a      	movs	r2, r3
 8006968:	2301      	movs	r3, #1
 800696a:	4013      	ands	r3, r2
 800696c:	d019      	beq.n	80069a2 <I2C_Master_ISR_DMA+0x62>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	091b      	lsrs	r3, r3, #4
 8006972:	001a      	movs	r2, r3
 8006974:	2301      	movs	r3, #1
 8006976:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006978:	d013      	beq.n	80069a2 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2210      	movs	r2, #16
 8006980:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006986:	2204      	movs	r2, #4
 8006988:	431a      	orrs	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2120      	movs	r1, #32
 8006992:	0018      	movs	r0, r3
 8006994:	f001 f94e 	bl	8007c34 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	0018      	movs	r0, r3
 800699c:	f000 fe79 	bl	8007692 <I2C_Flush_TXDR>
 80069a0:	e0ce      	b.n	8006b40 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	09db      	lsrs	r3, r3, #7
 80069a6:	001a      	movs	r2, r3
 80069a8:	2301      	movs	r3, #1
 80069aa:	4013      	ands	r3, r2
 80069ac:	d100      	bne.n	80069b0 <I2C_Master_ISR_DMA+0x70>
 80069ae:	e07e      	b.n	8006aae <I2C_Master_ISR_DMA+0x16e>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	099b      	lsrs	r3, r3, #6
 80069b4:	001a      	movs	r2, r3
 80069b6:	2301      	movs	r3, #1
 80069b8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80069ba:	d100      	bne.n	80069be <I2C_Master_ISR_DMA+0x7e>
 80069bc:	e077      	b.n	8006aae <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2140      	movs	r1, #64	; 0x40
 80069ca:	438a      	bics	r2, r1
 80069cc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d055      	beq.n	8006a84 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	2312      	movs	r3, #18
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	0592      	lsls	r2, r2, #22
 80069e6:	0d92      	lsrs	r2, r2, #22
 80069e8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2bff      	cmp	r3, #255	; 0xff
 80069f2:	d906      	bls.n	8006a02 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	22ff      	movs	r2, #255	; 0xff
 80069f8:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80069fa:	2380      	movs	r3, #128	; 0x80
 80069fc:	045b      	lsls	r3, r3, #17
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	e010      	b.n	8006a24 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	4a50      	ldr	r2, [pc, #320]	; (8006b54 <I2C_Master_ISR_DMA+0x214>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	e002      	b.n	8006a24 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006a1e:	2380      	movs	r3, #128	; 0x80
 8006a20:	049b      	lsls	r3, r3, #18
 8006a22:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	697c      	ldr	r4, [r7, #20]
 8006a2c:	2312      	movs	r3, #18
 8006a2e:	18fb      	adds	r3, r7, r3
 8006a30:	8819      	ldrh	r1, [r3, #0]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	2300      	movs	r3, #0
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	0023      	movs	r3, r4
 8006a3a:	f001 f8c5 	bl	8007bc8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2241      	movs	r2, #65	; 0x41
 8006a54:	5c9b      	ldrb	r3, [r3, r2]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b22      	cmp	r3, #34	; 0x22
 8006a5a:	d109      	bne.n	8006a70 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2180      	movs	r1, #128	; 0x80
 8006a68:	0209      	lsls	r1, r1, #8
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a6e:	e067      	b.n	8006b40 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2180      	movs	r1, #128	; 0x80
 8006a7c:	01c9      	lsls	r1, r1, #7
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a82:	e05d      	b.n	8006b40 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	2380      	movs	r3, #128	; 0x80
 8006a8c:	049b      	lsls	r3, r3, #18
 8006a8e:	401a      	ands	r2, r3
 8006a90:	2380      	movs	r3, #128	; 0x80
 8006a92:	049b      	lsls	r3, r3, #18
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d004      	beq.n	8006aa2 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f000 f9f6 	bl	8006e8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006aa0:	e04e      	b.n	8006b40 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2140      	movs	r1, #64	; 0x40
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f000 fce8 	bl	800747c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006aac:	e048      	b.n	8006b40 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	099b      	lsrs	r3, r3, #6
 8006ab2:	001a      	movs	r2, r3
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	d02e      	beq.n	8006b18 <I2C_Master_ISR_DMA+0x1d8>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	099b      	lsrs	r3, r3, #6
 8006abe:	001a      	movs	r2, r3
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006ac4:	d028      	beq.n	8006b18 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d11d      	bne.n	8006b0c <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	2380      	movs	r3, #128	; 0x80
 8006ad8:	049b      	lsls	r3, r3, #18
 8006ada:	401a      	ands	r2, r3
 8006adc:	2380      	movs	r3, #128	; 0x80
 8006ade:	049b      	lsls	r3, r3, #18
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d02c      	beq.n	8006b3e <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	4a1a      	ldr	r2, [pc, #104]	; (8006b54 <I2C_Master_ISR_DMA+0x214>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d109      	bne.n	8006b02 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2180      	movs	r1, #128	; 0x80
 8006afa:	01c9      	lsls	r1, r1, #7
 8006afc:	430a      	orrs	r2, r1
 8006afe:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006b00:	e01d      	b.n	8006b3e <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	0018      	movs	r0, r3
 8006b06:	f000 f9c1 	bl	8006e8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006b0a:	e018      	b.n	8006b3e <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2140      	movs	r1, #64	; 0x40
 8006b10:	0018      	movs	r0, r3
 8006b12:	f000 fcb3 	bl	800747c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006b16:	e012      	b.n	8006b3e <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	095b      	lsrs	r3, r3, #5
 8006b1c:	001a      	movs	r2, r3
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4013      	ands	r3, r2
 8006b22:	d00d      	beq.n	8006b40 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	001a      	movs	r2, r3
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b2e:	d007      	beq.n	8006b40 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	0011      	movs	r1, r2
 8006b36:	0018      	movs	r0, r3
 8006b38:	f000 fa50 	bl	8006fdc <I2C_ITMasterCplt>
 8006b3c:	e000      	b.n	8006b40 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8006b3e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2240      	movs	r2, #64	; 0x40
 8006b44:	2100      	movs	r1, #0
 8006b46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	b007      	add	sp, #28
 8006b50:	bd90      	pop	{r4, r7, pc}
 8006b52:	46c0      	nop			; (mov r8, r8)
 8006b54:	ffff0000 	.word	0xffff0000

08006b58 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2240      	movs	r2, #64	; 0x40
 8006b72:	5c9b      	ldrb	r3, [r3, r2]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <I2C_Slave_ISR_DMA+0x24>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e0dd      	b.n	8006d38 <I2C_Slave_ISR_DMA+0x1e0>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2240      	movs	r2, #64	; 0x40
 8006b80:	2101      	movs	r1, #1
 8006b82:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	001a      	movs	r2, r3
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	d00b      	beq.n	8006ba8 <I2C_Slave_ISR_DMA+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	001a      	movs	r2, r3
 8006b96:	2301      	movs	r3, #1
 8006b98:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b9a:	d005      	beq.n	8006ba8 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	0011      	movs	r1, r2
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f000 faec 	bl	8007180 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	091b      	lsrs	r3, r3, #4
 8006bac:	001a      	movs	r2, r3
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	d100      	bne.n	8006bb6 <I2C_Slave_ISR_DMA+0x5e>
 8006bb4:	e0a9      	b.n	8006d0a <I2C_Slave_ISR_DMA+0x1b2>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	091b      	lsrs	r3, r3, #4
 8006bba:	001a      	movs	r2, r3
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006bc0:	d100      	bne.n	8006bc4 <I2C_Slave_ISR_DMA+0x6c>
 8006bc2:	e0a2      	b.n	8006d0a <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	0b9b      	lsrs	r3, r3, #14
 8006bc8:	001a      	movs	r2, r3
 8006bca:	2301      	movs	r3, #1
 8006bcc:	4013      	ands	r3, r2
 8006bce:	d106      	bne.n	8006bde <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	0bdb      	lsrs	r3, r3, #15
 8006bd4:	001a      	movs	r2, r3
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006bda:	d100      	bne.n	8006bde <I2C_Slave_ISR_DMA+0x86>
 8006bdc:	e08e      	b.n	8006cfc <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00d      	beq.n	8006c02 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	0bdb      	lsrs	r3, r3, #15
 8006bea:	001a      	movs	r2, r3
 8006bec:	2301      	movs	r3, #1
 8006bee:	4013      	ands	r3, r2
 8006bf0:	d007      	beq.n	8006c02 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00d      	beq.n	8006c26 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	0b9b      	lsrs	r3, r3, #14
 8006c0e:	001a      	movs	r2, r3
 8006c10:	2301      	movs	r3, #1
 8006c12:	4013      	ands	r3, r2
 8006c14:	d007      	beq.n	8006c26 <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8006c22:	2301      	movs	r3, #1
 8006c24:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d12d      	bne.n	8006c88 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2241      	movs	r2, #65	; 0x41
 8006c30:	5c9b      	ldrb	r3, [r3, r2]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b28      	cmp	r3, #40	; 0x28
 8006c36:	d10b      	bne.n	8006c50 <I2C_Slave_ISR_DMA+0xf8>
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	2380      	movs	r3, #128	; 0x80
 8006c3c:	049b      	lsls	r3, r3, #18
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d106      	bne.n	8006c50 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	0011      	movs	r1, r2
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f000 fbbd 	bl	80073c8 <I2C_ITListenCplt>
 8006c4e:	e054      	b.n	8006cfa <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2241      	movs	r2, #65	; 0x41
 8006c54:	5c9b      	ldrb	r3, [r3, r2]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b29      	cmp	r3, #41	; 0x29
 8006c5a:	d110      	bne.n	8006c7e <I2C_Slave_ISR_DMA+0x126>
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	4a38      	ldr	r2, [pc, #224]	; (8006d40 <I2C_Slave_ISR_DMA+0x1e8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00c      	beq.n	8006c7e <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2210      	movs	r2, #16
 8006c6a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f000 fd0f 	bl	8007692 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	0018      	movs	r0, r3
 8006c78:	f000 f94a 	bl	8006f10 <I2C_ITSlaveSeqCplt>
 8006c7c:	e03d      	b.n	8006cfa <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2210      	movs	r2, #16
 8006c84:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006c86:	e03e      	b.n	8006d06 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2210      	movs	r2, #16
 8006c8e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c94:	2204      	movs	r2, #4
 8006c96:	431a      	orrs	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006c9c:	2317      	movs	r3, #23
 8006c9e:	18fb      	adds	r3, r7, r3
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	2141      	movs	r1, #65	; 0x41
 8006ca4:	5c52      	ldrb	r2, [r2, r1]
 8006ca6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d004      	beq.n	8006cb8 <I2C_Slave_ISR_DMA+0x160>
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	2380      	movs	r3, #128	; 0x80
 8006cb2:	045b      	lsls	r3, r3, #17
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d126      	bne.n	8006d06 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cb8:	2217      	movs	r2, #23
 8006cba:	18bb      	adds	r3, r7, r2
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	2b21      	cmp	r3, #33	; 0x21
 8006cc0:	d003      	beq.n	8006cca <I2C_Slave_ISR_DMA+0x172>
 8006cc2:	18bb      	adds	r3, r7, r2
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b29      	cmp	r3, #41	; 0x29
 8006cc8:	d103      	bne.n	8006cd2 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2221      	movs	r2, #33	; 0x21
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
 8006cd0:	e00b      	b.n	8006cea <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cd2:	2217      	movs	r2, #23
 8006cd4:	18bb      	adds	r3, r7, r2
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b22      	cmp	r3, #34	; 0x22
 8006cda:	d003      	beq.n	8006ce4 <I2C_Slave_ISR_DMA+0x18c>
 8006cdc:	18bb      	adds	r3, r7, r2
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce2:	d102      	bne.n	8006cea <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2222      	movs	r2, #34	; 0x22
 8006ce8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	0011      	movs	r1, r2
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f000 fbc2 	bl	800747c <I2C_ITError>
      if (treatdmanack == 1U)
 8006cf8:	e005      	b.n	8006d06 <I2C_Slave_ISR_DMA+0x1ae>
 8006cfa:	e004      	b.n	8006d06 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2210      	movs	r2, #16
 8006d02:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006d04:	e013      	b.n	8006d2e <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8006d06:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006d08:	e011      	b.n	8006d2e <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	08db      	lsrs	r3, r3, #3
 8006d0e:	001a      	movs	r2, r3
 8006d10:	2301      	movs	r3, #1
 8006d12:	4013      	ands	r3, r2
 8006d14:	d00b      	beq.n	8006d2e <I2C_Slave_ISR_DMA+0x1d6>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	08db      	lsrs	r3, r3, #3
 8006d1a:	001a      	movs	r2, r3
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006d20:	d005      	beq.n	8006d2e <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	0011      	movs	r1, r2
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f000 f80b 	bl	8006d44 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2240      	movs	r2, #64	; 0x40
 8006d32:	2100      	movs	r1, #0
 8006d34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	0018      	movs	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b008      	add	sp, #32
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	ffff0000 	.word	0xffff0000

08006d44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d44:	b5b0      	push	{r4, r5, r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2241      	movs	r2, #65	; 0x41
 8006d52:	5c9b      	ldrb	r3, [r3, r2]
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	001a      	movs	r2, r3
 8006d58:	2328      	movs	r3, #40	; 0x28
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	2b28      	cmp	r3, #40	; 0x28
 8006d5e:	d000      	beq.n	8006d62 <I2C_ITAddrCplt+0x1e>
 8006d60:	e088      	b.n	8006e74 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	0c1b      	lsrs	r3, r3, #16
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	250f      	movs	r5, #15
 8006d6e:	197b      	adds	r3, r7, r5
 8006d70:	2101      	movs	r1, #1
 8006d72:	400a      	ands	r2, r1
 8006d74:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	0c1b      	lsrs	r3, r3, #16
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	200c      	movs	r0, #12
 8006d82:	183b      	adds	r3, r7, r0
 8006d84:	21fe      	movs	r1, #254	; 0xfe
 8006d86:	400a      	ands	r2, r1
 8006d88:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	240a      	movs	r4, #10
 8006d94:	193b      	adds	r3, r7, r4
 8006d96:	0592      	lsls	r2, r2, #22
 8006d98:	0d92      	lsrs	r2, r2, #22
 8006d9a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	2308      	movs	r3, #8
 8006da6:	18fb      	adds	r3, r7, r3
 8006da8:	21fe      	movs	r1, #254	; 0xfe
 8006daa:	400a      	ands	r2, r1
 8006dac:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d148      	bne.n	8006e48 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006db6:	0021      	movs	r1, r4
 8006db8:	187b      	adds	r3, r7, r1
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	09db      	lsrs	r3, r3, #7
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	183b      	adds	r3, r7, r0
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	4053      	eors	r3, r2
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	001a      	movs	r2, r3
 8006dca:	2306      	movs	r3, #6
 8006dcc:	4013      	ands	r3, r2
 8006dce:	d120      	bne.n	8006e12 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006dd0:	183b      	adds	r3, r7, r0
 8006dd2:	187a      	adds	r2, r7, r1
 8006dd4:	8812      	ldrh	r2, [r2, #0]
 8006dd6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d14c      	bne.n	8006e84 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2208      	movs	r2, #8
 8006df6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2240      	movs	r2, #64	; 0x40
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e00:	183b      	adds	r3, r7, r0
 8006e02:	881a      	ldrh	r2, [r3, #0]
 8006e04:	197b      	adds	r3, r7, r5
 8006e06:	7819      	ldrb	r1, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f7ff fb0a 	bl	8006424 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006e10:	e038      	b.n	8006e84 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006e12:	240c      	movs	r4, #12
 8006e14:	193b      	adds	r3, r7, r4
 8006e16:	2208      	movs	r2, #8
 8006e18:	18ba      	adds	r2, r7, r2
 8006e1a:	8812      	ldrh	r2, [r2, #0]
 8006e1c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006e1e:	2380      	movs	r3, #128	; 0x80
 8006e20:	021a      	lsls	r2, r3, #8
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	0011      	movs	r1, r2
 8006e26:	0018      	movs	r0, r3
 8006e28:	f000 ff6c 	bl	8007d04 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2240      	movs	r2, #64	; 0x40
 8006e30:	2100      	movs	r1, #0
 8006e32:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e34:	193b      	adds	r3, r7, r4
 8006e36:	881a      	ldrh	r2, [r3, #0]
 8006e38:	230f      	movs	r3, #15
 8006e3a:	18fb      	adds	r3, r7, r3
 8006e3c:	7819      	ldrb	r1, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	0018      	movs	r0, r3
 8006e42:	f7ff faef 	bl	8006424 <HAL_I2C_AddrCallback>
}
 8006e46:	e01d      	b.n	8006e84 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006e48:	2380      	movs	r3, #128	; 0x80
 8006e4a:	021a      	lsls	r2, r3, #8
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	0011      	movs	r1, r2
 8006e50:	0018      	movs	r0, r3
 8006e52:	f000 ff57 	bl	8007d04 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2240      	movs	r2, #64	; 0x40
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e5e:	230c      	movs	r3, #12
 8006e60:	18fb      	adds	r3, r7, r3
 8006e62:	881a      	ldrh	r2, [r3, #0]
 8006e64:	230f      	movs	r3, #15
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	7819      	ldrb	r1, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f7ff fad9 	bl	8006424 <HAL_I2C_AddrCallback>
}
 8006e72:	e007      	b.n	8006e84 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2208      	movs	r2, #8
 8006e7a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2240      	movs	r2, #64	; 0x40
 8006e80:	2100      	movs	r1, #0
 8006e82:	5499      	strb	r1, [r3, r2]
}
 8006e84:	46c0      	nop			; (mov r8, r8)
 8006e86:	46bd      	mov	sp, r7
 8006e88:	b004      	add	sp, #16
 8006e8a:	bdb0      	pop	{r4, r5, r7, pc}

08006e8c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2242      	movs	r2, #66	; 0x42
 8006e98:	2100      	movs	r1, #0
 8006e9a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2241      	movs	r2, #65	; 0x41
 8006ea0:	5c9b      	ldrb	r3, [r3, r2]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b21      	cmp	r3, #33	; 0x21
 8006ea6:	d117      	bne.n	8006ed8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2241      	movs	r2, #65	; 0x41
 8006eac:	2120      	movs	r1, #32
 8006eae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2211      	movs	r2, #17
 8006eb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f000 ff1f 	bl	8007d04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2240      	movs	r2, #64	; 0x40
 8006eca:	2100      	movs	r1, #0
 8006ecc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f7ff fa87 	bl	80063e4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ed6:	e016      	b.n	8006f06 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2241      	movs	r2, #65	; 0x41
 8006edc:	2120      	movs	r1, #32
 8006ede:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2212      	movs	r2, #18
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2102      	movs	r1, #2
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	f000 ff07 	bl	8007d04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2240      	movs	r2, #64	; 0x40
 8006efa:	2100      	movs	r1, #0
 8006efc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7ff fa77 	bl	80063f4 <HAL_I2C_MasterRxCpltCallback>
}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	b002      	add	sp, #8
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2242      	movs	r2, #66	; 0x42
 8006f24:	2100      	movs	r1, #0
 8006f26:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	0b9b      	lsrs	r3, r3, #14
 8006f2c:	001a      	movs	r2, r3
 8006f2e:	2301      	movs	r3, #1
 8006f30:	4013      	ands	r3, r2
 8006f32:	d008      	beq.n	8006f46 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4925      	ldr	r1, [pc, #148]	; (8006fd4 <I2C_ITSlaveSeqCplt+0xc4>)
 8006f40:	400a      	ands	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e00d      	b.n	8006f62 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	0bdb      	lsrs	r3, r3, #15
 8006f4a:	001a      	movs	r2, r3
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4013      	ands	r3, r2
 8006f50:	d007      	beq.n	8006f62 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	491e      	ldr	r1, [pc, #120]	; (8006fd8 <I2C_ITSlaveSeqCplt+0xc8>)
 8006f5e:	400a      	ands	r2, r1
 8006f60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2241      	movs	r2, #65	; 0x41
 8006f66:	5c9b      	ldrb	r3, [r3, r2]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b29      	cmp	r3, #41	; 0x29
 8006f6c:	d114      	bne.n	8006f98 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2241      	movs	r2, #65	; 0x41
 8006f72:	2128      	movs	r1, #40	; 0x28
 8006f74:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2221      	movs	r2, #33	; 0x21
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2101      	movs	r1, #1
 8006f80:	0018      	movs	r0, r3
 8006f82:	f000 febf 	bl	8007d04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2240      	movs	r2, #64	; 0x40
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	0018      	movs	r0, r3
 8006f92:	f7ff fa37 	bl	8006404 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f96:	e019      	b.n	8006fcc <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2241      	movs	r2, #65	; 0x41
 8006f9c:	5c9b      	ldrb	r3, [r3, r2]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fa2:	d113      	bne.n	8006fcc <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2241      	movs	r2, #65	; 0x41
 8006fa8:	2128      	movs	r1, #40	; 0x28
 8006faa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2222      	movs	r2, #34	; 0x22
 8006fb0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2102      	movs	r1, #2
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f000 fea4 	bl	8007d04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2240      	movs	r2, #64	; 0x40
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f7ff fa24 	bl	8006414 <HAL_I2C_SlaveRxCpltCallback>
}
 8006fcc:	46c0      	nop			; (mov r8, r8)
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	b004      	add	sp, #16
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	ffffbfff 	.word	0xffffbfff
 8006fd8:	ffff7fff 	.word	0xffff7fff

08006fdc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2241      	movs	r2, #65	; 0x41
 8006ff6:	5c9b      	ldrb	r3, [r3, r2]
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b21      	cmp	r3, #33	; 0x21
 8006ffc:	d108      	bne.n	8007010 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2101      	movs	r1, #1
 8007002:	0018      	movs	r0, r3
 8007004:	f000 fe7e 	bl	8007d04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2211      	movs	r2, #17
 800700c:	631a      	str	r2, [r3, #48]	; 0x30
 800700e:	e00d      	b.n	800702c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2241      	movs	r2, #65	; 0x41
 8007014:	5c9b      	ldrb	r3, [r3, r2]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b22      	cmp	r3, #34	; 0x22
 800701a:	d107      	bne.n	800702c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2102      	movs	r1, #2
 8007020:	0018      	movs	r0, r3
 8007022:	f000 fe6f 	bl	8007d04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2212      	movs	r2, #18
 800702a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4950      	ldr	r1, [pc, #320]	; (8007178 <I2C_ITMasterCplt+0x19c>)
 8007038:	400a      	ands	r2, r1
 800703a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a4d      	ldr	r2, [pc, #308]	; (800717c <I2C_ITMasterCplt+0x1a0>)
 8007046:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	091b      	lsrs	r3, r3, #4
 800704c:	001a      	movs	r2, r3
 800704e:	2301      	movs	r3, #1
 8007050:	4013      	ands	r3, r2
 8007052:	d009      	beq.n	8007068 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2210      	movs	r2, #16
 800705a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007060:	2204      	movs	r2, #4
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2241      	movs	r2, #65	; 0x41
 800706c:	5c9b      	ldrb	r3, [r3, r2]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b60      	cmp	r3, #96	; 0x60
 8007072:	d10b      	bne.n	800708c <I2C_ITMasterCplt+0xb0>
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	089b      	lsrs	r3, r3, #2
 8007078:	001a      	movs	r2, r3
 800707a:	2301      	movs	r3, #1
 800707c:	4013      	ands	r3, r2
 800707e:	d005      	beq.n	800708c <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	b2db      	uxtb	r3, r3
 8007088:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800708a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	0018      	movs	r0, r3
 8007090:	f000 faff 	bl	8007692 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007098:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2241      	movs	r2, #65	; 0x41
 800709e:	5c9b      	ldrb	r3, [r3, r2]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b60      	cmp	r3, #96	; 0x60
 80070a4:	d002      	beq.n	80070ac <I2C_ITMasterCplt+0xd0>
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	0011      	movs	r1, r2
 80070b4:	0018      	movs	r0, r3
 80070b6:	f000 f9e1 	bl	800747c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80070ba:	e058      	b.n	800716e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2241      	movs	r2, #65	; 0x41
 80070c0:	5c9b      	ldrb	r3, [r3, r2]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b21      	cmp	r3, #33	; 0x21
 80070c6:	d126      	bne.n	8007116 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2241      	movs	r2, #65	; 0x41
 80070cc:	2120      	movs	r1, #32
 80070ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2242      	movs	r2, #66	; 0x42
 80070da:	5c9b      	ldrb	r3, [r3, r2]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b40      	cmp	r3, #64	; 0x40
 80070e0:	d10c      	bne.n	80070fc <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2242      	movs	r2, #66	; 0x42
 80070e6:	2100      	movs	r1, #0
 80070e8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2240      	movs	r2, #64	; 0x40
 80070ee:	2100      	movs	r1, #0
 80070f0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	0018      	movs	r0, r3
 80070f6:	f7ff f9ad 	bl	8006454 <HAL_I2C_MemTxCpltCallback>
}
 80070fa:	e038      	b.n	800716e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2242      	movs	r2, #66	; 0x42
 8007100:	2100      	movs	r1, #0
 8007102:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2240      	movs	r2, #64	; 0x40
 8007108:	2100      	movs	r1, #0
 800710a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	0018      	movs	r0, r3
 8007110:	f7ff f968 	bl	80063e4 <HAL_I2C_MasterTxCpltCallback>
}
 8007114:	e02b      	b.n	800716e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2241      	movs	r2, #65	; 0x41
 800711a:	5c9b      	ldrb	r3, [r3, r2]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b22      	cmp	r3, #34	; 0x22
 8007120:	d125      	bne.n	800716e <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2241      	movs	r2, #65	; 0x41
 8007126:	2120      	movs	r1, #32
 8007128:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2242      	movs	r2, #66	; 0x42
 8007134:	5c9b      	ldrb	r3, [r3, r2]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b40      	cmp	r3, #64	; 0x40
 800713a:	d10c      	bne.n	8007156 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2242      	movs	r2, #66	; 0x42
 8007140:	2100      	movs	r1, #0
 8007142:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2240      	movs	r2, #64	; 0x40
 8007148:	2100      	movs	r1, #0
 800714a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	0018      	movs	r0, r3
 8007150:	f7ff f988 	bl	8006464 <HAL_I2C_MemRxCpltCallback>
}
 8007154:	e00b      	b.n	800716e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2242      	movs	r2, #66	; 0x42
 800715a:	2100      	movs	r1, #0
 800715c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2240      	movs	r2, #64	; 0x40
 8007162:	2100      	movs	r1, #0
 8007164:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	0018      	movs	r0, r3
 800716a:	f7ff f943 	bl	80063f4 <HAL_I2C_MasterRxCpltCallback>
}
 800716e:	46c0      	nop			; (mov r8, r8)
 8007170:	46bd      	mov	sp, r7
 8007172:	b006      	add	sp, #24
 8007174:	bd80      	pop	{r7, pc}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	fe00e800 	.word	0xfe00e800
 800717c:	ffff0000 	.word	0xffff0000

08007180 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007196:	200f      	movs	r0, #15
 8007198:	183b      	adds	r3, r7, r0
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	2141      	movs	r1, #65	; 0x41
 800719e:	5c52      	ldrb	r2, [r2, r1]
 80071a0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2220      	movs	r2, #32
 80071a8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80071aa:	183b      	adds	r3, r7, r0
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2b21      	cmp	r3, #33	; 0x21
 80071b0:	d003      	beq.n	80071ba <I2C_ITSlaveCplt+0x3a>
 80071b2:	183b      	adds	r3, r7, r0
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b29      	cmp	r3, #41	; 0x29
 80071b8:	d109      	bne.n	80071ce <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80071ba:	4a7d      	ldr	r2, [pc, #500]	; (80073b0 <I2C_ITSlaveCplt+0x230>)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	0011      	movs	r1, r2
 80071c0:	0018      	movs	r0, r3
 80071c2:	f000 fd9f 	bl	8007d04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2221      	movs	r2, #33	; 0x21
 80071ca:	631a      	str	r2, [r3, #48]	; 0x30
 80071cc:	e011      	b.n	80071f2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80071ce:	220f      	movs	r2, #15
 80071d0:	18bb      	adds	r3, r7, r2
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b22      	cmp	r3, #34	; 0x22
 80071d6:	d003      	beq.n	80071e0 <I2C_ITSlaveCplt+0x60>
 80071d8:	18bb      	adds	r3, r7, r2
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b2a      	cmp	r3, #42	; 0x2a
 80071de:	d108      	bne.n	80071f2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80071e0:	4a74      	ldr	r2, [pc, #464]	; (80073b4 <I2C_ITSlaveCplt+0x234>)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	0011      	movs	r1, r2
 80071e6:	0018      	movs	r0, r3
 80071e8:	f000 fd8c 	bl	8007d04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2222      	movs	r2, #34	; 0x22
 80071f0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2180      	movs	r1, #128	; 0x80
 80071fe:	0209      	lsls	r1, r1, #8
 8007200:	430a      	orrs	r2, r1
 8007202:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	496a      	ldr	r1, [pc, #424]	; (80073b8 <I2C_ITSlaveCplt+0x238>)
 8007210:	400a      	ands	r2, r1
 8007212:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	0018      	movs	r0, r3
 8007218:	f000 fa3b 	bl	8007692 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	0b9b      	lsrs	r3, r3, #14
 8007220:	001a      	movs	r2, r3
 8007222:	2301      	movs	r3, #1
 8007224:	4013      	ands	r3, r2
 8007226:	d013      	beq.n	8007250 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4962      	ldr	r1, [pc, #392]	; (80073bc <I2C_ITSlaveCplt+0x23c>)
 8007234:	400a      	ands	r2, r1
 8007236:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723c:	2b00      	cmp	r3, #0
 800723e:	d020      	beq.n	8007282 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	b29a      	uxth	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800724e:	e018      	b.n	8007282 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	0bdb      	lsrs	r3, r3, #15
 8007254:	001a      	movs	r2, r3
 8007256:	2301      	movs	r3, #1
 8007258:	4013      	ands	r3, r2
 800725a:	d012      	beq.n	8007282 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4956      	ldr	r1, [pc, #344]	; (80073c0 <I2C_ITSlaveCplt+0x240>)
 8007268:	400a      	ands	r2, r1
 800726a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d006      	beq.n	8007282 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	b29a      	uxth	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	089b      	lsrs	r3, r3, #2
 8007286:	001a      	movs	r2, r3
 8007288:	2301      	movs	r3, #1
 800728a:	4013      	ands	r3, r2
 800728c:	d020      	beq.n	80072d0 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2204      	movs	r2, #4
 8007292:	4393      	bics	r3, r2
 8007294:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	b2d2      	uxtb	r2, r2
 80072a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00c      	beq.n	80072d0 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d005      	beq.n	80072e6 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072de:	2204      	movs	r2, #4
 80072e0:	431a      	orrs	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2242      	movs	r2, #66	; 0x42
 80072ea:	2100      	movs	r1, #0
 80072ec:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d013      	beq.n	8007324 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	0011      	movs	r1, r2
 8007304:	0018      	movs	r0, r3
 8007306:	f000 f8b9 	bl	800747c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2241      	movs	r2, #65	; 0x41
 800730e:	5c9b      	ldrb	r3, [r3, r2]
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b28      	cmp	r3, #40	; 0x28
 8007314:	d147      	bne.n	80073a6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	0011      	movs	r1, r2
 800731c:	0018      	movs	r0, r3
 800731e:	f000 f853 	bl	80073c8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007322:	e040      	b.n	80073a6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	4a26      	ldr	r2, [pc, #152]	; (80073c4 <I2C_ITSlaveCplt+0x244>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d016      	beq.n	800735c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	0018      	movs	r0, r3
 8007332:	f7ff fded 	bl	8006f10 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a22      	ldr	r2, [pc, #136]	; (80073c4 <I2C_ITSlaveCplt+0x244>)
 800733a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2241      	movs	r2, #65	; 0x41
 8007340:	2120      	movs	r1, #32
 8007342:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2240      	movs	r2, #64	; 0x40
 800734e:	2100      	movs	r1, #0
 8007350:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	0018      	movs	r0, r3
 8007356:	f7ff f875 	bl	8006444 <HAL_I2C_ListenCpltCallback>
}
 800735a:	e024      	b.n	80073a6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2241      	movs	r2, #65	; 0x41
 8007360:	5c9b      	ldrb	r3, [r3, r2]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b22      	cmp	r3, #34	; 0x22
 8007366:	d10f      	bne.n	8007388 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2241      	movs	r2, #65	; 0x41
 800736c:	2120      	movs	r1, #32
 800736e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2240      	movs	r2, #64	; 0x40
 800737a:	2100      	movs	r1, #0
 800737c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	0018      	movs	r0, r3
 8007382:	f7ff f847 	bl	8006414 <HAL_I2C_SlaveRxCpltCallback>
}
 8007386:	e00e      	b.n	80073a6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2241      	movs	r2, #65	; 0x41
 800738c:	2120      	movs	r1, #32
 800738e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2240      	movs	r2, #64	; 0x40
 800739a:	2100      	movs	r1, #0
 800739c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	0018      	movs	r0, r3
 80073a2:	f7ff f82f 	bl	8006404 <HAL_I2C_SlaveTxCpltCallback>
}
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	46bd      	mov	sp, r7
 80073aa:	b006      	add	sp, #24
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	46c0      	nop			; (mov r8, r8)
 80073b0:	00008001 	.word	0x00008001
 80073b4:	00008002 	.word	0x00008002
 80073b8:	fe00e800 	.word	0xfe00e800
 80073bc:	ffffbfff 	.word	0xffffbfff
 80073c0:	ffff7fff 	.word	0xffff7fff
 80073c4:	ffff0000 	.word	0xffff0000

080073c8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a27      	ldr	r2, [pc, #156]	; (8007474 <I2C_ITListenCplt+0xac>)
 80073d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2241      	movs	r2, #65	; 0x41
 80073e2:	2120      	movs	r1, #32
 80073e4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2242      	movs	r2, #66	; 0x42
 80073ea:	2100      	movs	r1, #0
 80073ec:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	089b      	lsrs	r3, r3, #2
 80073f8:	001a      	movs	r2, r3
 80073fa:	2301      	movs	r3, #1
 80073fc:	4013      	ands	r3, r2
 80073fe:	d022      	beq.n	8007446 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	b2d2      	uxtb	r2, r2
 800740c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741c:	2b00      	cmp	r3, #0
 800741e:	d012      	beq.n	8007446 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	b29a      	uxth	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743e:	2204      	movs	r2, #4
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007446:	4a0c      	ldr	r2, [pc, #48]	; (8007478 <I2C_ITListenCplt+0xb0>)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	0011      	movs	r1, r2
 800744c:	0018      	movs	r0, r3
 800744e:	f000 fc59 	bl	8007d04 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2210      	movs	r2, #16
 8007458:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2240      	movs	r2, #64	; 0x40
 800745e:	2100      	movs	r1, #0
 8007460:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	0018      	movs	r0, r3
 8007466:	f7fe ffed 	bl	8006444 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	46bd      	mov	sp, r7
 800746e:	b002      	add	sp, #8
 8007470:	bd80      	pop	{r7, pc}
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	ffff0000 	.word	0xffff0000
 8007478:	00008003 	.word	0x00008003

0800747c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007486:	200f      	movs	r0, #15
 8007488:	183b      	adds	r3, r7, r0
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	2141      	movs	r1, #65	; 0x41
 800748e:	5c52      	ldrb	r2, [r2, r1]
 8007490:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2242      	movs	r2, #66	; 0x42
 8007496:	2100      	movs	r1, #0
 8007498:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a62      	ldr	r2, [pc, #392]	; (8007628 <I2C_ITError+0x1ac>)
 800749e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80074b2:	183b      	adds	r3, r7, r0
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b28      	cmp	r3, #40	; 0x28
 80074b8:	d007      	beq.n	80074ca <I2C_ITError+0x4e>
 80074ba:	183b      	adds	r3, r7, r0
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b29      	cmp	r3, #41	; 0x29
 80074c0:	d003      	beq.n	80074ca <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80074c2:	183b      	adds	r3, r7, r0
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b2a      	cmp	r3, #42	; 0x2a
 80074c8:	d10c      	bne.n	80074e4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2103      	movs	r1, #3
 80074ce:	0018      	movs	r0, r3
 80074d0:	f000 fc18 	bl	8007d04 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2241      	movs	r2, #65	; 0x41
 80074d8:	2128      	movs	r1, #40	; 0x28
 80074da:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a53      	ldr	r2, [pc, #332]	; (800762c <I2C_ITError+0x1b0>)
 80074e0:	635a      	str	r2, [r3, #52]	; 0x34
 80074e2:	e012      	b.n	800750a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80074e4:	4a52      	ldr	r2, [pc, #328]	; (8007630 <I2C_ITError+0x1b4>)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	0011      	movs	r1, r2
 80074ea:	0018      	movs	r0, r3
 80074ec:	f000 fc0a 	bl	8007d04 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2241      	movs	r2, #65	; 0x41
 80074f4:	5c9b      	ldrb	r3, [r3, r2]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b60      	cmp	r3, #96	; 0x60
 80074fa:	d003      	beq.n	8007504 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2241      	movs	r2, #65	; 0x41
 8007500:	2120      	movs	r1, #32
 8007502:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	2b00      	cmp	r3, #0
 8007516:	d03b      	beq.n	8007590 <I2C_ITError+0x114>
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2b11      	cmp	r3, #17
 800751c:	d002      	beq.n	8007524 <I2C_ITError+0xa8>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b21      	cmp	r3, #33	; 0x21
 8007522:	d135      	bne.n	8007590 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	2380      	movs	r3, #128	; 0x80
 800752c:	01db      	lsls	r3, r3, #7
 800752e:	401a      	ands	r2, r3
 8007530:	2380      	movs	r3, #128	; 0x80
 8007532:	01db      	lsls	r3, r3, #7
 8007534:	429a      	cmp	r2, r3
 8007536:	d107      	bne.n	8007548 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	493c      	ldr	r1, [pc, #240]	; (8007634 <I2C_ITError+0x1b8>)
 8007544:	400a      	ands	r2, r1
 8007546:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	0018      	movs	r0, r3
 800754e:	f7fd ffdb 	bl	8005508 <HAL_DMA_GetState>
 8007552:	0003      	movs	r3, r0
 8007554:	2b01      	cmp	r3, #1
 8007556:	d016      	beq.n	8007586 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	4a36      	ldr	r2, [pc, #216]	; (8007638 <I2C_ITError+0x1bc>)
 800755e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2240      	movs	r2, #64	; 0x40
 8007564:	2100      	movs	r1, #0
 8007566:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	0018      	movs	r0, r3
 800756e:	f7fd fe9f 	bl	80052b0 <HAL_DMA_Abort_IT>
 8007572:	1e03      	subs	r3, r0, #0
 8007574:	d051      	beq.n	800761a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007580:	0018      	movs	r0, r3
 8007582:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007584:	e049      	b.n	800761a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	0018      	movs	r0, r3
 800758a:	f000 f859 	bl	8007640 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800758e:	e044      	b.n	800761a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d03b      	beq.n	8007610 <I2C_ITError+0x194>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b12      	cmp	r3, #18
 800759c:	d002      	beq.n	80075a4 <I2C_ITError+0x128>
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b22      	cmp	r3, #34	; 0x22
 80075a2:	d135      	bne.n	8007610 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	2380      	movs	r3, #128	; 0x80
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	401a      	ands	r2, r3
 80075b0:	2380      	movs	r3, #128	; 0x80
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d107      	bne.n	80075c8 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	491e      	ldr	r1, [pc, #120]	; (800763c <I2C_ITError+0x1c0>)
 80075c4:	400a      	ands	r2, r1
 80075c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075cc:	0018      	movs	r0, r3
 80075ce:	f7fd ff9b 	bl	8005508 <HAL_DMA_GetState>
 80075d2:	0003      	movs	r3, r0
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d016      	beq.n	8007606 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075dc:	4a16      	ldr	r2, [pc, #88]	; (8007638 <I2C_ITError+0x1bc>)
 80075de:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2240      	movs	r2, #64	; 0x40
 80075e4:	2100      	movs	r1, #0
 80075e6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ec:	0018      	movs	r0, r3
 80075ee:	f7fd fe5f 	bl	80052b0 <HAL_DMA_Abort_IT>
 80075f2:	1e03      	subs	r3, r0, #0
 80075f4:	d013      	beq.n	800761e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007600:	0018      	movs	r0, r3
 8007602:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007604:	e00b      	b.n	800761e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	0018      	movs	r0, r3
 800760a:	f000 f819 	bl	8007640 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800760e:	e006      	b.n	800761e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	0018      	movs	r0, r3
 8007614:	f000 f814 	bl	8007640 <I2C_TreatErrorCallback>
  }
}
 8007618:	e002      	b.n	8007620 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	e000      	b.n	8007620 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800761e:	46c0      	nop			; (mov r8, r8)
}
 8007620:	46c0      	nop			; (mov r8, r8)
 8007622:	46bd      	mov	sp, r7
 8007624:	b004      	add	sp, #16
 8007626:	bd80      	pop	{r7, pc}
 8007628:	ffff0000 	.word	0xffff0000
 800762c:	08006719 	.word	0x08006719
 8007630:	00008003 	.word	0x00008003
 8007634:	ffffbfff 	.word	0xffffbfff
 8007638:	0800784b 	.word	0x0800784b
 800763c:	ffff7fff 	.word	0xffff7fff

08007640 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2241      	movs	r2, #65	; 0x41
 800764c:	5c9b      	ldrb	r3, [r3, r2]
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b60      	cmp	r3, #96	; 0x60
 8007652:	d10f      	bne.n	8007674 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2241      	movs	r2, #65	; 0x41
 8007658:	2120      	movs	r1, #32
 800765a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2240      	movs	r2, #64	; 0x40
 8007666:	2100      	movs	r1, #0
 8007668:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	0018      	movs	r0, r3
 800766e:	f7fe ff09 	bl	8006484 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007672:	e00a      	b.n	800768a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2240      	movs	r2, #64	; 0x40
 800767e:	2100      	movs	r1, #0
 8007680:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	0018      	movs	r0, r3
 8007686:	f7fe fef5 	bl	8006474 <HAL_I2C_ErrorCallback>
}
 800768a:	46c0      	nop			; (mov r8, r8)
 800768c:	46bd      	mov	sp, r7
 800768e:	b002      	add	sp, #8
 8007690:	bd80      	pop	{r7, pc}

08007692 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	2202      	movs	r2, #2
 80076a2:	4013      	ands	r3, r2
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d103      	bne.n	80076b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2200      	movs	r2, #0
 80076ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	2201      	movs	r2, #1
 80076b8:	4013      	ands	r3, r2
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d007      	beq.n	80076ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	699a      	ldr	r2, [r3, #24]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2101      	movs	r1, #1
 80076ca:	430a      	orrs	r2, r1
 80076cc:	619a      	str	r2, [r3, #24]
  }
}
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	46bd      	mov	sp, r7
 80076d2:	b002      	add	sp, #8
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4920      	ldr	r1, [pc, #128]	; (8007774 <I2C_DMAMasterTransmitCplt+0x9c>)
 80076f2:	400a      	ands	r2, r1
 80076f4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d105      	bne.n	800770c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2120      	movs	r1, #32
 8007704:	0018      	movs	r0, r3
 8007706:	f000 fa95 	bl	8007c34 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800770a:	e02e      	b.n	800776a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007714:	189a      	adds	r2, r3, r2
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771e:	b29b      	uxth	r3, r3
 8007720:	2bff      	cmp	r3, #255	; 0xff
 8007722:	d903      	bls.n	800772c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	22ff      	movs	r2, #255	; 0xff
 8007728:	851a      	strh	r2, [r3, #40]	; 0x28
 800772a:	e004      	b.n	8007736 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	0019      	movs	r1, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3328      	adds	r3, #40	; 0x28
 8007746:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800774c:	f7fd fcca 	bl	80050e4 <HAL_DMA_Start_IT>
 8007750:	1e03      	subs	r3, r0, #0
 8007752:	d005      	beq.n	8007760 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2110      	movs	r1, #16
 8007758:	0018      	movs	r0, r3
 800775a:	f7ff fe8f 	bl	800747c <I2C_ITError>
}
 800775e:	e004      	b.n	800776a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2140      	movs	r1, #64	; 0x40
 8007764:	0018      	movs	r0, r3
 8007766:	f000 fa65 	bl	8007c34 <I2C_Enable_IRQ>
}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	46bd      	mov	sp, r7
 800776e:	b004      	add	sp, #16
 8007770:	bd80      	pop	{r7, pc}
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	ffffbfff 	.word	0xffffbfff

08007778 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4920      	ldr	r1, [pc, #128]	; (8007814 <I2C_DMAMasterReceiveCplt+0x9c>)
 8007792:	400a      	ands	r2, r1
 8007794:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779a:	b29b      	uxth	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d105      	bne.n	80077ac <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2120      	movs	r1, #32
 80077a4:	0018      	movs	r0, r3
 80077a6:	f000 fa45 	bl	8007c34 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80077aa:	e02e      	b.n	800780a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80077b4:	189a      	adds	r2, r3, r2
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2bff      	cmp	r3, #255	; 0xff
 80077c2:	d903      	bls.n	80077cc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	22ff      	movs	r2, #255	; 0xff
 80077c8:	851a      	strh	r2, [r3, #40]	; 0x28
 80077ca:	e004      	b.n	80077d6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3324      	adds	r3, #36	; 0x24
 80077e0:	0019      	movs	r1, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80077ec:	f7fd fc7a 	bl	80050e4 <HAL_DMA_Start_IT>
 80077f0:	1e03      	subs	r3, r0, #0
 80077f2:	d005      	beq.n	8007800 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2110      	movs	r1, #16
 80077f8:	0018      	movs	r0, r3
 80077fa:	f7ff fe3f 	bl	800747c <I2C_ITError>
}
 80077fe:	e004      	b.n	800780a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2140      	movs	r1, #64	; 0x40
 8007804:	0018      	movs	r0, r3
 8007806:	f000 fa15 	bl	8007c34 <I2C_Enable_IRQ>
}
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	46bd      	mov	sp, r7
 800780e:	b004      	add	sp, #16
 8007810:	bd80      	pop	{r7, pc}
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	ffff7fff 	.word	0xffff7fff

08007818 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007824:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2180      	movs	r1, #128	; 0x80
 8007832:	0209      	lsls	r1, r1, #8
 8007834:	430a      	orrs	r2, r1
 8007836:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2110      	movs	r1, #16
 800783c:	0018      	movs	r0, r3
 800783e:	f7ff fe1d 	bl	800747c <I2C_ITError>
}
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	46bd      	mov	sp, r7
 8007846:	b004      	add	sp, #16
 8007848:	bd80      	pop	{r7, pc}

0800784a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007856:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	2200      	movs	r2, #0
 8007866:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007874:	2200      	movs	r2, #0
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	0018      	movs	r0, r3
 800787c:	f7ff fee0 	bl	8007640 <I2C_TreatErrorCallback>
}
 8007880:	46c0      	nop			; (mov r8, r8)
 8007882:	46bd      	mov	sp, r7
 8007884:	b004      	add	sp, #16
 8007886:	bd80      	pop	{r7, pc}

08007888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	1dfb      	adds	r3, r7, #7
 8007896:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007898:	e021      	b.n	80078de <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	3301      	adds	r3, #1
 800789e:	d01e      	beq.n	80078de <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078a0:	f7fc fd56 	bl	8004350 <HAL_GetTick>
 80078a4:	0002      	movs	r2, r0
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d302      	bcc.n	80078b6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d113      	bne.n	80078de <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ba:	2220      	movs	r2, #32
 80078bc:	431a      	orrs	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2241      	movs	r2, #65	; 0x41
 80078c6:	2120      	movs	r1, #32
 80078c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2242      	movs	r2, #66	; 0x42
 80078ce:	2100      	movs	r1, #0
 80078d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2240      	movs	r2, #64	; 0x40
 80078d6:	2100      	movs	r1, #0
 80078d8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e00f      	b.n	80078fe <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	4013      	ands	r3, r2
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	425a      	negs	r2, r3
 80078ee:	4153      	adcs	r3, r2
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	001a      	movs	r2, r3
 80078f4:	1dfb      	adds	r3, r7, #7
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d0ce      	beq.n	800789a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	0018      	movs	r0, r3
 8007900:	46bd      	mov	sp, r7
 8007902:	b004      	add	sp, #16
 8007904:	bd80      	pop	{r7, pc}

08007906 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	60f8      	str	r0, [r7, #12]
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007912:	e02b      	b.n	800796c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	68b9      	ldr	r1, [r7, #8]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	0018      	movs	r0, r3
 800791c:	f000 f8da 	bl	8007ad4 <I2C_IsAcknowledgeFailed>
 8007920:	1e03      	subs	r3, r0, #0
 8007922:	d001      	beq.n	8007928 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e029      	b.n	800797c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	3301      	adds	r3, #1
 800792c:	d01e      	beq.n	800796c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800792e:	f7fc fd0f 	bl	8004350 <HAL_GetTick>
 8007932:	0002      	movs	r2, r0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	429a      	cmp	r2, r3
 800793c:	d302      	bcc.n	8007944 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d113      	bne.n	800796c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007948:	2220      	movs	r2, #32
 800794a:	431a      	orrs	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2241      	movs	r2, #65	; 0x41
 8007954:	2120      	movs	r1, #32
 8007956:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2242      	movs	r2, #66	; 0x42
 800795c:	2100      	movs	r1, #0
 800795e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2240      	movs	r2, #64	; 0x40
 8007964:	2100      	movs	r1, #0
 8007966:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e007      	b.n	800797c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	2202      	movs	r2, #2
 8007974:	4013      	ands	r3, r2
 8007976:	2b02      	cmp	r3, #2
 8007978:	d1cc      	bne.n	8007914 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	0018      	movs	r0, r3
 800797e:	46bd      	mov	sp, r7
 8007980:	b004      	add	sp, #16
 8007982:	bd80      	pop	{r7, pc}

08007984 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007990:	e028      	b.n	80079e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	0018      	movs	r0, r3
 800799a:	f000 f89b 	bl	8007ad4 <I2C_IsAcknowledgeFailed>
 800799e:	1e03      	subs	r3, r0, #0
 80079a0:	d001      	beq.n	80079a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e026      	b.n	80079f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079a6:	f7fc fcd3 	bl	8004350 <HAL_GetTick>
 80079aa:	0002      	movs	r2, r0
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d302      	bcc.n	80079bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d113      	bne.n	80079e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c0:	2220      	movs	r2, #32
 80079c2:	431a      	orrs	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2241      	movs	r2, #65	; 0x41
 80079cc:	2120      	movs	r1, #32
 80079ce:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2242      	movs	r2, #66	; 0x42
 80079d4:	2100      	movs	r1, #0
 80079d6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2240      	movs	r2, #64	; 0x40
 80079dc:	2100      	movs	r1, #0
 80079de:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e007      	b.n	80079f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	2220      	movs	r2, #32
 80079ec:	4013      	ands	r3, r2
 80079ee:	2b20      	cmp	r3, #32
 80079f0:	d1cf      	bne.n	8007992 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	0018      	movs	r0, r3
 80079f6:	46bd      	mov	sp, r7
 80079f8:	b004      	add	sp, #16
 80079fa:	bd80      	pop	{r7, pc}

080079fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a08:	e055      	b.n	8007ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	68b9      	ldr	r1, [r7, #8]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	0018      	movs	r0, r3
 8007a12:	f000 f85f 	bl	8007ad4 <I2C_IsAcknowledgeFailed>
 8007a16:	1e03      	subs	r3, r0, #0
 8007a18:	d001      	beq.n	8007a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e053      	b.n	8007ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	2220      	movs	r2, #32
 8007a26:	4013      	ands	r3, r2
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d129      	bne.n	8007a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	2204      	movs	r2, #4
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d105      	bne.n	8007a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	e03f      	b.n	8007ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	491d      	ldr	r1, [pc, #116]	; (8007ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8007a5a:	400a      	ands	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2241      	movs	r2, #65	; 0x41
 8007a68:	2120      	movs	r1, #32
 8007a6a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2242      	movs	r2, #66	; 0x42
 8007a70:	2100      	movs	r1, #0
 8007a72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2240      	movs	r2, #64	; 0x40
 8007a78:	2100      	movs	r1, #0
 8007a7a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e022      	b.n	8007ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a80:	f7fc fc66 	bl	8004350 <HAL_GetTick>
 8007a84:	0002      	movs	r2, r0
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d302      	bcc.n	8007a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10f      	bne.n	8007ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2241      	movs	r2, #65	; 0x41
 8007aa6:	2120      	movs	r1, #32
 8007aa8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2240      	movs	r2, #64	; 0x40
 8007aae:	2100      	movs	r1, #0
 8007ab0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e007      	b.n	8007ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2204      	movs	r2, #4
 8007abe:	4013      	ands	r3, r2
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d1a2      	bne.n	8007a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	b004      	add	sp, #16
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	fe00e800 	.word	0xfe00e800

08007ad4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	2210      	movs	r2, #16
 8007ae8:	4013      	ands	r3, r2
 8007aea:	2b10      	cmp	r3, #16
 8007aec:	d164      	bne.n	8007bb8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	2380      	movs	r3, #128	; 0x80
 8007af6:	049b      	lsls	r3, r3, #18
 8007af8:	401a      	ands	r2, r3
 8007afa:	2380      	movs	r3, #128	; 0x80
 8007afc:	049b      	lsls	r3, r3, #18
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d02b      	beq.n	8007b5a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2180      	movs	r1, #128	; 0x80
 8007b0e:	01c9      	lsls	r1, r1, #7
 8007b10:	430a      	orrs	r2, r1
 8007b12:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b14:	e021      	b.n	8007b5a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	d01e      	beq.n	8007b5a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b1c:	f7fc fc18 	bl	8004350 <HAL_GetTick>
 8007b20:	0002      	movs	r2, r0
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d302      	bcc.n	8007b32 <I2C_IsAcknowledgeFailed+0x5e>
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d113      	bne.n	8007b5a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b36:	2220      	movs	r2, #32
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2241      	movs	r2, #65	; 0x41
 8007b42:	2120      	movs	r1, #32
 8007b44:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2242      	movs	r2, #66	; 0x42
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2240      	movs	r2, #64	; 0x40
 8007b52:	2100      	movs	r1, #0
 8007b54:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e02f      	b.n	8007bba <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	2220      	movs	r2, #32
 8007b62:	4013      	ands	r3, r2
 8007b64:	2b20      	cmp	r3, #32
 8007b66:	d1d6      	bne.n	8007b16 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2210      	movs	r2, #16
 8007b6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2220      	movs	r2, #32
 8007b76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	f7ff fd89 	bl	8007692 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	490e      	ldr	r1, [pc, #56]	; (8007bc4 <I2C_IsAcknowledgeFailed+0xf0>)
 8007b8c:	400a      	ands	r2, r1
 8007b8e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b94:	2204      	movs	r2, #4
 8007b96:	431a      	orrs	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2241      	movs	r2, #65	; 0x41
 8007ba0:	2120      	movs	r1, #32
 8007ba2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2242      	movs	r2, #66	; 0x42
 8007ba8:	2100      	movs	r1, #0
 8007baa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2240      	movs	r2, #64	; 0x40
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	0018      	movs	r0, r3
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	b004      	add	sp, #16
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	46c0      	nop			; (mov r8, r8)
 8007bc4:	fe00e800 	.word	0xfe00e800

08007bc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007bc8:	b590      	push	{r4, r7, lr}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	0008      	movs	r0, r1
 8007bd2:	0011      	movs	r1, r2
 8007bd4:	607b      	str	r3, [r7, #4]
 8007bd6:	240a      	movs	r4, #10
 8007bd8:	193b      	adds	r3, r7, r4
 8007bda:	1c02      	adds	r2, r0, #0
 8007bdc:	801a      	strh	r2, [r3, #0]
 8007bde:	2009      	movs	r0, #9
 8007be0:	183b      	adds	r3, r7, r0
 8007be2:	1c0a      	adds	r2, r1, #0
 8007be4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	6a3a      	ldr	r2, [r7, #32]
 8007bee:	0d51      	lsrs	r1, r2, #21
 8007bf0:	2280      	movs	r2, #128	; 0x80
 8007bf2:	00d2      	lsls	r2, r2, #3
 8007bf4:	400a      	ands	r2, r1
 8007bf6:	490e      	ldr	r1, [pc, #56]	; (8007c30 <I2C_TransferConfig+0x68>)
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	43d2      	mvns	r2, r2
 8007bfc:	401a      	ands	r2, r3
 8007bfe:	0011      	movs	r1, r2
 8007c00:	193b      	adds	r3, r7, r4
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	059b      	lsls	r3, r3, #22
 8007c06:	0d9a      	lsrs	r2, r3, #22
 8007c08:	183b      	adds	r3, r7, r0
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	0418      	lsls	r0, r3, #16
 8007c0e:	23ff      	movs	r3, #255	; 0xff
 8007c10:	041b      	lsls	r3, r3, #16
 8007c12:	4003      	ands	r3, r0
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	b005      	add	sp, #20
 8007c2c:	bd90      	pop	{r4, r7, pc}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	03ff63ff 	.word	0x03ff63ff

08007c34 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	000a      	movs	r2, r1
 8007c3e:	1cbb      	adds	r3, r7, #2
 8007c40:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c4a:	4b2c      	ldr	r3, [pc, #176]	; (8007cfc <I2C_Enable_IRQ+0xc8>)
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d004      	beq.n	8007c5a <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007c54:	4b2a      	ldr	r3, [pc, #168]	; (8007d00 <I2C_Enable_IRQ+0xcc>)
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d121      	bne.n	8007c9e <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c5a:	1cbb      	adds	r3, r7, #2
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	5e9b      	ldrsh	r3, [r3, r2]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	da03      	bge.n	8007c6c <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	22b8      	movs	r2, #184	; 0xb8
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007c6c:	1cbb      	adds	r3, r7, #2
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	2b10      	cmp	r3, #16
 8007c72:	d103      	bne.n	8007c7c <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2290      	movs	r2, #144	; 0x90
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007c7c:	1cbb      	adds	r3, r7, #2
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	2b20      	cmp	r3, #32
 8007c82:	d103      	bne.n	8007c8c <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2260      	movs	r2, #96	; 0x60
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007c8c:	1cbb      	adds	r3, r7, #2
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	2b40      	cmp	r3, #64	; 0x40
 8007c92:	d127      	bne.n	8007ce4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2240      	movs	r2, #64	; 0x40
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007c9c:	e022      	b.n	8007ce4 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c9e:	1cbb      	adds	r3, r7, #2
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	5e9b      	ldrsh	r3, [r3, r2]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	da03      	bge.n	8007cb0 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	22b8      	movs	r2, #184	; 0xb8
 8007cac:	4313      	orrs	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007cb0:	1cbb      	adds	r3, r7, #2
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	d003      	beq.n	8007cc2 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	22f2      	movs	r2, #242	; 0xf2
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007cc2:	1cbb      	adds	r3, r7, #2
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	4013      	ands	r3, r2
 8007cca:	d003      	beq.n	8007cd4 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	22f4      	movs	r2, #244	; 0xf4
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007cd4:	1cbb      	adds	r3, r7, #2
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d103      	bne.n	8007ce4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6819      	ldr	r1, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	601a      	str	r2, [r3, #0]
}
 8007cf4:	46c0      	nop			; (mov r8, r8)
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	b004      	add	sp, #16
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	08006941 	.word	0x08006941
 8007d00:	08006b59 	.word	0x08006b59

08007d04 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	000a      	movs	r2, r1
 8007d0e:	1cbb      	adds	r3, r7, #2
 8007d10:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007d16:	1cbb      	adds	r3, r7, #2
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	d010      	beq.n	8007d42 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2242      	movs	r2, #66	; 0x42
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2241      	movs	r2, #65	; 0x41
 8007d2c:	5c9b      	ldrb	r3, [r3, r2]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	001a      	movs	r2, r3
 8007d32:	2328      	movs	r3, #40	; 0x28
 8007d34:	4013      	ands	r3, r2
 8007d36:	2b28      	cmp	r3, #40	; 0x28
 8007d38:	d003      	beq.n	8007d42 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	22b0      	movs	r2, #176	; 0xb0
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007d42:	1cbb      	adds	r3, r7, #2
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	2202      	movs	r2, #2
 8007d48:	4013      	ands	r3, r2
 8007d4a:	d010      	beq.n	8007d6e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2244      	movs	r2, #68	; 0x44
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2241      	movs	r2, #65	; 0x41
 8007d58:	5c9b      	ldrb	r3, [r3, r2]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	001a      	movs	r2, r3
 8007d5e:	2328      	movs	r3, #40	; 0x28
 8007d60:	4013      	ands	r3, r2
 8007d62:	2b28      	cmp	r3, #40	; 0x28
 8007d64:	d003      	beq.n	8007d6e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	22b0      	movs	r2, #176	; 0xb0
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007d6e:	1cbb      	adds	r3, r7, #2
 8007d70:	2200      	movs	r2, #0
 8007d72:	5e9b      	ldrsh	r3, [r3, r2]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	da03      	bge.n	8007d80 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	22b8      	movs	r2, #184	; 0xb8
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007d80:	1cbb      	adds	r3, r7, #2
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	2b10      	cmp	r3, #16
 8007d86:	d103      	bne.n	8007d90 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2290      	movs	r2, #144	; 0x90
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d90:	1cbb      	adds	r3, r7, #2
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d103      	bne.n	8007da0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007da0:	1cbb      	adds	r3, r7, #2
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d103      	bne.n	8007db0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2240      	movs	r2, #64	; 0x40
 8007dac:	4313      	orrs	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	43d9      	mvns	r1, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	400a      	ands	r2, r1
 8007dc0:	601a      	str	r2, [r3, #0]
}
 8007dc2:	46c0      	nop			; (mov r8, r8)
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	b004      	add	sp, #16
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2241      	movs	r2, #65	; 0x41
 8007dda:	5c9b      	ldrb	r3, [r3, r2]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b20      	cmp	r3, #32
 8007de0:	d138      	bne.n	8007e54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2240      	movs	r2, #64	; 0x40
 8007de6:	5c9b      	ldrb	r3, [r3, r2]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e032      	b.n	8007e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2240      	movs	r2, #64	; 0x40
 8007df4:	2101      	movs	r1, #1
 8007df6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2241      	movs	r2, #65	; 0x41
 8007dfc:	2124      	movs	r1, #36	; 0x24
 8007dfe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	438a      	bics	r2, r1
 8007e0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4911      	ldr	r1, [pc, #68]	; (8007e60 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007e1c:	400a      	ands	r2, r1
 8007e1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6819      	ldr	r1, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2241      	movs	r2, #65	; 0x41
 8007e44:	2120      	movs	r1, #32
 8007e46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2240      	movs	r2, #64	; 0x40
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	e000      	b.n	8007e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e54:	2302      	movs	r3, #2
  }
}
 8007e56:	0018      	movs	r0, r3
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	b002      	add	sp, #8
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	46c0      	nop			; (mov r8, r8)
 8007e60:	ffffefff 	.word	0xffffefff

08007e64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2241      	movs	r2, #65	; 0x41
 8007e72:	5c9b      	ldrb	r3, [r3, r2]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b20      	cmp	r3, #32
 8007e78:	d139      	bne.n	8007eee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2240      	movs	r2, #64	; 0x40
 8007e7e:	5c9b      	ldrb	r3, [r3, r2]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e033      	b.n	8007ef0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2240      	movs	r2, #64	; 0x40
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2241      	movs	r2, #65	; 0x41
 8007e94:	2124      	movs	r1, #36	; 0x24
 8007e96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	438a      	bics	r2, r1
 8007ea6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4a11      	ldr	r2, [pc, #68]	; (8007ef8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	021b      	lsls	r3, r3, #8
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2241      	movs	r2, #65	; 0x41
 8007ede:	2120      	movs	r1, #32
 8007ee0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2240      	movs	r2, #64	; 0x40
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	e000      	b.n	8007ef0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007eee:	2302      	movs	r3, #2
  }
}
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	b004      	add	sp, #16
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	fffff0ff 	.word	0xfffff0ff

08007efc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007f04:	4b19      	ldr	r3, [pc, #100]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a19      	ldr	r2, [pc, #100]	; (8007f70 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	0019      	movs	r1, r3
 8007f0e:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	2380      	movs	r3, #128	; 0x80
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d11f      	bne.n	8007f60 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007f20:	4b14      	ldr	r3, [pc, #80]	; (8007f74 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	0013      	movs	r3, r2
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	189b      	adds	r3, r3, r2
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	4912      	ldr	r1, [pc, #72]	; (8007f78 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007f2e:	0018      	movs	r0, r3
 8007f30:	f7f8 f904 	bl	800013c <__udivsi3>
 8007f34:	0003      	movs	r3, r0
 8007f36:	3301      	adds	r3, #1
 8007f38:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f3a:	e008      	b.n	8007f4e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	e001      	b.n	8007f4e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e009      	b.n	8007f62 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f4e:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007f50:	695a      	ldr	r2, [r3, #20]
 8007f52:	2380      	movs	r3, #128	; 0x80
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	401a      	ands	r2, r3
 8007f58:	2380      	movs	r3, #128	; 0x80
 8007f5a:	00db      	lsls	r3, r3, #3
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d0ed      	beq.n	8007f3c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	0018      	movs	r0, r3
 8007f64:	46bd      	mov	sp, r7
 8007f66:	b004      	add	sp, #16
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	40007000 	.word	0x40007000
 8007f70:	fffff9ff 	.word	0xfffff9ff
 8007f74:	20000020 	.word	0x20000020
 8007f78:	000f4240 	.word	0x000f4240

08007f7c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007f80:	4b03      	ldr	r3, [pc, #12]	; (8007f90 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	23e0      	movs	r3, #224	; 0xe0
 8007f86:	01db      	lsls	r3, r3, #7
 8007f88:	4013      	ands	r3, r2
}
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40021000 	.word	0x40021000

08007f94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d102      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f000 fb56 	bl	8008654 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2201      	movs	r2, #1
 8007fae:	4013      	ands	r3, r2
 8007fb0:	d100      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x20>
 8007fb2:	e07d      	b.n	80080b0 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fb4:	4bc3      	ldr	r3, [pc, #780]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	2238      	movs	r2, #56	; 0x38
 8007fba:	4013      	ands	r3, r2
 8007fbc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fbe:	4bc1      	ldr	r3, [pc, #772]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	2b10      	cmp	r3, #16
 8007fcc:	d102      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x40>
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d002      	beq.n	8007fda <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d10c      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fda:	4bba      	ldr	r3, [pc, #744]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	2380      	movs	r3, #128	; 0x80
 8007fe0:	029b      	lsls	r3, r3, #10
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	d063      	beq.n	80080ae <HAL_RCC_OscConfig+0x11a>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d15f      	bne.n	80080ae <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	f000 fb30 	bl	8008654 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	2380      	movs	r3, #128	; 0x80
 8007ffa:	025b      	lsls	r3, r3, #9
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d107      	bne.n	8008010 <HAL_RCC_OscConfig+0x7c>
 8008000:	4bb0      	ldr	r3, [pc, #704]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	4baf      	ldr	r3, [pc, #700]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008006:	2180      	movs	r1, #128	; 0x80
 8008008:	0249      	lsls	r1, r1, #9
 800800a:	430a      	orrs	r2, r1
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	e020      	b.n	8008052 <HAL_RCC_OscConfig+0xbe>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	23a0      	movs	r3, #160	; 0xa0
 8008016:	02db      	lsls	r3, r3, #11
 8008018:	429a      	cmp	r2, r3
 800801a:	d10e      	bne.n	800803a <HAL_RCC_OscConfig+0xa6>
 800801c:	4ba9      	ldr	r3, [pc, #676]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	4ba8      	ldr	r3, [pc, #672]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008022:	2180      	movs	r1, #128	; 0x80
 8008024:	02c9      	lsls	r1, r1, #11
 8008026:	430a      	orrs	r2, r1
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	4ba6      	ldr	r3, [pc, #664]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	4ba5      	ldr	r3, [pc, #660]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008030:	2180      	movs	r1, #128	; 0x80
 8008032:	0249      	lsls	r1, r1, #9
 8008034:	430a      	orrs	r2, r1
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	e00b      	b.n	8008052 <HAL_RCC_OscConfig+0xbe>
 800803a:	4ba2      	ldr	r3, [pc, #648]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	4ba1      	ldr	r3, [pc, #644]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008040:	49a1      	ldr	r1, [pc, #644]	; (80082c8 <HAL_RCC_OscConfig+0x334>)
 8008042:	400a      	ands	r2, r1
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	4b9f      	ldr	r3, [pc, #636]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	4b9e      	ldr	r3, [pc, #632]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 800804c:	499f      	ldr	r1, [pc, #636]	; (80082cc <HAL_RCC_OscConfig+0x338>)
 800804e:	400a      	ands	r2, r1
 8008050:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d014      	beq.n	8008084 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805a:	f7fc f979 	bl	8004350 <HAL_GetTick>
 800805e:	0003      	movs	r3, r0
 8008060:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008064:	f7fc f974 	bl	8004350 <HAL_GetTick>
 8008068:	0002      	movs	r2, r0
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b64      	cmp	r3, #100	; 0x64
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e2ee      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008076:	4b93      	ldr	r3, [pc, #588]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	2380      	movs	r3, #128	; 0x80
 800807c:	029b      	lsls	r3, r3, #10
 800807e:	4013      	ands	r3, r2
 8008080:	d0f0      	beq.n	8008064 <HAL_RCC_OscConfig+0xd0>
 8008082:	e015      	b.n	80080b0 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008084:	f7fc f964 	bl	8004350 <HAL_GetTick>
 8008088:	0003      	movs	r3, r0
 800808a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800808c:	e008      	b.n	80080a0 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800808e:	f7fc f95f 	bl	8004350 <HAL_GetTick>
 8008092:	0002      	movs	r2, r0
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	2b64      	cmp	r3, #100	; 0x64
 800809a:	d901      	bls.n	80080a0 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e2d9      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080a0:	4b88      	ldr	r3, [pc, #544]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	2380      	movs	r3, #128	; 0x80
 80080a6:	029b      	lsls	r3, r3, #10
 80080a8:	4013      	ands	r3, r2
 80080aa:	d1f0      	bne.n	800808e <HAL_RCC_OscConfig+0xfa>
 80080ac:	e000      	b.n	80080b0 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2202      	movs	r2, #2
 80080b6:	4013      	ands	r3, r2
 80080b8:	d100      	bne.n	80080bc <HAL_RCC_OscConfig+0x128>
 80080ba:	e099      	b.n	80081f0 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080bc:	4b81      	ldr	r3, [pc, #516]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	2238      	movs	r2, #56	; 0x38
 80080c2:	4013      	ands	r3, r2
 80080c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080c6:	4b7f      	ldr	r3, [pc, #508]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	2203      	movs	r2, #3
 80080cc:	4013      	ands	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	2b10      	cmp	r3, #16
 80080d4:	d102      	bne.n	80080dc <HAL_RCC_OscConfig+0x148>
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d002      	beq.n	80080e2 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d135      	bne.n	800814e <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080e2:	4b78      	ldr	r3, [pc, #480]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	2380      	movs	r3, #128	; 0x80
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	4013      	ands	r3, r2
 80080ec:	d005      	beq.n	80080fa <HAL_RCC_OscConfig+0x166>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e2ac      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080fa:	4b72      	ldr	r3, [pc, #456]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	4a74      	ldr	r2, [pc, #464]	; (80082d0 <HAL_RCC_OscConfig+0x33c>)
 8008100:	4013      	ands	r3, r2
 8008102:	0019      	movs	r1, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	021a      	lsls	r2, r3, #8
 800810a:	4b6e      	ldr	r3, [pc, #440]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 800810c:	430a      	orrs	r2, r1
 800810e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d112      	bne.n	800813c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008116:	4b6b      	ldr	r3, [pc, #428]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a6e      	ldr	r2, [pc, #440]	; (80082d4 <HAL_RCC_OscConfig+0x340>)
 800811c:	4013      	ands	r3, r2
 800811e:	0019      	movs	r1, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	4b67      	ldr	r3, [pc, #412]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008126:	430a      	orrs	r2, r1
 8008128:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800812a:	4b66      	ldr	r3, [pc, #408]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	0adb      	lsrs	r3, r3, #11
 8008130:	2207      	movs	r2, #7
 8008132:	4013      	ands	r3, r2
 8008134:	4a68      	ldr	r2, [pc, #416]	; (80082d8 <HAL_RCC_OscConfig+0x344>)
 8008136:	40da      	lsrs	r2, r3
 8008138:	4b68      	ldr	r3, [pc, #416]	; (80082dc <HAL_RCC_OscConfig+0x348>)
 800813a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800813c:	4b68      	ldr	r3, [pc, #416]	; (80082e0 <HAL_RCC_OscConfig+0x34c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	0018      	movs	r0, r3
 8008142:	f7fc f8a9 	bl	8004298 <HAL_InitTick>
 8008146:	1e03      	subs	r3, r0, #0
 8008148:	d051      	beq.n	80081ee <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e282      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d030      	beq.n	80081b8 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008156:	4b5b      	ldr	r3, [pc, #364]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a5e      	ldr	r2, [pc, #376]	; (80082d4 <HAL_RCC_OscConfig+0x340>)
 800815c:	4013      	ands	r3, r2
 800815e:	0019      	movs	r1, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691a      	ldr	r2, [r3, #16]
 8008164:	4b57      	ldr	r3, [pc, #348]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008166:	430a      	orrs	r2, r1
 8008168:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800816a:	4b56      	ldr	r3, [pc, #344]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	4b55      	ldr	r3, [pc, #340]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008170:	2180      	movs	r1, #128	; 0x80
 8008172:	0049      	lsls	r1, r1, #1
 8008174:	430a      	orrs	r2, r1
 8008176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008178:	f7fc f8ea 	bl	8004350 <HAL_GetTick>
 800817c:	0003      	movs	r3, r0
 800817e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008180:	e008      	b.n	8008194 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008182:	f7fc f8e5 	bl	8004350 <HAL_GetTick>
 8008186:	0002      	movs	r2, r0
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b02      	cmp	r3, #2
 800818e:	d901      	bls.n	8008194 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e25f      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008194:	4b4b      	ldr	r3, [pc, #300]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	2380      	movs	r3, #128	; 0x80
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	4013      	ands	r3, r2
 800819e:	d0f0      	beq.n	8008182 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081a0:	4b48      	ldr	r3, [pc, #288]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	4a4a      	ldr	r2, [pc, #296]	; (80082d0 <HAL_RCC_OscConfig+0x33c>)
 80081a6:	4013      	ands	r3, r2
 80081a8:	0019      	movs	r1, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	021a      	lsls	r2, r3, #8
 80081b0:	4b44      	ldr	r3, [pc, #272]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
 80081b6:	e01b      	b.n	80081f0 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80081b8:	4b42      	ldr	r3, [pc, #264]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	4b41      	ldr	r3, [pc, #260]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80081be:	4949      	ldr	r1, [pc, #292]	; (80082e4 <HAL_RCC_OscConfig+0x350>)
 80081c0:	400a      	ands	r2, r1
 80081c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c4:	f7fc f8c4 	bl	8004350 <HAL_GetTick>
 80081c8:	0003      	movs	r3, r0
 80081ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081cc:	e008      	b.n	80081e0 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081ce:	f7fc f8bf 	bl	8004350 <HAL_GetTick>
 80081d2:	0002      	movs	r2, r0
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d901      	bls.n	80081e0 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e239      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081e0:	4b38      	ldr	r3, [pc, #224]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	2380      	movs	r3, #128	; 0x80
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	4013      	ands	r3, r2
 80081ea:	d1f0      	bne.n	80081ce <HAL_RCC_OscConfig+0x23a>
 80081ec:	e000      	b.n	80081f0 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2208      	movs	r2, #8
 80081f6:	4013      	ands	r3, r2
 80081f8:	d047      	beq.n	800828a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80081fa:	4b32      	ldr	r3, [pc, #200]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	2238      	movs	r2, #56	; 0x38
 8008200:	4013      	ands	r3, r2
 8008202:	2b18      	cmp	r3, #24
 8008204:	d10a      	bne.n	800821c <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008206:	4b2f      	ldr	r3, [pc, #188]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820a:	2202      	movs	r2, #2
 800820c:	4013      	ands	r3, r2
 800820e:	d03c      	beq.n	800828a <HAL_RCC_OscConfig+0x2f6>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d138      	bne.n	800828a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e21b      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d019      	beq.n	8008258 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008224:	4b27      	ldr	r3, [pc, #156]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008226:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008228:	4b26      	ldr	r3, [pc, #152]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 800822a:	2101      	movs	r1, #1
 800822c:	430a      	orrs	r2, r1
 800822e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008230:	f7fc f88e 	bl	8004350 <HAL_GetTick>
 8008234:	0003      	movs	r3, r0
 8008236:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008238:	e008      	b.n	800824c <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800823a:	f7fc f889 	bl	8004350 <HAL_GetTick>
 800823e:	0002      	movs	r2, r0
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d901      	bls.n	800824c <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e203      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800824c:	4b1d      	ldr	r3, [pc, #116]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 800824e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008250:	2202      	movs	r2, #2
 8008252:	4013      	ands	r3, r2
 8008254:	d0f1      	beq.n	800823a <HAL_RCC_OscConfig+0x2a6>
 8008256:	e018      	b.n	800828a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008258:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 800825a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800825c:	4b19      	ldr	r3, [pc, #100]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 800825e:	2101      	movs	r1, #1
 8008260:	438a      	bics	r2, r1
 8008262:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008264:	f7fc f874 	bl	8004350 <HAL_GetTick>
 8008268:	0003      	movs	r3, r0
 800826a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800826c:	e008      	b.n	8008280 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800826e:	f7fc f86f 	bl	8004350 <HAL_GetTick>
 8008272:	0002      	movs	r2, r0
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d901      	bls.n	8008280 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e1e9      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008280:	4b10      	ldr	r3, [pc, #64]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 8008282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008284:	2202      	movs	r2, #2
 8008286:	4013      	ands	r3, r2
 8008288:	d1f1      	bne.n	800826e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2204      	movs	r2, #4
 8008290:	4013      	ands	r3, r2
 8008292:	d100      	bne.n	8008296 <HAL_RCC_OscConfig+0x302>
 8008294:	e0c6      	b.n	8008424 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008296:	231f      	movs	r3, #31
 8008298:	18fb      	adds	r3, r7, r3
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800829e:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	2238      	movs	r2, #56	; 0x38
 80082a4:	4013      	ands	r3, r2
 80082a6:	2b20      	cmp	r3, #32
 80082a8:	d11e      	bne.n	80082e8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80082aa:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <HAL_RCC_OscConfig+0x330>)
 80082ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ae:	2202      	movs	r2, #2
 80082b0:	4013      	ands	r3, r2
 80082b2:	d100      	bne.n	80082b6 <HAL_RCC_OscConfig+0x322>
 80082b4:	e0b6      	b.n	8008424 <HAL_RCC_OscConfig+0x490>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d000      	beq.n	80082c0 <HAL_RCC_OscConfig+0x32c>
 80082be:	e0b1      	b.n	8008424 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e1c7      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
 80082c4:	40021000 	.word	0x40021000
 80082c8:	fffeffff 	.word	0xfffeffff
 80082cc:	fffbffff 	.word	0xfffbffff
 80082d0:	ffff80ff 	.word	0xffff80ff
 80082d4:	ffffc7ff 	.word	0xffffc7ff
 80082d8:	00f42400 	.word	0x00f42400
 80082dc:	20000020 	.word	0x20000020
 80082e0:	20000024 	.word	0x20000024
 80082e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80082e8:	4bb8      	ldr	r3, [pc, #736]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 80082ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082ec:	2380      	movs	r3, #128	; 0x80
 80082ee:	055b      	lsls	r3, r3, #21
 80082f0:	4013      	ands	r3, r2
 80082f2:	d101      	bne.n	80082f8 <HAL_RCC_OscConfig+0x364>
 80082f4:	2301      	movs	r3, #1
 80082f6:	e000      	b.n	80082fa <HAL_RCC_OscConfig+0x366>
 80082f8:	2300      	movs	r3, #0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d011      	beq.n	8008322 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80082fe:	4bb3      	ldr	r3, [pc, #716]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008302:	4bb2      	ldr	r3, [pc, #712]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008304:	2180      	movs	r1, #128	; 0x80
 8008306:	0549      	lsls	r1, r1, #21
 8008308:	430a      	orrs	r2, r1
 800830a:	63da      	str	r2, [r3, #60]	; 0x3c
 800830c:	4baf      	ldr	r3, [pc, #700]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 800830e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008310:	2380      	movs	r3, #128	; 0x80
 8008312:	055b      	lsls	r3, r3, #21
 8008314:	4013      	ands	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800831a:	231f      	movs	r3, #31
 800831c:	18fb      	adds	r3, r7, r3
 800831e:	2201      	movs	r2, #1
 8008320:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008322:	4bab      	ldr	r3, [pc, #684]	; (80085d0 <HAL_RCC_OscConfig+0x63c>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	2380      	movs	r3, #128	; 0x80
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	4013      	ands	r3, r2
 800832c:	d11a      	bne.n	8008364 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800832e:	4ba8      	ldr	r3, [pc, #672]	; (80085d0 <HAL_RCC_OscConfig+0x63c>)
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4ba7      	ldr	r3, [pc, #668]	; (80085d0 <HAL_RCC_OscConfig+0x63c>)
 8008334:	2180      	movs	r1, #128	; 0x80
 8008336:	0049      	lsls	r1, r1, #1
 8008338:	430a      	orrs	r2, r1
 800833a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800833c:	f7fc f808 	bl	8004350 <HAL_GetTick>
 8008340:	0003      	movs	r3, r0
 8008342:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008344:	e008      	b.n	8008358 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008346:	f7fc f803 	bl	8004350 <HAL_GetTick>
 800834a:	0002      	movs	r2, r0
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	2b02      	cmp	r3, #2
 8008352:	d901      	bls.n	8008358 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e17d      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008358:	4b9d      	ldr	r3, [pc, #628]	; (80085d0 <HAL_RCC_OscConfig+0x63c>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	2380      	movs	r3, #128	; 0x80
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	4013      	ands	r3, r2
 8008362:	d0f0      	beq.n	8008346 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d106      	bne.n	800837a <HAL_RCC_OscConfig+0x3e6>
 800836c:	4b97      	ldr	r3, [pc, #604]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 800836e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008370:	4b96      	ldr	r3, [pc, #600]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008372:	2101      	movs	r1, #1
 8008374:	430a      	orrs	r2, r1
 8008376:	65da      	str	r2, [r3, #92]	; 0x5c
 8008378:	e01c      	b.n	80083b4 <HAL_RCC_OscConfig+0x420>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	2b05      	cmp	r3, #5
 8008380:	d10c      	bne.n	800839c <HAL_RCC_OscConfig+0x408>
 8008382:	4b92      	ldr	r3, [pc, #584]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008384:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008386:	4b91      	ldr	r3, [pc, #580]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008388:	2104      	movs	r1, #4
 800838a:	430a      	orrs	r2, r1
 800838c:	65da      	str	r2, [r3, #92]	; 0x5c
 800838e:	4b8f      	ldr	r3, [pc, #572]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008390:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008392:	4b8e      	ldr	r3, [pc, #568]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008394:	2101      	movs	r1, #1
 8008396:	430a      	orrs	r2, r1
 8008398:	65da      	str	r2, [r3, #92]	; 0x5c
 800839a:	e00b      	b.n	80083b4 <HAL_RCC_OscConfig+0x420>
 800839c:	4b8b      	ldr	r3, [pc, #556]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 800839e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083a0:	4b8a      	ldr	r3, [pc, #552]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 80083a2:	2101      	movs	r1, #1
 80083a4:	438a      	bics	r2, r1
 80083a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80083a8:	4b88      	ldr	r3, [pc, #544]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 80083aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083ac:	4b87      	ldr	r3, [pc, #540]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 80083ae:	2104      	movs	r1, #4
 80083b0:	438a      	bics	r2, r1
 80083b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d014      	beq.n	80083e6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083bc:	f7fb ffc8 	bl	8004350 <HAL_GetTick>
 80083c0:	0003      	movs	r3, r0
 80083c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083c4:	e009      	b.n	80083da <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083c6:	f7fb ffc3 	bl	8004350 <HAL_GetTick>
 80083ca:	0002      	movs	r2, r0
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	4a80      	ldr	r2, [pc, #512]	; (80085d4 <HAL_RCC_OscConfig+0x640>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d901      	bls.n	80083da <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e13c      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083da:	4b7c      	ldr	r3, [pc, #496]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 80083dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083de:	2202      	movs	r2, #2
 80083e0:	4013      	ands	r3, r2
 80083e2:	d0f0      	beq.n	80083c6 <HAL_RCC_OscConfig+0x432>
 80083e4:	e013      	b.n	800840e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e6:	f7fb ffb3 	bl	8004350 <HAL_GetTick>
 80083ea:	0003      	movs	r3, r0
 80083ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80083ee:	e009      	b.n	8008404 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083f0:	f7fb ffae 	bl	8004350 <HAL_GetTick>
 80083f4:	0002      	movs	r2, r0
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	4a76      	ldr	r2, [pc, #472]	; (80085d4 <HAL_RCC_OscConfig+0x640>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d901      	bls.n	8008404 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e127      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008404:	4b71      	ldr	r3, [pc, #452]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008408:	2202      	movs	r2, #2
 800840a:	4013      	ands	r3, r2
 800840c:	d1f0      	bne.n	80083f0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800840e:	231f      	movs	r3, #31
 8008410:	18fb      	adds	r3, r7, r3
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d105      	bne.n	8008424 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008418:	4b6c      	ldr	r3, [pc, #432]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 800841a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800841c:	4b6b      	ldr	r3, [pc, #428]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 800841e:	496e      	ldr	r1, [pc, #440]	; (80085d8 <HAL_RCC_OscConfig+0x644>)
 8008420:	400a      	ands	r2, r1
 8008422:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2220      	movs	r2, #32
 800842a:	4013      	ands	r3, r2
 800842c:	d039      	beq.n	80084a2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d01b      	beq.n	800846e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008436:	4b65      	ldr	r3, [pc, #404]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	4b64      	ldr	r3, [pc, #400]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 800843c:	2180      	movs	r1, #128	; 0x80
 800843e:	03c9      	lsls	r1, r1, #15
 8008440:	430a      	orrs	r2, r1
 8008442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008444:	f7fb ff84 	bl	8004350 <HAL_GetTick>
 8008448:	0003      	movs	r3, r0
 800844a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800844c:	e008      	b.n	8008460 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800844e:	f7fb ff7f 	bl	8004350 <HAL_GetTick>
 8008452:	0002      	movs	r2, r0
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	2b02      	cmp	r3, #2
 800845a:	d901      	bls.n	8008460 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e0f9      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008460:	4b5a      	ldr	r3, [pc, #360]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	2380      	movs	r3, #128	; 0x80
 8008466:	041b      	lsls	r3, r3, #16
 8008468:	4013      	ands	r3, r2
 800846a:	d0f0      	beq.n	800844e <HAL_RCC_OscConfig+0x4ba>
 800846c:	e019      	b.n	80084a2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800846e:	4b57      	ldr	r3, [pc, #348]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	4b56      	ldr	r3, [pc, #344]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008474:	4959      	ldr	r1, [pc, #356]	; (80085dc <HAL_RCC_OscConfig+0x648>)
 8008476:	400a      	ands	r2, r1
 8008478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800847a:	f7fb ff69 	bl	8004350 <HAL_GetTick>
 800847e:	0003      	movs	r3, r0
 8008480:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008484:	f7fb ff64 	bl	8004350 <HAL_GetTick>
 8008488:	0002      	movs	r2, r0
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b02      	cmp	r3, #2
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e0de      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008496:	4b4d      	ldr	r3, [pc, #308]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	2380      	movs	r3, #128	; 0x80
 800849c:	041b      	lsls	r3, r3, #16
 800849e:	4013      	ands	r3, r2
 80084a0:	d1f0      	bne.n	8008484 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d100      	bne.n	80084ac <HAL_RCC_OscConfig+0x518>
 80084aa:	e0d2      	b.n	8008652 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084ac:	4b47      	ldr	r3, [pc, #284]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2238      	movs	r2, #56	; 0x38
 80084b2:	4013      	ands	r3, r2
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d100      	bne.n	80084ba <HAL_RCC_OscConfig+0x526>
 80084b8:	e081      	b.n	80085be <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d156      	bne.n	8008570 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084c2:	4b42      	ldr	r3, [pc, #264]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	4b41      	ldr	r3, [pc, #260]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 80084c8:	4945      	ldr	r1, [pc, #276]	; (80085e0 <HAL_RCC_OscConfig+0x64c>)
 80084ca:	400a      	ands	r2, r1
 80084cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ce:	f7fb ff3f 	bl	8004350 <HAL_GetTick>
 80084d2:	0003      	movs	r3, r0
 80084d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084d6:	e008      	b.n	80084ea <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084d8:	f7fb ff3a 	bl	8004350 <HAL_GetTick>
 80084dc:	0002      	movs	r2, r0
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e0b4      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084ea:	4b38      	ldr	r3, [pc, #224]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	2380      	movs	r3, #128	; 0x80
 80084f0:	049b      	lsls	r3, r3, #18
 80084f2:	4013      	ands	r3, r2
 80084f4:	d1f0      	bne.n	80084d8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084f6:	4b35      	ldr	r3, [pc, #212]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	4a3a      	ldr	r2, [pc, #232]	; (80085e4 <HAL_RCC_OscConfig+0x650>)
 80084fc:	4013      	ands	r3, r2
 80084fe:	0019      	movs	r1, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	431a      	orrs	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	021b      	lsls	r3, r3, #8
 8008510:	431a      	orrs	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008516:	431a      	orrs	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851c:	431a      	orrs	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	431a      	orrs	r2, r3
 8008524:	4b29      	ldr	r3, [pc, #164]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008526:	430a      	orrs	r2, r1
 8008528:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800852a:	4b28      	ldr	r3, [pc, #160]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	4b27      	ldr	r3, [pc, #156]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008530:	2180      	movs	r1, #128	; 0x80
 8008532:	0449      	lsls	r1, r1, #17
 8008534:	430a      	orrs	r2, r1
 8008536:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008538:	4b24      	ldr	r3, [pc, #144]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	4b23      	ldr	r3, [pc, #140]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 800853e:	2180      	movs	r1, #128	; 0x80
 8008540:	0549      	lsls	r1, r1, #21
 8008542:	430a      	orrs	r2, r1
 8008544:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008546:	f7fb ff03 	bl	8004350 <HAL_GetTick>
 800854a:	0003      	movs	r3, r0
 800854c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800854e:	e008      	b.n	8008562 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008550:	f7fb fefe 	bl	8004350 <HAL_GetTick>
 8008554:	0002      	movs	r2, r0
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b02      	cmp	r3, #2
 800855c:	d901      	bls.n	8008562 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e078      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008562:	4b1a      	ldr	r3, [pc, #104]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	2380      	movs	r3, #128	; 0x80
 8008568:	049b      	lsls	r3, r3, #18
 800856a:	4013      	ands	r3, r2
 800856c:	d0f0      	beq.n	8008550 <HAL_RCC_OscConfig+0x5bc>
 800856e:	e070      	b.n	8008652 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008570:	4b16      	ldr	r3, [pc, #88]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	4b15      	ldr	r3, [pc, #84]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008576:	491a      	ldr	r1, [pc, #104]	; (80085e0 <HAL_RCC_OscConfig+0x64c>)
 8008578:	400a      	ands	r2, r1
 800857a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800857c:	4b13      	ldr	r3, [pc, #76]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 800857e:	68da      	ldr	r2, [r3, #12]
 8008580:	4b12      	ldr	r3, [pc, #72]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 8008582:	2103      	movs	r1, #3
 8008584:	438a      	bics	r2, r1
 8008586:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008588:	4b10      	ldr	r3, [pc, #64]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 800858e:	4916      	ldr	r1, [pc, #88]	; (80085e8 <HAL_RCC_OscConfig+0x654>)
 8008590:	400a      	ands	r2, r1
 8008592:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008594:	f7fb fedc 	bl	8004350 <HAL_GetTick>
 8008598:	0003      	movs	r3, r0
 800859a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800859c:	e008      	b.n	80085b0 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800859e:	f7fb fed7 	bl	8004350 <HAL_GetTick>
 80085a2:	0002      	movs	r2, r0
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e051      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085b0:	4b06      	ldr	r3, [pc, #24]	; (80085cc <HAL_RCC_OscConfig+0x638>)
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	2380      	movs	r3, #128	; 0x80
 80085b6:	049b      	lsls	r3, r3, #18
 80085b8:	4013      	ands	r3, r2
 80085ba:	d1f0      	bne.n	800859e <HAL_RCC_OscConfig+0x60a>
 80085bc:	e049      	b.n	8008652 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d112      	bne.n	80085ec <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e044      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
 80085ca:	46c0      	nop			; (mov r8, r8)
 80085cc:	40021000 	.word	0x40021000
 80085d0:	40007000 	.word	0x40007000
 80085d4:	00001388 	.word	0x00001388
 80085d8:	efffffff 	.word	0xefffffff
 80085dc:	ffbfffff 	.word	0xffbfffff
 80085e0:	feffffff 	.word	0xfeffffff
 80085e4:	11c1808c 	.word	0x11c1808c
 80085e8:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80085ec:	4b1b      	ldr	r3, [pc, #108]	; (800865c <HAL_RCC_OscConfig+0x6c8>)
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2203      	movs	r2, #3
 80085f6:	401a      	ands	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d126      	bne.n	800864e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	2270      	movs	r2, #112	; 0x70
 8008604:	401a      	ands	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800860a:	429a      	cmp	r2, r3
 800860c:	d11f      	bne.n	800864e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	23fe      	movs	r3, #254	; 0xfe
 8008612:	01db      	lsls	r3, r3, #7
 8008614:	401a      	ands	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800861c:	429a      	cmp	r2, r3
 800861e:	d116      	bne.n	800864e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	23f8      	movs	r3, #248	; 0xf8
 8008624:	039b      	lsls	r3, r3, #14
 8008626:	401a      	ands	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800862c:	429a      	cmp	r2, r3
 800862e:	d10e      	bne.n	800864e <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	23e0      	movs	r3, #224	; 0xe0
 8008634:	051b      	lsls	r3, r3, #20
 8008636:	401a      	ands	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800863c:	429a      	cmp	r2, r3
 800863e:	d106      	bne.n	800864e <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	0f5b      	lsrs	r3, r3, #29
 8008644:	075a      	lsls	r2, r3, #29
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800864a:	429a      	cmp	r2, r3
 800864c:	d001      	beq.n	8008652 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e000      	b.n	8008654 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	0018      	movs	r0, r3
 8008656:	46bd      	mov	sp, r7
 8008658:	b008      	add	sp, #32
 800865a:	bd80      	pop	{r7, pc}
 800865c:	40021000 	.word	0x40021000

08008660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e0e9      	b.n	8008848 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008674:	4b76      	ldr	r3, [pc, #472]	; (8008850 <HAL_RCC_ClockConfig+0x1f0>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2207      	movs	r2, #7
 800867a:	4013      	ands	r3, r2
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	429a      	cmp	r2, r3
 8008680:	d91e      	bls.n	80086c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008682:	4b73      	ldr	r3, [pc, #460]	; (8008850 <HAL_RCC_ClockConfig+0x1f0>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2207      	movs	r2, #7
 8008688:	4393      	bics	r3, r2
 800868a:	0019      	movs	r1, r3
 800868c:	4b70      	ldr	r3, [pc, #448]	; (8008850 <HAL_RCC_ClockConfig+0x1f0>)
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008694:	f7fb fe5c 	bl	8004350 <HAL_GetTick>
 8008698:	0003      	movs	r3, r0
 800869a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800869c:	e009      	b.n	80086b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800869e:	f7fb fe57 	bl	8004350 <HAL_GetTick>
 80086a2:	0002      	movs	r2, r0
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	4a6a      	ldr	r2, [pc, #424]	; (8008854 <HAL_RCC_ClockConfig+0x1f4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d901      	bls.n	80086b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e0ca      	b.n	8008848 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80086b2:	4b67      	ldr	r3, [pc, #412]	; (8008850 <HAL_RCC_ClockConfig+0x1f0>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2207      	movs	r2, #7
 80086b8:	4013      	ands	r3, r2
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d1ee      	bne.n	800869e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2202      	movs	r2, #2
 80086c6:	4013      	ands	r3, r2
 80086c8:	d015      	beq.n	80086f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2204      	movs	r2, #4
 80086d0:	4013      	ands	r3, r2
 80086d2:	d006      	beq.n	80086e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80086d4:	4b60      	ldr	r3, [pc, #384]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	4b5f      	ldr	r3, [pc, #380]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 80086da:	21e0      	movs	r1, #224	; 0xe0
 80086dc:	01c9      	lsls	r1, r1, #7
 80086de:	430a      	orrs	r2, r1
 80086e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086e2:	4b5d      	ldr	r3, [pc, #372]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	4a5d      	ldr	r2, [pc, #372]	; (800885c <HAL_RCC_ClockConfig+0x1fc>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	0019      	movs	r1, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	4b59      	ldr	r3, [pc, #356]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 80086f2:	430a      	orrs	r2, r1
 80086f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2201      	movs	r2, #1
 80086fc:	4013      	ands	r3, r2
 80086fe:	d057      	beq.n	80087b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d107      	bne.n	8008718 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008708:	4b53      	ldr	r3, [pc, #332]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	2380      	movs	r3, #128	; 0x80
 800870e:	029b      	lsls	r3, r3, #10
 8008710:	4013      	ands	r3, r2
 8008712:	d12b      	bne.n	800876c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e097      	b.n	8008848 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	2b02      	cmp	r3, #2
 800871e:	d107      	bne.n	8008730 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008720:	4b4d      	ldr	r3, [pc, #308]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	2380      	movs	r3, #128	; 0x80
 8008726:	049b      	lsls	r3, r3, #18
 8008728:	4013      	ands	r3, r2
 800872a:	d11f      	bne.n	800876c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e08b      	b.n	8008848 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d107      	bne.n	8008748 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008738:	4b47      	ldr	r3, [pc, #284]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	2380      	movs	r3, #128	; 0x80
 800873e:	00db      	lsls	r3, r3, #3
 8008740:	4013      	ands	r3, r2
 8008742:	d113      	bne.n	800876c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e07f      	b.n	8008848 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b03      	cmp	r3, #3
 800874e:	d106      	bne.n	800875e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008750:	4b41      	ldr	r3, [pc, #260]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 8008752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008754:	2202      	movs	r2, #2
 8008756:	4013      	ands	r3, r2
 8008758:	d108      	bne.n	800876c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e074      	b.n	8008848 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800875e:	4b3e      	ldr	r3, [pc, #248]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 8008760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008762:	2202      	movs	r2, #2
 8008764:	4013      	ands	r3, r2
 8008766:	d101      	bne.n	800876c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e06d      	b.n	8008848 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800876c:	4b3a      	ldr	r3, [pc, #232]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	2207      	movs	r2, #7
 8008772:	4393      	bics	r3, r2
 8008774:	0019      	movs	r1, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	4b37      	ldr	r3, [pc, #220]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 800877c:	430a      	orrs	r2, r1
 800877e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008780:	f7fb fde6 	bl	8004350 <HAL_GetTick>
 8008784:	0003      	movs	r3, r0
 8008786:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008788:	e009      	b.n	800879e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800878a:	f7fb fde1 	bl	8004350 <HAL_GetTick>
 800878e:	0002      	movs	r2, r0
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	4a2f      	ldr	r2, [pc, #188]	; (8008854 <HAL_RCC_ClockConfig+0x1f4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d901      	bls.n	800879e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e054      	b.n	8008848 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800879e:	4b2e      	ldr	r3, [pc, #184]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	2238      	movs	r2, #56	; 0x38
 80087a4:	401a      	ands	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	00db      	lsls	r3, r3, #3
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d1ec      	bne.n	800878a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087b0:	4b27      	ldr	r3, [pc, #156]	; (8008850 <HAL_RCC_ClockConfig+0x1f0>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2207      	movs	r2, #7
 80087b6:	4013      	ands	r3, r2
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d21e      	bcs.n	80087fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087be:	4b24      	ldr	r3, [pc, #144]	; (8008850 <HAL_RCC_ClockConfig+0x1f0>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2207      	movs	r2, #7
 80087c4:	4393      	bics	r3, r2
 80087c6:	0019      	movs	r1, r3
 80087c8:	4b21      	ldr	r3, [pc, #132]	; (8008850 <HAL_RCC_ClockConfig+0x1f0>)
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80087d0:	f7fb fdbe 	bl	8004350 <HAL_GetTick>
 80087d4:	0003      	movs	r3, r0
 80087d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80087d8:	e009      	b.n	80087ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087da:	f7fb fdb9 	bl	8004350 <HAL_GetTick>
 80087de:	0002      	movs	r2, r0
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	4a1b      	ldr	r2, [pc, #108]	; (8008854 <HAL_RCC_ClockConfig+0x1f4>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e02c      	b.n	8008848 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80087ee:	4b18      	ldr	r3, [pc, #96]	; (8008850 <HAL_RCC_ClockConfig+0x1f0>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2207      	movs	r2, #7
 80087f4:	4013      	ands	r3, r2
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d1ee      	bne.n	80087da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2204      	movs	r2, #4
 8008802:	4013      	ands	r3, r2
 8008804:	d009      	beq.n	800881a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008806:	4b14      	ldr	r3, [pc, #80]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	4a15      	ldr	r2, [pc, #84]	; (8008860 <HAL_RCC_ClockConfig+0x200>)
 800880c:	4013      	ands	r3, r2
 800880e:	0019      	movs	r1, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	4b10      	ldr	r3, [pc, #64]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 8008816:	430a      	orrs	r2, r1
 8008818:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800881a:	f000 f829 	bl	8008870 <HAL_RCC_GetSysClockFreq>
 800881e:	0001      	movs	r1, r0
 8008820:	4b0d      	ldr	r3, [pc, #52]	; (8008858 <HAL_RCC_ClockConfig+0x1f8>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	0a1b      	lsrs	r3, r3, #8
 8008826:	220f      	movs	r2, #15
 8008828:	401a      	ands	r2, r3
 800882a:	4b0e      	ldr	r3, [pc, #56]	; (8008864 <HAL_RCC_ClockConfig+0x204>)
 800882c:	0092      	lsls	r2, r2, #2
 800882e:	58d3      	ldr	r3, [r2, r3]
 8008830:	221f      	movs	r2, #31
 8008832:	4013      	ands	r3, r2
 8008834:	000a      	movs	r2, r1
 8008836:	40da      	lsrs	r2, r3
 8008838:	4b0b      	ldr	r3, [pc, #44]	; (8008868 <HAL_RCC_ClockConfig+0x208>)
 800883a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800883c:	4b0b      	ldr	r3, [pc, #44]	; (800886c <HAL_RCC_ClockConfig+0x20c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	0018      	movs	r0, r3
 8008842:	f7fb fd29 	bl	8004298 <HAL_InitTick>
 8008846:	0003      	movs	r3, r0
}
 8008848:	0018      	movs	r0, r3
 800884a:	46bd      	mov	sp, r7
 800884c:	b004      	add	sp, #16
 800884e:	bd80      	pop	{r7, pc}
 8008850:	40022000 	.word	0x40022000
 8008854:	00001388 	.word	0x00001388
 8008858:	40021000 	.word	0x40021000
 800885c:	fffff0ff 	.word	0xfffff0ff
 8008860:	ffff8fff 	.word	0xffff8fff
 8008864:	0800ed40 	.word	0x0800ed40
 8008868:	20000020 	.word	0x20000020
 800886c:	20000024 	.word	0x20000024

08008870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008876:	4b3c      	ldr	r3, [pc, #240]	; (8008968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	2238      	movs	r2, #56	; 0x38
 800887c:	4013      	ands	r3, r2
 800887e:	d10f      	bne.n	80088a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008880:	4b39      	ldr	r3, [pc, #228]	; (8008968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	0adb      	lsrs	r3, r3, #11
 8008886:	2207      	movs	r2, #7
 8008888:	4013      	ands	r3, r2
 800888a:	2201      	movs	r2, #1
 800888c:	409a      	lsls	r2, r3
 800888e:	0013      	movs	r3, r2
 8008890:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	4835      	ldr	r0, [pc, #212]	; (800896c <HAL_RCC_GetSysClockFreq+0xfc>)
 8008896:	f7f7 fc51 	bl	800013c <__udivsi3>
 800889a:	0003      	movs	r3, r0
 800889c:	613b      	str	r3, [r7, #16]
 800889e:	e05d      	b.n	800895c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088a0:	4b31      	ldr	r3, [pc, #196]	; (8008968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	2238      	movs	r2, #56	; 0x38
 80088a6:	4013      	ands	r3, r2
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d102      	bne.n	80088b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80088ac:	4b30      	ldr	r3, [pc, #192]	; (8008970 <HAL_RCC_GetSysClockFreq+0x100>)
 80088ae:	613b      	str	r3, [r7, #16]
 80088b0:	e054      	b.n	800895c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088b2:	4b2d      	ldr	r3, [pc, #180]	; (8008968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	2238      	movs	r2, #56	; 0x38
 80088b8:	4013      	ands	r3, r2
 80088ba:	2b10      	cmp	r3, #16
 80088bc:	d138      	bne.n	8008930 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80088be:	4b2a      	ldr	r3, [pc, #168]	; (8008968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	2203      	movs	r2, #3
 80088c4:	4013      	ands	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80088c8:	4b27      	ldr	r3, [pc, #156]	; (8008968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	091b      	lsrs	r3, r3, #4
 80088ce:	2207      	movs	r2, #7
 80088d0:	4013      	ands	r3, r2
 80088d2:	3301      	adds	r3, #1
 80088d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d10d      	bne.n	80088f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088dc:	68b9      	ldr	r1, [r7, #8]
 80088de:	4824      	ldr	r0, [pc, #144]	; (8008970 <HAL_RCC_GetSysClockFreq+0x100>)
 80088e0:	f7f7 fc2c 	bl	800013c <__udivsi3>
 80088e4:	0003      	movs	r3, r0
 80088e6:	0019      	movs	r1, r3
 80088e8:	4b1f      	ldr	r3, [pc, #124]	; (8008968 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	0a1b      	lsrs	r3, r3, #8
 80088ee:	227f      	movs	r2, #127	; 0x7f
 80088f0:	4013      	ands	r3, r2
 80088f2:	434b      	muls	r3, r1
 80088f4:	617b      	str	r3, [r7, #20]
        break;
 80088f6:	e00d      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80088f8:	68b9      	ldr	r1, [r7, #8]
 80088fa:	481c      	ldr	r0, [pc, #112]	; (800896c <HAL_RCC_GetSysClockFreq+0xfc>)
 80088fc:	f7f7 fc1e 	bl	800013c <__udivsi3>
 8008900:	0003      	movs	r3, r0
 8008902:	0019      	movs	r1, r3
 8008904:	4b18      	ldr	r3, [pc, #96]	; (8008968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	0a1b      	lsrs	r3, r3, #8
 800890a:	227f      	movs	r2, #127	; 0x7f
 800890c:	4013      	ands	r3, r2
 800890e:	434b      	muls	r3, r1
 8008910:	617b      	str	r3, [r7, #20]
        break;
 8008912:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008914:	4b14      	ldr	r3, [pc, #80]	; (8008968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	0f5b      	lsrs	r3, r3, #29
 800891a:	2207      	movs	r2, #7
 800891c:	4013      	ands	r3, r2
 800891e:	3301      	adds	r3, #1
 8008920:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	6978      	ldr	r0, [r7, #20]
 8008926:	f7f7 fc09 	bl	800013c <__udivsi3>
 800892a:	0003      	movs	r3, r0
 800892c:	613b      	str	r3, [r7, #16]
 800892e:	e015      	b.n	800895c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008930:	4b0d      	ldr	r3, [pc, #52]	; (8008968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	2238      	movs	r2, #56	; 0x38
 8008936:	4013      	ands	r3, r2
 8008938:	2b20      	cmp	r3, #32
 800893a:	d103      	bne.n	8008944 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800893c:	2380      	movs	r3, #128	; 0x80
 800893e:	021b      	lsls	r3, r3, #8
 8008940:	613b      	str	r3, [r7, #16]
 8008942:	e00b      	b.n	800895c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008944:	4b08      	ldr	r3, [pc, #32]	; (8008968 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	2238      	movs	r2, #56	; 0x38
 800894a:	4013      	ands	r3, r2
 800894c:	2b18      	cmp	r3, #24
 800894e:	d103      	bne.n	8008958 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008950:	23fa      	movs	r3, #250	; 0xfa
 8008952:	01db      	lsls	r3, r3, #7
 8008954:	613b      	str	r3, [r7, #16]
 8008956:	e001      	b.n	800895c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008958:	2300      	movs	r3, #0
 800895a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800895c:	693b      	ldr	r3, [r7, #16]
}
 800895e:	0018      	movs	r0, r3
 8008960:	46bd      	mov	sp, r7
 8008962:	b006      	add	sp, #24
 8008964:	bd80      	pop	{r7, pc}
 8008966:	46c0      	nop			; (mov r8, r8)
 8008968:	40021000 	.word	0x40021000
 800896c:	00f42400 	.word	0x00f42400
 8008970:	007a1200 	.word	0x007a1200

08008974 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008978:	4b02      	ldr	r3, [pc, #8]	; (8008984 <HAL_RCC_GetHCLKFreq+0x10>)
 800897a:	681b      	ldr	r3, [r3, #0]
}
 800897c:	0018      	movs	r0, r3
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	46c0      	nop			; (mov r8, r8)
 8008984:	20000020 	.word	0x20000020

08008988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008988:	b5b0      	push	{r4, r5, r7, lr}
 800898a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800898c:	f7ff fff2 	bl	8008974 <HAL_RCC_GetHCLKFreq>
 8008990:	0004      	movs	r4, r0
 8008992:	f7ff faf3 	bl	8007f7c <LL_RCC_GetAPB1Prescaler>
 8008996:	0003      	movs	r3, r0
 8008998:	0b1a      	lsrs	r2, r3, #12
 800899a:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800899c:	0092      	lsls	r2, r2, #2
 800899e:	58d3      	ldr	r3, [r2, r3]
 80089a0:	221f      	movs	r2, #31
 80089a2:	4013      	ands	r3, r2
 80089a4:	40dc      	lsrs	r4, r3
 80089a6:	0023      	movs	r3, r4
}
 80089a8:	0018      	movs	r0, r3
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bdb0      	pop	{r4, r5, r7, pc}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	0800ed80 	.word	0x0800ed80

080089b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80089bc:	2313      	movs	r3, #19
 80089be:	18fb      	adds	r3, r7, r3
 80089c0:	2200      	movs	r2, #0
 80089c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80089c4:	2312      	movs	r3, #18
 80089c6:	18fb      	adds	r3, r7, r3
 80089c8:	2200      	movs	r2, #0
 80089ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	2380      	movs	r3, #128	; 0x80
 80089d2:	029b      	lsls	r3, r3, #10
 80089d4:	4013      	ands	r3, r2
 80089d6:	d100      	bne.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80089d8:	e0ad      	b.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089da:	2011      	movs	r0, #17
 80089dc:	183b      	adds	r3, r7, r0
 80089de:	2200      	movs	r2, #0
 80089e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089e2:	4b47      	ldr	r3, [pc, #284]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80089e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089e6:	2380      	movs	r3, #128	; 0x80
 80089e8:	055b      	lsls	r3, r3, #21
 80089ea:	4013      	ands	r3, r2
 80089ec:	d110      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089ee:	4b44      	ldr	r3, [pc, #272]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80089f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089f2:	4b43      	ldr	r3, [pc, #268]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80089f4:	2180      	movs	r1, #128	; 0x80
 80089f6:	0549      	lsls	r1, r1, #21
 80089f8:	430a      	orrs	r2, r1
 80089fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80089fc:	4b40      	ldr	r3, [pc, #256]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80089fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a00:	2380      	movs	r3, #128	; 0x80
 8008a02:	055b      	lsls	r3, r3, #21
 8008a04:	4013      	ands	r3, r2
 8008a06:	60bb      	str	r3, [r7, #8]
 8008a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a0a:	183b      	adds	r3, r7, r0
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a10:	4b3c      	ldr	r3, [pc, #240]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	4b3b      	ldr	r3, [pc, #236]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008a16:	2180      	movs	r1, #128	; 0x80
 8008a18:	0049      	lsls	r1, r1, #1
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a1e:	f7fb fc97 	bl	8004350 <HAL_GetTick>
 8008a22:	0003      	movs	r3, r0
 8008a24:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a26:	e00b      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a28:	f7fb fc92 	bl	8004350 <HAL_GetTick>
 8008a2c:	0002      	movs	r2, r0
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d904      	bls.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008a36:	2313      	movs	r3, #19
 8008a38:	18fb      	adds	r3, r7, r3
 8008a3a:	2203      	movs	r2, #3
 8008a3c:	701a      	strb	r2, [r3, #0]
        break;
 8008a3e:	e005      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a40:	4b30      	ldr	r3, [pc, #192]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	2380      	movs	r3, #128	; 0x80
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	4013      	ands	r3, r2
 8008a4a:	d0ed      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008a4c:	2313      	movs	r3, #19
 8008a4e:	18fb      	adds	r3, r7, r3
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d15e      	bne.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008a56:	4b2a      	ldr	r3, [pc, #168]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a5a:	23c0      	movs	r3, #192	; 0xc0
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4013      	ands	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d019      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d014      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008a72:	4b23      	ldr	r3, [pc, #140]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a76:	4a24      	ldr	r2, [pc, #144]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8008a78:	4013      	ands	r3, r2
 8008a7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a7c:	4b20      	ldr	r3, [pc, #128]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a80:	4b1f      	ldr	r3, [pc, #124]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a82:	2180      	movs	r1, #128	; 0x80
 8008a84:	0249      	lsls	r1, r1, #9
 8008a86:	430a      	orrs	r2, r1
 8008a88:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a8a:	4b1d      	ldr	r3, [pc, #116]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a8e:	4b1c      	ldr	r3, [pc, #112]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a90:	491e      	ldr	r1, [pc, #120]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8008a92:	400a      	ands	r2, r1
 8008a94:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008a96:	4b1a      	ldr	r3, [pc, #104]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	d016      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa4:	f7fb fc54 	bl	8004350 <HAL_GetTick>
 8008aa8:	0003      	movs	r3, r0
 8008aaa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008aac:	e00c      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aae:	f7fb fc4f 	bl	8004350 <HAL_GetTick>
 8008ab2:	0002      	movs	r2, r0
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	4a15      	ldr	r2, [pc, #84]	; (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d904      	bls.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008abe:	2313      	movs	r3, #19
 8008ac0:	18fb      	adds	r3, r7, r3
 8008ac2:	2203      	movs	r2, #3
 8008ac4:	701a      	strb	r2, [r3, #0]
            break;
 8008ac6:	e004      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ac8:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008acc:	2202      	movs	r2, #2
 8008ace:	4013      	ands	r3, r2
 8008ad0:	d0ed      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008ad2:	2313      	movs	r3, #19
 8008ad4:	18fb      	adds	r3, r7, r3
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008adc:	4b08      	ldr	r3, [pc, #32]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ae0:	4a09      	ldr	r2, [pc, #36]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	0019      	movs	r1, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008aea:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008aec:	430a      	orrs	r2, r1
 8008aee:	65da      	str	r2, [r3, #92]	; 0x5c
 8008af0:	e016      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008af2:	2312      	movs	r3, #18
 8008af4:	18fb      	adds	r3, r7, r3
 8008af6:	2213      	movs	r2, #19
 8008af8:	18ba      	adds	r2, r7, r2
 8008afa:	7812      	ldrb	r2, [r2, #0]
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	e00f      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008b00:	40021000 	.word	0x40021000
 8008b04:	40007000 	.word	0x40007000
 8008b08:	fffffcff 	.word	0xfffffcff
 8008b0c:	fffeffff 	.word	0xfffeffff
 8008b10:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b14:	2312      	movs	r3, #18
 8008b16:	18fb      	adds	r3, r7, r3
 8008b18:	2213      	movs	r2, #19
 8008b1a:	18ba      	adds	r2, r7, r2
 8008b1c:	7812      	ldrb	r2, [r2, #0]
 8008b1e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b20:	2311      	movs	r3, #17
 8008b22:	18fb      	adds	r3, r7, r3
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d105      	bne.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b2a:	4bb6      	ldr	r3, [pc, #728]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b2e:	4bb5      	ldr	r3, [pc, #724]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b30:	49b5      	ldr	r1, [pc, #724]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8008b32:	400a      	ands	r2, r1
 8008b34:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	d009      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b40:	4bb0      	ldr	r3, [pc, #704]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b44:	2203      	movs	r2, #3
 8008b46:	4393      	bics	r3, r2
 8008b48:	0019      	movs	r1, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	4bad      	ldr	r3, [pc, #692]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b50:	430a      	orrs	r2, r1
 8008b52:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2202      	movs	r2, #2
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	d009      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b5e:	4ba9      	ldr	r3, [pc, #676]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b62:	220c      	movs	r2, #12
 8008b64:	4393      	bics	r3, r2
 8008b66:	0019      	movs	r1, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	4ba5      	ldr	r3, [pc, #660]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2204      	movs	r2, #4
 8008b78:	4013      	ands	r3, r2
 8008b7a:	d009      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008b7c:	4ba1      	ldr	r3, [pc, #644]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b80:	2230      	movs	r2, #48	; 0x30
 8008b82:	4393      	bics	r3, r2
 8008b84:	0019      	movs	r1, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	4b9e      	ldr	r3, [pc, #632]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2210      	movs	r2, #16
 8008b96:	4013      	ands	r3, r2
 8008b98:	d009      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b9a:	4b9a      	ldr	r3, [pc, #616]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9e:	4a9b      	ldr	r2, [pc, #620]	; (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	0019      	movs	r1, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	4b96      	ldr	r3, [pc, #600]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008baa:	430a      	orrs	r2, r1
 8008bac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	2380      	movs	r3, #128	; 0x80
 8008bb4:	015b      	lsls	r3, r3, #5
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	d009      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8008bba:	4b92      	ldr	r3, [pc, #584]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bbe:	4a94      	ldr	r2, [pc, #592]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	0019      	movs	r1, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	695a      	ldr	r2, [r3, #20]
 8008bc8:	4b8e      	ldr	r3, [pc, #568]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	2380      	movs	r3, #128	; 0x80
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	d009      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bda:	4b8a      	ldr	r3, [pc, #552]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bde:	4a8d      	ldr	r2, [pc, #564]	; (8008e14 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8008be0:	4013      	ands	r3, r2
 8008be2:	0019      	movs	r1, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008be8:	4b86      	ldr	r3, [pc, #536]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bea:	430a      	orrs	r2, r1
 8008bec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	2380      	movs	r3, #128	; 0x80
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	d009      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bfa:	4b82      	ldr	r3, [pc, #520]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfe:	4a86      	ldr	r2, [pc, #536]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8008c00:	4013      	ands	r3, r2
 8008c02:	0019      	movs	r1, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c08:	4b7e      	ldr	r3, [pc, #504]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2220      	movs	r2, #32
 8008c14:	4013      	ands	r3, r2
 8008c16:	d009      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c18:	4b7a      	ldr	r3, [pc, #488]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1c:	4a7f      	ldr	r2, [pc, #508]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008c1e:	4013      	ands	r3, r2
 8008c20:	0019      	movs	r1, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	699a      	ldr	r2, [r3, #24]
 8008c26:	4b77      	ldr	r3, [pc, #476]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2240      	movs	r2, #64	; 0x40
 8008c32:	4013      	ands	r3, r2
 8008c34:	d009      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008c36:	4b73      	ldr	r3, [pc, #460]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3a:	4a79      	ldr	r2, [pc, #484]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	0019      	movs	r1, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	69da      	ldr	r2, [r3, #28]
 8008c44:	4b6f      	ldr	r3, [pc, #444]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c46:	430a      	orrs	r2, r1
 8008c48:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	2380      	movs	r3, #128	; 0x80
 8008c50:	01db      	lsls	r3, r3, #7
 8008c52:	4013      	ands	r3, r2
 8008c54:	d015      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c56:	4b6b      	ldr	r3, [pc, #428]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	0899      	lsrs	r1, r3, #2
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c62:	4b68      	ldr	r3, [pc, #416]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c64:	430a      	orrs	r2, r1
 8008c66:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c6c:	2380      	movs	r3, #128	; 0x80
 8008c6e:	05db      	lsls	r3, r3, #23
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d106      	bne.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008c74:	4b63      	ldr	r3, [pc, #396]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c76:	68da      	ldr	r2, [r3, #12]
 8008c78:	4b62      	ldr	r3, [pc, #392]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c7a:	2180      	movs	r1, #128	; 0x80
 8008c7c:	0249      	lsls	r1, r1, #9
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	2380      	movs	r3, #128	; 0x80
 8008c88:	031b      	lsls	r3, r3, #12
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	d009      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c8e:	4b5d      	ldr	r3, [pc, #372]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c92:	2240      	movs	r2, #64	; 0x40
 8008c94:	4393      	bics	r3, r2
 8008c96:	0019      	movs	r1, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c9c:	4b59      	ldr	r3, [pc, #356]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	2380      	movs	r3, #128	; 0x80
 8008ca8:	039b      	lsls	r3, r3, #14
 8008caa:	4013      	ands	r3, r2
 8008cac:	d016      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008cae:	4b55      	ldr	r3, [pc, #340]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb2:	4a5c      	ldr	r2, [pc, #368]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	0019      	movs	r1, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cbc:	4b51      	ldr	r3, [pc, #324]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc6:	2380      	movs	r3, #128	; 0x80
 8008cc8:	03db      	lsls	r3, r3, #15
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d106      	bne.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008cce:	4b4d      	ldr	r3, [pc, #308]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cd0:	68da      	ldr	r2, [r3, #12]
 8008cd2:	4b4c      	ldr	r3, [pc, #304]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cd4:	2180      	movs	r1, #128	; 0x80
 8008cd6:	0449      	lsls	r1, r1, #17
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	2380      	movs	r3, #128	; 0x80
 8008ce2:	03db      	lsls	r3, r3, #15
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	d016      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008ce8:	4b46      	ldr	r3, [pc, #280]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cec:	4a4e      	ldr	r2, [pc, #312]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008cee:	4013      	ands	r3, r2
 8008cf0:	0019      	movs	r1, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf6:	4b43      	ldr	r3, [pc, #268]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d00:	2380      	movs	r3, #128	; 0x80
 8008d02:	045b      	lsls	r3, r3, #17
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d106      	bne.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008d08:	4b3e      	ldr	r3, [pc, #248]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	4b3d      	ldr	r3, [pc, #244]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d0e:	2180      	movs	r1, #128	; 0x80
 8008d10:	0449      	lsls	r1, r1, #17
 8008d12:	430a      	orrs	r2, r1
 8008d14:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	2380      	movs	r3, #128	; 0x80
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	4013      	ands	r3, r2
 8008d20:	d014      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008d22:	4b38      	ldr	r3, [pc, #224]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d26:	2203      	movs	r2, #3
 8008d28:	4393      	bics	r3, r2
 8008d2a:	0019      	movs	r1, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a1a      	ldr	r2, [r3, #32]
 8008d30:	4b34      	ldr	r3, [pc, #208]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d32:	430a      	orrs	r2, r1
 8008d34:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d106      	bne.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008d3e:	4b31      	ldr	r3, [pc, #196]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	4b30      	ldr	r3, [pc, #192]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d44:	2180      	movs	r1, #128	; 0x80
 8008d46:	0249      	lsls	r1, r1, #9
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	2380      	movs	r3, #128	; 0x80
 8008d52:	019b      	lsls	r3, r3, #6
 8008d54:	4013      	ands	r3, r2
 8008d56:	d014      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008d58:	4b2a      	ldr	r3, [pc, #168]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d5c:	220c      	movs	r2, #12
 8008d5e:	4393      	bics	r3, r2
 8008d60:	0019      	movs	r1, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d66:	4b27      	ldr	r3, [pc, #156]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d106      	bne.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008d74:	4b23      	ldr	r3, [pc, #140]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	4b22      	ldr	r3, [pc, #136]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d7a:	2180      	movs	r1, #128	; 0x80
 8008d7c:	0249      	lsls	r1, r1, #9
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	2380      	movs	r3, #128	; 0x80
 8008d88:	045b      	lsls	r3, r3, #17
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	d016      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d8e:	4b1d      	ldr	r3, [pc, #116]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d92:	4a22      	ldr	r2, [pc, #136]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d94:	4013      	ands	r3, r2
 8008d96:	0019      	movs	r1, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d9c:	4b19      	ldr	r3, [pc, #100]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008da6:	2380      	movs	r3, #128	; 0x80
 8008da8:	019b      	lsls	r3, r3, #6
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d106      	bne.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008dae:	4b15      	ldr	r3, [pc, #84]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008db0:	68da      	ldr	r2, [r3, #12]
 8008db2:	4b14      	ldr	r3, [pc, #80]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008db4:	2180      	movs	r1, #128	; 0x80
 8008db6:	0449      	lsls	r1, r1, #17
 8008db8:	430a      	orrs	r2, r1
 8008dba:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	2380      	movs	r3, #128	; 0x80
 8008dc2:	049b      	lsls	r3, r3, #18
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	d016      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008dc8:	4b0e      	ldr	r3, [pc, #56]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dcc:	4a10      	ldr	r2, [pc, #64]	; (8008e10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008dce:	4013      	ands	r3, r2
 8008dd0:	0019      	movs	r1, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008de0:	2380      	movs	r3, #128	; 0x80
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d106      	bne.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008de8:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008dee:	2180      	movs	r1, #128	; 0x80
 8008df0:	0449      	lsls	r1, r1, #17
 8008df2:	430a      	orrs	r2, r1
 8008df4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008df6:	2312      	movs	r3, #18
 8008df8:	18fb      	adds	r3, r7, r3
 8008dfa:	781b      	ldrb	r3, [r3, #0]
}
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	b006      	add	sp, #24
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	40021000 	.word	0x40021000
 8008e08:	efffffff 	.word	0xefffffff
 8008e0c:	fffff3ff 	.word	0xfffff3ff
 8008e10:	fffffcff 	.word	0xfffffcff
 8008e14:	fff3ffff 	.word	0xfff3ffff
 8008e18:	ffcfffff 	.word	0xffcfffff
 8008e1c:	ffffcfff 	.word	0xffffcfff
 8008e20:	ffff3fff 	.word	0xffff3fff
 8008e24:	ffbfffff 	.word	0xffbfffff
 8008e28:	feffffff 	.word	0xfeffffff

08008e2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e04a      	b.n	8008ed4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	223d      	movs	r2, #61	; 0x3d
 8008e42:	5c9b      	ldrb	r3, [r3, r2]
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d107      	bne.n	8008e5a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	223c      	movs	r2, #60	; 0x3c
 8008e4e:	2100      	movs	r1, #0
 8008e50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	0018      	movs	r0, r3
 8008e56:	f7fa f9f7 	bl	8003248 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	223d      	movs	r2, #61	; 0x3d
 8008e5e:	2102      	movs	r1, #2
 8008e60:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	0019      	movs	r1, r3
 8008e6c:	0010      	movs	r0, r2
 8008e6e:	f000 f92b 	bl	80090c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2248      	movs	r2, #72	; 0x48
 8008e76:	2101      	movs	r1, #1
 8008e78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	223e      	movs	r2, #62	; 0x3e
 8008e7e:	2101      	movs	r1, #1
 8008e80:	5499      	strb	r1, [r3, r2]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	223f      	movs	r2, #63	; 0x3f
 8008e86:	2101      	movs	r1, #1
 8008e88:	5499      	strb	r1, [r3, r2]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2240      	movs	r2, #64	; 0x40
 8008e8e:	2101      	movs	r1, #1
 8008e90:	5499      	strb	r1, [r3, r2]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2241      	movs	r2, #65	; 0x41
 8008e96:	2101      	movs	r1, #1
 8008e98:	5499      	strb	r1, [r3, r2]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2242      	movs	r2, #66	; 0x42
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	5499      	strb	r1, [r3, r2]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2243      	movs	r2, #67	; 0x43
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2244      	movs	r2, #68	; 0x44
 8008eae:	2101      	movs	r1, #1
 8008eb0:	5499      	strb	r1, [r3, r2]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2245      	movs	r2, #69	; 0x45
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	5499      	strb	r1, [r3, r2]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2246      	movs	r2, #70	; 0x46
 8008ebe:	2101      	movs	r1, #1
 8008ec0:	5499      	strb	r1, [r3, r2]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2247      	movs	r2, #71	; 0x47
 8008ec6:	2101      	movs	r1, #1
 8008ec8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	223d      	movs	r2, #61	; 0x3d
 8008ece:	2101      	movs	r1, #1
 8008ed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	b002      	add	sp, #8
 8008eda:	bd80      	pop	{r7, pc}

08008edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	223c      	movs	r2, #60	; 0x3c
 8008eec:	5c9b      	ldrb	r3, [r3, r2]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d101      	bne.n	8008ef6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e0df      	b.n	80090b6 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	223c      	movs	r2, #60	; 0x3c
 8008efa:	2101      	movs	r1, #1
 8008efc:	5499      	strb	r1, [r3, r2]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b14      	cmp	r3, #20
 8008f02:	d900      	bls.n	8008f06 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8008f04:	e0d1      	b.n	80090aa <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	009a      	lsls	r2, r3, #2
 8008f0a:	4b6d      	ldr	r3, [pc, #436]	; (80090c0 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8008f0c:	18d3      	adds	r3, r2, r3
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	0011      	movs	r1, r2
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f000 f95e 	bl	80091dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	699a      	ldr	r2, [r3, #24]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2108      	movs	r1, #8
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	699a      	ldr	r2, [r3, #24]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2104      	movs	r1, #4
 8008f3c:	438a      	bics	r2, r1
 8008f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6999      	ldr	r1, [r3, #24]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	691a      	ldr	r2, [r3, #16]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	619a      	str	r2, [r3, #24]
      break;
 8008f52:	e0ab      	b.n	80090ac <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	0011      	movs	r1, r2
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	f000 f9c7 	bl	80092f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	699a      	ldr	r2, [r3, #24]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2180      	movs	r1, #128	; 0x80
 8008f6e:	0109      	lsls	r1, r1, #4
 8008f70:	430a      	orrs	r2, r1
 8008f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	699a      	ldr	r2, [r3, #24]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4951      	ldr	r1, [pc, #324]	; (80090c4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008f80:	400a      	ands	r2, r1
 8008f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6999      	ldr	r1, [r3, #24]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	021a      	lsls	r2, r3, #8
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	619a      	str	r2, [r3, #24]
      break;
 8008f98:	e088      	b.n	80090ac <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	0011      	movs	r1, r2
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	f000 fa28 	bl	80093f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	69da      	ldr	r2, [r3, #28]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2108      	movs	r1, #8
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	69da      	ldr	r2, [r3, #28]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2104      	movs	r1, #4
 8008fc4:	438a      	bics	r2, r1
 8008fc6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	69d9      	ldr	r1, [r3, #28]
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	691a      	ldr	r2, [r3, #16]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	61da      	str	r2, [r3, #28]
      break;
 8008fda:	e067      	b.n	80090ac <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	0011      	movs	r1, r2
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f000 fa8f 	bl	8009508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69da      	ldr	r2, [r3, #28]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2180      	movs	r1, #128	; 0x80
 8008ff6:	0109      	lsls	r1, r1, #4
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	69da      	ldr	r2, [r3, #28]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	492f      	ldr	r1, [pc, #188]	; (80090c4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8009008:	400a      	ands	r2, r1
 800900a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	69d9      	ldr	r1, [r3, #28]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	021a      	lsls	r2, r3, #8
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	430a      	orrs	r2, r1
 800901e:	61da      	str	r2, [r3, #28]
      break;
 8009020:	e044      	b.n	80090ac <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	0011      	movs	r1, r2
 800902a:	0018      	movs	r0, r3
 800902c:	f000 fad6 	bl	80095dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2108      	movs	r1, #8
 800903c:	430a      	orrs	r2, r1
 800903e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2104      	movs	r1, #4
 800904c:	438a      	bics	r2, r1
 800904e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	691a      	ldr	r2, [r3, #16]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009062:	e023      	b.n	80090ac <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	0011      	movs	r1, r2
 800906c:	0018      	movs	r0, r3
 800906e:	f000 fb15 	bl	800969c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2180      	movs	r1, #128	; 0x80
 800907e:	0109      	lsls	r1, r1, #4
 8009080:	430a      	orrs	r2, r1
 8009082:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	490d      	ldr	r1, [pc, #52]	; (80090c4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8009090:	400a      	ands	r2, r1
 8009092:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	021a      	lsls	r2, r3, #8
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	430a      	orrs	r2, r1
 80090a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090a8:	e000      	b.n	80090ac <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80090aa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	223c      	movs	r2, #60	; 0x3c
 80090b0:	2100      	movs	r1, #0
 80090b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	0018      	movs	r0, r3
 80090b8:	46bd      	mov	sp, r7
 80090ba:	b004      	add	sp, #16
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	46c0      	nop			; (mov r8, r8)
 80090c0:	0800eda0 	.word	0x0800eda0
 80090c4:	fffffbff 	.word	0xfffffbff

080090c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a38      	ldr	r2, [pc, #224]	; (80091bc <TIM_Base_SetConfig+0xf4>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d00c      	beq.n	80090fa <TIM_Base_SetConfig+0x32>
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	2380      	movs	r3, #128	; 0x80
 80090e4:	05db      	lsls	r3, r3, #23
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d007      	beq.n	80090fa <TIM_Base_SetConfig+0x32>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a34      	ldr	r2, [pc, #208]	; (80091c0 <TIM_Base_SetConfig+0xf8>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d003      	beq.n	80090fa <TIM_Base_SetConfig+0x32>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a33      	ldr	r2, [pc, #204]	; (80091c4 <TIM_Base_SetConfig+0xfc>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d108      	bne.n	800910c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2270      	movs	r2, #112	; 0x70
 80090fe:	4393      	bics	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	4313      	orrs	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a2b      	ldr	r2, [pc, #172]	; (80091bc <TIM_Base_SetConfig+0xf4>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d01c      	beq.n	800914e <TIM_Base_SetConfig+0x86>
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	2380      	movs	r3, #128	; 0x80
 8009118:	05db      	lsls	r3, r3, #23
 800911a:	429a      	cmp	r2, r3
 800911c:	d017      	beq.n	800914e <TIM_Base_SetConfig+0x86>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a27      	ldr	r2, [pc, #156]	; (80091c0 <TIM_Base_SetConfig+0xf8>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d013      	beq.n	800914e <TIM_Base_SetConfig+0x86>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a26      	ldr	r2, [pc, #152]	; (80091c4 <TIM_Base_SetConfig+0xfc>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d00f      	beq.n	800914e <TIM_Base_SetConfig+0x86>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a25      	ldr	r2, [pc, #148]	; (80091c8 <TIM_Base_SetConfig+0x100>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d00b      	beq.n	800914e <TIM_Base_SetConfig+0x86>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a24      	ldr	r2, [pc, #144]	; (80091cc <TIM_Base_SetConfig+0x104>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d007      	beq.n	800914e <TIM_Base_SetConfig+0x86>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a23      	ldr	r2, [pc, #140]	; (80091d0 <TIM_Base_SetConfig+0x108>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d003      	beq.n	800914e <TIM_Base_SetConfig+0x86>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a22      	ldr	r2, [pc, #136]	; (80091d4 <TIM_Base_SetConfig+0x10c>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d108      	bne.n	8009160 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	4a21      	ldr	r2, [pc, #132]	; (80091d8 <TIM_Base_SetConfig+0x110>)
 8009152:	4013      	ands	r3, r2
 8009154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	4313      	orrs	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2280      	movs	r2, #128	; 0x80
 8009164:	4393      	bics	r3, r2
 8009166:	001a      	movs	r2, r3
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	695b      	ldr	r3, [r3, #20]
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	689a      	ldr	r2, [r3, #8]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a0c      	ldr	r2, [pc, #48]	; (80091bc <TIM_Base_SetConfig+0xf4>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d00b      	beq.n	80091a6 <TIM_Base_SetConfig+0xde>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a0e      	ldr	r2, [pc, #56]	; (80091cc <TIM_Base_SetConfig+0x104>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d007      	beq.n	80091a6 <TIM_Base_SetConfig+0xde>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a0d      	ldr	r2, [pc, #52]	; (80091d0 <TIM_Base_SetConfig+0x108>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d003      	beq.n	80091a6 <TIM_Base_SetConfig+0xde>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a0c      	ldr	r2, [pc, #48]	; (80091d4 <TIM_Base_SetConfig+0x10c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d103      	bne.n	80091ae <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	691a      	ldr	r2, [r3, #16]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	615a      	str	r2, [r3, #20]
}
 80091b4:	46c0      	nop			; (mov r8, r8)
 80091b6:	46bd      	mov	sp, r7
 80091b8:	b004      	add	sp, #16
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	40012c00 	.word	0x40012c00
 80091c0:	40000400 	.word	0x40000400
 80091c4:	40000800 	.word	0x40000800
 80091c8:	40002000 	.word	0x40002000
 80091cc:	40014000 	.word	0x40014000
 80091d0:	40014400 	.word	0x40014400
 80091d4:	40014800 	.word	0x40014800
 80091d8:	fffffcff 	.word	0xfffffcff

080091dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	2201      	movs	r2, #1
 80091ec:	4393      	bics	r3, r2
 80091ee:	001a      	movs	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	4a32      	ldr	r2, [pc, #200]	; (80092d4 <TIM_OC1_SetConfig+0xf8>)
 800920a:	4013      	ands	r3, r2
 800920c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2203      	movs	r2, #3
 8009212:	4393      	bics	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	4313      	orrs	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2202      	movs	r2, #2
 8009224:	4393      	bics	r3, r2
 8009226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a28      	ldr	r2, [pc, #160]	; (80092d8 <TIM_OC1_SetConfig+0xfc>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d00b      	beq.n	8009252 <TIM_OC1_SetConfig+0x76>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a27      	ldr	r2, [pc, #156]	; (80092dc <TIM_OC1_SetConfig+0x100>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d007      	beq.n	8009252 <TIM_OC1_SetConfig+0x76>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a26      	ldr	r2, [pc, #152]	; (80092e0 <TIM_OC1_SetConfig+0x104>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d003      	beq.n	8009252 <TIM_OC1_SetConfig+0x76>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a25      	ldr	r2, [pc, #148]	; (80092e4 <TIM_OC1_SetConfig+0x108>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d10c      	bne.n	800926c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2208      	movs	r2, #8
 8009256:	4393      	bics	r3, r2
 8009258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	4313      	orrs	r3, r2
 8009262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	2204      	movs	r2, #4
 8009268:	4393      	bics	r3, r2
 800926a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a1a      	ldr	r2, [pc, #104]	; (80092d8 <TIM_OC1_SetConfig+0xfc>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d00b      	beq.n	800928c <TIM_OC1_SetConfig+0xb0>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a19      	ldr	r2, [pc, #100]	; (80092dc <TIM_OC1_SetConfig+0x100>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d007      	beq.n	800928c <TIM_OC1_SetConfig+0xb0>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a18      	ldr	r2, [pc, #96]	; (80092e0 <TIM_OC1_SetConfig+0x104>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d003      	beq.n	800928c <TIM_OC1_SetConfig+0xb0>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a17      	ldr	r2, [pc, #92]	; (80092e4 <TIM_OC1_SetConfig+0x108>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d111      	bne.n	80092b0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	4a16      	ldr	r2, [pc, #88]	; (80092e8 <TIM_OC1_SetConfig+0x10c>)
 8009290:	4013      	ands	r3, r2
 8009292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	4a15      	ldr	r2, [pc, #84]	; (80092ec <TIM_OC1_SetConfig+0x110>)
 8009298:	4013      	ands	r3, r2
 800929a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	621a      	str	r2, [r3, #32]
}
 80092ca:	46c0      	nop			; (mov r8, r8)
 80092cc:	46bd      	mov	sp, r7
 80092ce:	b006      	add	sp, #24
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	46c0      	nop			; (mov r8, r8)
 80092d4:	fffeff8f 	.word	0xfffeff8f
 80092d8:	40012c00 	.word	0x40012c00
 80092dc:	40014000 	.word	0x40014000
 80092e0:	40014400 	.word	0x40014400
 80092e4:	40014800 	.word	0x40014800
 80092e8:	fffffeff 	.word	0xfffffeff
 80092ec:	fffffdff 	.word	0xfffffdff

080092f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	2210      	movs	r2, #16
 8009300:	4393      	bics	r3, r2
 8009302:	001a      	movs	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a1b      	ldr	r3, [r3, #32]
 800930c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	4a2e      	ldr	r2, [pc, #184]	; (80093d8 <TIM_OC2_SetConfig+0xe8>)
 800931e:	4013      	ands	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4a2d      	ldr	r2, [pc, #180]	; (80093dc <TIM_OC2_SetConfig+0xec>)
 8009326:	4013      	ands	r3, r2
 8009328:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	021b      	lsls	r3, r3, #8
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	4313      	orrs	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2220      	movs	r2, #32
 800933a:	4393      	bics	r3, r2
 800933c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	011b      	lsls	r3, r3, #4
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	4313      	orrs	r3, r2
 8009348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a24      	ldr	r2, [pc, #144]	; (80093e0 <TIM_OC2_SetConfig+0xf0>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d10d      	bne.n	800936e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2280      	movs	r2, #128	; 0x80
 8009356:	4393      	bics	r3, r2
 8009358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	011b      	lsls	r3, r3, #4
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	4313      	orrs	r3, r2
 8009364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2240      	movs	r2, #64	; 0x40
 800936a:	4393      	bics	r3, r2
 800936c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a1b      	ldr	r2, [pc, #108]	; (80093e0 <TIM_OC2_SetConfig+0xf0>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d00b      	beq.n	800938e <TIM_OC2_SetConfig+0x9e>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a1a      	ldr	r2, [pc, #104]	; (80093e4 <TIM_OC2_SetConfig+0xf4>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d007      	beq.n	800938e <TIM_OC2_SetConfig+0x9e>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a19      	ldr	r2, [pc, #100]	; (80093e8 <TIM_OC2_SetConfig+0xf8>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d003      	beq.n	800938e <TIM_OC2_SetConfig+0x9e>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a18      	ldr	r2, [pc, #96]	; (80093ec <TIM_OC2_SetConfig+0xfc>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d113      	bne.n	80093b6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	4a17      	ldr	r2, [pc, #92]	; (80093f0 <TIM_OC2_SetConfig+0x100>)
 8009392:	4013      	ands	r3, r2
 8009394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	4a16      	ldr	r2, [pc, #88]	; (80093f4 <TIM_OC2_SetConfig+0x104>)
 800939a:	4013      	ands	r3, r2
 800939c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	697a      	ldr	r2, [r7, #20]
 80093ce:	621a      	str	r2, [r3, #32]
}
 80093d0:	46c0      	nop			; (mov r8, r8)
 80093d2:	46bd      	mov	sp, r7
 80093d4:	b006      	add	sp, #24
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	feff8fff 	.word	0xfeff8fff
 80093dc:	fffffcff 	.word	0xfffffcff
 80093e0:	40012c00 	.word	0x40012c00
 80093e4:	40014000 	.word	0x40014000
 80093e8:	40014400 	.word	0x40014400
 80093ec:	40014800 	.word	0x40014800
 80093f0:	fffffbff 	.word	0xfffffbff
 80093f4:	fffff7ff 	.word	0xfffff7ff

080093f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	4a35      	ldr	r2, [pc, #212]	; (80094dc <TIM_OC3_SetConfig+0xe4>)
 8009408:	401a      	ands	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4a2f      	ldr	r2, [pc, #188]	; (80094e0 <TIM_OC3_SetConfig+0xe8>)
 8009424:	4013      	ands	r3, r2
 8009426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2203      	movs	r2, #3
 800942c:	4393      	bics	r3, r2
 800942e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	4313      	orrs	r3, r2
 8009438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	4a29      	ldr	r2, [pc, #164]	; (80094e4 <TIM_OC3_SetConfig+0xec>)
 800943e:	4013      	ands	r3, r2
 8009440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	021b      	lsls	r3, r3, #8
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	4313      	orrs	r3, r2
 800944c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a25      	ldr	r2, [pc, #148]	; (80094e8 <TIM_OC3_SetConfig+0xf0>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d10d      	bne.n	8009472 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	4a24      	ldr	r2, [pc, #144]	; (80094ec <TIM_OC3_SetConfig+0xf4>)
 800945a:	4013      	ands	r3, r2
 800945c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	021b      	lsls	r3, r3, #8
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	4313      	orrs	r3, r2
 8009468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	4a20      	ldr	r2, [pc, #128]	; (80094f0 <TIM_OC3_SetConfig+0xf8>)
 800946e:	4013      	ands	r3, r2
 8009470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a1c      	ldr	r2, [pc, #112]	; (80094e8 <TIM_OC3_SetConfig+0xf0>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d00b      	beq.n	8009492 <TIM_OC3_SetConfig+0x9a>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a1d      	ldr	r2, [pc, #116]	; (80094f4 <TIM_OC3_SetConfig+0xfc>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d007      	beq.n	8009492 <TIM_OC3_SetConfig+0x9a>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a1c      	ldr	r2, [pc, #112]	; (80094f8 <TIM_OC3_SetConfig+0x100>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d003      	beq.n	8009492 <TIM_OC3_SetConfig+0x9a>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a1b      	ldr	r2, [pc, #108]	; (80094fc <TIM_OC3_SetConfig+0x104>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d113      	bne.n	80094ba <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	4a1a      	ldr	r2, [pc, #104]	; (8009500 <TIM_OC3_SetConfig+0x108>)
 8009496:	4013      	ands	r3, r2
 8009498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	4a19      	ldr	r2, [pc, #100]	; (8009504 <TIM_OC3_SetConfig+0x10c>)
 800949e:	4013      	ands	r3, r2
 80094a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	011b      	lsls	r3, r3, #4
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	011b      	lsls	r3, r3, #4
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	621a      	str	r2, [r3, #32]
}
 80094d4:	46c0      	nop			; (mov r8, r8)
 80094d6:	46bd      	mov	sp, r7
 80094d8:	b006      	add	sp, #24
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	fffffeff 	.word	0xfffffeff
 80094e0:	fffeff8f 	.word	0xfffeff8f
 80094e4:	fffffdff 	.word	0xfffffdff
 80094e8:	40012c00 	.word	0x40012c00
 80094ec:	fffff7ff 	.word	0xfffff7ff
 80094f0:	fffffbff 	.word	0xfffffbff
 80094f4:	40014000 	.word	0x40014000
 80094f8:	40014400 	.word	0x40014400
 80094fc:	40014800 	.word	0x40014800
 8009500:	ffffefff 	.word	0xffffefff
 8009504:	ffffdfff 	.word	0xffffdfff

08009508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	4a28      	ldr	r2, [pc, #160]	; (80095b8 <TIM_OC4_SetConfig+0xb0>)
 8009518:	401a      	ands	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4a22      	ldr	r2, [pc, #136]	; (80095bc <TIM_OC4_SetConfig+0xb4>)
 8009534:	4013      	ands	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4a21      	ldr	r2, [pc, #132]	; (80095c0 <TIM_OC4_SetConfig+0xb8>)
 800953c:	4013      	ands	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	021b      	lsls	r3, r3, #8
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	4313      	orrs	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	4a1d      	ldr	r2, [pc, #116]	; (80095c4 <TIM_OC4_SetConfig+0xbc>)
 8009550:	4013      	ands	r3, r2
 8009552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	031b      	lsls	r3, r3, #12
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	4313      	orrs	r3, r2
 800955e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a19      	ldr	r2, [pc, #100]	; (80095c8 <TIM_OC4_SetConfig+0xc0>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d00b      	beq.n	8009580 <TIM_OC4_SetConfig+0x78>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a18      	ldr	r2, [pc, #96]	; (80095cc <TIM_OC4_SetConfig+0xc4>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d007      	beq.n	8009580 <TIM_OC4_SetConfig+0x78>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a17      	ldr	r2, [pc, #92]	; (80095d0 <TIM_OC4_SetConfig+0xc8>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d003      	beq.n	8009580 <TIM_OC4_SetConfig+0x78>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a16      	ldr	r2, [pc, #88]	; (80095d4 <TIM_OC4_SetConfig+0xcc>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d109      	bne.n	8009594 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	4a15      	ldr	r2, [pc, #84]	; (80095d8 <TIM_OC4_SetConfig+0xd0>)
 8009584:	4013      	ands	r3, r2
 8009586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	019b      	lsls	r3, r3, #6
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	4313      	orrs	r3, r2
 8009592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	685a      	ldr	r2, [r3, #4]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	621a      	str	r2, [r3, #32]
}
 80095ae:	46c0      	nop			; (mov r8, r8)
 80095b0:	46bd      	mov	sp, r7
 80095b2:	b006      	add	sp, #24
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	46c0      	nop			; (mov r8, r8)
 80095b8:	ffffefff 	.word	0xffffefff
 80095bc:	feff8fff 	.word	0xfeff8fff
 80095c0:	fffffcff 	.word	0xfffffcff
 80095c4:	ffffdfff 	.word	0xffffdfff
 80095c8:	40012c00 	.word	0x40012c00
 80095cc:	40014000 	.word	0x40014000
 80095d0:	40014400 	.word	0x40014400
 80095d4:	40014800 	.word	0x40014800
 80095d8:	ffffbfff 	.word	0xffffbfff

080095dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	4a25      	ldr	r2, [pc, #148]	; (8009680 <TIM_OC5_SetConfig+0xa4>)
 80095ec:	401a      	ands	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4a1f      	ldr	r2, [pc, #124]	; (8009684 <TIM_OC5_SetConfig+0xa8>)
 8009608:	4013      	ands	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	4313      	orrs	r3, r2
 8009614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	4a1b      	ldr	r2, [pc, #108]	; (8009688 <TIM_OC5_SetConfig+0xac>)
 800961a:	4013      	ands	r3, r2
 800961c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	041b      	lsls	r3, r3, #16
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	4313      	orrs	r3, r2
 8009628:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a17      	ldr	r2, [pc, #92]	; (800968c <TIM_OC5_SetConfig+0xb0>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d00b      	beq.n	800964a <TIM_OC5_SetConfig+0x6e>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a16      	ldr	r2, [pc, #88]	; (8009690 <TIM_OC5_SetConfig+0xb4>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d007      	beq.n	800964a <TIM_OC5_SetConfig+0x6e>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a15      	ldr	r2, [pc, #84]	; (8009694 <TIM_OC5_SetConfig+0xb8>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d003      	beq.n	800964a <TIM_OC5_SetConfig+0x6e>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a14      	ldr	r2, [pc, #80]	; (8009698 <TIM_OC5_SetConfig+0xbc>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d109      	bne.n	800965e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	4a0c      	ldr	r2, [pc, #48]	; (8009680 <TIM_OC5_SetConfig+0xa4>)
 800964e:	4013      	ands	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	021b      	lsls	r3, r3, #8
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	4313      	orrs	r3, r2
 800965c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	621a      	str	r2, [r3, #32]
}
 8009678:	46c0      	nop			; (mov r8, r8)
 800967a:	46bd      	mov	sp, r7
 800967c:	b006      	add	sp, #24
 800967e:	bd80      	pop	{r7, pc}
 8009680:	fffeffff 	.word	0xfffeffff
 8009684:	fffeff8f 	.word	0xfffeff8f
 8009688:	fffdffff 	.word	0xfffdffff
 800968c:	40012c00 	.word	0x40012c00
 8009690:	40014000 	.word	0x40014000
 8009694:	40014400 	.word	0x40014400
 8009698:	40014800 	.word	0x40014800

0800969c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	4a26      	ldr	r2, [pc, #152]	; (8009744 <TIM_OC6_SetConfig+0xa8>)
 80096ac:	401a      	ands	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4a20      	ldr	r2, [pc, #128]	; (8009748 <TIM_OC6_SetConfig+0xac>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	021b      	lsls	r3, r3, #8
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	4a1c      	ldr	r2, [pc, #112]	; (800974c <TIM_OC6_SetConfig+0xb0>)
 80096dc:	4013      	ands	r3, r2
 80096de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	051b      	lsls	r3, r3, #20
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a18      	ldr	r2, [pc, #96]	; (8009750 <TIM_OC6_SetConfig+0xb4>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d00b      	beq.n	800970c <TIM_OC6_SetConfig+0x70>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a17      	ldr	r2, [pc, #92]	; (8009754 <TIM_OC6_SetConfig+0xb8>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d007      	beq.n	800970c <TIM_OC6_SetConfig+0x70>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a16      	ldr	r2, [pc, #88]	; (8009758 <TIM_OC6_SetConfig+0xbc>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d003      	beq.n	800970c <TIM_OC6_SetConfig+0x70>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a15      	ldr	r2, [pc, #84]	; (800975c <TIM_OC6_SetConfig+0xc0>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d109      	bne.n	8009720 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	4a14      	ldr	r2, [pc, #80]	; (8009760 <TIM_OC6_SetConfig+0xc4>)
 8009710:	4013      	ands	r3, r2
 8009712:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	029b      	lsls	r3, r3, #10
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	4313      	orrs	r3, r2
 800971e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	621a      	str	r2, [r3, #32]
}
 800973a:	46c0      	nop			; (mov r8, r8)
 800973c:	46bd      	mov	sp, r7
 800973e:	b006      	add	sp, #24
 8009740:	bd80      	pop	{r7, pc}
 8009742:	46c0      	nop			; (mov r8, r8)
 8009744:	ffefffff 	.word	0xffefffff
 8009748:	feff8fff 	.word	0xfeff8fff
 800974c:	ffdfffff 	.word	0xffdfffff
 8009750:	40012c00 	.word	0x40012c00
 8009754:	40014000 	.word	0x40014000
 8009758:	40014400 	.word	0x40014400
 800975c:	40014800 	.word	0x40014800
 8009760:	fffbffff 	.word	0xfffbffff

08009764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	223c      	movs	r2, #60	; 0x3c
 8009772:	5c9b      	ldrb	r3, [r3, r2]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d101      	bne.n	800977c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009778:	2302      	movs	r3, #2
 800977a:	e05a      	b.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	223c      	movs	r2, #60	; 0x3c
 8009780:	2101      	movs	r1, #1
 8009782:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	223d      	movs	r2, #61	; 0x3d
 8009788:	2102      	movs	r1, #2
 800978a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a26      	ldr	r2, [pc, #152]	; (800983c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d108      	bne.n	80097b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4a25      	ldr	r2, [pc, #148]	; (8009840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80097aa:	4013      	ands	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2270      	movs	r2, #112	; 0x70
 80097bc:	4393      	bics	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a19      	ldr	r2, [pc, #100]	; (800983c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d014      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	2380      	movs	r3, #128	; 0x80
 80097e2:	05db      	lsls	r3, r3, #23
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d00e      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a15      	ldr	r2, [pc, #84]	; (8009844 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d009      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a14      	ldr	r2, [pc, #80]	; (8009848 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d004      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a12      	ldr	r2, [pc, #72]	; (800984c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d10c      	bne.n	8009820 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	2280      	movs	r2, #128	; 0x80
 800980a:	4393      	bics	r3, r2
 800980c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	4313      	orrs	r3, r2
 8009816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	223d      	movs	r2, #61	; 0x3d
 8009824:	2101      	movs	r1, #1
 8009826:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	223c      	movs	r2, #60	; 0x3c
 800982c:	2100      	movs	r1, #0
 800982e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	0018      	movs	r0, r3
 8009834:	46bd      	mov	sp, r7
 8009836:	b004      	add	sp, #16
 8009838:	bd80      	pop	{r7, pc}
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	40012c00 	.word	0x40012c00
 8009840:	ff0fffff 	.word	0xff0fffff
 8009844:	40000400 	.word	0x40000400
 8009848:	40000800 	.word	0x40000800
 800984c:	40014000 	.word	0x40014000

08009850 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	223c      	movs	r2, #60	; 0x3c
 8009862:	5c9b      	ldrb	r3, [r3, r2]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d101      	bne.n	800986c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009868:	2302      	movs	r3, #2
 800986a:	e079      	b.n	8009960 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	223c      	movs	r2, #60	; 0x3c
 8009870:	2101      	movs	r1, #1
 8009872:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	22ff      	movs	r2, #255	; 0xff
 8009878:	4393      	bics	r3, r2
 800987a:	001a      	movs	r2, r3
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	4313      	orrs	r3, r2
 8009882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4a38      	ldr	r2, [pc, #224]	; (8009968 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8009888:	401a      	ands	r2, r3
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	4313      	orrs	r3, r2
 8009890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4a35      	ldr	r2, [pc, #212]	; (800996c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009896:	401a      	ands	r2, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	4313      	orrs	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4a33      	ldr	r2, [pc, #204]	; (8009970 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80098a4:	401a      	ands	r2, r3
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	4a30      	ldr	r2, [pc, #192]	; (8009974 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80098b2:	401a      	ands	r2, r3
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4a2e      	ldr	r2, [pc, #184]	; (8009978 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80098c0:	401a      	ands	r2, r3
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4a2b      	ldr	r2, [pc, #172]	; (800997c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80098ce:	401a      	ands	r2, r3
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d4:	4313      	orrs	r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4a29      	ldr	r2, [pc, #164]	; (8009980 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80098dc:	401a      	ands	r2, r3
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	041b      	lsls	r3, r3, #16
 80098e4:	4313      	orrs	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a25      	ldr	r2, [pc, #148]	; (8009984 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d106      	bne.n	8009900 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	4a24      	ldr	r2, [pc, #144]	; (8009988 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80098f6:	401a      	ands	r2, r3
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a1f      	ldr	r2, [pc, #124]	; (8009984 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d121      	bne.n	800994e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4a1f      	ldr	r2, [pc, #124]	; (800998c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800990e:	401a      	ands	r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009914:	051b      	lsls	r3, r3, #20
 8009916:	4313      	orrs	r3, r2
 8009918:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4a1c      	ldr	r2, [pc, #112]	; (8009990 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800991e:	401a      	ands	r2, r3
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	4313      	orrs	r3, r2
 8009926:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4a1a      	ldr	r2, [pc, #104]	; (8009994 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800992c:	401a      	ands	r2, r3
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	4313      	orrs	r3, r2
 8009934:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a12      	ldr	r2, [pc, #72]	; (8009984 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d106      	bne.n	800994e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	4a15      	ldr	r2, [pc, #84]	; (8009998 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8009944:	401a      	ands	r2, r3
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994a:	4313      	orrs	r3, r2
 800994c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	223c      	movs	r2, #60	; 0x3c
 800995a:	2100      	movs	r1, #0
 800995c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	0018      	movs	r0, r3
 8009962:	46bd      	mov	sp, r7
 8009964:	b004      	add	sp, #16
 8009966:	bd80      	pop	{r7, pc}
 8009968:	fffffcff 	.word	0xfffffcff
 800996c:	fffffbff 	.word	0xfffffbff
 8009970:	fffff7ff 	.word	0xfffff7ff
 8009974:	ffffefff 	.word	0xffffefff
 8009978:	ffffdfff 	.word	0xffffdfff
 800997c:	ffffbfff 	.word	0xffffbfff
 8009980:	fff0ffff 	.word	0xfff0ffff
 8009984:	40012c00 	.word	0x40012c00
 8009988:	efffffff 	.word	0xefffffff
 800998c:	ff0fffff 	.word	0xff0fffff
 8009990:	feffffff 	.word	0xfeffffff
 8009994:	fdffffff 	.word	0xfdffffff
 8009998:	dfffffff 	.word	0xdfffffff

0800999c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d101      	bne.n	80099ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e046      	b.n	8009a3c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2284      	movs	r2, #132	; 0x84
 80099b2:	589b      	ldr	r3, [r3, r2]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d107      	bne.n	80099c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2280      	movs	r2, #128	; 0x80
 80099bc:	2100      	movs	r1, #0
 80099be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	0018      	movs	r0, r3
 80099c4:	f7f9 fd24 	bl	8003410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2284      	movs	r2, #132	; 0x84
 80099cc:	2124      	movs	r1, #36	; 0x24
 80099ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2101      	movs	r1, #1
 80099dc:	438a      	bics	r2, r1
 80099de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	0018      	movs	r0, r3
 80099e4:	f000 fe74 	bl	800a6d0 <UART_SetConfig>
 80099e8:	0003      	movs	r3, r0
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d101      	bne.n	80099f2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e024      	b.n	8009a3c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	0018      	movs	r0, r3
 80099fe:	f001 f9e7 	bl	800add0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	490d      	ldr	r1, [pc, #52]	; (8009a44 <HAL_UART_Init+0xa8>)
 8009a0e:	400a      	ands	r2, r1
 8009a10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689a      	ldr	r2, [r3, #8]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	212a      	movs	r1, #42	; 0x2a
 8009a1e:	438a      	bics	r2, r1
 8009a20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	430a      	orrs	r2, r1
 8009a30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	0018      	movs	r0, r3
 8009a36:	f001 fa7f 	bl	800af38 <UART_CheckIdleState>
 8009a3a:	0003      	movs	r3, r0
}
 8009a3c:	0018      	movs	r0, r3
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	b002      	add	sp, #8
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	ffffb7ff 	.word	0xffffb7ff

08009a48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08a      	sub	sp, #40	; 0x28
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	603b      	str	r3, [r7, #0]
 8009a54:	1dbb      	adds	r3, r7, #6
 8009a56:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2284      	movs	r2, #132	; 0x84
 8009a5c:	589b      	ldr	r3, [r3, r2]
 8009a5e:	2b20      	cmp	r3, #32
 8009a60:	d000      	beq.n	8009a64 <HAL_UART_Transmit+0x1c>
 8009a62:	e097      	b.n	8009b94 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d003      	beq.n	8009a72 <HAL_UART_Transmit+0x2a>
 8009a6a:	1dbb      	adds	r3, r7, #6
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e08f      	b.n	8009b96 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	689a      	ldr	r2, [r3, #8]
 8009a7a:	2380      	movs	r3, #128	; 0x80
 8009a7c:	015b      	lsls	r3, r3, #5
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d109      	bne.n	8009a96 <HAL_UART_Transmit+0x4e>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d105      	bne.n	8009a96 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	4013      	ands	r3, r2
 8009a90:	d001      	beq.n	8009a96 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e07f      	b.n	8009b96 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2280      	movs	r2, #128	; 0x80
 8009a9a:	5c9b      	ldrb	r3, [r3, r2]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d101      	bne.n	8009aa4 <HAL_UART_Transmit+0x5c>
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e078      	b.n	8009b96 <HAL_UART_Transmit+0x14e>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2280      	movs	r2, #128	; 0x80
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	228c      	movs	r2, #140	; 0x8c
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2284      	movs	r2, #132	; 0x84
 8009ab8:	2121      	movs	r1, #33	; 0x21
 8009aba:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009abc:	f7fa fc48 	bl	8004350 <HAL_GetTick>
 8009ac0:	0003      	movs	r3, r0
 8009ac2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	1dba      	adds	r2, r7, #6
 8009ac8:	2154      	movs	r1, #84	; 0x54
 8009aca:	8812      	ldrh	r2, [r2, #0]
 8009acc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	1dba      	adds	r2, r7, #6
 8009ad2:	2156      	movs	r1, #86	; 0x56
 8009ad4:	8812      	ldrh	r2, [r2, #0]
 8009ad6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	689a      	ldr	r2, [r3, #8]
 8009adc:	2380      	movs	r3, #128	; 0x80
 8009ade:	015b      	lsls	r3, r3, #5
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d108      	bne.n	8009af6 <HAL_UART_Transmit+0xae>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d104      	bne.n	8009af6 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8009aec:	2300      	movs	r3, #0
 8009aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	61bb      	str	r3, [r7, #24]
 8009af4:	e003      	b.n	8009afe <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009afa:	2300      	movs	r3, #0
 8009afc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2280      	movs	r2, #128	; 0x80
 8009b02:	2100      	movs	r1, #0
 8009b04:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8009b06:	e02c      	b.n	8009b62 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	0013      	movs	r3, r2
 8009b12:	2200      	movs	r2, #0
 8009b14:	2180      	movs	r1, #128	; 0x80
 8009b16:	f001 fa59 	bl	800afcc <UART_WaitOnFlagUntilTimeout>
 8009b1a:	1e03      	subs	r3, r0, #0
 8009b1c:	d001      	beq.n	8009b22 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e039      	b.n	8009b96 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10b      	bne.n	8009b40 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	881b      	ldrh	r3, [r3, #0]
 8009b2c:	001a      	movs	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	05d2      	lsls	r2, r2, #23
 8009b34:	0dd2      	lsrs	r2, r2, #23
 8009b36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	3302      	adds	r3, #2
 8009b3c:	61bb      	str	r3, [r7, #24]
 8009b3e:	e007      	b.n	8009b50 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	781a      	ldrb	r2, [r3, #0]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2256      	movs	r2, #86	; 0x56
 8009b54:	5a9b      	ldrh	r3, [r3, r2]
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	b299      	uxth	r1, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2256      	movs	r2, #86	; 0x56
 8009b60:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2256      	movs	r2, #86	; 0x56
 8009b66:	5a9b      	ldrh	r3, [r3, r2]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1cc      	bne.n	8009b08 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	0013      	movs	r3, r2
 8009b78:	2200      	movs	r2, #0
 8009b7a:	2140      	movs	r1, #64	; 0x40
 8009b7c:	f001 fa26 	bl	800afcc <UART_WaitOnFlagUntilTimeout>
 8009b80:	1e03      	subs	r3, r0, #0
 8009b82:	d001      	beq.n	8009b88 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e006      	b.n	8009b96 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2284      	movs	r2, #132	; 0x84
 8009b8c:	2120      	movs	r1, #32
 8009b8e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	e000      	b.n	8009b96 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8009b94:	2302      	movs	r3, #2
  }
}
 8009b96:	0018      	movs	r0, r3
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	b008      	add	sp, #32
 8009b9c:	bd80      	pop	{r7, pc}
	...

08009ba0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b08c      	sub	sp, #48	; 0x30
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	1dbb      	adds	r3, r7, #6
 8009bac:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2284      	movs	r2, #132	; 0x84
 8009bb2:	589b      	ldr	r3, [r3, r2]
 8009bb4:	2b20      	cmp	r3, #32
 8009bb6:	d000      	beq.n	8009bba <HAL_UART_Transmit_IT+0x1a>
 8009bb8:	e0a0      	b.n	8009cfc <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d003      	beq.n	8009bc8 <HAL_UART_Transmit_IT+0x28>
 8009bc0:	1dbb      	adds	r3, r7, #6
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e098      	b.n	8009cfe <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	689a      	ldr	r2, [r3, #8]
 8009bd0:	2380      	movs	r3, #128	; 0x80
 8009bd2:	015b      	lsls	r3, r3, #5
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d109      	bne.n	8009bec <HAL_UART_Transmit_IT+0x4c>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d105      	bne.n	8009bec <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2201      	movs	r2, #1
 8009be4:	4013      	ands	r3, r2
 8009be6:	d001      	beq.n	8009bec <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e088      	b.n	8009cfe <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2280      	movs	r2, #128	; 0x80
 8009bf0:	5c9b      	ldrb	r3, [r3, r2]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d101      	bne.n	8009bfa <HAL_UART_Transmit_IT+0x5a>
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	e081      	b.n	8009cfe <HAL_UART_Transmit_IT+0x15e>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2280      	movs	r2, #128	; 0x80
 8009bfe:	2101      	movs	r1, #1
 8009c00:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	1dba      	adds	r2, r7, #6
 8009c0c:	2154      	movs	r1, #84	; 0x54
 8009c0e:	8812      	ldrh	r2, [r2, #0]
 8009c10:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	1dba      	adds	r2, r7, #6
 8009c16:	2156      	movs	r1, #86	; 0x56
 8009c18:	8812      	ldrh	r2, [r2, #0]
 8009c1a:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	228c      	movs	r2, #140	; 0x8c
 8009c26:	2100      	movs	r1, #0
 8009c28:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2284      	movs	r2, #132	; 0x84
 8009c2e:	2121      	movs	r1, #33	; 0x21
 8009c30:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009c36:	2380      	movs	r3, #128	; 0x80
 8009c38:	059b      	lsls	r3, r3, #22
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d12e      	bne.n	8009c9c <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	689a      	ldr	r2, [r3, #8]
 8009c42:	2380      	movs	r3, #128	; 0x80
 8009c44:	015b      	lsls	r3, r3, #5
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d107      	bne.n	8009c5a <HAL_UART_Transmit_IT+0xba>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d103      	bne.n	8009c5a <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4a2c      	ldr	r2, [pc, #176]	; (8009d08 <HAL_UART_Transmit_IT+0x168>)
 8009c56:	675a      	str	r2, [r3, #116]	; 0x74
 8009c58:	e002      	b.n	8009c60 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4a2b      	ldr	r2, [pc, #172]	; (8009d0c <HAL_UART_Transmit_IT+0x16c>)
 8009c5e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2280      	movs	r2, #128	; 0x80
 8009c64:	2100      	movs	r1, #0
 8009c66:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c68:	f3ef 8310 	mrs	r3, PRIMASK
 8009c6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8009c6e:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c72:	2301      	movs	r3, #1
 8009c74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	f383 8810 	msr	PRIMASK, r3
}
 8009c7c:	46c0      	nop			; (mov r8, r8)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689a      	ldr	r2, [r3, #8]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2180      	movs	r1, #128	; 0x80
 8009c8a:	0409      	lsls	r1, r1, #16
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	609a      	str	r2, [r3, #8]
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	f383 8810 	msr	PRIMASK, r3
}
 8009c9a:	e02d      	b.n	8009cf8 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	2380      	movs	r3, #128	; 0x80
 8009ca2:	015b      	lsls	r3, r3, #5
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d107      	bne.n	8009cb8 <HAL_UART_Transmit_IT+0x118>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d103      	bne.n	8009cb8 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4a17      	ldr	r2, [pc, #92]	; (8009d10 <HAL_UART_Transmit_IT+0x170>)
 8009cb4:	675a      	str	r2, [r3, #116]	; 0x74
 8009cb6:	e002      	b.n	8009cbe <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	4a16      	ldr	r2, [pc, #88]	; (8009d14 <HAL_UART_Transmit_IT+0x174>)
 8009cbc:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2280      	movs	r2, #128	; 0x80
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8009cca:	613b      	str	r3, [r7, #16]
  return(result);
 8009ccc:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	f383 8810 	msr	PRIMASK, r3
}
 8009cda:	46c0      	nop			; (mov r8, r8)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2180      	movs	r1, #128	; 0x80
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	f383 8810 	msr	PRIMASK, r3
}
 8009cf6:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	e000      	b.n	8009cfe <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8009cfc:	2302      	movs	r3, #2
  }
}
 8009cfe:	0018      	movs	r0, r3
 8009d00:	46bd      	mov	sp, r7
 8009d02:	b00c      	add	sp, #48	; 0x30
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	0800b975 	.word	0x0800b975
 8009d0c:	0800b889 	.word	0x0800b889
 8009d10:	0800b7c9 	.word	0x0800b7c9
 8009d14:	0800b715 	.word	0x0800b715

08009d18 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	1dbb      	adds	r3, r7, #6
 8009d24:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2288      	movs	r2, #136	; 0x88
 8009d2a:	589b      	ldr	r3, [r3, r2]
 8009d2c:	2b20      	cmp	r3, #32
 8009d2e:	d15a      	bne.n	8009de6 <HAL_UART_Receive_DMA+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <HAL_UART_Receive_DMA+0x26>
 8009d36:	1dbb      	adds	r3, r7, #6
 8009d38:	881b      	ldrh	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e052      	b.n	8009de8 <HAL_UART_Receive_DMA+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	689a      	ldr	r2, [r3, #8]
 8009d46:	2380      	movs	r3, #128	; 0x80
 8009d48:	015b      	lsls	r3, r3, #5
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d109      	bne.n	8009d62 <HAL_UART_Receive_DMA+0x4a>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d105      	bne.n	8009d62 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	d001      	beq.n	8009d62 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e042      	b.n	8009de8 <HAL_UART_Receive_DMA+0xd0>
      }
    }

    __HAL_LOCK(huart);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2280      	movs	r2, #128	; 0x80
 8009d66:	5c9b      	ldrb	r3, [r3, r2]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d101      	bne.n	8009d70 <HAL_UART_Receive_DMA+0x58>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	e03b      	b.n	8009de8 <HAL_UART_Receive_DMA+0xd0>
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2280      	movs	r2, #128	; 0x80
 8009d74:	2101      	movs	r1, #1
 8009d76:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a1b      	ldr	r2, [pc, #108]	; (8009df0 <HAL_UART_Receive_DMA+0xd8>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d025      	beq.n	8009dd4 <HAL_UART_Receive_DMA+0xbc>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a19      	ldr	r2, [pc, #100]	; (8009df4 <HAL_UART_Receive_DMA+0xdc>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d020      	beq.n	8009dd4 <HAL_UART_Receive_DMA+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	2380      	movs	r3, #128	; 0x80
 8009d9a:	041b      	lsls	r3, r3, #16
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	d019      	beq.n	8009dd4 <HAL_UART_Receive_DMA+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009da0:	f3ef 8310 	mrs	r3, PRIMASK
 8009da4:	613b      	str	r3, [r7, #16]
  return(result);
 8009da6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009da8:	61fb      	str	r3, [r7, #28]
 8009daa:	2301      	movs	r3, #1
 8009dac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f383 8810 	msr	PRIMASK, r3
}
 8009db4:	46c0      	nop			; (mov r8, r8)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2180      	movs	r1, #128	; 0x80
 8009dc2:	04c9      	lsls	r1, r1, #19
 8009dc4:	430a      	orrs	r2, r1
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	f383 8810 	msr	PRIMASK, r3
}
 8009dd2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009dd4:	1dbb      	adds	r3, r7, #6
 8009dd6:	881a      	ldrh	r2, [r3, #0]
 8009dd8:	68b9      	ldr	r1, [r7, #8]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	0018      	movs	r0, r3
 8009dde:	f001 f9bd 	bl	800b15c <UART_Start_Receive_DMA>
 8009de2:	0003      	movs	r3, r0
 8009de4:	e000      	b.n	8009de8 <HAL_UART_Receive_DMA+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8009de6:	2302      	movs	r3, #2
  }
}
 8009de8:	0018      	movs	r0, r3
 8009dea:	46bd      	mov	sp, r7
 8009dec:	b008      	add	sp, #32
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	40008000 	.word	0x40008000
 8009df4:	40008400 	.word	0x40008400

08009df8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b098      	sub	sp, #96	; 0x60
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8009e00:	2301      	movs	r3, #1
 8009e02:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e04:	f3ef 8310 	mrs	r3, PRIMASK
 8009e08:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8009e0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e0e:	2301      	movs	r3, #1
 8009e10:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e14:	f383 8810 	msr	PRIMASK, r3
}
 8009e18:	46c0      	nop			; (mov r8, r8)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4987      	ldr	r1, [pc, #540]	; (800a044 <HAL_UART_Abort_IT+0x24c>)
 8009e26:	400a      	ands	r2, r1
 8009e28:	601a      	str	r2, [r3, #0]
 8009e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e30:	f383 8810 	msr	PRIMASK, r3
}
 8009e34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e36:	f3ef 8310 	mrs	r3, PRIMASK
 8009e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8009e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8009e40:	2301      	movs	r3, #1
 8009e42:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e46:	f383 8810 	msr	PRIMASK, r3
}
 8009e4a:	46c0      	nop			; (mov r8, r8)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	689a      	ldr	r2, [r3, #8]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	497c      	ldr	r1, [pc, #496]	; (800a048 <HAL_UART_Abort_IT+0x250>)
 8009e58:	400a      	ands	r2, r1
 8009e5a:	609a      	str	r2, [r3, #8]
 8009e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e5e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e62:	f383 8810 	msr	PRIMASK, r3
}
 8009e66:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d118      	bne.n	8009ea2 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e70:	f3ef 8310 	mrs	r3, PRIMASK
 8009e74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009e78:	653b      	str	r3, [r7, #80]	; 0x50
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	f383 8810 	msr	PRIMASK, r3
}
 8009e84:	46c0      	nop			; (mov r8, r8)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2110      	movs	r1, #16
 8009e92:	438a      	bics	r2, r1
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9c:	f383 8810 	msr	PRIMASK, r3
}
 8009ea0:	46c0      	nop			; (mov r8, r8)
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00f      	beq.n	8009eca <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	2280      	movs	r2, #128	; 0x80
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	2b80      	cmp	r3, #128	; 0x80
 8009eb6:	d104      	bne.n	8009ec2 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ebc:	4a63      	ldr	r2, [pc, #396]	; (800a04c <HAL_UART_Abort_IT+0x254>)
 8009ebe:	639a      	str	r2, [r3, #56]	; 0x38
 8009ec0:	e003      	b.n	8009eca <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00f      	beq.n	8009ef2 <HAL_UART_Abort_IT+0xfa>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	2240      	movs	r2, #64	; 0x40
 8009eda:	4013      	ands	r3, r2
 8009edc:	2b40      	cmp	r3, #64	; 0x40
 8009ede:	d104      	bne.n	8009eea <HAL_UART_Abort_IT+0xf2>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ee4:	4a5a      	ldr	r2, [pc, #360]	; (800a050 <HAL_UART_Abort_IT+0x258>)
 8009ee6:	639a      	str	r2, [r3, #56]	; 0x38
 8009ee8:	e003      	b.n	8009ef2 <HAL_UART_Abort_IT+0xfa>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eee:	2200      	movs	r2, #0
 8009ef0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	2280      	movs	r2, #128	; 0x80
 8009efa:	4013      	ands	r3, r2
 8009efc:	2b80      	cmp	r3, #128	; 0x80
 8009efe:	d12a      	bne.n	8009f56 <HAL_UART_Abort_IT+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f00:	f3ef 8310 	mrs	r3, PRIMASK
 8009f04:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f06:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	f383 8810 	msr	PRIMASK, r3
}
 8009f14:	46c0      	nop			; (mov r8, r8)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	689a      	ldr	r2, [r3, #8]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2180      	movs	r1, #128	; 0x80
 8009f22:	438a      	bics	r2, r1
 8009f24:	609a      	str	r2, [r3, #8]
 8009f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	f383 8810 	msr	PRIMASK, r3
}
 8009f30:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00d      	beq.n	8009f56 <HAL_UART_Abort_IT+0x15e>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f3e:	0018      	movs	r0, r3
 8009f40:	f7fb f9b6 	bl	80052b0 <HAL_DMA_Abort_IT>
 8009f44:	1e03      	subs	r3, r0, #0
 8009f46:	d004      	beq.n	8009f52 <HAL_UART_Abort_IT+0x15a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	639a      	str	r2, [r3, #56]	; 0x38
 8009f50:	e001      	b.n	8009f56 <HAL_UART_Abort_IT+0x15e>
      }
      else
      {
        abortcplt = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	2240      	movs	r2, #64	; 0x40
 8009f5e:	4013      	ands	r3, r2
 8009f60:	2b40      	cmp	r3, #64	; 0x40
 8009f62:	d12c      	bne.n	8009fbe <HAL_UART_Abort_IT+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f64:	f3ef 8310 	mrs	r3, PRIMASK
 8009f68:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f6e:	2301      	movs	r3, #1
 8009f70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	f383 8810 	msr	PRIMASK, r3
}
 8009f78:	46c0      	nop			; (mov r8, r8)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2140      	movs	r1, #64	; 0x40
 8009f86:	438a      	bics	r2, r1
 8009f88:	609a      	str	r2, [r3, #8]
 8009f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	f383 8810 	msr	PRIMASK, r3
}
 8009f94:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00f      	beq.n	8009fbe <HAL_UART_Abort_IT+0x1c6>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f7fb f984 	bl	80052b0 <HAL_DMA_Abort_IT>
 8009fa8:	1e03      	subs	r3, r0, #0
 8009faa:	d006      	beq.n	8009fba <HAL_UART_Abort_IT+0x1c2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fb8:	e001      	b.n	8009fbe <HAL_UART_Abort_IT+0x1c6>
      }
      else
      {
        abortcplt = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8009fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d13a      	bne.n	800a03a <HAL_UART_Abort_IT+0x242>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2256      	movs	r2, #86	; 0x56
 8009fc8:	2100      	movs	r1, #0
 8009fca:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	225e      	movs	r2, #94	; 0x5e
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	228c      	movs	r2, #140	; 0x8c
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	220f      	movs	r2, #15
 8009fee:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009ff4:	2380      	movs	r3, #128	; 0x80
 8009ff6:	059b      	lsls	r3, r3, #22
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d107      	bne.n	800a00c <HAL_UART_Abort_IT+0x214>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	699a      	ldr	r2, [r3, #24]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2110      	movs	r1, #16
 800a008:	430a      	orrs	r2, r1
 800a00a:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	699a      	ldr	r2, [r3, #24]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2108      	movs	r1, #8
 800a018:	430a      	orrs	r2, r1
 800a01a:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2284      	movs	r2, #132	; 0x84
 800a020:	2120      	movs	r1, #32
 800a022:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2288      	movs	r2, #136	; 0x88
 800a028:	2120      	movs	r1, #32
 800a02a:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	0018      	movs	r0, r3
 800a036:	f000 fb37 	bl	800a6a8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	0018      	movs	r0, r3
 800a03e:	46bd      	mov	sp, r7
 800a040:	b018      	add	sp, #96	; 0x60
 800a042:	bd80      	pop	{r7, pc}
 800a044:	fffffe1f 	.word	0xfffffe1f
 800a048:	ef7ffffe 	.word	0xef7ffffe
 800a04c:	0800b609 	.word	0x0800b609
 800a050:	0800b695 	.word	0x0800b695

0800a054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a054:	b5b0      	push	{r4, r5, r7, lr}
 800a056:	b0aa      	sub	sp, #168	; 0xa8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	22a4      	movs	r2, #164	; 0xa4
 800a064:	18b9      	adds	r1, r7, r2
 800a066:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	20a0      	movs	r0, #160	; 0xa0
 800a070:	1839      	adds	r1, r7, r0
 800a072:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	249c      	movs	r4, #156	; 0x9c
 800a07c:	1939      	adds	r1, r7, r4
 800a07e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a080:	0011      	movs	r1, r2
 800a082:	18bb      	adds	r3, r7, r2
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4aa0      	ldr	r2, [pc, #640]	; (800a308 <HAL_UART_IRQHandler+0x2b4>)
 800a088:	4013      	ands	r3, r2
 800a08a:	2298      	movs	r2, #152	; 0x98
 800a08c:	18bd      	adds	r5, r7, r2
 800a08e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800a090:	18bb      	adds	r3, r7, r2
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d11a      	bne.n	800a0ce <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a098:	187b      	adds	r3, r7, r1
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2220      	movs	r2, #32
 800a09e:	4013      	ands	r3, r2
 800a0a0:	d015      	beq.n	800a0ce <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0a2:	183b      	adds	r3, r7, r0
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	d105      	bne.n	800a0b8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a0ac:	193b      	adds	r3, r7, r4
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	2380      	movs	r3, #128	; 0x80
 800a0b2:	055b      	lsls	r3, r3, #21
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	d00a      	beq.n	800a0ce <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d100      	bne.n	800a0c2 <HAL_UART_IRQHandler+0x6e>
 800a0c0:	e2cf      	b.n	800a662 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	0010      	movs	r0, r2
 800a0ca:	4798      	blx	r3
      }
      return;
 800a0cc:	e2c9      	b.n	800a662 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a0ce:	2398      	movs	r3, #152	; 0x98
 800a0d0:	18fb      	adds	r3, r7, r3
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d100      	bne.n	800a0da <HAL_UART_IRQHandler+0x86>
 800a0d8:	e11e      	b.n	800a318 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a0da:	239c      	movs	r3, #156	; 0x9c
 800a0dc:	18fb      	adds	r3, r7, r3
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a8a      	ldr	r2, [pc, #552]	; (800a30c <HAL_UART_IRQHandler+0x2b8>)
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	d106      	bne.n	800a0f4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a0e6:	23a0      	movs	r3, #160	; 0xa0
 800a0e8:	18fb      	adds	r3, r7, r3
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a88      	ldr	r2, [pc, #544]	; (800a310 <HAL_UART_IRQHandler+0x2bc>)
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	d100      	bne.n	800a0f4 <HAL_UART_IRQHandler+0xa0>
 800a0f2:	e111      	b.n	800a318 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0f4:	23a4      	movs	r3, #164	; 0xa4
 800a0f6:	18fb      	adds	r3, r7, r3
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	d012      	beq.n	800a126 <HAL_UART_IRQHandler+0xd2>
 800a100:	23a0      	movs	r3, #160	; 0xa0
 800a102:	18fb      	adds	r3, r7, r3
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	2380      	movs	r3, #128	; 0x80
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	4013      	ands	r3, r2
 800a10c:	d00b      	beq.n	800a126 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2201      	movs	r2, #1
 800a114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	228c      	movs	r2, #140	; 0x8c
 800a11a:	589b      	ldr	r3, [r3, r2]
 800a11c:	2201      	movs	r2, #1
 800a11e:	431a      	orrs	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	218c      	movs	r1, #140	; 0x8c
 800a124:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a126:	23a4      	movs	r3, #164	; 0xa4
 800a128:	18fb      	adds	r3, r7, r3
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2202      	movs	r2, #2
 800a12e:	4013      	ands	r3, r2
 800a130:	d011      	beq.n	800a156 <HAL_UART_IRQHandler+0x102>
 800a132:	239c      	movs	r3, #156	; 0x9c
 800a134:	18fb      	adds	r3, r7, r3
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2201      	movs	r2, #1
 800a13a:	4013      	ands	r3, r2
 800a13c:	d00b      	beq.n	800a156 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2202      	movs	r2, #2
 800a144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	228c      	movs	r2, #140	; 0x8c
 800a14a:	589b      	ldr	r3, [r3, r2]
 800a14c:	2204      	movs	r2, #4
 800a14e:	431a      	orrs	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	218c      	movs	r1, #140	; 0x8c
 800a154:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a156:	23a4      	movs	r3, #164	; 0xa4
 800a158:	18fb      	adds	r3, r7, r3
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2204      	movs	r2, #4
 800a15e:	4013      	ands	r3, r2
 800a160:	d011      	beq.n	800a186 <HAL_UART_IRQHandler+0x132>
 800a162:	239c      	movs	r3, #156	; 0x9c
 800a164:	18fb      	adds	r3, r7, r3
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2201      	movs	r2, #1
 800a16a:	4013      	ands	r3, r2
 800a16c:	d00b      	beq.n	800a186 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2204      	movs	r2, #4
 800a174:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	228c      	movs	r2, #140	; 0x8c
 800a17a:	589b      	ldr	r3, [r3, r2]
 800a17c:	2202      	movs	r2, #2
 800a17e:	431a      	orrs	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	218c      	movs	r1, #140	; 0x8c
 800a184:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a186:	23a4      	movs	r3, #164	; 0xa4
 800a188:	18fb      	adds	r3, r7, r3
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2208      	movs	r2, #8
 800a18e:	4013      	ands	r3, r2
 800a190:	d017      	beq.n	800a1c2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a192:	23a0      	movs	r3, #160	; 0xa0
 800a194:	18fb      	adds	r3, r7, r3
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2220      	movs	r2, #32
 800a19a:	4013      	ands	r3, r2
 800a19c:	d105      	bne.n	800a1aa <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a19e:	239c      	movs	r3, #156	; 0x9c
 800a1a0:	18fb      	adds	r3, r7, r3
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a59      	ldr	r2, [pc, #356]	; (800a30c <HAL_UART_IRQHandler+0x2b8>)
 800a1a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1a8:	d00b      	beq.n	800a1c2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	228c      	movs	r2, #140	; 0x8c
 800a1b6:	589b      	ldr	r3, [r3, r2]
 800a1b8:	2208      	movs	r2, #8
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	218c      	movs	r1, #140	; 0x8c
 800a1c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a1c2:	23a4      	movs	r3, #164	; 0xa4
 800a1c4:	18fb      	adds	r3, r7, r3
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	2380      	movs	r3, #128	; 0x80
 800a1ca:	011b      	lsls	r3, r3, #4
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	d013      	beq.n	800a1f8 <HAL_UART_IRQHandler+0x1a4>
 800a1d0:	23a0      	movs	r3, #160	; 0xa0
 800a1d2:	18fb      	adds	r3, r7, r3
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	2380      	movs	r3, #128	; 0x80
 800a1d8:	04db      	lsls	r3, r3, #19
 800a1da:	4013      	ands	r3, r2
 800a1dc:	d00c      	beq.n	800a1f8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2280      	movs	r2, #128	; 0x80
 800a1e4:	0112      	lsls	r2, r2, #4
 800a1e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	228c      	movs	r2, #140	; 0x8c
 800a1ec:	589b      	ldr	r3, [r3, r2]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	218c      	movs	r1, #140	; 0x8c
 800a1f6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	228c      	movs	r2, #140	; 0x8c
 800a1fc:	589b      	ldr	r3, [r3, r2]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d100      	bne.n	800a204 <HAL_UART_IRQHandler+0x1b0>
 800a202:	e230      	b.n	800a666 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a204:	23a4      	movs	r3, #164	; 0xa4
 800a206:	18fb      	adds	r3, r7, r3
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2220      	movs	r2, #32
 800a20c:	4013      	ands	r3, r2
 800a20e:	d015      	beq.n	800a23c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a210:	23a0      	movs	r3, #160	; 0xa0
 800a212:	18fb      	adds	r3, r7, r3
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2220      	movs	r2, #32
 800a218:	4013      	ands	r3, r2
 800a21a:	d106      	bne.n	800a22a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a21c:	239c      	movs	r3, #156	; 0x9c
 800a21e:	18fb      	adds	r3, r7, r3
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	2380      	movs	r3, #128	; 0x80
 800a224:	055b      	lsls	r3, r3, #21
 800a226:	4013      	ands	r3, r2
 800a228:	d008      	beq.n	800a23c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d004      	beq.n	800a23c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	0010      	movs	r0, r2
 800a23a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	228c      	movs	r2, #140	; 0x8c
 800a240:	589b      	ldr	r3, [r3, r2]
 800a242:	2194      	movs	r1, #148	; 0x94
 800a244:	187a      	adds	r2, r7, r1
 800a246:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	2240      	movs	r2, #64	; 0x40
 800a250:	4013      	ands	r3, r2
 800a252:	2b40      	cmp	r3, #64	; 0x40
 800a254:	d004      	beq.n	800a260 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a256:	187b      	adds	r3, r7, r1
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2228      	movs	r2, #40	; 0x28
 800a25c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a25e:	d047      	beq.n	800a2f0 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	0018      	movs	r0, r3
 800a264:	f001 f85e 	bl	800b324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	2240      	movs	r2, #64	; 0x40
 800a270:	4013      	ands	r3, r2
 800a272:	2b40      	cmp	r3, #64	; 0x40
 800a274:	d137      	bne.n	800a2e6 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a276:	f3ef 8310 	mrs	r3, PRIMASK
 800a27a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800a27c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a27e:	2090      	movs	r0, #144	; 0x90
 800a280:	183a      	adds	r2, r7, r0
 800a282:	6013      	str	r3, [r2, #0]
 800a284:	2301      	movs	r3, #1
 800a286:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a28a:	f383 8810 	msr	PRIMASK, r3
}
 800a28e:	46c0      	nop			; (mov r8, r8)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689a      	ldr	r2, [r3, #8]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2140      	movs	r1, #64	; 0x40
 800a29c:	438a      	bics	r2, r1
 800a29e:	609a      	str	r2, [r3, #8]
 800a2a0:	183b      	adds	r3, r7, r0
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2a8:	f383 8810 	msr	PRIMASK, r3
}
 800a2ac:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d012      	beq.n	800a2dc <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2ba:	4a16      	ldr	r2, [pc, #88]	; (800a314 <HAL_UART_IRQHandler+0x2c0>)
 800a2bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	f7fa fff4 	bl	80052b0 <HAL_DMA_Abort_IT>
 800a2c8:	1e03      	subs	r3, r0, #0
 800a2ca:	d01a      	beq.n	800a302 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2d6:	0018      	movs	r0, r3
 800a2d8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2da:	e012      	b.n	800a302 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	0018      	movs	r0, r3
 800a2e0:	f000 f9da 	bl	800a698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2e4:	e00d      	b.n	800a302 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	0018      	movs	r0, r3
 800a2ea:	f000 f9d5 	bl	800a698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ee:	e008      	b.n	800a302 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f000 f9d0 	bl	800a698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	228c      	movs	r2, #140	; 0x8c
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a300:	e1b1      	b.n	800a666 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a302:	46c0      	nop			; (mov r8, r8)
    return;
 800a304:	e1af      	b.n	800a666 <HAL_UART_IRQHandler+0x612>
 800a306:	46c0      	nop			; (mov r8, r8)
 800a308:	0000080f 	.word	0x0000080f
 800a30c:	10000001 	.word	0x10000001
 800a310:	04000120 	.word	0x04000120
 800a314:	0800b5db 	.word	0x0800b5db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d000      	beq.n	800a322 <HAL_UART_IRQHandler+0x2ce>
 800a320:	e135      	b.n	800a58e <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a322:	23a4      	movs	r3, #164	; 0xa4
 800a324:	18fb      	adds	r3, r7, r3
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2210      	movs	r2, #16
 800a32a:	4013      	ands	r3, r2
 800a32c:	d100      	bne.n	800a330 <HAL_UART_IRQHandler+0x2dc>
 800a32e:	e12e      	b.n	800a58e <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a330:	23a0      	movs	r3, #160	; 0xa0
 800a332:	18fb      	adds	r3, r7, r3
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2210      	movs	r2, #16
 800a338:	4013      	ands	r3, r2
 800a33a:	d100      	bne.n	800a33e <HAL_UART_IRQHandler+0x2ea>
 800a33c:	e127      	b.n	800a58e <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2210      	movs	r2, #16
 800a344:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	2240      	movs	r2, #64	; 0x40
 800a34e:	4013      	ands	r3, r2
 800a350:	2b40      	cmp	r3, #64	; 0x40
 800a352:	d000      	beq.n	800a356 <HAL_UART_IRQHandler+0x302>
 800a354:	e09e      	b.n	800a494 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	217e      	movs	r1, #126	; 0x7e
 800a360:	187b      	adds	r3, r7, r1
 800a362:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a364:	187b      	adds	r3, r7, r1
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d100      	bne.n	800a36e <HAL_UART_IRQHandler+0x31a>
 800a36c:	e17d      	b.n	800a66a <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	225c      	movs	r2, #92	; 0x5c
 800a372:	5a9b      	ldrh	r3, [r3, r2]
 800a374:	187a      	adds	r2, r7, r1
 800a376:	8812      	ldrh	r2, [r2, #0]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d300      	bcc.n	800a37e <HAL_UART_IRQHandler+0x32a>
 800a37c:	e175      	b.n	800a66a <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	187a      	adds	r2, r7, r1
 800a382:	215e      	movs	r1, #94	; 0x5e
 800a384:	8812      	ldrh	r2, [r2, #0]
 800a386:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2220      	movs	r2, #32
 800a392:	4013      	ands	r3, r2
 800a394:	d16f      	bne.n	800a476 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a396:	f3ef 8310 	mrs	r3, PRIMASK
 800a39a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a39e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a6:	f383 8810 	msr	PRIMASK, r3
}
 800a3aa:	46c0      	nop			; (mov r8, r8)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	49b1      	ldr	r1, [pc, #708]	; (800a67c <HAL_UART_IRQHandler+0x628>)
 800a3b8:	400a      	ands	r2, r1
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	f383 8810 	msr	PRIMASK, r3
}
 800a3c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3d0:	677b      	str	r3, [r7, #116]	; 0x74
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d8:	f383 8810 	msr	PRIMASK, r3
}
 800a3dc:	46c0      	nop			; (mov r8, r8)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	689a      	ldr	r2, [r3, #8]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	438a      	bics	r2, r1
 800a3ec:	609a      	str	r2, [r3, #8]
 800a3ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3f0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3f4:	f383 8810 	msr	PRIMASK, r3
}
 800a3f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a3fe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a400:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a402:	673b      	str	r3, [r7, #112]	; 0x70
 800a404:	2301      	movs	r3, #1
 800a406:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a40a:	f383 8810 	msr	PRIMASK, r3
}
 800a40e:	46c0      	nop			; (mov r8, r8)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	689a      	ldr	r2, [r3, #8]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2140      	movs	r1, #64	; 0x40
 800a41c:	438a      	bics	r2, r1
 800a41e:	609a      	str	r2, [r3, #8]
 800a420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a422:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a426:	f383 8810 	msr	PRIMASK, r3
}
 800a42a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2288      	movs	r2, #136	; 0x88
 800a430:	2120      	movs	r1, #32
 800a432:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a43a:	f3ef 8310 	mrs	r3, PRIMASK
 800a43e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a440:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a442:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a444:	2301      	movs	r3, #1
 800a446:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a44a:	f383 8810 	msr	PRIMASK, r3
}
 800a44e:	46c0      	nop			; (mov r8, r8)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2110      	movs	r1, #16
 800a45c:	438a      	bics	r2, r1
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a462:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a466:	f383 8810 	msr	PRIMASK, r3
}
 800a46a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a470:	0018      	movs	r0, r3
 800a472:	f7fa febd 	bl	80051f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	225c      	movs	r2, #92	; 0x5c
 800a47a:	5a9a      	ldrh	r2, [r3, r2]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	215e      	movs	r1, #94	; 0x5e
 800a480:	5a5b      	ldrh	r3, [r3, r1]
 800a482:	b29b      	uxth	r3, r3
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	b29a      	uxth	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	0011      	movs	r1, r2
 800a48c:	0018      	movs	r0, r3
 800a48e:	f000 f913 	bl	800a6b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a492:	e0ea      	b.n	800a66a <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	225c      	movs	r2, #92	; 0x5c
 800a498:	5a99      	ldrh	r1, [r3, r2]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	225e      	movs	r2, #94	; 0x5e
 800a49e:	5a9b      	ldrh	r3, [r3, r2]
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	208e      	movs	r0, #142	; 0x8e
 800a4a4:	183b      	adds	r3, r7, r0
 800a4a6:	1a8a      	subs	r2, r1, r2
 800a4a8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	225e      	movs	r2, #94	; 0x5e
 800a4ae:	5a9b      	ldrh	r3, [r3, r2]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d100      	bne.n	800a4b8 <HAL_UART_IRQHandler+0x464>
 800a4b6:	e0da      	b.n	800a66e <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 800a4b8:	183b      	adds	r3, r7, r0
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d100      	bne.n	800a4c2 <HAL_UART_IRQHandler+0x46e>
 800a4c0:	e0d5      	b.n	800a66e <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4c2:	f3ef 8310 	mrs	r3, PRIMASK
 800a4c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4ca:	2488      	movs	r4, #136	; 0x88
 800a4cc:	193a      	adds	r2, r7, r4
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	f383 8810 	msr	PRIMASK, r3
}
 800a4da:	46c0      	nop			; (mov r8, r8)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4966      	ldr	r1, [pc, #408]	; (800a680 <HAL_UART_IRQHandler+0x62c>)
 800a4e8:	400a      	ands	r2, r1
 800a4ea:	601a      	str	r2, [r3, #0]
 800a4ec:	193b      	adds	r3, r7, r4
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f383 8810 	msr	PRIMASK, r3
}
 800a4f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a4fe:	61bb      	str	r3, [r7, #24]
  return(result);
 800a500:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a502:	2484      	movs	r4, #132	; 0x84
 800a504:	193a      	adds	r2, r7, r4
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	2301      	movs	r3, #1
 800a50a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	f383 8810 	msr	PRIMASK, r3
}
 800a512:	46c0      	nop			; (mov r8, r8)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	689a      	ldr	r2, [r3, #8]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4959      	ldr	r1, [pc, #356]	; (800a684 <HAL_UART_IRQHandler+0x630>)
 800a520:	400a      	ands	r2, r1
 800a522:	609a      	str	r2, [r3, #8]
 800a524:	193b      	adds	r3, r7, r4
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	f383 8810 	msr	PRIMASK, r3
}
 800a530:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2288      	movs	r2, #136	; 0x88
 800a536:	2120      	movs	r1, #32
 800a538:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a546:	f3ef 8310 	mrs	r3, PRIMASK
 800a54a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a54e:	2480      	movs	r4, #128	; 0x80
 800a550:	193a      	adds	r2, r7, r4
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	2301      	movs	r3, #1
 800a556:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55a:	f383 8810 	msr	PRIMASK, r3
}
 800a55e:	46c0      	nop			; (mov r8, r8)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2110      	movs	r1, #16
 800a56c:	438a      	bics	r2, r1
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	193b      	adds	r3, r7, r4
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a578:	f383 8810 	msr	PRIMASK, r3
}
 800a57c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a57e:	183b      	adds	r3, r7, r0
 800a580:	881a      	ldrh	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	0011      	movs	r1, r2
 800a586:	0018      	movs	r0, r3
 800a588:	f000 f896 	bl	800a6b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a58c:	e06f      	b.n	800a66e <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a58e:	23a4      	movs	r3, #164	; 0xa4
 800a590:	18fb      	adds	r3, r7, r3
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	2380      	movs	r3, #128	; 0x80
 800a596:	035b      	lsls	r3, r3, #13
 800a598:	4013      	ands	r3, r2
 800a59a:	d010      	beq.n	800a5be <HAL_UART_IRQHandler+0x56a>
 800a59c:	239c      	movs	r3, #156	; 0x9c
 800a59e:	18fb      	adds	r3, r7, r3
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	2380      	movs	r3, #128	; 0x80
 800a5a4:	03db      	lsls	r3, r3, #15
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	d009      	beq.n	800a5be <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2280      	movs	r2, #128	; 0x80
 800a5b0:	0352      	lsls	r2, r2, #13
 800a5b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	0018      	movs	r0, r3
 800a5b8:	f001 fa82 	bl	800bac0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5bc:	e05a      	b.n	800a674 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a5be:	23a4      	movs	r3, #164	; 0xa4
 800a5c0:	18fb      	adds	r3, r7, r3
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2280      	movs	r2, #128	; 0x80
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	d016      	beq.n	800a5f8 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a5ca:	23a0      	movs	r3, #160	; 0xa0
 800a5cc:	18fb      	adds	r3, r7, r3
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2280      	movs	r2, #128	; 0x80
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	d106      	bne.n	800a5e4 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a5d6:	239c      	movs	r3, #156	; 0x9c
 800a5d8:	18fb      	adds	r3, r7, r3
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	2380      	movs	r3, #128	; 0x80
 800a5de:	041b      	lsls	r3, r3, #16
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	d009      	beq.n	800a5f8 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d042      	beq.n	800a672 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	0010      	movs	r0, r2
 800a5f4:	4798      	blx	r3
    }
    return;
 800a5f6:	e03c      	b.n	800a672 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5f8:	23a4      	movs	r3, #164	; 0xa4
 800a5fa:	18fb      	adds	r3, r7, r3
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2240      	movs	r2, #64	; 0x40
 800a600:	4013      	ands	r3, r2
 800a602:	d00a      	beq.n	800a61a <HAL_UART_IRQHandler+0x5c6>
 800a604:	23a0      	movs	r3, #160	; 0xa0
 800a606:	18fb      	adds	r3, r7, r3
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2240      	movs	r2, #64	; 0x40
 800a60c:	4013      	ands	r3, r2
 800a60e:	d004      	beq.n	800a61a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	0018      	movs	r0, r3
 800a614:	f001 fa28 	bl	800ba68 <UART_EndTransmit_IT>
    return;
 800a618:	e02c      	b.n	800a674 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a61a:	23a4      	movs	r3, #164	; 0xa4
 800a61c:	18fb      	adds	r3, r7, r3
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	2380      	movs	r3, #128	; 0x80
 800a622:	041b      	lsls	r3, r3, #16
 800a624:	4013      	ands	r3, r2
 800a626:	d00b      	beq.n	800a640 <HAL_UART_IRQHandler+0x5ec>
 800a628:	23a0      	movs	r3, #160	; 0xa0
 800a62a:	18fb      	adds	r3, r7, r3
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	2380      	movs	r3, #128	; 0x80
 800a630:	05db      	lsls	r3, r3, #23
 800a632:	4013      	ands	r3, r2
 800a634:	d004      	beq.n	800a640 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	0018      	movs	r0, r3
 800a63a:	f001 fa51 	bl	800bae0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a63e:	e019      	b.n	800a674 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a640:	23a4      	movs	r3, #164	; 0xa4
 800a642:	18fb      	adds	r3, r7, r3
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	2380      	movs	r3, #128	; 0x80
 800a648:	045b      	lsls	r3, r3, #17
 800a64a:	4013      	ands	r3, r2
 800a64c:	d012      	beq.n	800a674 <HAL_UART_IRQHandler+0x620>
 800a64e:	23a0      	movs	r3, #160	; 0xa0
 800a650:	18fb      	adds	r3, r7, r3
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	da0d      	bge.n	800a674 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	0018      	movs	r0, r3
 800a65c:	f001 fa38 	bl	800bad0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a660:	e008      	b.n	800a674 <HAL_UART_IRQHandler+0x620>
      return;
 800a662:	46c0      	nop			; (mov r8, r8)
 800a664:	e006      	b.n	800a674 <HAL_UART_IRQHandler+0x620>
    return;
 800a666:	46c0      	nop			; (mov r8, r8)
 800a668:	e004      	b.n	800a674 <HAL_UART_IRQHandler+0x620>
      return;
 800a66a:	46c0      	nop			; (mov r8, r8)
 800a66c:	e002      	b.n	800a674 <HAL_UART_IRQHandler+0x620>
      return;
 800a66e:	46c0      	nop			; (mov r8, r8)
 800a670:	e000      	b.n	800a674 <HAL_UART_IRQHandler+0x620>
    return;
 800a672:	46c0      	nop			; (mov r8, r8)
  }
}
 800a674:	46bd      	mov	sp, r7
 800a676:	b02a      	add	sp, #168	; 0xa8
 800a678:	bdb0      	pop	{r4, r5, r7, pc}
 800a67a:	46c0      	nop			; (mov r8, r8)
 800a67c:	fffffeff 	.word	0xfffffeff
 800a680:	fffffedf 	.word	0xfffffedf
 800a684:	effffffe 	.word	0xeffffffe

0800a688 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a690:	46c0      	nop			; (mov r8, r8)
 800a692:	46bd      	mov	sp, r7
 800a694:	b002      	add	sp, #8
 800a696:	bd80      	pop	{r7, pc}

0800a698 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a6a0:	46c0      	nop			; (mov r8, r8)
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	b002      	add	sp, #8
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a6b0:	46c0      	nop			; (mov r8, r8)
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	b002      	add	sp, #8
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	000a      	movs	r2, r1
 800a6c2:	1cbb      	adds	r3, r7, #2
 800a6c4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a6c6:	46c0      	nop			; (mov r8, r8)
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	b002      	add	sp, #8
 800a6cc:	bd80      	pop	{r7, pc}
	...

0800a6d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6d0:	b5b0      	push	{r4, r5, r7, lr}
 800a6d2:	b090      	sub	sp, #64	; 0x40
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a6d8:	231a      	movs	r3, #26
 800a6da:	2220      	movs	r2, #32
 800a6dc:	4694      	mov	ip, r2
 800a6de:	44bc      	add	ip, r7
 800a6e0:	4463      	add	r3, ip
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	689a      	ldr	r2, [r3, #8]
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	431a      	orrs	r2, r3
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4ac1      	ldr	r2, [pc, #772]	; (800aa0c <UART_SetConfig+0x33c>)
 800a706:	4013      	ands	r3, r2
 800a708:	0019      	movs	r1, r3
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a710:	430b      	orrs	r3, r1
 800a712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	4abd      	ldr	r2, [pc, #756]	; (800aa10 <UART_SetConfig+0x340>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	0018      	movs	r0, r3
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	68d9      	ldr	r1, [r3, #12]
 800a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	0003      	movs	r3, r0
 800a72a:	430b      	orrs	r3, r1
 800a72c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4ab6      	ldr	r2, [pc, #728]	; (800aa14 <UART_SetConfig+0x344>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d009      	beq.n	800a752 <UART_SetConfig+0x82>
 800a73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4ab5      	ldr	r2, [pc, #724]	; (800aa18 <UART_SetConfig+0x348>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d004      	beq.n	800a752 <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	6a1b      	ldr	r3, [r3, #32]
 800a74c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a74e:	4313      	orrs	r3, r2
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	4ab0      	ldr	r2, [pc, #704]	; (800aa1c <UART_SetConfig+0x34c>)
 800a75a:	4013      	ands	r3, r2
 800a75c:	0019      	movs	r1, r3
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a764:	430b      	orrs	r3, r1
 800a766:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76e:	220f      	movs	r2, #15
 800a770:	4393      	bics	r3, r2
 800a772:	0018      	movs	r0, r3
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	0003      	movs	r3, r0
 800a77e:	430b      	orrs	r3, r1
 800a780:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4aa6      	ldr	r2, [pc, #664]	; (800aa20 <UART_SetConfig+0x350>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d136      	bne.n	800a7fa <UART_SetConfig+0x12a>
 800a78c:	4ba5      	ldr	r3, [pc, #660]	; (800aa24 <UART_SetConfig+0x354>)
 800a78e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a790:	2203      	movs	r2, #3
 800a792:	4013      	ands	r3, r2
 800a794:	2b03      	cmp	r3, #3
 800a796:	d020      	beq.n	800a7da <UART_SetConfig+0x10a>
 800a798:	d827      	bhi.n	800a7ea <UART_SetConfig+0x11a>
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d00d      	beq.n	800a7ba <UART_SetConfig+0xea>
 800a79e:	d824      	bhi.n	800a7ea <UART_SetConfig+0x11a>
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d002      	beq.n	800a7aa <UART_SetConfig+0xda>
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d010      	beq.n	800a7ca <UART_SetConfig+0xfa>
 800a7a8:	e01f      	b.n	800a7ea <UART_SetConfig+0x11a>
 800a7aa:	231b      	movs	r3, #27
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	4694      	mov	ip, r2
 800a7b0:	44bc      	add	ip, r7
 800a7b2:	4463      	add	r3, ip
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	701a      	strb	r2, [r3, #0]
 800a7b8:	e16f      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a7ba:	231b      	movs	r3, #27
 800a7bc:	2220      	movs	r2, #32
 800a7be:	4694      	mov	ip, r2
 800a7c0:	44bc      	add	ip, r7
 800a7c2:	4463      	add	r3, ip
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	701a      	strb	r2, [r3, #0]
 800a7c8:	e167      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a7ca:	231b      	movs	r3, #27
 800a7cc:	2220      	movs	r2, #32
 800a7ce:	4694      	mov	ip, r2
 800a7d0:	44bc      	add	ip, r7
 800a7d2:	4463      	add	r3, ip
 800a7d4:	2204      	movs	r2, #4
 800a7d6:	701a      	strb	r2, [r3, #0]
 800a7d8:	e15f      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a7da:	231b      	movs	r3, #27
 800a7dc:	2220      	movs	r2, #32
 800a7de:	4694      	mov	ip, r2
 800a7e0:	44bc      	add	ip, r7
 800a7e2:	4463      	add	r3, ip
 800a7e4:	2208      	movs	r2, #8
 800a7e6:	701a      	strb	r2, [r3, #0]
 800a7e8:	e157      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a7ea:	231b      	movs	r3, #27
 800a7ec:	2220      	movs	r2, #32
 800a7ee:	4694      	mov	ip, r2
 800a7f0:	44bc      	add	ip, r7
 800a7f2:	4463      	add	r3, ip
 800a7f4:	2210      	movs	r2, #16
 800a7f6:	701a      	strb	r2, [r3, #0]
 800a7f8:	e14f      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a8a      	ldr	r2, [pc, #552]	; (800aa28 <UART_SetConfig+0x358>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d136      	bne.n	800a872 <UART_SetConfig+0x1a2>
 800a804:	4b87      	ldr	r3, [pc, #540]	; (800aa24 <UART_SetConfig+0x354>)
 800a806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a808:	220c      	movs	r2, #12
 800a80a:	4013      	ands	r3, r2
 800a80c:	2b0c      	cmp	r3, #12
 800a80e:	d020      	beq.n	800a852 <UART_SetConfig+0x182>
 800a810:	d827      	bhi.n	800a862 <UART_SetConfig+0x192>
 800a812:	2b08      	cmp	r3, #8
 800a814:	d00d      	beq.n	800a832 <UART_SetConfig+0x162>
 800a816:	d824      	bhi.n	800a862 <UART_SetConfig+0x192>
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <UART_SetConfig+0x152>
 800a81c:	2b04      	cmp	r3, #4
 800a81e:	d010      	beq.n	800a842 <UART_SetConfig+0x172>
 800a820:	e01f      	b.n	800a862 <UART_SetConfig+0x192>
 800a822:	231b      	movs	r3, #27
 800a824:	2220      	movs	r2, #32
 800a826:	4694      	mov	ip, r2
 800a828:	44bc      	add	ip, r7
 800a82a:	4463      	add	r3, ip
 800a82c:	2200      	movs	r2, #0
 800a82e:	701a      	strb	r2, [r3, #0]
 800a830:	e133      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a832:	231b      	movs	r3, #27
 800a834:	2220      	movs	r2, #32
 800a836:	4694      	mov	ip, r2
 800a838:	44bc      	add	ip, r7
 800a83a:	4463      	add	r3, ip
 800a83c:	2202      	movs	r2, #2
 800a83e:	701a      	strb	r2, [r3, #0]
 800a840:	e12b      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a842:	231b      	movs	r3, #27
 800a844:	2220      	movs	r2, #32
 800a846:	4694      	mov	ip, r2
 800a848:	44bc      	add	ip, r7
 800a84a:	4463      	add	r3, ip
 800a84c:	2204      	movs	r2, #4
 800a84e:	701a      	strb	r2, [r3, #0]
 800a850:	e123      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a852:	231b      	movs	r3, #27
 800a854:	2220      	movs	r2, #32
 800a856:	4694      	mov	ip, r2
 800a858:	44bc      	add	ip, r7
 800a85a:	4463      	add	r3, ip
 800a85c:	2208      	movs	r2, #8
 800a85e:	701a      	strb	r2, [r3, #0]
 800a860:	e11b      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a862:	231b      	movs	r3, #27
 800a864:	2220      	movs	r2, #32
 800a866:	4694      	mov	ip, r2
 800a868:	44bc      	add	ip, r7
 800a86a:	4463      	add	r3, ip
 800a86c:	2210      	movs	r2, #16
 800a86e:	701a      	strb	r2, [r3, #0]
 800a870:	e113      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a6d      	ldr	r2, [pc, #436]	; (800aa2c <UART_SetConfig+0x35c>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d136      	bne.n	800a8ea <UART_SetConfig+0x21a>
 800a87c:	4b69      	ldr	r3, [pc, #420]	; (800aa24 <UART_SetConfig+0x354>)
 800a87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a880:	2230      	movs	r2, #48	; 0x30
 800a882:	4013      	ands	r3, r2
 800a884:	2b30      	cmp	r3, #48	; 0x30
 800a886:	d020      	beq.n	800a8ca <UART_SetConfig+0x1fa>
 800a888:	d827      	bhi.n	800a8da <UART_SetConfig+0x20a>
 800a88a:	2b20      	cmp	r3, #32
 800a88c:	d00d      	beq.n	800a8aa <UART_SetConfig+0x1da>
 800a88e:	d824      	bhi.n	800a8da <UART_SetConfig+0x20a>
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <UART_SetConfig+0x1ca>
 800a894:	2b10      	cmp	r3, #16
 800a896:	d010      	beq.n	800a8ba <UART_SetConfig+0x1ea>
 800a898:	e01f      	b.n	800a8da <UART_SetConfig+0x20a>
 800a89a:	231b      	movs	r3, #27
 800a89c:	2220      	movs	r2, #32
 800a89e:	4694      	mov	ip, r2
 800a8a0:	44bc      	add	ip, r7
 800a8a2:	4463      	add	r3, ip
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	701a      	strb	r2, [r3, #0]
 800a8a8:	e0f7      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a8aa:	231b      	movs	r3, #27
 800a8ac:	2220      	movs	r2, #32
 800a8ae:	4694      	mov	ip, r2
 800a8b0:	44bc      	add	ip, r7
 800a8b2:	4463      	add	r3, ip
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	701a      	strb	r2, [r3, #0]
 800a8b8:	e0ef      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a8ba:	231b      	movs	r3, #27
 800a8bc:	2220      	movs	r2, #32
 800a8be:	4694      	mov	ip, r2
 800a8c0:	44bc      	add	ip, r7
 800a8c2:	4463      	add	r3, ip
 800a8c4:	2204      	movs	r2, #4
 800a8c6:	701a      	strb	r2, [r3, #0]
 800a8c8:	e0e7      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a8ca:	231b      	movs	r3, #27
 800a8cc:	2220      	movs	r2, #32
 800a8ce:	4694      	mov	ip, r2
 800a8d0:	44bc      	add	ip, r7
 800a8d2:	4463      	add	r3, ip
 800a8d4:	2208      	movs	r2, #8
 800a8d6:	701a      	strb	r2, [r3, #0]
 800a8d8:	e0df      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a8da:	231b      	movs	r3, #27
 800a8dc:	2220      	movs	r2, #32
 800a8de:	4694      	mov	ip, r2
 800a8e0:	44bc      	add	ip, r7
 800a8e2:	4463      	add	r3, ip
 800a8e4:	2210      	movs	r2, #16
 800a8e6:	701a      	strb	r2, [r3, #0]
 800a8e8:	e0d7      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a50      	ldr	r2, [pc, #320]	; (800aa30 <UART_SetConfig+0x360>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d107      	bne.n	800a904 <UART_SetConfig+0x234>
 800a8f4:	231b      	movs	r3, #27
 800a8f6:	2220      	movs	r2, #32
 800a8f8:	4694      	mov	ip, r2
 800a8fa:	44bc      	add	ip, r7
 800a8fc:	4463      	add	r3, ip
 800a8fe:	2200      	movs	r2, #0
 800a900:	701a      	strb	r2, [r3, #0]
 800a902:	e0ca      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a4a      	ldr	r2, [pc, #296]	; (800aa34 <UART_SetConfig+0x364>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d107      	bne.n	800a91e <UART_SetConfig+0x24e>
 800a90e:	231b      	movs	r3, #27
 800a910:	2220      	movs	r2, #32
 800a912:	4694      	mov	ip, r2
 800a914:	44bc      	add	ip, r7
 800a916:	4463      	add	r3, ip
 800a918:	2200      	movs	r2, #0
 800a91a:	701a      	strb	r2, [r3, #0]
 800a91c:	e0bd      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a45      	ldr	r2, [pc, #276]	; (800aa38 <UART_SetConfig+0x368>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d107      	bne.n	800a938 <UART_SetConfig+0x268>
 800a928:	231b      	movs	r3, #27
 800a92a:	2220      	movs	r2, #32
 800a92c:	4694      	mov	ip, r2
 800a92e:	44bc      	add	ip, r7
 800a930:	4463      	add	r3, ip
 800a932:	2200      	movs	r2, #0
 800a934:	701a      	strb	r2, [r3, #0]
 800a936:	e0b0      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a35      	ldr	r2, [pc, #212]	; (800aa14 <UART_SetConfig+0x344>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d143      	bne.n	800a9ca <UART_SetConfig+0x2fa>
 800a942:	4b38      	ldr	r3, [pc, #224]	; (800aa24 <UART_SetConfig+0x354>)
 800a944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a946:	23c0      	movs	r3, #192	; 0xc0
 800a948:	011b      	lsls	r3, r3, #4
 800a94a:	4013      	ands	r3, r2
 800a94c:	22c0      	movs	r2, #192	; 0xc0
 800a94e:	0112      	lsls	r2, r2, #4
 800a950:	4293      	cmp	r3, r2
 800a952:	d02a      	beq.n	800a9aa <UART_SetConfig+0x2da>
 800a954:	22c0      	movs	r2, #192	; 0xc0
 800a956:	0112      	lsls	r2, r2, #4
 800a958:	4293      	cmp	r3, r2
 800a95a:	d82e      	bhi.n	800a9ba <UART_SetConfig+0x2ea>
 800a95c:	2280      	movs	r2, #128	; 0x80
 800a95e:	0112      	lsls	r2, r2, #4
 800a960:	4293      	cmp	r3, r2
 800a962:	d012      	beq.n	800a98a <UART_SetConfig+0x2ba>
 800a964:	2280      	movs	r2, #128	; 0x80
 800a966:	0112      	lsls	r2, r2, #4
 800a968:	4293      	cmp	r3, r2
 800a96a:	d826      	bhi.n	800a9ba <UART_SetConfig+0x2ea>
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d004      	beq.n	800a97a <UART_SetConfig+0x2aa>
 800a970:	2280      	movs	r2, #128	; 0x80
 800a972:	00d2      	lsls	r2, r2, #3
 800a974:	4293      	cmp	r3, r2
 800a976:	d010      	beq.n	800a99a <UART_SetConfig+0x2ca>
 800a978:	e01f      	b.n	800a9ba <UART_SetConfig+0x2ea>
 800a97a:	231b      	movs	r3, #27
 800a97c:	2220      	movs	r2, #32
 800a97e:	4694      	mov	ip, r2
 800a980:	44bc      	add	ip, r7
 800a982:	4463      	add	r3, ip
 800a984:	2200      	movs	r2, #0
 800a986:	701a      	strb	r2, [r3, #0]
 800a988:	e087      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a98a:	231b      	movs	r3, #27
 800a98c:	2220      	movs	r2, #32
 800a98e:	4694      	mov	ip, r2
 800a990:	44bc      	add	ip, r7
 800a992:	4463      	add	r3, ip
 800a994:	2202      	movs	r2, #2
 800a996:	701a      	strb	r2, [r3, #0]
 800a998:	e07f      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a99a:	231b      	movs	r3, #27
 800a99c:	2220      	movs	r2, #32
 800a99e:	4694      	mov	ip, r2
 800a9a0:	44bc      	add	ip, r7
 800a9a2:	4463      	add	r3, ip
 800a9a4:	2204      	movs	r2, #4
 800a9a6:	701a      	strb	r2, [r3, #0]
 800a9a8:	e077      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a9aa:	231b      	movs	r3, #27
 800a9ac:	2220      	movs	r2, #32
 800a9ae:	4694      	mov	ip, r2
 800a9b0:	44bc      	add	ip, r7
 800a9b2:	4463      	add	r3, ip
 800a9b4:	2208      	movs	r2, #8
 800a9b6:	701a      	strb	r2, [r3, #0]
 800a9b8:	e06f      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a9ba:	231b      	movs	r3, #27
 800a9bc:	2220      	movs	r2, #32
 800a9be:	4694      	mov	ip, r2
 800a9c0:	44bc      	add	ip, r7
 800a9c2:	4463      	add	r3, ip
 800a9c4:	2210      	movs	r2, #16
 800a9c6:	701a      	strb	r2, [r3, #0]
 800a9c8:	e067      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a12      	ldr	r2, [pc, #72]	; (800aa18 <UART_SetConfig+0x348>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d15b      	bne.n	800aa8c <UART_SetConfig+0x3bc>
 800a9d4:	4b13      	ldr	r3, [pc, #76]	; (800aa24 <UART_SetConfig+0x354>)
 800a9d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9d8:	23c0      	movs	r3, #192	; 0xc0
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4013      	ands	r3, r2
 800a9de:	22c0      	movs	r2, #192	; 0xc0
 800a9e0:	0092      	lsls	r2, r2, #2
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d042      	beq.n	800aa6c <UART_SetConfig+0x39c>
 800a9e6:	22c0      	movs	r2, #192	; 0xc0
 800a9e8:	0092      	lsls	r2, r2, #2
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d846      	bhi.n	800aa7c <UART_SetConfig+0x3ac>
 800a9ee:	2280      	movs	r2, #128	; 0x80
 800a9f0:	0092      	lsls	r2, r2, #2
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d02a      	beq.n	800aa4c <UART_SetConfig+0x37c>
 800a9f6:	2280      	movs	r2, #128	; 0x80
 800a9f8:	0092      	lsls	r2, r2, #2
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d83e      	bhi.n	800aa7c <UART_SetConfig+0x3ac>
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d01c      	beq.n	800aa3c <UART_SetConfig+0x36c>
 800aa02:	2280      	movs	r2, #128	; 0x80
 800aa04:	0052      	lsls	r2, r2, #1
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d028      	beq.n	800aa5c <UART_SetConfig+0x38c>
 800aa0a:	e037      	b.n	800aa7c <UART_SetConfig+0x3ac>
 800aa0c:	cfff69f3 	.word	0xcfff69f3
 800aa10:	ffffcfff 	.word	0xffffcfff
 800aa14:	40008000 	.word	0x40008000
 800aa18:	40008400 	.word	0x40008400
 800aa1c:	11fff4ff 	.word	0x11fff4ff
 800aa20:	40013800 	.word	0x40013800
 800aa24:	40021000 	.word	0x40021000
 800aa28:	40004400 	.word	0x40004400
 800aa2c:	40004800 	.word	0x40004800
 800aa30:	40004c00 	.word	0x40004c00
 800aa34:	40005000 	.word	0x40005000
 800aa38:	40013c00 	.word	0x40013c00
 800aa3c:	231b      	movs	r3, #27
 800aa3e:	2220      	movs	r2, #32
 800aa40:	4694      	mov	ip, r2
 800aa42:	44bc      	add	ip, r7
 800aa44:	4463      	add	r3, ip
 800aa46:	2200      	movs	r2, #0
 800aa48:	701a      	strb	r2, [r3, #0]
 800aa4a:	e026      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800aa4c:	231b      	movs	r3, #27
 800aa4e:	2220      	movs	r2, #32
 800aa50:	4694      	mov	ip, r2
 800aa52:	44bc      	add	ip, r7
 800aa54:	4463      	add	r3, ip
 800aa56:	2202      	movs	r2, #2
 800aa58:	701a      	strb	r2, [r3, #0]
 800aa5a:	e01e      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800aa5c:	231b      	movs	r3, #27
 800aa5e:	2220      	movs	r2, #32
 800aa60:	4694      	mov	ip, r2
 800aa62:	44bc      	add	ip, r7
 800aa64:	4463      	add	r3, ip
 800aa66:	2204      	movs	r2, #4
 800aa68:	701a      	strb	r2, [r3, #0]
 800aa6a:	e016      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800aa6c:	231b      	movs	r3, #27
 800aa6e:	2220      	movs	r2, #32
 800aa70:	4694      	mov	ip, r2
 800aa72:	44bc      	add	ip, r7
 800aa74:	4463      	add	r3, ip
 800aa76:	2208      	movs	r2, #8
 800aa78:	701a      	strb	r2, [r3, #0]
 800aa7a:	e00e      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800aa7c:	231b      	movs	r3, #27
 800aa7e:	2220      	movs	r2, #32
 800aa80:	4694      	mov	ip, r2
 800aa82:	44bc      	add	ip, r7
 800aa84:	4463      	add	r3, ip
 800aa86:	2210      	movs	r2, #16
 800aa88:	701a      	strb	r2, [r3, #0]
 800aa8a:	e006      	b.n	800aa9a <UART_SetConfig+0x3ca>
 800aa8c:	231b      	movs	r3, #27
 800aa8e:	2220      	movs	r2, #32
 800aa90:	4694      	mov	ip, r2
 800aa92:	44bc      	add	ip, r7
 800aa94:	4463      	add	r3, ip
 800aa96:	2210      	movs	r2, #16
 800aa98:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4ab8      	ldr	r2, [pc, #736]	; (800ad80 <UART_SetConfig+0x6b0>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d005      	beq.n	800aab0 <UART_SetConfig+0x3e0>
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4ab6      	ldr	r2, [pc, #728]	; (800ad84 <UART_SetConfig+0x6b4>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d000      	beq.n	800aab0 <UART_SetConfig+0x3e0>
 800aaae:	e097      	b.n	800abe0 <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aab0:	231b      	movs	r3, #27
 800aab2:	2220      	movs	r2, #32
 800aab4:	4694      	mov	ip, r2
 800aab6:	44bc      	add	ip, r7
 800aab8:	4463      	add	r3, ip
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	2b08      	cmp	r3, #8
 800aabe:	d015      	beq.n	800aaec <UART_SetConfig+0x41c>
 800aac0:	dc18      	bgt.n	800aaf4 <UART_SetConfig+0x424>
 800aac2:	2b04      	cmp	r3, #4
 800aac4:	d00d      	beq.n	800aae2 <UART_SetConfig+0x412>
 800aac6:	dc15      	bgt.n	800aaf4 <UART_SetConfig+0x424>
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <UART_SetConfig+0x402>
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d005      	beq.n	800aadc <UART_SetConfig+0x40c>
 800aad0:	e010      	b.n	800aaf4 <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aad2:	f7fd ff59 	bl	8008988 <HAL_RCC_GetPCLK1Freq>
 800aad6:	0003      	movs	r3, r0
 800aad8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aada:	e015      	b.n	800ab08 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aadc:	4baa      	ldr	r3, [pc, #680]	; (800ad88 <UART_SetConfig+0x6b8>)
 800aade:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aae0:	e012      	b.n	800ab08 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aae2:	f7fd fec5 	bl	8008870 <HAL_RCC_GetSysClockFreq>
 800aae6:	0003      	movs	r3, r0
 800aae8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aaea:	e00d      	b.n	800ab08 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaec:	2380      	movs	r3, #128	; 0x80
 800aaee:	021b      	lsls	r3, r3, #8
 800aaf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aaf2:	e009      	b.n	800ab08 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800aaf8:	231a      	movs	r3, #26
 800aafa:	2220      	movs	r2, #32
 800aafc:	4694      	mov	ip, r2
 800aafe:	44bc      	add	ip, r7
 800ab00:	4463      	add	r3, ip
 800ab02:	2201      	movs	r2, #1
 800ab04:	701a      	strb	r2, [r3, #0]
        break;
 800ab06:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d100      	bne.n	800ab10 <UART_SetConfig+0x440>
 800ab0e:	e146      	b.n	800ad9e <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab14:	4b9d      	ldr	r3, [pc, #628]	; (800ad8c <UART_SetConfig+0x6bc>)
 800ab16:	0052      	lsls	r2, r2, #1
 800ab18:	5ad3      	ldrh	r3, [r2, r3]
 800ab1a:	0019      	movs	r1, r3
 800ab1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab1e:	f7f5 fb0d 	bl	800013c <__udivsi3>
 800ab22:	0003      	movs	r3, r0
 800ab24:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	0013      	movs	r3, r2
 800ab2c:	005b      	lsls	r3, r3, #1
 800ab2e:	189b      	adds	r3, r3, r2
 800ab30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d305      	bcc.n	800ab42 <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d907      	bls.n	800ab52 <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 800ab42:	231a      	movs	r3, #26
 800ab44:	2220      	movs	r2, #32
 800ab46:	4694      	mov	ip, r2
 800ab48:	44bc      	add	ip, r7
 800ab4a:	4463      	add	r3, ip
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	701a      	strb	r2, [r3, #0]
 800ab50:	e045      	b.n	800abde <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab54:	61bb      	str	r3, [r7, #24]
 800ab56:	2300      	movs	r3, #0
 800ab58:	61fb      	str	r3, [r7, #28]
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab5e:	4b8b      	ldr	r3, [pc, #556]	; (800ad8c <UART_SetConfig+0x6bc>)
 800ab60:	0052      	lsls	r2, r2, #1
 800ab62:	5ad3      	ldrh	r3, [r2, r3]
 800ab64:	613b      	str	r3, [r7, #16]
 800ab66:	2300      	movs	r3, #0
 800ab68:	617b      	str	r3, [r7, #20]
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	69b8      	ldr	r0, [r7, #24]
 800ab70:	69f9      	ldr	r1, [r7, #28]
 800ab72:	f7f5 fc97 	bl	80004a4 <__aeabi_uldivmod>
 800ab76:	0002      	movs	r2, r0
 800ab78:	000b      	movs	r3, r1
 800ab7a:	0e11      	lsrs	r1, r2, #24
 800ab7c:	021d      	lsls	r5, r3, #8
 800ab7e:	430d      	orrs	r5, r1
 800ab80:	0214      	lsls	r4, r2, #8
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	085b      	lsrs	r3, r3, #1
 800ab88:	60bb      	str	r3, [r7, #8]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60fb      	str	r3, [r7, #12]
 800ab8e:	68b8      	ldr	r0, [r7, #8]
 800ab90:	68f9      	ldr	r1, [r7, #12]
 800ab92:	1900      	adds	r0, r0, r4
 800ab94:	4169      	adcs	r1, r5
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	603b      	str	r3, [r7, #0]
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	607b      	str	r3, [r7, #4]
 800aba0:	683a      	ldr	r2, [r7, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f7f5 fc7e 	bl	80004a4 <__aeabi_uldivmod>
 800aba8:	0002      	movs	r2, r0
 800abaa:	000b      	movs	r3, r1
 800abac:	0013      	movs	r3, r2
 800abae:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abb2:	23c0      	movs	r3, #192	; 0xc0
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d309      	bcc.n	800abce <UART_SetConfig+0x4fe>
 800abba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abbc:	2380      	movs	r3, #128	; 0x80
 800abbe:	035b      	lsls	r3, r3, #13
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d204      	bcs.n	800abce <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abca:	60da      	str	r2, [r3, #12]
 800abcc:	e007      	b.n	800abde <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 800abce:	231a      	movs	r3, #26
 800abd0:	2220      	movs	r2, #32
 800abd2:	4694      	mov	ip, r2
 800abd4:	44bc      	add	ip, r7
 800abd6:	4463      	add	r3, ip
 800abd8:	2201      	movs	r2, #1
 800abda:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800abdc:	e0df      	b.n	800ad9e <UART_SetConfig+0x6ce>
 800abde:	e0de      	b.n	800ad9e <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	69da      	ldr	r2, [r3, #28]
 800abe4:	2380      	movs	r3, #128	; 0x80
 800abe6:	021b      	lsls	r3, r3, #8
 800abe8:	429a      	cmp	r2, r3
 800abea:	d000      	beq.n	800abee <UART_SetConfig+0x51e>
 800abec:	e074      	b.n	800acd8 <UART_SetConfig+0x608>
  {
    switch (clocksource)
 800abee:	231b      	movs	r3, #27
 800abf0:	2220      	movs	r2, #32
 800abf2:	4694      	mov	ip, r2
 800abf4:	44bc      	add	ip, r7
 800abf6:	4463      	add	r3, ip
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b08      	cmp	r3, #8
 800abfc:	d015      	beq.n	800ac2a <UART_SetConfig+0x55a>
 800abfe:	dc18      	bgt.n	800ac32 <UART_SetConfig+0x562>
 800ac00:	2b04      	cmp	r3, #4
 800ac02:	d00d      	beq.n	800ac20 <UART_SetConfig+0x550>
 800ac04:	dc15      	bgt.n	800ac32 <UART_SetConfig+0x562>
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <UART_SetConfig+0x540>
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d005      	beq.n	800ac1a <UART_SetConfig+0x54a>
 800ac0e:	e010      	b.n	800ac32 <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac10:	f7fd feba 	bl	8008988 <HAL_RCC_GetPCLK1Freq>
 800ac14:	0003      	movs	r3, r0
 800ac16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac18:	e015      	b.n	800ac46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac1a:	4b5b      	ldr	r3, [pc, #364]	; (800ad88 <UART_SetConfig+0x6b8>)
 800ac1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac1e:	e012      	b.n	800ac46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac20:	f7fd fe26 	bl	8008870 <HAL_RCC_GetSysClockFreq>
 800ac24:	0003      	movs	r3, r0
 800ac26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac28:	e00d      	b.n	800ac46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac2a:	2380      	movs	r3, #128	; 0x80
 800ac2c:	021b      	lsls	r3, r3, #8
 800ac2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac30:	e009      	b.n	800ac46 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ac32:	2300      	movs	r3, #0
 800ac34:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800ac36:	231a      	movs	r3, #26
 800ac38:	2220      	movs	r2, #32
 800ac3a:	4694      	mov	ip, r2
 800ac3c:	44bc      	add	ip, r7
 800ac3e:	4463      	add	r3, ip
 800ac40:	2201      	movs	r2, #1
 800ac42:	701a      	strb	r2, [r3, #0]
        break;
 800ac44:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d100      	bne.n	800ac4e <UART_SetConfig+0x57e>
 800ac4c:	e0a7      	b.n	800ad9e <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac52:	4b4e      	ldr	r3, [pc, #312]	; (800ad8c <UART_SetConfig+0x6bc>)
 800ac54:	0052      	lsls	r2, r2, #1
 800ac56:	5ad3      	ldrh	r3, [r2, r3]
 800ac58:	0019      	movs	r1, r3
 800ac5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ac5c:	f7f5 fa6e 	bl	800013c <__udivsi3>
 800ac60:	0003      	movs	r3, r0
 800ac62:	005a      	lsls	r2, r3, #1
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	085b      	lsrs	r3, r3, #1
 800ac6a:	18d2      	adds	r2, r2, r3
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	0019      	movs	r1, r3
 800ac72:	0010      	movs	r0, r2
 800ac74:	f7f5 fa62 	bl	800013c <__udivsi3>
 800ac78:	0003      	movs	r3, r0
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac80:	2b0f      	cmp	r3, #15
 800ac82:	d921      	bls.n	800acc8 <UART_SetConfig+0x5f8>
 800ac84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac86:	2380      	movs	r3, #128	; 0x80
 800ac88:	025b      	lsls	r3, r3, #9
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d21c      	bcs.n	800acc8 <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	200e      	movs	r0, #14
 800ac94:	2420      	movs	r4, #32
 800ac96:	193b      	adds	r3, r7, r4
 800ac98:	181b      	adds	r3, r3, r0
 800ac9a:	210f      	movs	r1, #15
 800ac9c:	438a      	bics	r2, r1
 800ac9e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca2:	085b      	lsrs	r3, r3, #1
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	2207      	movs	r2, #7
 800aca8:	4013      	ands	r3, r2
 800acaa:	b299      	uxth	r1, r3
 800acac:	193b      	adds	r3, r7, r4
 800acae:	181b      	adds	r3, r3, r0
 800acb0:	193a      	adds	r2, r7, r4
 800acb2:	1812      	adds	r2, r2, r0
 800acb4:	8812      	ldrh	r2, [r2, #0]
 800acb6:	430a      	orrs	r2, r1
 800acb8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800acba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	193a      	adds	r2, r7, r4
 800acc0:	1812      	adds	r2, r2, r0
 800acc2:	8812      	ldrh	r2, [r2, #0]
 800acc4:	60da      	str	r2, [r3, #12]
 800acc6:	e06a      	b.n	800ad9e <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 800acc8:	231a      	movs	r3, #26
 800acca:	2220      	movs	r2, #32
 800accc:	4694      	mov	ip, r2
 800acce:	44bc      	add	ip, r7
 800acd0:	4463      	add	r3, ip
 800acd2:	2201      	movs	r2, #1
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	e062      	b.n	800ad9e <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800acd8:	231b      	movs	r3, #27
 800acda:	2220      	movs	r2, #32
 800acdc:	4694      	mov	ip, r2
 800acde:	44bc      	add	ip, r7
 800ace0:	4463      	add	r3, ip
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	2b08      	cmp	r3, #8
 800ace6:	d015      	beq.n	800ad14 <UART_SetConfig+0x644>
 800ace8:	dc18      	bgt.n	800ad1c <UART_SetConfig+0x64c>
 800acea:	2b04      	cmp	r3, #4
 800acec:	d00d      	beq.n	800ad0a <UART_SetConfig+0x63a>
 800acee:	dc15      	bgt.n	800ad1c <UART_SetConfig+0x64c>
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <UART_SetConfig+0x62a>
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d005      	beq.n	800ad04 <UART_SetConfig+0x634>
 800acf8:	e010      	b.n	800ad1c <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acfa:	f7fd fe45 	bl	8008988 <HAL_RCC_GetPCLK1Freq>
 800acfe:	0003      	movs	r3, r0
 800ad00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad02:	e015      	b.n	800ad30 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad04:	4b20      	ldr	r3, [pc, #128]	; (800ad88 <UART_SetConfig+0x6b8>)
 800ad06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad08:	e012      	b.n	800ad30 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad0a:	f7fd fdb1 	bl	8008870 <HAL_RCC_GetSysClockFreq>
 800ad0e:	0003      	movs	r3, r0
 800ad10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad12:	e00d      	b.n	800ad30 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad14:	2380      	movs	r3, #128	; 0x80
 800ad16:	021b      	lsls	r3, r3, #8
 800ad18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad1a:	e009      	b.n	800ad30 <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800ad20:	231a      	movs	r3, #26
 800ad22:	2220      	movs	r2, #32
 800ad24:	4694      	mov	ip, r2
 800ad26:	44bc      	add	ip, r7
 800ad28:	4463      	add	r3, ip
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	701a      	strb	r2, [r3, #0]
        break;
 800ad2e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800ad30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d033      	beq.n	800ad9e <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad3a:	4b14      	ldr	r3, [pc, #80]	; (800ad8c <UART_SetConfig+0x6bc>)
 800ad3c:	0052      	lsls	r2, r2, #1
 800ad3e:	5ad3      	ldrh	r3, [r2, r3]
 800ad40:	0019      	movs	r1, r3
 800ad42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ad44:	f7f5 f9fa 	bl	800013c <__udivsi3>
 800ad48:	0003      	movs	r3, r0
 800ad4a:	001a      	movs	r2, r3
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	085b      	lsrs	r3, r3, #1
 800ad52:	18d2      	adds	r2, r2, r3
 800ad54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	0019      	movs	r1, r3
 800ad5a:	0010      	movs	r0, r2
 800ad5c:	f7f5 f9ee 	bl	800013c <__udivsi3>
 800ad60:	0003      	movs	r3, r0
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad68:	2b0f      	cmp	r3, #15
 800ad6a:	d911      	bls.n	800ad90 <UART_SetConfig+0x6c0>
 800ad6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad6e:	2380      	movs	r3, #128	; 0x80
 800ad70:	025b      	lsls	r3, r3, #9
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d20c      	bcs.n	800ad90 <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 800ad76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad7c:	60da      	str	r2, [r3, #12]
 800ad7e:	e00e      	b.n	800ad9e <UART_SetConfig+0x6ce>
 800ad80:	40008000 	.word	0x40008000
 800ad84:	40008400 	.word	0x40008400
 800ad88:	00f42400 	.word	0x00f42400
 800ad8c:	0800edf4 	.word	0x0800edf4
      }
      else
      {
        ret = HAL_ERROR;
 800ad90:	231a      	movs	r3, #26
 800ad92:	2220      	movs	r2, #32
 800ad94:	4694      	mov	ip, r2
 800ad96:	44bc      	add	ip, r7
 800ad98:	4463      	add	r3, ip
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	226a      	movs	r2, #106	; 0x6a
 800ada2:	2101      	movs	r1, #1
 800ada4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	2268      	movs	r2, #104	; 0x68
 800adaa:	2101      	movs	r1, #1
 800adac:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb0:	2200      	movs	r2, #0
 800adb2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	2200      	movs	r2, #0
 800adb8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800adba:	231a      	movs	r3, #26
 800adbc:	2220      	movs	r2, #32
 800adbe:	4694      	mov	ip, r2
 800adc0:	44bc      	add	ip, r7
 800adc2:	4463      	add	r3, ip
 800adc4:	781b      	ldrb	r3, [r3, #0]
}
 800adc6:	0018      	movs	r0, r3
 800adc8:	46bd      	mov	sp, r7
 800adca:	b010      	add	sp, #64	; 0x40
 800adcc:	bdb0      	pop	{r4, r5, r7, pc}
 800adce:	46c0      	nop			; (mov r8, r8)

0800add0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800addc:	2201      	movs	r2, #1
 800adde:	4013      	ands	r3, r2
 800ade0:	d00b      	beq.n	800adfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	4a4a      	ldr	r2, [pc, #296]	; (800af14 <UART_AdvFeatureConfig+0x144>)
 800adea:	4013      	ands	r3, r2
 800adec:	0019      	movs	r1, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	430a      	orrs	r2, r1
 800adf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfe:	2202      	movs	r2, #2
 800ae00:	4013      	ands	r3, r2
 800ae02:	d00b      	beq.n	800ae1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	4a43      	ldr	r2, [pc, #268]	; (800af18 <UART_AdvFeatureConfig+0x148>)
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	0019      	movs	r1, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	430a      	orrs	r2, r1
 800ae1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae20:	2204      	movs	r2, #4
 800ae22:	4013      	ands	r3, r2
 800ae24:	d00b      	beq.n	800ae3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	4a3b      	ldr	r2, [pc, #236]	; (800af1c <UART_AdvFeatureConfig+0x14c>)
 800ae2e:	4013      	ands	r3, r2
 800ae30:	0019      	movs	r1, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	430a      	orrs	r2, r1
 800ae3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae42:	2208      	movs	r2, #8
 800ae44:	4013      	ands	r3, r2
 800ae46:	d00b      	beq.n	800ae60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	4a34      	ldr	r2, [pc, #208]	; (800af20 <UART_AdvFeatureConfig+0x150>)
 800ae50:	4013      	ands	r3, r2
 800ae52:	0019      	movs	r1, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	430a      	orrs	r2, r1
 800ae5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae64:	2210      	movs	r2, #16
 800ae66:	4013      	ands	r3, r2
 800ae68:	d00b      	beq.n	800ae82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	4a2c      	ldr	r2, [pc, #176]	; (800af24 <UART_AdvFeatureConfig+0x154>)
 800ae72:	4013      	ands	r3, r2
 800ae74:	0019      	movs	r1, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	430a      	orrs	r2, r1
 800ae80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae86:	2220      	movs	r2, #32
 800ae88:	4013      	ands	r3, r2
 800ae8a:	d00b      	beq.n	800aea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	4a25      	ldr	r2, [pc, #148]	; (800af28 <UART_AdvFeatureConfig+0x158>)
 800ae94:	4013      	ands	r3, r2
 800ae96:	0019      	movs	r1, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	430a      	orrs	r2, r1
 800aea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea8:	2240      	movs	r2, #64	; 0x40
 800aeaa:	4013      	ands	r3, r2
 800aeac:	d01d      	beq.n	800aeea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	4a1d      	ldr	r2, [pc, #116]	; (800af2c <UART_AdvFeatureConfig+0x15c>)
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	0019      	movs	r1, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeca:	2380      	movs	r3, #128	; 0x80
 800aecc:	035b      	lsls	r3, r3, #13
 800aece:	429a      	cmp	r2, r3
 800aed0:	d10b      	bne.n	800aeea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	4a15      	ldr	r2, [pc, #84]	; (800af30 <UART_AdvFeatureConfig+0x160>)
 800aeda:	4013      	ands	r3, r2
 800aedc:	0019      	movs	r1, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	430a      	orrs	r2, r1
 800aee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeee:	2280      	movs	r2, #128	; 0x80
 800aef0:	4013      	ands	r3, r2
 800aef2:	d00b      	beq.n	800af0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	4a0e      	ldr	r2, [pc, #56]	; (800af34 <UART_AdvFeatureConfig+0x164>)
 800aefc:	4013      	ands	r3, r2
 800aefe:	0019      	movs	r1, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	430a      	orrs	r2, r1
 800af0a:	605a      	str	r2, [r3, #4]
  }
}
 800af0c:	46c0      	nop			; (mov r8, r8)
 800af0e:	46bd      	mov	sp, r7
 800af10:	b002      	add	sp, #8
 800af12:	bd80      	pop	{r7, pc}
 800af14:	fffdffff 	.word	0xfffdffff
 800af18:	fffeffff 	.word	0xfffeffff
 800af1c:	fffbffff 	.word	0xfffbffff
 800af20:	ffff7fff 	.word	0xffff7fff
 800af24:	ffffefff 	.word	0xffffefff
 800af28:	ffffdfff 	.word	0xffffdfff
 800af2c:	ffefffff 	.word	0xffefffff
 800af30:	ff9fffff 	.word	0xff9fffff
 800af34:	fff7ffff 	.word	0xfff7ffff

0800af38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af02      	add	r7, sp, #8
 800af3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	228c      	movs	r2, #140	; 0x8c
 800af44:	2100      	movs	r1, #0
 800af46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af48:	f7f9 fa02 	bl	8004350 <HAL_GetTick>
 800af4c:	0003      	movs	r3, r0
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2208      	movs	r2, #8
 800af58:	4013      	ands	r3, r2
 800af5a:	2b08      	cmp	r3, #8
 800af5c:	d10c      	bne.n	800af78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2280      	movs	r2, #128	; 0x80
 800af62:	0391      	lsls	r1, r2, #14
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	4a18      	ldr	r2, [pc, #96]	; (800afc8 <UART_CheckIdleState+0x90>)
 800af68:	9200      	str	r2, [sp, #0]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f000 f82e 	bl	800afcc <UART_WaitOnFlagUntilTimeout>
 800af70:	1e03      	subs	r3, r0, #0
 800af72:	d001      	beq.n	800af78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af74:	2303      	movs	r3, #3
 800af76:	e023      	b.n	800afc0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2204      	movs	r2, #4
 800af80:	4013      	ands	r3, r2
 800af82:	2b04      	cmp	r3, #4
 800af84:	d10c      	bne.n	800afa0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2280      	movs	r2, #128	; 0x80
 800af8a:	03d1      	lsls	r1, r2, #15
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	4a0e      	ldr	r2, [pc, #56]	; (800afc8 <UART_CheckIdleState+0x90>)
 800af90:	9200      	str	r2, [sp, #0]
 800af92:	2200      	movs	r2, #0
 800af94:	f000 f81a 	bl	800afcc <UART_WaitOnFlagUntilTimeout>
 800af98:	1e03      	subs	r3, r0, #0
 800af9a:	d001      	beq.n	800afa0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af9c:	2303      	movs	r3, #3
 800af9e:	e00f      	b.n	800afc0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2284      	movs	r2, #132	; 0x84
 800afa4:	2120      	movs	r1, #32
 800afa6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2288      	movs	r2, #136	; 0x88
 800afac:	2120      	movs	r1, #32
 800afae:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2280      	movs	r2, #128	; 0x80
 800afba:	2100      	movs	r1, #0
 800afbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	0018      	movs	r0, r3
 800afc2:	46bd      	mov	sp, r7
 800afc4:	b004      	add	sp, #16
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	01ffffff 	.word	0x01ffffff

0800afcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b094      	sub	sp, #80	; 0x50
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	1dfb      	adds	r3, r7, #7
 800afda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afdc:	e0a7      	b.n	800b12e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afe0:	3301      	adds	r3, #1
 800afe2:	d100      	bne.n	800afe6 <UART_WaitOnFlagUntilTimeout+0x1a>
 800afe4:	e0a3      	b.n	800b12e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afe6:	f7f9 f9b3 	bl	8004350 <HAL_GetTick>
 800afea:	0002      	movs	r2, r0
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d302      	bcc.n	800affc <UART_WaitOnFlagUntilTimeout+0x30>
 800aff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d13f      	bne.n	800b07c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800affc:	f3ef 8310 	mrs	r3, PRIMASK
 800b000:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b002:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b004:	647b      	str	r3, [r7, #68]	; 0x44
 800b006:	2301      	movs	r3, #1
 800b008:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00c:	f383 8810 	msr	PRIMASK, r3
}
 800b010:	46c0      	nop			; (mov r8, r8)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	494e      	ldr	r1, [pc, #312]	; (800b158 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b01e:	400a      	ands	r2, r1
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b024:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	f383 8810 	msr	PRIMASK, r3
}
 800b02c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b02e:	f3ef 8310 	mrs	r3, PRIMASK
 800b032:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800b034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b036:	643b      	str	r3, [r7, #64]	; 0x40
 800b038:	2301      	movs	r3, #1
 800b03a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	f383 8810 	msr	PRIMASK, r3
}
 800b042:	46c0      	nop			; (mov r8, r8)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	689a      	ldr	r2, [r3, #8]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2101      	movs	r1, #1
 800b050:	438a      	bics	r2, r1
 800b052:	609a      	str	r2, [r3, #8]
 800b054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b056:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b05a:	f383 8810 	msr	PRIMASK, r3
}
 800b05e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2284      	movs	r2, #132	; 0x84
 800b064:	2120      	movs	r1, #32
 800b066:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2288      	movs	r2, #136	; 0x88
 800b06c:	2120      	movs	r1, #32
 800b06e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2280      	movs	r2, #128	; 0x80
 800b074:	2100      	movs	r1, #0
 800b076:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b078:	2303      	movs	r3, #3
 800b07a:	e069      	b.n	800b150 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2204      	movs	r2, #4
 800b084:	4013      	ands	r3, r2
 800b086:	d052      	beq.n	800b12e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	69da      	ldr	r2, [r3, #28]
 800b08e:	2380      	movs	r3, #128	; 0x80
 800b090:	011b      	lsls	r3, r3, #4
 800b092:	401a      	ands	r2, r3
 800b094:	2380      	movs	r3, #128	; 0x80
 800b096:	011b      	lsls	r3, r3, #4
 800b098:	429a      	cmp	r2, r3
 800b09a:	d148      	bne.n	800b12e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2280      	movs	r2, #128	; 0x80
 800b0a2:	0112      	lsls	r2, r2, #4
 800b0a4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0a6:	f3ef 8310 	mrs	r3, PRIMASK
 800b0aa:	613b      	str	r3, [r7, #16]
  return(result);
 800b0ac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b0ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	f383 8810 	msr	PRIMASK, r3
}
 800b0ba:	46c0      	nop			; (mov r8, r8)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4924      	ldr	r1, [pc, #144]	; (800b158 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b0c8:	400a      	ands	r2, r1
 800b0ca:	601a      	str	r2, [r3, #0]
 800b0cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	f383 8810 	msr	PRIMASK, r3
}
 800b0d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b0dc:	61fb      	str	r3, [r7, #28]
  return(result);
 800b0de:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	f383 8810 	msr	PRIMASK, r3
}
 800b0ec:	46c0      	nop			; (mov r8, r8)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	689a      	ldr	r2, [r3, #8]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2101      	movs	r1, #1
 800b0fa:	438a      	bics	r2, r1
 800b0fc:	609a      	str	r2, [r3, #8]
 800b0fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b100:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	f383 8810 	msr	PRIMASK, r3
}
 800b108:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2284      	movs	r2, #132	; 0x84
 800b10e:	2120      	movs	r1, #32
 800b110:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2288      	movs	r2, #136	; 0x88
 800b116:	2120      	movs	r1, #32
 800b118:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	228c      	movs	r2, #140	; 0x8c
 800b11e:	2120      	movs	r1, #32
 800b120:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2280      	movs	r2, #128	; 0x80
 800b126:	2100      	movs	r1, #0
 800b128:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e010      	b.n	800b150 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	4013      	ands	r3, r2
 800b138:	68ba      	ldr	r2, [r7, #8]
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	425a      	negs	r2, r3
 800b13e:	4153      	adcs	r3, r2
 800b140:	b2db      	uxtb	r3, r3
 800b142:	001a      	movs	r2, r3
 800b144:	1dfb      	adds	r3, r7, #7
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d100      	bne.n	800b14e <UART_WaitOnFlagUntilTimeout+0x182>
 800b14c:	e747      	b.n	800afde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	0018      	movs	r0, r3
 800b152:	46bd      	mov	sp, r7
 800b154:	b014      	add	sp, #80	; 0x50
 800b156:	bd80      	pop	{r7, pc}
 800b158:	fffffe5f 	.word	0xfffffe5f

0800b15c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b090      	sub	sp, #64	; 0x40
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	1dbb      	adds	r3, r7, #6
 800b168:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	1dba      	adds	r2, r7, #6
 800b174:	215c      	movs	r1, #92	; 0x5c
 800b176:	8812      	ldrh	r2, [r2, #0]
 800b178:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	228c      	movs	r2, #140	; 0x8c
 800b17e:	2100      	movs	r1, #0
 800b180:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2288      	movs	r2, #136	; 0x88
 800b186:	2122      	movs	r1, #34	; 0x22
 800b188:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d02c      	beq.n	800b1ec <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b196:	4a40      	ldr	r2, [pc, #256]	; (800b298 <UART_Start_Receive_DMA+0x13c>)
 800b198:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b19e:	4a3f      	ldr	r2, [pc, #252]	; (800b29c <UART_Start_Receive_DMA+0x140>)
 800b1a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1a6:	4a3e      	ldr	r2, [pc, #248]	; (800b2a0 <UART_Start_Receive_DMA+0x144>)
 800b1a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3324      	adds	r3, #36	; 0x24
 800b1bc:	0019      	movs	r1, r3
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c2:	001a      	movs	r2, r3
 800b1c4:	1dbb      	adds	r3, r7, #6
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	f7f9 ff8c 	bl	80050e4 <HAL_DMA_Start_IT>
 800b1cc:	1e03      	subs	r3, r0, #0
 800b1ce:	d00d      	beq.n	800b1ec <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	228c      	movs	r2, #140	; 0x8c
 800b1d4:	2110      	movs	r1, #16
 800b1d6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2280      	movs	r2, #128	; 0x80
 800b1dc:	2100      	movs	r1, #0
 800b1de:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2288      	movs	r2, #136	; 0x88
 800b1e4:	2120      	movs	r1, #32
 800b1e6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e050      	b.n	800b28e <UART_Start_Receive_DMA+0x132>
    }
  }
  __HAL_UNLOCK(huart);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2280      	movs	r2, #128	; 0x80
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1f4:	f3ef 8310 	mrs	r3, PRIMASK
 800b1f8:	613b      	str	r3, [r7, #16]
  return(result);
 800b1fa:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1fe:	2301      	movs	r3, #1
 800b200:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f383 8810 	msr	PRIMASK, r3
}
 800b208:	46c0      	nop			; (mov r8, r8)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2180      	movs	r1, #128	; 0x80
 800b216:	0049      	lsls	r1, r1, #1
 800b218:	430a      	orrs	r2, r1
 800b21a:	601a      	str	r2, [r3, #0]
 800b21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b21e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	f383 8810 	msr	PRIMASK, r3
}
 800b226:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b228:	f3ef 8310 	mrs	r3, PRIMASK
 800b22c:	61fb      	str	r3, [r7, #28]
  return(result);
 800b22e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b230:	63bb      	str	r3, [r7, #56]	; 0x38
 800b232:	2301      	movs	r3, #1
 800b234:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	f383 8810 	msr	PRIMASK, r3
}
 800b23c:	46c0      	nop			; (mov r8, r8)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	689a      	ldr	r2, [r3, #8]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2101      	movs	r1, #1
 800b24a:	430a      	orrs	r2, r1
 800b24c:	609a      	str	r2, [r3, #8]
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b254:	f383 8810 	msr	PRIMASK, r3
}
 800b258:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b25a:	f3ef 8310 	mrs	r3, PRIMASK
 800b25e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b260:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b262:	637b      	str	r3, [r7, #52]	; 0x34
 800b264:	2301      	movs	r3, #1
 800b266:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26a:	f383 8810 	msr	PRIMASK, r3
}
 800b26e:	46c0      	nop			; (mov r8, r8)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	689a      	ldr	r2, [r3, #8]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2140      	movs	r1, #64	; 0x40
 800b27c:	430a      	orrs	r2, r1
 800b27e:	609a      	str	r2, [r3, #8]
 800b280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b282:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b286:	f383 8810 	msr	PRIMASK, r3
}
 800b28a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	0018      	movs	r0, r3
 800b290:	46bd      	mov	sp, r7
 800b292:	b010      	add	sp, #64	; 0x40
 800b294:	bd80      	pop	{r7, pc}
 800b296:	46c0      	nop			; (mov r8, r8)
 800b298:	0800b3f1 	.word	0x0800b3f1
 800b29c:	0800b519 	.word	0x0800b519
 800b2a0:	0800b555 	.word	0x0800b555

0800b2a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b08a      	sub	sp, #40	; 0x28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b2b0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b2b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f383 8810 	msr	PRIMASK, r3
}
 800b2c0:	46c0      	nop			; (mov r8, r8)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	21c0      	movs	r1, #192	; 0xc0
 800b2ce:	438a      	bics	r2, r1
 800b2d0:	601a      	str	r2, [r3, #0]
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	f383 8810 	msr	PRIMASK, r3
}
 800b2dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2de:	f3ef 8310 	mrs	r3, PRIMASK
 800b2e2:	617b      	str	r3, [r7, #20]
  return(result);
 800b2e4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b2e6:	623b      	str	r3, [r7, #32]
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	f383 8810 	msr	PRIMASK, r3
}
 800b2f2:	46c0      	nop			; (mov r8, r8)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	689a      	ldr	r2, [r3, #8]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4908      	ldr	r1, [pc, #32]	; (800b320 <UART_EndTxTransfer+0x7c>)
 800b300:	400a      	ands	r2, r1
 800b302:	609a      	str	r2, [r3, #8]
 800b304:	6a3b      	ldr	r3, [r7, #32]
 800b306:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	f383 8810 	msr	PRIMASK, r3
}
 800b30e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2284      	movs	r2, #132	; 0x84
 800b314:	2120      	movs	r1, #32
 800b316:	5099      	str	r1, [r3, r2]
}
 800b318:	46c0      	nop			; (mov r8, r8)
 800b31a:	46bd      	mov	sp, r7
 800b31c:	b00a      	add	sp, #40	; 0x28
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	ff7fffff 	.word	0xff7fffff

0800b324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08e      	sub	sp, #56	; 0x38
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b32c:	f3ef 8310 	mrs	r3, PRIMASK
 800b330:	617b      	str	r3, [r7, #20]
  return(result);
 800b332:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b334:	637b      	str	r3, [r7, #52]	; 0x34
 800b336:	2301      	movs	r3, #1
 800b338:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	f383 8810 	msr	PRIMASK, r3
}
 800b340:	46c0      	nop			; (mov r8, r8)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4926      	ldr	r1, [pc, #152]	; (800b3e8 <UART_EndRxTransfer+0xc4>)
 800b34e:	400a      	ands	r2, r1
 800b350:	601a      	str	r2, [r3, #0]
 800b352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b354:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	f383 8810 	msr	PRIMASK, r3
}
 800b35c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b35e:	f3ef 8310 	mrs	r3, PRIMASK
 800b362:	623b      	str	r3, [r7, #32]
  return(result);
 800b364:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b366:	633b      	str	r3, [r7, #48]	; 0x30
 800b368:	2301      	movs	r3, #1
 800b36a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36e:	f383 8810 	msr	PRIMASK, r3
}
 800b372:	46c0      	nop			; (mov r8, r8)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	689a      	ldr	r2, [r3, #8]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	491b      	ldr	r1, [pc, #108]	; (800b3ec <UART_EndRxTransfer+0xc8>)
 800b380:	400a      	ands	r2, r1
 800b382:	609a      	str	r2, [r3, #8]
 800b384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b386:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38a:	f383 8810 	msr	PRIMASK, r3
}
 800b38e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b394:	2b01      	cmp	r3, #1
 800b396:	d118      	bne.n	800b3ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b398:	f3ef 8310 	mrs	r3, PRIMASK
 800b39c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b39e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f383 8810 	msr	PRIMASK, r3
}
 800b3ac:	46c0      	nop			; (mov r8, r8)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2110      	movs	r1, #16
 800b3ba:	438a      	bics	r2, r1
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	f383 8810 	msr	PRIMASK, r3
}
 800b3c8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2288      	movs	r2, #136	; 0x88
 800b3ce:	2120      	movs	r1, #32
 800b3d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b3de:	46c0      	nop			; (mov r8, r8)
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	b00e      	add	sp, #56	; 0x38
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	46c0      	nop			; (mov r8, r8)
 800b3e8:	fffffedf 	.word	0xfffffedf
 800b3ec:	effffffe 	.word	0xeffffffe

0800b3f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b094      	sub	sp, #80	; 0x50
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fc:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2220      	movs	r2, #32
 800b406:	4013      	ands	r3, r2
 800b408:	d16f      	bne.n	800b4ea <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800b40a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b40c:	225e      	movs	r2, #94	; 0x5e
 800b40e:	2100      	movs	r1, #0
 800b410:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b412:	f3ef 8310 	mrs	r3, PRIMASK
 800b416:	61bb      	str	r3, [r7, #24]
  return(result);
 800b418:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b41a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b41c:	2301      	movs	r3, #1
 800b41e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	f383 8810 	msr	PRIMASK, r3
}
 800b426:	46c0      	nop			; (mov r8, r8)
 800b428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4938      	ldr	r1, [pc, #224]	; (800b514 <UART_DMAReceiveCplt+0x124>)
 800b434:	400a      	ands	r2, r1
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b43a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b43c:	6a3b      	ldr	r3, [r7, #32]
 800b43e:	f383 8810 	msr	PRIMASK, r3
}
 800b442:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b444:	f3ef 8310 	mrs	r3, PRIMASK
 800b448:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b44c:	647b      	str	r3, [r7, #68]	; 0x44
 800b44e:	2301      	movs	r3, #1
 800b450:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	f383 8810 	msr	PRIMASK, r3
}
 800b458:	46c0      	nop			; (mov r8, r8)
 800b45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	689a      	ldr	r2, [r3, #8]
 800b460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2101      	movs	r1, #1
 800b466:	438a      	bics	r2, r1
 800b468:	609a      	str	r2, [r3, #8]
 800b46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b46c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b470:	f383 8810 	msr	PRIMASK, r3
}
 800b474:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b476:	f3ef 8310 	mrs	r3, PRIMASK
 800b47a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800b47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b47e:	643b      	str	r3, [r7, #64]	; 0x40
 800b480:	2301      	movs	r3, #1
 800b482:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b486:	f383 8810 	msr	PRIMASK, r3
}
 800b48a:	46c0      	nop			; (mov r8, r8)
 800b48c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	689a      	ldr	r2, [r3, #8]
 800b492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2140      	movs	r1, #64	; 0x40
 800b498:	438a      	bics	r2, r1
 800b49a:	609a      	str	r2, [r3, #8]
 800b49c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b49e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a2:	f383 8810 	msr	PRIMASK, r3
}
 800b4a6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4aa:	2288      	movs	r2, #136	; 0x88
 800b4ac:	2120      	movs	r1, #32
 800b4ae:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d118      	bne.n	800b4ea <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b4bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4be:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	f383 8810 	msr	PRIMASK, r3
}
 800b4cc:	46c0      	nop			; (mov r8, r8)
 800b4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2110      	movs	r1, #16
 800b4da:	438a      	bics	r2, r1
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f383 8810 	msr	PRIMASK, r3
}
 800b4e8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d108      	bne.n	800b504 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4f4:	225c      	movs	r2, #92	; 0x5c
 800b4f6:	5a9a      	ldrh	r2, [r3, r2]
 800b4f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4fa:	0011      	movs	r1, r2
 800b4fc:	0018      	movs	r0, r3
 800b4fe:	f7ff f8db 	bl	800a6b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b502:	e003      	b.n	800b50c <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800b504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b506:	0018      	movs	r0, r3
 800b508:	f7f6 fefa 	bl	8002300 <HAL_UART_RxCpltCallback>
}
 800b50c:	46c0      	nop			; (mov r8, r8)
 800b50e:	46bd      	mov	sp, r7
 800b510:	b014      	add	sp, #80	; 0x50
 800b512:	bd80      	pop	{r7, pc}
 800b514:	fffffeff 	.word	0xfffffeff

0800b518 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b524:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d10a      	bne.n	800b544 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	225c      	movs	r2, #92	; 0x5c
 800b532:	5a9b      	ldrh	r3, [r3, r2]
 800b534:	085b      	lsrs	r3, r3, #1
 800b536:	b29a      	uxth	r2, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	0011      	movs	r1, r2
 800b53c:	0018      	movs	r0, r3
 800b53e:	f7ff f8bb 	bl	800a6b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b542:	e003      	b.n	800b54c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	0018      	movs	r0, r3
 800b548:	f7ff f89e 	bl	800a688 <HAL_UART_RxHalfCpltCallback>
}
 800b54c:	46c0      	nop			; (mov r8, r8)
 800b54e:	46bd      	mov	sp, r7
 800b550:	b004      	add	sp, #16
 800b552:	bd80      	pop	{r7, pc}

0800b554 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b560:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2284      	movs	r2, #132	; 0x84
 800b566:	589b      	ldr	r3, [r3, r2]
 800b568:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2288      	movs	r2, #136	; 0x88
 800b56e:	589b      	ldr	r3, [r3, r2]
 800b570:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	2280      	movs	r2, #128	; 0x80
 800b57a:	4013      	ands	r3, r2
 800b57c:	2b80      	cmp	r3, #128	; 0x80
 800b57e:	d10a      	bne.n	800b596 <UART_DMAError+0x42>
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	2b21      	cmp	r3, #33	; 0x21
 800b584:	d107      	bne.n	800b596 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2256      	movs	r2, #86	; 0x56
 800b58a:	2100      	movs	r1, #0
 800b58c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	0018      	movs	r0, r3
 800b592:	f7ff fe87 	bl	800b2a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	2240      	movs	r2, #64	; 0x40
 800b59e:	4013      	ands	r3, r2
 800b5a0:	2b40      	cmp	r3, #64	; 0x40
 800b5a2:	d10a      	bne.n	800b5ba <UART_DMAError+0x66>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2b22      	cmp	r3, #34	; 0x22
 800b5a8:	d107      	bne.n	800b5ba <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	225e      	movs	r2, #94	; 0x5e
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	0018      	movs	r0, r3
 800b5b6:	f7ff feb5 	bl	800b324 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	228c      	movs	r2, #140	; 0x8c
 800b5be:	589b      	ldr	r3, [r3, r2]
 800b5c0:	2210      	movs	r2, #16
 800b5c2:	431a      	orrs	r2, r3
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	218c      	movs	r1, #140	; 0x8c
 800b5c8:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	f7ff f863 	bl	800a698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5d2:	46c0      	nop			; (mov r8, r8)
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	b006      	add	sp, #24
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b084      	sub	sp, #16
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	225e      	movs	r2, #94	; 0x5e
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2256      	movs	r2, #86	; 0x56
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	0018      	movs	r0, r3
 800b5fc:	f7ff f84c 	bl	800a698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b600:	46c0      	nop			; (mov r8, r8)
 800b602:	46bd      	mov	sp, r7
 800b604:	b004      	add	sp, #16
 800b606:	bd80      	pop	{r7, pc}

0800b608 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b614:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b61a:	2200      	movs	r2, #0
 800b61c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b622:	2b00      	cmp	r3, #0
 800b624:	d004      	beq.n	800b630 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d12d      	bne.n	800b68c <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2256      	movs	r2, #86	; 0x56
 800b634:	2100      	movs	r1, #0
 800b636:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	225e      	movs	r2, #94	; 0x5e
 800b63c:	2100      	movs	r1, #0
 800b63e:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	228c      	movs	r2, #140	; 0x8c
 800b644:	2100      	movs	r1, #0
 800b646:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	220f      	movs	r2, #15
 800b64e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b654:	2380      	movs	r3, #128	; 0x80
 800b656:	059b      	lsls	r3, r3, #22
 800b658:	429a      	cmp	r2, r3
 800b65a:	d107      	bne.n	800b66c <UART_DMATxAbortCallback+0x64>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	699a      	ldr	r2, [r3, #24]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2110      	movs	r1, #16
 800b668:	430a      	orrs	r2, r1
 800b66a:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2284      	movs	r2, #132	; 0x84
 800b670:	2120      	movs	r1, #32
 800b672:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2288      	movs	r2, #136	; 0x88
 800b678:	2120      	movs	r1, #32
 800b67a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2200      	movs	r2, #0
 800b680:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	0018      	movs	r0, r3
 800b686:	f7ff f80f 	bl	800a6a8 <HAL_UART_AbortCpltCallback>
 800b68a:	e000      	b.n	800b68e <UART_DMATxAbortCallback+0x86>
      return;
 800b68c:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b68e:	46bd      	mov	sp, r7
 800b690:	b004      	add	sp, #16
 800b692:	bd80      	pop	{r7, pc}

0800b694 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a0:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d004      	beq.n	800b6bc <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d127      	bne.n	800b70c <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2256      	movs	r2, #86	; 0x56
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	225e      	movs	r2, #94	; 0x5e
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	228c      	movs	r2, #140	; 0x8c
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	220f      	movs	r2, #15
 800b6da:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	699a      	ldr	r2, [r3, #24]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2108      	movs	r1, #8
 800b6e8:	430a      	orrs	r2, r1
 800b6ea:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2284      	movs	r2, #132	; 0x84
 800b6f0:	2120      	movs	r1, #32
 800b6f2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2288      	movs	r2, #136	; 0x88
 800b6f8:	2120      	movs	r1, #32
 800b6fa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	0018      	movs	r0, r3
 800b706:	f7fe ffcf 	bl	800a6a8 <HAL_UART_AbortCpltCallback>
 800b70a:	e000      	b.n	800b70e <UART_DMARxAbortCallback+0x7a>
      return;
 800b70c:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b70e:	46bd      	mov	sp, r7
 800b710:	b004      	add	sp, #16
 800b712:	bd80      	pop	{r7, pc}

0800b714 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b08a      	sub	sp, #40	; 0x28
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2284      	movs	r2, #132	; 0x84
 800b720:	589b      	ldr	r3, [r3, r2]
 800b722:	2b21      	cmp	r3, #33	; 0x21
 800b724:	d14c      	bne.n	800b7c0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2256      	movs	r2, #86	; 0x56
 800b72a:	5a9b      	ldrh	r3, [r3, r2]
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d132      	bne.n	800b798 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b732:	f3ef 8310 	mrs	r3, PRIMASK
 800b736:	60bb      	str	r3, [r7, #8]
  return(result);
 800b738:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b73a:	627b      	str	r3, [r7, #36]	; 0x24
 800b73c:	2301      	movs	r3, #1
 800b73e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f383 8810 	msr	PRIMASK, r3
}
 800b746:	46c0      	nop			; (mov r8, r8)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2180      	movs	r1, #128	; 0x80
 800b754:	438a      	bics	r2, r1
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	f383 8810 	msr	PRIMASK, r3
}
 800b762:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b764:	f3ef 8310 	mrs	r3, PRIMASK
 800b768:	617b      	str	r3, [r7, #20]
  return(result);
 800b76a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b76c:	623b      	str	r3, [r7, #32]
 800b76e:	2301      	movs	r3, #1
 800b770:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	f383 8810 	msr	PRIMASK, r3
}
 800b778:	46c0      	nop			; (mov r8, r8)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2140      	movs	r1, #64	; 0x40
 800b786:	430a      	orrs	r2, r1
 800b788:	601a      	str	r2, [r3, #0]
 800b78a:	6a3b      	ldr	r3, [r7, #32]
 800b78c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	f383 8810 	msr	PRIMASK, r3
}
 800b794:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b796:	e013      	b.n	800b7c0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b79c:	781a      	ldrb	r2, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a8:	1c5a      	adds	r2, r3, #1
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2256      	movs	r2, #86	; 0x56
 800b7b2:	5a9b      	ldrh	r3, [r3, r2]
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	b299      	uxth	r1, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2256      	movs	r2, #86	; 0x56
 800b7be:	5299      	strh	r1, [r3, r2]
}
 800b7c0:	46c0      	nop			; (mov r8, r8)
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	b00a      	add	sp, #40	; 0x28
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08c      	sub	sp, #48	; 0x30
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2284      	movs	r2, #132	; 0x84
 800b7d4:	589b      	ldr	r3, [r3, r2]
 800b7d6:	2b21      	cmp	r3, #33	; 0x21
 800b7d8:	d151      	bne.n	800b87e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2256      	movs	r2, #86	; 0x56
 800b7de:	5a9b      	ldrh	r3, [r3, r2]
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d132      	bne.n	800b84c <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b7ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b7ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	f383 8810 	msr	PRIMASK, r3
}
 800b7fa:	46c0      	nop			; (mov r8, r8)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2180      	movs	r1, #128	; 0x80
 800b808:	438a      	bics	r2, r1
 800b80a:	601a      	str	r2, [r3, #0]
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	f383 8810 	msr	PRIMASK, r3
}
 800b816:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b818:	f3ef 8310 	mrs	r3, PRIMASK
 800b81c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b81e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b820:	627b      	str	r3, [r7, #36]	; 0x24
 800b822:	2301      	movs	r3, #1
 800b824:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	f383 8810 	msr	PRIMASK, r3
}
 800b82c:	46c0      	nop			; (mov r8, r8)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2140      	movs	r1, #64	; 0x40
 800b83a:	430a      	orrs	r2, r1
 800b83c:	601a      	str	r2, [r3, #0]
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b842:	6a3b      	ldr	r3, [r7, #32]
 800b844:	f383 8810 	msr	PRIMASK, r3
}
 800b848:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b84a:	e018      	b.n	800b87e <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b850:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b854:	881b      	ldrh	r3, [r3, #0]
 800b856:	001a      	movs	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	05d2      	lsls	r2, r2, #23
 800b85e:	0dd2      	lsrs	r2, r2, #23
 800b860:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b866:	1c9a      	adds	r2, r3, #2
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2256      	movs	r2, #86	; 0x56
 800b870:	5a9b      	ldrh	r3, [r3, r2]
 800b872:	b29b      	uxth	r3, r3
 800b874:	3b01      	subs	r3, #1
 800b876:	b299      	uxth	r1, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2256      	movs	r2, #86	; 0x56
 800b87c:	5299      	strh	r1, [r3, r2]
}
 800b87e:	46c0      	nop			; (mov r8, r8)
 800b880:	46bd      	mov	sp, r7
 800b882:	b00c      	add	sp, #48	; 0x30
 800b884:	bd80      	pop	{r7, pc}
	...

0800b888 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08c      	sub	sp, #48	; 0x30
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2284      	movs	r2, #132	; 0x84
 800b894:	589b      	ldr	r3, [r3, r2]
 800b896:	2b21      	cmp	r3, #33	; 0x21
 800b898:	d165      	bne.n	800b966 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b89a:	232e      	movs	r3, #46	; 0x2e
 800b89c:	18fb      	adds	r3, r7, r3
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	216a      	movs	r1, #106	; 0x6a
 800b8a2:	5a52      	ldrh	r2, [r2, r1]
 800b8a4:	801a      	strh	r2, [r3, #0]
 800b8a6:	e059      	b.n	800b95c <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2256      	movs	r2, #86	; 0x56
 800b8ac:	5a9b      	ldrh	r3, [r3, r2]
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d133      	bne.n	800b91c <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b8b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b8bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8be:	2301      	movs	r3, #1
 800b8c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f383 8810 	msr	PRIMASK, r3
}
 800b8c8:	46c0      	nop			; (mov r8, r8)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	689a      	ldr	r2, [r3, #8]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4926      	ldr	r1, [pc, #152]	; (800b970 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800b8d6:	400a      	ands	r2, r1
 800b8d8:	609a      	str	r2, [r3, #8]
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f383 8810 	msr	PRIMASK, r3
}
 800b8e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b8ea:	61bb      	str	r3, [r7, #24]
  return(result);
 800b8ec:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	f383 8810 	msr	PRIMASK, r3
}
 800b8fa:	46c0      	nop			; (mov r8, r8)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2140      	movs	r1, #64	; 0x40
 800b908:	430a      	orrs	r2, r1
 800b90a:	601a      	str	r2, [r3, #0]
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	f383 8810 	msr	PRIMASK, r3
}
 800b916:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800b918:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800b91a:	e024      	b.n	800b966 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	69db      	ldr	r3, [r3, #28]
 800b922:	2280      	movs	r2, #128	; 0x80
 800b924:	4013      	ands	r3, r2
 800b926:	d013      	beq.n	800b950 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b92c:	781a      	ldrb	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b938:	1c5a      	adds	r2, r3, #1
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2256      	movs	r2, #86	; 0x56
 800b942:	5a9b      	ldrh	r3, [r3, r2]
 800b944:	b29b      	uxth	r3, r3
 800b946:	3b01      	subs	r3, #1
 800b948:	b299      	uxth	r1, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2256      	movs	r2, #86	; 0x56
 800b94e:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b950:	212e      	movs	r1, #46	; 0x2e
 800b952:	187b      	adds	r3, r7, r1
 800b954:	881a      	ldrh	r2, [r3, #0]
 800b956:	187b      	adds	r3, r7, r1
 800b958:	3a01      	subs	r2, #1
 800b95a:	801a      	strh	r2, [r3, #0]
 800b95c:	232e      	movs	r3, #46	; 0x2e
 800b95e:	18fb      	adds	r3, r7, r3
 800b960:	881b      	ldrh	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1a0      	bne.n	800b8a8 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	46bd      	mov	sp, r7
 800b96a:	b00c      	add	sp, #48	; 0x30
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	46c0      	nop			; (mov r8, r8)
 800b970:	ff7fffff 	.word	0xff7fffff

0800b974 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b08c      	sub	sp, #48	; 0x30
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2284      	movs	r2, #132	; 0x84
 800b980:	589b      	ldr	r3, [r3, r2]
 800b982:	2b21      	cmp	r3, #33	; 0x21
 800b984:	d16a      	bne.n	800ba5c <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b986:	232e      	movs	r3, #46	; 0x2e
 800b988:	18fb      	adds	r3, r7, r3
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	216a      	movs	r1, #106	; 0x6a
 800b98e:	5a52      	ldrh	r2, [r2, r1]
 800b990:	801a      	strh	r2, [r3, #0]
 800b992:	e05e      	b.n	800ba52 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2256      	movs	r2, #86	; 0x56
 800b998:	5a9b      	ldrh	r3, [r3, r2]
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d133      	bne.n	800ba08 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9a0:	f3ef 8310 	mrs	r3, PRIMASK
 800b9a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9a6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f383 8810 	msr	PRIMASK, r3
}
 800b9b4:	46c0      	nop			; (mov r8, r8)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	689a      	ldr	r2, [r3, #8]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4928      	ldr	r1, [pc, #160]	; (800ba64 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800b9c2:	400a      	ands	r2, r1
 800b9c4:	609a      	str	r2, [r3, #8]
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	f383 8810 	msr	PRIMASK, r3
}
 800b9d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9d2:	f3ef 8310 	mrs	r3, PRIMASK
 800b9d6:	617b      	str	r3, [r7, #20]
  return(result);
 800b9d8:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9da:	623b      	str	r3, [r7, #32]
 800b9dc:	2301      	movs	r3, #1
 800b9de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	f383 8810 	msr	PRIMASK, r3
}
 800b9e6:	46c0      	nop			; (mov r8, r8)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2140      	movs	r1, #64	; 0x40
 800b9f4:	430a      	orrs	r2, r1
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	f383 8810 	msr	PRIMASK, r3
}
 800ba02:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800ba04:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800ba06:	e029      	b.n	800ba5c <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	2280      	movs	r2, #128	; 0x80
 800ba10:	4013      	ands	r3, r2
 800ba12:	d018      	beq.n	800ba46 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba18:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ba1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	001a      	movs	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	05d2      	lsls	r2, r2, #23
 800ba26:	0dd2      	lsrs	r2, r2, #23
 800ba28:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2e:	1c9a      	adds	r2, r3, #2
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2256      	movs	r2, #86	; 0x56
 800ba38:	5a9b      	ldrh	r3, [r3, r2]
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	b299      	uxth	r1, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2256      	movs	r2, #86	; 0x56
 800ba44:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ba46:	212e      	movs	r1, #46	; 0x2e
 800ba48:	187b      	adds	r3, r7, r1
 800ba4a:	881a      	ldrh	r2, [r3, #0]
 800ba4c:	187b      	adds	r3, r7, r1
 800ba4e:	3a01      	subs	r2, #1
 800ba50:	801a      	strh	r2, [r3, #0]
 800ba52:	232e      	movs	r3, #46	; 0x2e
 800ba54:	18fb      	adds	r3, r7, r3
 800ba56:	881b      	ldrh	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d19b      	bne.n	800b994 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800ba5c:	46c0      	nop			; (mov r8, r8)
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	b00c      	add	sp, #48	; 0x30
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	ff7fffff 	.word	0xff7fffff

0800ba68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba70:	f3ef 8310 	mrs	r3, PRIMASK
 800ba74:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba76:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba78:	617b      	str	r3, [r7, #20]
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f383 8810 	msr	PRIMASK, r3
}
 800ba84:	46c0      	nop			; (mov r8, r8)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2140      	movs	r1, #64	; 0x40
 800ba92:	438a      	bics	r2, r1
 800ba94:	601a      	str	r2, [r3, #0]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	f383 8810 	msr	PRIMASK, r3
}
 800baa0:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2284      	movs	r2, #132	; 0x84
 800baa6:	2120      	movs	r1, #32
 800baa8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	0018      	movs	r0, r3
 800bab4:	f7f6 fc72 	bl	800239c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bab8:	46c0      	nop			; (mov r8, r8)
 800baba:	46bd      	mov	sp, r7
 800babc:	b006      	add	sp, #24
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bac8:	46c0      	nop			; (mov r8, r8)
 800baca:	46bd      	mov	sp, r7
 800bacc:	b002      	add	sp, #8
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bad8:	46c0      	nop			; (mov r8, r8)
 800bada:	46bd      	mov	sp, r7
 800badc:	b002      	add	sp, #8
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bae8:	46c0      	nop			; (mov r8, r8)
 800baea:	46bd      	mov	sp, r7
 800baec:	b002      	add	sp, #8
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2280      	movs	r2, #128	; 0x80
 800bafc:	5c9b      	ldrb	r3, [r3, r2]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d101      	bne.n	800bb06 <HAL_UARTEx_DisableFifoMode+0x16>
 800bb02:	2302      	movs	r3, #2
 800bb04:	e027      	b.n	800bb56 <HAL_UARTEx_DisableFifoMode+0x66>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2280      	movs	r2, #128	; 0x80
 800bb0a:	2101      	movs	r1, #1
 800bb0c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2284      	movs	r2, #132	; 0x84
 800bb12:	2124      	movs	r1, #36	; 0x24
 800bb14:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2101      	movs	r1, #1
 800bb2a:	438a      	bics	r2, r1
 800bb2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	4a0b      	ldr	r2, [pc, #44]	; (800bb60 <HAL_UARTEx_DisableFifoMode+0x70>)
 800bb32:	4013      	ands	r3, r2
 800bb34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2284      	movs	r2, #132	; 0x84
 800bb48:	2120      	movs	r1, #32
 800bb4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2280      	movs	r2, #128	; 0x80
 800bb50:	2100      	movs	r1, #0
 800bb52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	0018      	movs	r0, r3
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	b004      	add	sp, #16
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	46c0      	nop			; (mov r8, r8)
 800bb60:	dfffffff 	.word	0xdfffffff

0800bb64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2280      	movs	r2, #128	; 0x80
 800bb72:	5c9b      	ldrb	r3, [r3, r2]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d101      	bne.n	800bb7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb78:	2302      	movs	r3, #2
 800bb7a:	e02e      	b.n	800bbda <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2280      	movs	r2, #128	; 0x80
 800bb80:	2101      	movs	r1, #1
 800bb82:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2284      	movs	r2, #132	; 0x84
 800bb88:	2124      	movs	r1, #36	; 0x24
 800bb8a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2101      	movs	r1, #1
 800bba0:	438a      	bics	r2, r1
 800bba2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	00db      	lsls	r3, r3, #3
 800bbac:	08d9      	lsrs	r1, r3, #3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	430a      	orrs	r2, r1
 800bbb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	0018      	movs	r0, r3
 800bbbc:	f000 f854 	bl	800bc68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2284      	movs	r2, #132	; 0x84
 800bbcc:	2120      	movs	r1, #32
 800bbce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2280      	movs	r2, #128	; 0x80
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	0018      	movs	r0, r3
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	b004      	add	sp, #16
 800bbe0:	bd80      	pop	{r7, pc}
	...

0800bbe4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2280      	movs	r2, #128	; 0x80
 800bbf2:	5c9b      	ldrb	r3, [r3, r2]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d101      	bne.n	800bbfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bbf8:	2302      	movs	r3, #2
 800bbfa:	e02f      	b.n	800bc5c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2280      	movs	r2, #128	; 0x80
 800bc00:	2101      	movs	r1, #1
 800bc02:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2284      	movs	r2, #132	; 0x84
 800bc08:	2124      	movs	r1, #36	; 0x24
 800bc0a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2101      	movs	r1, #1
 800bc20:	438a      	bics	r2, r1
 800bc22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	4a0e      	ldr	r2, [pc, #56]	; (800bc64 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	0019      	movs	r1, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	430a      	orrs	r2, r1
 800bc38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	0018      	movs	r0, r3
 800bc3e:	f000 f813 	bl	800bc68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2284      	movs	r2, #132	; 0x84
 800bc4e:	2120      	movs	r1, #32
 800bc50:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2280      	movs	r2, #128	; 0x80
 800bc56:	2100      	movs	r1, #0
 800bc58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	0018      	movs	r0, r3
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	b004      	add	sp, #16
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	f1ffffff 	.word	0xf1ffffff

0800bc68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d108      	bne.n	800bc8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	226a      	movs	r2, #106	; 0x6a
 800bc7c:	2101      	movs	r1, #1
 800bc7e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2268      	movs	r2, #104	; 0x68
 800bc84:	2101      	movs	r1, #1
 800bc86:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc88:	e043      	b.n	800bd12 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc8a:	260f      	movs	r6, #15
 800bc8c:	19bb      	adds	r3, r7, r6
 800bc8e:	2208      	movs	r2, #8
 800bc90:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc92:	200e      	movs	r0, #14
 800bc94:	183b      	adds	r3, r7, r0
 800bc96:	2208      	movs	r2, #8
 800bc98:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	0e5b      	lsrs	r3, r3, #25
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	240d      	movs	r4, #13
 800bca6:	193b      	adds	r3, r7, r4
 800bca8:	2107      	movs	r1, #7
 800bcaa:	400a      	ands	r2, r1
 800bcac:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	0f5b      	lsrs	r3, r3, #29
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	250c      	movs	r5, #12
 800bcba:	197b      	adds	r3, r7, r5
 800bcbc:	2107      	movs	r1, #7
 800bcbe:	400a      	ands	r2, r1
 800bcc0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcc2:	183b      	adds	r3, r7, r0
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	197a      	adds	r2, r7, r5
 800bcc8:	7812      	ldrb	r2, [r2, #0]
 800bcca:	4914      	ldr	r1, [pc, #80]	; (800bd1c <UARTEx_SetNbDataToProcess+0xb4>)
 800bccc:	5c8a      	ldrb	r2, [r1, r2]
 800bcce:	435a      	muls	r2, r3
 800bcd0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800bcd2:	197b      	adds	r3, r7, r5
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	4a12      	ldr	r2, [pc, #72]	; (800bd20 <UARTEx_SetNbDataToProcess+0xb8>)
 800bcd8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcda:	0019      	movs	r1, r3
 800bcdc:	f7f4 fab8 	bl	8000250 <__divsi3>
 800bce0:	0003      	movs	r3, r0
 800bce2:	b299      	uxth	r1, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	226a      	movs	r2, #106	; 0x6a
 800bce8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcea:	19bb      	adds	r3, r7, r6
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	193a      	adds	r2, r7, r4
 800bcf0:	7812      	ldrb	r2, [r2, #0]
 800bcf2:	490a      	ldr	r1, [pc, #40]	; (800bd1c <UARTEx_SetNbDataToProcess+0xb4>)
 800bcf4:	5c8a      	ldrb	r2, [r1, r2]
 800bcf6:	435a      	muls	r2, r3
 800bcf8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800bcfa:	193b      	adds	r3, r7, r4
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	4a08      	ldr	r2, [pc, #32]	; (800bd20 <UARTEx_SetNbDataToProcess+0xb8>)
 800bd00:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd02:	0019      	movs	r1, r3
 800bd04:	f7f4 faa4 	bl	8000250 <__divsi3>
 800bd08:	0003      	movs	r3, r0
 800bd0a:	b299      	uxth	r1, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2268      	movs	r2, #104	; 0x68
 800bd10:	5299      	strh	r1, [r3, r2]
}
 800bd12:	46c0      	nop			; (mov r8, r8)
 800bd14:	46bd      	mov	sp, r7
 800bd16:	b005      	add	sp, #20
 800bd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd1a:	46c0      	nop			; (mov r8, r8)
 800bd1c:	0800ee0c 	.word	0x0800ee0c
 800bd20:	0800ee14 	.word	0x0800ee14

0800bd24 <__errno>:
 800bd24:	4b01      	ldr	r3, [pc, #4]	; (800bd2c <__errno+0x8>)
 800bd26:	6818      	ldr	r0, [r3, #0]
 800bd28:	4770      	bx	lr
 800bd2a:	46c0      	nop			; (mov r8, r8)
 800bd2c:	2000002c 	.word	0x2000002c

0800bd30 <__libc_init_array>:
 800bd30:	b570      	push	{r4, r5, r6, lr}
 800bd32:	2600      	movs	r6, #0
 800bd34:	4d0c      	ldr	r5, [pc, #48]	; (800bd68 <__libc_init_array+0x38>)
 800bd36:	4c0d      	ldr	r4, [pc, #52]	; (800bd6c <__libc_init_array+0x3c>)
 800bd38:	1b64      	subs	r4, r4, r5
 800bd3a:	10a4      	asrs	r4, r4, #2
 800bd3c:	42a6      	cmp	r6, r4
 800bd3e:	d109      	bne.n	800bd54 <__libc_init_array+0x24>
 800bd40:	2600      	movs	r6, #0
 800bd42:	f002 ff6f 	bl	800ec24 <_init>
 800bd46:	4d0a      	ldr	r5, [pc, #40]	; (800bd70 <__libc_init_array+0x40>)
 800bd48:	4c0a      	ldr	r4, [pc, #40]	; (800bd74 <__libc_init_array+0x44>)
 800bd4a:	1b64      	subs	r4, r4, r5
 800bd4c:	10a4      	asrs	r4, r4, #2
 800bd4e:	42a6      	cmp	r6, r4
 800bd50:	d105      	bne.n	800bd5e <__libc_init_array+0x2e>
 800bd52:	bd70      	pop	{r4, r5, r6, pc}
 800bd54:	00b3      	lsls	r3, r6, #2
 800bd56:	58eb      	ldr	r3, [r5, r3]
 800bd58:	4798      	blx	r3
 800bd5a:	3601      	adds	r6, #1
 800bd5c:	e7ee      	b.n	800bd3c <__libc_init_array+0xc>
 800bd5e:	00b3      	lsls	r3, r6, #2
 800bd60:	58eb      	ldr	r3, [r5, r3]
 800bd62:	4798      	blx	r3
 800bd64:	3601      	adds	r6, #1
 800bd66:	e7f2      	b.n	800bd4e <__libc_init_array+0x1e>
 800bd68:	0800f208 	.word	0x0800f208
 800bd6c:	0800f208 	.word	0x0800f208
 800bd70:	0800f208 	.word	0x0800f208
 800bd74:	0800f20c 	.word	0x0800f20c

0800bd78 <malloc>:
 800bd78:	b510      	push	{r4, lr}
 800bd7a:	4b03      	ldr	r3, [pc, #12]	; (800bd88 <malloc+0x10>)
 800bd7c:	0001      	movs	r1, r0
 800bd7e:	6818      	ldr	r0, [r3, #0]
 800bd80:	f000 f860 	bl	800be44 <_malloc_r>
 800bd84:	bd10      	pop	{r4, pc}
 800bd86:	46c0      	nop			; (mov r8, r8)
 800bd88:	2000002c 	.word	0x2000002c

0800bd8c <memcpy>:
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	b510      	push	{r4, lr}
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d100      	bne.n	800bd96 <memcpy+0xa>
 800bd94:	bd10      	pop	{r4, pc}
 800bd96:	5ccc      	ldrb	r4, [r1, r3]
 800bd98:	54c4      	strb	r4, [r0, r3]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	e7f8      	b.n	800bd90 <memcpy+0x4>

0800bd9e <memset>:
 800bd9e:	0003      	movs	r3, r0
 800bda0:	1882      	adds	r2, r0, r2
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d100      	bne.n	800bda8 <memset+0xa>
 800bda6:	4770      	bx	lr
 800bda8:	7019      	strb	r1, [r3, #0]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	e7f9      	b.n	800bda2 <memset+0x4>
	...

0800bdb0 <_free_r>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	0005      	movs	r5, r0
 800bdb4:	2900      	cmp	r1, #0
 800bdb6:	d010      	beq.n	800bdda <_free_r+0x2a>
 800bdb8:	1f0c      	subs	r4, r1, #4
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	da00      	bge.n	800bdc2 <_free_r+0x12>
 800bdc0:	18e4      	adds	r4, r4, r3
 800bdc2:	0028      	movs	r0, r5
 800bdc4:	f001 fc42 	bl	800d64c <__malloc_lock>
 800bdc8:	4a1d      	ldr	r2, [pc, #116]	; (800be40 <_free_r+0x90>)
 800bdca:	6813      	ldr	r3, [r2, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d105      	bne.n	800bddc <_free_r+0x2c>
 800bdd0:	6063      	str	r3, [r4, #4]
 800bdd2:	6014      	str	r4, [r2, #0]
 800bdd4:	0028      	movs	r0, r5
 800bdd6:	f001 fc41 	bl	800d65c <__malloc_unlock>
 800bdda:	bd70      	pop	{r4, r5, r6, pc}
 800bddc:	42a3      	cmp	r3, r4
 800bdde:	d908      	bls.n	800bdf2 <_free_r+0x42>
 800bde0:	6821      	ldr	r1, [r4, #0]
 800bde2:	1860      	adds	r0, r4, r1
 800bde4:	4283      	cmp	r3, r0
 800bde6:	d1f3      	bne.n	800bdd0 <_free_r+0x20>
 800bde8:	6818      	ldr	r0, [r3, #0]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	1841      	adds	r1, r0, r1
 800bdee:	6021      	str	r1, [r4, #0]
 800bdf0:	e7ee      	b.n	800bdd0 <_free_r+0x20>
 800bdf2:	001a      	movs	r2, r3
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d001      	beq.n	800bdfe <_free_r+0x4e>
 800bdfa:	42a3      	cmp	r3, r4
 800bdfc:	d9f9      	bls.n	800bdf2 <_free_r+0x42>
 800bdfe:	6811      	ldr	r1, [r2, #0]
 800be00:	1850      	adds	r0, r2, r1
 800be02:	42a0      	cmp	r0, r4
 800be04:	d10b      	bne.n	800be1e <_free_r+0x6e>
 800be06:	6820      	ldr	r0, [r4, #0]
 800be08:	1809      	adds	r1, r1, r0
 800be0a:	1850      	adds	r0, r2, r1
 800be0c:	6011      	str	r1, [r2, #0]
 800be0e:	4283      	cmp	r3, r0
 800be10:	d1e0      	bne.n	800bdd4 <_free_r+0x24>
 800be12:	6818      	ldr	r0, [r3, #0]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	1841      	adds	r1, r0, r1
 800be18:	6011      	str	r1, [r2, #0]
 800be1a:	6053      	str	r3, [r2, #4]
 800be1c:	e7da      	b.n	800bdd4 <_free_r+0x24>
 800be1e:	42a0      	cmp	r0, r4
 800be20:	d902      	bls.n	800be28 <_free_r+0x78>
 800be22:	230c      	movs	r3, #12
 800be24:	602b      	str	r3, [r5, #0]
 800be26:	e7d5      	b.n	800bdd4 <_free_r+0x24>
 800be28:	6821      	ldr	r1, [r4, #0]
 800be2a:	1860      	adds	r0, r4, r1
 800be2c:	4283      	cmp	r3, r0
 800be2e:	d103      	bne.n	800be38 <_free_r+0x88>
 800be30:	6818      	ldr	r0, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	1841      	adds	r1, r0, r1
 800be36:	6021      	str	r1, [r4, #0]
 800be38:	6063      	str	r3, [r4, #4]
 800be3a:	6054      	str	r4, [r2, #4]
 800be3c:	e7ca      	b.n	800bdd4 <_free_r+0x24>
 800be3e:	46c0      	nop			; (mov r8, r8)
 800be40:	20000220 	.word	0x20000220

0800be44 <_malloc_r>:
 800be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be46:	2303      	movs	r3, #3
 800be48:	1ccd      	adds	r5, r1, #3
 800be4a:	439d      	bics	r5, r3
 800be4c:	3508      	adds	r5, #8
 800be4e:	0006      	movs	r6, r0
 800be50:	2d0c      	cmp	r5, #12
 800be52:	d21f      	bcs.n	800be94 <_malloc_r+0x50>
 800be54:	250c      	movs	r5, #12
 800be56:	42a9      	cmp	r1, r5
 800be58:	d81e      	bhi.n	800be98 <_malloc_r+0x54>
 800be5a:	0030      	movs	r0, r6
 800be5c:	f001 fbf6 	bl	800d64c <__malloc_lock>
 800be60:	4925      	ldr	r1, [pc, #148]	; (800bef8 <_malloc_r+0xb4>)
 800be62:	680a      	ldr	r2, [r1, #0]
 800be64:	0014      	movs	r4, r2
 800be66:	2c00      	cmp	r4, #0
 800be68:	d11a      	bne.n	800bea0 <_malloc_r+0x5c>
 800be6a:	4f24      	ldr	r7, [pc, #144]	; (800befc <_malloc_r+0xb8>)
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d104      	bne.n	800be7c <_malloc_r+0x38>
 800be72:	0021      	movs	r1, r4
 800be74:	0030      	movs	r0, r6
 800be76:	f000 fcbd 	bl	800c7f4 <_sbrk_r>
 800be7a:	6038      	str	r0, [r7, #0]
 800be7c:	0029      	movs	r1, r5
 800be7e:	0030      	movs	r0, r6
 800be80:	f000 fcb8 	bl	800c7f4 <_sbrk_r>
 800be84:	1c43      	adds	r3, r0, #1
 800be86:	d12b      	bne.n	800bee0 <_malloc_r+0x9c>
 800be88:	230c      	movs	r3, #12
 800be8a:	0030      	movs	r0, r6
 800be8c:	6033      	str	r3, [r6, #0]
 800be8e:	f001 fbe5 	bl	800d65c <__malloc_unlock>
 800be92:	e003      	b.n	800be9c <_malloc_r+0x58>
 800be94:	2d00      	cmp	r5, #0
 800be96:	dade      	bge.n	800be56 <_malloc_r+0x12>
 800be98:	230c      	movs	r3, #12
 800be9a:	6033      	str	r3, [r6, #0]
 800be9c:	2000      	movs	r0, #0
 800be9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bea0:	6823      	ldr	r3, [r4, #0]
 800bea2:	1b5b      	subs	r3, r3, r5
 800bea4:	d419      	bmi.n	800beda <_malloc_r+0x96>
 800bea6:	2b0b      	cmp	r3, #11
 800bea8:	d903      	bls.n	800beb2 <_malloc_r+0x6e>
 800beaa:	6023      	str	r3, [r4, #0]
 800beac:	18e4      	adds	r4, r4, r3
 800beae:	6025      	str	r5, [r4, #0]
 800beb0:	e003      	b.n	800beba <_malloc_r+0x76>
 800beb2:	6863      	ldr	r3, [r4, #4]
 800beb4:	42a2      	cmp	r2, r4
 800beb6:	d10e      	bne.n	800bed6 <_malloc_r+0x92>
 800beb8:	600b      	str	r3, [r1, #0]
 800beba:	0030      	movs	r0, r6
 800bebc:	f001 fbce 	bl	800d65c <__malloc_unlock>
 800bec0:	0020      	movs	r0, r4
 800bec2:	2207      	movs	r2, #7
 800bec4:	300b      	adds	r0, #11
 800bec6:	1d23      	adds	r3, r4, #4
 800bec8:	4390      	bics	r0, r2
 800beca:	1ac2      	subs	r2, r0, r3
 800becc:	4298      	cmp	r0, r3
 800bece:	d0e6      	beq.n	800be9e <_malloc_r+0x5a>
 800bed0:	1a1b      	subs	r3, r3, r0
 800bed2:	50a3      	str	r3, [r4, r2]
 800bed4:	e7e3      	b.n	800be9e <_malloc_r+0x5a>
 800bed6:	6053      	str	r3, [r2, #4]
 800bed8:	e7ef      	b.n	800beba <_malloc_r+0x76>
 800beda:	0022      	movs	r2, r4
 800bedc:	6864      	ldr	r4, [r4, #4]
 800bede:	e7c2      	b.n	800be66 <_malloc_r+0x22>
 800bee0:	2303      	movs	r3, #3
 800bee2:	1cc4      	adds	r4, r0, #3
 800bee4:	439c      	bics	r4, r3
 800bee6:	42a0      	cmp	r0, r4
 800bee8:	d0e1      	beq.n	800beae <_malloc_r+0x6a>
 800beea:	1a21      	subs	r1, r4, r0
 800beec:	0030      	movs	r0, r6
 800beee:	f000 fc81 	bl	800c7f4 <_sbrk_r>
 800bef2:	1c43      	adds	r3, r0, #1
 800bef4:	d1db      	bne.n	800beae <_malloc_r+0x6a>
 800bef6:	e7c7      	b.n	800be88 <_malloc_r+0x44>
 800bef8:	20000220 	.word	0x20000220
 800befc:	20000224 	.word	0x20000224

0800bf00 <__cvt>:
 800bf00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf02:	001e      	movs	r6, r3
 800bf04:	2300      	movs	r3, #0
 800bf06:	0014      	movs	r4, r2
 800bf08:	b08b      	sub	sp, #44	; 0x2c
 800bf0a:	429e      	cmp	r6, r3
 800bf0c:	da04      	bge.n	800bf18 <__cvt+0x18>
 800bf0e:	2180      	movs	r1, #128	; 0x80
 800bf10:	0609      	lsls	r1, r1, #24
 800bf12:	1873      	adds	r3, r6, r1
 800bf14:	001e      	movs	r6, r3
 800bf16:	232d      	movs	r3, #45	; 0x2d
 800bf18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bf1c:	7013      	strb	r3, [r2, #0]
 800bf1e:	2320      	movs	r3, #32
 800bf20:	2203      	movs	r2, #3
 800bf22:	439f      	bics	r7, r3
 800bf24:	2f46      	cmp	r7, #70	; 0x46
 800bf26:	d007      	beq.n	800bf38 <__cvt+0x38>
 800bf28:	003b      	movs	r3, r7
 800bf2a:	3b45      	subs	r3, #69	; 0x45
 800bf2c:	4259      	negs	r1, r3
 800bf2e:	414b      	adcs	r3, r1
 800bf30:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bf32:	3a01      	subs	r2, #1
 800bf34:	18cb      	adds	r3, r1, r3
 800bf36:	9310      	str	r3, [sp, #64]	; 0x40
 800bf38:	ab09      	add	r3, sp, #36	; 0x24
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	ab08      	add	r3, sp, #32
 800bf3e:	9303      	str	r3, [sp, #12]
 800bf40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf42:	9200      	str	r2, [sp, #0]
 800bf44:	9302      	str	r3, [sp, #8]
 800bf46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf48:	0022      	movs	r2, r4
 800bf4a:	9301      	str	r3, [sp, #4]
 800bf4c:	0033      	movs	r3, r6
 800bf4e:	f000 fd2d 	bl	800c9ac <_dtoa_r>
 800bf52:	0005      	movs	r5, r0
 800bf54:	2f47      	cmp	r7, #71	; 0x47
 800bf56:	d102      	bne.n	800bf5e <__cvt+0x5e>
 800bf58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf5a:	07db      	lsls	r3, r3, #31
 800bf5c:	d528      	bpl.n	800bfb0 <__cvt+0xb0>
 800bf5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf60:	18eb      	adds	r3, r5, r3
 800bf62:	9307      	str	r3, [sp, #28]
 800bf64:	2f46      	cmp	r7, #70	; 0x46
 800bf66:	d114      	bne.n	800bf92 <__cvt+0x92>
 800bf68:	782b      	ldrb	r3, [r5, #0]
 800bf6a:	2b30      	cmp	r3, #48	; 0x30
 800bf6c:	d10c      	bne.n	800bf88 <__cvt+0x88>
 800bf6e:	2200      	movs	r2, #0
 800bf70:	2300      	movs	r3, #0
 800bf72:	0020      	movs	r0, r4
 800bf74:	0031      	movs	r1, r6
 800bf76:	f7f4 fa67 	bl	8000448 <__aeabi_dcmpeq>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d104      	bne.n	800bf88 <__cvt+0x88>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bf82:	1a9b      	subs	r3, r3, r2
 800bf84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf86:	6013      	str	r3, [r2, #0]
 800bf88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf8a:	9a07      	ldr	r2, [sp, #28]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	18d3      	adds	r3, r2, r3
 800bf90:	9307      	str	r3, [sp, #28]
 800bf92:	2200      	movs	r2, #0
 800bf94:	2300      	movs	r3, #0
 800bf96:	0020      	movs	r0, r4
 800bf98:	0031      	movs	r1, r6
 800bf9a:	f7f4 fa55 	bl	8000448 <__aeabi_dcmpeq>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d001      	beq.n	800bfa6 <__cvt+0xa6>
 800bfa2:	9b07      	ldr	r3, [sp, #28]
 800bfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa6:	2230      	movs	r2, #48	; 0x30
 800bfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfaa:	9907      	ldr	r1, [sp, #28]
 800bfac:	428b      	cmp	r3, r1
 800bfae:	d306      	bcc.n	800bfbe <__cvt+0xbe>
 800bfb0:	0028      	movs	r0, r5
 800bfb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfb4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bfb6:	1b5b      	subs	r3, r3, r5
 800bfb8:	6013      	str	r3, [r2, #0]
 800bfba:	b00b      	add	sp, #44	; 0x2c
 800bfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfbe:	1c59      	adds	r1, r3, #1
 800bfc0:	9109      	str	r1, [sp, #36]	; 0x24
 800bfc2:	701a      	strb	r2, [r3, #0]
 800bfc4:	e7f0      	b.n	800bfa8 <__cvt+0xa8>

0800bfc6 <__exponent>:
 800bfc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfc8:	1c83      	adds	r3, r0, #2
 800bfca:	b087      	sub	sp, #28
 800bfcc:	9303      	str	r3, [sp, #12]
 800bfce:	0005      	movs	r5, r0
 800bfd0:	000c      	movs	r4, r1
 800bfd2:	232b      	movs	r3, #43	; 0x2b
 800bfd4:	7002      	strb	r2, [r0, #0]
 800bfd6:	2900      	cmp	r1, #0
 800bfd8:	da01      	bge.n	800bfde <__exponent+0x18>
 800bfda:	424c      	negs	r4, r1
 800bfdc:	3302      	adds	r3, #2
 800bfde:	706b      	strb	r3, [r5, #1]
 800bfe0:	2c09      	cmp	r4, #9
 800bfe2:	dd31      	ble.n	800c048 <__exponent+0x82>
 800bfe4:	270a      	movs	r7, #10
 800bfe6:	ab04      	add	r3, sp, #16
 800bfe8:	1dde      	adds	r6, r3, #7
 800bfea:	0020      	movs	r0, r4
 800bfec:	0039      	movs	r1, r7
 800bfee:	9601      	str	r6, [sp, #4]
 800bff0:	f7f4 fa14 	bl	800041c <__aeabi_idivmod>
 800bff4:	3e01      	subs	r6, #1
 800bff6:	3130      	adds	r1, #48	; 0x30
 800bff8:	0020      	movs	r0, r4
 800bffa:	7031      	strb	r1, [r6, #0]
 800bffc:	0039      	movs	r1, r7
 800bffe:	9402      	str	r4, [sp, #8]
 800c000:	f7f4 f926 	bl	8000250 <__divsi3>
 800c004:	9b02      	ldr	r3, [sp, #8]
 800c006:	0004      	movs	r4, r0
 800c008:	2b63      	cmp	r3, #99	; 0x63
 800c00a:	dcee      	bgt.n	800bfea <__exponent+0x24>
 800c00c:	9b01      	ldr	r3, [sp, #4]
 800c00e:	3430      	adds	r4, #48	; 0x30
 800c010:	1e9a      	subs	r2, r3, #2
 800c012:	0013      	movs	r3, r2
 800c014:	9903      	ldr	r1, [sp, #12]
 800c016:	7014      	strb	r4, [r2, #0]
 800c018:	a804      	add	r0, sp, #16
 800c01a:	3007      	adds	r0, #7
 800c01c:	4298      	cmp	r0, r3
 800c01e:	d80e      	bhi.n	800c03e <__exponent+0x78>
 800c020:	ab04      	add	r3, sp, #16
 800c022:	3307      	adds	r3, #7
 800c024:	2000      	movs	r0, #0
 800c026:	429a      	cmp	r2, r3
 800c028:	d804      	bhi.n	800c034 <__exponent+0x6e>
 800c02a:	ab04      	add	r3, sp, #16
 800c02c:	3009      	adds	r0, #9
 800c02e:	18c0      	adds	r0, r0, r3
 800c030:	9b01      	ldr	r3, [sp, #4]
 800c032:	1ac0      	subs	r0, r0, r3
 800c034:	9b03      	ldr	r3, [sp, #12]
 800c036:	1818      	adds	r0, r3, r0
 800c038:	1b40      	subs	r0, r0, r5
 800c03a:	b007      	add	sp, #28
 800c03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c03e:	7818      	ldrb	r0, [r3, #0]
 800c040:	3301      	adds	r3, #1
 800c042:	7008      	strb	r0, [r1, #0]
 800c044:	3101      	adds	r1, #1
 800c046:	e7e7      	b.n	800c018 <__exponent+0x52>
 800c048:	2330      	movs	r3, #48	; 0x30
 800c04a:	18e4      	adds	r4, r4, r3
 800c04c:	70ab      	strb	r3, [r5, #2]
 800c04e:	1d28      	adds	r0, r5, #4
 800c050:	70ec      	strb	r4, [r5, #3]
 800c052:	e7f1      	b.n	800c038 <__exponent+0x72>

0800c054 <_printf_float>:
 800c054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c056:	b095      	sub	sp, #84	; 0x54
 800c058:	000c      	movs	r4, r1
 800c05a:	9208      	str	r2, [sp, #32]
 800c05c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c05e:	9309      	str	r3, [sp, #36]	; 0x24
 800c060:	0007      	movs	r7, r0
 800c062:	f001 fad1 	bl	800d608 <_localeconv_r>
 800c066:	6803      	ldr	r3, [r0, #0]
 800c068:	0018      	movs	r0, r3
 800c06a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c06c:	f7f4 f84a 	bl	8000104 <strlen>
 800c070:	2300      	movs	r3, #0
 800c072:	9312      	str	r3, [sp, #72]	; 0x48
 800c074:	7e23      	ldrb	r3, [r4, #24]
 800c076:	2207      	movs	r2, #7
 800c078:	001e      	movs	r6, r3
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	900d      	str	r0, [sp, #52]	; 0x34
 800c07e:	930c      	str	r3, [sp, #48]	; 0x30
 800c080:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c082:	682b      	ldr	r3, [r5, #0]
 800c084:	05c9      	lsls	r1, r1, #23
 800c086:	d547      	bpl.n	800c118 <_printf_float+0xc4>
 800c088:	189b      	adds	r3, r3, r2
 800c08a:	4393      	bics	r3, r2
 800c08c:	001a      	movs	r2, r3
 800c08e:	3208      	adds	r2, #8
 800c090:	602a      	str	r2, [r5, #0]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	64a2      	str	r2, [r4, #72]	; 0x48
 800c098:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c09a:	2201      	movs	r2, #1
 800c09c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c09e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800c0a0:	930a      	str	r3, [sp, #40]	; 0x28
 800c0a2:	006b      	lsls	r3, r5, #1
 800c0a4:	085b      	lsrs	r3, r3, #1
 800c0a6:	930e      	str	r3, [sp, #56]	; 0x38
 800c0a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0aa:	4ba8      	ldr	r3, [pc, #672]	; (800c34c <_printf_float+0x2f8>)
 800c0ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c0ae:	4252      	negs	r2, r2
 800c0b0:	f7f6 f852 	bl	8002158 <__aeabi_dcmpun>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d131      	bne.n	800c11c <_printf_float+0xc8>
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	4ba4      	ldr	r3, [pc, #656]	; (800c34c <_printf_float+0x2f8>)
 800c0bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0be:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c0c0:	4252      	negs	r2, r2
 800c0c2:	f7f4 f9d1 	bl	8000468 <__aeabi_dcmple>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	d128      	bne.n	800c11c <_printf_float+0xc8>
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	0029      	movs	r1, r5
 800c0d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0d2:	f7f4 f9bf 	bl	8000454 <__aeabi_dcmplt>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d003      	beq.n	800c0e2 <_printf_float+0x8e>
 800c0da:	0023      	movs	r3, r4
 800c0dc:	222d      	movs	r2, #45	; 0x2d
 800c0de:	3343      	adds	r3, #67	; 0x43
 800c0e0:	701a      	strb	r2, [r3, #0]
 800c0e2:	4d9b      	ldr	r5, [pc, #620]	; (800c350 <_printf_float+0x2fc>)
 800c0e4:	2e47      	cmp	r6, #71	; 0x47
 800c0e6:	d900      	bls.n	800c0ea <_printf_float+0x96>
 800c0e8:	4d9a      	ldr	r5, [pc, #616]	; (800c354 <_printf_float+0x300>)
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0ee:	6123      	str	r3, [r4, #16]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	439a      	bics	r2, r3
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	6022      	str	r2, [r4, #0]
 800c0f8:	930a      	str	r3, [sp, #40]	; 0x28
 800c0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0fc:	0021      	movs	r1, r4
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	0038      	movs	r0, r7
 800c102:	9b08      	ldr	r3, [sp, #32]
 800c104:	aa13      	add	r2, sp, #76	; 0x4c
 800c106:	f000 f9f3 	bl	800c4f0 <_printf_common>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	d000      	beq.n	800c110 <_printf_float+0xbc>
 800c10e:	e09e      	b.n	800c24e <_printf_float+0x1fa>
 800c110:	2001      	movs	r0, #1
 800c112:	4240      	negs	r0, r0
 800c114:	b015      	add	sp, #84	; 0x54
 800c116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c118:	3307      	adds	r3, #7
 800c11a:	e7b6      	b.n	800c08a <_printf_float+0x36>
 800c11c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c11e:	002b      	movs	r3, r5
 800c120:	0010      	movs	r0, r2
 800c122:	0029      	movs	r1, r5
 800c124:	f7f6 f818 	bl	8002158 <__aeabi_dcmpun>
 800c128:	2800      	cmp	r0, #0
 800c12a:	d00a      	beq.n	800c142 <_printf_float+0xee>
 800c12c:	2d00      	cmp	r5, #0
 800c12e:	da03      	bge.n	800c138 <_printf_float+0xe4>
 800c130:	0023      	movs	r3, r4
 800c132:	222d      	movs	r2, #45	; 0x2d
 800c134:	3343      	adds	r3, #67	; 0x43
 800c136:	701a      	strb	r2, [r3, #0]
 800c138:	4d87      	ldr	r5, [pc, #540]	; (800c358 <_printf_float+0x304>)
 800c13a:	2e47      	cmp	r6, #71	; 0x47
 800c13c:	d9d5      	bls.n	800c0ea <_printf_float+0x96>
 800c13e:	4d87      	ldr	r5, [pc, #540]	; (800c35c <_printf_float+0x308>)
 800c140:	e7d3      	b.n	800c0ea <_printf_float+0x96>
 800c142:	2220      	movs	r2, #32
 800c144:	0031      	movs	r1, r6
 800c146:	6863      	ldr	r3, [r4, #4]
 800c148:	4391      	bics	r1, r2
 800c14a:	910e      	str	r1, [sp, #56]	; 0x38
 800c14c:	1c5a      	adds	r2, r3, #1
 800c14e:	d147      	bne.n	800c1e0 <_printf_float+0x18c>
 800c150:	3307      	adds	r3, #7
 800c152:	6063      	str	r3, [r4, #4]
 800c154:	2380      	movs	r3, #128	; 0x80
 800c156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c158:	00db      	lsls	r3, r3, #3
 800c15a:	4313      	orrs	r3, r2
 800c15c:	2200      	movs	r2, #0
 800c15e:	9206      	str	r2, [sp, #24]
 800c160:	aa12      	add	r2, sp, #72	; 0x48
 800c162:	9205      	str	r2, [sp, #20]
 800c164:	aa11      	add	r2, sp, #68	; 0x44
 800c166:	9203      	str	r2, [sp, #12]
 800c168:	2223      	movs	r2, #35	; 0x23
 800c16a:	a908      	add	r1, sp, #32
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	9301      	str	r3, [sp, #4]
 800c170:	6863      	ldr	r3, [r4, #4]
 800c172:	1852      	adds	r2, r2, r1
 800c174:	9202      	str	r2, [sp, #8]
 800c176:	9300      	str	r3, [sp, #0]
 800c178:	0038      	movs	r0, r7
 800c17a:	002b      	movs	r3, r5
 800c17c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c17e:	9604      	str	r6, [sp, #16]
 800c180:	f7ff febe 	bl	800bf00 <__cvt>
 800c184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c186:	0005      	movs	r5, r0
 800c188:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c18a:	2b47      	cmp	r3, #71	; 0x47
 800c18c:	d108      	bne.n	800c1a0 <_printf_float+0x14c>
 800c18e:	1ccb      	adds	r3, r1, #3
 800c190:	db02      	blt.n	800c198 <_printf_float+0x144>
 800c192:	6863      	ldr	r3, [r4, #4]
 800c194:	4299      	cmp	r1, r3
 800c196:	dd46      	ble.n	800c226 <_printf_float+0x1d2>
 800c198:	0033      	movs	r3, r6
 800c19a:	3b02      	subs	r3, #2
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	001e      	movs	r6, r3
 800c1a0:	2e65      	cmp	r6, #101	; 0x65
 800c1a2:	d824      	bhi.n	800c1ee <_printf_float+0x19a>
 800c1a4:	0020      	movs	r0, r4
 800c1a6:	0032      	movs	r2, r6
 800c1a8:	3901      	subs	r1, #1
 800c1aa:	3050      	adds	r0, #80	; 0x50
 800c1ac:	9111      	str	r1, [sp, #68]	; 0x44
 800c1ae:	f7ff ff0a 	bl	800bfc6 <__exponent>
 800c1b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1b4:	900a      	str	r0, [sp, #40]	; 0x28
 800c1b6:	1813      	adds	r3, r2, r0
 800c1b8:	6123      	str	r3, [r4, #16]
 800c1ba:	2a01      	cmp	r2, #1
 800c1bc:	dc02      	bgt.n	800c1c4 <_printf_float+0x170>
 800c1be:	6822      	ldr	r2, [r4, #0]
 800c1c0:	07d2      	lsls	r2, r2, #31
 800c1c2:	d501      	bpl.n	800c1c8 <_printf_float+0x174>
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	6123      	str	r3, [r4, #16]
 800c1c8:	2323      	movs	r3, #35	; 0x23
 800c1ca:	aa08      	add	r2, sp, #32
 800c1cc:	189b      	adds	r3, r3, r2
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d100      	bne.n	800c1d6 <_printf_float+0x182>
 800c1d4:	e791      	b.n	800c0fa <_printf_float+0xa6>
 800c1d6:	0023      	movs	r3, r4
 800c1d8:	222d      	movs	r2, #45	; 0x2d
 800c1da:	3343      	adds	r3, #67	; 0x43
 800c1dc:	701a      	strb	r2, [r3, #0]
 800c1de:	e78c      	b.n	800c0fa <_printf_float+0xa6>
 800c1e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1e2:	2a47      	cmp	r2, #71	; 0x47
 800c1e4:	d1b6      	bne.n	800c154 <_printf_float+0x100>
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1b4      	bne.n	800c154 <_printf_float+0x100>
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	e7b1      	b.n	800c152 <_printf_float+0xfe>
 800c1ee:	2e66      	cmp	r6, #102	; 0x66
 800c1f0:	d11b      	bne.n	800c22a <_printf_float+0x1d6>
 800c1f2:	6863      	ldr	r3, [r4, #4]
 800c1f4:	2900      	cmp	r1, #0
 800c1f6:	dd0d      	ble.n	800c214 <_printf_float+0x1c0>
 800c1f8:	6121      	str	r1, [r4, #16]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d102      	bne.n	800c204 <_printf_float+0x1b0>
 800c1fe:	6822      	ldr	r2, [r4, #0]
 800c200:	07d2      	lsls	r2, r2, #31
 800c202:	d502      	bpl.n	800c20a <_printf_float+0x1b6>
 800c204:	3301      	adds	r3, #1
 800c206:	1859      	adds	r1, r3, r1
 800c208:	6121      	str	r1, [r4, #16]
 800c20a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c20c:	65a3      	str	r3, [r4, #88]	; 0x58
 800c20e:	2300      	movs	r3, #0
 800c210:	930a      	str	r3, [sp, #40]	; 0x28
 800c212:	e7d9      	b.n	800c1c8 <_printf_float+0x174>
 800c214:	2b00      	cmp	r3, #0
 800c216:	d103      	bne.n	800c220 <_printf_float+0x1cc>
 800c218:	2201      	movs	r2, #1
 800c21a:	6821      	ldr	r1, [r4, #0]
 800c21c:	4211      	tst	r1, r2
 800c21e:	d000      	beq.n	800c222 <_printf_float+0x1ce>
 800c220:	1c9a      	adds	r2, r3, #2
 800c222:	6122      	str	r2, [r4, #16]
 800c224:	e7f1      	b.n	800c20a <_printf_float+0x1b6>
 800c226:	2367      	movs	r3, #103	; 0x67
 800c228:	001e      	movs	r6, r3
 800c22a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c22c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c22e:	4293      	cmp	r3, r2
 800c230:	db06      	blt.n	800c240 <_printf_float+0x1ec>
 800c232:	6822      	ldr	r2, [r4, #0]
 800c234:	6123      	str	r3, [r4, #16]
 800c236:	07d2      	lsls	r2, r2, #31
 800c238:	d5e7      	bpl.n	800c20a <_printf_float+0x1b6>
 800c23a:	3301      	adds	r3, #1
 800c23c:	6123      	str	r3, [r4, #16]
 800c23e:	e7e4      	b.n	800c20a <_printf_float+0x1b6>
 800c240:	2101      	movs	r1, #1
 800c242:	2b00      	cmp	r3, #0
 800c244:	dc01      	bgt.n	800c24a <_printf_float+0x1f6>
 800c246:	1849      	adds	r1, r1, r1
 800c248:	1ac9      	subs	r1, r1, r3
 800c24a:	1852      	adds	r2, r2, r1
 800c24c:	e7e9      	b.n	800c222 <_printf_float+0x1ce>
 800c24e:	6822      	ldr	r2, [r4, #0]
 800c250:	0553      	lsls	r3, r2, #21
 800c252:	d408      	bmi.n	800c266 <_printf_float+0x212>
 800c254:	6923      	ldr	r3, [r4, #16]
 800c256:	002a      	movs	r2, r5
 800c258:	0038      	movs	r0, r7
 800c25a:	9908      	ldr	r1, [sp, #32]
 800c25c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c25e:	47a8      	blx	r5
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	d129      	bne.n	800c2b8 <_printf_float+0x264>
 800c264:	e754      	b.n	800c110 <_printf_float+0xbc>
 800c266:	2e65      	cmp	r6, #101	; 0x65
 800c268:	d800      	bhi.n	800c26c <_printf_float+0x218>
 800c26a:	e0ec      	b.n	800c446 <_printf_float+0x3f2>
 800c26c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c26e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c270:	2200      	movs	r2, #0
 800c272:	2300      	movs	r3, #0
 800c274:	f7f4 f8e8 	bl	8000448 <__aeabi_dcmpeq>
 800c278:	2800      	cmp	r0, #0
 800c27a:	d034      	beq.n	800c2e6 <_printf_float+0x292>
 800c27c:	2301      	movs	r3, #1
 800c27e:	0038      	movs	r0, r7
 800c280:	4a37      	ldr	r2, [pc, #220]	; (800c360 <_printf_float+0x30c>)
 800c282:	9908      	ldr	r1, [sp, #32]
 800c284:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c286:	47a8      	blx	r5
 800c288:	1c43      	adds	r3, r0, #1
 800c28a:	d100      	bne.n	800c28e <_printf_float+0x23a>
 800c28c:	e740      	b.n	800c110 <_printf_float+0xbc>
 800c28e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c290:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c292:	4293      	cmp	r3, r2
 800c294:	db02      	blt.n	800c29c <_printf_float+0x248>
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	07db      	lsls	r3, r3, #31
 800c29a:	d50d      	bpl.n	800c2b8 <_printf_float+0x264>
 800c29c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c29e:	0038      	movs	r0, r7
 800c2a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2a4:	9908      	ldr	r1, [sp, #32]
 800c2a6:	47a8      	blx	r5
 800c2a8:	2500      	movs	r5, #0
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	d100      	bne.n	800c2b0 <_printf_float+0x25c>
 800c2ae:	e72f      	b.n	800c110 <_printf_float+0xbc>
 800c2b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	42ab      	cmp	r3, r5
 800c2b6:	dc0a      	bgt.n	800c2ce <_printf_float+0x27a>
 800c2b8:	6823      	ldr	r3, [r4, #0]
 800c2ba:	079b      	lsls	r3, r3, #30
 800c2bc:	d500      	bpl.n	800c2c0 <_printf_float+0x26c>
 800c2be:	e114      	b.n	800c4ea <_printf_float+0x496>
 800c2c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2c2:	68e0      	ldr	r0, [r4, #12]
 800c2c4:	4298      	cmp	r0, r3
 800c2c6:	db00      	blt.n	800c2ca <_printf_float+0x276>
 800c2c8:	e724      	b.n	800c114 <_printf_float+0xc0>
 800c2ca:	0018      	movs	r0, r3
 800c2cc:	e722      	b.n	800c114 <_printf_float+0xc0>
 800c2ce:	0022      	movs	r2, r4
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	0038      	movs	r0, r7
 800c2d4:	9908      	ldr	r1, [sp, #32]
 800c2d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c2d8:	321a      	adds	r2, #26
 800c2da:	47b0      	blx	r6
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	d100      	bne.n	800c2e2 <_printf_float+0x28e>
 800c2e0:	e716      	b.n	800c110 <_printf_float+0xbc>
 800c2e2:	3501      	adds	r5, #1
 800c2e4:	e7e4      	b.n	800c2b0 <_printf_float+0x25c>
 800c2e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	dc3b      	bgt.n	800c364 <_printf_float+0x310>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	0038      	movs	r0, r7
 800c2f0:	4a1b      	ldr	r2, [pc, #108]	; (800c360 <_printf_float+0x30c>)
 800c2f2:	9908      	ldr	r1, [sp, #32]
 800c2f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c2f6:	47b0      	blx	r6
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d100      	bne.n	800c2fe <_printf_float+0x2aa>
 800c2fc:	e708      	b.n	800c110 <_printf_float+0xbc>
 800c2fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c302:	4313      	orrs	r3, r2
 800c304:	d102      	bne.n	800c30c <_printf_float+0x2b8>
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	07db      	lsls	r3, r3, #31
 800c30a:	d5d5      	bpl.n	800c2b8 <_printf_float+0x264>
 800c30c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c30e:	0038      	movs	r0, r7
 800c310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c312:	9908      	ldr	r1, [sp, #32]
 800c314:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c316:	47b0      	blx	r6
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d100      	bne.n	800c31e <_printf_float+0x2ca>
 800c31c:	e6f8      	b.n	800c110 <_printf_float+0xbc>
 800c31e:	2300      	movs	r3, #0
 800c320:	930a      	str	r3, [sp, #40]	; 0x28
 800c322:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c326:	425b      	negs	r3, r3
 800c328:	4293      	cmp	r3, r2
 800c32a:	dc01      	bgt.n	800c330 <_printf_float+0x2dc>
 800c32c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c32e:	e792      	b.n	800c256 <_printf_float+0x202>
 800c330:	0022      	movs	r2, r4
 800c332:	2301      	movs	r3, #1
 800c334:	0038      	movs	r0, r7
 800c336:	9908      	ldr	r1, [sp, #32]
 800c338:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c33a:	321a      	adds	r2, #26
 800c33c:	47b0      	blx	r6
 800c33e:	1c43      	adds	r3, r0, #1
 800c340:	d100      	bne.n	800c344 <_printf_float+0x2f0>
 800c342:	e6e5      	b.n	800c110 <_printf_float+0xbc>
 800c344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c346:	3301      	adds	r3, #1
 800c348:	e7ea      	b.n	800c320 <_printf_float+0x2cc>
 800c34a:	46c0      	nop			; (mov r8, r8)
 800c34c:	7fefffff 	.word	0x7fefffff
 800c350:	0800ee20 	.word	0x0800ee20
 800c354:	0800ee24 	.word	0x0800ee24
 800c358:	0800ee28 	.word	0x0800ee28
 800c35c:	0800ee2c 	.word	0x0800ee2c
 800c360:	0800ee30 	.word	0x0800ee30
 800c364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c366:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c368:	920a      	str	r2, [sp, #40]	; 0x28
 800c36a:	429a      	cmp	r2, r3
 800c36c:	dd00      	ble.n	800c370 <_printf_float+0x31c>
 800c36e:	930a      	str	r3, [sp, #40]	; 0x28
 800c370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c372:	2b00      	cmp	r3, #0
 800c374:	dc3d      	bgt.n	800c3f2 <_printf_float+0x39e>
 800c376:	2300      	movs	r3, #0
 800c378:	930e      	str	r3, [sp, #56]	; 0x38
 800c37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c37c:	43db      	mvns	r3, r3
 800c37e:	17db      	asrs	r3, r3, #31
 800c380:	930f      	str	r3, [sp, #60]	; 0x3c
 800c382:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c386:	930c      	str	r3, [sp, #48]	; 0x30
 800c388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c38a:	4013      	ands	r3, r2
 800c38c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c392:	4293      	cmp	r3, r2
 800c394:	dc36      	bgt.n	800c404 <_printf_float+0x3b0>
 800c396:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c398:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c39a:	4293      	cmp	r3, r2
 800c39c:	db40      	blt.n	800c420 <_printf_float+0x3cc>
 800c39e:	6823      	ldr	r3, [r4, #0]
 800c3a0:	07db      	lsls	r3, r3, #31
 800c3a2:	d43d      	bmi.n	800c420 <_printf_float+0x3cc>
 800c3a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c3aa:	1ad3      	subs	r3, r2, r3
 800c3ac:	1a52      	subs	r2, r2, r1
 800c3ae:	920a      	str	r2, [sp, #40]	; 0x28
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	dd00      	ble.n	800c3b6 <_printf_float+0x362>
 800c3b4:	930a      	str	r3, [sp, #40]	; 0x28
 800c3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	dc3a      	bgt.n	800c432 <_printf_float+0x3de>
 800c3bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3be:	2500      	movs	r5, #0
 800c3c0:	43db      	mvns	r3, r3
 800c3c2:	17db      	asrs	r3, r3, #31
 800c3c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c3c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c3ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c3cc:	1a9b      	subs	r3, r3, r2
 800c3ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3d0:	400a      	ands	r2, r1
 800c3d2:	1a9b      	subs	r3, r3, r2
 800c3d4:	42ab      	cmp	r3, r5
 800c3d6:	dc00      	bgt.n	800c3da <_printf_float+0x386>
 800c3d8:	e76e      	b.n	800c2b8 <_printf_float+0x264>
 800c3da:	0022      	movs	r2, r4
 800c3dc:	2301      	movs	r3, #1
 800c3de:	0038      	movs	r0, r7
 800c3e0:	9908      	ldr	r1, [sp, #32]
 800c3e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c3e4:	321a      	adds	r2, #26
 800c3e6:	47b0      	blx	r6
 800c3e8:	1c43      	adds	r3, r0, #1
 800c3ea:	d100      	bne.n	800c3ee <_printf_float+0x39a>
 800c3ec:	e690      	b.n	800c110 <_printf_float+0xbc>
 800c3ee:	3501      	adds	r5, #1
 800c3f0:	e7e9      	b.n	800c3c6 <_printf_float+0x372>
 800c3f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3f4:	002a      	movs	r2, r5
 800c3f6:	0038      	movs	r0, r7
 800c3f8:	9908      	ldr	r1, [sp, #32]
 800c3fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c3fc:	47b0      	blx	r6
 800c3fe:	1c43      	adds	r3, r0, #1
 800c400:	d1b9      	bne.n	800c376 <_printf_float+0x322>
 800c402:	e685      	b.n	800c110 <_printf_float+0xbc>
 800c404:	0022      	movs	r2, r4
 800c406:	2301      	movs	r3, #1
 800c408:	0038      	movs	r0, r7
 800c40a:	9908      	ldr	r1, [sp, #32]
 800c40c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c40e:	321a      	adds	r2, #26
 800c410:	47b0      	blx	r6
 800c412:	1c43      	adds	r3, r0, #1
 800c414:	d100      	bne.n	800c418 <_printf_float+0x3c4>
 800c416:	e67b      	b.n	800c110 <_printf_float+0xbc>
 800c418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c41a:	3301      	adds	r3, #1
 800c41c:	930e      	str	r3, [sp, #56]	; 0x38
 800c41e:	e7b0      	b.n	800c382 <_printf_float+0x32e>
 800c420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c422:	0038      	movs	r0, r7
 800c424:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c426:	9908      	ldr	r1, [sp, #32]
 800c428:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c42a:	47b0      	blx	r6
 800c42c:	1c43      	adds	r3, r0, #1
 800c42e:	d1b9      	bne.n	800c3a4 <_printf_float+0x350>
 800c430:	e66e      	b.n	800c110 <_printf_float+0xbc>
 800c432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c434:	0038      	movs	r0, r7
 800c436:	18ea      	adds	r2, r5, r3
 800c438:	9908      	ldr	r1, [sp, #32]
 800c43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c43c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c43e:	47a8      	blx	r5
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d1bb      	bne.n	800c3bc <_printf_float+0x368>
 800c444:	e664      	b.n	800c110 <_printf_float+0xbc>
 800c446:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c448:	2b01      	cmp	r3, #1
 800c44a:	dc02      	bgt.n	800c452 <_printf_float+0x3fe>
 800c44c:	2301      	movs	r3, #1
 800c44e:	421a      	tst	r2, r3
 800c450:	d038      	beq.n	800c4c4 <_printf_float+0x470>
 800c452:	2301      	movs	r3, #1
 800c454:	002a      	movs	r2, r5
 800c456:	0038      	movs	r0, r7
 800c458:	9908      	ldr	r1, [sp, #32]
 800c45a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c45c:	47b0      	blx	r6
 800c45e:	1c43      	adds	r3, r0, #1
 800c460:	d100      	bne.n	800c464 <_printf_float+0x410>
 800c462:	e655      	b.n	800c110 <_printf_float+0xbc>
 800c464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c466:	0038      	movs	r0, r7
 800c468:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c46a:	9908      	ldr	r1, [sp, #32]
 800c46c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c46e:	47b0      	blx	r6
 800c470:	1c43      	adds	r3, r0, #1
 800c472:	d100      	bne.n	800c476 <_printf_float+0x422>
 800c474:	e64c      	b.n	800c110 <_printf_float+0xbc>
 800c476:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c478:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c47a:	2200      	movs	r2, #0
 800c47c:	2300      	movs	r3, #0
 800c47e:	f7f3 ffe3 	bl	8000448 <__aeabi_dcmpeq>
 800c482:	2800      	cmp	r0, #0
 800c484:	d11c      	bne.n	800c4c0 <_printf_float+0x46c>
 800c486:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c488:	1c6a      	adds	r2, r5, #1
 800c48a:	3b01      	subs	r3, #1
 800c48c:	0038      	movs	r0, r7
 800c48e:	9908      	ldr	r1, [sp, #32]
 800c490:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c492:	47a8      	blx	r5
 800c494:	1c43      	adds	r3, r0, #1
 800c496:	d10f      	bne.n	800c4b8 <_printf_float+0x464>
 800c498:	e63a      	b.n	800c110 <_printf_float+0xbc>
 800c49a:	0022      	movs	r2, r4
 800c49c:	2301      	movs	r3, #1
 800c49e:	0038      	movs	r0, r7
 800c4a0:	9908      	ldr	r1, [sp, #32]
 800c4a2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c4a4:	321a      	adds	r2, #26
 800c4a6:	47b0      	blx	r6
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d100      	bne.n	800c4ae <_printf_float+0x45a>
 800c4ac:	e630      	b.n	800c110 <_printf_float+0xbc>
 800c4ae:	3501      	adds	r5, #1
 800c4b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	42ab      	cmp	r3, r5
 800c4b6:	dcf0      	bgt.n	800c49a <_printf_float+0x446>
 800c4b8:	0022      	movs	r2, r4
 800c4ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4bc:	3250      	adds	r2, #80	; 0x50
 800c4be:	e6cb      	b.n	800c258 <_printf_float+0x204>
 800c4c0:	2500      	movs	r5, #0
 800c4c2:	e7f5      	b.n	800c4b0 <_printf_float+0x45c>
 800c4c4:	002a      	movs	r2, r5
 800c4c6:	e7e1      	b.n	800c48c <_printf_float+0x438>
 800c4c8:	0022      	movs	r2, r4
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	0038      	movs	r0, r7
 800c4ce:	9908      	ldr	r1, [sp, #32]
 800c4d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c4d2:	3219      	adds	r2, #25
 800c4d4:	47b0      	blx	r6
 800c4d6:	1c43      	adds	r3, r0, #1
 800c4d8:	d100      	bne.n	800c4dc <_printf_float+0x488>
 800c4da:	e619      	b.n	800c110 <_printf_float+0xbc>
 800c4dc:	3501      	adds	r5, #1
 800c4de:	68e3      	ldr	r3, [r4, #12]
 800c4e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c4e2:	1a9b      	subs	r3, r3, r2
 800c4e4:	42ab      	cmp	r3, r5
 800c4e6:	dcef      	bgt.n	800c4c8 <_printf_float+0x474>
 800c4e8:	e6ea      	b.n	800c2c0 <_printf_float+0x26c>
 800c4ea:	2500      	movs	r5, #0
 800c4ec:	e7f7      	b.n	800c4de <_printf_float+0x48a>
 800c4ee:	46c0      	nop			; (mov r8, r8)

0800c4f0 <_printf_common>:
 800c4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4f2:	0015      	movs	r5, r2
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	688a      	ldr	r2, [r1, #8]
 800c4f8:	690b      	ldr	r3, [r1, #16]
 800c4fa:	000c      	movs	r4, r1
 800c4fc:	9000      	str	r0, [sp, #0]
 800c4fe:	4293      	cmp	r3, r2
 800c500:	da00      	bge.n	800c504 <_printf_common+0x14>
 800c502:	0013      	movs	r3, r2
 800c504:	0022      	movs	r2, r4
 800c506:	602b      	str	r3, [r5, #0]
 800c508:	3243      	adds	r2, #67	; 0x43
 800c50a:	7812      	ldrb	r2, [r2, #0]
 800c50c:	2a00      	cmp	r2, #0
 800c50e:	d001      	beq.n	800c514 <_printf_common+0x24>
 800c510:	3301      	adds	r3, #1
 800c512:	602b      	str	r3, [r5, #0]
 800c514:	6823      	ldr	r3, [r4, #0]
 800c516:	069b      	lsls	r3, r3, #26
 800c518:	d502      	bpl.n	800c520 <_printf_common+0x30>
 800c51a:	682b      	ldr	r3, [r5, #0]
 800c51c:	3302      	adds	r3, #2
 800c51e:	602b      	str	r3, [r5, #0]
 800c520:	6822      	ldr	r2, [r4, #0]
 800c522:	2306      	movs	r3, #6
 800c524:	0017      	movs	r7, r2
 800c526:	401f      	ands	r7, r3
 800c528:	421a      	tst	r2, r3
 800c52a:	d027      	beq.n	800c57c <_printf_common+0x8c>
 800c52c:	0023      	movs	r3, r4
 800c52e:	3343      	adds	r3, #67	; 0x43
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	1e5a      	subs	r2, r3, #1
 800c534:	4193      	sbcs	r3, r2
 800c536:	6822      	ldr	r2, [r4, #0]
 800c538:	0692      	lsls	r2, r2, #26
 800c53a:	d430      	bmi.n	800c59e <_printf_common+0xae>
 800c53c:	0022      	movs	r2, r4
 800c53e:	9901      	ldr	r1, [sp, #4]
 800c540:	9800      	ldr	r0, [sp, #0]
 800c542:	9e08      	ldr	r6, [sp, #32]
 800c544:	3243      	adds	r2, #67	; 0x43
 800c546:	47b0      	blx	r6
 800c548:	1c43      	adds	r3, r0, #1
 800c54a:	d025      	beq.n	800c598 <_printf_common+0xa8>
 800c54c:	2306      	movs	r3, #6
 800c54e:	6820      	ldr	r0, [r4, #0]
 800c550:	682a      	ldr	r2, [r5, #0]
 800c552:	68e1      	ldr	r1, [r4, #12]
 800c554:	2500      	movs	r5, #0
 800c556:	4003      	ands	r3, r0
 800c558:	2b04      	cmp	r3, #4
 800c55a:	d103      	bne.n	800c564 <_printf_common+0x74>
 800c55c:	1a8d      	subs	r5, r1, r2
 800c55e:	43eb      	mvns	r3, r5
 800c560:	17db      	asrs	r3, r3, #31
 800c562:	401d      	ands	r5, r3
 800c564:	68a3      	ldr	r3, [r4, #8]
 800c566:	6922      	ldr	r2, [r4, #16]
 800c568:	4293      	cmp	r3, r2
 800c56a:	dd01      	ble.n	800c570 <_printf_common+0x80>
 800c56c:	1a9b      	subs	r3, r3, r2
 800c56e:	18ed      	adds	r5, r5, r3
 800c570:	2700      	movs	r7, #0
 800c572:	42bd      	cmp	r5, r7
 800c574:	d120      	bne.n	800c5b8 <_printf_common+0xc8>
 800c576:	2000      	movs	r0, #0
 800c578:	e010      	b.n	800c59c <_printf_common+0xac>
 800c57a:	3701      	adds	r7, #1
 800c57c:	68e3      	ldr	r3, [r4, #12]
 800c57e:	682a      	ldr	r2, [r5, #0]
 800c580:	1a9b      	subs	r3, r3, r2
 800c582:	42bb      	cmp	r3, r7
 800c584:	ddd2      	ble.n	800c52c <_printf_common+0x3c>
 800c586:	0022      	movs	r2, r4
 800c588:	2301      	movs	r3, #1
 800c58a:	9901      	ldr	r1, [sp, #4]
 800c58c:	9800      	ldr	r0, [sp, #0]
 800c58e:	9e08      	ldr	r6, [sp, #32]
 800c590:	3219      	adds	r2, #25
 800c592:	47b0      	blx	r6
 800c594:	1c43      	adds	r3, r0, #1
 800c596:	d1f0      	bne.n	800c57a <_printf_common+0x8a>
 800c598:	2001      	movs	r0, #1
 800c59a:	4240      	negs	r0, r0
 800c59c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c59e:	2030      	movs	r0, #48	; 0x30
 800c5a0:	18e1      	adds	r1, r4, r3
 800c5a2:	3143      	adds	r1, #67	; 0x43
 800c5a4:	7008      	strb	r0, [r1, #0]
 800c5a6:	0021      	movs	r1, r4
 800c5a8:	1c5a      	adds	r2, r3, #1
 800c5aa:	3145      	adds	r1, #69	; 0x45
 800c5ac:	7809      	ldrb	r1, [r1, #0]
 800c5ae:	18a2      	adds	r2, r4, r2
 800c5b0:	3243      	adds	r2, #67	; 0x43
 800c5b2:	3302      	adds	r3, #2
 800c5b4:	7011      	strb	r1, [r2, #0]
 800c5b6:	e7c1      	b.n	800c53c <_printf_common+0x4c>
 800c5b8:	0022      	movs	r2, r4
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	9901      	ldr	r1, [sp, #4]
 800c5be:	9800      	ldr	r0, [sp, #0]
 800c5c0:	9e08      	ldr	r6, [sp, #32]
 800c5c2:	321a      	adds	r2, #26
 800c5c4:	47b0      	blx	r6
 800c5c6:	1c43      	adds	r3, r0, #1
 800c5c8:	d0e6      	beq.n	800c598 <_printf_common+0xa8>
 800c5ca:	3701      	adds	r7, #1
 800c5cc:	e7d1      	b.n	800c572 <_printf_common+0x82>
	...

0800c5d0 <_printf_i>:
 800c5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5d2:	b08b      	sub	sp, #44	; 0x2c
 800c5d4:	9206      	str	r2, [sp, #24]
 800c5d6:	000a      	movs	r2, r1
 800c5d8:	3243      	adds	r2, #67	; 0x43
 800c5da:	9307      	str	r3, [sp, #28]
 800c5dc:	9005      	str	r0, [sp, #20]
 800c5de:	9204      	str	r2, [sp, #16]
 800c5e0:	7e0a      	ldrb	r2, [r1, #24]
 800c5e2:	000c      	movs	r4, r1
 800c5e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5e6:	2a78      	cmp	r2, #120	; 0x78
 800c5e8:	d806      	bhi.n	800c5f8 <_printf_i+0x28>
 800c5ea:	2a62      	cmp	r2, #98	; 0x62
 800c5ec:	d808      	bhi.n	800c600 <_printf_i+0x30>
 800c5ee:	2a00      	cmp	r2, #0
 800c5f0:	d100      	bne.n	800c5f4 <_printf_i+0x24>
 800c5f2:	e0c0      	b.n	800c776 <_printf_i+0x1a6>
 800c5f4:	2a58      	cmp	r2, #88	; 0x58
 800c5f6:	d052      	beq.n	800c69e <_printf_i+0xce>
 800c5f8:	0026      	movs	r6, r4
 800c5fa:	3642      	adds	r6, #66	; 0x42
 800c5fc:	7032      	strb	r2, [r6, #0]
 800c5fe:	e022      	b.n	800c646 <_printf_i+0x76>
 800c600:	0010      	movs	r0, r2
 800c602:	3863      	subs	r0, #99	; 0x63
 800c604:	2815      	cmp	r0, #21
 800c606:	d8f7      	bhi.n	800c5f8 <_printf_i+0x28>
 800c608:	f7f3 fd8e 	bl	8000128 <__gnu_thumb1_case_shi>
 800c60c:	001f0016 	.word	0x001f0016
 800c610:	fff6fff6 	.word	0xfff6fff6
 800c614:	fff6fff6 	.word	0xfff6fff6
 800c618:	fff6001f 	.word	0xfff6001f
 800c61c:	fff6fff6 	.word	0xfff6fff6
 800c620:	00a8fff6 	.word	0x00a8fff6
 800c624:	009a0036 	.word	0x009a0036
 800c628:	fff6fff6 	.word	0xfff6fff6
 800c62c:	fff600b9 	.word	0xfff600b9
 800c630:	fff60036 	.word	0xfff60036
 800c634:	009efff6 	.word	0x009efff6
 800c638:	0026      	movs	r6, r4
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	3642      	adds	r6, #66	; 0x42
 800c63e:	1d11      	adds	r1, r2, #4
 800c640:	6019      	str	r1, [r3, #0]
 800c642:	6813      	ldr	r3, [r2, #0]
 800c644:	7033      	strb	r3, [r6, #0]
 800c646:	2301      	movs	r3, #1
 800c648:	e0a7      	b.n	800c79a <_printf_i+0x1ca>
 800c64a:	6808      	ldr	r0, [r1, #0]
 800c64c:	6819      	ldr	r1, [r3, #0]
 800c64e:	1d0a      	adds	r2, r1, #4
 800c650:	0605      	lsls	r5, r0, #24
 800c652:	d50b      	bpl.n	800c66c <_printf_i+0x9c>
 800c654:	680d      	ldr	r5, [r1, #0]
 800c656:	601a      	str	r2, [r3, #0]
 800c658:	2d00      	cmp	r5, #0
 800c65a:	da03      	bge.n	800c664 <_printf_i+0x94>
 800c65c:	232d      	movs	r3, #45	; 0x2d
 800c65e:	9a04      	ldr	r2, [sp, #16]
 800c660:	426d      	negs	r5, r5
 800c662:	7013      	strb	r3, [r2, #0]
 800c664:	4b61      	ldr	r3, [pc, #388]	; (800c7ec <_printf_i+0x21c>)
 800c666:	270a      	movs	r7, #10
 800c668:	9303      	str	r3, [sp, #12]
 800c66a:	e032      	b.n	800c6d2 <_printf_i+0x102>
 800c66c:	680d      	ldr	r5, [r1, #0]
 800c66e:	601a      	str	r2, [r3, #0]
 800c670:	0641      	lsls	r1, r0, #25
 800c672:	d5f1      	bpl.n	800c658 <_printf_i+0x88>
 800c674:	b22d      	sxth	r5, r5
 800c676:	e7ef      	b.n	800c658 <_printf_i+0x88>
 800c678:	680d      	ldr	r5, [r1, #0]
 800c67a:	6819      	ldr	r1, [r3, #0]
 800c67c:	1d08      	adds	r0, r1, #4
 800c67e:	6018      	str	r0, [r3, #0]
 800c680:	062e      	lsls	r6, r5, #24
 800c682:	d501      	bpl.n	800c688 <_printf_i+0xb8>
 800c684:	680d      	ldr	r5, [r1, #0]
 800c686:	e003      	b.n	800c690 <_printf_i+0xc0>
 800c688:	066d      	lsls	r5, r5, #25
 800c68a:	d5fb      	bpl.n	800c684 <_printf_i+0xb4>
 800c68c:	680d      	ldr	r5, [r1, #0]
 800c68e:	b2ad      	uxth	r5, r5
 800c690:	4b56      	ldr	r3, [pc, #344]	; (800c7ec <_printf_i+0x21c>)
 800c692:	270a      	movs	r7, #10
 800c694:	9303      	str	r3, [sp, #12]
 800c696:	2a6f      	cmp	r2, #111	; 0x6f
 800c698:	d117      	bne.n	800c6ca <_printf_i+0xfa>
 800c69a:	2708      	movs	r7, #8
 800c69c:	e015      	b.n	800c6ca <_printf_i+0xfa>
 800c69e:	3145      	adds	r1, #69	; 0x45
 800c6a0:	700a      	strb	r2, [r1, #0]
 800c6a2:	4a52      	ldr	r2, [pc, #328]	; (800c7ec <_printf_i+0x21c>)
 800c6a4:	9203      	str	r2, [sp, #12]
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	6821      	ldr	r1, [r4, #0]
 800c6aa:	ca20      	ldmia	r2!, {r5}
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	0608      	lsls	r0, r1, #24
 800c6b0:	d550      	bpl.n	800c754 <_printf_i+0x184>
 800c6b2:	07cb      	lsls	r3, r1, #31
 800c6b4:	d502      	bpl.n	800c6bc <_printf_i+0xec>
 800c6b6:	2320      	movs	r3, #32
 800c6b8:	4319      	orrs	r1, r3
 800c6ba:	6021      	str	r1, [r4, #0]
 800c6bc:	2710      	movs	r7, #16
 800c6be:	2d00      	cmp	r5, #0
 800c6c0:	d103      	bne.n	800c6ca <_printf_i+0xfa>
 800c6c2:	2320      	movs	r3, #32
 800c6c4:	6822      	ldr	r2, [r4, #0]
 800c6c6:	439a      	bics	r2, r3
 800c6c8:	6022      	str	r2, [r4, #0]
 800c6ca:	0023      	movs	r3, r4
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	3343      	adds	r3, #67	; 0x43
 800c6d0:	701a      	strb	r2, [r3, #0]
 800c6d2:	6863      	ldr	r3, [r4, #4]
 800c6d4:	60a3      	str	r3, [r4, #8]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	db03      	blt.n	800c6e2 <_printf_i+0x112>
 800c6da:	2204      	movs	r2, #4
 800c6dc:	6821      	ldr	r1, [r4, #0]
 800c6de:	4391      	bics	r1, r2
 800c6e0:	6021      	str	r1, [r4, #0]
 800c6e2:	2d00      	cmp	r5, #0
 800c6e4:	d102      	bne.n	800c6ec <_printf_i+0x11c>
 800c6e6:	9e04      	ldr	r6, [sp, #16]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d00c      	beq.n	800c706 <_printf_i+0x136>
 800c6ec:	9e04      	ldr	r6, [sp, #16]
 800c6ee:	0028      	movs	r0, r5
 800c6f0:	0039      	movs	r1, r7
 800c6f2:	f7f3 fda9 	bl	8000248 <__aeabi_uidivmod>
 800c6f6:	9b03      	ldr	r3, [sp, #12]
 800c6f8:	3e01      	subs	r6, #1
 800c6fa:	5c5b      	ldrb	r3, [r3, r1]
 800c6fc:	7033      	strb	r3, [r6, #0]
 800c6fe:	002b      	movs	r3, r5
 800c700:	0005      	movs	r5, r0
 800c702:	429f      	cmp	r7, r3
 800c704:	d9f3      	bls.n	800c6ee <_printf_i+0x11e>
 800c706:	2f08      	cmp	r7, #8
 800c708:	d109      	bne.n	800c71e <_printf_i+0x14e>
 800c70a:	6823      	ldr	r3, [r4, #0]
 800c70c:	07db      	lsls	r3, r3, #31
 800c70e:	d506      	bpl.n	800c71e <_printf_i+0x14e>
 800c710:	6863      	ldr	r3, [r4, #4]
 800c712:	6922      	ldr	r2, [r4, #16]
 800c714:	4293      	cmp	r3, r2
 800c716:	dc02      	bgt.n	800c71e <_printf_i+0x14e>
 800c718:	2330      	movs	r3, #48	; 0x30
 800c71a:	3e01      	subs	r6, #1
 800c71c:	7033      	strb	r3, [r6, #0]
 800c71e:	9b04      	ldr	r3, [sp, #16]
 800c720:	1b9b      	subs	r3, r3, r6
 800c722:	6123      	str	r3, [r4, #16]
 800c724:	9b07      	ldr	r3, [sp, #28]
 800c726:	0021      	movs	r1, r4
 800c728:	9300      	str	r3, [sp, #0]
 800c72a:	9805      	ldr	r0, [sp, #20]
 800c72c:	9b06      	ldr	r3, [sp, #24]
 800c72e:	aa09      	add	r2, sp, #36	; 0x24
 800c730:	f7ff fede 	bl	800c4f0 <_printf_common>
 800c734:	1c43      	adds	r3, r0, #1
 800c736:	d135      	bne.n	800c7a4 <_printf_i+0x1d4>
 800c738:	2001      	movs	r0, #1
 800c73a:	4240      	negs	r0, r0
 800c73c:	b00b      	add	sp, #44	; 0x2c
 800c73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c740:	2220      	movs	r2, #32
 800c742:	6809      	ldr	r1, [r1, #0]
 800c744:	430a      	orrs	r2, r1
 800c746:	6022      	str	r2, [r4, #0]
 800c748:	0022      	movs	r2, r4
 800c74a:	2178      	movs	r1, #120	; 0x78
 800c74c:	3245      	adds	r2, #69	; 0x45
 800c74e:	7011      	strb	r1, [r2, #0]
 800c750:	4a27      	ldr	r2, [pc, #156]	; (800c7f0 <_printf_i+0x220>)
 800c752:	e7a7      	b.n	800c6a4 <_printf_i+0xd4>
 800c754:	0648      	lsls	r0, r1, #25
 800c756:	d5ac      	bpl.n	800c6b2 <_printf_i+0xe2>
 800c758:	b2ad      	uxth	r5, r5
 800c75a:	e7aa      	b.n	800c6b2 <_printf_i+0xe2>
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	680d      	ldr	r5, [r1, #0]
 800c760:	1d10      	adds	r0, r2, #4
 800c762:	6949      	ldr	r1, [r1, #20]
 800c764:	6018      	str	r0, [r3, #0]
 800c766:	6813      	ldr	r3, [r2, #0]
 800c768:	062e      	lsls	r6, r5, #24
 800c76a:	d501      	bpl.n	800c770 <_printf_i+0x1a0>
 800c76c:	6019      	str	r1, [r3, #0]
 800c76e:	e002      	b.n	800c776 <_printf_i+0x1a6>
 800c770:	066d      	lsls	r5, r5, #25
 800c772:	d5fb      	bpl.n	800c76c <_printf_i+0x19c>
 800c774:	8019      	strh	r1, [r3, #0]
 800c776:	2300      	movs	r3, #0
 800c778:	9e04      	ldr	r6, [sp, #16]
 800c77a:	6123      	str	r3, [r4, #16]
 800c77c:	e7d2      	b.n	800c724 <_printf_i+0x154>
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	1d11      	adds	r1, r2, #4
 800c782:	6019      	str	r1, [r3, #0]
 800c784:	6816      	ldr	r6, [r2, #0]
 800c786:	2100      	movs	r1, #0
 800c788:	0030      	movs	r0, r6
 800c78a:	6862      	ldr	r2, [r4, #4]
 800c78c:	f000 ff52 	bl	800d634 <memchr>
 800c790:	2800      	cmp	r0, #0
 800c792:	d001      	beq.n	800c798 <_printf_i+0x1c8>
 800c794:	1b80      	subs	r0, r0, r6
 800c796:	6060      	str	r0, [r4, #4]
 800c798:	6863      	ldr	r3, [r4, #4]
 800c79a:	6123      	str	r3, [r4, #16]
 800c79c:	2300      	movs	r3, #0
 800c79e:	9a04      	ldr	r2, [sp, #16]
 800c7a0:	7013      	strb	r3, [r2, #0]
 800c7a2:	e7bf      	b.n	800c724 <_printf_i+0x154>
 800c7a4:	6923      	ldr	r3, [r4, #16]
 800c7a6:	0032      	movs	r2, r6
 800c7a8:	9906      	ldr	r1, [sp, #24]
 800c7aa:	9805      	ldr	r0, [sp, #20]
 800c7ac:	9d07      	ldr	r5, [sp, #28]
 800c7ae:	47a8      	blx	r5
 800c7b0:	1c43      	adds	r3, r0, #1
 800c7b2:	d0c1      	beq.n	800c738 <_printf_i+0x168>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	079b      	lsls	r3, r3, #30
 800c7b8:	d415      	bmi.n	800c7e6 <_printf_i+0x216>
 800c7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7bc:	68e0      	ldr	r0, [r4, #12]
 800c7be:	4298      	cmp	r0, r3
 800c7c0:	dabc      	bge.n	800c73c <_printf_i+0x16c>
 800c7c2:	0018      	movs	r0, r3
 800c7c4:	e7ba      	b.n	800c73c <_printf_i+0x16c>
 800c7c6:	0022      	movs	r2, r4
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	9906      	ldr	r1, [sp, #24]
 800c7cc:	9805      	ldr	r0, [sp, #20]
 800c7ce:	9e07      	ldr	r6, [sp, #28]
 800c7d0:	3219      	adds	r2, #25
 800c7d2:	47b0      	blx	r6
 800c7d4:	1c43      	adds	r3, r0, #1
 800c7d6:	d0af      	beq.n	800c738 <_printf_i+0x168>
 800c7d8:	3501      	adds	r5, #1
 800c7da:	68e3      	ldr	r3, [r4, #12]
 800c7dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7de:	1a9b      	subs	r3, r3, r2
 800c7e0:	42ab      	cmp	r3, r5
 800c7e2:	dcf0      	bgt.n	800c7c6 <_printf_i+0x1f6>
 800c7e4:	e7e9      	b.n	800c7ba <_printf_i+0x1ea>
 800c7e6:	2500      	movs	r5, #0
 800c7e8:	e7f7      	b.n	800c7da <_printf_i+0x20a>
 800c7ea:	46c0      	nop			; (mov r8, r8)
 800c7ec:	0800ee32 	.word	0x0800ee32
 800c7f0:	0800ee43 	.word	0x0800ee43

0800c7f4 <_sbrk_r>:
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	b570      	push	{r4, r5, r6, lr}
 800c7f8:	4d06      	ldr	r5, [pc, #24]	; (800c814 <_sbrk_r+0x20>)
 800c7fa:	0004      	movs	r4, r0
 800c7fc:	0008      	movs	r0, r1
 800c7fe:	602b      	str	r3, [r5, #0]
 800c800:	f7f6 ffe2 	bl	80037c8 <_sbrk>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d103      	bne.n	800c810 <_sbrk_r+0x1c>
 800c808:	682b      	ldr	r3, [r5, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d000      	beq.n	800c810 <_sbrk_r+0x1c>
 800c80e:	6023      	str	r3, [r4, #0]
 800c810:	bd70      	pop	{r4, r5, r6, pc}
 800c812:	46c0      	nop			; (mov r8, r8)
 800c814:	20000600 	.word	0x20000600

0800c818 <siprintf>:
 800c818:	b40e      	push	{r1, r2, r3}
 800c81a:	b500      	push	{lr}
 800c81c:	490b      	ldr	r1, [pc, #44]	; (800c84c <siprintf+0x34>)
 800c81e:	b09c      	sub	sp, #112	; 0x70
 800c820:	ab1d      	add	r3, sp, #116	; 0x74
 800c822:	9002      	str	r0, [sp, #8]
 800c824:	9006      	str	r0, [sp, #24]
 800c826:	9107      	str	r1, [sp, #28]
 800c828:	9104      	str	r1, [sp, #16]
 800c82a:	4809      	ldr	r0, [pc, #36]	; (800c850 <siprintf+0x38>)
 800c82c:	4909      	ldr	r1, [pc, #36]	; (800c854 <siprintf+0x3c>)
 800c82e:	cb04      	ldmia	r3!, {r2}
 800c830:	9105      	str	r1, [sp, #20]
 800c832:	6800      	ldr	r0, [r0, #0]
 800c834:	a902      	add	r1, sp, #8
 800c836:	9301      	str	r3, [sp, #4]
 800c838:	f001 fb26 	bl	800de88 <_svfiprintf_r>
 800c83c:	2300      	movs	r3, #0
 800c83e:	9a02      	ldr	r2, [sp, #8]
 800c840:	7013      	strb	r3, [r2, #0]
 800c842:	b01c      	add	sp, #112	; 0x70
 800c844:	bc08      	pop	{r3}
 800c846:	b003      	add	sp, #12
 800c848:	4718      	bx	r3
 800c84a:	46c0      	nop			; (mov r8, r8)
 800c84c:	7fffffff 	.word	0x7fffffff
 800c850:	2000002c 	.word	0x2000002c
 800c854:	ffff0208 	.word	0xffff0208

0800c858 <__assert_func>:
 800c858:	b530      	push	{r4, r5, lr}
 800c85a:	0014      	movs	r4, r2
 800c85c:	001a      	movs	r2, r3
 800c85e:	4b09      	ldr	r3, [pc, #36]	; (800c884 <__assert_func+0x2c>)
 800c860:	0005      	movs	r5, r0
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	b085      	sub	sp, #20
 800c866:	68d8      	ldr	r0, [r3, #12]
 800c868:	4b07      	ldr	r3, [pc, #28]	; (800c888 <__assert_func+0x30>)
 800c86a:	2c00      	cmp	r4, #0
 800c86c:	d101      	bne.n	800c872 <__assert_func+0x1a>
 800c86e:	4b07      	ldr	r3, [pc, #28]	; (800c88c <__assert_func+0x34>)
 800c870:	001c      	movs	r4, r3
 800c872:	9301      	str	r3, [sp, #4]
 800c874:	9100      	str	r1, [sp, #0]
 800c876:	002b      	movs	r3, r5
 800c878:	4905      	ldr	r1, [pc, #20]	; (800c890 <__assert_func+0x38>)
 800c87a:	9402      	str	r4, [sp, #8]
 800c87c:	f000 feb4 	bl	800d5e8 <fiprintf>
 800c880:	f001 fe40 	bl	800e504 <abort>
 800c884:	2000002c 	.word	0x2000002c
 800c888:	0800ee54 	.word	0x0800ee54
 800c88c:	0800ee8f 	.word	0x0800ee8f
 800c890:	0800ee61 	.word	0x0800ee61

0800c894 <quorem>:
 800c894:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c896:	0006      	movs	r6, r0
 800c898:	690d      	ldr	r5, [r1, #16]
 800c89a:	6933      	ldr	r3, [r6, #16]
 800c89c:	b087      	sub	sp, #28
 800c89e:	2000      	movs	r0, #0
 800c8a0:	9102      	str	r1, [sp, #8]
 800c8a2:	42ab      	cmp	r3, r5
 800c8a4:	db6b      	blt.n	800c97e <quorem+0xea>
 800c8a6:	000b      	movs	r3, r1
 800c8a8:	3d01      	subs	r5, #1
 800c8aa:	00ac      	lsls	r4, r5, #2
 800c8ac:	3314      	adds	r3, #20
 800c8ae:	9305      	str	r3, [sp, #20]
 800c8b0:	191b      	adds	r3, r3, r4
 800c8b2:	9303      	str	r3, [sp, #12]
 800c8b4:	0033      	movs	r3, r6
 800c8b6:	3314      	adds	r3, #20
 800c8b8:	9301      	str	r3, [sp, #4]
 800c8ba:	191c      	adds	r4, r3, r4
 800c8bc:	9b03      	ldr	r3, [sp, #12]
 800c8be:	6827      	ldr	r7, [r4, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	0038      	movs	r0, r7
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	0019      	movs	r1, r3
 800c8ca:	9304      	str	r3, [sp, #16]
 800c8cc:	f7f3 fc36 	bl	800013c <__udivsi3>
 800c8d0:	9b04      	ldr	r3, [sp, #16]
 800c8d2:	9000      	str	r0, [sp, #0]
 800c8d4:	429f      	cmp	r7, r3
 800c8d6:	d329      	bcc.n	800c92c <quorem+0x98>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	469c      	mov	ip, r3
 800c8dc:	9801      	ldr	r0, [sp, #4]
 800c8de:	9f05      	ldr	r7, [sp, #20]
 800c8e0:	9304      	str	r3, [sp, #16]
 800c8e2:	cf08      	ldmia	r7!, {r3}
 800c8e4:	9a00      	ldr	r2, [sp, #0]
 800c8e6:	b299      	uxth	r1, r3
 800c8e8:	4351      	muls	r1, r2
 800c8ea:	0c1b      	lsrs	r3, r3, #16
 800c8ec:	4353      	muls	r3, r2
 800c8ee:	4461      	add	r1, ip
 800c8f0:	0c0a      	lsrs	r2, r1, #16
 800c8f2:	189b      	adds	r3, r3, r2
 800c8f4:	0c1a      	lsrs	r2, r3, #16
 800c8f6:	9305      	str	r3, [sp, #20]
 800c8f8:	6803      	ldr	r3, [r0, #0]
 800c8fa:	4694      	mov	ip, r2
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	9b04      	ldr	r3, [sp, #16]
 800c900:	b289      	uxth	r1, r1
 800c902:	18d2      	adds	r2, r2, r3
 800c904:	6803      	ldr	r3, [r0, #0]
 800c906:	1a52      	subs	r2, r2, r1
 800c908:	0c19      	lsrs	r1, r3, #16
 800c90a:	466b      	mov	r3, sp
 800c90c:	8a9b      	ldrh	r3, [r3, #20]
 800c90e:	1acb      	subs	r3, r1, r3
 800c910:	1411      	asrs	r1, r2, #16
 800c912:	185b      	adds	r3, r3, r1
 800c914:	1419      	asrs	r1, r3, #16
 800c916:	b292      	uxth	r2, r2
 800c918:	041b      	lsls	r3, r3, #16
 800c91a:	431a      	orrs	r2, r3
 800c91c:	9b03      	ldr	r3, [sp, #12]
 800c91e:	9104      	str	r1, [sp, #16]
 800c920:	c004      	stmia	r0!, {r2}
 800c922:	42bb      	cmp	r3, r7
 800c924:	d2dd      	bcs.n	800c8e2 <quorem+0x4e>
 800c926:	6823      	ldr	r3, [r4, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d02e      	beq.n	800c98a <quorem+0xf6>
 800c92c:	0030      	movs	r0, r6
 800c92e:	9902      	ldr	r1, [sp, #8]
 800c930:	f001 f922 	bl	800db78 <__mcmp>
 800c934:	2800      	cmp	r0, #0
 800c936:	db21      	blt.n	800c97c <quorem+0xe8>
 800c938:	0030      	movs	r0, r6
 800c93a:	2400      	movs	r4, #0
 800c93c:	9b00      	ldr	r3, [sp, #0]
 800c93e:	9902      	ldr	r1, [sp, #8]
 800c940:	3301      	adds	r3, #1
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	3014      	adds	r0, #20
 800c946:	3114      	adds	r1, #20
 800c948:	6802      	ldr	r2, [r0, #0]
 800c94a:	c908      	ldmia	r1!, {r3}
 800c94c:	b292      	uxth	r2, r2
 800c94e:	1914      	adds	r4, r2, r4
 800c950:	b29a      	uxth	r2, r3
 800c952:	1aa2      	subs	r2, r4, r2
 800c954:	6804      	ldr	r4, [r0, #0]
 800c956:	0c1b      	lsrs	r3, r3, #16
 800c958:	0c24      	lsrs	r4, r4, #16
 800c95a:	1ae3      	subs	r3, r4, r3
 800c95c:	1414      	asrs	r4, r2, #16
 800c95e:	191b      	adds	r3, r3, r4
 800c960:	141c      	asrs	r4, r3, #16
 800c962:	b292      	uxth	r2, r2
 800c964:	041b      	lsls	r3, r3, #16
 800c966:	4313      	orrs	r3, r2
 800c968:	c008      	stmia	r0!, {r3}
 800c96a:	9b03      	ldr	r3, [sp, #12]
 800c96c:	428b      	cmp	r3, r1
 800c96e:	d2eb      	bcs.n	800c948 <quorem+0xb4>
 800c970:	9a01      	ldr	r2, [sp, #4]
 800c972:	00ab      	lsls	r3, r5, #2
 800c974:	18d3      	adds	r3, r2, r3
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	2a00      	cmp	r2, #0
 800c97a:	d010      	beq.n	800c99e <quorem+0x10a>
 800c97c:	9800      	ldr	r0, [sp, #0]
 800c97e:	b007      	add	sp, #28
 800c980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d104      	bne.n	800c992 <quorem+0xfe>
 800c988:	3d01      	subs	r5, #1
 800c98a:	9b01      	ldr	r3, [sp, #4]
 800c98c:	3c04      	subs	r4, #4
 800c98e:	42a3      	cmp	r3, r4
 800c990:	d3f7      	bcc.n	800c982 <quorem+0xee>
 800c992:	6135      	str	r5, [r6, #16]
 800c994:	e7ca      	b.n	800c92c <quorem+0x98>
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	2a00      	cmp	r2, #0
 800c99a:	d104      	bne.n	800c9a6 <quorem+0x112>
 800c99c:	3d01      	subs	r5, #1
 800c99e:	9a01      	ldr	r2, [sp, #4]
 800c9a0:	3b04      	subs	r3, #4
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d3f7      	bcc.n	800c996 <quorem+0x102>
 800c9a6:	6135      	str	r5, [r6, #16]
 800c9a8:	e7e8      	b.n	800c97c <quorem+0xe8>
	...

0800c9ac <_dtoa_r>:
 800c9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ae:	b09d      	sub	sp, #116	; 0x74
 800c9b0:	9202      	str	r2, [sp, #8]
 800c9b2:	9303      	str	r3, [sp, #12]
 800c9b4:	9b02      	ldr	r3, [sp, #8]
 800c9b6:	9c03      	ldr	r4, [sp, #12]
 800c9b8:	930a      	str	r3, [sp, #40]	; 0x28
 800c9ba:	940b      	str	r4, [sp, #44]	; 0x2c
 800c9bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c9be:	0007      	movs	r7, r0
 800c9c0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800c9c2:	2c00      	cmp	r4, #0
 800c9c4:	d10e      	bne.n	800c9e4 <_dtoa_r+0x38>
 800c9c6:	2010      	movs	r0, #16
 800c9c8:	f7ff f9d6 	bl	800bd78 <malloc>
 800c9cc:	1e02      	subs	r2, r0, #0
 800c9ce:	6278      	str	r0, [r7, #36]	; 0x24
 800c9d0:	d104      	bne.n	800c9dc <_dtoa_r+0x30>
 800c9d2:	21ea      	movs	r1, #234	; 0xea
 800c9d4:	4bc0      	ldr	r3, [pc, #768]	; (800ccd8 <_dtoa_r+0x32c>)
 800c9d6:	48c1      	ldr	r0, [pc, #772]	; (800ccdc <_dtoa_r+0x330>)
 800c9d8:	f7ff ff3e 	bl	800c858 <__assert_func>
 800c9dc:	6044      	str	r4, [r0, #4]
 800c9de:	6084      	str	r4, [r0, #8]
 800c9e0:	6004      	str	r4, [r0, #0]
 800c9e2:	60c4      	str	r4, [r0, #12]
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	6819      	ldr	r1, [r3, #0]
 800c9e8:	2900      	cmp	r1, #0
 800c9ea:	d00a      	beq.n	800ca02 <_dtoa_r+0x56>
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	4093      	lsls	r3, r2
 800c9f2:	604a      	str	r2, [r1, #4]
 800c9f4:	608b      	str	r3, [r1, #8]
 800c9f6:	0038      	movs	r0, r7
 800c9f8:	f000 fe7c 	bl	800d6f4 <_Bfree>
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca00:	601a      	str	r2, [r3, #0]
 800ca02:	9b03      	ldr	r3, [sp, #12]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	da21      	bge.n	800ca4c <_dtoa_r+0xa0>
 800ca08:	2301      	movs	r3, #1
 800ca0a:	602b      	str	r3, [r5, #0]
 800ca0c:	9b03      	ldr	r3, [sp, #12]
 800ca0e:	005b      	lsls	r3, r3, #1
 800ca10:	085b      	lsrs	r3, r3, #1
 800ca12:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca14:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ca16:	4bb2      	ldr	r3, [pc, #712]	; (800cce0 <_dtoa_r+0x334>)
 800ca18:	002a      	movs	r2, r5
 800ca1a:	9318      	str	r3, [sp, #96]	; 0x60
 800ca1c:	401a      	ands	r2, r3
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d117      	bne.n	800ca52 <_dtoa_r+0xa6>
 800ca22:	4bb0      	ldr	r3, [pc, #704]	; (800cce4 <_dtoa_r+0x338>)
 800ca24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ca26:	0328      	lsls	r0, r5, #12
 800ca28:	6013      	str	r3, [r2, #0]
 800ca2a:	9b02      	ldr	r3, [sp, #8]
 800ca2c:	0b00      	lsrs	r0, r0, #12
 800ca2e:	4318      	orrs	r0, r3
 800ca30:	d101      	bne.n	800ca36 <_dtoa_r+0x8a>
 800ca32:	f000 fdc3 	bl	800d5bc <_dtoa_r+0xc10>
 800ca36:	48ac      	ldr	r0, [pc, #688]	; (800cce8 <_dtoa_r+0x33c>)
 800ca38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ca3a:	9005      	str	r0, [sp, #20]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d002      	beq.n	800ca46 <_dtoa_r+0x9a>
 800ca40:	4baa      	ldr	r3, [pc, #680]	; (800ccec <_dtoa_r+0x340>)
 800ca42:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	9805      	ldr	r0, [sp, #20]
 800ca48:	b01d      	add	sp, #116	; 0x74
 800ca4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	602b      	str	r3, [r5, #0]
 800ca50:	e7e0      	b.n	800ca14 <_dtoa_r+0x68>
 800ca52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ca56:	9312      	str	r3, [sp, #72]	; 0x48
 800ca58:	9413      	str	r4, [sp, #76]	; 0x4c
 800ca5a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ca5c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ca5e:	2200      	movs	r2, #0
 800ca60:	2300      	movs	r3, #0
 800ca62:	f7f3 fcf1 	bl	8000448 <__aeabi_dcmpeq>
 800ca66:	1e04      	subs	r4, r0, #0
 800ca68:	d00b      	beq.n	800ca82 <_dtoa_r+0xd6>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ca6e:	6013      	str	r3, [r2, #0]
 800ca70:	4b9f      	ldr	r3, [pc, #636]	; (800ccf0 <_dtoa_r+0x344>)
 800ca72:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ca74:	9305      	str	r3, [sp, #20]
 800ca76:	2a00      	cmp	r2, #0
 800ca78:	d0e5      	beq.n	800ca46 <_dtoa_r+0x9a>
 800ca7a:	4a9e      	ldr	r2, [pc, #632]	; (800ccf4 <_dtoa_r+0x348>)
 800ca7c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ca7e:	600a      	str	r2, [r1, #0]
 800ca80:	e7e1      	b.n	800ca46 <_dtoa_r+0x9a>
 800ca82:	ab1a      	add	r3, sp, #104	; 0x68
 800ca84:	9301      	str	r3, [sp, #4]
 800ca86:	ab1b      	add	r3, sp, #108	; 0x6c
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	0038      	movs	r0, r7
 800ca8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca90:	f001 f926 	bl	800dce0 <__d2b>
 800ca94:	006e      	lsls	r6, r5, #1
 800ca96:	9004      	str	r0, [sp, #16]
 800ca98:	0d76      	lsrs	r6, r6, #21
 800ca9a:	d100      	bne.n	800ca9e <_dtoa_r+0xf2>
 800ca9c:	e07c      	b.n	800cb98 <_dtoa_r+0x1ec>
 800ca9e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800caa0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800caa2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800caa4:	4a94      	ldr	r2, [pc, #592]	; (800ccf8 <_dtoa_r+0x34c>)
 800caa6:	031b      	lsls	r3, r3, #12
 800caa8:	0b1b      	lsrs	r3, r3, #12
 800caaa:	431a      	orrs	r2, r3
 800caac:	0011      	movs	r1, r2
 800caae:	4b93      	ldr	r3, [pc, #588]	; (800ccfc <_dtoa_r+0x350>)
 800cab0:	9416      	str	r4, [sp, #88]	; 0x58
 800cab2:	18f6      	adds	r6, r6, r3
 800cab4:	2200      	movs	r2, #0
 800cab6:	4b92      	ldr	r3, [pc, #584]	; (800cd00 <_dtoa_r+0x354>)
 800cab8:	f7f4 ffbc 	bl	8001a34 <__aeabi_dsub>
 800cabc:	4a91      	ldr	r2, [pc, #580]	; (800cd04 <_dtoa_r+0x358>)
 800cabe:	4b92      	ldr	r3, [pc, #584]	; (800cd08 <_dtoa_r+0x35c>)
 800cac0:	f7f4 fd4c 	bl	800155c <__aeabi_dmul>
 800cac4:	4a91      	ldr	r2, [pc, #580]	; (800cd0c <_dtoa_r+0x360>)
 800cac6:	4b92      	ldr	r3, [pc, #584]	; (800cd10 <_dtoa_r+0x364>)
 800cac8:	f7f3 fdd8 	bl	800067c <__aeabi_dadd>
 800cacc:	0004      	movs	r4, r0
 800cace:	0030      	movs	r0, r6
 800cad0:	000d      	movs	r5, r1
 800cad2:	f7f5 fb95 	bl	8002200 <__aeabi_i2d>
 800cad6:	4a8f      	ldr	r2, [pc, #572]	; (800cd14 <_dtoa_r+0x368>)
 800cad8:	4b8f      	ldr	r3, [pc, #572]	; (800cd18 <_dtoa_r+0x36c>)
 800cada:	f7f4 fd3f 	bl	800155c <__aeabi_dmul>
 800cade:	0002      	movs	r2, r0
 800cae0:	000b      	movs	r3, r1
 800cae2:	0020      	movs	r0, r4
 800cae4:	0029      	movs	r1, r5
 800cae6:	f7f3 fdc9 	bl	800067c <__aeabi_dadd>
 800caea:	0004      	movs	r4, r0
 800caec:	000d      	movs	r5, r1
 800caee:	f7f5 fb51 	bl	8002194 <__aeabi_d2iz>
 800caf2:	2200      	movs	r2, #0
 800caf4:	9002      	str	r0, [sp, #8]
 800caf6:	2300      	movs	r3, #0
 800caf8:	0020      	movs	r0, r4
 800cafa:	0029      	movs	r1, r5
 800cafc:	f7f3 fcaa 	bl	8000454 <__aeabi_dcmplt>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d00b      	beq.n	800cb1c <_dtoa_r+0x170>
 800cb04:	9802      	ldr	r0, [sp, #8]
 800cb06:	f7f5 fb7b 	bl	8002200 <__aeabi_i2d>
 800cb0a:	002b      	movs	r3, r5
 800cb0c:	0022      	movs	r2, r4
 800cb0e:	f7f3 fc9b 	bl	8000448 <__aeabi_dcmpeq>
 800cb12:	4243      	negs	r3, r0
 800cb14:	4158      	adcs	r0, r3
 800cb16:	9b02      	ldr	r3, [sp, #8]
 800cb18:	1a1b      	subs	r3, r3, r0
 800cb1a:	9302      	str	r3, [sp, #8]
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	9315      	str	r3, [sp, #84]	; 0x54
 800cb20:	9b02      	ldr	r3, [sp, #8]
 800cb22:	2b16      	cmp	r3, #22
 800cb24:	d80f      	bhi.n	800cb46 <_dtoa_r+0x19a>
 800cb26:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cb28:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cb2a:	00da      	lsls	r2, r3, #3
 800cb2c:	4b7b      	ldr	r3, [pc, #492]	; (800cd1c <_dtoa_r+0x370>)
 800cb2e:	189b      	adds	r3, r3, r2
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	f7f3 fc8e 	bl	8000454 <__aeabi_dcmplt>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d049      	beq.n	800cbd0 <_dtoa_r+0x224>
 800cb3c:	9b02      	ldr	r3, [sp, #8]
 800cb3e:	3b01      	subs	r3, #1
 800cb40:	9302      	str	r3, [sp, #8]
 800cb42:	2300      	movs	r3, #0
 800cb44:	9315      	str	r3, [sp, #84]	; 0x54
 800cb46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cb48:	1b9e      	subs	r6, r3, r6
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	9308      	str	r3, [sp, #32]
 800cb4e:	0033      	movs	r3, r6
 800cb50:	3b01      	subs	r3, #1
 800cb52:	930d      	str	r3, [sp, #52]	; 0x34
 800cb54:	d504      	bpl.n	800cb60 <_dtoa_r+0x1b4>
 800cb56:	2301      	movs	r3, #1
 800cb58:	1b9b      	subs	r3, r3, r6
 800cb5a:	9308      	str	r3, [sp, #32]
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	930d      	str	r3, [sp, #52]	; 0x34
 800cb60:	9b02      	ldr	r3, [sp, #8]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	db36      	blt.n	800cbd4 <_dtoa_r+0x228>
 800cb66:	9a02      	ldr	r2, [sp, #8]
 800cb68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb6a:	4694      	mov	ip, r2
 800cb6c:	4463      	add	r3, ip
 800cb6e:	930d      	str	r3, [sp, #52]	; 0x34
 800cb70:	2300      	movs	r3, #0
 800cb72:	9214      	str	r2, [sp, #80]	; 0x50
 800cb74:	930e      	str	r3, [sp, #56]	; 0x38
 800cb76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb78:	2401      	movs	r4, #1
 800cb7a:	2b09      	cmp	r3, #9
 800cb7c:	d862      	bhi.n	800cc44 <_dtoa_r+0x298>
 800cb7e:	2b05      	cmp	r3, #5
 800cb80:	dd02      	ble.n	800cb88 <_dtoa_r+0x1dc>
 800cb82:	2400      	movs	r4, #0
 800cb84:	3b04      	subs	r3, #4
 800cb86:	9322      	str	r3, [sp, #136]	; 0x88
 800cb88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb8a:	1e98      	subs	r0, r3, #2
 800cb8c:	2803      	cmp	r0, #3
 800cb8e:	d862      	bhi.n	800cc56 <_dtoa_r+0x2aa>
 800cb90:	f7f3 fac0 	bl	8000114 <__gnu_thumb1_case_uqi>
 800cb94:	56343629 	.word	0x56343629
 800cb98:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cb9a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cb9c:	189e      	adds	r6, r3, r2
 800cb9e:	4b60      	ldr	r3, [pc, #384]	; (800cd20 <_dtoa_r+0x374>)
 800cba0:	18f2      	adds	r2, r6, r3
 800cba2:	2a20      	cmp	r2, #32
 800cba4:	dd0f      	ble.n	800cbc6 <_dtoa_r+0x21a>
 800cba6:	2340      	movs	r3, #64	; 0x40
 800cba8:	1a9b      	subs	r3, r3, r2
 800cbaa:	409d      	lsls	r5, r3
 800cbac:	4b5d      	ldr	r3, [pc, #372]	; (800cd24 <_dtoa_r+0x378>)
 800cbae:	9802      	ldr	r0, [sp, #8]
 800cbb0:	18f3      	adds	r3, r6, r3
 800cbb2:	40d8      	lsrs	r0, r3
 800cbb4:	4328      	orrs	r0, r5
 800cbb6:	f7f5 fb53 	bl	8002260 <__aeabi_ui2d>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	4c5a      	ldr	r4, [pc, #360]	; (800cd28 <_dtoa_r+0x37c>)
 800cbbe:	3e01      	subs	r6, #1
 800cbc0:	1909      	adds	r1, r1, r4
 800cbc2:	9316      	str	r3, [sp, #88]	; 0x58
 800cbc4:	e776      	b.n	800cab4 <_dtoa_r+0x108>
 800cbc6:	2320      	movs	r3, #32
 800cbc8:	9802      	ldr	r0, [sp, #8]
 800cbca:	1a9b      	subs	r3, r3, r2
 800cbcc:	4098      	lsls	r0, r3
 800cbce:	e7f2      	b.n	800cbb6 <_dtoa_r+0x20a>
 800cbd0:	9015      	str	r0, [sp, #84]	; 0x54
 800cbd2:	e7b8      	b.n	800cb46 <_dtoa_r+0x19a>
 800cbd4:	9b08      	ldr	r3, [sp, #32]
 800cbd6:	9a02      	ldr	r2, [sp, #8]
 800cbd8:	1a9b      	subs	r3, r3, r2
 800cbda:	9308      	str	r3, [sp, #32]
 800cbdc:	4253      	negs	r3, r2
 800cbde:	930e      	str	r3, [sp, #56]	; 0x38
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	9314      	str	r3, [sp, #80]	; 0x50
 800cbe4:	e7c7      	b.n	800cb76 <_dtoa_r+0x1ca>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	dc36      	bgt.n	800cc5e <_dtoa_r+0x2b2>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	001a      	movs	r2, r3
 800cbf4:	930c      	str	r3, [sp, #48]	; 0x30
 800cbf6:	9306      	str	r3, [sp, #24]
 800cbf8:	9223      	str	r2, [sp, #140]	; 0x8c
 800cbfa:	e00d      	b.n	800cc18 <_dtoa_r+0x26c>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e7f3      	b.n	800cbe8 <_dtoa_r+0x23c>
 800cc00:	2300      	movs	r3, #0
 800cc02:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800cc04:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc06:	4694      	mov	ip, r2
 800cc08:	9b02      	ldr	r3, [sp, #8]
 800cc0a:	4463      	add	r3, ip
 800cc0c:	930c      	str	r3, [sp, #48]	; 0x30
 800cc0e:	3301      	adds	r3, #1
 800cc10:	9306      	str	r3, [sp, #24]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	dc00      	bgt.n	800cc18 <_dtoa_r+0x26c>
 800cc16:	2301      	movs	r3, #1
 800cc18:	2200      	movs	r2, #0
 800cc1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc1c:	6042      	str	r2, [r0, #4]
 800cc1e:	3204      	adds	r2, #4
 800cc20:	0015      	movs	r5, r2
 800cc22:	3514      	adds	r5, #20
 800cc24:	6841      	ldr	r1, [r0, #4]
 800cc26:	429d      	cmp	r5, r3
 800cc28:	d91d      	bls.n	800cc66 <_dtoa_r+0x2ba>
 800cc2a:	0038      	movs	r0, r7
 800cc2c:	f000 fd1e 	bl	800d66c <_Balloc>
 800cc30:	9005      	str	r0, [sp, #20]
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d11b      	bne.n	800cc6e <_dtoa_r+0x2c2>
 800cc36:	21d5      	movs	r1, #213	; 0xd5
 800cc38:	0002      	movs	r2, r0
 800cc3a:	4b3c      	ldr	r3, [pc, #240]	; (800cd2c <_dtoa_r+0x380>)
 800cc3c:	0049      	lsls	r1, r1, #1
 800cc3e:	e6ca      	b.n	800c9d6 <_dtoa_r+0x2a>
 800cc40:	2301      	movs	r3, #1
 800cc42:	e7de      	b.n	800cc02 <_dtoa_r+0x256>
 800cc44:	2300      	movs	r3, #0
 800cc46:	940f      	str	r4, [sp, #60]	; 0x3c
 800cc48:	9322      	str	r3, [sp, #136]	; 0x88
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	930c      	str	r3, [sp, #48]	; 0x30
 800cc4e:	9306      	str	r3, [sp, #24]
 800cc50:	2200      	movs	r2, #0
 800cc52:	3313      	adds	r3, #19
 800cc54:	e7d0      	b.n	800cbf8 <_dtoa_r+0x24c>
 800cc56:	2301      	movs	r3, #1
 800cc58:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc5a:	3b02      	subs	r3, #2
 800cc5c:	e7f6      	b.n	800cc4c <_dtoa_r+0x2a0>
 800cc5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cc60:	930c      	str	r3, [sp, #48]	; 0x30
 800cc62:	9306      	str	r3, [sp, #24]
 800cc64:	e7d8      	b.n	800cc18 <_dtoa_r+0x26c>
 800cc66:	3101      	adds	r1, #1
 800cc68:	6041      	str	r1, [r0, #4]
 800cc6a:	0052      	lsls	r2, r2, #1
 800cc6c:	e7d8      	b.n	800cc20 <_dtoa_r+0x274>
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc70:	9a05      	ldr	r2, [sp, #20]
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	9b06      	ldr	r3, [sp, #24]
 800cc76:	2b0e      	cmp	r3, #14
 800cc78:	d900      	bls.n	800cc7c <_dtoa_r+0x2d0>
 800cc7a:	e0eb      	b.n	800ce54 <_dtoa_r+0x4a8>
 800cc7c:	2c00      	cmp	r4, #0
 800cc7e:	d100      	bne.n	800cc82 <_dtoa_r+0x2d6>
 800cc80:	e0e8      	b.n	800ce54 <_dtoa_r+0x4a8>
 800cc82:	9b02      	ldr	r3, [sp, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	dd68      	ble.n	800cd5a <_dtoa_r+0x3ae>
 800cc88:	001a      	movs	r2, r3
 800cc8a:	210f      	movs	r1, #15
 800cc8c:	4b23      	ldr	r3, [pc, #140]	; (800cd1c <_dtoa_r+0x370>)
 800cc8e:	400a      	ands	r2, r1
 800cc90:	00d2      	lsls	r2, r2, #3
 800cc92:	189b      	adds	r3, r3, r2
 800cc94:	681d      	ldr	r5, [r3, #0]
 800cc96:	685e      	ldr	r6, [r3, #4]
 800cc98:	9b02      	ldr	r3, [sp, #8]
 800cc9a:	111c      	asrs	r4, r3, #4
 800cc9c:	2302      	movs	r3, #2
 800cc9e:	9310      	str	r3, [sp, #64]	; 0x40
 800cca0:	9b02      	ldr	r3, [sp, #8]
 800cca2:	05db      	lsls	r3, r3, #23
 800cca4:	d50b      	bpl.n	800ccbe <_dtoa_r+0x312>
 800cca6:	4b22      	ldr	r3, [pc, #136]	; (800cd30 <_dtoa_r+0x384>)
 800cca8:	400c      	ands	r4, r1
 800ccaa:	6a1a      	ldr	r2, [r3, #32]
 800ccac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccae:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ccb0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ccb2:	f7f4 f84d 	bl	8000d50 <__aeabi_ddiv>
 800ccb6:	2303      	movs	r3, #3
 800ccb8:	900a      	str	r0, [sp, #40]	; 0x28
 800ccba:	910b      	str	r1, [sp, #44]	; 0x2c
 800ccbc:	9310      	str	r3, [sp, #64]	; 0x40
 800ccbe:	4b1c      	ldr	r3, [pc, #112]	; (800cd30 <_dtoa_r+0x384>)
 800ccc0:	9307      	str	r3, [sp, #28]
 800ccc2:	2c00      	cmp	r4, #0
 800ccc4:	d136      	bne.n	800cd34 <_dtoa_r+0x388>
 800ccc6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ccc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccca:	002a      	movs	r2, r5
 800cccc:	0033      	movs	r3, r6
 800ccce:	f7f4 f83f 	bl	8000d50 <__aeabi_ddiv>
 800ccd2:	900a      	str	r0, [sp, #40]	; 0x28
 800ccd4:	910b      	str	r1, [sp, #44]	; 0x2c
 800ccd6:	e05c      	b.n	800cd92 <_dtoa_r+0x3e6>
 800ccd8:	0800ef9e 	.word	0x0800ef9e
 800ccdc:	0800efb5 	.word	0x0800efb5
 800cce0:	7ff00000 	.word	0x7ff00000
 800cce4:	0000270f 	.word	0x0000270f
 800cce8:	0800ef9a 	.word	0x0800ef9a
 800ccec:	0800ef9d 	.word	0x0800ef9d
 800ccf0:	0800ee30 	.word	0x0800ee30
 800ccf4:	0800ee31 	.word	0x0800ee31
 800ccf8:	3ff00000 	.word	0x3ff00000
 800ccfc:	fffffc01 	.word	0xfffffc01
 800cd00:	3ff80000 	.word	0x3ff80000
 800cd04:	636f4361 	.word	0x636f4361
 800cd08:	3fd287a7 	.word	0x3fd287a7
 800cd0c:	8b60c8b3 	.word	0x8b60c8b3
 800cd10:	3fc68a28 	.word	0x3fc68a28
 800cd14:	509f79fb 	.word	0x509f79fb
 800cd18:	3fd34413 	.word	0x3fd34413
 800cd1c:	0800f0b8 	.word	0x0800f0b8
 800cd20:	00000432 	.word	0x00000432
 800cd24:	00000412 	.word	0x00000412
 800cd28:	fe100000 	.word	0xfe100000
 800cd2c:	0800f014 	.word	0x0800f014
 800cd30:	0800f090 	.word	0x0800f090
 800cd34:	2301      	movs	r3, #1
 800cd36:	421c      	tst	r4, r3
 800cd38:	d00b      	beq.n	800cd52 <_dtoa_r+0x3a6>
 800cd3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd3c:	0028      	movs	r0, r5
 800cd3e:	3301      	adds	r3, #1
 800cd40:	9310      	str	r3, [sp, #64]	; 0x40
 800cd42:	9b07      	ldr	r3, [sp, #28]
 800cd44:	0031      	movs	r1, r6
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	f7f4 fc07 	bl	800155c <__aeabi_dmul>
 800cd4e:	0005      	movs	r5, r0
 800cd50:	000e      	movs	r6, r1
 800cd52:	9b07      	ldr	r3, [sp, #28]
 800cd54:	1064      	asrs	r4, r4, #1
 800cd56:	3308      	adds	r3, #8
 800cd58:	e7b2      	b.n	800ccc0 <_dtoa_r+0x314>
 800cd5a:	2302      	movs	r3, #2
 800cd5c:	9310      	str	r3, [sp, #64]	; 0x40
 800cd5e:	9b02      	ldr	r3, [sp, #8]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d016      	beq.n	800cd92 <_dtoa_r+0x3e6>
 800cd64:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cd66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cd68:	425c      	negs	r4, r3
 800cd6a:	230f      	movs	r3, #15
 800cd6c:	4ab5      	ldr	r2, [pc, #724]	; (800d044 <_dtoa_r+0x698>)
 800cd6e:	4023      	ands	r3, r4
 800cd70:	00db      	lsls	r3, r3, #3
 800cd72:	18d3      	adds	r3, r2, r3
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	f7f4 fbf0 	bl	800155c <__aeabi_dmul>
 800cd7c:	2601      	movs	r6, #1
 800cd7e:	2300      	movs	r3, #0
 800cd80:	900a      	str	r0, [sp, #40]	; 0x28
 800cd82:	910b      	str	r1, [sp, #44]	; 0x2c
 800cd84:	4db0      	ldr	r5, [pc, #704]	; (800d048 <_dtoa_r+0x69c>)
 800cd86:	1124      	asrs	r4, r4, #4
 800cd88:	2c00      	cmp	r4, #0
 800cd8a:	d000      	beq.n	800cd8e <_dtoa_r+0x3e2>
 800cd8c:	e094      	b.n	800ceb8 <_dtoa_r+0x50c>
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d19f      	bne.n	800ccd2 <_dtoa_r+0x326>
 800cd92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d100      	bne.n	800cd9a <_dtoa_r+0x3ee>
 800cd98:	e09b      	b.n	800ced2 <_dtoa_r+0x526>
 800cd9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cd9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cd9e:	2200      	movs	r2, #0
 800cda0:	0020      	movs	r0, r4
 800cda2:	0029      	movs	r1, r5
 800cda4:	4ba9      	ldr	r3, [pc, #676]	; (800d04c <_dtoa_r+0x6a0>)
 800cda6:	f7f3 fb55 	bl	8000454 <__aeabi_dcmplt>
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	d100      	bne.n	800cdb0 <_dtoa_r+0x404>
 800cdae:	e090      	b.n	800ced2 <_dtoa_r+0x526>
 800cdb0:	9b06      	ldr	r3, [sp, #24]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d100      	bne.n	800cdb8 <_dtoa_r+0x40c>
 800cdb6:	e08c      	b.n	800ced2 <_dtoa_r+0x526>
 800cdb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	dd46      	ble.n	800ce4c <_dtoa_r+0x4a0>
 800cdbe:	9b02      	ldr	r3, [sp, #8]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	0020      	movs	r0, r4
 800cdc4:	0029      	movs	r1, r5
 800cdc6:	1e5e      	subs	r6, r3, #1
 800cdc8:	4ba1      	ldr	r3, [pc, #644]	; (800d050 <_dtoa_r+0x6a4>)
 800cdca:	f7f4 fbc7 	bl	800155c <__aeabi_dmul>
 800cdce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdd0:	900a      	str	r0, [sp, #40]	; 0x28
 800cdd2:	910b      	str	r1, [sp, #44]	; 0x2c
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	9310      	str	r3, [sp, #64]	; 0x40
 800cdd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdda:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cddc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cdde:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cde0:	9307      	str	r3, [sp, #28]
 800cde2:	f7f5 fa0d 	bl	8002200 <__aeabi_i2d>
 800cde6:	0022      	movs	r2, r4
 800cde8:	002b      	movs	r3, r5
 800cdea:	f7f4 fbb7 	bl	800155c <__aeabi_dmul>
 800cdee:	2200      	movs	r2, #0
 800cdf0:	4b98      	ldr	r3, [pc, #608]	; (800d054 <_dtoa_r+0x6a8>)
 800cdf2:	f7f3 fc43 	bl	800067c <__aeabi_dadd>
 800cdf6:	9010      	str	r0, [sp, #64]	; 0x40
 800cdf8:	9111      	str	r1, [sp, #68]	; 0x44
 800cdfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cdfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdfe:	920a      	str	r2, [sp, #40]	; 0x28
 800ce00:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce02:	4a95      	ldr	r2, [pc, #596]	; (800d058 <_dtoa_r+0x6ac>)
 800ce04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce06:	4694      	mov	ip, r2
 800ce08:	4463      	add	r3, ip
 800ce0a:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce0c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce0e:	9b07      	ldr	r3, [sp, #28]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d161      	bne.n	800ced8 <_dtoa_r+0x52c>
 800ce14:	2200      	movs	r2, #0
 800ce16:	0020      	movs	r0, r4
 800ce18:	0029      	movs	r1, r5
 800ce1a:	4b90      	ldr	r3, [pc, #576]	; (800d05c <_dtoa_r+0x6b0>)
 800ce1c:	f7f4 fe0a 	bl	8001a34 <__aeabi_dsub>
 800ce20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce24:	0004      	movs	r4, r0
 800ce26:	000d      	movs	r5, r1
 800ce28:	f7f3 fb28 	bl	800047c <__aeabi_dcmpgt>
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	d000      	beq.n	800ce32 <_dtoa_r+0x486>
 800ce30:	e2b5      	b.n	800d39e <_dtoa_r+0x9f2>
 800ce32:	488b      	ldr	r0, [pc, #556]	; (800d060 <_dtoa_r+0x6b4>)
 800ce34:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce36:	4684      	mov	ip, r0
 800ce38:	4461      	add	r1, ip
 800ce3a:	000b      	movs	r3, r1
 800ce3c:	0020      	movs	r0, r4
 800ce3e:	0029      	movs	r1, r5
 800ce40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce42:	f7f3 fb07 	bl	8000454 <__aeabi_dcmplt>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d000      	beq.n	800ce4c <_dtoa_r+0x4a0>
 800ce4a:	e2a5      	b.n	800d398 <_dtoa_r+0x9ec>
 800ce4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce4e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ce50:	930a      	str	r3, [sp, #40]	; 0x28
 800ce52:	940b      	str	r4, [sp, #44]	; 0x2c
 800ce54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	da00      	bge.n	800ce5c <_dtoa_r+0x4b0>
 800ce5a:	e171      	b.n	800d140 <_dtoa_r+0x794>
 800ce5c:	9a02      	ldr	r2, [sp, #8]
 800ce5e:	2a0e      	cmp	r2, #14
 800ce60:	dd00      	ble.n	800ce64 <_dtoa_r+0x4b8>
 800ce62:	e16d      	b.n	800d140 <_dtoa_r+0x794>
 800ce64:	4b77      	ldr	r3, [pc, #476]	; (800d044 <_dtoa_r+0x698>)
 800ce66:	00d2      	lsls	r2, r2, #3
 800ce68:	189b      	adds	r3, r3, r2
 800ce6a:	685c      	ldr	r4, [r3, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	9308      	str	r3, [sp, #32]
 800ce70:	9409      	str	r4, [sp, #36]	; 0x24
 800ce72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	db00      	blt.n	800ce7a <_dtoa_r+0x4ce>
 800ce78:	e0f6      	b.n	800d068 <_dtoa_r+0x6bc>
 800ce7a:	9b06      	ldr	r3, [sp, #24]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	dd00      	ble.n	800ce82 <_dtoa_r+0x4d6>
 800ce80:	e0f2      	b.n	800d068 <_dtoa_r+0x6bc>
 800ce82:	d000      	beq.n	800ce86 <_dtoa_r+0x4da>
 800ce84:	e288      	b.n	800d398 <_dtoa_r+0x9ec>
 800ce86:	9808      	ldr	r0, [sp, #32]
 800ce88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	4b73      	ldr	r3, [pc, #460]	; (800d05c <_dtoa_r+0x6b0>)
 800ce8e:	f7f4 fb65 	bl	800155c <__aeabi_dmul>
 800ce92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce96:	f7f3 fafb 	bl	8000490 <__aeabi_dcmpge>
 800ce9a:	9e06      	ldr	r6, [sp, #24]
 800ce9c:	0035      	movs	r5, r6
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	d000      	beq.n	800cea4 <_dtoa_r+0x4f8>
 800cea2:	e25f      	b.n	800d364 <_dtoa_r+0x9b8>
 800cea4:	9b05      	ldr	r3, [sp, #20]
 800cea6:	9a05      	ldr	r2, [sp, #20]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	9307      	str	r3, [sp, #28]
 800ceac:	2331      	movs	r3, #49	; 0x31
 800ceae:	7013      	strb	r3, [r2, #0]
 800ceb0:	9b02      	ldr	r3, [sp, #8]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	9302      	str	r3, [sp, #8]
 800ceb6:	e25a      	b.n	800d36e <_dtoa_r+0x9c2>
 800ceb8:	4234      	tst	r4, r6
 800ceba:	d007      	beq.n	800cecc <_dtoa_r+0x520>
 800cebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cebe:	3301      	adds	r3, #1
 800cec0:	9310      	str	r3, [sp, #64]	; 0x40
 800cec2:	682a      	ldr	r2, [r5, #0]
 800cec4:	686b      	ldr	r3, [r5, #4]
 800cec6:	f7f4 fb49 	bl	800155c <__aeabi_dmul>
 800ceca:	0033      	movs	r3, r6
 800cecc:	1064      	asrs	r4, r4, #1
 800cece:	3508      	adds	r5, #8
 800ced0:	e75a      	b.n	800cd88 <_dtoa_r+0x3dc>
 800ced2:	9e02      	ldr	r6, [sp, #8]
 800ced4:	9b06      	ldr	r3, [sp, #24]
 800ced6:	e780      	b.n	800cdda <_dtoa_r+0x42e>
 800ced8:	9b07      	ldr	r3, [sp, #28]
 800ceda:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cedc:	1e5a      	subs	r2, r3, #1
 800cede:	4b59      	ldr	r3, [pc, #356]	; (800d044 <_dtoa_r+0x698>)
 800cee0:	00d2      	lsls	r2, r2, #3
 800cee2:	189b      	adds	r3, r3, r2
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	2900      	cmp	r1, #0
 800ceea:	d051      	beq.n	800cf90 <_dtoa_r+0x5e4>
 800ceec:	2000      	movs	r0, #0
 800ceee:	495d      	ldr	r1, [pc, #372]	; (800d064 <_dtoa_r+0x6b8>)
 800cef0:	f7f3 ff2e 	bl	8000d50 <__aeabi_ddiv>
 800cef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cef8:	f7f4 fd9c 	bl	8001a34 <__aeabi_dsub>
 800cefc:	9a05      	ldr	r2, [sp, #20]
 800cefe:	9b05      	ldr	r3, [sp, #20]
 800cf00:	4694      	mov	ip, r2
 800cf02:	9310      	str	r3, [sp, #64]	; 0x40
 800cf04:	9b07      	ldr	r3, [sp, #28]
 800cf06:	900a      	str	r0, [sp, #40]	; 0x28
 800cf08:	910b      	str	r1, [sp, #44]	; 0x2c
 800cf0a:	4463      	add	r3, ip
 800cf0c:	9319      	str	r3, [sp, #100]	; 0x64
 800cf0e:	0029      	movs	r1, r5
 800cf10:	0020      	movs	r0, r4
 800cf12:	f7f5 f93f 	bl	8002194 <__aeabi_d2iz>
 800cf16:	9017      	str	r0, [sp, #92]	; 0x5c
 800cf18:	f7f5 f972 	bl	8002200 <__aeabi_i2d>
 800cf1c:	0002      	movs	r2, r0
 800cf1e:	000b      	movs	r3, r1
 800cf20:	0020      	movs	r0, r4
 800cf22:	0029      	movs	r1, r5
 800cf24:	f7f4 fd86 	bl	8001a34 <__aeabi_dsub>
 800cf28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	9307      	str	r3, [sp, #28]
 800cf30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf32:	0004      	movs	r4, r0
 800cf34:	3330      	adds	r3, #48	; 0x30
 800cf36:	7013      	strb	r3, [r2, #0]
 800cf38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf3c:	000d      	movs	r5, r1
 800cf3e:	f7f3 fa89 	bl	8000454 <__aeabi_dcmplt>
 800cf42:	2800      	cmp	r0, #0
 800cf44:	d175      	bne.n	800d032 <_dtoa_r+0x686>
 800cf46:	0022      	movs	r2, r4
 800cf48:	002b      	movs	r3, r5
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	493f      	ldr	r1, [pc, #252]	; (800d04c <_dtoa_r+0x6a0>)
 800cf4e:	f7f4 fd71 	bl	8001a34 <__aeabi_dsub>
 800cf52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf56:	f7f3 fa7d 	bl	8000454 <__aeabi_dcmplt>
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	d000      	beq.n	800cf60 <_dtoa_r+0x5b4>
 800cf5e:	e0d1      	b.n	800d104 <_dtoa_r+0x758>
 800cf60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf62:	9a07      	ldr	r2, [sp, #28]
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d100      	bne.n	800cf6a <_dtoa_r+0x5be>
 800cf68:	e770      	b.n	800ce4c <_dtoa_r+0x4a0>
 800cf6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf6e:	2200      	movs	r2, #0
 800cf70:	4b37      	ldr	r3, [pc, #220]	; (800d050 <_dtoa_r+0x6a4>)
 800cf72:	f7f4 faf3 	bl	800155c <__aeabi_dmul>
 800cf76:	4b36      	ldr	r3, [pc, #216]	; (800d050 <_dtoa_r+0x6a4>)
 800cf78:	900a      	str	r0, [sp, #40]	; 0x28
 800cf7a:	910b      	str	r1, [sp, #44]	; 0x2c
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	0020      	movs	r0, r4
 800cf80:	0029      	movs	r1, r5
 800cf82:	f7f4 faeb 	bl	800155c <__aeabi_dmul>
 800cf86:	9b07      	ldr	r3, [sp, #28]
 800cf88:	0004      	movs	r4, r0
 800cf8a:	000d      	movs	r5, r1
 800cf8c:	9310      	str	r3, [sp, #64]	; 0x40
 800cf8e:	e7be      	b.n	800cf0e <_dtoa_r+0x562>
 800cf90:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf94:	f7f4 fae2 	bl	800155c <__aeabi_dmul>
 800cf98:	9a05      	ldr	r2, [sp, #20]
 800cf9a:	9b05      	ldr	r3, [sp, #20]
 800cf9c:	4694      	mov	ip, r2
 800cf9e:	930a      	str	r3, [sp, #40]	; 0x28
 800cfa0:	9b07      	ldr	r3, [sp, #28]
 800cfa2:	9010      	str	r0, [sp, #64]	; 0x40
 800cfa4:	9111      	str	r1, [sp, #68]	; 0x44
 800cfa6:	4463      	add	r3, ip
 800cfa8:	9319      	str	r3, [sp, #100]	; 0x64
 800cfaa:	0029      	movs	r1, r5
 800cfac:	0020      	movs	r0, r4
 800cfae:	f7f5 f8f1 	bl	8002194 <__aeabi_d2iz>
 800cfb2:	9017      	str	r0, [sp, #92]	; 0x5c
 800cfb4:	f7f5 f924 	bl	8002200 <__aeabi_i2d>
 800cfb8:	0002      	movs	r2, r0
 800cfba:	000b      	movs	r3, r1
 800cfbc:	0020      	movs	r0, r4
 800cfbe:	0029      	movs	r1, r5
 800cfc0:	f7f4 fd38 	bl	8001a34 <__aeabi_dsub>
 800cfc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfc8:	3330      	adds	r3, #48	; 0x30
 800cfca:	7013      	strb	r3, [r2, #0]
 800cfcc:	0013      	movs	r3, r2
 800cfce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	0004      	movs	r4, r0
 800cfd4:	000d      	movs	r5, r1
 800cfd6:	930a      	str	r3, [sp, #40]	; 0x28
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d12c      	bne.n	800d036 <_dtoa_r+0x68a>
 800cfdc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cfde:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cfe0:	9a05      	ldr	r2, [sp, #20]
 800cfe2:	9b07      	ldr	r3, [sp, #28]
 800cfe4:	4694      	mov	ip, r2
 800cfe6:	4463      	add	r3, ip
 800cfe8:	2200      	movs	r2, #0
 800cfea:	9307      	str	r3, [sp, #28]
 800cfec:	4b1d      	ldr	r3, [pc, #116]	; (800d064 <_dtoa_r+0x6b8>)
 800cfee:	f7f3 fb45 	bl	800067c <__aeabi_dadd>
 800cff2:	0002      	movs	r2, r0
 800cff4:	000b      	movs	r3, r1
 800cff6:	0020      	movs	r0, r4
 800cff8:	0029      	movs	r1, r5
 800cffa:	f7f3 fa3f 	bl	800047c <__aeabi_dcmpgt>
 800cffe:	2800      	cmp	r0, #0
 800d000:	d000      	beq.n	800d004 <_dtoa_r+0x658>
 800d002:	e07f      	b.n	800d104 <_dtoa_r+0x758>
 800d004:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d008:	2000      	movs	r0, #0
 800d00a:	4916      	ldr	r1, [pc, #88]	; (800d064 <_dtoa_r+0x6b8>)
 800d00c:	f7f4 fd12 	bl	8001a34 <__aeabi_dsub>
 800d010:	0002      	movs	r2, r0
 800d012:	000b      	movs	r3, r1
 800d014:	0020      	movs	r0, r4
 800d016:	0029      	movs	r1, r5
 800d018:	f7f3 fa1c 	bl	8000454 <__aeabi_dcmplt>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d100      	bne.n	800d022 <_dtoa_r+0x676>
 800d020:	e714      	b.n	800ce4c <_dtoa_r+0x4a0>
 800d022:	9b07      	ldr	r3, [sp, #28]
 800d024:	001a      	movs	r2, r3
 800d026:	3a01      	subs	r2, #1
 800d028:	9207      	str	r2, [sp, #28]
 800d02a:	7812      	ldrb	r2, [r2, #0]
 800d02c:	2a30      	cmp	r2, #48	; 0x30
 800d02e:	d0f8      	beq.n	800d022 <_dtoa_r+0x676>
 800d030:	9307      	str	r3, [sp, #28]
 800d032:	9602      	str	r6, [sp, #8]
 800d034:	e054      	b.n	800d0e0 <_dtoa_r+0x734>
 800d036:	2200      	movs	r2, #0
 800d038:	4b05      	ldr	r3, [pc, #20]	; (800d050 <_dtoa_r+0x6a4>)
 800d03a:	f7f4 fa8f 	bl	800155c <__aeabi_dmul>
 800d03e:	0004      	movs	r4, r0
 800d040:	000d      	movs	r5, r1
 800d042:	e7b2      	b.n	800cfaa <_dtoa_r+0x5fe>
 800d044:	0800f0b8 	.word	0x0800f0b8
 800d048:	0800f090 	.word	0x0800f090
 800d04c:	3ff00000 	.word	0x3ff00000
 800d050:	40240000 	.word	0x40240000
 800d054:	401c0000 	.word	0x401c0000
 800d058:	fcc00000 	.word	0xfcc00000
 800d05c:	40140000 	.word	0x40140000
 800d060:	7cc00000 	.word	0x7cc00000
 800d064:	3fe00000 	.word	0x3fe00000
 800d068:	9b06      	ldr	r3, [sp, #24]
 800d06a:	9e05      	ldr	r6, [sp, #20]
 800d06c:	3b01      	subs	r3, #1
 800d06e:	199b      	adds	r3, r3, r6
 800d070:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d072:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d074:	930a      	str	r3, [sp, #40]	; 0x28
 800d076:	9a08      	ldr	r2, [sp, #32]
 800d078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d07a:	0020      	movs	r0, r4
 800d07c:	0029      	movs	r1, r5
 800d07e:	f7f3 fe67 	bl	8000d50 <__aeabi_ddiv>
 800d082:	f7f5 f887 	bl	8002194 <__aeabi_d2iz>
 800d086:	9006      	str	r0, [sp, #24]
 800d088:	f7f5 f8ba 	bl	8002200 <__aeabi_i2d>
 800d08c:	9a08      	ldr	r2, [sp, #32]
 800d08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d090:	f7f4 fa64 	bl	800155c <__aeabi_dmul>
 800d094:	0002      	movs	r2, r0
 800d096:	000b      	movs	r3, r1
 800d098:	0020      	movs	r0, r4
 800d09a:	0029      	movs	r1, r5
 800d09c:	f7f4 fcca 	bl	8001a34 <__aeabi_dsub>
 800d0a0:	0033      	movs	r3, r6
 800d0a2:	9a06      	ldr	r2, [sp, #24]
 800d0a4:	3601      	adds	r6, #1
 800d0a6:	3230      	adds	r2, #48	; 0x30
 800d0a8:	701a      	strb	r2, [r3, #0]
 800d0aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0ac:	9607      	str	r6, [sp, #28]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d139      	bne.n	800d126 <_dtoa_r+0x77a>
 800d0b2:	0002      	movs	r2, r0
 800d0b4:	000b      	movs	r3, r1
 800d0b6:	f7f3 fae1 	bl	800067c <__aeabi_dadd>
 800d0ba:	9a08      	ldr	r2, [sp, #32]
 800d0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0be:	0004      	movs	r4, r0
 800d0c0:	000d      	movs	r5, r1
 800d0c2:	f7f3 f9db 	bl	800047c <__aeabi_dcmpgt>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d11b      	bne.n	800d102 <_dtoa_r+0x756>
 800d0ca:	9a08      	ldr	r2, [sp, #32]
 800d0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ce:	0020      	movs	r0, r4
 800d0d0:	0029      	movs	r1, r5
 800d0d2:	f7f3 f9b9 	bl	8000448 <__aeabi_dcmpeq>
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d002      	beq.n	800d0e0 <_dtoa_r+0x734>
 800d0da:	9b06      	ldr	r3, [sp, #24]
 800d0dc:	07db      	lsls	r3, r3, #31
 800d0de:	d410      	bmi.n	800d102 <_dtoa_r+0x756>
 800d0e0:	0038      	movs	r0, r7
 800d0e2:	9904      	ldr	r1, [sp, #16]
 800d0e4:	f000 fb06 	bl	800d6f4 <_Bfree>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	9a07      	ldr	r2, [sp, #28]
 800d0ec:	9802      	ldr	r0, [sp, #8]
 800d0ee:	7013      	strb	r3, [r2, #0]
 800d0f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	6018      	str	r0, [r3, #0]
 800d0f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d100      	bne.n	800d0fe <_dtoa_r+0x752>
 800d0fc:	e4a3      	b.n	800ca46 <_dtoa_r+0x9a>
 800d0fe:	601a      	str	r2, [r3, #0]
 800d100:	e4a1      	b.n	800ca46 <_dtoa_r+0x9a>
 800d102:	9e02      	ldr	r6, [sp, #8]
 800d104:	9b07      	ldr	r3, [sp, #28]
 800d106:	9307      	str	r3, [sp, #28]
 800d108:	3b01      	subs	r3, #1
 800d10a:	781a      	ldrb	r2, [r3, #0]
 800d10c:	2a39      	cmp	r2, #57	; 0x39
 800d10e:	d106      	bne.n	800d11e <_dtoa_r+0x772>
 800d110:	9a05      	ldr	r2, [sp, #20]
 800d112:	429a      	cmp	r2, r3
 800d114:	d1f7      	bne.n	800d106 <_dtoa_r+0x75a>
 800d116:	2230      	movs	r2, #48	; 0x30
 800d118:	9905      	ldr	r1, [sp, #20]
 800d11a:	3601      	adds	r6, #1
 800d11c:	700a      	strb	r2, [r1, #0]
 800d11e:	781a      	ldrb	r2, [r3, #0]
 800d120:	3201      	adds	r2, #1
 800d122:	701a      	strb	r2, [r3, #0]
 800d124:	e785      	b.n	800d032 <_dtoa_r+0x686>
 800d126:	2200      	movs	r2, #0
 800d128:	4bad      	ldr	r3, [pc, #692]	; (800d3e0 <_dtoa_r+0xa34>)
 800d12a:	f7f4 fa17 	bl	800155c <__aeabi_dmul>
 800d12e:	2200      	movs	r2, #0
 800d130:	2300      	movs	r3, #0
 800d132:	0004      	movs	r4, r0
 800d134:	000d      	movs	r5, r1
 800d136:	f7f3 f987 	bl	8000448 <__aeabi_dcmpeq>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d09b      	beq.n	800d076 <_dtoa_r+0x6ca>
 800d13e:	e7cf      	b.n	800d0e0 <_dtoa_r+0x734>
 800d140:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d142:	2a00      	cmp	r2, #0
 800d144:	d100      	bne.n	800d148 <_dtoa_r+0x79c>
 800d146:	e082      	b.n	800d24e <_dtoa_r+0x8a2>
 800d148:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d14a:	2a01      	cmp	r2, #1
 800d14c:	dc66      	bgt.n	800d21c <_dtoa_r+0x870>
 800d14e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d150:	2a00      	cmp	r2, #0
 800d152:	d05f      	beq.n	800d214 <_dtoa_r+0x868>
 800d154:	4aa3      	ldr	r2, [pc, #652]	; (800d3e4 <_dtoa_r+0xa38>)
 800d156:	189b      	adds	r3, r3, r2
 800d158:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d15a:	9c08      	ldr	r4, [sp, #32]
 800d15c:	9a08      	ldr	r2, [sp, #32]
 800d15e:	2101      	movs	r1, #1
 800d160:	18d2      	adds	r2, r2, r3
 800d162:	9208      	str	r2, [sp, #32]
 800d164:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d166:	0038      	movs	r0, r7
 800d168:	18d3      	adds	r3, r2, r3
 800d16a:	930d      	str	r3, [sp, #52]	; 0x34
 800d16c:	f000 fb72 	bl	800d854 <__i2b>
 800d170:	0005      	movs	r5, r0
 800d172:	2c00      	cmp	r4, #0
 800d174:	dd0e      	ble.n	800d194 <_dtoa_r+0x7e8>
 800d176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d178:	2b00      	cmp	r3, #0
 800d17a:	dd0b      	ble.n	800d194 <_dtoa_r+0x7e8>
 800d17c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d17e:	0023      	movs	r3, r4
 800d180:	4294      	cmp	r4, r2
 800d182:	dd00      	ble.n	800d186 <_dtoa_r+0x7da>
 800d184:	0013      	movs	r3, r2
 800d186:	9a08      	ldr	r2, [sp, #32]
 800d188:	1ae4      	subs	r4, r4, r3
 800d18a:	1ad2      	subs	r2, r2, r3
 800d18c:	9208      	str	r2, [sp, #32]
 800d18e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	930d      	str	r3, [sp, #52]	; 0x34
 800d194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d196:	2b00      	cmp	r3, #0
 800d198:	d01f      	beq.n	800d1da <_dtoa_r+0x82e>
 800d19a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d05a      	beq.n	800d256 <_dtoa_r+0x8aa>
 800d1a0:	2e00      	cmp	r6, #0
 800d1a2:	dd11      	ble.n	800d1c8 <_dtoa_r+0x81c>
 800d1a4:	0029      	movs	r1, r5
 800d1a6:	0032      	movs	r2, r6
 800d1a8:	0038      	movs	r0, r7
 800d1aa:	f000 fc19 	bl	800d9e0 <__pow5mult>
 800d1ae:	9a04      	ldr	r2, [sp, #16]
 800d1b0:	0001      	movs	r1, r0
 800d1b2:	0005      	movs	r5, r0
 800d1b4:	0038      	movs	r0, r7
 800d1b6:	f000 fb63 	bl	800d880 <__multiply>
 800d1ba:	9904      	ldr	r1, [sp, #16]
 800d1bc:	9007      	str	r0, [sp, #28]
 800d1be:	0038      	movs	r0, r7
 800d1c0:	f000 fa98 	bl	800d6f4 <_Bfree>
 800d1c4:	9b07      	ldr	r3, [sp, #28]
 800d1c6:	9304      	str	r3, [sp, #16]
 800d1c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1ca:	1b9a      	subs	r2, r3, r6
 800d1cc:	42b3      	cmp	r3, r6
 800d1ce:	d004      	beq.n	800d1da <_dtoa_r+0x82e>
 800d1d0:	0038      	movs	r0, r7
 800d1d2:	9904      	ldr	r1, [sp, #16]
 800d1d4:	f000 fc04 	bl	800d9e0 <__pow5mult>
 800d1d8:	9004      	str	r0, [sp, #16]
 800d1da:	2101      	movs	r1, #1
 800d1dc:	0038      	movs	r0, r7
 800d1de:	f000 fb39 	bl	800d854 <__i2b>
 800d1e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1e4:	0006      	movs	r6, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	dd37      	ble.n	800d25a <_dtoa_r+0x8ae>
 800d1ea:	001a      	movs	r2, r3
 800d1ec:	0001      	movs	r1, r0
 800d1ee:	0038      	movs	r0, r7
 800d1f0:	f000 fbf6 	bl	800d9e0 <__pow5mult>
 800d1f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d1f6:	0006      	movs	r6, r0
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	dd33      	ble.n	800d264 <_dtoa_r+0x8b8>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	9307      	str	r3, [sp, #28]
 800d200:	6933      	ldr	r3, [r6, #16]
 800d202:	3303      	adds	r3, #3
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	18f3      	adds	r3, r6, r3
 800d208:	6858      	ldr	r0, [r3, #4]
 800d20a:	f000 fadb 	bl	800d7c4 <__hi0bits>
 800d20e:	2320      	movs	r3, #32
 800d210:	1a18      	subs	r0, r3, r0
 800d212:	e03f      	b.n	800d294 <_dtoa_r+0x8e8>
 800d214:	2336      	movs	r3, #54	; 0x36
 800d216:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d218:	1a9b      	subs	r3, r3, r2
 800d21a:	e79d      	b.n	800d158 <_dtoa_r+0x7ac>
 800d21c:	9b06      	ldr	r3, [sp, #24]
 800d21e:	1e5e      	subs	r6, r3, #1
 800d220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d222:	42b3      	cmp	r3, r6
 800d224:	db08      	blt.n	800d238 <_dtoa_r+0x88c>
 800d226:	1b9e      	subs	r6, r3, r6
 800d228:	9b06      	ldr	r3, [sp, #24]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	da0c      	bge.n	800d248 <_dtoa_r+0x89c>
 800d22e:	9b08      	ldr	r3, [sp, #32]
 800d230:	9a06      	ldr	r2, [sp, #24]
 800d232:	1a9c      	subs	r4, r3, r2
 800d234:	2300      	movs	r3, #0
 800d236:	e791      	b.n	800d15c <_dtoa_r+0x7b0>
 800d238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d23a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d23c:	1af3      	subs	r3, r6, r3
 800d23e:	18d3      	adds	r3, r2, r3
 800d240:	960e      	str	r6, [sp, #56]	; 0x38
 800d242:	9314      	str	r3, [sp, #80]	; 0x50
 800d244:	2600      	movs	r6, #0
 800d246:	e7ef      	b.n	800d228 <_dtoa_r+0x87c>
 800d248:	9c08      	ldr	r4, [sp, #32]
 800d24a:	9b06      	ldr	r3, [sp, #24]
 800d24c:	e786      	b.n	800d15c <_dtoa_r+0x7b0>
 800d24e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d250:	9c08      	ldr	r4, [sp, #32]
 800d252:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d254:	e78d      	b.n	800d172 <_dtoa_r+0x7c6>
 800d256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d258:	e7ba      	b.n	800d1d0 <_dtoa_r+0x824>
 800d25a:	2300      	movs	r3, #0
 800d25c:	9307      	str	r3, [sp, #28]
 800d25e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d260:	2b01      	cmp	r3, #1
 800d262:	dc13      	bgt.n	800d28c <_dtoa_r+0x8e0>
 800d264:	2300      	movs	r3, #0
 800d266:	9307      	str	r3, [sp, #28]
 800d268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d10e      	bne.n	800d28c <_dtoa_r+0x8e0>
 800d26e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d270:	031b      	lsls	r3, r3, #12
 800d272:	d10b      	bne.n	800d28c <_dtoa_r+0x8e0>
 800d274:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d276:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d278:	4213      	tst	r3, r2
 800d27a:	d007      	beq.n	800d28c <_dtoa_r+0x8e0>
 800d27c:	9b08      	ldr	r3, [sp, #32]
 800d27e:	3301      	adds	r3, #1
 800d280:	9308      	str	r3, [sp, #32]
 800d282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d284:	3301      	adds	r3, #1
 800d286:	930d      	str	r3, [sp, #52]	; 0x34
 800d288:	2301      	movs	r3, #1
 800d28a:	9307      	str	r3, [sp, #28]
 800d28c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d28e:	2001      	movs	r0, #1
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1b5      	bne.n	800d200 <_dtoa_r+0x854>
 800d294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d296:	221f      	movs	r2, #31
 800d298:	1818      	adds	r0, r3, r0
 800d29a:	0003      	movs	r3, r0
 800d29c:	4013      	ands	r3, r2
 800d29e:	4210      	tst	r0, r2
 800d2a0:	d046      	beq.n	800d330 <_dtoa_r+0x984>
 800d2a2:	3201      	adds	r2, #1
 800d2a4:	1ad2      	subs	r2, r2, r3
 800d2a6:	2a04      	cmp	r2, #4
 800d2a8:	dd3f      	ble.n	800d32a <_dtoa_r+0x97e>
 800d2aa:	221c      	movs	r2, #28
 800d2ac:	1ad3      	subs	r3, r2, r3
 800d2ae:	9a08      	ldr	r2, [sp, #32]
 800d2b0:	18e4      	adds	r4, r4, r3
 800d2b2:	18d2      	adds	r2, r2, r3
 800d2b4:	9208      	str	r2, [sp, #32]
 800d2b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2b8:	18d3      	adds	r3, r2, r3
 800d2ba:	930d      	str	r3, [sp, #52]	; 0x34
 800d2bc:	9b08      	ldr	r3, [sp, #32]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	dd05      	ble.n	800d2ce <_dtoa_r+0x922>
 800d2c2:	001a      	movs	r2, r3
 800d2c4:	0038      	movs	r0, r7
 800d2c6:	9904      	ldr	r1, [sp, #16]
 800d2c8:	f000 fbe6 	bl	800da98 <__lshift>
 800d2cc:	9004      	str	r0, [sp, #16]
 800d2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	dd05      	ble.n	800d2e0 <_dtoa_r+0x934>
 800d2d4:	0031      	movs	r1, r6
 800d2d6:	001a      	movs	r2, r3
 800d2d8:	0038      	movs	r0, r7
 800d2da:	f000 fbdd 	bl	800da98 <__lshift>
 800d2de:	0006      	movs	r6, r0
 800d2e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d026      	beq.n	800d334 <_dtoa_r+0x988>
 800d2e6:	0031      	movs	r1, r6
 800d2e8:	9804      	ldr	r0, [sp, #16]
 800d2ea:	f000 fc45 	bl	800db78 <__mcmp>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	da20      	bge.n	800d334 <_dtoa_r+0x988>
 800d2f2:	9b02      	ldr	r3, [sp, #8]
 800d2f4:	220a      	movs	r2, #10
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	9302      	str	r3, [sp, #8]
 800d2fa:	0038      	movs	r0, r7
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	9904      	ldr	r1, [sp, #16]
 800d300:	f000 fa1c 	bl	800d73c <__multadd>
 800d304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d306:	9004      	str	r0, [sp, #16]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d100      	bne.n	800d30e <_dtoa_r+0x962>
 800d30c:	e160      	b.n	800d5d0 <_dtoa_r+0xc24>
 800d30e:	2300      	movs	r3, #0
 800d310:	0029      	movs	r1, r5
 800d312:	220a      	movs	r2, #10
 800d314:	0038      	movs	r0, r7
 800d316:	f000 fa11 	bl	800d73c <__multadd>
 800d31a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d31c:	0005      	movs	r5, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	dc47      	bgt.n	800d3b2 <_dtoa_r+0xa06>
 800d322:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d324:	2b02      	cmp	r3, #2
 800d326:	dc0d      	bgt.n	800d344 <_dtoa_r+0x998>
 800d328:	e043      	b.n	800d3b2 <_dtoa_r+0xa06>
 800d32a:	2a04      	cmp	r2, #4
 800d32c:	d0c6      	beq.n	800d2bc <_dtoa_r+0x910>
 800d32e:	0013      	movs	r3, r2
 800d330:	331c      	adds	r3, #28
 800d332:	e7bc      	b.n	800d2ae <_dtoa_r+0x902>
 800d334:	9b06      	ldr	r3, [sp, #24]
 800d336:	2b00      	cmp	r3, #0
 800d338:	dc35      	bgt.n	800d3a6 <_dtoa_r+0x9fa>
 800d33a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	dd32      	ble.n	800d3a6 <_dtoa_r+0x9fa>
 800d340:	9b06      	ldr	r3, [sp, #24]
 800d342:	930c      	str	r3, [sp, #48]	; 0x30
 800d344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10c      	bne.n	800d364 <_dtoa_r+0x9b8>
 800d34a:	0031      	movs	r1, r6
 800d34c:	2205      	movs	r2, #5
 800d34e:	0038      	movs	r0, r7
 800d350:	f000 f9f4 	bl	800d73c <__multadd>
 800d354:	0006      	movs	r6, r0
 800d356:	0001      	movs	r1, r0
 800d358:	9804      	ldr	r0, [sp, #16]
 800d35a:	f000 fc0d 	bl	800db78 <__mcmp>
 800d35e:	2800      	cmp	r0, #0
 800d360:	dd00      	ble.n	800d364 <_dtoa_r+0x9b8>
 800d362:	e59f      	b.n	800cea4 <_dtoa_r+0x4f8>
 800d364:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d366:	43db      	mvns	r3, r3
 800d368:	9302      	str	r3, [sp, #8]
 800d36a:	9b05      	ldr	r3, [sp, #20]
 800d36c:	9307      	str	r3, [sp, #28]
 800d36e:	2400      	movs	r4, #0
 800d370:	0031      	movs	r1, r6
 800d372:	0038      	movs	r0, r7
 800d374:	f000 f9be 	bl	800d6f4 <_Bfree>
 800d378:	2d00      	cmp	r5, #0
 800d37a:	d100      	bne.n	800d37e <_dtoa_r+0x9d2>
 800d37c:	e6b0      	b.n	800d0e0 <_dtoa_r+0x734>
 800d37e:	2c00      	cmp	r4, #0
 800d380:	d005      	beq.n	800d38e <_dtoa_r+0x9e2>
 800d382:	42ac      	cmp	r4, r5
 800d384:	d003      	beq.n	800d38e <_dtoa_r+0x9e2>
 800d386:	0021      	movs	r1, r4
 800d388:	0038      	movs	r0, r7
 800d38a:	f000 f9b3 	bl	800d6f4 <_Bfree>
 800d38e:	0029      	movs	r1, r5
 800d390:	0038      	movs	r0, r7
 800d392:	f000 f9af 	bl	800d6f4 <_Bfree>
 800d396:	e6a3      	b.n	800d0e0 <_dtoa_r+0x734>
 800d398:	2600      	movs	r6, #0
 800d39a:	0035      	movs	r5, r6
 800d39c:	e7e2      	b.n	800d364 <_dtoa_r+0x9b8>
 800d39e:	9602      	str	r6, [sp, #8]
 800d3a0:	9e07      	ldr	r6, [sp, #28]
 800d3a2:	0035      	movs	r5, r6
 800d3a4:	e57e      	b.n	800cea4 <_dtoa_r+0x4f8>
 800d3a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d100      	bne.n	800d3ae <_dtoa_r+0xa02>
 800d3ac:	e0c8      	b.n	800d540 <_dtoa_r+0xb94>
 800d3ae:	9b06      	ldr	r3, [sp, #24]
 800d3b0:	930c      	str	r3, [sp, #48]	; 0x30
 800d3b2:	2c00      	cmp	r4, #0
 800d3b4:	dd05      	ble.n	800d3c2 <_dtoa_r+0xa16>
 800d3b6:	0029      	movs	r1, r5
 800d3b8:	0022      	movs	r2, r4
 800d3ba:	0038      	movs	r0, r7
 800d3bc:	f000 fb6c 	bl	800da98 <__lshift>
 800d3c0:	0005      	movs	r5, r0
 800d3c2:	9b07      	ldr	r3, [sp, #28]
 800d3c4:	0028      	movs	r0, r5
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d01f      	beq.n	800d40a <_dtoa_r+0xa5e>
 800d3ca:	0038      	movs	r0, r7
 800d3cc:	6869      	ldr	r1, [r5, #4]
 800d3ce:	f000 f94d 	bl	800d66c <_Balloc>
 800d3d2:	1e04      	subs	r4, r0, #0
 800d3d4:	d10c      	bne.n	800d3f0 <_dtoa_r+0xa44>
 800d3d6:	0002      	movs	r2, r0
 800d3d8:	4b03      	ldr	r3, [pc, #12]	; (800d3e8 <_dtoa_r+0xa3c>)
 800d3da:	4904      	ldr	r1, [pc, #16]	; (800d3ec <_dtoa_r+0xa40>)
 800d3dc:	f7ff fafb 	bl	800c9d6 <_dtoa_r+0x2a>
 800d3e0:	40240000 	.word	0x40240000
 800d3e4:	00000433 	.word	0x00000433
 800d3e8:	0800f014 	.word	0x0800f014
 800d3ec:	000002ea 	.word	0x000002ea
 800d3f0:	0029      	movs	r1, r5
 800d3f2:	692b      	ldr	r3, [r5, #16]
 800d3f4:	310c      	adds	r1, #12
 800d3f6:	1c9a      	adds	r2, r3, #2
 800d3f8:	0092      	lsls	r2, r2, #2
 800d3fa:	300c      	adds	r0, #12
 800d3fc:	f7fe fcc6 	bl	800bd8c <memcpy>
 800d400:	2201      	movs	r2, #1
 800d402:	0021      	movs	r1, r4
 800d404:	0038      	movs	r0, r7
 800d406:	f000 fb47 	bl	800da98 <__lshift>
 800d40a:	002c      	movs	r4, r5
 800d40c:	0005      	movs	r5, r0
 800d40e:	9b05      	ldr	r3, [sp, #20]
 800d410:	9308      	str	r3, [sp, #32]
 800d412:	0031      	movs	r1, r6
 800d414:	9804      	ldr	r0, [sp, #16]
 800d416:	f7ff fa3d 	bl	800c894 <quorem>
 800d41a:	0003      	movs	r3, r0
 800d41c:	0021      	movs	r1, r4
 800d41e:	3330      	adds	r3, #48	; 0x30
 800d420:	900e      	str	r0, [sp, #56]	; 0x38
 800d422:	9804      	ldr	r0, [sp, #16]
 800d424:	9306      	str	r3, [sp, #24]
 800d426:	f000 fba7 	bl	800db78 <__mcmp>
 800d42a:	002a      	movs	r2, r5
 800d42c:	900f      	str	r0, [sp, #60]	; 0x3c
 800d42e:	0031      	movs	r1, r6
 800d430:	0038      	movs	r0, r7
 800d432:	f000 fbbd 	bl	800dbb0 <__mdiff>
 800d436:	68c3      	ldr	r3, [r0, #12]
 800d438:	9007      	str	r0, [sp, #28]
 800d43a:	9310      	str	r3, [sp, #64]	; 0x40
 800d43c:	2301      	movs	r3, #1
 800d43e:	930d      	str	r3, [sp, #52]	; 0x34
 800d440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d442:	2b00      	cmp	r3, #0
 800d444:	d104      	bne.n	800d450 <_dtoa_r+0xaa4>
 800d446:	0001      	movs	r1, r0
 800d448:	9804      	ldr	r0, [sp, #16]
 800d44a:	f000 fb95 	bl	800db78 <__mcmp>
 800d44e:	900d      	str	r0, [sp, #52]	; 0x34
 800d450:	0038      	movs	r0, r7
 800d452:	9907      	ldr	r1, [sp, #28]
 800d454:	f000 f94e 	bl	800d6f4 <_Bfree>
 800d458:	2301      	movs	r3, #1
 800d45a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d45c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d45e:	4018      	ands	r0, r3
 800d460:	9b08      	ldr	r3, [sp, #32]
 800d462:	3301      	adds	r3, #1
 800d464:	9307      	str	r3, [sp, #28]
 800d466:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d468:	4313      	orrs	r3, r2
 800d46a:	4303      	orrs	r3, r0
 800d46c:	d10c      	bne.n	800d488 <_dtoa_r+0xadc>
 800d46e:	9b06      	ldr	r3, [sp, #24]
 800d470:	2b39      	cmp	r3, #57	; 0x39
 800d472:	d025      	beq.n	800d4c0 <_dtoa_r+0xb14>
 800d474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d476:	2b00      	cmp	r3, #0
 800d478:	dd02      	ble.n	800d480 <_dtoa_r+0xad4>
 800d47a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d47c:	3331      	adds	r3, #49	; 0x31
 800d47e:	9306      	str	r3, [sp, #24]
 800d480:	9b08      	ldr	r3, [sp, #32]
 800d482:	9a06      	ldr	r2, [sp, #24]
 800d484:	701a      	strb	r2, [r3, #0]
 800d486:	e773      	b.n	800d370 <_dtoa_r+0x9c4>
 800d488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	db03      	blt.n	800d496 <_dtoa_r+0xaea>
 800d48e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d490:	4313      	orrs	r3, r2
 800d492:	4303      	orrs	r3, r0
 800d494:	d11f      	bne.n	800d4d6 <_dtoa_r+0xb2a>
 800d496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d498:	2b00      	cmp	r3, #0
 800d49a:	ddf1      	ble.n	800d480 <_dtoa_r+0xad4>
 800d49c:	9904      	ldr	r1, [sp, #16]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	0038      	movs	r0, r7
 800d4a2:	f000 faf9 	bl	800da98 <__lshift>
 800d4a6:	0031      	movs	r1, r6
 800d4a8:	9004      	str	r0, [sp, #16]
 800d4aa:	f000 fb65 	bl	800db78 <__mcmp>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	dc03      	bgt.n	800d4ba <_dtoa_r+0xb0e>
 800d4b2:	d1e5      	bne.n	800d480 <_dtoa_r+0xad4>
 800d4b4:	9b06      	ldr	r3, [sp, #24]
 800d4b6:	07db      	lsls	r3, r3, #31
 800d4b8:	d5e2      	bpl.n	800d480 <_dtoa_r+0xad4>
 800d4ba:	9b06      	ldr	r3, [sp, #24]
 800d4bc:	2b39      	cmp	r3, #57	; 0x39
 800d4be:	d1dc      	bne.n	800d47a <_dtoa_r+0xace>
 800d4c0:	2339      	movs	r3, #57	; 0x39
 800d4c2:	9a08      	ldr	r2, [sp, #32]
 800d4c4:	7013      	strb	r3, [r2, #0]
 800d4c6:	9b07      	ldr	r3, [sp, #28]
 800d4c8:	9307      	str	r3, [sp, #28]
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	781a      	ldrb	r2, [r3, #0]
 800d4ce:	2a39      	cmp	r2, #57	; 0x39
 800d4d0:	d06c      	beq.n	800d5ac <_dtoa_r+0xc00>
 800d4d2:	3201      	adds	r2, #1
 800d4d4:	e7d6      	b.n	800d484 <_dtoa_r+0xad8>
 800d4d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	dd07      	ble.n	800d4ec <_dtoa_r+0xb40>
 800d4dc:	9b06      	ldr	r3, [sp, #24]
 800d4de:	2b39      	cmp	r3, #57	; 0x39
 800d4e0:	d0ee      	beq.n	800d4c0 <_dtoa_r+0xb14>
 800d4e2:	9b06      	ldr	r3, [sp, #24]
 800d4e4:	9a08      	ldr	r2, [sp, #32]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	7013      	strb	r3, [r2, #0]
 800d4ea:	e741      	b.n	800d370 <_dtoa_r+0x9c4>
 800d4ec:	9b08      	ldr	r3, [sp, #32]
 800d4ee:	9a06      	ldr	r2, [sp, #24]
 800d4f0:	701a      	strb	r2, [r3, #0]
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	9a05      	ldr	r2, [sp, #20]
 800d4f6:	1a9b      	subs	r3, r3, r2
 800d4f8:	9a08      	ldr	r2, [sp, #32]
 800d4fa:	189b      	adds	r3, r3, r2
 800d4fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d03e      	beq.n	800d580 <_dtoa_r+0xbd4>
 800d502:	2300      	movs	r3, #0
 800d504:	220a      	movs	r2, #10
 800d506:	9904      	ldr	r1, [sp, #16]
 800d508:	0038      	movs	r0, r7
 800d50a:	f000 f917 	bl	800d73c <__multadd>
 800d50e:	2300      	movs	r3, #0
 800d510:	9004      	str	r0, [sp, #16]
 800d512:	220a      	movs	r2, #10
 800d514:	0021      	movs	r1, r4
 800d516:	0038      	movs	r0, r7
 800d518:	42ac      	cmp	r4, r5
 800d51a:	d106      	bne.n	800d52a <_dtoa_r+0xb7e>
 800d51c:	f000 f90e 	bl	800d73c <__multadd>
 800d520:	0004      	movs	r4, r0
 800d522:	0005      	movs	r5, r0
 800d524:	9b07      	ldr	r3, [sp, #28]
 800d526:	9308      	str	r3, [sp, #32]
 800d528:	e773      	b.n	800d412 <_dtoa_r+0xa66>
 800d52a:	f000 f907 	bl	800d73c <__multadd>
 800d52e:	0029      	movs	r1, r5
 800d530:	0004      	movs	r4, r0
 800d532:	2300      	movs	r3, #0
 800d534:	220a      	movs	r2, #10
 800d536:	0038      	movs	r0, r7
 800d538:	f000 f900 	bl	800d73c <__multadd>
 800d53c:	0005      	movs	r5, r0
 800d53e:	e7f1      	b.n	800d524 <_dtoa_r+0xb78>
 800d540:	9b06      	ldr	r3, [sp, #24]
 800d542:	930c      	str	r3, [sp, #48]	; 0x30
 800d544:	2400      	movs	r4, #0
 800d546:	0031      	movs	r1, r6
 800d548:	9804      	ldr	r0, [sp, #16]
 800d54a:	f7ff f9a3 	bl	800c894 <quorem>
 800d54e:	9b05      	ldr	r3, [sp, #20]
 800d550:	3030      	adds	r0, #48	; 0x30
 800d552:	5518      	strb	r0, [r3, r4]
 800d554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d556:	3401      	adds	r4, #1
 800d558:	9006      	str	r0, [sp, #24]
 800d55a:	42a3      	cmp	r3, r4
 800d55c:	dd07      	ble.n	800d56e <_dtoa_r+0xbc2>
 800d55e:	2300      	movs	r3, #0
 800d560:	220a      	movs	r2, #10
 800d562:	0038      	movs	r0, r7
 800d564:	9904      	ldr	r1, [sp, #16]
 800d566:	f000 f8e9 	bl	800d73c <__multadd>
 800d56a:	9004      	str	r0, [sp, #16]
 800d56c:	e7eb      	b.n	800d546 <_dtoa_r+0xb9a>
 800d56e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d570:	2001      	movs	r0, #1
 800d572:	2b00      	cmp	r3, #0
 800d574:	dd00      	ble.n	800d578 <_dtoa_r+0xbcc>
 800d576:	0018      	movs	r0, r3
 800d578:	2400      	movs	r4, #0
 800d57a:	9b05      	ldr	r3, [sp, #20]
 800d57c:	181b      	adds	r3, r3, r0
 800d57e:	9307      	str	r3, [sp, #28]
 800d580:	9904      	ldr	r1, [sp, #16]
 800d582:	2201      	movs	r2, #1
 800d584:	0038      	movs	r0, r7
 800d586:	f000 fa87 	bl	800da98 <__lshift>
 800d58a:	0031      	movs	r1, r6
 800d58c:	9004      	str	r0, [sp, #16]
 800d58e:	f000 faf3 	bl	800db78 <__mcmp>
 800d592:	2800      	cmp	r0, #0
 800d594:	dc97      	bgt.n	800d4c6 <_dtoa_r+0xb1a>
 800d596:	d102      	bne.n	800d59e <_dtoa_r+0xbf2>
 800d598:	9b06      	ldr	r3, [sp, #24]
 800d59a:	07db      	lsls	r3, r3, #31
 800d59c:	d493      	bmi.n	800d4c6 <_dtoa_r+0xb1a>
 800d59e:	9b07      	ldr	r3, [sp, #28]
 800d5a0:	9307      	str	r3, [sp, #28]
 800d5a2:	3b01      	subs	r3, #1
 800d5a4:	781a      	ldrb	r2, [r3, #0]
 800d5a6:	2a30      	cmp	r2, #48	; 0x30
 800d5a8:	d0fa      	beq.n	800d5a0 <_dtoa_r+0xbf4>
 800d5aa:	e6e1      	b.n	800d370 <_dtoa_r+0x9c4>
 800d5ac:	9a05      	ldr	r2, [sp, #20]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d18a      	bne.n	800d4c8 <_dtoa_r+0xb1c>
 800d5b2:	9b02      	ldr	r3, [sp, #8]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	9302      	str	r3, [sp, #8]
 800d5b8:	2331      	movs	r3, #49	; 0x31
 800d5ba:	e795      	b.n	800d4e8 <_dtoa_r+0xb3c>
 800d5bc:	4b08      	ldr	r3, [pc, #32]	; (800d5e0 <_dtoa_r+0xc34>)
 800d5be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d5c0:	9305      	str	r3, [sp, #20]
 800d5c2:	4b08      	ldr	r3, [pc, #32]	; (800d5e4 <_dtoa_r+0xc38>)
 800d5c4:	2a00      	cmp	r2, #0
 800d5c6:	d001      	beq.n	800d5cc <_dtoa_r+0xc20>
 800d5c8:	f7ff fa3b 	bl	800ca42 <_dtoa_r+0x96>
 800d5cc:	f7ff fa3b 	bl	800ca46 <_dtoa_r+0x9a>
 800d5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	dcb6      	bgt.n	800d544 <_dtoa_r+0xb98>
 800d5d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d5d8:	2b02      	cmp	r3, #2
 800d5da:	dd00      	ble.n	800d5de <_dtoa_r+0xc32>
 800d5dc:	e6b2      	b.n	800d344 <_dtoa_r+0x998>
 800d5de:	e7b1      	b.n	800d544 <_dtoa_r+0xb98>
 800d5e0:	0800ef91 	.word	0x0800ef91
 800d5e4:	0800ef99 	.word	0x0800ef99

0800d5e8 <fiprintf>:
 800d5e8:	b40e      	push	{r1, r2, r3}
 800d5ea:	b503      	push	{r0, r1, lr}
 800d5ec:	0001      	movs	r1, r0
 800d5ee:	ab03      	add	r3, sp, #12
 800d5f0:	4804      	ldr	r0, [pc, #16]	; (800d604 <fiprintf+0x1c>)
 800d5f2:	cb04      	ldmia	r3!, {r2}
 800d5f4:	6800      	ldr	r0, [r0, #0]
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	f000 fd6e 	bl	800e0d8 <_vfiprintf_r>
 800d5fc:	b002      	add	sp, #8
 800d5fe:	bc08      	pop	{r3}
 800d600:	b003      	add	sp, #12
 800d602:	4718      	bx	r3
 800d604:	2000002c 	.word	0x2000002c

0800d608 <_localeconv_r>:
 800d608:	4800      	ldr	r0, [pc, #0]	; (800d60c <_localeconv_r+0x4>)
 800d60a:	4770      	bx	lr
 800d60c:	20000180 	.word	0x20000180

0800d610 <__ascii_mbtowc>:
 800d610:	b082      	sub	sp, #8
 800d612:	2900      	cmp	r1, #0
 800d614:	d100      	bne.n	800d618 <__ascii_mbtowc+0x8>
 800d616:	a901      	add	r1, sp, #4
 800d618:	1e10      	subs	r0, r2, #0
 800d61a:	d006      	beq.n	800d62a <__ascii_mbtowc+0x1a>
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d006      	beq.n	800d62e <__ascii_mbtowc+0x1e>
 800d620:	7813      	ldrb	r3, [r2, #0]
 800d622:	600b      	str	r3, [r1, #0]
 800d624:	7810      	ldrb	r0, [r2, #0]
 800d626:	1e43      	subs	r3, r0, #1
 800d628:	4198      	sbcs	r0, r3
 800d62a:	b002      	add	sp, #8
 800d62c:	4770      	bx	lr
 800d62e:	2002      	movs	r0, #2
 800d630:	4240      	negs	r0, r0
 800d632:	e7fa      	b.n	800d62a <__ascii_mbtowc+0x1a>

0800d634 <memchr>:
 800d634:	b2c9      	uxtb	r1, r1
 800d636:	1882      	adds	r2, r0, r2
 800d638:	4290      	cmp	r0, r2
 800d63a:	d101      	bne.n	800d640 <memchr+0xc>
 800d63c:	2000      	movs	r0, #0
 800d63e:	4770      	bx	lr
 800d640:	7803      	ldrb	r3, [r0, #0]
 800d642:	428b      	cmp	r3, r1
 800d644:	d0fb      	beq.n	800d63e <memchr+0xa>
 800d646:	3001      	adds	r0, #1
 800d648:	e7f6      	b.n	800d638 <memchr+0x4>
	...

0800d64c <__malloc_lock>:
 800d64c:	b510      	push	{r4, lr}
 800d64e:	4802      	ldr	r0, [pc, #8]	; (800d658 <__malloc_lock+0xc>)
 800d650:	f001 f92f 	bl	800e8b2 <__retarget_lock_acquire_recursive>
 800d654:	bd10      	pop	{r4, pc}
 800d656:	46c0      	nop			; (mov r8, r8)
 800d658:	20000608 	.word	0x20000608

0800d65c <__malloc_unlock>:
 800d65c:	b510      	push	{r4, lr}
 800d65e:	4802      	ldr	r0, [pc, #8]	; (800d668 <__malloc_unlock+0xc>)
 800d660:	f001 f928 	bl	800e8b4 <__retarget_lock_release_recursive>
 800d664:	bd10      	pop	{r4, pc}
 800d666:	46c0      	nop			; (mov r8, r8)
 800d668:	20000608 	.word	0x20000608

0800d66c <_Balloc>:
 800d66c:	b570      	push	{r4, r5, r6, lr}
 800d66e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d670:	0006      	movs	r6, r0
 800d672:	000c      	movs	r4, r1
 800d674:	2d00      	cmp	r5, #0
 800d676:	d10e      	bne.n	800d696 <_Balloc+0x2a>
 800d678:	2010      	movs	r0, #16
 800d67a:	f7fe fb7d 	bl	800bd78 <malloc>
 800d67e:	1e02      	subs	r2, r0, #0
 800d680:	6270      	str	r0, [r6, #36]	; 0x24
 800d682:	d104      	bne.n	800d68e <_Balloc+0x22>
 800d684:	2166      	movs	r1, #102	; 0x66
 800d686:	4b19      	ldr	r3, [pc, #100]	; (800d6ec <_Balloc+0x80>)
 800d688:	4819      	ldr	r0, [pc, #100]	; (800d6f0 <_Balloc+0x84>)
 800d68a:	f7ff f8e5 	bl	800c858 <__assert_func>
 800d68e:	6045      	str	r5, [r0, #4]
 800d690:	6085      	str	r5, [r0, #8]
 800d692:	6005      	str	r5, [r0, #0]
 800d694:	60c5      	str	r5, [r0, #12]
 800d696:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800d698:	68eb      	ldr	r3, [r5, #12]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d013      	beq.n	800d6c6 <_Balloc+0x5a>
 800d69e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d6a0:	00a2      	lsls	r2, r4, #2
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	189b      	adds	r3, r3, r2
 800d6a6:	6818      	ldr	r0, [r3, #0]
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	d118      	bne.n	800d6de <_Balloc+0x72>
 800d6ac:	2101      	movs	r1, #1
 800d6ae:	000d      	movs	r5, r1
 800d6b0:	40a5      	lsls	r5, r4
 800d6b2:	1d6a      	adds	r2, r5, #5
 800d6b4:	0030      	movs	r0, r6
 800d6b6:	0092      	lsls	r2, r2, #2
 800d6b8:	f000 fb76 	bl	800dda8 <_calloc_r>
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	d00c      	beq.n	800d6da <_Balloc+0x6e>
 800d6c0:	6044      	str	r4, [r0, #4]
 800d6c2:	6085      	str	r5, [r0, #8]
 800d6c4:	e00d      	b.n	800d6e2 <_Balloc+0x76>
 800d6c6:	2221      	movs	r2, #33	; 0x21
 800d6c8:	2104      	movs	r1, #4
 800d6ca:	0030      	movs	r0, r6
 800d6cc:	f000 fb6c 	bl	800dda8 <_calloc_r>
 800d6d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d6d2:	60e8      	str	r0, [r5, #12]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d1e1      	bne.n	800d69e <_Balloc+0x32>
 800d6da:	2000      	movs	r0, #0
 800d6dc:	bd70      	pop	{r4, r5, r6, pc}
 800d6de:	6802      	ldr	r2, [r0, #0]
 800d6e0:	601a      	str	r2, [r3, #0]
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	6103      	str	r3, [r0, #16]
 800d6e6:	60c3      	str	r3, [r0, #12]
 800d6e8:	e7f8      	b.n	800d6dc <_Balloc+0x70>
 800d6ea:	46c0      	nop			; (mov r8, r8)
 800d6ec:	0800ef9e 	.word	0x0800ef9e
 800d6f0:	0800f02f 	.word	0x0800f02f

0800d6f4 <_Bfree>:
 800d6f4:	b570      	push	{r4, r5, r6, lr}
 800d6f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6f8:	0005      	movs	r5, r0
 800d6fa:	000c      	movs	r4, r1
 800d6fc:	2e00      	cmp	r6, #0
 800d6fe:	d10e      	bne.n	800d71e <_Bfree+0x2a>
 800d700:	2010      	movs	r0, #16
 800d702:	f7fe fb39 	bl	800bd78 <malloc>
 800d706:	1e02      	subs	r2, r0, #0
 800d708:	6268      	str	r0, [r5, #36]	; 0x24
 800d70a:	d104      	bne.n	800d716 <_Bfree+0x22>
 800d70c:	218a      	movs	r1, #138	; 0x8a
 800d70e:	4b09      	ldr	r3, [pc, #36]	; (800d734 <_Bfree+0x40>)
 800d710:	4809      	ldr	r0, [pc, #36]	; (800d738 <_Bfree+0x44>)
 800d712:	f7ff f8a1 	bl	800c858 <__assert_func>
 800d716:	6046      	str	r6, [r0, #4]
 800d718:	6086      	str	r6, [r0, #8]
 800d71a:	6006      	str	r6, [r0, #0]
 800d71c:	60c6      	str	r6, [r0, #12]
 800d71e:	2c00      	cmp	r4, #0
 800d720:	d007      	beq.n	800d732 <_Bfree+0x3e>
 800d722:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d724:	6862      	ldr	r2, [r4, #4]
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	0092      	lsls	r2, r2, #2
 800d72a:	189b      	adds	r3, r3, r2
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	6022      	str	r2, [r4, #0]
 800d730:	601c      	str	r4, [r3, #0]
 800d732:	bd70      	pop	{r4, r5, r6, pc}
 800d734:	0800ef9e 	.word	0x0800ef9e
 800d738:	0800f02f 	.word	0x0800f02f

0800d73c <__multadd>:
 800d73c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d73e:	000e      	movs	r6, r1
 800d740:	9001      	str	r0, [sp, #4]
 800d742:	000c      	movs	r4, r1
 800d744:	001d      	movs	r5, r3
 800d746:	2000      	movs	r0, #0
 800d748:	690f      	ldr	r7, [r1, #16]
 800d74a:	3614      	adds	r6, #20
 800d74c:	6833      	ldr	r3, [r6, #0]
 800d74e:	3001      	adds	r0, #1
 800d750:	b299      	uxth	r1, r3
 800d752:	4351      	muls	r1, r2
 800d754:	0c1b      	lsrs	r3, r3, #16
 800d756:	4353      	muls	r3, r2
 800d758:	1949      	adds	r1, r1, r5
 800d75a:	0c0d      	lsrs	r5, r1, #16
 800d75c:	195b      	adds	r3, r3, r5
 800d75e:	0c1d      	lsrs	r5, r3, #16
 800d760:	b289      	uxth	r1, r1
 800d762:	041b      	lsls	r3, r3, #16
 800d764:	185b      	adds	r3, r3, r1
 800d766:	c608      	stmia	r6!, {r3}
 800d768:	4287      	cmp	r7, r0
 800d76a:	dcef      	bgt.n	800d74c <__multadd+0x10>
 800d76c:	2d00      	cmp	r5, #0
 800d76e:	d022      	beq.n	800d7b6 <__multadd+0x7a>
 800d770:	68a3      	ldr	r3, [r4, #8]
 800d772:	42bb      	cmp	r3, r7
 800d774:	dc19      	bgt.n	800d7aa <__multadd+0x6e>
 800d776:	6863      	ldr	r3, [r4, #4]
 800d778:	9801      	ldr	r0, [sp, #4]
 800d77a:	1c59      	adds	r1, r3, #1
 800d77c:	f7ff ff76 	bl	800d66c <_Balloc>
 800d780:	1e06      	subs	r6, r0, #0
 800d782:	d105      	bne.n	800d790 <__multadd+0x54>
 800d784:	0002      	movs	r2, r0
 800d786:	21b5      	movs	r1, #181	; 0xb5
 800d788:	4b0c      	ldr	r3, [pc, #48]	; (800d7bc <__multadd+0x80>)
 800d78a:	480d      	ldr	r0, [pc, #52]	; (800d7c0 <__multadd+0x84>)
 800d78c:	f7ff f864 	bl	800c858 <__assert_func>
 800d790:	0021      	movs	r1, r4
 800d792:	6923      	ldr	r3, [r4, #16]
 800d794:	310c      	adds	r1, #12
 800d796:	1c9a      	adds	r2, r3, #2
 800d798:	0092      	lsls	r2, r2, #2
 800d79a:	300c      	adds	r0, #12
 800d79c:	f7fe faf6 	bl	800bd8c <memcpy>
 800d7a0:	0021      	movs	r1, r4
 800d7a2:	9801      	ldr	r0, [sp, #4]
 800d7a4:	f7ff ffa6 	bl	800d6f4 <_Bfree>
 800d7a8:	0034      	movs	r4, r6
 800d7aa:	1d3b      	adds	r3, r7, #4
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	18e3      	adds	r3, r4, r3
 800d7b0:	605d      	str	r5, [r3, #4]
 800d7b2:	1c7b      	adds	r3, r7, #1
 800d7b4:	6123      	str	r3, [r4, #16]
 800d7b6:	0020      	movs	r0, r4
 800d7b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d7ba:	46c0      	nop			; (mov r8, r8)
 800d7bc:	0800f014 	.word	0x0800f014
 800d7c0:	0800f02f 	.word	0x0800f02f

0800d7c4 <__hi0bits>:
 800d7c4:	0003      	movs	r3, r0
 800d7c6:	0c02      	lsrs	r2, r0, #16
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	4282      	cmp	r2, r0
 800d7cc:	d101      	bne.n	800d7d2 <__hi0bits+0xe>
 800d7ce:	041b      	lsls	r3, r3, #16
 800d7d0:	3010      	adds	r0, #16
 800d7d2:	0e1a      	lsrs	r2, r3, #24
 800d7d4:	d101      	bne.n	800d7da <__hi0bits+0x16>
 800d7d6:	3008      	adds	r0, #8
 800d7d8:	021b      	lsls	r3, r3, #8
 800d7da:	0f1a      	lsrs	r2, r3, #28
 800d7dc:	d101      	bne.n	800d7e2 <__hi0bits+0x1e>
 800d7de:	3004      	adds	r0, #4
 800d7e0:	011b      	lsls	r3, r3, #4
 800d7e2:	0f9a      	lsrs	r2, r3, #30
 800d7e4:	d101      	bne.n	800d7ea <__hi0bits+0x26>
 800d7e6:	3002      	adds	r0, #2
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	db03      	blt.n	800d7f6 <__hi0bits+0x32>
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	005b      	lsls	r3, r3, #1
 800d7f2:	d400      	bmi.n	800d7f6 <__hi0bits+0x32>
 800d7f4:	2020      	movs	r0, #32
 800d7f6:	4770      	bx	lr

0800d7f8 <__lo0bits>:
 800d7f8:	6803      	ldr	r3, [r0, #0]
 800d7fa:	0002      	movs	r2, r0
 800d7fc:	2107      	movs	r1, #7
 800d7fe:	0018      	movs	r0, r3
 800d800:	4008      	ands	r0, r1
 800d802:	420b      	tst	r3, r1
 800d804:	d00d      	beq.n	800d822 <__lo0bits+0x2a>
 800d806:	3906      	subs	r1, #6
 800d808:	2000      	movs	r0, #0
 800d80a:	420b      	tst	r3, r1
 800d80c:	d105      	bne.n	800d81a <__lo0bits+0x22>
 800d80e:	3002      	adds	r0, #2
 800d810:	4203      	tst	r3, r0
 800d812:	d003      	beq.n	800d81c <__lo0bits+0x24>
 800d814:	40cb      	lsrs	r3, r1
 800d816:	0008      	movs	r0, r1
 800d818:	6013      	str	r3, [r2, #0]
 800d81a:	4770      	bx	lr
 800d81c:	089b      	lsrs	r3, r3, #2
 800d81e:	6013      	str	r3, [r2, #0]
 800d820:	e7fb      	b.n	800d81a <__lo0bits+0x22>
 800d822:	b299      	uxth	r1, r3
 800d824:	2900      	cmp	r1, #0
 800d826:	d101      	bne.n	800d82c <__lo0bits+0x34>
 800d828:	2010      	movs	r0, #16
 800d82a:	0c1b      	lsrs	r3, r3, #16
 800d82c:	b2d9      	uxtb	r1, r3
 800d82e:	2900      	cmp	r1, #0
 800d830:	d101      	bne.n	800d836 <__lo0bits+0x3e>
 800d832:	3008      	adds	r0, #8
 800d834:	0a1b      	lsrs	r3, r3, #8
 800d836:	0719      	lsls	r1, r3, #28
 800d838:	d101      	bne.n	800d83e <__lo0bits+0x46>
 800d83a:	3004      	adds	r0, #4
 800d83c:	091b      	lsrs	r3, r3, #4
 800d83e:	0799      	lsls	r1, r3, #30
 800d840:	d101      	bne.n	800d846 <__lo0bits+0x4e>
 800d842:	3002      	adds	r0, #2
 800d844:	089b      	lsrs	r3, r3, #2
 800d846:	07d9      	lsls	r1, r3, #31
 800d848:	d4e9      	bmi.n	800d81e <__lo0bits+0x26>
 800d84a:	3001      	adds	r0, #1
 800d84c:	085b      	lsrs	r3, r3, #1
 800d84e:	d1e6      	bne.n	800d81e <__lo0bits+0x26>
 800d850:	2020      	movs	r0, #32
 800d852:	e7e2      	b.n	800d81a <__lo0bits+0x22>

0800d854 <__i2b>:
 800d854:	b510      	push	{r4, lr}
 800d856:	000c      	movs	r4, r1
 800d858:	2101      	movs	r1, #1
 800d85a:	f7ff ff07 	bl	800d66c <_Balloc>
 800d85e:	2800      	cmp	r0, #0
 800d860:	d106      	bne.n	800d870 <__i2b+0x1c>
 800d862:	21a0      	movs	r1, #160	; 0xa0
 800d864:	0002      	movs	r2, r0
 800d866:	4b04      	ldr	r3, [pc, #16]	; (800d878 <__i2b+0x24>)
 800d868:	4804      	ldr	r0, [pc, #16]	; (800d87c <__i2b+0x28>)
 800d86a:	0049      	lsls	r1, r1, #1
 800d86c:	f7fe fff4 	bl	800c858 <__assert_func>
 800d870:	2301      	movs	r3, #1
 800d872:	6144      	str	r4, [r0, #20]
 800d874:	6103      	str	r3, [r0, #16]
 800d876:	bd10      	pop	{r4, pc}
 800d878:	0800f014 	.word	0x0800f014
 800d87c:	0800f02f 	.word	0x0800f02f

0800d880 <__multiply>:
 800d880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d882:	690b      	ldr	r3, [r1, #16]
 800d884:	0014      	movs	r4, r2
 800d886:	6912      	ldr	r2, [r2, #16]
 800d888:	000d      	movs	r5, r1
 800d88a:	b089      	sub	sp, #36	; 0x24
 800d88c:	4293      	cmp	r3, r2
 800d88e:	da01      	bge.n	800d894 <__multiply+0x14>
 800d890:	0025      	movs	r5, r4
 800d892:	000c      	movs	r4, r1
 800d894:	692f      	ldr	r7, [r5, #16]
 800d896:	6926      	ldr	r6, [r4, #16]
 800d898:	6869      	ldr	r1, [r5, #4]
 800d89a:	19bb      	adds	r3, r7, r6
 800d89c:	9302      	str	r3, [sp, #8]
 800d89e:	68ab      	ldr	r3, [r5, #8]
 800d8a0:	19ba      	adds	r2, r7, r6
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	da00      	bge.n	800d8a8 <__multiply+0x28>
 800d8a6:	3101      	adds	r1, #1
 800d8a8:	f7ff fee0 	bl	800d66c <_Balloc>
 800d8ac:	9001      	str	r0, [sp, #4]
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d106      	bne.n	800d8c0 <__multiply+0x40>
 800d8b2:	215e      	movs	r1, #94	; 0x5e
 800d8b4:	0002      	movs	r2, r0
 800d8b6:	4b48      	ldr	r3, [pc, #288]	; (800d9d8 <__multiply+0x158>)
 800d8b8:	4848      	ldr	r0, [pc, #288]	; (800d9dc <__multiply+0x15c>)
 800d8ba:	31ff      	adds	r1, #255	; 0xff
 800d8bc:	f7fe ffcc 	bl	800c858 <__assert_func>
 800d8c0:	9b01      	ldr	r3, [sp, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	3314      	adds	r3, #20
 800d8c6:	469c      	mov	ip, r3
 800d8c8:	19bb      	adds	r3, r7, r6
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	4463      	add	r3, ip
 800d8ce:	9303      	str	r3, [sp, #12]
 800d8d0:	4663      	mov	r3, ip
 800d8d2:	9903      	ldr	r1, [sp, #12]
 800d8d4:	428b      	cmp	r3, r1
 800d8d6:	d32c      	bcc.n	800d932 <__multiply+0xb2>
 800d8d8:	002b      	movs	r3, r5
 800d8da:	0022      	movs	r2, r4
 800d8dc:	3314      	adds	r3, #20
 800d8de:	00bf      	lsls	r7, r7, #2
 800d8e0:	3214      	adds	r2, #20
 800d8e2:	9306      	str	r3, [sp, #24]
 800d8e4:	00b6      	lsls	r6, r6, #2
 800d8e6:	19db      	adds	r3, r3, r7
 800d8e8:	9304      	str	r3, [sp, #16]
 800d8ea:	1993      	adds	r3, r2, r6
 800d8ec:	9307      	str	r3, [sp, #28]
 800d8ee:	2304      	movs	r3, #4
 800d8f0:	9305      	str	r3, [sp, #20]
 800d8f2:	002b      	movs	r3, r5
 800d8f4:	9904      	ldr	r1, [sp, #16]
 800d8f6:	3315      	adds	r3, #21
 800d8f8:	9200      	str	r2, [sp, #0]
 800d8fa:	4299      	cmp	r1, r3
 800d8fc:	d305      	bcc.n	800d90a <__multiply+0x8a>
 800d8fe:	1b4b      	subs	r3, r1, r5
 800d900:	3b15      	subs	r3, #21
 800d902:	089b      	lsrs	r3, r3, #2
 800d904:	3301      	adds	r3, #1
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	9305      	str	r3, [sp, #20]
 800d90a:	9b07      	ldr	r3, [sp, #28]
 800d90c:	9a00      	ldr	r2, [sp, #0]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d311      	bcc.n	800d936 <__multiply+0xb6>
 800d912:	9b02      	ldr	r3, [sp, #8]
 800d914:	2b00      	cmp	r3, #0
 800d916:	dd06      	ble.n	800d926 <__multiply+0xa6>
 800d918:	9b03      	ldr	r3, [sp, #12]
 800d91a:	3b04      	subs	r3, #4
 800d91c:	9303      	str	r3, [sp, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d054      	beq.n	800d9d0 <__multiply+0x150>
 800d926:	9b01      	ldr	r3, [sp, #4]
 800d928:	9a02      	ldr	r2, [sp, #8]
 800d92a:	0018      	movs	r0, r3
 800d92c:	611a      	str	r2, [r3, #16]
 800d92e:	b009      	add	sp, #36	; 0x24
 800d930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d932:	c304      	stmia	r3!, {r2}
 800d934:	e7cd      	b.n	800d8d2 <__multiply+0x52>
 800d936:	9b00      	ldr	r3, [sp, #0]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	b298      	uxth	r0, r3
 800d93c:	2800      	cmp	r0, #0
 800d93e:	d01c      	beq.n	800d97a <__multiply+0xfa>
 800d940:	4667      	mov	r7, ip
 800d942:	2400      	movs	r4, #0
 800d944:	9e06      	ldr	r6, [sp, #24]
 800d946:	ce02      	ldmia	r6!, {r1}
 800d948:	683a      	ldr	r2, [r7, #0]
 800d94a:	b28b      	uxth	r3, r1
 800d94c:	4343      	muls	r3, r0
 800d94e:	0c09      	lsrs	r1, r1, #16
 800d950:	4341      	muls	r1, r0
 800d952:	b292      	uxth	r2, r2
 800d954:	189b      	adds	r3, r3, r2
 800d956:	191b      	adds	r3, r3, r4
 800d958:	000c      	movs	r4, r1
 800d95a:	683a      	ldr	r2, [r7, #0]
 800d95c:	0c11      	lsrs	r1, r2, #16
 800d95e:	1861      	adds	r1, r4, r1
 800d960:	0c1c      	lsrs	r4, r3, #16
 800d962:	1909      	adds	r1, r1, r4
 800d964:	0c0c      	lsrs	r4, r1, #16
 800d966:	b29b      	uxth	r3, r3
 800d968:	0409      	lsls	r1, r1, #16
 800d96a:	430b      	orrs	r3, r1
 800d96c:	c708      	stmia	r7!, {r3}
 800d96e:	9b04      	ldr	r3, [sp, #16]
 800d970:	42b3      	cmp	r3, r6
 800d972:	d8e8      	bhi.n	800d946 <__multiply+0xc6>
 800d974:	4663      	mov	r3, ip
 800d976:	9a05      	ldr	r2, [sp, #20]
 800d978:	509c      	str	r4, [r3, r2]
 800d97a:	9b00      	ldr	r3, [sp, #0]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	0c1e      	lsrs	r6, r3, #16
 800d980:	d020      	beq.n	800d9c4 <__multiply+0x144>
 800d982:	4663      	mov	r3, ip
 800d984:	002c      	movs	r4, r5
 800d986:	4660      	mov	r0, ip
 800d988:	2700      	movs	r7, #0
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	3414      	adds	r4, #20
 800d98e:	6822      	ldr	r2, [r4, #0]
 800d990:	b29b      	uxth	r3, r3
 800d992:	b291      	uxth	r1, r2
 800d994:	4371      	muls	r1, r6
 800d996:	6802      	ldr	r2, [r0, #0]
 800d998:	0c12      	lsrs	r2, r2, #16
 800d99a:	1889      	adds	r1, r1, r2
 800d99c:	19cf      	adds	r7, r1, r7
 800d99e:	0439      	lsls	r1, r7, #16
 800d9a0:	430b      	orrs	r3, r1
 800d9a2:	6003      	str	r3, [r0, #0]
 800d9a4:	cc02      	ldmia	r4!, {r1}
 800d9a6:	6843      	ldr	r3, [r0, #4]
 800d9a8:	0c09      	lsrs	r1, r1, #16
 800d9aa:	4371      	muls	r1, r6
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	0c3f      	lsrs	r7, r7, #16
 800d9b0:	18cb      	adds	r3, r1, r3
 800d9b2:	9a04      	ldr	r2, [sp, #16]
 800d9b4:	19db      	adds	r3, r3, r7
 800d9b6:	0c1f      	lsrs	r7, r3, #16
 800d9b8:	3004      	adds	r0, #4
 800d9ba:	42a2      	cmp	r2, r4
 800d9bc:	d8e7      	bhi.n	800d98e <__multiply+0x10e>
 800d9be:	4662      	mov	r2, ip
 800d9c0:	9905      	ldr	r1, [sp, #20]
 800d9c2:	5053      	str	r3, [r2, r1]
 800d9c4:	9b00      	ldr	r3, [sp, #0]
 800d9c6:	3304      	adds	r3, #4
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	2304      	movs	r3, #4
 800d9cc:	449c      	add	ip, r3
 800d9ce:	e79c      	b.n	800d90a <__multiply+0x8a>
 800d9d0:	9b02      	ldr	r3, [sp, #8]
 800d9d2:	3b01      	subs	r3, #1
 800d9d4:	9302      	str	r3, [sp, #8]
 800d9d6:	e79c      	b.n	800d912 <__multiply+0x92>
 800d9d8:	0800f014 	.word	0x0800f014
 800d9dc:	0800f02f 	.word	0x0800f02f

0800d9e0 <__pow5mult>:
 800d9e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9e2:	2303      	movs	r3, #3
 800d9e4:	0015      	movs	r5, r2
 800d9e6:	0007      	movs	r7, r0
 800d9e8:	000e      	movs	r6, r1
 800d9ea:	401a      	ands	r2, r3
 800d9ec:	421d      	tst	r5, r3
 800d9ee:	d008      	beq.n	800da02 <__pow5mult+0x22>
 800d9f0:	4925      	ldr	r1, [pc, #148]	; (800da88 <__pow5mult+0xa8>)
 800d9f2:	3a01      	subs	r2, #1
 800d9f4:	0092      	lsls	r2, r2, #2
 800d9f6:	5852      	ldr	r2, [r2, r1]
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	0031      	movs	r1, r6
 800d9fc:	f7ff fe9e 	bl	800d73c <__multadd>
 800da00:	0006      	movs	r6, r0
 800da02:	10ad      	asrs	r5, r5, #2
 800da04:	d03d      	beq.n	800da82 <__pow5mult+0xa2>
 800da06:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800da08:	2c00      	cmp	r4, #0
 800da0a:	d10f      	bne.n	800da2c <__pow5mult+0x4c>
 800da0c:	2010      	movs	r0, #16
 800da0e:	f7fe f9b3 	bl	800bd78 <malloc>
 800da12:	1e02      	subs	r2, r0, #0
 800da14:	6278      	str	r0, [r7, #36]	; 0x24
 800da16:	d105      	bne.n	800da24 <__pow5mult+0x44>
 800da18:	21d7      	movs	r1, #215	; 0xd7
 800da1a:	4b1c      	ldr	r3, [pc, #112]	; (800da8c <__pow5mult+0xac>)
 800da1c:	481c      	ldr	r0, [pc, #112]	; (800da90 <__pow5mult+0xb0>)
 800da1e:	0049      	lsls	r1, r1, #1
 800da20:	f7fe ff1a 	bl	800c858 <__assert_func>
 800da24:	6044      	str	r4, [r0, #4]
 800da26:	6084      	str	r4, [r0, #8]
 800da28:	6004      	str	r4, [r0, #0]
 800da2a:	60c4      	str	r4, [r0, #12]
 800da2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2e:	689c      	ldr	r4, [r3, #8]
 800da30:	9301      	str	r3, [sp, #4]
 800da32:	2c00      	cmp	r4, #0
 800da34:	d108      	bne.n	800da48 <__pow5mult+0x68>
 800da36:	0038      	movs	r0, r7
 800da38:	4916      	ldr	r1, [pc, #88]	; (800da94 <__pow5mult+0xb4>)
 800da3a:	f7ff ff0b 	bl	800d854 <__i2b>
 800da3e:	9b01      	ldr	r3, [sp, #4]
 800da40:	0004      	movs	r4, r0
 800da42:	6098      	str	r0, [r3, #8]
 800da44:	2300      	movs	r3, #0
 800da46:	6003      	str	r3, [r0, #0]
 800da48:	2301      	movs	r3, #1
 800da4a:	421d      	tst	r5, r3
 800da4c:	d00a      	beq.n	800da64 <__pow5mult+0x84>
 800da4e:	0031      	movs	r1, r6
 800da50:	0022      	movs	r2, r4
 800da52:	0038      	movs	r0, r7
 800da54:	f7ff ff14 	bl	800d880 <__multiply>
 800da58:	0031      	movs	r1, r6
 800da5a:	9001      	str	r0, [sp, #4]
 800da5c:	0038      	movs	r0, r7
 800da5e:	f7ff fe49 	bl	800d6f4 <_Bfree>
 800da62:	9e01      	ldr	r6, [sp, #4]
 800da64:	106d      	asrs	r5, r5, #1
 800da66:	d00c      	beq.n	800da82 <__pow5mult+0xa2>
 800da68:	6820      	ldr	r0, [r4, #0]
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d107      	bne.n	800da7e <__pow5mult+0x9e>
 800da6e:	0022      	movs	r2, r4
 800da70:	0021      	movs	r1, r4
 800da72:	0038      	movs	r0, r7
 800da74:	f7ff ff04 	bl	800d880 <__multiply>
 800da78:	2300      	movs	r3, #0
 800da7a:	6020      	str	r0, [r4, #0]
 800da7c:	6003      	str	r3, [r0, #0]
 800da7e:	0004      	movs	r4, r0
 800da80:	e7e2      	b.n	800da48 <__pow5mult+0x68>
 800da82:	0030      	movs	r0, r6
 800da84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800da86:	46c0      	nop			; (mov r8, r8)
 800da88:	0800f180 	.word	0x0800f180
 800da8c:	0800ef9e 	.word	0x0800ef9e
 800da90:	0800f02f 	.word	0x0800f02f
 800da94:	00000271 	.word	0x00000271

0800da98 <__lshift>:
 800da98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da9a:	000c      	movs	r4, r1
 800da9c:	0017      	movs	r7, r2
 800da9e:	6923      	ldr	r3, [r4, #16]
 800daa0:	1155      	asrs	r5, r2, #5
 800daa2:	b087      	sub	sp, #28
 800daa4:	18eb      	adds	r3, r5, r3
 800daa6:	9302      	str	r3, [sp, #8]
 800daa8:	3301      	adds	r3, #1
 800daaa:	9301      	str	r3, [sp, #4]
 800daac:	6849      	ldr	r1, [r1, #4]
 800daae:	68a3      	ldr	r3, [r4, #8]
 800dab0:	9004      	str	r0, [sp, #16]
 800dab2:	9a01      	ldr	r2, [sp, #4]
 800dab4:	4293      	cmp	r3, r2
 800dab6:	db11      	blt.n	800dadc <__lshift+0x44>
 800dab8:	9804      	ldr	r0, [sp, #16]
 800daba:	f7ff fdd7 	bl	800d66c <_Balloc>
 800dabe:	0002      	movs	r2, r0
 800dac0:	2300      	movs	r3, #0
 800dac2:	3214      	adds	r2, #20
 800dac4:	0006      	movs	r6, r0
 800dac6:	0011      	movs	r1, r2
 800dac8:	9203      	str	r2, [sp, #12]
 800daca:	4298      	cmp	r0, r3
 800dacc:	d10d      	bne.n	800daea <__lshift+0x52>
 800dace:	21da      	movs	r1, #218	; 0xda
 800dad0:	0002      	movs	r2, r0
 800dad2:	4b27      	ldr	r3, [pc, #156]	; (800db70 <__lshift+0xd8>)
 800dad4:	4827      	ldr	r0, [pc, #156]	; (800db74 <__lshift+0xdc>)
 800dad6:	31ff      	adds	r1, #255	; 0xff
 800dad8:	f7fe febe 	bl	800c858 <__assert_func>
 800dadc:	3101      	adds	r1, #1
 800dade:	005b      	lsls	r3, r3, #1
 800dae0:	e7e7      	b.n	800dab2 <__lshift+0x1a>
 800dae2:	2200      	movs	r2, #0
 800dae4:	0098      	lsls	r0, r3, #2
 800dae6:	500a      	str	r2, [r1, r0]
 800dae8:	3301      	adds	r3, #1
 800daea:	42ab      	cmp	r3, r5
 800daec:	dbf9      	blt.n	800dae2 <__lshift+0x4a>
 800daee:	43eb      	mvns	r3, r5
 800daf0:	17db      	asrs	r3, r3, #31
 800daf2:	401d      	ands	r5, r3
 800daf4:	9b03      	ldr	r3, [sp, #12]
 800daf6:	00ad      	lsls	r5, r5, #2
 800daf8:	211f      	movs	r1, #31
 800dafa:	0038      	movs	r0, r7
 800dafc:	195d      	adds	r5, r3, r5
 800dafe:	0023      	movs	r3, r4
 800db00:	6922      	ldr	r2, [r4, #16]
 800db02:	3314      	adds	r3, #20
 800db04:	0092      	lsls	r2, r2, #2
 800db06:	4008      	ands	r0, r1
 800db08:	4684      	mov	ip, r0
 800db0a:	189a      	adds	r2, r3, r2
 800db0c:	420f      	tst	r7, r1
 800db0e:	d02a      	beq.n	800db66 <__lshift+0xce>
 800db10:	3101      	adds	r1, #1
 800db12:	1a09      	subs	r1, r1, r0
 800db14:	9105      	str	r1, [sp, #20]
 800db16:	2100      	movs	r1, #0
 800db18:	9503      	str	r5, [sp, #12]
 800db1a:	4667      	mov	r7, ip
 800db1c:	6818      	ldr	r0, [r3, #0]
 800db1e:	40b8      	lsls	r0, r7
 800db20:	4301      	orrs	r1, r0
 800db22:	9803      	ldr	r0, [sp, #12]
 800db24:	c002      	stmia	r0!, {r1}
 800db26:	cb02      	ldmia	r3!, {r1}
 800db28:	9003      	str	r0, [sp, #12]
 800db2a:	9805      	ldr	r0, [sp, #20]
 800db2c:	40c1      	lsrs	r1, r0
 800db2e:	429a      	cmp	r2, r3
 800db30:	d8f3      	bhi.n	800db1a <__lshift+0x82>
 800db32:	0020      	movs	r0, r4
 800db34:	3015      	adds	r0, #21
 800db36:	2304      	movs	r3, #4
 800db38:	4282      	cmp	r2, r0
 800db3a:	d304      	bcc.n	800db46 <__lshift+0xae>
 800db3c:	1b13      	subs	r3, r2, r4
 800db3e:	3b15      	subs	r3, #21
 800db40:	089b      	lsrs	r3, r3, #2
 800db42:	3301      	adds	r3, #1
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	50e9      	str	r1, [r5, r3]
 800db48:	2900      	cmp	r1, #0
 800db4a:	d002      	beq.n	800db52 <__lshift+0xba>
 800db4c:	9b02      	ldr	r3, [sp, #8]
 800db4e:	3302      	adds	r3, #2
 800db50:	9301      	str	r3, [sp, #4]
 800db52:	9b01      	ldr	r3, [sp, #4]
 800db54:	9804      	ldr	r0, [sp, #16]
 800db56:	3b01      	subs	r3, #1
 800db58:	0021      	movs	r1, r4
 800db5a:	6133      	str	r3, [r6, #16]
 800db5c:	f7ff fdca 	bl	800d6f4 <_Bfree>
 800db60:	0030      	movs	r0, r6
 800db62:	b007      	add	sp, #28
 800db64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db66:	cb02      	ldmia	r3!, {r1}
 800db68:	c502      	stmia	r5!, {r1}
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d8fb      	bhi.n	800db66 <__lshift+0xce>
 800db6e:	e7f0      	b.n	800db52 <__lshift+0xba>
 800db70:	0800f014 	.word	0x0800f014
 800db74:	0800f02f 	.word	0x0800f02f

0800db78 <__mcmp>:
 800db78:	6902      	ldr	r2, [r0, #16]
 800db7a:	690b      	ldr	r3, [r1, #16]
 800db7c:	b530      	push	{r4, r5, lr}
 800db7e:	0004      	movs	r4, r0
 800db80:	1ad0      	subs	r0, r2, r3
 800db82:	429a      	cmp	r2, r3
 800db84:	d10d      	bne.n	800dba2 <__mcmp+0x2a>
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	3414      	adds	r4, #20
 800db8a:	3114      	adds	r1, #20
 800db8c:	18e2      	adds	r2, r4, r3
 800db8e:	18c9      	adds	r1, r1, r3
 800db90:	3a04      	subs	r2, #4
 800db92:	3904      	subs	r1, #4
 800db94:	6815      	ldr	r5, [r2, #0]
 800db96:	680b      	ldr	r3, [r1, #0]
 800db98:	429d      	cmp	r5, r3
 800db9a:	d003      	beq.n	800dba4 <__mcmp+0x2c>
 800db9c:	2001      	movs	r0, #1
 800db9e:	429d      	cmp	r5, r3
 800dba0:	d303      	bcc.n	800dbaa <__mcmp+0x32>
 800dba2:	bd30      	pop	{r4, r5, pc}
 800dba4:	4294      	cmp	r4, r2
 800dba6:	d3f3      	bcc.n	800db90 <__mcmp+0x18>
 800dba8:	e7fb      	b.n	800dba2 <__mcmp+0x2a>
 800dbaa:	4240      	negs	r0, r0
 800dbac:	e7f9      	b.n	800dba2 <__mcmp+0x2a>
	...

0800dbb0 <__mdiff>:
 800dbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbb2:	000e      	movs	r6, r1
 800dbb4:	0007      	movs	r7, r0
 800dbb6:	0011      	movs	r1, r2
 800dbb8:	0030      	movs	r0, r6
 800dbba:	b087      	sub	sp, #28
 800dbbc:	0014      	movs	r4, r2
 800dbbe:	f7ff ffdb 	bl	800db78 <__mcmp>
 800dbc2:	1e05      	subs	r5, r0, #0
 800dbc4:	d110      	bne.n	800dbe8 <__mdiff+0x38>
 800dbc6:	0001      	movs	r1, r0
 800dbc8:	0038      	movs	r0, r7
 800dbca:	f7ff fd4f 	bl	800d66c <_Balloc>
 800dbce:	1e02      	subs	r2, r0, #0
 800dbd0:	d104      	bne.n	800dbdc <__mdiff+0x2c>
 800dbd2:	4b40      	ldr	r3, [pc, #256]	; (800dcd4 <__mdiff+0x124>)
 800dbd4:	4940      	ldr	r1, [pc, #256]	; (800dcd8 <__mdiff+0x128>)
 800dbd6:	4841      	ldr	r0, [pc, #260]	; (800dcdc <__mdiff+0x12c>)
 800dbd8:	f7fe fe3e 	bl	800c858 <__assert_func>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	6145      	str	r5, [r0, #20]
 800dbe0:	6103      	str	r3, [r0, #16]
 800dbe2:	0010      	movs	r0, r2
 800dbe4:	b007      	add	sp, #28
 800dbe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbe8:	2301      	movs	r3, #1
 800dbea:	9301      	str	r3, [sp, #4]
 800dbec:	2800      	cmp	r0, #0
 800dbee:	db04      	blt.n	800dbfa <__mdiff+0x4a>
 800dbf0:	0023      	movs	r3, r4
 800dbf2:	0034      	movs	r4, r6
 800dbf4:	001e      	movs	r6, r3
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	9301      	str	r3, [sp, #4]
 800dbfa:	0038      	movs	r0, r7
 800dbfc:	6861      	ldr	r1, [r4, #4]
 800dbfe:	f7ff fd35 	bl	800d66c <_Balloc>
 800dc02:	1e02      	subs	r2, r0, #0
 800dc04:	d103      	bne.n	800dc0e <__mdiff+0x5e>
 800dc06:	2190      	movs	r1, #144	; 0x90
 800dc08:	4b32      	ldr	r3, [pc, #200]	; (800dcd4 <__mdiff+0x124>)
 800dc0a:	0089      	lsls	r1, r1, #2
 800dc0c:	e7e3      	b.n	800dbd6 <__mdiff+0x26>
 800dc0e:	9b01      	ldr	r3, [sp, #4]
 800dc10:	2700      	movs	r7, #0
 800dc12:	60c3      	str	r3, [r0, #12]
 800dc14:	6920      	ldr	r0, [r4, #16]
 800dc16:	3414      	adds	r4, #20
 800dc18:	9401      	str	r4, [sp, #4]
 800dc1a:	9b01      	ldr	r3, [sp, #4]
 800dc1c:	0084      	lsls	r4, r0, #2
 800dc1e:	191b      	adds	r3, r3, r4
 800dc20:	0034      	movs	r4, r6
 800dc22:	9302      	str	r3, [sp, #8]
 800dc24:	6933      	ldr	r3, [r6, #16]
 800dc26:	3414      	adds	r4, #20
 800dc28:	0099      	lsls	r1, r3, #2
 800dc2a:	1863      	adds	r3, r4, r1
 800dc2c:	9303      	str	r3, [sp, #12]
 800dc2e:	0013      	movs	r3, r2
 800dc30:	3314      	adds	r3, #20
 800dc32:	469c      	mov	ip, r3
 800dc34:	9305      	str	r3, [sp, #20]
 800dc36:	9b01      	ldr	r3, [sp, #4]
 800dc38:	9304      	str	r3, [sp, #16]
 800dc3a:	9b04      	ldr	r3, [sp, #16]
 800dc3c:	cc02      	ldmia	r4!, {r1}
 800dc3e:	cb20      	ldmia	r3!, {r5}
 800dc40:	9304      	str	r3, [sp, #16]
 800dc42:	b2ab      	uxth	r3, r5
 800dc44:	19df      	adds	r7, r3, r7
 800dc46:	b28b      	uxth	r3, r1
 800dc48:	1afb      	subs	r3, r7, r3
 800dc4a:	0c2d      	lsrs	r5, r5, #16
 800dc4c:	0c09      	lsrs	r1, r1, #16
 800dc4e:	1a69      	subs	r1, r5, r1
 800dc50:	141d      	asrs	r5, r3, #16
 800dc52:	1949      	adds	r1, r1, r5
 800dc54:	140f      	asrs	r7, r1, #16
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	0409      	lsls	r1, r1, #16
 800dc5a:	430b      	orrs	r3, r1
 800dc5c:	4661      	mov	r1, ip
 800dc5e:	c108      	stmia	r1!, {r3}
 800dc60:	9b03      	ldr	r3, [sp, #12]
 800dc62:	468c      	mov	ip, r1
 800dc64:	42a3      	cmp	r3, r4
 800dc66:	d8e8      	bhi.n	800dc3a <__mdiff+0x8a>
 800dc68:	0031      	movs	r1, r6
 800dc6a:	9c03      	ldr	r4, [sp, #12]
 800dc6c:	3115      	adds	r1, #21
 800dc6e:	2304      	movs	r3, #4
 800dc70:	428c      	cmp	r4, r1
 800dc72:	d304      	bcc.n	800dc7e <__mdiff+0xce>
 800dc74:	1ba3      	subs	r3, r4, r6
 800dc76:	3b15      	subs	r3, #21
 800dc78:	089b      	lsrs	r3, r3, #2
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	9901      	ldr	r1, [sp, #4]
 800dc80:	18cc      	adds	r4, r1, r3
 800dc82:	9905      	ldr	r1, [sp, #20]
 800dc84:	0026      	movs	r6, r4
 800dc86:	18cb      	adds	r3, r1, r3
 800dc88:	469c      	mov	ip, r3
 800dc8a:	9902      	ldr	r1, [sp, #8]
 800dc8c:	428e      	cmp	r6, r1
 800dc8e:	d310      	bcc.n	800dcb2 <__mdiff+0x102>
 800dc90:	9e02      	ldr	r6, [sp, #8]
 800dc92:	1ee5      	subs	r5, r4, #3
 800dc94:	2100      	movs	r1, #0
 800dc96:	42ae      	cmp	r6, r5
 800dc98:	d304      	bcc.n	800dca4 <__mdiff+0xf4>
 800dc9a:	0031      	movs	r1, r6
 800dc9c:	3103      	adds	r1, #3
 800dc9e:	1b09      	subs	r1, r1, r4
 800dca0:	0889      	lsrs	r1, r1, #2
 800dca2:	0089      	lsls	r1, r1, #2
 800dca4:	185b      	adds	r3, r3, r1
 800dca6:	3b04      	subs	r3, #4
 800dca8:	6819      	ldr	r1, [r3, #0]
 800dcaa:	2900      	cmp	r1, #0
 800dcac:	d00f      	beq.n	800dcce <__mdiff+0x11e>
 800dcae:	6110      	str	r0, [r2, #16]
 800dcb0:	e797      	b.n	800dbe2 <__mdiff+0x32>
 800dcb2:	ce02      	ldmia	r6!, {r1}
 800dcb4:	b28d      	uxth	r5, r1
 800dcb6:	19ed      	adds	r5, r5, r7
 800dcb8:	0c0f      	lsrs	r7, r1, #16
 800dcba:	1429      	asrs	r1, r5, #16
 800dcbc:	1879      	adds	r1, r7, r1
 800dcbe:	140f      	asrs	r7, r1, #16
 800dcc0:	b2ad      	uxth	r5, r5
 800dcc2:	0409      	lsls	r1, r1, #16
 800dcc4:	430d      	orrs	r5, r1
 800dcc6:	4661      	mov	r1, ip
 800dcc8:	c120      	stmia	r1!, {r5}
 800dcca:	468c      	mov	ip, r1
 800dccc:	e7dd      	b.n	800dc8a <__mdiff+0xda>
 800dcce:	3801      	subs	r0, #1
 800dcd0:	e7e9      	b.n	800dca6 <__mdiff+0xf6>
 800dcd2:	46c0      	nop			; (mov r8, r8)
 800dcd4:	0800f014 	.word	0x0800f014
 800dcd8:	00000232 	.word	0x00000232
 800dcdc:	0800f02f 	.word	0x0800f02f

0800dce0 <__d2b>:
 800dce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dce2:	2101      	movs	r1, #1
 800dce4:	0014      	movs	r4, r2
 800dce6:	001e      	movs	r6, r3
 800dce8:	9f08      	ldr	r7, [sp, #32]
 800dcea:	f7ff fcbf 	bl	800d66c <_Balloc>
 800dcee:	1e05      	subs	r5, r0, #0
 800dcf0:	d105      	bne.n	800dcfe <__d2b+0x1e>
 800dcf2:	0002      	movs	r2, r0
 800dcf4:	4b26      	ldr	r3, [pc, #152]	; (800dd90 <__d2b+0xb0>)
 800dcf6:	4927      	ldr	r1, [pc, #156]	; (800dd94 <__d2b+0xb4>)
 800dcf8:	4827      	ldr	r0, [pc, #156]	; (800dd98 <__d2b+0xb8>)
 800dcfa:	f7fe fdad 	bl	800c858 <__assert_func>
 800dcfe:	0333      	lsls	r3, r6, #12
 800dd00:	0076      	lsls	r6, r6, #1
 800dd02:	0b1b      	lsrs	r3, r3, #12
 800dd04:	0d76      	lsrs	r6, r6, #21
 800dd06:	d124      	bne.n	800dd52 <__d2b+0x72>
 800dd08:	9301      	str	r3, [sp, #4]
 800dd0a:	2c00      	cmp	r4, #0
 800dd0c:	d027      	beq.n	800dd5e <__d2b+0x7e>
 800dd0e:	4668      	mov	r0, sp
 800dd10:	9400      	str	r4, [sp, #0]
 800dd12:	f7ff fd71 	bl	800d7f8 <__lo0bits>
 800dd16:	9c00      	ldr	r4, [sp, #0]
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	d01e      	beq.n	800dd5a <__d2b+0x7a>
 800dd1c:	9b01      	ldr	r3, [sp, #4]
 800dd1e:	2120      	movs	r1, #32
 800dd20:	001a      	movs	r2, r3
 800dd22:	1a09      	subs	r1, r1, r0
 800dd24:	408a      	lsls	r2, r1
 800dd26:	40c3      	lsrs	r3, r0
 800dd28:	4322      	orrs	r2, r4
 800dd2a:	616a      	str	r2, [r5, #20]
 800dd2c:	9301      	str	r3, [sp, #4]
 800dd2e:	9c01      	ldr	r4, [sp, #4]
 800dd30:	61ac      	str	r4, [r5, #24]
 800dd32:	1e63      	subs	r3, r4, #1
 800dd34:	419c      	sbcs	r4, r3
 800dd36:	3401      	adds	r4, #1
 800dd38:	612c      	str	r4, [r5, #16]
 800dd3a:	2e00      	cmp	r6, #0
 800dd3c:	d018      	beq.n	800dd70 <__d2b+0x90>
 800dd3e:	4b17      	ldr	r3, [pc, #92]	; (800dd9c <__d2b+0xbc>)
 800dd40:	18f6      	adds	r6, r6, r3
 800dd42:	2335      	movs	r3, #53	; 0x35
 800dd44:	1836      	adds	r6, r6, r0
 800dd46:	1a18      	subs	r0, r3, r0
 800dd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd4a:	603e      	str	r6, [r7, #0]
 800dd4c:	6018      	str	r0, [r3, #0]
 800dd4e:	0028      	movs	r0, r5
 800dd50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd52:	2280      	movs	r2, #128	; 0x80
 800dd54:	0352      	lsls	r2, r2, #13
 800dd56:	4313      	orrs	r3, r2
 800dd58:	e7d6      	b.n	800dd08 <__d2b+0x28>
 800dd5a:	616c      	str	r4, [r5, #20]
 800dd5c:	e7e7      	b.n	800dd2e <__d2b+0x4e>
 800dd5e:	a801      	add	r0, sp, #4
 800dd60:	f7ff fd4a 	bl	800d7f8 <__lo0bits>
 800dd64:	2401      	movs	r4, #1
 800dd66:	9b01      	ldr	r3, [sp, #4]
 800dd68:	612c      	str	r4, [r5, #16]
 800dd6a:	616b      	str	r3, [r5, #20]
 800dd6c:	3020      	adds	r0, #32
 800dd6e:	e7e4      	b.n	800dd3a <__d2b+0x5a>
 800dd70:	4b0b      	ldr	r3, [pc, #44]	; (800dda0 <__d2b+0xc0>)
 800dd72:	18c0      	adds	r0, r0, r3
 800dd74:	4b0b      	ldr	r3, [pc, #44]	; (800dda4 <__d2b+0xc4>)
 800dd76:	6038      	str	r0, [r7, #0]
 800dd78:	18e3      	adds	r3, r4, r3
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	18eb      	adds	r3, r5, r3
 800dd7e:	6958      	ldr	r0, [r3, #20]
 800dd80:	f7ff fd20 	bl	800d7c4 <__hi0bits>
 800dd84:	0164      	lsls	r4, r4, #5
 800dd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd88:	1a24      	subs	r4, r4, r0
 800dd8a:	601c      	str	r4, [r3, #0]
 800dd8c:	e7df      	b.n	800dd4e <__d2b+0x6e>
 800dd8e:	46c0      	nop			; (mov r8, r8)
 800dd90:	0800f014 	.word	0x0800f014
 800dd94:	0000030a 	.word	0x0000030a
 800dd98:	0800f02f 	.word	0x0800f02f
 800dd9c:	fffffbcd 	.word	0xfffffbcd
 800dda0:	fffffbce 	.word	0xfffffbce
 800dda4:	3fffffff 	.word	0x3fffffff

0800dda8 <_calloc_r>:
 800dda8:	434a      	muls	r2, r1
 800ddaa:	b570      	push	{r4, r5, r6, lr}
 800ddac:	0011      	movs	r1, r2
 800ddae:	0015      	movs	r5, r2
 800ddb0:	f7fe f848 	bl	800be44 <_malloc_r>
 800ddb4:	1e04      	subs	r4, r0, #0
 800ddb6:	d003      	beq.n	800ddc0 <_calloc_r+0x18>
 800ddb8:	002a      	movs	r2, r5
 800ddba:	2100      	movs	r1, #0
 800ddbc:	f7fd ffef 	bl	800bd9e <memset>
 800ddc0:	0020      	movs	r0, r4
 800ddc2:	bd70      	pop	{r4, r5, r6, pc}

0800ddc4 <__ssputs_r>:
 800ddc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddc6:	688e      	ldr	r6, [r1, #8]
 800ddc8:	b085      	sub	sp, #20
 800ddca:	0007      	movs	r7, r0
 800ddcc:	000c      	movs	r4, r1
 800ddce:	9203      	str	r2, [sp, #12]
 800ddd0:	9301      	str	r3, [sp, #4]
 800ddd2:	429e      	cmp	r6, r3
 800ddd4:	d83c      	bhi.n	800de50 <__ssputs_r+0x8c>
 800ddd6:	2390      	movs	r3, #144	; 0x90
 800ddd8:	898a      	ldrh	r2, [r1, #12]
 800ddda:	00db      	lsls	r3, r3, #3
 800dddc:	421a      	tst	r2, r3
 800ddde:	d034      	beq.n	800de4a <__ssputs_r+0x86>
 800dde0:	2503      	movs	r5, #3
 800dde2:	6909      	ldr	r1, [r1, #16]
 800dde4:	6823      	ldr	r3, [r4, #0]
 800dde6:	1a5b      	subs	r3, r3, r1
 800dde8:	9302      	str	r3, [sp, #8]
 800ddea:	6963      	ldr	r3, [r4, #20]
 800ddec:	9802      	ldr	r0, [sp, #8]
 800ddee:	435d      	muls	r5, r3
 800ddf0:	0feb      	lsrs	r3, r5, #31
 800ddf2:	195d      	adds	r5, r3, r5
 800ddf4:	9b01      	ldr	r3, [sp, #4]
 800ddf6:	106d      	asrs	r5, r5, #1
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	181b      	adds	r3, r3, r0
 800ddfc:	42ab      	cmp	r3, r5
 800ddfe:	d900      	bls.n	800de02 <__ssputs_r+0x3e>
 800de00:	001d      	movs	r5, r3
 800de02:	0553      	lsls	r3, r2, #21
 800de04:	d532      	bpl.n	800de6c <__ssputs_r+0xa8>
 800de06:	0029      	movs	r1, r5
 800de08:	0038      	movs	r0, r7
 800de0a:	f7fe f81b 	bl	800be44 <_malloc_r>
 800de0e:	1e06      	subs	r6, r0, #0
 800de10:	d109      	bne.n	800de26 <__ssputs_r+0x62>
 800de12:	230c      	movs	r3, #12
 800de14:	603b      	str	r3, [r7, #0]
 800de16:	2340      	movs	r3, #64	; 0x40
 800de18:	2001      	movs	r0, #1
 800de1a:	89a2      	ldrh	r2, [r4, #12]
 800de1c:	4240      	negs	r0, r0
 800de1e:	4313      	orrs	r3, r2
 800de20:	81a3      	strh	r3, [r4, #12]
 800de22:	b005      	add	sp, #20
 800de24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de26:	9a02      	ldr	r2, [sp, #8]
 800de28:	6921      	ldr	r1, [r4, #16]
 800de2a:	f7fd ffaf 	bl	800bd8c <memcpy>
 800de2e:	89a3      	ldrh	r3, [r4, #12]
 800de30:	4a14      	ldr	r2, [pc, #80]	; (800de84 <__ssputs_r+0xc0>)
 800de32:	401a      	ands	r2, r3
 800de34:	2380      	movs	r3, #128	; 0x80
 800de36:	4313      	orrs	r3, r2
 800de38:	81a3      	strh	r3, [r4, #12]
 800de3a:	9b02      	ldr	r3, [sp, #8]
 800de3c:	6126      	str	r6, [r4, #16]
 800de3e:	18f6      	adds	r6, r6, r3
 800de40:	6026      	str	r6, [r4, #0]
 800de42:	6165      	str	r5, [r4, #20]
 800de44:	9e01      	ldr	r6, [sp, #4]
 800de46:	1aed      	subs	r5, r5, r3
 800de48:	60a5      	str	r5, [r4, #8]
 800de4a:	9b01      	ldr	r3, [sp, #4]
 800de4c:	429e      	cmp	r6, r3
 800de4e:	d900      	bls.n	800de52 <__ssputs_r+0x8e>
 800de50:	9e01      	ldr	r6, [sp, #4]
 800de52:	0032      	movs	r2, r6
 800de54:	9903      	ldr	r1, [sp, #12]
 800de56:	6820      	ldr	r0, [r4, #0]
 800de58:	f000 fd9a 	bl	800e990 <memmove>
 800de5c:	68a3      	ldr	r3, [r4, #8]
 800de5e:	2000      	movs	r0, #0
 800de60:	1b9b      	subs	r3, r3, r6
 800de62:	60a3      	str	r3, [r4, #8]
 800de64:	6823      	ldr	r3, [r4, #0]
 800de66:	199e      	adds	r6, r3, r6
 800de68:	6026      	str	r6, [r4, #0]
 800de6a:	e7da      	b.n	800de22 <__ssputs_r+0x5e>
 800de6c:	002a      	movs	r2, r5
 800de6e:	0038      	movs	r0, r7
 800de70:	f000 fda1 	bl	800e9b6 <_realloc_r>
 800de74:	1e06      	subs	r6, r0, #0
 800de76:	d1e0      	bne.n	800de3a <__ssputs_r+0x76>
 800de78:	0038      	movs	r0, r7
 800de7a:	6921      	ldr	r1, [r4, #16]
 800de7c:	f7fd ff98 	bl	800bdb0 <_free_r>
 800de80:	e7c7      	b.n	800de12 <__ssputs_r+0x4e>
 800de82:	46c0      	nop			; (mov r8, r8)
 800de84:	fffffb7f 	.word	0xfffffb7f

0800de88 <_svfiprintf_r>:
 800de88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de8a:	b0a1      	sub	sp, #132	; 0x84
 800de8c:	9003      	str	r0, [sp, #12]
 800de8e:	001d      	movs	r5, r3
 800de90:	898b      	ldrh	r3, [r1, #12]
 800de92:	000f      	movs	r7, r1
 800de94:	0016      	movs	r6, r2
 800de96:	061b      	lsls	r3, r3, #24
 800de98:	d511      	bpl.n	800debe <_svfiprintf_r+0x36>
 800de9a:	690b      	ldr	r3, [r1, #16]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10e      	bne.n	800debe <_svfiprintf_r+0x36>
 800dea0:	2140      	movs	r1, #64	; 0x40
 800dea2:	f7fd ffcf 	bl	800be44 <_malloc_r>
 800dea6:	6038      	str	r0, [r7, #0]
 800dea8:	6138      	str	r0, [r7, #16]
 800deaa:	2800      	cmp	r0, #0
 800deac:	d105      	bne.n	800deba <_svfiprintf_r+0x32>
 800deae:	230c      	movs	r3, #12
 800deb0:	9a03      	ldr	r2, [sp, #12]
 800deb2:	3801      	subs	r0, #1
 800deb4:	6013      	str	r3, [r2, #0]
 800deb6:	b021      	add	sp, #132	; 0x84
 800deb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deba:	2340      	movs	r3, #64	; 0x40
 800debc:	617b      	str	r3, [r7, #20]
 800debe:	2300      	movs	r3, #0
 800dec0:	ac08      	add	r4, sp, #32
 800dec2:	6163      	str	r3, [r4, #20]
 800dec4:	3320      	adds	r3, #32
 800dec6:	7663      	strb	r3, [r4, #25]
 800dec8:	3310      	adds	r3, #16
 800deca:	76a3      	strb	r3, [r4, #26]
 800decc:	9507      	str	r5, [sp, #28]
 800dece:	0035      	movs	r5, r6
 800ded0:	782b      	ldrb	r3, [r5, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <_svfiprintf_r+0x52>
 800ded6:	2b25      	cmp	r3, #37	; 0x25
 800ded8:	d147      	bne.n	800df6a <_svfiprintf_r+0xe2>
 800deda:	1bab      	subs	r3, r5, r6
 800dedc:	9305      	str	r3, [sp, #20]
 800dede:	42b5      	cmp	r5, r6
 800dee0:	d00c      	beq.n	800defc <_svfiprintf_r+0x74>
 800dee2:	0032      	movs	r2, r6
 800dee4:	0039      	movs	r1, r7
 800dee6:	9803      	ldr	r0, [sp, #12]
 800dee8:	f7ff ff6c 	bl	800ddc4 <__ssputs_r>
 800deec:	1c43      	adds	r3, r0, #1
 800deee:	d100      	bne.n	800def2 <_svfiprintf_r+0x6a>
 800def0:	e0ae      	b.n	800e050 <_svfiprintf_r+0x1c8>
 800def2:	6962      	ldr	r2, [r4, #20]
 800def4:	9b05      	ldr	r3, [sp, #20]
 800def6:	4694      	mov	ip, r2
 800def8:	4463      	add	r3, ip
 800defa:	6163      	str	r3, [r4, #20]
 800defc:	782b      	ldrb	r3, [r5, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d100      	bne.n	800df04 <_svfiprintf_r+0x7c>
 800df02:	e0a5      	b.n	800e050 <_svfiprintf_r+0x1c8>
 800df04:	2201      	movs	r2, #1
 800df06:	2300      	movs	r3, #0
 800df08:	4252      	negs	r2, r2
 800df0a:	6062      	str	r2, [r4, #4]
 800df0c:	a904      	add	r1, sp, #16
 800df0e:	3254      	adds	r2, #84	; 0x54
 800df10:	1852      	adds	r2, r2, r1
 800df12:	1c6e      	adds	r6, r5, #1
 800df14:	6023      	str	r3, [r4, #0]
 800df16:	60e3      	str	r3, [r4, #12]
 800df18:	60a3      	str	r3, [r4, #8]
 800df1a:	7013      	strb	r3, [r2, #0]
 800df1c:	65a3      	str	r3, [r4, #88]	; 0x58
 800df1e:	2205      	movs	r2, #5
 800df20:	7831      	ldrb	r1, [r6, #0]
 800df22:	4854      	ldr	r0, [pc, #336]	; (800e074 <_svfiprintf_r+0x1ec>)
 800df24:	f7ff fb86 	bl	800d634 <memchr>
 800df28:	1c75      	adds	r5, r6, #1
 800df2a:	2800      	cmp	r0, #0
 800df2c:	d11f      	bne.n	800df6e <_svfiprintf_r+0xe6>
 800df2e:	6822      	ldr	r2, [r4, #0]
 800df30:	06d3      	lsls	r3, r2, #27
 800df32:	d504      	bpl.n	800df3e <_svfiprintf_r+0xb6>
 800df34:	2353      	movs	r3, #83	; 0x53
 800df36:	a904      	add	r1, sp, #16
 800df38:	185b      	adds	r3, r3, r1
 800df3a:	2120      	movs	r1, #32
 800df3c:	7019      	strb	r1, [r3, #0]
 800df3e:	0713      	lsls	r3, r2, #28
 800df40:	d504      	bpl.n	800df4c <_svfiprintf_r+0xc4>
 800df42:	2353      	movs	r3, #83	; 0x53
 800df44:	a904      	add	r1, sp, #16
 800df46:	185b      	adds	r3, r3, r1
 800df48:	212b      	movs	r1, #43	; 0x2b
 800df4a:	7019      	strb	r1, [r3, #0]
 800df4c:	7833      	ldrb	r3, [r6, #0]
 800df4e:	2b2a      	cmp	r3, #42	; 0x2a
 800df50:	d016      	beq.n	800df80 <_svfiprintf_r+0xf8>
 800df52:	0035      	movs	r5, r6
 800df54:	2100      	movs	r1, #0
 800df56:	200a      	movs	r0, #10
 800df58:	68e3      	ldr	r3, [r4, #12]
 800df5a:	782a      	ldrb	r2, [r5, #0]
 800df5c:	1c6e      	adds	r6, r5, #1
 800df5e:	3a30      	subs	r2, #48	; 0x30
 800df60:	2a09      	cmp	r2, #9
 800df62:	d94e      	bls.n	800e002 <_svfiprintf_r+0x17a>
 800df64:	2900      	cmp	r1, #0
 800df66:	d111      	bne.n	800df8c <_svfiprintf_r+0x104>
 800df68:	e017      	b.n	800df9a <_svfiprintf_r+0x112>
 800df6a:	3501      	adds	r5, #1
 800df6c:	e7b0      	b.n	800ded0 <_svfiprintf_r+0x48>
 800df6e:	4b41      	ldr	r3, [pc, #260]	; (800e074 <_svfiprintf_r+0x1ec>)
 800df70:	6822      	ldr	r2, [r4, #0]
 800df72:	1ac0      	subs	r0, r0, r3
 800df74:	2301      	movs	r3, #1
 800df76:	4083      	lsls	r3, r0
 800df78:	4313      	orrs	r3, r2
 800df7a:	002e      	movs	r6, r5
 800df7c:	6023      	str	r3, [r4, #0]
 800df7e:	e7ce      	b.n	800df1e <_svfiprintf_r+0x96>
 800df80:	9b07      	ldr	r3, [sp, #28]
 800df82:	1d19      	adds	r1, r3, #4
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	9107      	str	r1, [sp, #28]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	db01      	blt.n	800df90 <_svfiprintf_r+0x108>
 800df8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800df8e:	e004      	b.n	800df9a <_svfiprintf_r+0x112>
 800df90:	425b      	negs	r3, r3
 800df92:	60e3      	str	r3, [r4, #12]
 800df94:	2302      	movs	r3, #2
 800df96:	4313      	orrs	r3, r2
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	782b      	ldrb	r3, [r5, #0]
 800df9c:	2b2e      	cmp	r3, #46	; 0x2e
 800df9e:	d10a      	bne.n	800dfb6 <_svfiprintf_r+0x12e>
 800dfa0:	786b      	ldrb	r3, [r5, #1]
 800dfa2:	2b2a      	cmp	r3, #42	; 0x2a
 800dfa4:	d135      	bne.n	800e012 <_svfiprintf_r+0x18a>
 800dfa6:	9b07      	ldr	r3, [sp, #28]
 800dfa8:	3502      	adds	r5, #2
 800dfaa:	1d1a      	adds	r2, r3, #4
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	9207      	str	r2, [sp, #28]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	db2b      	blt.n	800e00c <_svfiprintf_r+0x184>
 800dfb4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb6:	4e30      	ldr	r6, [pc, #192]	; (800e078 <_svfiprintf_r+0x1f0>)
 800dfb8:	2203      	movs	r2, #3
 800dfba:	0030      	movs	r0, r6
 800dfbc:	7829      	ldrb	r1, [r5, #0]
 800dfbe:	f7ff fb39 	bl	800d634 <memchr>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d006      	beq.n	800dfd4 <_svfiprintf_r+0x14c>
 800dfc6:	2340      	movs	r3, #64	; 0x40
 800dfc8:	1b80      	subs	r0, r0, r6
 800dfca:	4083      	lsls	r3, r0
 800dfcc:	6822      	ldr	r2, [r4, #0]
 800dfce:	3501      	adds	r5, #1
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	6023      	str	r3, [r4, #0]
 800dfd4:	7829      	ldrb	r1, [r5, #0]
 800dfd6:	2206      	movs	r2, #6
 800dfd8:	4828      	ldr	r0, [pc, #160]	; (800e07c <_svfiprintf_r+0x1f4>)
 800dfda:	1c6e      	adds	r6, r5, #1
 800dfdc:	7621      	strb	r1, [r4, #24]
 800dfde:	f7ff fb29 	bl	800d634 <memchr>
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d03c      	beq.n	800e060 <_svfiprintf_r+0x1d8>
 800dfe6:	4b26      	ldr	r3, [pc, #152]	; (800e080 <_svfiprintf_r+0x1f8>)
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d125      	bne.n	800e038 <_svfiprintf_r+0x1b0>
 800dfec:	2207      	movs	r2, #7
 800dfee:	9b07      	ldr	r3, [sp, #28]
 800dff0:	3307      	adds	r3, #7
 800dff2:	4393      	bics	r3, r2
 800dff4:	3308      	adds	r3, #8
 800dff6:	9307      	str	r3, [sp, #28]
 800dff8:	6963      	ldr	r3, [r4, #20]
 800dffa:	9a04      	ldr	r2, [sp, #16]
 800dffc:	189b      	adds	r3, r3, r2
 800dffe:	6163      	str	r3, [r4, #20]
 800e000:	e765      	b.n	800dece <_svfiprintf_r+0x46>
 800e002:	4343      	muls	r3, r0
 800e004:	0035      	movs	r5, r6
 800e006:	2101      	movs	r1, #1
 800e008:	189b      	adds	r3, r3, r2
 800e00a:	e7a6      	b.n	800df5a <_svfiprintf_r+0xd2>
 800e00c:	2301      	movs	r3, #1
 800e00e:	425b      	negs	r3, r3
 800e010:	e7d0      	b.n	800dfb4 <_svfiprintf_r+0x12c>
 800e012:	2300      	movs	r3, #0
 800e014:	200a      	movs	r0, #10
 800e016:	001a      	movs	r2, r3
 800e018:	3501      	adds	r5, #1
 800e01a:	6063      	str	r3, [r4, #4]
 800e01c:	7829      	ldrb	r1, [r5, #0]
 800e01e:	1c6e      	adds	r6, r5, #1
 800e020:	3930      	subs	r1, #48	; 0x30
 800e022:	2909      	cmp	r1, #9
 800e024:	d903      	bls.n	800e02e <_svfiprintf_r+0x1a6>
 800e026:	2b00      	cmp	r3, #0
 800e028:	d0c5      	beq.n	800dfb6 <_svfiprintf_r+0x12e>
 800e02a:	9209      	str	r2, [sp, #36]	; 0x24
 800e02c:	e7c3      	b.n	800dfb6 <_svfiprintf_r+0x12e>
 800e02e:	4342      	muls	r2, r0
 800e030:	0035      	movs	r5, r6
 800e032:	2301      	movs	r3, #1
 800e034:	1852      	adds	r2, r2, r1
 800e036:	e7f1      	b.n	800e01c <_svfiprintf_r+0x194>
 800e038:	ab07      	add	r3, sp, #28
 800e03a:	9300      	str	r3, [sp, #0]
 800e03c:	003a      	movs	r2, r7
 800e03e:	0021      	movs	r1, r4
 800e040:	4b10      	ldr	r3, [pc, #64]	; (800e084 <_svfiprintf_r+0x1fc>)
 800e042:	9803      	ldr	r0, [sp, #12]
 800e044:	f7fe f806 	bl	800c054 <_printf_float>
 800e048:	9004      	str	r0, [sp, #16]
 800e04a:	9b04      	ldr	r3, [sp, #16]
 800e04c:	3301      	adds	r3, #1
 800e04e:	d1d3      	bne.n	800dff8 <_svfiprintf_r+0x170>
 800e050:	89bb      	ldrh	r3, [r7, #12]
 800e052:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e054:	065b      	lsls	r3, r3, #25
 800e056:	d400      	bmi.n	800e05a <_svfiprintf_r+0x1d2>
 800e058:	e72d      	b.n	800deb6 <_svfiprintf_r+0x2e>
 800e05a:	2001      	movs	r0, #1
 800e05c:	4240      	negs	r0, r0
 800e05e:	e72a      	b.n	800deb6 <_svfiprintf_r+0x2e>
 800e060:	ab07      	add	r3, sp, #28
 800e062:	9300      	str	r3, [sp, #0]
 800e064:	003a      	movs	r2, r7
 800e066:	0021      	movs	r1, r4
 800e068:	4b06      	ldr	r3, [pc, #24]	; (800e084 <_svfiprintf_r+0x1fc>)
 800e06a:	9803      	ldr	r0, [sp, #12]
 800e06c:	f7fe fab0 	bl	800c5d0 <_printf_i>
 800e070:	e7ea      	b.n	800e048 <_svfiprintf_r+0x1c0>
 800e072:	46c0      	nop			; (mov r8, r8)
 800e074:	0800f18c 	.word	0x0800f18c
 800e078:	0800f192 	.word	0x0800f192
 800e07c:	0800f196 	.word	0x0800f196
 800e080:	0800c055 	.word	0x0800c055
 800e084:	0800ddc5 	.word	0x0800ddc5

0800e088 <__sfputc_r>:
 800e088:	6893      	ldr	r3, [r2, #8]
 800e08a:	b510      	push	{r4, lr}
 800e08c:	3b01      	subs	r3, #1
 800e08e:	6093      	str	r3, [r2, #8]
 800e090:	2b00      	cmp	r3, #0
 800e092:	da04      	bge.n	800e09e <__sfputc_r+0x16>
 800e094:	6994      	ldr	r4, [r2, #24]
 800e096:	42a3      	cmp	r3, r4
 800e098:	db07      	blt.n	800e0aa <__sfputc_r+0x22>
 800e09a:	290a      	cmp	r1, #10
 800e09c:	d005      	beq.n	800e0aa <__sfputc_r+0x22>
 800e09e:	6813      	ldr	r3, [r2, #0]
 800e0a0:	1c58      	adds	r0, r3, #1
 800e0a2:	6010      	str	r0, [r2, #0]
 800e0a4:	7019      	strb	r1, [r3, #0]
 800e0a6:	0008      	movs	r0, r1
 800e0a8:	bd10      	pop	{r4, pc}
 800e0aa:	f000 f94f 	bl	800e34c <__swbuf_r>
 800e0ae:	0001      	movs	r1, r0
 800e0b0:	e7f9      	b.n	800e0a6 <__sfputc_r+0x1e>

0800e0b2 <__sfputs_r>:
 800e0b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0b4:	0006      	movs	r6, r0
 800e0b6:	000f      	movs	r7, r1
 800e0b8:	0014      	movs	r4, r2
 800e0ba:	18d5      	adds	r5, r2, r3
 800e0bc:	42ac      	cmp	r4, r5
 800e0be:	d101      	bne.n	800e0c4 <__sfputs_r+0x12>
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	e007      	b.n	800e0d4 <__sfputs_r+0x22>
 800e0c4:	7821      	ldrb	r1, [r4, #0]
 800e0c6:	003a      	movs	r2, r7
 800e0c8:	0030      	movs	r0, r6
 800e0ca:	f7ff ffdd 	bl	800e088 <__sfputc_r>
 800e0ce:	3401      	adds	r4, #1
 800e0d0:	1c43      	adds	r3, r0, #1
 800e0d2:	d1f3      	bne.n	800e0bc <__sfputs_r+0xa>
 800e0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0d8 <_vfiprintf_r>:
 800e0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0da:	b0a1      	sub	sp, #132	; 0x84
 800e0dc:	0006      	movs	r6, r0
 800e0de:	000c      	movs	r4, r1
 800e0e0:	001f      	movs	r7, r3
 800e0e2:	9203      	str	r2, [sp, #12]
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	d004      	beq.n	800e0f2 <_vfiprintf_r+0x1a>
 800e0e8:	6983      	ldr	r3, [r0, #24]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <_vfiprintf_r+0x1a>
 800e0ee:	f000 fb3f 	bl	800e770 <__sinit>
 800e0f2:	4b8e      	ldr	r3, [pc, #568]	; (800e32c <_vfiprintf_r+0x254>)
 800e0f4:	429c      	cmp	r4, r3
 800e0f6:	d11c      	bne.n	800e132 <_vfiprintf_r+0x5a>
 800e0f8:	6874      	ldr	r4, [r6, #4]
 800e0fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0fc:	07db      	lsls	r3, r3, #31
 800e0fe:	d405      	bmi.n	800e10c <_vfiprintf_r+0x34>
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	059b      	lsls	r3, r3, #22
 800e104:	d402      	bmi.n	800e10c <_vfiprintf_r+0x34>
 800e106:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e108:	f000 fbd3 	bl	800e8b2 <__retarget_lock_acquire_recursive>
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	071b      	lsls	r3, r3, #28
 800e110:	d502      	bpl.n	800e118 <_vfiprintf_r+0x40>
 800e112:	6923      	ldr	r3, [r4, #16]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d11d      	bne.n	800e154 <_vfiprintf_r+0x7c>
 800e118:	0021      	movs	r1, r4
 800e11a:	0030      	movs	r0, r6
 800e11c:	f000 f97a 	bl	800e414 <__swsetup_r>
 800e120:	2800      	cmp	r0, #0
 800e122:	d017      	beq.n	800e154 <_vfiprintf_r+0x7c>
 800e124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e126:	07db      	lsls	r3, r3, #31
 800e128:	d50d      	bpl.n	800e146 <_vfiprintf_r+0x6e>
 800e12a:	2001      	movs	r0, #1
 800e12c:	4240      	negs	r0, r0
 800e12e:	b021      	add	sp, #132	; 0x84
 800e130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e132:	4b7f      	ldr	r3, [pc, #508]	; (800e330 <_vfiprintf_r+0x258>)
 800e134:	429c      	cmp	r4, r3
 800e136:	d101      	bne.n	800e13c <_vfiprintf_r+0x64>
 800e138:	68b4      	ldr	r4, [r6, #8]
 800e13a:	e7de      	b.n	800e0fa <_vfiprintf_r+0x22>
 800e13c:	4b7d      	ldr	r3, [pc, #500]	; (800e334 <_vfiprintf_r+0x25c>)
 800e13e:	429c      	cmp	r4, r3
 800e140:	d1db      	bne.n	800e0fa <_vfiprintf_r+0x22>
 800e142:	68f4      	ldr	r4, [r6, #12]
 800e144:	e7d9      	b.n	800e0fa <_vfiprintf_r+0x22>
 800e146:	89a3      	ldrh	r3, [r4, #12]
 800e148:	059b      	lsls	r3, r3, #22
 800e14a:	d4ee      	bmi.n	800e12a <_vfiprintf_r+0x52>
 800e14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e14e:	f000 fbb1 	bl	800e8b4 <__retarget_lock_release_recursive>
 800e152:	e7ea      	b.n	800e12a <_vfiprintf_r+0x52>
 800e154:	2300      	movs	r3, #0
 800e156:	ad08      	add	r5, sp, #32
 800e158:	616b      	str	r3, [r5, #20]
 800e15a:	3320      	adds	r3, #32
 800e15c:	766b      	strb	r3, [r5, #25]
 800e15e:	3310      	adds	r3, #16
 800e160:	76ab      	strb	r3, [r5, #26]
 800e162:	9707      	str	r7, [sp, #28]
 800e164:	9f03      	ldr	r7, [sp, #12]
 800e166:	783b      	ldrb	r3, [r7, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d001      	beq.n	800e170 <_vfiprintf_r+0x98>
 800e16c:	2b25      	cmp	r3, #37	; 0x25
 800e16e:	d14e      	bne.n	800e20e <_vfiprintf_r+0x136>
 800e170:	9b03      	ldr	r3, [sp, #12]
 800e172:	1afb      	subs	r3, r7, r3
 800e174:	9305      	str	r3, [sp, #20]
 800e176:	9b03      	ldr	r3, [sp, #12]
 800e178:	429f      	cmp	r7, r3
 800e17a:	d00d      	beq.n	800e198 <_vfiprintf_r+0xc0>
 800e17c:	9b05      	ldr	r3, [sp, #20]
 800e17e:	0021      	movs	r1, r4
 800e180:	0030      	movs	r0, r6
 800e182:	9a03      	ldr	r2, [sp, #12]
 800e184:	f7ff ff95 	bl	800e0b2 <__sfputs_r>
 800e188:	1c43      	adds	r3, r0, #1
 800e18a:	d100      	bne.n	800e18e <_vfiprintf_r+0xb6>
 800e18c:	e0b5      	b.n	800e2fa <_vfiprintf_r+0x222>
 800e18e:	696a      	ldr	r2, [r5, #20]
 800e190:	9b05      	ldr	r3, [sp, #20]
 800e192:	4694      	mov	ip, r2
 800e194:	4463      	add	r3, ip
 800e196:	616b      	str	r3, [r5, #20]
 800e198:	783b      	ldrb	r3, [r7, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d100      	bne.n	800e1a0 <_vfiprintf_r+0xc8>
 800e19e:	e0ac      	b.n	800e2fa <_vfiprintf_r+0x222>
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	1c7b      	adds	r3, r7, #1
 800e1a4:	9303      	str	r3, [sp, #12]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	4252      	negs	r2, r2
 800e1aa:	606a      	str	r2, [r5, #4]
 800e1ac:	a904      	add	r1, sp, #16
 800e1ae:	3254      	adds	r2, #84	; 0x54
 800e1b0:	1852      	adds	r2, r2, r1
 800e1b2:	602b      	str	r3, [r5, #0]
 800e1b4:	60eb      	str	r3, [r5, #12]
 800e1b6:	60ab      	str	r3, [r5, #8]
 800e1b8:	7013      	strb	r3, [r2, #0]
 800e1ba:	65ab      	str	r3, [r5, #88]	; 0x58
 800e1bc:	9b03      	ldr	r3, [sp, #12]
 800e1be:	2205      	movs	r2, #5
 800e1c0:	7819      	ldrb	r1, [r3, #0]
 800e1c2:	485d      	ldr	r0, [pc, #372]	; (800e338 <_vfiprintf_r+0x260>)
 800e1c4:	f7ff fa36 	bl	800d634 <memchr>
 800e1c8:	9b03      	ldr	r3, [sp, #12]
 800e1ca:	1c5f      	adds	r7, r3, #1
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	d120      	bne.n	800e212 <_vfiprintf_r+0x13a>
 800e1d0:	682a      	ldr	r2, [r5, #0]
 800e1d2:	06d3      	lsls	r3, r2, #27
 800e1d4:	d504      	bpl.n	800e1e0 <_vfiprintf_r+0x108>
 800e1d6:	2353      	movs	r3, #83	; 0x53
 800e1d8:	a904      	add	r1, sp, #16
 800e1da:	185b      	adds	r3, r3, r1
 800e1dc:	2120      	movs	r1, #32
 800e1de:	7019      	strb	r1, [r3, #0]
 800e1e0:	0713      	lsls	r3, r2, #28
 800e1e2:	d504      	bpl.n	800e1ee <_vfiprintf_r+0x116>
 800e1e4:	2353      	movs	r3, #83	; 0x53
 800e1e6:	a904      	add	r1, sp, #16
 800e1e8:	185b      	adds	r3, r3, r1
 800e1ea:	212b      	movs	r1, #43	; 0x2b
 800e1ec:	7019      	strb	r1, [r3, #0]
 800e1ee:	9b03      	ldr	r3, [sp, #12]
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	2b2a      	cmp	r3, #42	; 0x2a
 800e1f4:	d016      	beq.n	800e224 <_vfiprintf_r+0x14c>
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	68eb      	ldr	r3, [r5, #12]
 800e1fa:	9f03      	ldr	r7, [sp, #12]
 800e1fc:	783a      	ldrb	r2, [r7, #0]
 800e1fe:	1c78      	adds	r0, r7, #1
 800e200:	3a30      	subs	r2, #48	; 0x30
 800e202:	4684      	mov	ip, r0
 800e204:	2a09      	cmp	r2, #9
 800e206:	d94f      	bls.n	800e2a8 <_vfiprintf_r+0x1d0>
 800e208:	2900      	cmp	r1, #0
 800e20a:	d111      	bne.n	800e230 <_vfiprintf_r+0x158>
 800e20c:	e017      	b.n	800e23e <_vfiprintf_r+0x166>
 800e20e:	3701      	adds	r7, #1
 800e210:	e7a9      	b.n	800e166 <_vfiprintf_r+0x8e>
 800e212:	4b49      	ldr	r3, [pc, #292]	; (800e338 <_vfiprintf_r+0x260>)
 800e214:	682a      	ldr	r2, [r5, #0]
 800e216:	1ac0      	subs	r0, r0, r3
 800e218:	2301      	movs	r3, #1
 800e21a:	4083      	lsls	r3, r0
 800e21c:	4313      	orrs	r3, r2
 800e21e:	602b      	str	r3, [r5, #0]
 800e220:	9703      	str	r7, [sp, #12]
 800e222:	e7cb      	b.n	800e1bc <_vfiprintf_r+0xe4>
 800e224:	9b07      	ldr	r3, [sp, #28]
 800e226:	1d19      	adds	r1, r3, #4
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	9107      	str	r1, [sp, #28]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	db01      	blt.n	800e234 <_vfiprintf_r+0x15c>
 800e230:	930b      	str	r3, [sp, #44]	; 0x2c
 800e232:	e004      	b.n	800e23e <_vfiprintf_r+0x166>
 800e234:	425b      	negs	r3, r3
 800e236:	60eb      	str	r3, [r5, #12]
 800e238:	2302      	movs	r3, #2
 800e23a:	4313      	orrs	r3, r2
 800e23c:	602b      	str	r3, [r5, #0]
 800e23e:	783b      	ldrb	r3, [r7, #0]
 800e240:	2b2e      	cmp	r3, #46	; 0x2e
 800e242:	d10a      	bne.n	800e25a <_vfiprintf_r+0x182>
 800e244:	787b      	ldrb	r3, [r7, #1]
 800e246:	2b2a      	cmp	r3, #42	; 0x2a
 800e248:	d137      	bne.n	800e2ba <_vfiprintf_r+0x1e2>
 800e24a:	9b07      	ldr	r3, [sp, #28]
 800e24c:	3702      	adds	r7, #2
 800e24e:	1d1a      	adds	r2, r3, #4
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	9207      	str	r2, [sp, #28]
 800e254:	2b00      	cmp	r3, #0
 800e256:	db2d      	blt.n	800e2b4 <_vfiprintf_r+0x1dc>
 800e258:	9309      	str	r3, [sp, #36]	; 0x24
 800e25a:	2203      	movs	r2, #3
 800e25c:	7839      	ldrb	r1, [r7, #0]
 800e25e:	4837      	ldr	r0, [pc, #220]	; (800e33c <_vfiprintf_r+0x264>)
 800e260:	f7ff f9e8 	bl	800d634 <memchr>
 800e264:	2800      	cmp	r0, #0
 800e266:	d007      	beq.n	800e278 <_vfiprintf_r+0x1a0>
 800e268:	4b34      	ldr	r3, [pc, #208]	; (800e33c <_vfiprintf_r+0x264>)
 800e26a:	682a      	ldr	r2, [r5, #0]
 800e26c:	1ac0      	subs	r0, r0, r3
 800e26e:	2340      	movs	r3, #64	; 0x40
 800e270:	4083      	lsls	r3, r0
 800e272:	4313      	orrs	r3, r2
 800e274:	3701      	adds	r7, #1
 800e276:	602b      	str	r3, [r5, #0]
 800e278:	7839      	ldrb	r1, [r7, #0]
 800e27a:	1c7b      	adds	r3, r7, #1
 800e27c:	2206      	movs	r2, #6
 800e27e:	4830      	ldr	r0, [pc, #192]	; (800e340 <_vfiprintf_r+0x268>)
 800e280:	9303      	str	r3, [sp, #12]
 800e282:	7629      	strb	r1, [r5, #24]
 800e284:	f7ff f9d6 	bl	800d634 <memchr>
 800e288:	2800      	cmp	r0, #0
 800e28a:	d045      	beq.n	800e318 <_vfiprintf_r+0x240>
 800e28c:	4b2d      	ldr	r3, [pc, #180]	; (800e344 <_vfiprintf_r+0x26c>)
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d127      	bne.n	800e2e2 <_vfiprintf_r+0x20a>
 800e292:	2207      	movs	r2, #7
 800e294:	9b07      	ldr	r3, [sp, #28]
 800e296:	3307      	adds	r3, #7
 800e298:	4393      	bics	r3, r2
 800e29a:	3308      	adds	r3, #8
 800e29c:	9307      	str	r3, [sp, #28]
 800e29e:	696b      	ldr	r3, [r5, #20]
 800e2a0:	9a04      	ldr	r2, [sp, #16]
 800e2a2:	189b      	adds	r3, r3, r2
 800e2a4:	616b      	str	r3, [r5, #20]
 800e2a6:	e75d      	b.n	800e164 <_vfiprintf_r+0x8c>
 800e2a8:	210a      	movs	r1, #10
 800e2aa:	434b      	muls	r3, r1
 800e2ac:	4667      	mov	r7, ip
 800e2ae:	189b      	adds	r3, r3, r2
 800e2b0:	3909      	subs	r1, #9
 800e2b2:	e7a3      	b.n	800e1fc <_vfiprintf_r+0x124>
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	425b      	negs	r3, r3
 800e2b8:	e7ce      	b.n	800e258 <_vfiprintf_r+0x180>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	001a      	movs	r2, r3
 800e2be:	3701      	adds	r7, #1
 800e2c0:	606b      	str	r3, [r5, #4]
 800e2c2:	7839      	ldrb	r1, [r7, #0]
 800e2c4:	1c78      	adds	r0, r7, #1
 800e2c6:	3930      	subs	r1, #48	; 0x30
 800e2c8:	4684      	mov	ip, r0
 800e2ca:	2909      	cmp	r1, #9
 800e2cc:	d903      	bls.n	800e2d6 <_vfiprintf_r+0x1fe>
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d0c3      	beq.n	800e25a <_vfiprintf_r+0x182>
 800e2d2:	9209      	str	r2, [sp, #36]	; 0x24
 800e2d4:	e7c1      	b.n	800e25a <_vfiprintf_r+0x182>
 800e2d6:	230a      	movs	r3, #10
 800e2d8:	435a      	muls	r2, r3
 800e2da:	4667      	mov	r7, ip
 800e2dc:	1852      	adds	r2, r2, r1
 800e2de:	3b09      	subs	r3, #9
 800e2e0:	e7ef      	b.n	800e2c2 <_vfiprintf_r+0x1ea>
 800e2e2:	ab07      	add	r3, sp, #28
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	0022      	movs	r2, r4
 800e2e8:	0029      	movs	r1, r5
 800e2ea:	0030      	movs	r0, r6
 800e2ec:	4b16      	ldr	r3, [pc, #88]	; (800e348 <_vfiprintf_r+0x270>)
 800e2ee:	f7fd feb1 	bl	800c054 <_printf_float>
 800e2f2:	9004      	str	r0, [sp, #16]
 800e2f4:	9b04      	ldr	r3, [sp, #16]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	d1d1      	bne.n	800e29e <_vfiprintf_r+0x1c6>
 800e2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2fc:	07db      	lsls	r3, r3, #31
 800e2fe:	d405      	bmi.n	800e30c <_vfiprintf_r+0x234>
 800e300:	89a3      	ldrh	r3, [r4, #12]
 800e302:	059b      	lsls	r3, r3, #22
 800e304:	d402      	bmi.n	800e30c <_vfiprintf_r+0x234>
 800e306:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e308:	f000 fad4 	bl	800e8b4 <__retarget_lock_release_recursive>
 800e30c:	89a3      	ldrh	r3, [r4, #12]
 800e30e:	065b      	lsls	r3, r3, #25
 800e310:	d500      	bpl.n	800e314 <_vfiprintf_r+0x23c>
 800e312:	e70a      	b.n	800e12a <_vfiprintf_r+0x52>
 800e314:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e316:	e70a      	b.n	800e12e <_vfiprintf_r+0x56>
 800e318:	ab07      	add	r3, sp, #28
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	0022      	movs	r2, r4
 800e31e:	0029      	movs	r1, r5
 800e320:	0030      	movs	r0, r6
 800e322:	4b09      	ldr	r3, [pc, #36]	; (800e348 <_vfiprintf_r+0x270>)
 800e324:	f7fe f954 	bl	800c5d0 <_printf_i>
 800e328:	e7e3      	b.n	800e2f2 <_vfiprintf_r+0x21a>
 800e32a:	46c0      	nop			; (mov r8, r8)
 800e32c:	0800f1c0 	.word	0x0800f1c0
 800e330:	0800f1e0 	.word	0x0800f1e0
 800e334:	0800f1a0 	.word	0x0800f1a0
 800e338:	0800f18c 	.word	0x0800f18c
 800e33c:	0800f192 	.word	0x0800f192
 800e340:	0800f196 	.word	0x0800f196
 800e344:	0800c055 	.word	0x0800c055
 800e348:	0800e0b3 	.word	0x0800e0b3

0800e34c <__swbuf_r>:
 800e34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34e:	0005      	movs	r5, r0
 800e350:	000e      	movs	r6, r1
 800e352:	0014      	movs	r4, r2
 800e354:	2800      	cmp	r0, #0
 800e356:	d004      	beq.n	800e362 <__swbuf_r+0x16>
 800e358:	6983      	ldr	r3, [r0, #24]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d101      	bne.n	800e362 <__swbuf_r+0x16>
 800e35e:	f000 fa07 	bl	800e770 <__sinit>
 800e362:	4b22      	ldr	r3, [pc, #136]	; (800e3ec <__swbuf_r+0xa0>)
 800e364:	429c      	cmp	r4, r3
 800e366:	d12e      	bne.n	800e3c6 <__swbuf_r+0x7a>
 800e368:	686c      	ldr	r4, [r5, #4]
 800e36a:	69a3      	ldr	r3, [r4, #24]
 800e36c:	60a3      	str	r3, [r4, #8]
 800e36e:	89a3      	ldrh	r3, [r4, #12]
 800e370:	071b      	lsls	r3, r3, #28
 800e372:	d532      	bpl.n	800e3da <__swbuf_r+0x8e>
 800e374:	6923      	ldr	r3, [r4, #16]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d02f      	beq.n	800e3da <__swbuf_r+0x8e>
 800e37a:	6823      	ldr	r3, [r4, #0]
 800e37c:	6922      	ldr	r2, [r4, #16]
 800e37e:	b2f7      	uxtb	r7, r6
 800e380:	1a98      	subs	r0, r3, r2
 800e382:	6963      	ldr	r3, [r4, #20]
 800e384:	b2f6      	uxtb	r6, r6
 800e386:	4283      	cmp	r3, r0
 800e388:	dc05      	bgt.n	800e396 <__swbuf_r+0x4a>
 800e38a:	0021      	movs	r1, r4
 800e38c:	0028      	movs	r0, r5
 800e38e:	f000 f94d 	bl	800e62c <_fflush_r>
 800e392:	2800      	cmp	r0, #0
 800e394:	d127      	bne.n	800e3e6 <__swbuf_r+0x9a>
 800e396:	68a3      	ldr	r3, [r4, #8]
 800e398:	3001      	adds	r0, #1
 800e39a:	3b01      	subs	r3, #1
 800e39c:	60a3      	str	r3, [r4, #8]
 800e39e:	6823      	ldr	r3, [r4, #0]
 800e3a0:	1c5a      	adds	r2, r3, #1
 800e3a2:	6022      	str	r2, [r4, #0]
 800e3a4:	701f      	strb	r7, [r3, #0]
 800e3a6:	6963      	ldr	r3, [r4, #20]
 800e3a8:	4283      	cmp	r3, r0
 800e3aa:	d004      	beq.n	800e3b6 <__swbuf_r+0x6a>
 800e3ac:	89a3      	ldrh	r3, [r4, #12]
 800e3ae:	07db      	lsls	r3, r3, #31
 800e3b0:	d507      	bpl.n	800e3c2 <__swbuf_r+0x76>
 800e3b2:	2e0a      	cmp	r6, #10
 800e3b4:	d105      	bne.n	800e3c2 <__swbuf_r+0x76>
 800e3b6:	0021      	movs	r1, r4
 800e3b8:	0028      	movs	r0, r5
 800e3ba:	f000 f937 	bl	800e62c <_fflush_r>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d111      	bne.n	800e3e6 <__swbuf_r+0x9a>
 800e3c2:	0030      	movs	r0, r6
 800e3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3c6:	4b0a      	ldr	r3, [pc, #40]	; (800e3f0 <__swbuf_r+0xa4>)
 800e3c8:	429c      	cmp	r4, r3
 800e3ca:	d101      	bne.n	800e3d0 <__swbuf_r+0x84>
 800e3cc:	68ac      	ldr	r4, [r5, #8]
 800e3ce:	e7cc      	b.n	800e36a <__swbuf_r+0x1e>
 800e3d0:	4b08      	ldr	r3, [pc, #32]	; (800e3f4 <__swbuf_r+0xa8>)
 800e3d2:	429c      	cmp	r4, r3
 800e3d4:	d1c9      	bne.n	800e36a <__swbuf_r+0x1e>
 800e3d6:	68ec      	ldr	r4, [r5, #12]
 800e3d8:	e7c7      	b.n	800e36a <__swbuf_r+0x1e>
 800e3da:	0021      	movs	r1, r4
 800e3dc:	0028      	movs	r0, r5
 800e3de:	f000 f819 	bl	800e414 <__swsetup_r>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d0c9      	beq.n	800e37a <__swbuf_r+0x2e>
 800e3e6:	2601      	movs	r6, #1
 800e3e8:	4276      	negs	r6, r6
 800e3ea:	e7ea      	b.n	800e3c2 <__swbuf_r+0x76>
 800e3ec:	0800f1c0 	.word	0x0800f1c0
 800e3f0:	0800f1e0 	.word	0x0800f1e0
 800e3f4:	0800f1a0 	.word	0x0800f1a0

0800e3f8 <__ascii_wctomb>:
 800e3f8:	0003      	movs	r3, r0
 800e3fa:	1e08      	subs	r0, r1, #0
 800e3fc:	d005      	beq.n	800e40a <__ascii_wctomb+0x12>
 800e3fe:	2aff      	cmp	r2, #255	; 0xff
 800e400:	d904      	bls.n	800e40c <__ascii_wctomb+0x14>
 800e402:	228a      	movs	r2, #138	; 0x8a
 800e404:	2001      	movs	r0, #1
 800e406:	601a      	str	r2, [r3, #0]
 800e408:	4240      	negs	r0, r0
 800e40a:	4770      	bx	lr
 800e40c:	2001      	movs	r0, #1
 800e40e:	700a      	strb	r2, [r1, #0]
 800e410:	e7fb      	b.n	800e40a <__ascii_wctomb+0x12>
	...

0800e414 <__swsetup_r>:
 800e414:	4b37      	ldr	r3, [pc, #220]	; (800e4f4 <__swsetup_r+0xe0>)
 800e416:	b570      	push	{r4, r5, r6, lr}
 800e418:	681d      	ldr	r5, [r3, #0]
 800e41a:	0006      	movs	r6, r0
 800e41c:	000c      	movs	r4, r1
 800e41e:	2d00      	cmp	r5, #0
 800e420:	d005      	beq.n	800e42e <__swsetup_r+0x1a>
 800e422:	69ab      	ldr	r3, [r5, #24]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d102      	bne.n	800e42e <__swsetup_r+0x1a>
 800e428:	0028      	movs	r0, r5
 800e42a:	f000 f9a1 	bl	800e770 <__sinit>
 800e42e:	4b32      	ldr	r3, [pc, #200]	; (800e4f8 <__swsetup_r+0xe4>)
 800e430:	429c      	cmp	r4, r3
 800e432:	d10f      	bne.n	800e454 <__swsetup_r+0x40>
 800e434:	686c      	ldr	r4, [r5, #4]
 800e436:	230c      	movs	r3, #12
 800e438:	5ee2      	ldrsh	r2, [r4, r3]
 800e43a:	b293      	uxth	r3, r2
 800e43c:	0711      	lsls	r1, r2, #28
 800e43e:	d42d      	bmi.n	800e49c <__swsetup_r+0x88>
 800e440:	06d9      	lsls	r1, r3, #27
 800e442:	d411      	bmi.n	800e468 <__swsetup_r+0x54>
 800e444:	2309      	movs	r3, #9
 800e446:	2001      	movs	r0, #1
 800e448:	6033      	str	r3, [r6, #0]
 800e44a:	3337      	adds	r3, #55	; 0x37
 800e44c:	4313      	orrs	r3, r2
 800e44e:	81a3      	strh	r3, [r4, #12]
 800e450:	4240      	negs	r0, r0
 800e452:	bd70      	pop	{r4, r5, r6, pc}
 800e454:	4b29      	ldr	r3, [pc, #164]	; (800e4fc <__swsetup_r+0xe8>)
 800e456:	429c      	cmp	r4, r3
 800e458:	d101      	bne.n	800e45e <__swsetup_r+0x4a>
 800e45a:	68ac      	ldr	r4, [r5, #8]
 800e45c:	e7eb      	b.n	800e436 <__swsetup_r+0x22>
 800e45e:	4b28      	ldr	r3, [pc, #160]	; (800e500 <__swsetup_r+0xec>)
 800e460:	429c      	cmp	r4, r3
 800e462:	d1e8      	bne.n	800e436 <__swsetup_r+0x22>
 800e464:	68ec      	ldr	r4, [r5, #12]
 800e466:	e7e6      	b.n	800e436 <__swsetup_r+0x22>
 800e468:	075b      	lsls	r3, r3, #29
 800e46a:	d513      	bpl.n	800e494 <__swsetup_r+0x80>
 800e46c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e46e:	2900      	cmp	r1, #0
 800e470:	d008      	beq.n	800e484 <__swsetup_r+0x70>
 800e472:	0023      	movs	r3, r4
 800e474:	3344      	adds	r3, #68	; 0x44
 800e476:	4299      	cmp	r1, r3
 800e478:	d002      	beq.n	800e480 <__swsetup_r+0x6c>
 800e47a:	0030      	movs	r0, r6
 800e47c:	f7fd fc98 	bl	800bdb0 <_free_r>
 800e480:	2300      	movs	r3, #0
 800e482:	6363      	str	r3, [r4, #52]	; 0x34
 800e484:	2224      	movs	r2, #36	; 0x24
 800e486:	89a3      	ldrh	r3, [r4, #12]
 800e488:	4393      	bics	r3, r2
 800e48a:	81a3      	strh	r3, [r4, #12]
 800e48c:	2300      	movs	r3, #0
 800e48e:	6063      	str	r3, [r4, #4]
 800e490:	6923      	ldr	r3, [r4, #16]
 800e492:	6023      	str	r3, [r4, #0]
 800e494:	2308      	movs	r3, #8
 800e496:	89a2      	ldrh	r2, [r4, #12]
 800e498:	4313      	orrs	r3, r2
 800e49a:	81a3      	strh	r3, [r4, #12]
 800e49c:	6923      	ldr	r3, [r4, #16]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d10b      	bne.n	800e4ba <__swsetup_r+0xa6>
 800e4a2:	21a0      	movs	r1, #160	; 0xa0
 800e4a4:	2280      	movs	r2, #128	; 0x80
 800e4a6:	89a3      	ldrh	r3, [r4, #12]
 800e4a8:	0089      	lsls	r1, r1, #2
 800e4aa:	0092      	lsls	r2, r2, #2
 800e4ac:	400b      	ands	r3, r1
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d003      	beq.n	800e4ba <__swsetup_r+0xa6>
 800e4b2:	0021      	movs	r1, r4
 800e4b4:	0030      	movs	r0, r6
 800e4b6:	f000 fa27 	bl	800e908 <__smakebuf_r>
 800e4ba:	220c      	movs	r2, #12
 800e4bc:	5ea3      	ldrsh	r3, [r4, r2]
 800e4be:	2001      	movs	r0, #1
 800e4c0:	001a      	movs	r2, r3
 800e4c2:	b299      	uxth	r1, r3
 800e4c4:	4002      	ands	r2, r0
 800e4c6:	4203      	tst	r3, r0
 800e4c8:	d00f      	beq.n	800e4ea <__swsetup_r+0xd6>
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	60a2      	str	r2, [r4, #8]
 800e4ce:	6962      	ldr	r2, [r4, #20]
 800e4d0:	4252      	negs	r2, r2
 800e4d2:	61a2      	str	r2, [r4, #24]
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	6922      	ldr	r2, [r4, #16]
 800e4d8:	4282      	cmp	r2, r0
 800e4da:	d1ba      	bne.n	800e452 <__swsetup_r+0x3e>
 800e4dc:	060a      	lsls	r2, r1, #24
 800e4de:	d5b8      	bpl.n	800e452 <__swsetup_r+0x3e>
 800e4e0:	2240      	movs	r2, #64	; 0x40
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	81a3      	strh	r3, [r4, #12]
 800e4e6:	3801      	subs	r0, #1
 800e4e8:	e7b3      	b.n	800e452 <__swsetup_r+0x3e>
 800e4ea:	0788      	lsls	r0, r1, #30
 800e4ec:	d400      	bmi.n	800e4f0 <__swsetup_r+0xdc>
 800e4ee:	6962      	ldr	r2, [r4, #20]
 800e4f0:	60a2      	str	r2, [r4, #8]
 800e4f2:	e7ef      	b.n	800e4d4 <__swsetup_r+0xc0>
 800e4f4:	2000002c 	.word	0x2000002c
 800e4f8:	0800f1c0 	.word	0x0800f1c0
 800e4fc:	0800f1e0 	.word	0x0800f1e0
 800e500:	0800f1a0 	.word	0x0800f1a0

0800e504 <abort>:
 800e504:	2006      	movs	r0, #6
 800e506:	b510      	push	{r4, lr}
 800e508:	f000 faa6 	bl	800ea58 <raise>
 800e50c:	2001      	movs	r0, #1
 800e50e:	f7f5 f8e9 	bl	80036e4 <_exit>
	...

0800e514 <__sflush_r>:
 800e514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e516:	898b      	ldrh	r3, [r1, #12]
 800e518:	0005      	movs	r5, r0
 800e51a:	000c      	movs	r4, r1
 800e51c:	071a      	lsls	r2, r3, #28
 800e51e:	d45f      	bmi.n	800e5e0 <__sflush_r+0xcc>
 800e520:	684a      	ldr	r2, [r1, #4]
 800e522:	2a00      	cmp	r2, #0
 800e524:	dc04      	bgt.n	800e530 <__sflush_r+0x1c>
 800e526:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800e528:	2a00      	cmp	r2, #0
 800e52a:	dc01      	bgt.n	800e530 <__sflush_r+0x1c>
 800e52c:	2000      	movs	r0, #0
 800e52e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e530:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e532:	2f00      	cmp	r7, #0
 800e534:	d0fa      	beq.n	800e52c <__sflush_r+0x18>
 800e536:	2200      	movs	r2, #0
 800e538:	2180      	movs	r1, #128	; 0x80
 800e53a:	682e      	ldr	r6, [r5, #0]
 800e53c:	602a      	str	r2, [r5, #0]
 800e53e:	001a      	movs	r2, r3
 800e540:	0149      	lsls	r1, r1, #5
 800e542:	400a      	ands	r2, r1
 800e544:	420b      	tst	r3, r1
 800e546:	d034      	beq.n	800e5b2 <__sflush_r+0x9e>
 800e548:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e54a:	89a3      	ldrh	r3, [r4, #12]
 800e54c:	075b      	lsls	r3, r3, #29
 800e54e:	d506      	bpl.n	800e55e <__sflush_r+0x4a>
 800e550:	6863      	ldr	r3, [r4, #4]
 800e552:	1ac0      	subs	r0, r0, r3
 800e554:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e556:	2b00      	cmp	r3, #0
 800e558:	d001      	beq.n	800e55e <__sflush_r+0x4a>
 800e55a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e55c:	1ac0      	subs	r0, r0, r3
 800e55e:	0002      	movs	r2, r0
 800e560:	6a21      	ldr	r1, [r4, #32]
 800e562:	2300      	movs	r3, #0
 800e564:	0028      	movs	r0, r5
 800e566:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e568:	47b8      	blx	r7
 800e56a:	89a1      	ldrh	r1, [r4, #12]
 800e56c:	1c43      	adds	r3, r0, #1
 800e56e:	d106      	bne.n	800e57e <__sflush_r+0x6a>
 800e570:	682b      	ldr	r3, [r5, #0]
 800e572:	2b1d      	cmp	r3, #29
 800e574:	d831      	bhi.n	800e5da <__sflush_r+0xc6>
 800e576:	4a2c      	ldr	r2, [pc, #176]	; (800e628 <__sflush_r+0x114>)
 800e578:	40da      	lsrs	r2, r3
 800e57a:	07d3      	lsls	r3, r2, #31
 800e57c:	d52d      	bpl.n	800e5da <__sflush_r+0xc6>
 800e57e:	2300      	movs	r3, #0
 800e580:	6063      	str	r3, [r4, #4]
 800e582:	6923      	ldr	r3, [r4, #16]
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	04cb      	lsls	r3, r1, #19
 800e588:	d505      	bpl.n	800e596 <__sflush_r+0x82>
 800e58a:	1c43      	adds	r3, r0, #1
 800e58c:	d102      	bne.n	800e594 <__sflush_r+0x80>
 800e58e:	682b      	ldr	r3, [r5, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d100      	bne.n	800e596 <__sflush_r+0x82>
 800e594:	6560      	str	r0, [r4, #84]	; 0x54
 800e596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e598:	602e      	str	r6, [r5, #0]
 800e59a:	2900      	cmp	r1, #0
 800e59c:	d0c6      	beq.n	800e52c <__sflush_r+0x18>
 800e59e:	0023      	movs	r3, r4
 800e5a0:	3344      	adds	r3, #68	; 0x44
 800e5a2:	4299      	cmp	r1, r3
 800e5a4:	d002      	beq.n	800e5ac <__sflush_r+0x98>
 800e5a6:	0028      	movs	r0, r5
 800e5a8:	f7fd fc02 	bl	800bdb0 <_free_r>
 800e5ac:	2000      	movs	r0, #0
 800e5ae:	6360      	str	r0, [r4, #52]	; 0x34
 800e5b0:	e7bd      	b.n	800e52e <__sflush_r+0x1a>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	0028      	movs	r0, r5
 800e5b6:	6a21      	ldr	r1, [r4, #32]
 800e5b8:	47b8      	blx	r7
 800e5ba:	1c43      	adds	r3, r0, #1
 800e5bc:	d1c5      	bne.n	800e54a <__sflush_r+0x36>
 800e5be:	682b      	ldr	r3, [r5, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d0c2      	beq.n	800e54a <__sflush_r+0x36>
 800e5c4:	2b1d      	cmp	r3, #29
 800e5c6:	d001      	beq.n	800e5cc <__sflush_r+0xb8>
 800e5c8:	2b16      	cmp	r3, #22
 800e5ca:	d101      	bne.n	800e5d0 <__sflush_r+0xbc>
 800e5cc:	602e      	str	r6, [r5, #0]
 800e5ce:	e7ad      	b.n	800e52c <__sflush_r+0x18>
 800e5d0:	2340      	movs	r3, #64	; 0x40
 800e5d2:	89a2      	ldrh	r2, [r4, #12]
 800e5d4:	4313      	orrs	r3, r2
 800e5d6:	81a3      	strh	r3, [r4, #12]
 800e5d8:	e7a9      	b.n	800e52e <__sflush_r+0x1a>
 800e5da:	2340      	movs	r3, #64	; 0x40
 800e5dc:	430b      	orrs	r3, r1
 800e5de:	e7fa      	b.n	800e5d6 <__sflush_r+0xc2>
 800e5e0:	690f      	ldr	r7, [r1, #16]
 800e5e2:	2f00      	cmp	r7, #0
 800e5e4:	d0a2      	beq.n	800e52c <__sflush_r+0x18>
 800e5e6:	680a      	ldr	r2, [r1, #0]
 800e5e8:	600f      	str	r7, [r1, #0]
 800e5ea:	1bd2      	subs	r2, r2, r7
 800e5ec:	9201      	str	r2, [sp, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	079b      	lsls	r3, r3, #30
 800e5f2:	d100      	bne.n	800e5f6 <__sflush_r+0xe2>
 800e5f4:	694a      	ldr	r2, [r1, #20]
 800e5f6:	60a2      	str	r2, [r4, #8]
 800e5f8:	9b01      	ldr	r3, [sp, #4]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	dc00      	bgt.n	800e600 <__sflush_r+0xec>
 800e5fe:	e795      	b.n	800e52c <__sflush_r+0x18>
 800e600:	003a      	movs	r2, r7
 800e602:	0028      	movs	r0, r5
 800e604:	9b01      	ldr	r3, [sp, #4]
 800e606:	6a21      	ldr	r1, [r4, #32]
 800e608:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e60a:	47b0      	blx	r6
 800e60c:	2800      	cmp	r0, #0
 800e60e:	dc06      	bgt.n	800e61e <__sflush_r+0x10a>
 800e610:	2340      	movs	r3, #64	; 0x40
 800e612:	2001      	movs	r0, #1
 800e614:	89a2      	ldrh	r2, [r4, #12]
 800e616:	4240      	negs	r0, r0
 800e618:	4313      	orrs	r3, r2
 800e61a:	81a3      	strh	r3, [r4, #12]
 800e61c:	e787      	b.n	800e52e <__sflush_r+0x1a>
 800e61e:	9b01      	ldr	r3, [sp, #4]
 800e620:	183f      	adds	r7, r7, r0
 800e622:	1a1b      	subs	r3, r3, r0
 800e624:	9301      	str	r3, [sp, #4]
 800e626:	e7e7      	b.n	800e5f8 <__sflush_r+0xe4>
 800e628:	20400001 	.word	0x20400001

0800e62c <_fflush_r>:
 800e62c:	690b      	ldr	r3, [r1, #16]
 800e62e:	b570      	push	{r4, r5, r6, lr}
 800e630:	0005      	movs	r5, r0
 800e632:	000c      	movs	r4, r1
 800e634:	2b00      	cmp	r3, #0
 800e636:	d102      	bne.n	800e63e <_fflush_r+0x12>
 800e638:	2500      	movs	r5, #0
 800e63a:	0028      	movs	r0, r5
 800e63c:	bd70      	pop	{r4, r5, r6, pc}
 800e63e:	2800      	cmp	r0, #0
 800e640:	d004      	beq.n	800e64c <_fflush_r+0x20>
 800e642:	6983      	ldr	r3, [r0, #24]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d101      	bne.n	800e64c <_fflush_r+0x20>
 800e648:	f000 f892 	bl	800e770 <__sinit>
 800e64c:	4b14      	ldr	r3, [pc, #80]	; (800e6a0 <_fflush_r+0x74>)
 800e64e:	429c      	cmp	r4, r3
 800e650:	d11b      	bne.n	800e68a <_fflush_r+0x5e>
 800e652:	686c      	ldr	r4, [r5, #4]
 800e654:	220c      	movs	r2, #12
 800e656:	5ea3      	ldrsh	r3, [r4, r2]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d0ed      	beq.n	800e638 <_fflush_r+0xc>
 800e65c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e65e:	07d2      	lsls	r2, r2, #31
 800e660:	d404      	bmi.n	800e66c <_fflush_r+0x40>
 800e662:	059b      	lsls	r3, r3, #22
 800e664:	d402      	bmi.n	800e66c <_fflush_r+0x40>
 800e666:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e668:	f000 f923 	bl	800e8b2 <__retarget_lock_acquire_recursive>
 800e66c:	0028      	movs	r0, r5
 800e66e:	0021      	movs	r1, r4
 800e670:	f7ff ff50 	bl	800e514 <__sflush_r>
 800e674:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e676:	0005      	movs	r5, r0
 800e678:	07db      	lsls	r3, r3, #31
 800e67a:	d4de      	bmi.n	800e63a <_fflush_r+0xe>
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	059b      	lsls	r3, r3, #22
 800e680:	d4db      	bmi.n	800e63a <_fflush_r+0xe>
 800e682:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e684:	f000 f916 	bl	800e8b4 <__retarget_lock_release_recursive>
 800e688:	e7d7      	b.n	800e63a <_fflush_r+0xe>
 800e68a:	4b06      	ldr	r3, [pc, #24]	; (800e6a4 <_fflush_r+0x78>)
 800e68c:	429c      	cmp	r4, r3
 800e68e:	d101      	bne.n	800e694 <_fflush_r+0x68>
 800e690:	68ac      	ldr	r4, [r5, #8]
 800e692:	e7df      	b.n	800e654 <_fflush_r+0x28>
 800e694:	4b04      	ldr	r3, [pc, #16]	; (800e6a8 <_fflush_r+0x7c>)
 800e696:	429c      	cmp	r4, r3
 800e698:	d1dc      	bne.n	800e654 <_fflush_r+0x28>
 800e69a:	68ec      	ldr	r4, [r5, #12]
 800e69c:	e7da      	b.n	800e654 <_fflush_r+0x28>
 800e69e:	46c0      	nop			; (mov r8, r8)
 800e6a0:	0800f1c0 	.word	0x0800f1c0
 800e6a4:	0800f1e0 	.word	0x0800f1e0
 800e6a8:	0800f1a0 	.word	0x0800f1a0

0800e6ac <std>:
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	b510      	push	{r4, lr}
 800e6b0:	0004      	movs	r4, r0
 800e6b2:	6003      	str	r3, [r0, #0]
 800e6b4:	6043      	str	r3, [r0, #4]
 800e6b6:	6083      	str	r3, [r0, #8]
 800e6b8:	8181      	strh	r1, [r0, #12]
 800e6ba:	6643      	str	r3, [r0, #100]	; 0x64
 800e6bc:	0019      	movs	r1, r3
 800e6be:	81c2      	strh	r2, [r0, #14]
 800e6c0:	6103      	str	r3, [r0, #16]
 800e6c2:	6143      	str	r3, [r0, #20]
 800e6c4:	6183      	str	r3, [r0, #24]
 800e6c6:	2208      	movs	r2, #8
 800e6c8:	305c      	adds	r0, #92	; 0x5c
 800e6ca:	f7fd fb68 	bl	800bd9e <memset>
 800e6ce:	4b05      	ldr	r3, [pc, #20]	; (800e6e4 <std+0x38>)
 800e6d0:	6263      	str	r3, [r4, #36]	; 0x24
 800e6d2:	4b05      	ldr	r3, [pc, #20]	; (800e6e8 <std+0x3c>)
 800e6d4:	6224      	str	r4, [r4, #32]
 800e6d6:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6d8:	4b04      	ldr	r3, [pc, #16]	; (800e6ec <std+0x40>)
 800e6da:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e6dc:	4b04      	ldr	r3, [pc, #16]	; (800e6f0 <std+0x44>)
 800e6de:	6323      	str	r3, [r4, #48]	; 0x30
 800e6e0:	bd10      	pop	{r4, pc}
 800e6e2:	46c0      	nop			; (mov r8, r8)
 800e6e4:	0800ea99 	.word	0x0800ea99
 800e6e8:	0800eac1 	.word	0x0800eac1
 800e6ec:	0800eaf9 	.word	0x0800eaf9
 800e6f0:	0800eb25 	.word	0x0800eb25

0800e6f4 <_cleanup_r>:
 800e6f4:	b510      	push	{r4, lr}
 800e6f6:	4902      	ldr	r1, [pc, #8]	; (800e700 <_cleanup_r+0xc>)
 800e6f8:	f000 f8ba 	bl	800e870 <_fwalk_reent>
 800e6fc:	bd10      	pop	{r4, pc}
 800e6fe:	46c0      	nop			; (mov r8, r8)
 800e700:	0800e62d 	.word	0x0800e62d

0800e704 <__sfmoreglue>:
 800e704:	b570      	push	{r4, r5, r6, lr}
 800e706:	2568      	movs	r5, #104	; 0x68
 800e708:	1e4a      	subs	r2, r1, #1
 800e70a:	4355      	muls	r5, r2
 800e70c:	000e      	movs	r6, r1
 800e70e:	0029      	movs	r1, r5
 800e710:	3174      	adds	r1, #116	; 0x74
 800e712:	f7fd fb97 	bl	800be44 <_malloc_r>
 800e716:	1e04      	subs	r4, r0, #0
 800e718:	d008      	beq.n	800e72c <__sfmoreglue+0x28>
 800e71a:	2100      	movs	r1, #0
 800e71c:	002a      	movs	r2, r5
 800e71e:	6001      	str	r1, [r0, #0]
 800e720:	6046      	str	r6, [r0, #4]
 800e722:	300c      	adds	r0, #12
 800e724:	60a0      	str	r0, [r4, #8]
 800e726:	3268      	adds	r2, #104	; 0x68
 800e728:	f7fd fb39 	bl	800bd9e <memset>
 800e72c:	0020      	movs	r0, r4
 800e72e:	bd70      	pop	{r4, r5, r6, pc}

0800e730 <__sfp_lock_acquire>:
 800e730:	b510      	push	{r4, lr}
 800e732:	4802      	ldr	r0, [pc, #8]	; (800e73c <__sfp_lock_acquire+0xc>)
 800e734:	f000 f8bd 	bl	800e8b2 <__retarget_lock_acquire_recursive>
 800e738:	bd10      	pop	{r4, pc}
 800e73a:	46c0      	nop			; (mov r8, r8)
 800e73c:	2000060c 	.word	0x2000060c

0800e740 <__sfp_lock_release>:
 800e740:	b510      	push	{r4, lr}
 800e742:	4802      	ldr	r0, [pc, #8]	; (800e74c <__sfp_lock_release+0xc>)
 800e744:	f000 f8b6 	bl	800e8b4 <__retarget_lock_release_recursive>
 800e748:	bd10      	pop	{r4, pc}
 800e74a:	46c0      	nop			; (mov r8, r8)
 800e74c:	2000060c 	.word	0x2000060c

0800e750 <__sinit_lock_acquire>:
 800e750:	b510      	push	{r4, lr}
 800e752:	4802      	ldr	r0, [pc, #8]	; (800e75c <__sinit_lock_acquire+0xc>)
 800e754:	f000 f8ad 	bl	800e8b2 <__retarget_lock_acquire_recursive>
 800e758:	bd10      	pop	{r4, pc}
 800e75a:	46c0      	nop			; (mov r8, r8)
 800e75c:	20000607 	.word	0x20000607

0800e760 <__sinit_lock_release>:
 800e760:	b510      	push	{r4, lr}
 800e762:	4802      	ldr	r0, [pc, #8]	; (800e76c <__sinit_lock_release+0xc>)
 800e764:	f000 f8a6 	bl	800e8b4 <__retarget_lock_release_recursive>
 800e768:	bd10      	pop	{r4, pc}
 800e76a:	46c0      	nop			; (mov r8, r8)
 800e76c:	20000607 	.word	0x20000607

0800e770 <__sinit>:
 800e770:	b513      	push	{r0, r1, r4, lr}
 800e772:	0004      	movs	r4, r0
 800e774:	f7ff ffec 	bl	800e750 <__sinit_lock_acquire>
 800e778:	69a3      	ldr	r3, [r4, #24]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d002      	beq.n	800e784 <__sinit+0x14>
 800e77e:	f7ff ffef 	bl	800e760 <__sinit_lock_release>
 800e782:	bd13      	pop	{r0, r1, r4, pc}
 800e784:	64a3      	str	r3, [r4, #72]	; 0x48
 800e786:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e788:	6523      	str	r3, [r4, #80]	; 0x50
 800e78a:	4b13      	ldr	r3, [pc, #76]	; (800e7d8 <__sinit+0x68>)
 800e78c:	4a13      	ldr	r2, [pc, #76]	; (800e7dc <__sinit+0x6c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	62a2      	str	r2, [r4, #40]	; 0x28
 800e792:	9301      	str	r3, [sp, #4]
 800e794:	42a3      	cmp	r3, r4
 800e796:	d101      	bne.n	800e79c <__sinit+0x2c>
 800e798:	2301      	movs	r3, #1
 800e79a:	61a3      	str	r3, [r4, #24]
 800e79c:	0020      	movs	r0, r4
 800e79e:	f000 f81f 	bl	800e7e0 <__sfp>
 800e7a2:	6060      	str	r0, [r4, #4]
 800e7a4:	0020      	movs	r0, r4
 800e7a6:	f000 f81b 	bl	800e7e0 <__sfp>
 800e7aa:	60a0      	str	r0, [r4, #8]
 800e7ac:	0020      	movs	r0, r4
 800e7ae:	f000 f817 	bl	800e7e0 <__sfp>
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	2104      	movs	r1, #4
 800e7b6:	60e0      	str	r0, [r4, #12]
 800e7b8:	6860      	ldr	r0, [r4, #4]
 800e7ba:	f7ff ff77 	bl	800e6ac <std>
 800e7be:	2201      	movs	r2, #1
 800e7c0:	2109      	movs	r1, #9
 800e7c2:	68a0      	ldr	r0, [r4, #8]
 800e7c4:	f7ff ff72 	bl	800e6ac <std>
 800e7c8:	2202      	movs	r2, #2
 800e7ca:	2112      	movs	r1, #18
 800e7cc:	68e0      	ldr	r0, [r4, #12]
 800e7ce:	f7ff ff6d 	bl	800e6ac <std>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	61a3      	str	r3, [r4, #24]
 800e7d6:	e7d2      	b.n	800e77e <__sinit+0xe>
 800e7d8:	0800ee1c 	.word	0x0800ee1c
 800e7dc:	0800e6f5 	.word	0x0800e6f5

0800e7e0 <__sfp>:
 800e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e2:	0007      	movs	r7, r0
 800e7e4:	f7ff ffa4 	bl	800e730 <__sfp_lock_acquire>
 800e7e8:	4b1f      	ldr	r3, [pc, #124]	; (800e868 <__sfp+0x88>)
 800e7ea:	681e      	ldr	r6, [r3, #0]
 800e7ec:	69b3      	ldr	r3, [r6, #24]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d102      	bne.n	800e7f8 <__sfp+0x18>
 800e7f2:	0030      	movs	r0, r6
 800e7f4:	f7ff ffbc 	bl	800e770 <__sinit>
 800e7f8:	3648      	adds	r6, #72	; 0x48
 800e7fa:	68b4      	ldr	r4, [r6, #8]
 800e7fc:	6873      	ldr	r3, [r6, #4]
 800e7fe:	3b01      	subs	r3, #1
 800e800:	d504      	bpl.n	800e80c <__sfp+0x2c>
 800e802:	6833      	ldr	r3, [r6, #0]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d022      	beq.n	800e84e <__sfp+0x6e>
 800e808:	6836      	ldr	r6, [r6, #0]
 800e80a:	e7f6      	b.n	800e7fa <__sfp+0x1a>
 800e80c:	220c      	movs	r2, #12
 800e80e:	5ea5      	ldrsh	r5, [r4, r2]
 800e810:	2d00      	cmp	r5, #0
 800e812:	d11a      	bne.n	800e84a <__sfp+0x6a>
 800e814:	0020      	movs	r0, r4
 800e816:	4b15      	ldr	r3, [pc, #84]	; (800e86c <__sfp+0x8c>)
 800e818:	3058      	adds	r0, #88	; 0x58
 800e81a:	60e3      	str	r3, [r4, #12]
 800e81c:	6665      	str	r5, [r4, #100]	; 0x64
 800e81e:	f000 f847 	bl	800e8b0 <__retarget_lock_init_recursive>
 800e822:	f7ff ff8d 	bl	800e740 <__sfp_lock_release>
 800e826:	0020      	movs	r0, r4
 800e828:	2208      	movs	r2, #8
 800e82a:	0029      	movs	r1, r5
 800e82c:	6025      	str	r5, [r4, #0]
 800e82e:	60a5      	str	r5, [r4, #8]
 800e830:	6065      	str	r5, [r4, #4]
 800e832:	6125      	str	r5, [r4, #16]
 800e834:	6165      	str	r5, [r4, #20]
 800e836:	61a5      	str	r5, [r4, #24]
 800e838:	305c      	adds	r0, #92	; 0x5c
 800e83a:	f7fd fab0 	bl	800bd9e <memset>
 800e83e:	6365      	str	r5, [r4, #52]	; 0x34
 800e840:	63a5      	str	r5, [r4, #56]	; 0x38
 800e842:	64a5      	str	r5, [r4, #72]	; 0x48
 800e844:	64e5      	str	r5, [r4, #76]	; 0x4c
 800e846:	0020      	movs	r0, r4
 800e848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e84a:	3468      	adds	r4, #104	; 0x68
 800e84c:	e7d7      	b.n	800e7fe <__sfp+0x1e>
 800e84e:	2104      	movs	r1, #4
 800e850:	0038      	movs	r0, r7
 800e852:	f7ff ff57 	bl	800e704 <__sfmoreglue>
 800e856:	1e04      	subs	r4, r0, #0
 800e858:	6030      	str	r0, [r6, #0]
 800e85a:	d1d5      	bne.n	800e808 <__sfp+0x28>
 800e85c:	f7ff ff70 	bl	800e740 <__sfp_lock_release>
 800e860:	230c      	movs	r3, #12
 800e862:	603b      	str	r3, [r7, #0]
 800e864:	e7ef      	b.n	800e846 <__sfp+0x66>
 800e866:	46c0      	nop			; (mov r8, r8)
 800e868:	0800ee1c 	.word	0x0800ee1c
 800e86c:	ffff0001 	.word	0xffff0001

0800e870 <_fwalk_reent>:
 800e870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e872:	0004      	movs	r4, r0
 800e874:	0006      	movs	r6, r0
 800e876:	2700      	movs	r7, #0
 800e878:	9101      	str	r1, [sp, #4]
 800e87a:	3448      	adds	r4, #72	; 0x48
 800e87c:	6863      	ldr	r3, [r4, #4]
 800e87e:	68a5      	ldr	r5, [r4, #8]
 800e880:	9300      	str	r3, [sp, #0]
 800e882:	9b00      	ldr	r3, [sp, #0]
 800e884:	3b01      	subs	r3, #1
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	d504      	bpl.n	800e894 <_fwalk_reent+0x24>
 800e88a:	6824      	ldr	r4, [r4, #0]
 800e88c:	2c00      	cmp	r4, #0
 800e88e:	d1f5      	bne.n	800e87c <_fwalk_reent+0xc>
 800e890:	0038      	movs	r0, r7
 800e892:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e894:	89ab      	ldrh	r3, [r5, #12]
 800e896:	2b01      	cmp	r3, #1
 800e898:	d908      	bls.n	800e8ac <_fwalk_reent+0x3c>
 800e89a:	220e      	movs	r2, #14
 800e89c:	5eab      	ldrsh	r3, [r5, r2]
 800e89e:	3301      	adds	r3, #1
 800e8a0:	d004      	beq.n	800e8ac <_fwalk_reent+0x3c>
 800e8a2:	0029      	movs	r1, r5
 800e8a4:	0030      	movs	r0, r6
 800e8a6:	9b01      	ldr	r3, [sp, #4]
 800e8a8:	4798      	blx	r3
 800e8aa:	4307      	orrs	r7, r0
 800e8ac:	3568      	adds	r5, #104	; 0x68
 800e8ae:	e7e8      	b.n	800e882 <_fwalk_reent+0x12>

0800e8b0 <__retarget_lock_init_recursive>:
 800e8b0:	4770      	bx	lr

0800e8b2 <__retarget_lock_acquire_recursive>:
 800e8b2:	4770      	bx	lr

0800e8b4 <__retarget_lock_release_recursive>:
 800e8b4:	4770      	bx	lr
	...

0800e8b8 <__swhatbuf_r>:
 800e8b8:	b570      	push	{r4, r5, r6, lr}
 800e8ba:	000e      	movs	r6, r1
 800e8bc:	001d      	movs	r5, r3
 800e8be:	230e      	movs	r3, #14
 800e8c0:	5ec9      	ldrsh	r1, [r1, r3]
 800e8c2:	0014      	movs	r4, r2
 800e8c4:	b096      	sub	sp, #88	; 0x58
 800e8c6:	2900      	cmp	r1, #0
 800e8c8:	da07      	bge.n	800e8da <__swhatbuf_r+0x22>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	602b      	str	r3, [r5, #0]
 800e8ce:	89b3      	ldrh	r3, [r6, #12]
 800e8d0:	061b      	lsls	r3, r3, #24
 800e8d2:	d411      	bmi.n	800e8f8 <__swhatbuf_r+0x40>
 800e8d4:	2380      	movs	r3, #128	; 0x80
 800e8d6:	00db      	lsls	r3, r3, #3
 800e8d8:	e00f      	b.n	800e8fa <__swhatbuf_r+0x42>
 800e8da:	466a      	mov	r2, sp
 800e8dc:	f000 f94e 	bl	800eb7c <_fstat_r>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	dbf2      	blt.n	800e8ca <__swhatbuf_r+0x12>
 800e8e4:	23f0      	movs	r3, #240	; 0xf0
 800e8e6:	9901      	ldr	r1, [sp, #4]
 800e8e8:	021b      	lsls	r3, r3, #8
 800e8ea:	4019      	ands	r1, r3
 800e8ec:	4b05      	ldr	r3, [pc, #20]	; (800e904 <__swhatbuf_r+0x4c>)
 800e8ee:	18c9      	adds	r1, r1, r3
 800e8f0:	424b      	negs	r3, r1
 800e8f2:	4159      	adcs	r1, r3
 800e8f4:	6029      	str	r1, [r5, #0]
 800e8f6:	e7ed      	b.n	800e8d4 <__swhatbuf_r+0x1c>
 800e8f8:	2340      	movs	r3, #64	; 0x40
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	b016      	add	sp, #88	; 0x58
 800e900:	bd70      	pop	{r4, r5, r6, pc}
 800e902:	46c0      	nop			; (mov r8, r8)
 800e904:	ffffe000 	.word	0xffffe000

0800e908 <__smakebuf_r>:
 800e908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e90a:	2602      	movs	r6, #2
 800e90c:	898b      	ldrh	r3, [r1, #12]
 800e90e:	0005      	movs	r5, r0
 800e910:	000c      	movs	r4, r1
 800e912:	4233      	tst	r3, r6
 800e914:	d006      	beq.n	800e924 <__smakebuf_r+0x1c>
 800e916:	0023      	movs	r3, r4
 800e918:	3347      	adds	r3, #71	; 0x47
 800e91a:	6023      	str	r3, [r4, #0]
 800e91c:	6123      	str	r3, [r4, #16]
 800e91e:	2301      	movs	r3, #1
 800e920:	6163      	str	r3, [r4, #20]
 800e922:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e924:	466a      	mov	r2, sp
 800e926:	ab01      	add	r3, sp, #4
 800e928:	f7ff ffc6 	bl	800e8b8 <__swhatbuf_r>
 800e92c:	9900      	ldr	r1, [sp, #0]
 800e92e:	0007      	movs	r7, r0
 800e930:	0028      	movs	r0, r5
 800e932:	f7fd fa87 	bl	800be44 <_malloc_r>
 800e936:	2800      	cmp	r0, #0
 800e938:	d108      	bne.n	800e94c <__smakebuf_r+0x44>
 800e93a:	220c      	movs	r2, #12
 800e93c:	5ea3      	ldrsh	r3, [r4, r2]
 800e93e:	059a      	lsls	r2, r3, #22
 800e940:	d4ef      	bmi.n	800e922 <__smakebuf_r+0x1a>
 800e942:	2203      	movs	r2, #3
 800e944:	4393      	bics	r3, r2
 800e946:	431e      	orrs	r6, r3
 800e948:	81a6      	strh	r6, [r4, #12]
 800e94a:	e7e4      	b.n	800e916 <__smakebuf_r+0xe>
 800e94c:	4b0f      	ldr	r3, [pc, #60]	; (800e98c <__smakebuf_r+0x84>)
 800e94e:	62ab      	str	r3, [r5, #40]	; 0x28
 800e950:	2380      	movs	r3, #128	; 0x80
 800e952:	89a2      	ldrh	r2, [r4, #12]
 800e954:	6020      	str	r0, [r4, #0]
 800e956:	4313      	orrs	r3, r2
 800e958:	81a3      	strh	r3, [r4, #12]
 800e95a:	9b00      	ldr	r3, [sp, #0]
 800e95c:	6120      	str	r0, [r4, #16]
 800e95e:	6163      	str	r3, [r4, #20]
 800e960:	9b01      	ldr	r3, [sp, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00d      	beq.n	800e982 <__smakebuf_r+0x7a>
 800e966:	0028      	movs	r0, r5
 800e968:	230e      	movs	r3, #14
 800e96a:	5ee1      	ldrsh	r1, [r4, r3]
 800e96c:	f000 f918 	bl	800eba0 <_isatty_r>
 800e970:	2800      	cmp	r0, #0
 800e972:	d006      	beq.n	800e982 <__smakebuf_r+0x7a>
 800e974:	2203      	movs	r2, #3
 800e976:	89a3      	ldrh	r3, [r4, #12]
 800e978:	4393      	bics	r3, r2
 800e97a:	001a      	movs	r2, r3
 800e97c:	2301      	movs	r3, #1
 800e97e:	4313      	orrs	r3, r2
 800e980:	81a3      	strh	r3, [r4, #12]
 800e982:	89a0      	ldrh	r0, [r4, #12]
 800e984:	4307      	orrs	r7, r0
 800e986:	81a7      	strh	r7, [r4, #12]
 800e988:	e7cb      	b.n	800e922 <__smakebuf_r+0x1a>
 800e98a:	46c0      	nop			; (mov r8, r8)
 800e98c:	0800e6f5 	.word	0x0800e6f5

0800e990 <memmove>:
 800e990:	b510      	push	{r4, lr}
 800e992:	4288      	cmp	r0, r1
 800e994:	d902      	bls.n	800e99c <memmove+0xc>
 800e996:	188b      	adds	r3, r1, r2
 800e998:	4298      	cmp	r0, r3
 800e99a:	d303      	bcc.n	800e9a4 <memmove+0x14>
 800e99c:	2300      	movs	r3, #0
 800e99e:	e007      	b.n	800e9b0 <memmove+0x20>
 800e9a0:	5c8b      	ldrb	r3, [r1, r2]
 800e9a2:	5483      	strb	r3, [r0, r2]
 800e9a4:	3a01      	subs	r2, #1
 800e9a6:	d2fb      	bcs.n	800e9a0 <memmove+0x10>
 800e9a8:	bd10      	pop	{r4, pc}
 800e9aa:	5ccc      	ldrb	r4, [r1, r3]
 800e9ac:	54c4      	strb	r4, [r0, r3]
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d1fa      	bne.n	800e9aa <memmove+0x1a>
 800e9b4:	e7f8      	b.n	800e9a8 <memmove+0x18>

0800e9b6 <_realloc_r>:
 800e9b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b8:	0007      	movs	r7, r0
 800e9ba:	000d      	movs	r5, r1
 800e9bc:	0016      	movs	r6, r2
 800e9be:	2900      	cmp	r1, #0
 800e9c0:	d105      	bne.n	800e9ce <_realloc_r+0x18>
 800e9c2:	0011      	movs	r1, r2
 800e9c4:	f7fd fa3e 	bl	800be44 <_malloc_r>
 800e9c8:	0004      	movs	r4, r0
 800e9ca:	0020      	movs	r0, r4
 800e9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ce:	2a00      	cmp	r2, #0
 800e9d0:	d103      	bne.n	800e9da <_realloc_r+0x24>
 800e9d2:	f7fd f9ed 	bl	800bdb0 <_free_r>
 800e9d6:	0034      	movs	r4, r6
 800e9d8:	e7f7      	b.n	800e9ca <_realloc_r+0x14>
 800e9da:	f000 f907 	bl	800ebec <_malloc_usable_size_r>
 800e9de:	002c      	movs	r4, r5
 800e9e0:	42b0      	cmp	r0, r6
 800e9e2:	d2f2      	bcs.n	800e9ca <_realloc_r+0x14>
 800e9e4:	0031      	movs	r1, r6
 800e9e6:	0038      	movs	r0, r7
 800e9e8:	f7fd fa2c 	bl	800be44 <_malloc_r>
 800e9ec:	1e04      	subs	r4, r0, #0
 800e9ee:	d0ec      	beq.n	800e9ca <_realloc_r+0x14>
 800e9f0:	0029      	movs	r1, r5
 800e9f2:	0032      	movs	r2, r6
 800e9f4:	f7fd f9ca 	bl	800bd8c <memcpy>
 800e9f8:	0029      	movs	r1, r5
 800e9fa:	0038      	movs	r0, r7
 800e9fc:	f7fd f9d8 	bl	800bdb0 <_free_r>
 800ea00:	e7e3      	b.n	800e9ca <_realloc_r+0x14>

0800ea02 <_raise_r>:
 800ea02:	b570      	push	{r4, r5, r6, lr}
 800ea04:	0004      	movs	r4, r0
 800ea06:	000d      	movs	r5, r1
 800ea08:	291f      	cmp	r1, #31
 800ea0a:	d904      	bls.n	800ea16 <_raise_r+0x14>
 800ea0c:	2316      	movs	r3, #22
 800ea0e:	6003      	str	r3, [r0, #0]
 800ea10:	2001      	movs	r0, #1
 800ea12:	4240      	negs	r0, r0
 800ea14:	bd70      	pop	{r4, r5, r6, pc}
 800ea16:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d004      	beq.n	800ea26 <_raise_r+0x24>
 800ea1c:	008a      	lsls	r2, r1, #2
 800ea1e:	189b      	adds	r3, r3, r2
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	2a00      	cmp	r2, #0
 800ea24:	d108      	bne.n	800ea38 <_raise_r+0x36>
 800ea26:	0020      	movs	r0, r4
 800ea28:	f000 f832 	bl	800ea90 <_getpid_r>
 800ea2c:	002a      	movs	r2, r5
 800ea2e:	0001      	movs	r1, r0
 800ea30:	0020      	movs	r0, r4
 800ea32:	f000 f81b 	bl	800ea6c <_kill_r>
 800ea36:	e7ed      	b.n	800ea14 <_raise_r+0x12>
 800ea38:	2000      	movs	r0, #0
 800ea3a:	2a01      	cmp	r2, #1
 800ea3c:	d0ea      	beq.n	800ea14 <_raise_r+0x12>
 800ea3e:	1c51      	adds	r1, r2, #1
 800ea40:	d103      	bne.n	800ea4a <_raise_r+0x48>
 800ea42:	2316      	movs	r3, #22
 800ea44:	3001      	adds	r0, #1
 800ea46:	6023      	str	r3, [r4, #0]
 800ea48:	e7e4      	b.n	800ea14 <_raise_r+0x12>
 800ea4a:	2400      	movs	r4, #0
 800ea4c:	0028      	movs	r0, r5
 800ea4e:	601c      	str	r4, [r3, #0]
 800ea50:	4790      	blx	r2
 800ea52:	0020      	movs	r0, r4
 800ea54:	e7de      	b.n	800ea14 <_raise_r+0x12>
	...

0800ea58 <raise>:
 800ea58:	b510      	push	{r4, lr}
 800ea5a:	4b03      	ldr	r3, [pc, #12]	; (800ea68 <raise+0x10>)
 800ea5c:	0001      	movs	r1, r0
 800ea5e:	6818      	ldr	r0, [r3, #0]
 800ea60:	f7ff ffcf 	bl	800ea02 <_raise_r>
 800ea64:	bd10      	pop	{r4, pc}
 800ea66:	46c0      	nop			; (mov r8, r8)
 800ea68:	2000002c 	.word	0x2000002c

0800ea6c <_kill_r>:
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	b570      	push	{r4, r5, r6, lr}
 800ea70:	4d06      	ldr	r5, [pc, #24]	; (800ea8c <_kill_r+0x20>)
 800ea72:	0004      	movs	r4, r0
 800ea74:	0008      	movs	r0, r1
 800ea76:	0011      	movs	r1, r2
 800ea78:	602b      	str	r3, [r5, #0]
 800ea7a:	f7f4 fe23 	bl	80036c4 <_kill>
 800ea7e:	1c43      	adds	r3, r0, #1
 800ea80:	d103      	bne.n	800ea8a <_kill_r+0x1e>
 800ea82:	682b      	ldr	r3, [r5, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d000      	beq.n	800ea8a <_kill_r+0x1e>
 800ea88:	6023      	str	r3, [r4, #0]
 800ea8a:	bd70      	pop	{r4, r5, r6, pc}
 800ea8c:	20000600 	.word	0x20000600

0800ea90 <_getpid_r>:
 800ea90:	b510      	push	{r4, lr}
 800ea92:	f7f4 fe11 	bl	80036b8 <_getpid>
 800ea96:	bd10      	pop	{r4, pc}

0800ea98 <__sread>:
 800ea98:	b570      	push	{r4, r5, r6, lr}
 800ea9a:	000c      	movs	r4, r1
 800ea9c:	250e      	movs	r5, #14
 800ea9e:	5f49      	ldrsh	r1, [r1, r5]
 800eaa0:	f000 f8ac 	bl	800ebfc <_read_r>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	db03      	blt.n	800eab0 <__sread+0x18>
 800eaa8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800eaaa:	181b      	adds	r3, r3, r0
 800eaac:	6563      	str	r3, [r4, #84]	; 0x54
 800eaae:	bd70      	pop	{r4, r5, r6, pc}
 800eab0:	89a3      	ldrh	r3, [r4, #12]
 800eab2:	4a02      	ldr	r2, [pc, #8]	; (800eabc <__sread+0x24>)
 800eab4:	4013      	ands	r3, r2
 800eab6:	81a3      	strh	r3, [r4, #12]
 800eab8:	e7f9      	b.n	800eaae <__sread+0x16>
 800eaba:	46c0      	nop			; (mov r8, r8)
 800eabc:	ffffefff 	.word	0xffffefff

0800eac0 <__swrite>:
 800eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac2:	001f      	movs	r7, r3
 800eac4:	898b      	ldrh	r3, [r1, #12]
 800eac6:	0005      	movs	r5, r0
 800eac8:	000c      	movs	r4, r1
 800eaca:	0016      	movs	r6, r2
 800eacc:	05db      	lsls	r3, r3, #23
 800eace:	d505      	bpl.n	800eadc <__swrite+0x1c>
 800ead0:	230e      	movs	r3, #14
 800ead2:	5ec9      	ldrsh	r1, [r1, r3]
 800ead4:	2200      	movs	r2, #0
 800ead6:	2302      	movs	r3, #2
 800ead8:	f000 f874 	bl	800ebc4 <_lseek_r>
 800eadc:	89a3      	ldrh	r3, [r4, #12]
 800eade:	4a05      	ldr	r2, [pc, #20]	; (800eaf4 <__swrite+0x34>)
 800eae0:	0028      	movs	r0, r5
 800eae2:	4013      	ands	r3, r2
 800eae4:	81a3      	strh	r3, [r4, #12]
 800eae6:	0032      	movs	r2, r6
 800eae8:	230e      	movs	r3, #14
 800eaea:	5ee1      	ldrsh	r1, [r4, r3]
 800eaec:	003b      	movs	r3, r7
 800eaee:	f000 f81f 	bl	800eb30 <_write_r>
 800eaf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaf4:	ffffefff 	.word	0xffffefff

0800eaf8 <__sseek>:
 800eaf8:	b570      	push	{r4, r5, r6, lr}
 800eafa:	000c      	movs	r4, r1
 800eafc:	250e      	movs	r5, #14
 800eafe:	5f49      	ldrsh	r1, [r1, r5]
 800eb00:	f000 f860 	bl	800ebc4 <_lseek_r>
 800eb04:	89a3      	ldrh	r3, [r4, #12]
 800eb06:	1c42      	adds	r2, r0, #1
 800eb08:	d103      	bne.n	800eb12 <__sseek+0x1a>
 800eb0a:	4a05      	ldr	r2, [pc, #20]	; (800eb20 <__sseek+0x28>)
 800eb0c:	4013      	ands	r3, r2
 800eb0e:	81a3      	strh	r3, [r4, #12]
 800eb10:	bd70      	pop	{r4, r5, r6, pc}
 800eb12:	2280      	movs	r2, #128	; 0x80
 800eb14:	0152      	lsls	r2, r2, #5
 800eb16:	4313      	orrs	r3, r2
 800eb18:	81a3      	strh	r3, [r4, #12]
 800eb1a:	6560      	str	r0, [r4, #84]	; 0x54
 800eb1c:	e7f8      	b.n	800eb10 <__sseek+0x18>
 800eb1e:	46c0      	nop			; (mov r8, r8)
 800eb20:	ffffefff 	.word	0xffffefff

0800eb24 <__sclose>:
 800eb24:	b510      	push	{r4, lr}
 800eb26:	230e      	movs	r3, #14
 800eb28:	5ec9      	ldrsh	r1, [r1, r3]
 800eb2a:	f000 f815 	bl	800eb58 <_close_r>
 800eb2e:	bd10      	pop	{r4, pc}

0800eb30 <_write_r>:
 800eb30:	b570      	push	{r4, r5, r6, lr}
 800eb32:	0004      	movs	r4, r0
 800eb34:	0008      	movs	r0, r1
 800eb36:	0011      	movs	r1, r2
 800eb38:	001a      	movs	r2, r3
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	4d05      	ldr	r5, [pc, #20]	; (800eb54 <_write_r+0x24>)
 800eb3e:	602b      	str	r3, [r5, #0]
 800eb40:	f7f4 fdf9 	bl	8003736 <_write>
 800eb44:	1c43      	adds	r3, r0, #1
 800eb46:	d103      	bne.n	800eb50 <_write_r+0x20>
 800eb48:	682b      	ldr	r3, [r5, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d000      	beq.n	800eb50 <_write_r+0x20>
 800eb4e:	6023      	str	r3, [r4, #0]
 800eb50:	bd70      	pop	{r4, r5, r6, pc}
 800eb52:	46c0      	nop			; (mov r8, r8)
 800eb54:	20000600 	.word	0x20000600

0800eb58 <_close_r>:
 800eb58:	2300      	movs	r3, #0
 800eb5a:	b570      	push	{r4, r5, r6, lr}
 800eb5c:	4d06      	ldr	r5, [pc, #24]	; (800eb78 <_close_r+0x20>)
 800eb5e:	0004      	movs	r4, r0
 800eb60:	0008      	movs	r0, r1
 800eb62:	602b      	str	r3, [r5, #0]
 800eb64:	f7f4 fe03 	bl	800376e <_close>
 800eb68:	1c43      	adds	r3, r0, #1
 800eb6a:	d103      	bne.n	800eb74 <_close_r+0x1c>
 800eb6c:	682b      	ldr	r3, [r5, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d000      	beq.n	800eb74 <_close_r+0x1c>
 800eb72:	6023      	str	r3, [r4, #0]
 800eb74:	bd70      	pop	{r4, r5, r6, pc}
 800eb76:	46c0      	nop			; (mov r8, r8)
 800eb78:	20000600 	.word	0x20000600

0800eb7c <_fstat_r>:
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	b570      	push	{r4, r5, r6, lr}
 800eb80:	4d06      	ldr	r5, [pc, #24]	; (800eb9c <_fstat_r+0x20>)
 800eb82:	0004      	movs	r4, r0
 800eb84:	0008      	movs	r0, r1
 800eb86:	0011      	movs	r1, r2
 800eb88:	602b      	str	r3, [r5, #0]
 800eb8a:	f7f4 fdfa 	bl	8003782 <_fstat>
 800eb8e:	1c43      	adds	r3, r0, #1
 800eb90:	d103      	bne.n	800eb9a <_fstat_r+0x1e>
 800eb92:	682b      	ldr	r3, [r5, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d000      	beq.n	800eb9a <_fstat_r+0x1e>
 800eb98:	6023      	str	r3, [r4, #0]
 800eb9a:	bd70      	pop	{r4, r5, r6, pc}
 800eb9c:	20000600 	.word	0x20000600

0800eba0 <_isatty_r>:
 800eba0:	2300      	movs	r3, #0
 800eba2:	b570      	push	{r4, r5, r6, lr}
 800eba4:	4d06      	ldr	r5, [pc, #24]	; (800ebc0 <_isatty_r+0x20>)
 800eba6:	0004      	movs	r4, r0
 800eba8:	0008      	movs	r0, r1
 800ebaa:	602b      	str	r3, [r5, #0]
 800ebac:	f7f4 fdf7 	bl	800379e <_isatty>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d103      	bne.n	800ebbc <_isatty_r+0x1c>
 800ebb4:	682b      	ldr	r3, [r5, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d000      	beq.n	800ebbc <_isatty_r+0x1c>
 800ebba:	6023      	str	r3, [r4, #0]
 800ebbc:	bd70      	pop	{r4, r5, r6, pc}
 800ebbe:	46c0      	nop			; (mov r8, r8)
 800ebc0:	20000600 	.word	0x20000600

0800ebc4 <_lseek_r>:
 800ebc4:	b570      	push	{r4, r5, r6, lr}
 800ebc6:	0004      	movs	r4, r0
 800ebc8:	0008      	movs	r0, r1
 800ebca:	0011      	movs	r1, r2
 800ebcc:	001a      	movs	r2, r3
 800ebce:	2300      	movs	r3, #0
 800ebd0:	4d05      	ldr	r5, [pc, #20]	; (800ebe8 <_lseek_r+0x24>)
 800ebd2:	602b      	str	r3, [r5, #0]
 800ebd4:	f7f4 fdec 	bl	80037b0 <_lseek>
 800ebd8:	1c43      	adds	r3, r0, #1
 800ebda:	d103      	bne.n	800ebe4 <_lseek_r+0x20>
 800ebdc:	682b      	ldr	r3, [r5, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d000      	beq.n	800ebe4 <_lseek_r+0x20>
 800ebe2:	6023      	str	r3, [r4, #0]
 800ebe4:	bd70      	pop	{r4, r5, r6, pc}
 800ebe6:	46c0      	nop			; (mov r8, r8)
 800ebe8:	20000600 	.word	0x20000600

0800ebec <_malloc_usable_size_r>:
 800ebec:	1f0b      	subs	r3, r1, #4
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	1f18      	subs	r0, r3, #4
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	da01      	bge.n	800ebfa <_malloc_usable_size_r+0xe>
 800ebf6:	580b      	ldr	r3, [r1, r0]
 800ebf8:	18c0      	adds	r0, r0, r3
 800ebfa:	4770      	bx	lr

0800ebfc <_read_r>:
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	0004      	movs	r4, r0
 800ec00:	0008      	movs	r0, r1
 800ec02:	0011      	movs	r1, r2
 800ec04:	001a      	movs	r2, r3
 800ec06:	2300      	movs	r3, #0
 800ec08:	4d05      	ldr	r5, [pc, #20]	; (800ec20 <_read_r+0x24>)
 800ec0a:	602b      	str	r3, [r5, #0]
 800ec0c:	f7f4 fd76 	bl	80036fc <_read>
 800ec10:	1c43      	adds	r3, r0, #1
 800ec12:	d103      	bne.n	800ec1c <_read_r+0x20>
 800ec14:	682b      	ldr	r3, [r5, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d000      	beq.n	800ec1c <_read_r+0x20>
 800ec1a:	6023      	str	r3, [r4, #0]
 800ec1c:	bd70      	pop	{r4, r5, r6, pc}
 800ec1e:	46c0      	nop			; (mov r8, r8)
 800ec20:	20000600 	.word	0x20000600

0800ec24 <_init>:
 800ec24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec26:	46c0      	nop			; (mov r8, r8)
 800ec28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec2a:	bc08      	pop	{r3}
 800ec2c:	469e      	mov	lr, r3
 800ec2e:	4770      	bx	lr

0800ec30 <_fini>:
 800ec30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec32:	46c0      	nop			; (mov r8, r8)
 800ec34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec36:	bc08      	pop	{r3}
 800ec38:	469e      	mov	lr, r3
 800ec3a:	4770      	bx	lr
