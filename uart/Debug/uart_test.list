
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebac  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800ec68  0800ec68  0001ec68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f228  0800f228  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800f228  0800f228  0001f228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f230  0800f230  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f230  0800f230  0001f230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f234  0800f234  0001f234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800f238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000208  0800f440  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  0800f440  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025184  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c4b  00000000  00000000  000453b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00049000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  0004a678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000571a  00000000  00000000  0004bb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc54  00000000  00000000  00051292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca6ca  00000000  00000000  0006dee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001385b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c4  00000000  00000000  00138604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000208 	.word	0x20000208
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ec50 	.word	0x0800ec50

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000020c 	.word	0x2000020c
 8000100:	0800ec50 	.word	0x0800ec50

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f81f 	bl	800147c <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff69 	bl	8001320 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f811 	bl	800147c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f807 	bl	800147c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff8b 	bl	8001398 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff81 	bl	8001398 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	1c08      	adds	r0, r1, #0
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 fef0 	bl	80022e8 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 feeb 	bl	80022e8 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	46d6      	mov	lr, sl
 8000682:	4646      	mov	r6, r8
 8000684:	000d      	movs	r5, r1
 8000686:	0001      	movs	r1, r0
 8000688:	0018      	movs	r0, r3
 800068a:	b5c0      	push	{r6, r7, lr}
 800068c:	0017      	movs	r7, r2
 800068e:	032b      	lsls	r3, r5, #12
 8000690:	0a5a      	lsrs	r2, r3, #9
 8000692:	0f4b      	lsrs	r3, r1, #29
 8000694:	4313      	orrs	r3, r2
 8000696:	00ca      	lsls	r2, r1, #3
 8000698:	4691      	mov	r9, r2
 800069a:	0302      	lsls	r2, r0, #12
 800069c:	006e      	lsls	r6, r5, #1
 800069e:	0041      	lsls	r1, r0, #1
 80006a0:	0a52      	lsrs	r2, r2, #9
 80006a2:	0fec      	lsrs	r4, r5, #31
 80006a4:	0f7d      	lsrs	r5, r7, #29
 80006a6:	4315      	orrs	r5, r2
 80006a8:	0d76      	lsrs	r6, r6, #21
 80006aa:	0d49      	lsrs	r1, r1, #21
 80006ac:	0fc0      	lsrs	r0, r0, #31
 80006ae:	4682      	mov	sl, r0
 80006b0:	46ac      	mov	ip, r5
 80006b2:	00ff      	lsls	r7, r7, #3
 80006b4:	1a72      	subs	r2, r6, r1
 80006b6:	4284      	cmp	r4, r0
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x40>
 80006ba:	e098      	b.n	80007ee <__aeabi_dadd+0x172>
 80006bc:	2a00      	cmp	r2, #0
 80006be:	dc00      	bgt.n	80006c2 <__aeabi_dadd+0x46>
 80006c0:	e081      	b.n	80007c6 <__aeabi_dadd+0x14a>
 80006c2:	2900      	cmp	r1, #0
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x4c>
 80006c6:	e0b6      	b.n	8000836 <__aeabi_dadd+0x1ba>
 80006c8:	49c9      	ldr	r1, [pc, #804]	; (80009f0 <__aeabi_dadd+0x374>)
 80006ca:	428e      	cmp	r6, r1
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x54>
 80006ce:	e172      	b.n	80009b6 <__aeabi_dadd+0x33a>
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	0028      	movs	r0, r5
 80006d4:	0409      	lsls	r1, r1, #16
 80006d6:	4308      	orrs	r0, r1
 80006d8:	4684      	mov	ip, r0
 80006da:	2a38      	cmp	r2, #56	; 0x38
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_dadd+0x64>
 80006de:	e15e      	b.n	800099e <__aeabi_dadd+0x322>
 80006e0:	2a1f      	cmp	r2, #31
 80006e2:	dd00      	ble.n	80006e6 <__aeabi_dadd+0x6a>
 80006e4:	e1ee      	b.n	8000ac4 <__aeabi_dadd+0x448>
 80006e6:	2020      	movs	r0, #32
 80006e8:	0039      	movs	r1, r7
 80006ea:	4665      	mov	r5, ip
 80006ec:	1a80      	subs	r0, r0, r2
 80006ee:	4087      	lsls	r7, r0
 80006f0:	40d1      	lsrs	r1, r2
 80006f2:	4085      	lsls	r5, r0
 80006f4:	430d      	orrs	r5, r1
 80006f6:	0039      	movs	r1, r7
 80006f8:	1e4f      	subs	r7, r1, #1
 80006fa:	41b9      	sbcs	r1, r7
 80006fc:	4667      	mov	r7, ip
 80006fe:	40d7      	lsrs	r7, r2
 8000700:	4329      	orrs	r1, r5
 8000702:	1bdb      	subs	r3, r3, r7
 8000704:	464a      	mov	r2, r9
 8000706:	1a55      	subs	r5, r2, r1
 8000708:	45a9      	cmp	r9, r5
 800070a:	4189      	sbcs	r1, r1
 800070c:	4249      	negs	r1, r1
 800070e:	1a5b      	subs	r3, r3, r1
 8000710:	4698      	mov	r8, r3
 8000712:	4643      	mov	r3, r8
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	d400      	bmi.n	800071a <__aeabi_dadd+0x9e>
 8000718:	e0cc      	b.n	80008b4 <__aeabi_dadd+0x238>
 800071a:	4643      	mov	r3, r8
 800071c:	025b      	lsls	r3, r3, #9
 800071e:	0a5b      	lsrs	r3, r3, #9
 8000720:	4698      	mov	r8, r3
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0xae>
 8000728:	e12c      	b.n	8000984 <__aeabi_dadd+0x308>
 800072a:	4640      	mov	r0, r8
 800072c:	f001 fdbe 	bl	80022ac <__clzsi2>
 8000730:	0001      	movs	r1, r0
 8000732:	3908      	subs	r1, #8
 8000734:	2220      	movs	r2, #32
 8000736:	0028      	movs	r0, r5
 8000738:	4643      	mov	r3, r8
 800073a:	1a52      	subs	r2, r2, r1
 800073c:	408b      	lsls	r3, r1
 800073e:	40d0      	lsrs	r0, r2
 8000740:	408d      	lsls	r5, r1
 8000742:	4303      	orrs	r3, r0
 8000744:	428e      	cmp	r6, r1
 8000746:	dd00      	ble.n	800074a <__aeabi_dadd+0xce>
 8000748:	e117      	b.n	800097a <__aeabi_dadd+0x2fe>
 800074a:	1b8e      	subs	r6, r1, r6
 800074c:	1c72      	adds	r2, r6, #1
 800074e:	2a1f      	cmp	r2, #31
 8000750:	dd00      	ble.n	8000754 <__aeabi_dadd+0xd8>
 8000752:	e1a7      	b.n	8000aa4 <__aeabi_dadd+0x428>
 8000754:	2120      	movs	r1, #32
 8000756:	0018      	movs	r0, r3
 8000758:	002e      	movs	r6, r5
 800075a:	1a89      	subs	r1, r1, r2
 800075c:	408d      	lsls	r5, r1
 800075e:	4088      	lsls	r0, r1
 8000760:	40d6      	lsrs	r6, r2
 8000762:	40d3      	lsrs	r3, r2
 8000764:	1e69      	subs	r1, r5, #1
 8000766:	418d      	sbcs	r5, r1
 8000768:	4330      	orrs	r0, r6
 800076a:	4698      	mov	r8, r3
 800076c:	2600      	movs	r6, #0
 800076e:	4305      	orrs	r5, r0
 8000770:	076b      	lsls	r3, r5, #29
 8000772:	d009      	beq.n	8000788 <__aeabi_dadd+0x10c>
 8000774:	230f      	movs	r3, #15
 8000776:	402b      	ands	r3, r5
 8000778:	2b04      	cmp	r3, #4
 800077a:	d005      	beq.n	8000788 <__aeabi_dadd+0x10c>
 800077c:	1d2b      	adds	r3, r5, #4
 800077e:	42ab      	cmp	r3, r5
 8000780:	41ad      	sbcs	r5, r5
 8000782:	426d      	negs	r5, r5
 8000784:	44a8      	add	r8, r5
 8000786:	001d      	movs	r5, r3
 8000788:	4643      	mov	r3, r8
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	d400      	bmi.n	8000790 <__aeabi_dadd+0x114>
 800078e:	e094      	b.n	80008ba <__aeabi_dadd+0x23e>
 8000790:	4b97      	ldr	r3, [pc, #604]	; (80009f0 <__aeabi_dadd+0x374>)
 8000792:	1c72      	adds	r2, r6, #1
 8000794:	429a      	cmp	r2, r3
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x11e>
 8000798:	e09d      	b.n	80008d6 <__aeabi_dadd+0x25a>
 800079a:	4641      	mov	r1, r8
 800079c:	4b95      	ldr	r3, [pc, #596]	; (80009f4 <__aeabi_dadd+0x378>)
 800079e:	08ed      	lsrs	r5, r5, #3
 80007a0:	4019      	ands	r1, r3
 80007a2:	000b      	movs	r3, r1
 80007a4:	0552      	lsls	r2, r2, #21
 80007a6:	0749      	lsls	r1, r1, #29
 80007a8:	025b      	lsls	r3, r3, #9
 80007aa:	4329      	orrs	r1, r5
 80007ac:	0b1b      	lsrs	r3, r3, #12
 80007ae:	0d52      	lsrs	r2, r2, #21
 80007b0:	0512      	lsls	r2, r2, #20
 80007b2:	4313      	orrs	r3, r2
 80007b4:	07e4      	lsls	r4, r4, #31
 80007b6:	4323      	orrs	r3, r4
 80007b8:	0008      	movs	r0, r1
 80007ba:	0019      	movs	r1, r3
 80007bc:	bce0      	pop	{r5, r6, r7}
 80007be:	46ba      	mov	sl, r7
 80007c0:	46b1      	mov	r9, r6
 80007c2:	46a8      	mov	r8, r5
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d043      	beq.n	8000852 <__aeabi_dadd+0x1d6>
 80007ca:	1b8a      	subs	r2, r1, r6
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d000      	beq.n	80007d2 <__aeabi_dadd+0x156>
 80007d0:	e12a      	b.n	8000a28 <__aeabi_dadd+0x3ac>
 80007d2:	464c      	mov	r4, r9
 80007d4:	431c      	orrs	r4, r3
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x15e>
 80007d8:	e1d1      	b.n	8000b7e <__aeabi_dadd+0x502>
 80007da:	1e54      	subs	r4, r2, #1
 80007dc:	2a01      	cmp	r2, #1
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x166>
 80007e0:	e21f      	b.n	8000c22 <__aeabi_dadd+0x5a6>
 80007e2:	4d83      	ldr	r5, [pc, #524]	; (80009f0 <__aeabi_dadd+0x374>)
 80007e4:	42aa      	cmp	r2, r5
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x16e>
 80007e8:	e272      	b.n	8000cd0 <__aeabi_dadd+0x654>
 80007ea:	0022      	movs	r2, r4
 80007ec:	e123      	b.n	8000a36 <__aeabi_dadd+0x3ba>
 80007ee:	2a00      	cmp	r2, #0
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_dadd+0x178>
 80007f2:	e098      	b.n	8000926 <__aeabi_dadd+0x2aa>
 80007f4:	2900      	cmp	r1, #0
 80007f6:	d042      	beq.n	800087e <__aeabi_dadd+0x202>
 80007f8:	497d      	ldr	r1, [pc, #500]	; (80009f0 <__aeabi_dadd+0x374>)
 80007fa:	428e      	cmp	r6, r1
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x184>
 80007fe:	e0da      	b.n	80009b6 <__aeabi_dadd+0x33a>
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	0028      	movs	r0, r5
 8000804:	0409      	lsls	r1, r1, #16
 8000806:	4308      	orrs	r0, r1
 8000808:	4684      	mov	ip, r0
 800080a:	2a38      	cmp	r2, #56	; 0x38
 800080c:	dd00      	ble.n	8000810 <__aeabi_dadd+0x194>
 800080e:	e129      	b.n	8000a64 <__aeabi_dadd+0x3e8>
 8000810:	2a1f      	cmp	r2, #31
 8000812:	dc00      	bgt.n	8000816 <__aeabi_dadd+0x19a>
 8000814:	e187      	b.n	8000b26 <__aeabi_dadd+0x4aa>
 8000816:	0011      	movs	r1, r2
 8000818:	4665      	mov	r5, ip
 800081a:	3920      	subs	r1, #32
 800081c:	40cd      	lsrs	r5, r1
 800081e:	2a20      	cmp	r2, #32
 8000820:	d004      	beq.n	800082c <__aeabi_dadd+0x1b0>
 8000822:	2040      	movs	r0, #64	; 0x40
 8000824:	4661      	mov	r1, ip
 8000826:	1a82      	subs	r2, r0, r2
 8000828:	4091      	lsls	r1, r2
 800082a:	430f      	orrs	r7, r1
 800082c:	0039      	movs	r1, r7
 800082e:	1e4f      	subs	r7, r1, #1
 8000830:	41b9      	sbcs	r1, r7
 8000832:	430d      	orrs	r5, r1
 8000834:	e11b      	b.n	8000a6e <__aeabi_dadd+0x3f2>
 8000836:	0029      	movs	r1, r5
 8000838:	4339      	orrs	r1, r7
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x1c2>
 800083c:	e0b5      	b.n	80009aa <__aeabi_dadd+0x32e>
 800083e:	1e51      	subs	r1, r2, #1
 8000840:	2a01      	cmp	r2, #1
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x1ca>
 8000844:	e1ab      	b.n	8000b9e <__aeabi_dadd+0x522>
 8000846:	486a      	ldr	r0, [pc, #424]	; (80009f0 <__aeabi_dadd+0x374>)
 8000848:	4282      	cmp	r2, r0
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x1d2>
 800084c:	e1b2      	b.n	8000bb4 <__aeabi_dadd+0x538>
 800084e:	000a      	movs	r2, r1
 8000850:	e743      	b.n	80006da <__aeabi_dadd+0x5e>
 8000852:	4969      	ldr	r1, [pc, #420]	; (80009f8 <__aeabi_dadd+0x37c>)
 8000854:	1c75      	adds	r5, r6, #1
 8000856:	420d      	tst	r5, r1
 8000858:	d000      	beq.n	800085c <__aeabi_dadd+0x1e0>
 800085a:	e0cf      	b.n	80009fc <__aeabi_dadd+0x380>
 800085c:	2e00      	cmp	r6, #0
 800085e:	d000      	beq.n	8000862 <__aeabi_dadd+0x1e6>
 8000860:	e193      	b.n	8000b8a <__aeabi_dadd+0x50e>
 8000862:	4649      	mov	r1, r9
 8000864:	4319      	orrs	r1, r3
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x1ee>
 8000868:	e1d1      	b.n	8000c0e <__aeabi_dadd+0x592>
 800086a:	4661      	mov	r1, ip
 800086c:	4339      	orrs	r1, r7
 800086e:	d000      	beq.n	8000872 <__aeabi_dadd+0x1f6>
 8000870:	e1e3      	b.n	8000c3a <__aeabi_dadd+0x5be>
 8000872:	4649      	mov	r1, r9
 8000874:	0758      	lsls	r0, r3, #29
 8000876:	08c9      	lsrs	r1, r1, #3
 8000878:	4301      	orrs	r1, r0
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	e026      	b.n	80008cc <__aeabi_dadd+0x250>
 800087e:	0029      	movs	r1, r5
 8000880:	4339      	orrs	r1, r7
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x20a>
 8000884:	e091      	b.n	80009aa <__aeabi_dadd+0x32e>
 8000886:	1e51      	subs	r1, r2, #1
 8000888:	2a01      	cmp	r2, #1
 800088a:	d005      	beq.n	8000898 <__aeabi_dadd+0x21c>
 800088c:	4858      	ldr	r0, [pc, #352]	; (80009f0 <__aeabi_dadd+0x374>)
 800088e:	4282      	cmp	r2, r0
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x218>
 8000892:	e18f      	b.n	8000bb4 <__aeabi_dadd+0x538>
 8000894:	000a      	movs	r2, r1
 8000896:	e7b8      	b.n	800080a <__aeabi_dadd+0x18e>
 8000898:	003d      	movs	r5, r7
 800089a:	444d      	add	r5, r9
 800089c:	454d      	cmp	r5, r9
 800089e:	4189      	sbcs	r1, r1
 80008a0:	4463      	add	r3, ip
 80008a2:	4698      	mov	r8, r3
 80008a4:	4249      	negs	r1, r1
 80008a6:	4488      	add	r8, r1
 80008a8:	4643      	mov	r3, r8
 80008aa:	2602      	movs	r6, #2
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	d500      	bpl.n	80008b2 <__aeabi_dadd+0x236>
 80008b0:	e0eb      	b.n	8000a8a <__aeabi_dadd+0x40e>
 80008b2:	3e01      	subs	r6, #1
 80008b4:	076b      	lsls	r3, r5, #29
 80008b6:	d000      	beq.n	80008ba <__aeabi_dadd+0x23e>
 80008b8:	e75c      	b.n	8000774 <__aeabi_dadd+0xf8>
 80008ba:	4643      	mov	r3, r8
 80008bc:	08e9      	lsrs	r1, r5, #3
 80008be:	075a      	lsls	r2, r3, #29
 80008c0:	4311      	orrs	r1, r2
 80008c2:	0032      	movs	r2, r6
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	484a      	ldr	r0, [pc, #296]	; (80009f0 <__aeabi_dadd+0x374>)
 80008c8:	4282      	cmp	r2, r0
 80008ca:	d021      	beq.n	8000910 <__aeabi_dadd+0x294>
 80008cc:	031b      	lsls	r3, r3, #12
 80008ce:	0552      	lsls	r2, r2, #21
 80008d0:	0b1b      	lsrs	r3, r3, #12
 80008d2:	0d52      	lsrs	r2, r2, #21
 80008d4:	e76c      	b.n	80007b0 <__aeabi_dadd+0x134>
 80008d6:	2300      	movs	r3, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	e769      	b.n	80007b0 <__aeabi_dadd+0x134>
 80008dc:	002a      	movs	r2, r5
 80008de:	433a      	orrs	r2, r7
 80008e0:	d069      	beq.n	80009b6 <__aeabi_dadd+0x33a>
 80008e2:	464a      	mov	r2, r9
 80008e4:	0758      	lsls	r0, r3, #29
 80008e6:	08d1      	lsrs	r1, r2, #3
 80008e8:	08da      	lsrs	r2, r3, #3
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	031b      	lsls	r3, r3, #12
 80008ee:	4308      	orrs	r0, r1
 80008f0:	421a      	tst	r2, r3
 80008f2:	d007      	beq.n	8000904 <__aeabi_dadd+0x288>
 80008f4:	0029      	movs	r1, r5
 80008f6:	08ed      	lsrs	r5, r5, #3
 80008f8:	421d      	tst	r5, r3
 80008fa:	d103      	bne.n	8000904 <__aeabi_dadd+0x288>
 80008fc:	002a      	movs	r2, r5
 80008fe:	08ff      	lsrs	r7, r7, #3
 8000900:	0748      	lsls	r0, r1, #29
 8000902:	4338      	orrs	r0, r7
 8000904:	0f43      	lsrs	r3, r0, #29
 8000906:	00c1      	lsls	r1, r0, #3
 8000908:	075b      	lsls	r3, r3, #29
 800090a:	08c9      	lsrs	r1, r1, #3
 800090c:	4319      	orrs	r1, r3
 800090e:	0013      	movs	r3, r2
 8000910:	000a      	movs	r2, r1
 8000912:	431a      	orrs	r2, r3
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x29c>
 8000916:	e213      	b.n	8000d40 <__aeabi_dadd+0x6c4>
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	0312      	lsls	r2, r2, #12
 800091c:	4313      	orrs	r3, r2
 800091e:	031b      	lsls	r3, r3, #12
 8000920:	4a33      	ldr	r2, [pc, #204]	; (80009f0 <__aeabi_dadd+0x374>)
 8000922:	0b1b      	lsrs	r3, r3, #12
 8000924:	e744      	b.n	80007b0 <__aeabi_dadd+0x134>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d04b      	beq.n	80009c2 <__aeabi_dadd+0x346>
 800092a:	1b8a      	subs	r2, r1, r6
 800092c:	2e00      	cmp	r6, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x2b6>
 8000930:	e0e7      	b.n	8000b02 <__aeabi_dadd+0x486>
 8000932:	482f      	ldr	r0, [pc, #188]	; (80009f0 <__aeabi_dadd+0x374>)
 8000934:	4281      	cmp	r1, r0
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x2be>
 8000938:	e195      	b.n	8000c66 <__aeabi_dadd+0x5ea>
 800093a:	2080      	movs	r0, #128	; 0x80
 800093c:	0400      	lsls	r0, r0, #16
 800093e:	4303      	orrs	r3, r0
 8000940:	2a38      	cmp	r2, #56	; 0x38
 8000942:	dd00      	ble.n	8000946 <__aeabi_dadd+0x2ca>
 8000944:	e143      	b.n	8000bce <__aeabi_dadd+0x552>
 8000946:	2a1f      	cmp	r2, #31
 8000948:	dd00      	ble.n	800094c <__aeabi_dadd+0x2d0>
 800094a:	e1db      	b.n	8000d04 <__aeabi_dadd+0x688>
 800094c:	2020      	movs	r0, #32
 800094e:	001d      	movs	r5, r3
 8000950:	464e      	mov	r6, r9
 8000952:	1a80      	subs	r0, r0, r2
 8000954:	4085      	lsls	r5, r0
 8000956:	40d6      	lsrs	r6, r2
 8000958:	4335      	orrs	r5, r6
 800095a:	464e      	mov	r6, r9
 800095c:	4086      	lsls	r6, r0
 800095e:	0030      	movs	r0, r6
 8000960:	40d3      	lsrs	r3, r2
 8000962:	1e46      	subs	r6, r0, #1
 8000964:	41b0      	sbcs	r0, r6
 8000966:	449c      	add	ip, r3
 8000968:	4305      	orrs	r5, r0
 800096a:	19ed      	adds	r5, r5, r7
 800096c:	42bd      	cmp	r5, r7
 800096e:	419b      	sbcs	r3, r3
 8000970:	425b      	negs	r3, r3
 8000972:	4463      	add	r3, ip
 8000974:	4698      	mov	r8, r3
 8000976:	000e      	movs	r6, r1
 8000978:	e07f      	b.n	8000a7a <__aeabi_dadd+0x3fe>
 800097a:	4a1e      	ldr	r2, [pc, #120]	; (80009f4 <__aeabi_dadd+0x378>)
 800097c:	1a76      	subs	r6, r6, r1
 800097e:	4013      	ands	r3, r2
 8000980:	4698      	mov	r8, r3
 8000982:	e6f5      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000984:	0028      	movs	r0, r5
 8000986:	f001 fc91 	bl	80022ac <__clzsi2>
 800098a:	0001      	movs	r1, r0
 800098c:	3118      	adds	r1, #24
 800098e:	291f      	cmp	r1, #31
 8000990:	dc00      	bgt.n	8000994 <__aeabi_dadd+0x318>
 8000992:	e6cf      	b.n	8000734 <__aeabi_dadd+0xb8>
 8000994:	002b      	movs	r3, r5
 8000996:	3808      	subs	r0, #8
 8000998:	4083      	lsls	r3, r0
 800099a:	2500      	movs	r5, #0
 800099c:	e6d2      	b.n	8000744 <__aeabi_dadd+0xc8>
 800099e:	4662      	mov	r2, ip
 80009a0:	433a      	orrs	r2, r7
 80009a2:	0011      	movs	r1, r2
 80009a4:	1e4f      	subs	r7, r1, #1
 80009a6:	41b9      	sbcs	r1, r7
 80009a8:	e6ac      	b.n	8000704 <__aeabi_dadd+0x88>
 80009aa:	4649      	mov	r1, r9
 80009ac:	0758      	lsls	r0, r3, #29
 80009ae:	08c9      	lsrs	r1, r1, #3
 80009b0:	4301      	orrs	r1, r0
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	e787      	b.n	80008c6 <__aeabi_dadd+0x24a>
 80009b6:	4649      	mov	r1, r9
 80009b8:	075a      	lsls	r2, r3, #29
 80009ba:	08c9      	lsrs	r1, r1, #3
 80009bc:	4311      	orrs	r1, r2
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	e7a6      	b.n	8000910 <__aeabi_dadd+0x294>
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <__aeabi_dadd+0x37c>)
 80009c4:	1c70      	adds	r0, r6, #1
 80009c6:	4208      	tst	r0, r1
 80009c8:	d000      	beq.n	80009cc <__aeabi_dadd+0x350>
 80009ca:	e0bb      	b.n	8000b44 <__aeabi_dadd+0x4c8>
 80009cc:	2e00      	cmp	r6, #0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_dadd+0x356>
 80009d0:	e114      	b.n	8000bfc <__aeabi_dadd+0x580>
 80009d2:	4649      	mov	r1, r9
 80009d4:	4319      	orrs	r1, r3
 80009d6:	d100      	bne.n	80009da <__aeabi_dadd+0x35e>
 80009d8:	e175      	b.n	8000cc6 <__aeabi_dadd+0x64a>
 80009da:	0029      	movs	r1, r5
 80009dc:	4339      	orrs	r1, r7
 80009de:	d000      	beq.n	80009e2 <__aeabi_dadd+0x366>
 80009e0:	e17e      	b.n	8000ce0 <__aeabi_dadd+0x664>
 80009e2:	4649      	mov	r1, r9
 80009e4:	0758      	lsls	r0, r3, #29
 80009e6:	08c9      	lsrs	r1, r1, #3
 80009e8:	4301      	orrs	r1, r0
 80009ea:	08db      	lsrs	r3, r3, #3
 80009ec:	e76e      	b.n	80008cc <__aeabi_dadd+0x250>
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	000007ff 	.word	0x000007ff
 80009f4:	ff7fffff 	.word	0xff7fffff
 80009f8:	000007fe 	.word	0x000007fe
 80009fc:	4649      	mov	r1, r9
 80009fe:	1bcd      	subs	r5, r1, r7
 8000a00:	4661      	mov	r1, ip
 8000a02:	1a58      	subs	r0, r3, r1
 8000a04:	45a9      	cmp	r9, r5
 8000a06:	4189      	sbcs	r1, r1
 8000a08:	4249      	negs	r1, r1
 8000a0a:	4688      	mov	r8, r1
 8000a0c:	0001      	movs	r1, r0
 8000a0e:	4640      	mov	r0, r8
 8000a10:	1a09      	subs	r1, r1, r0
 8000a12:	4688      	mov	r8, r1
 8000a14:	0209      	lsls	r1, r1, #8
 8000a16:	d500      	bpl.n	8000a1a <__aeabi_dadd+0x39e>
 8000a18:	e0a6      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 8000a1a:	4641      	mov	r1, r8
 8000a1c:	4329      	orrs	r1, r5
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x3a6>
 8000a20:	e67f      	b.n	8000722 <__aeabi_dadd+0xa6>
 8000a22:	2300      	movs	r3, #0
 8000a24:	2400      	movs	r4, #0
 8000a26:	e751      	b.n	80008cc <__aeabi_dadd+0x250>
 8000a28:	4cc7      	ldr	r4, [pc, #796]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000a2a:	42a1      	cmp	r1, r4
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dadd+0x3b4>
 8000a2e:	e0c7      	b.n	8000bc0 <__aeabi_dadd+0x544>
 8000a30:	2480      	movs	r4, #128	; 0x80
 8000a32:	0424      	lsls	r4, r4, #16
 8000a34:	4323      	orrs	r3, r4
 8000a36:	2a38      	cmp	r2, #56	; 0x38
 8000a38:	dc54      	bgt.n	8000ae4 <__aeabi_dadd+0x468>
 8000a3a:	2a1f      	cmp	r2, #31
 8000a3c:	dd00      	ble.n	8000a40 <__aeabi_dadd+0x3c4>
 8000a3e:	e0cc      	b.n	8000bda <__aeabi_dadd+0x55e>
 8000a40:	2420      	movs	r4, #32
 8000a42:	4648      	mov	r0, r9
 8000a44:	1aa4      	subs	r4, r4, r2
 8000a46:	001d      	movs	r5, r3
 8000a48:	464e      	mov	r6, r9
 8000a4a:	40a0      	lsls	r0, r4
 8000a4c:	40d6      	lsrs	r6, r2
 8000a4e:	40a5      	lsls	r5, r4
 8000a50:	0004      	movs	r4, r0
 8000a52:	40d3      	lsrs	r3, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	4335      	orrs	r5, r6
 8000a58:	1e66      	subs	r6, r4, #1
 8000a5a:	41b4      	sbcs	r4, r6
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	469c      	mov	ip, r3
 8000a60:	4325      	orrs	r5, r4
 8000a62:	e044      	b.n	8000aee <__aeabi_dadd+0x472>
 8000a64:	4662      	mov	r2, ip
 8000a66:	433a      	orrs	r2, r7
 8000a68:	0015      	movs	r5, r2
 8000a6a:	1e6f      	subs	r7, r5, #1
 8000a6c:	41bd      	sbcs	r5, r7
 8000a6e:	444d      	add	r5, r9
 8000a70:	454d      	cmp	r5, r9
 8000a72:	4189      	sbcs	r1, r1
 8000a74:	4249      	negs	r1, r1
 8000a76:	4688      	mov	r8, r1
 8000a78:	4498      	add	r8, r3
 8000a7a:	4643      	mov	r3, r8
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	d400      	bmi.n	8000a82 <__aeabi_dadd+0x406>
 8000a80:	e718      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000a82:	4bb1      	ldr	r3, [pc, #708]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000a84:	3601      	adds	r6, #1
 8000a86:	429e      	cmp	r6, r3
 8000a88:	d049      	beq.n	8000b1e <__aeabi_dadd+0x4a2>
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	4baf      	ldr	r3, [pc, #700]	; (8000d4c <__aeabi_dadd+0x6d0>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	401a      	ands	r2, r3
 8000a92:	0013      	movs	r3, r2
 8000a94:	086a      	lsrs	r2, r5, #1
 8000a96:	400d      	ands	r5, r1
 8000a98:	4315      	orrs	r5, r2
 8000a9a:	07d9      	lsls	r1, r3, #31
 8000a9c:	085b      	lsrs	r3, r3, #1
 8000a9e:	4698      	mov	r8, r3
 8000aa0:	430d      	orrs	r5, r1
 8000aa2:	e665      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	3e1f      	subs	r6, #31
 8000aa8:	40f0      	lsrs	r0, r6
 8000aaa:	2a20      	cmp	r2, #32
 8000aac:	d003      	beq.n	8000ab6 <__aeabi_dadd+0x43a>
 8000aae:	2140      	movs	r1, #64	; 0x40
 8000ab0:	1a8a      	subs	r2, r1, r2
 8000ab2:	4093      	lsls	r3, r2
 8000ab4:	431d      	orrs	r5, r3
 8000ab6:	1e69      	subs	r1, r5, #1
 8000ab8:	418d      	sbcs	r5, r1
 8000aba:	2300      	movs	r3, #0
 8000abc:	2600      	movs	r6, #0
 8000abe:	4698      	mov	r8, r3
 8000ac0:	4305      	orrs	r5, r0
 8000ac2:	e6f7      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	4665      	mov	r5, ip
 8000ac8:	3920      	subs	r1, #32
 8000aca:	40cd      	lsrs	r5, r1
 8000acc:	2a20      	cmp	r2, #32
 8000ace:	d004      	beq.n	8000ada <__aeabi_dadd+0x45e>
 8000ad0:	2040      	movs	r0, #64	; 0x40
 8000ad2:	4661      	mov	r1, ip
 8000ad4:	1a82      	subs	r2, r0, r2
 8000ad6:	4091      	lsls	r1, r2
 8000ad8:	430f      	orrs	r7, r1
 8000ada:	0039      	movs	r1, r7
 8000adc:	1e4f      	subs	r7, r1, #1
 8000ade:	41b9      	sbcs	r1, r7
 8000ae0:	4329      	orrs	r1, r5
 8000ae2:	e60f      	b.n	8000704 <__aeabi_dadd+0x88>
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	001d      	movs	r5, r3
 8000aea:	1e6b      	subs	r3, r5, #1
 8000aec:	419d      	sbcs	r5, r3
 8000aee:	1b7d      	subs	r5, r7, r5
 8000af0:	42af      	cmp	r7, r5
 8000af2:	419b      	sbcs	r3, r3
 8000af4:	4662      	mov	r2, ip
 8000af6:	425b      	negs	r3, r3
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	4698      	mov	r8, r3
 8000afc:	4654      	mov	r4, sl
 8000afe:	000e      	movs	r6, r1
 8000b00:	e607      	b.n	8000712 <__aeabi_dadd+0x96>
 8000b02:	4648      	mov	r0, r9
 8000b04:	4318      	orrs	r0, r3
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x48e>
 8000b08:	e0b3      	b.n	8000c72 <__aeabi_dadd+0x5f6>
 8000b0a:	1e50      	subs	r0, r2, #1
 8000b0c:	2a01      	cmp	r2, #1
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x496>
 8000b10:	e10d      	b.n	8000d2e <__aeabi_dadd+0x6b2>
 8000b12:	4d8d      	ldr	r5, [pc, #564]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000b14:	42aa      	cmp	r2, r5
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x49e>
 8000b18:	e0a5      	b.n	8000c66 <__aeabi_dadd+0x5ea>
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	e710      	b.n	8000940 <__aeabi_dadd+0x2c4>
 8000b1e:	0032      	movs	r2, r6
 8000b20:	2300      	movs	r3, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	e644      	b.n	80007b0 <__aeabi_dadd+0x134>
 8000b26:	2120      	movs	r1, #32
 8000b28:	0038      	movs	r0, r7
 8000b2a:	1a89      	subs	r1, r1, r2
 8000b2c:	4665      	mov	r5, ip
 8000b2e:	408f      	lsls	r7, r1
 8000b30:	408d      	lsls	r5, r1
 8000b32:	40d0      	lsrs	r0, r2
 8000b34:	1e79      	subs	r1, r7, #1
 8000b36:	418f      	sbcs	r7, r1
 8000b38:	4305      	orrs	r5, r0
 8000b3a:	433d      	orrs	r5, r7
 8000b3c:	4667      	mov	r7, ip
 8000b3e:	40d7      	lsrs	r7, r2
 8000b40:	19db      	adds	r3, r3, r7
 8000b42:	e794      	b.n	8000a6e <__aeabi_dadd+0x3f2>
 8000b44:	4a80      	ldr	r2, [pc, #512]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000b46:	4290      	cmp	r0, r2
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x4d0>
 8000b4a:	e0ec      	b.n	8000d26 <__aeabi_dadd+0x6aa>
 8000b4c:	0039      	movs	r1, r7
 8000b4e:	4449      	add	r1, r9
 8000b50:	4549      	cmp	r1, r9
 8000b52:	4192      	sbcs	r2, r2
 8000b54:	4463      	add	r3, ip
 8000b56:	4252      	negs	r2, r2
 8000b58:	189b      	adds	r3, r3, r2
 8000b5a:	07dd      	lsls	r5, r3, #31
 8000b5c:	0849      	lsrs	r1, r1, #1
 8000b5e:	085b      	lsrs	r3, r3, #1
 8000b60:	4698      	mov	r8, r3
 8000b62:	0006      	movs	r6, r0
 8000b64:	430d      	orrs	r5, r1
 8000b66:	e6a5      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1abd      	subs	r5, r7, r2
 8000b6c:	42af      	cmp	r7, r5
 8000b6e:	4189      	sbcs	r1, r1
 8000b70:	4662      	mov	r2, ip
 8000b72:	4249      	negs	r1, r1
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	1a5b      	subs	r3, r3, r1
 8000b78:	4698      	mov	r8, r3
 8000b7a:	4654      	mov	r4, sl
 8000b7c:	e5d1      	b.n	8000722 <__aeabi_dadd+0xa6>
 8000b7e:	076c      	lsls	r4, r5, #29
 8000b80:	08f9      	lsrs	r1, r7, #3
 8000b82:	4321      	orrs	r1, r4
 8000b84:	08eb      	lsrs	r3, r5, #3
 8000b86:	0004      	movs	r4, r0
 8000b88:	e69d      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b8a:	464a      	mov	r2, r9
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	d175      	bne.n	8000c7c <__aeabi_dadd+0x600>
 8000b90:	4661      	mov	r1, ip
 8000b92:	4339      	orrs	r1, r7
 8000b94:	d114      	bne.n	8000bc0 <__aeabi_dadd+0x544>
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	2400      	movs	r4, #0
 8000b9a:	031b      	lsls	r3, r3, #12
 8000b9c:	e6bc      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b9e:	464a      	mov	r2, r9
 8000ba0:	1bd5      	subs	r5, r2, r7
 8000ba2:	45a9      	cmp	r9, r5
 8000ba4:	4189      	sbcs	r1, r1
 8000ba6:	4662      	mov	r2, ip
 8000ba8:	4249      	negs	r1, r1
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	4698      	mov	r8, r3
 8000bb0:	2601      	movs	r6, #1
 8000bb2:	e5ae      	b.n	8000712 <__aeabi_dadd+0x96>
 8000bb4:	464a      	mov	r2, r9
 8000bb6:	08d1      	lsrs	r1, r2, #3
 8000bb8:	075a      	lsls	r2, r3, #29
 8000bba:	4311      	orrs	r1, r2
 8000bbc:	08db      	lsrs	r3, r3, #3
 8000bbe:	e6a7      	b.n	8000910 <__aeabi_dadd+0x294>
 8000bc0:	4663      	mov	r3, ip
 8000bc2:	08f9      	lsrs	r1, r7, #3
 8000bc4:	075a      	lsls	r2, r3, #29
 8000bc6:	4654      	mov	r4, sl
 8000bc8:	4311      	orrs	r1, r2
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	e6a0      	b.n	8000910 <__aeabi_dadd+0x294>
 8000bce:	464a      	mov	r2, r9
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	001d      	movs	r5, r3
 8000bd4:	1e6b      	subs	r3, r5, #1
 8000bd6:	419d      	sbcs	r5, r3
 8000bd8:	e6c7      	b.n	800096a <__aeabi_dadd+0x2ee>
 8000bda:	0014      	movs	r4, r2
 8000bdc:	001e      	movs	r6, r3
 8000bde:	3c20      	subs	r4, #32
 8000be0:	40e6      	lsrs	r6, r4
 8000be2:	2a20      	cmp	r2, #32
 8000be4:	d005      	beq.n	8000bf2 <__aeabi_dadd+0x576>
 8000be6:	2440      	movs	r4, #64	; 0x40
 8000be8:	1aa2      	subs	r2, r4, r2
 8000bea:	4093      	lsls	r3, r2
 8000bec:	464a      	mov	r2, r9
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	4691      	mov	r9, r2
 8000bf2:	464d      	mov	r5, r9
 8000bf4:	1e6b      	subs	r3, r5, #1
 8000bf6:	419d      	sbcs	r5, r3
 8000bf8:	4335      	orrs	r5, r6
 8000bfa:	e778      	b.n	8000aee <__aeabi_dadd+0x472>
 8000bfc:	464a      	mov	r2, r9
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	d000      	beq.n	8000c04 <__aeabi_dadd+0x588>
 8000c02:	e66b      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c04:	076b      	lsls	r3, r5, #29
 8000c06:	08f9      	lsrs	r1, r7, #3
 8000c08:	4319      	orrs	r1, r3
 8000c0a:	08eb      	lsrs	r3, r5, #3
 8000c0c:	e680      	b.n	8000910 <__aeabi_dadd+0x294>
 8000c0e:	4661      	mov	r1, ip
 8000c10:	4339      	orrs	r1, r7
 8000c12:	d054      	beq.n	8000cbe <__aeabi_dadd+0x642>
 8000c14:	4663      	mov	r3, ip
 8000c16:	08f9      	lsrs	r1, r7, #3
 8000c18:	075c      	lsls	r4, r3, #29
 8000c1a:	4321      	orrs	r1, r4
 8000c1c:	08db      	lsrs	r3, r3, #3
 8000c1e:	0004      	movs	r4, r0
 8000c20:	e654      	b.n	80008cc <__aeabi_dadd+0x250>
 8000c22:	464a      	mov	r2, r9
 8000c24:	1abd      	subs	r5, r7, r2
 8000c26:	42af      	cmp	r7, r5
 8000c28:	4189      	sbcs	r1, r1
 8000c2a:	4662      	mov	r2, ip
 8000c2c:	4249      	negs	r1, r1
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	4698      	mov	r8, r3
 8000c34:	0004      	movs	r4, r0
 8000c36:	2601      	movs	r6, #1
 8000c38:	e56b      	b.n	8000712 <__aeabi_dadd+0x96>
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	1bd5      	subs	r5, r2, r7
 8000c3e:	45a9      	cmp	r9, r5
 8000c40:	4189      	sbcs	r1, r1
 8000c42:	4662      	mov	r2, ip
 8000c44:	4249      	negs	r1, r1
 8000c46:	1a9a      	subs	r2, r3, r2
 8000c48:	1a52      	subs	r2, r2, r1
 8000c4a:	4690      	mov	r8, r2
 8000c4c:	0212      	lsls	r2, r2, #8
 8000c4e:	d532      	bpl.n	8000cb6 <__aeabi_dadd+0x63a>
 8000c50:	464a      	mov	r2, r9
 8000c52:	1abd      	subs	r5, r7, r2
 8000c54:	42af      	cmp	r7, r5
 8000c56:	4189      	sbcs	r1, r1
 8000c58:	4662      	mov	r2, ip
 8000c5a:	4249      	negs	r1, r1
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	1a5b      	subs	r3, r3, r1
 8000c60:	4698      	mov	r8, r3
 8000c62:	0004      	movs	r4, r0
 8000c64:	e584      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000c66:	4663      	mov	r3, ip
 8000c68:	08f9      	lsrs	r1, r7, #3
 8000c6a:	075a      	lsls	r2, r3, #29
 8000c6c:	4311      	orrs	r1, r2
 8000c6e:	08db      	lsrs	r3, r3, #3
 8000c70:	e64e      	b.n	8000910 <__aeabi_dadd+0x294>
 8000c72:	08f9      	lsrs	r1, r7, #3
 8000c74:	0768      	lsls	r0, r5, #29
 8000c76:	4301      	orrs	r1, r0
 8000c78:	08eb      	lsrs	r3, r5, #3
 8000c7a:	e624      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c7c:	4662      	mov	r2, ip
 8000c7e:	433a      	orrs	r2, r7
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dadd+0x608>
 8000c82:	e698      	b.n	80009b6 <__aeabi_dadd+0x33a>
 8000c84:	464a      	mov	r2, r9
 8000c86:	08d1      	lsrs	r1, r2, #3
 8000c88:	075a      	lsls	r2, r3, #29
 8000c8a:	4311      	orrs	r1, r2
 8000c8c:	08da      	lsrs	r2, r3, #3
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	031b      	lsls	r3, r3, #12
 8000c92:	421a      	tst	r2, r3
 8000c94:	d008      	beq.n	8000ca8 <__aeabi_dadd+0x62c>
 8000c96:	4660      	mov	r0, ip
 8000c98:	08c5      	lsrs	r5, r0, #3
 8000c9a:	421d      	tst	r5, r3
 8000c9c:	d104      	bne.n	8000ca8 <__aeabi_dadd+0x62c>
 8000c9e:	4654      	mov	r4, sl
 8000ca0:	002a      	movs	r2, r5
 8000ca2:	08f9      	lsrs	r1, r7, #3
 8000ca4:	0743      	lsls	r3, r0, #29
 8000ca6:	4319      	orrs	r1, r3
 8000ca8:	0f4b      	lsrs	r3, r1, #29
 8000caa:	00c9      	lsls	r1, r1, #3
 8000cac:	075b      	lsls	r3, r3, #29
 8000cae:	08c9      	lsrs	r1, r1, #3
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	e62c      	b.n	8000910 <__aeabi_dadd+0x294>
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	4329      	orrs	r1, r5
 8000cba:	d000      	beq.n	8000cbe <__aeabi_dadd+0x642>
 8000cbc:	e5fa      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	000a      	movs	r2, r1
 8000cc2:	2400      	movs	r4, #0
 8000cc4:	e602      	b.n	80008cc <__aeabi_dadd+0x250>
 8000cc6:	076b      	lsls	r3, r5, #29
 8000cc8:	08f9      	lsrs	r1, r7, #3
 8000cca:	4319      	orrs	r1, r3
 8000ccc:	08eb      	lsrs	r3, r5, #3
 8000cce:	e5fd      	b.n	80008cc <__aeabi_dadd+0x250>
 8000cd0:	4663      	mov	r3, ip
 8000cd2:	08f9      	lsrs	r1, r7, #3
 8000cd4:	075b      	lsls	r3, r3, #29
 8000cd6:	4319      	orrs	r1, r3
 8000cd8:	4663      	mov	r3, ip
 8000cda:	0004      	movs	r4, r0
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	e617      	b.n	8000910 <__aeabi_dadd+0x294>
 8000ce0:	003d      	movs	r5, r7
 8000ce2:	444d      	add	r5, r9
 8000ce4:	4463      	add	r3, ip
 8000ce6:	454d      	cmp	r5, r9
 8000ce8:	4189      	sbcs	r1, r1
 8000cea:	4698      	mov	r8, r3
 8000cec:	4249      	negs	r1, r1
 8000cee:	4488      	add	r8, r1
 8000cf0:	4643      	mov	r3, r8
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	d400      	bmi.n	8000cf8 <__aeabi_dadd+0x67c>
 8000cf6:	e5dd      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000cf8:	4642      	mov	r2, r8
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <__aeabi_dadd+0x6d0>)
 8000cfc:	2601      	movs	r6, #1
 8000cfe:	401a      	ands	r2, r3
 8000d00:	4690      	mov	r8, r2
 8000d02:	e5d7      	b.n	80008b4 <__aeabi_dadd+0x238>
 8000d04:	0010      	movs	r0, r2
 8000d06:	001e      	movs	r6, r3
 8000d08:	3820      	subs	r0, #32
 8000d0a:	40c6      	lsrs	r6, r0
 8000d0c:	2a20      	cmp	r2, #32
 8000d0e:	d005      	beq.n	8000d1c <__aeabi_dadd+0x6a0>
 8000d10:	2040      	movs	r0, #64	; 0x40
 8000d12:	1a82      	subs	r2, r0, r2
 8000d14:	4093      	lsls	r3, r2
 8000d16:	464a      	mov	r2, r9
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	464d      	mov	r5, r9
 8000d1e:	1e6b      	subs	r3, r5, #1
 8000d20:	419d      	sbcs	r5, r3
 8000d22:	4335      	orrs	r5, r6
 8000d24:	e621      	b.n	800096a <__aeabi_dadd+0x2ee>
 8000d26:	0002      	movs	r2, r0
 8000d28:	2300      	movs	r3, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e540      	b.n	80007b0 <__aeabi_dadd+0x134>
 8000d2e:	464a      	mov	r2, r9
 8000d30:	19d5      	adds	r5, r2, r7
 8000d32:	42bd      	cmp	r5, r7
 8000d34:	4189      	sbcs	r1, r1
 8000d36:	4463      	add	r3, ip
 8000d38:	4698      	mov	r8, r3
 8000d3a:	4249      	negs	r1, r1
 8000d3c:	4488      	add	r8, r1
 8000d3e:	e5b3      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000d40:	2100      	movs	r1, #0
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_dadd+0x6cc>)
 8000d44:	000b      	movs	r3, r1
 8000d46:	e533      	b.n	80007b0 <__aeabi_dadd+0x134>
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	ff7fffff 	.word	0xff7fffff

08000d50 <__aeabi_ddiv>:
 8000d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d52:	4657      	mov	r7, sl
 8000d54:	464e      	mov	r6, r9
 8000d56:	4645      	mov	r5, r8
 8000d58:	46de      	mov	lr, fp
 8000d5a:	b5e0      	push	{r5, r6, r7, lr}
 8000d5c:	4681      	mov	r9, r0
 8000d5e:	0005      	movs	r5, r0
 8000d60:	030c      	lsls	r4, r1, #12
 8000d62:	0048      	lsls	r0, r1, #1
 8000d64:	4692      	mov	sl, r2
 8000d66:	001f      	movs	r7, r3
 8000d68:	b085      	sub	sp, #20
 8000d6a:	0b24      	lsrs	r4, r4, #12
 8000d6c:	0d40      	lsrs	r0, r0, #21
 8000d6e:	0fce      	lsrs	r6, r1, #31
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d059      	beq.n	8000e28 <__aeabi_ddiv+0xd8>
 8000d74:	4b87      	ldr	r3, [pc, #540]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000d76:	4298      	cmp	r0, r3
 8000d78:	d100      	bne.n	8000d7c <__aeabi_ddiv+0x2c>
 8000d7a:	e098      	b.n	8000eae <__aeabi_ddiv+0x15e>
 8000d7c:	0f6b      	lsrs	r3, r5, #29
 8000d7e:	00e4      	lsls	r4, r4, #3
 8000d80:	431c      	orrs	r4, r3
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	041b      	lsls	r3, r3, #16
 8000d86:	4323      	orrs	r3, r4
 8000d88:	4698      	mov	r8, r3
 8000d8a:	4b83      	ldr	r3, [pc, #524]	; (8000f98 <__aeabi_ddiv+0x248>)
 8000d8c:	00ed      	lsls	r5, r5, #3
 8000d8e:	469b      	mov	fp, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	4699      	mov	r9, r3
 8000d94:	4483      	add	fp, r0
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	033c      	lsls	r4, r7, #12
 8000d9a:	007b      	lsls	r3, r7, #1
 8000d9c:	4650      	mov	r0, sl
 8000d9e:	0b24      	lsrs	r4, r4, #12
 8000da0:	0d5b      	lsrs	r3, r3, #21
 8000da2:	0fff      	lsrs	r7, r7, #31
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d067      	beq.n	8000e78 <__aeabi_ddiv+0x128>
 8000da8:	4a7a      	ldr	r2, [pc, #488]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d018      	beq.n	8000de0 <__aeabi_ddiv+0x90>
 8000dae:	497a      	ldr	r1, [pc, #488]	; (8000f98 <__aeabi_ddiv+0x248>)
 8000db0:	0f42      	lsrs	r2, r0, #29
 8000db2:	468c      	mov	ip, r1
 8000db4:	00e4      	lsls	r4, r4, #3
 8000db6:	4659      	mov	r1, fp
 8000db8:	4314      	orrs	r4, r2
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	4463      	add	r3, ip
 8000dbe:	0412      	lsls	r2, r2, #16
 8000dc0:	1acb      	subs	r3, r1, r3
 8000dc2:	4314      	orrs	r4, r2
 8000dc4:	469b      	mov	fp, r3
 8000dc6:	00c2      	lsls	r2, r0, #3
 8000dc8:	2000      	movs	r0, #0
 8000dca:	0033      	movs	r3, r6
 8000dcc:	407b      	eors	r3, r7
 8000dce:	469a      	mov	sl, r3
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	d900      	bls.n	8000dd8 <__aeabi_ddiv+0x88>
 8000dd6:	e0ef      	b.n	8000fb8 <__aeabi_ddiv+0x268>
 8000dd8:	4970      	ldr	r1, [pc, #448]	; (8000f9c <__aeabi_ddiv+0x24c>)
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	58cb      	ldr	r3, [r1, r3]
 8000dde:	469f      	mov	pc, r3
 8000de0:	4b6f      	ldr	r3, [pc, #444]	; (8000fa0 <__aeabi_ddiv+0x250>)
 8000de2:	4652      	mov	r2, sl
 8000de4:	469c      	mov	ip, r3
 8000de6:	4322      	orrs	r2, r4
 8000de8:	44e3      	add	fp, ip
 8000dea:	2a00      	cmp	r2, #0
 8000dec:	d000      	beq.n	8000df0 <__aeabi_ddiv+0xa0>
 8000dee:	e095      	b.n	8000f1c <__aeabi_ddiv+0x1cc>
 8000df0:	4649      	mov	r1, r9
 8000df2:	2302      	movs	r3, #2
 8000df4:	4319      	orrs	r1, r3
 8000df6:	4689      	mov	r9, r1
 8000df8:	2400      	movs	r4, #0
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	e7e5      	b.n	8000dca <__aeabi_ddiv+0x7a>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	2400      	movs	r4, #0
 8000e02:	2500      	movs	r5, #0
 8000e04:	4652      	mov	r2, sl
 8000e06:	051b      	lsls	r3, r3, #20
 8000e08:	4323      	orrs	r3, r4
 8000e0a:	07d2      	lsls	r2, r2, #31
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	0028      	movs	r0, r5
 8000e10:	0019      	movs	r1, r3
 8000e12:	b005      	add	sp, #20
 8000e14:	bcf0      	pop	{r4, r5, r6, r7}
 8000e16:	46bb      	mov	fp, r7
 8000e18:	46b2      	mov	sl, r6
 8000e1a:	46a9      	mov	r9, r5
 8000e1c:	46a0      	mov	r8, r4
 8000e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e20:	2400      	movs	r4, #0
 8000e22:	2500      	movs	r5, #0
 8000e24:	4b5b      	ldr	r3, [pc, #364]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000e26:	e7ed      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000e28:	464b      	mov	r3, r9
 8000e2a:	4323      	orrs	r3, r4
 8000e2c:	4698      	mov	r8, r3
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_ddiv+0xe2>
 8000e30:	e089      	b.n	8000f46 <__aeabi_ddiv+0x1f6>
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0xe8>
 8000e36:	e1e0      	b.n	80011fa <__aeabi_ddiv+0x4aa>
 8000e38:	0020      	movs	r0, r4
 8000e3a:	f001 fa37 	bl	80022ac <__clzsi2>
 8000e3e:	0001      	movs	r1, r0
 8000e40:	0002      	movs	r2, r0
 8000e42:	390b      	subs	r1, #11
 8000e44:	231d      	movs	r3, #29
 8000e46:	1a5b      	subs	r3, r3, r1
 8000e48:	4649      	mov	r1, r9
 8000e4a:	0010      	movs	r0, r2
 8000e4c:	40d9      	lsrs	r1, r3
 8000e4e:	3808      	subs	r0, #8
 8000e50:	4084      	lsls	r4, r0
 8000e52:	000b      	movs	r3, r1
 8000e54:	464d      	mov	r5, r9
 8000e56:	4323      	orrs	r3, r4
 8000e58:	4698      	mov	r8, r3
 8000e5a:	4085      	lsls	r5, r0
 8000e5c:	4851      	ldr	r0, [pc, #324]	; (8000fa4 <__aeabi_ddiv+0x254>)
 8000e5e:	033c      	lsls	r4, r7, #12
 8000e60:	1a83      	subs	r3, r0, r2
 8000e62:	469b      	mov	fp, r3
 8000e64:	2300      	movs	r3, #0
 8000e66:	4699      	mov	r9, r3
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	007b      	lsls	r3, r7, #1
 8000e6c:	4650      	mov	r0, sl
 8000e6e:	0b24      	lsrs	r4, r4, #12
 8000e70:	0d5b      	lsrs	r3, r3, #21
 8000e72:	0fff      	lsrs	r7, r7, #31
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d197      	bne.n	8000da8 <__aeabi_ddiv+0x58>
 8000e78:	4652      	mov	r2, sl
 8000e7a:	4322      	orrs	r2, r4
 8000e7c:	d055      	beq.n	8000f2a <__aeabi_ddiv+0x1da>
 8000e7e:	2c00      	cmp	r4, #0
 8000e80:	d100      	bne.n	8000e84 <__aeabi_ddiv+0x134>
 8000e82:	e1ca      	b.n	800121a <__aeabi_ddiv+0x4ca>
 8000e84:	0020      	movs	r0, r4
 8000e86:	f001 fa11 	bl	80022ac <__clzsi2>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	3a0b      	subs	r2, #11
 8000e8e:	231d      	movs	r3, #29
 8000e90:	0001      	movs	r1, r0
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	4652      	mov	r2, sl
 8000e96:	3908      	subs	r1, #8
 8000e98:	40da      	lsrs	r2, r3
 8000e9a:	408c      	lsls	r4, r1
 8000e9c:	4314      	orrs	r4, r2
 8000e9e:	4652      	mov	r2, sl
 8000ea0:	408a      	lsls	r2, r1
 8000ea2:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <__aeabi_ddiv+0x258>)
 8000ea4:	4458      	add	r0, fp
 8000ea6:	469b      	mov	fp, r3
 8000ea8:	4483      	add	fp, r0
 8000eaa:	2000      	movs	r0, #0
 8000eac:	e78d      	b.n	8000dca <__aeabi_ddiv+0x7a>
 8000eae:	464b      	mov	r3, r9
 8000eb0:	4323      	orrs	r3, r4
 8000eb2:	4698      	mov	r8, r3
 8000eb4:	d140      	bne.n	8000f38 <__aeabi_ddiv+0x1e8>
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	4699      	mov	r9, r3
 8000eba:	3b06      	subs	r3, #6
 8000ebc:	2500      	movs	r5, #0
 8000ebe:	4683      	mov	fp, r0
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	e769      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000ec4:	46b2      	mov	sl, r6
 8000ec6:	9b00      	ldr	r3, [sp, #0]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d0a9      	beq.n	8000e20 <__aeabi_ddiv+0xd0>
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_ddiv+0x182>
 8000ed0:	e211      	b.n	80012f6 <__aeabi_ddiv+0x5a6>
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d093      	beq.n	8000dfe <__aeabi_ddiv+0xae>
 8000ed6:	4a35      	ldr	r2, [pc, #212]	; (8000fac <__aeabi_ddiv+0x25c>)
 8000ed8:	445a      	add	r2, fp
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	dc00      	bgt.n	8000ee0 <__aeabi_ddiv+0x190>
 8000ede:	e13c      	b.n	800115a <__aeabi_ddiv+0x40a>
 8000ee0:	076b      	lsls	r3, r5, #29
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_ddiv+0x196>
 8000ee4:	e1a7      	b.n	8001236 <__aeabi_ddiv+0x4e6>
 8000ee6:	08ed      	lsrs	r5, r5, #3
 8000ee8:	4643      	mov	r3, r8
 8000eea:	01db      	lsls	r3, r3, #7
 8000eec:	d506      	bpl.n	8000efc <__aeabi_ddiv+0x1ac>
 8000eee:	4642      	mov	r2, r8
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <__aeabi_ddiv+0x260>)
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	4690      	mov	r8, r2
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	00d2      	lsls	r2, r2, #3
 8000efa:	445a      	add	r2, fp
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <__aeabi_ddiv+0x264>)
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dc8e      	bgt.n	8000e20 <__aeabi_ddiv+0xd0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	0552      	lsls	r2, r2, #21
 8000f06:	0758      	lsls	r0, r3, #29
 8000f08:	025c      	lsls	r4, r3, #9
 8000f0a:	4305      	orrs	r5, r0
 8000f0c:	0b24      	lsrs	r4, r4, #12
 8000f0e:	0d53      	lsrs	r3, r2, #21
 8000f10:	e778      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000f12:	46ba      	mov	sl, r7
 8000f14:	46a0      	mov	r8, r4
 8000f16:	0015      	movs	r5, r2
 8000f18:	9000      	str	r0, [sp, #0]
 8000f1a:	e7d4      	b.n	8000ec6 <__aeabi_ddiv+0x176>
 8000f1c:	464a      	mov	r2, r9
 8000f1e:	2303      	movs	r3, #3
 8000f20:	431a      	orrs	r2, r3
 8000f22:	4691      	mov	r9, r2
 8000f24:	2003      	movs	r0, #3
 8000f26:	4652      	mov	r2, sl
 8000f28:	e74f      	b.n	8000dca <__aeabi_ddiv+0x7a>
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	4319      	orrs	r1, r3
 8000f30:	4689      	mov	r9, r1
 8000f32:	2400      	movs	r4, #0
 8000f34:	2001      	movs	r0, #1
 8000f36:	e748      	b.n	8000dca <__aeabi_ddiv+0x7a>
 8000f38:	230c      	movs	r3, #12
 8000f3a:	4699      	mov	r9, r3
 8000f3c:	3b09      	subs	r3, #9
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	4683      	mov	fp, r0
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	e728      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000f46:	2304      	movs	r3, #4
 8000f48:	4699      	mov	r9, r3
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	469b      	mov	fp, r3
 8000f4e:	3301      	adds	r3, #1
 8000f50:	2500      	movs	r5, #0
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	e720      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000f56:	2300      	movs	r3, #0
 8000f58:	2480      	movs	r4, #128	; 0x80
 8000f5a:	469a      	mov	sl, r3
 8000f5c:	2500      	movs	r5, #0
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	e74f      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	4641      	mov	r1, r8
 8000f68:	031b      	lsls	r3, r3, #12
 8000f6a:	4219      	tst	r1, r3
 8000f6c:	d008      	beq.n	8000f80 <__aeabi_ddiv+0x230>
 8000f6e:	421c      	tst	r4, r3
 8000f70:	d106      	bne.n	8000f80 <__aeabi_ddiv+0x230>
 8000f72:	431c      	orrs	r4, r3
 8000f74:	0324      	lsls	r4, r4, #12
 8000f76:	46ba      	mov	sl, r7
 8000f78:	0015      	movs	r5, r2
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000f7c:	0b24      	lsrs	r4, r4, #12
 8000f7e:	e741      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000f80:	2480      	movs	r4, #128	; 0x80
 8000f82:	4643      	mov	r3, r8
 8000f84:	0324      	lsls	r4, r4, #12
 8000f86:	431c      	orrs	r4, r3
 8000f88:	0324      	lsls	r4, r4, #12
 8000f8a:	46b2      	mov	sl, r6
 8000f8c:	4b01      	ldr	r3, [pc, #4]	; (8000f94 <__aeabi_ddiv+0x244>)
 8000f8e:	0b24      	lsrs	r4, r4, #12
 8000f90:	e738      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	000007ff 	.word	0x000007ff
 8000f98:	fffffc01 	.word	0xfffffc01
 8000f9c:	0800ece8 	.word	0x0800ece8
 8000fa0:	fffff801 	.word	0xfffff801
 8000fa4:	fffffc0d 	.word	0xfffffc0d
 8000fa8:	000003f3 	.word	0x000003f3
 8000fac:	000003ff 	.word	0x000003ff
 8000fb0:	feffffff 	.word	0xfeffffff
 8000fb4:	000007fe 	.word	0x000007fe
 8000fb8:	4544      	cmp	r4, r8
 8000fba:	d200      	bcs.n	8000fbe <__aeabi_ddiv+0x26e>
 8000fbc:	e116      	b.n	80011ec <__aeabi_ddiv+0x49c>
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x272>
 8000fc0:	e111      	b.n	80011e6 <__aeabi_ddiv+0x496>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	425b      	negs	r3, r3
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	002e      	movs	r6, r5
 8000fca:	4640      	mov	r0, r8
 8000fcc:	2500      	movs	r5, #0
 8000fce:	44e3      	add	fp, ip
 8000fd0:	0223      	lsls	r3, r4, #8
 8000fd2:	0e14      	lsrs	r4, r2, #24
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0c1b      	lsrs	r3, r3, #16
 8000fd8:	4699      	mov	r9, r3
 8000fda:	0423      	lsls	r3, r4, #16
 8000fdc:	0c1f      	lsrs	r7, r3, #16
 8000fde:	0212      	lsls	r2, r2, #8
 8000fe0:	4649      	mov	r1, r9
 8000fe2:	9200      	str	r2, [sp, #0]
 8000fe4:	9701      	str	r7, [sp, #4]
 8000fe6:	f7ff f92f 	bl	8000248 <__aeabi_uidivmod>
 8000fea:	0002      	movs	r2, r0
 8000fec:	437a      	muls	r2, r7
 8000fee:	040b      	lsls	r3, r1, #16
 8000ff0:	0c31      	lsrs	r1, r6, #16
 8000ff2:	4680      	mov	r8, r0
 8000ff4:	4319      	orrs	r1, r3
 8000ff6:	428a      	cmp	r2, r1
 8000ff8:	d90b      	bls.n	8001012 <__aeabi_ddiv+0x2c2>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	469c      	mov	ip, r3
 8001000:	1909      	adds	r1, r1, r4
 8001002:	44e0      	add	r8, ip
 8001004:	428c      	cmp	r4, r1
 8001006:	d804      	bhi.n	8001012 <__aeabi_ddiv+0x2c2>
 8001008:	428a      	cmp	r2, r1
 800100a:	d902      	bls.n	8001012 <__aeabi_ddiv+0x2c2>
 800100c:	1e83      	subs	r3, r0, #2
 800100e:	4698      	mov	r8, r3
 8001010:	1909      	adds	r1, r1, r4
 8001012:	1a88      	subs	r0, r1, r2
 8001014:	4649      	mov	r1, r9
 8001016:	f7ff f917 	bl	8000248 <__aeabi_uidivmod>
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	468c      	mov	ip, r1
 800101e:	0431      	lsls	r1, r6, #16
 8001020:	4666      	mov	r6, ip
 8001022:	9a01      	ldr	r2, [sp, #4]
 8001024:	0c09      	lsrs	r1, r1, #16
 8001026:	4342      	muls	r2, r0
 8001028:	0003      	movs	r3, r0
 800102a:	4331      	orrs	r1, r6
 800102c:	428a      	cmp	r2, r1
 800102e:	d904      	bls.n	800103a <__aeabi_ddiv+0x2ea>
 8001030:	1909      	adds	r1, r1, r4
 8001032:	3b01      	subs	r3, #1
 8001034:	428c      	cmp	r4, r1
 8001036:	d800      	bhi.n	800103a <__aeabi_ddiv+0x2ea>
 8001038:	e111      	b.n	800125e <__aeabi_ddiv+0x50e>
 800103a:	1a89      	subs	r1, r1, r2
 800103c:	4642      	mov	r2, r8
 800103e:	9e00      	ldr	r6, [sp, #0]
 8001040:	0412      	lsls	r2, r2, #16
 8001042:	431a      	orrs	r2, r3
 8001044:	0c33      	lsrs	r3, r6, #16
 8001046:	001f      	movs	r7, r3
 8001048:	0c10      	lsrs	r0, r2, #16
 800104a:	4690      	mov	r8, r2
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	0413      	lsls	r3, r2, #16
 8001050:	0432      	lsls	r2, r6, #16
 8001052:	0c16      	lsrs	r6, r2, #16
 8001054:	0032      	movs	r2, r6
 8001056:	0c1b      	lsrs	r3, r3, #16
 8001058:	435a      	muls	r2, r3
 800105a:	9603      	str	r6, [sp, #12]
 800105c:	437b      	muls	r3, r7
 800105e:	4346      	muls	r6, r0
 8001060:	4378      	muls	r0, r7
 8001062:	0c17      	lsrs	r7, r2, #16
 8001064:	46bc      	mov	ip, r7
 8001066:	199b      	adds	r3, r3, r6
 8001068:	4463      	add	r3, ip
 800106a:	429e      	cmp	r6, r3
 800106c:	d903      	bls.n	8001076 <__aeabi_ddiv+0x326>
 800106e:	2680      	movs	r6, #128	; 0x80
 8001070:	0276      	lsls	r6, r6, #9
 8001072:	46b4      	mov	ip, r6
 8001074:	4460      	add	r0, ip
 8001076:	0c1e      	lsrs	r6, r3, #16
 8001078:	1830      	adds	r0, r6, r0
 800107a:	0416      	lsls	r6, r2, #16
 800107c:	041b      	lsls	r3, r3, #16
 800107e:	0c36      	lsrs	r6, r6, #16
 8001080:	199e      	adds	r6, r3, r6
 8001082:	4281      	cmp	r1, r0
 8001084:	d200      	bcs.n	8001088 <__aeabi_ddiv+0x338>
 8001086:	e09c      	b.n	80011c2 <__aeabi_ddiv+0x472>
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0x33c>
 800108a:	e097      	b.n	80011bc <__aeabi_ddiv+0x46c>
 800108c:	1bae      	subs	r6, r5, r6
 800108e:	1a09      	subs	r1, r1, r0
 8001090:	42b5      	cmp	r5, r6
 8001092:	4180      	sbcs	r0, r0
 8001094:	4240      	negs	r0, r0
 8001096:	1a08      	subs	r0, r1, r0
 8001098:	4284      	cmp	r4, r0
 800109a:	d100      	bne.n	800109e <__aeabi_ddiv+0x34e>
 800109c:	e111      	b.n	80012c2 <__aeabi_ddiv+0x572>
 800109e:	4649      	mov	r1, r9
 80010a0:	f7ff f8d2 	bl	8000248 <__aeabi_uidivmod>
 80010a4:	9a01      	ldr	r2, [sp, #4]
 80010a6:	040b      	lsls	r3, r1, #16
 80010a8:	4342      	muls	r2, r0
 80010aa:	0c31      	lsrs	r1, r6, #16
 80010ac:	0005      	movs	r5, r0
 80010ae:	4319      	orrs	r1, r3
 80010b0:	428a      	cmp	r2, r1
 80010b2:	d907      	bls.n	80010c4 <__aeabi_ddiv+0x374>
 80010b4:	1909      	adds	r1, r1, r4
 80010b6:	3d01      	subs	r5, #1
 80010b8:	428c      	cmp	r4, r1
 80010ba:	d803      	bhi.n	80010c4 <__aeabi_ddiv+0x374>
 80010bc:	428a      	cmp	r2, r1
 80010be:	d901      	bls.n	80010c4 <__aeabi_ddiv+0x374>
 80010c0:	1e85      	subs	r5, r0, #2
 80010c2:	1909      	adds	r1, r1, r4
 80010c4:	1a88      	subs	r0, r1, r2
 80010c6:	4649      	mov	r1, r9
 80010c8:	f7ff f8be 	bl	8000248 <__aeabi_uidivmod>
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	468c      	mov	ip, r1
 80010d0:	0431      	lsls	r1, r6, #16
 80010d2:	4666      	mov	r6, ip
 80010d4:	9a01      	ldr	r2, [sp, #4]
 80010d6:	0c09      	lsrs	r1, r1, #16
 80010d8:	4342      	muls	r2, r0
 80010da:	0003      	movs	r3, r0
 80010dc:	4331      	orrs	r1, r6
 80010de:	428a      	cmp	r2, r1
 80010e0:	d907      	bls.n	80010f2 <__aeabi_ddiv+0x3a2>
 80010e2:	1909      	adds	r1, r1, r4
 80010e4:	3b01      	subs	r3, #1
 80010e6:	428c      	cmp	r4, r1
 80010e8:	d803      	bhi.n	80010f2 <__aeabi_ddiv+0x3a2>
 80010ea:	428a      	cmp	r2, r1
 80010ec:	d901      	bls.n	80010f2 <__aeabi_ddiv+0x3a2>
 80010ee:	1e83      	subs	r3, r0, #2
 80010f0:	1909      	adds	r1, r1, r4
 80010f2:	9e03      	ldr	r6, [sp, #12]
 80010f4:	1a89      	subs	r1, r1, r2
 80010f6:	0032      	movs	r2, r6
 80010f8:	042d      	lsls	r5, r5, #16
 80010fa:	431d      	orrs	r5, r3
 80010fc:	9f02      	ldr	r7, [sp, #8]
 80010fe:	042b      	lsls	r3, r5, #16
 8001100:	0c1b      	lsrs	r3, r3, #16
 8001102:	435a      	muls	r2, r3
 8001104:	437b      	muls	r3, r7
 8001106:	469c      	mov	ip, r3
 8001108:	0c28      	lsrs	r0, r5, #16
 800110a:	4346      	muls	r6, r0
 800110c:	0c13      	lsrs	r3, r2, #16
 800110e:	44b4      	add	ip, r6
 8001110:	4463      	add	r3, ip
 8001112:	4378      	muls	r0, r7
 8001114:	429e      	cmp	r6, r3
 8001116:	d903      	bls.n	8001120 <__aeabi_ddiv+0x3d0>
 8001118:	2680      	movs	r6, #128	; 0x80
 800111a:	0276      	lsls	r6, r6, #9
 800111c:	46b4      	mov	ip, r6
 800111e:	4460      	add	r0, ip
 8001120:	0c1e      	lsrs	r6, r3, #16
 8001122:	0412      	lsls	r2, r2, #16
 8001124:	041b      	lsls	r3, r3, #16
 8001126:	0c12      	lsrs	r2, r2, #16
 8001128:	1830      	adds	r0, r6, r0
 800112a:	189b      	adds	r3, r3, r2
 800112c:	4281      	cmp	r1, r0
 800112e:	d306      	bcc.n	800113e <__aeabi_ddiv+0x3ee>
 8001130:	d002      	beq.n	8001138 <__aeabi_ddiv+0x3e8>
 8001132:	2301      	movs	r3, #1
 8001134:	431d      	orrs	r5, r3
 8001136:	e6ce      	b.n	8000ed6 <__aeabi_ddiv+0x186>
 8001138:	2b00      	cmp	r3, #0
 800113a:	d100      	bne.n	800113e <__aeabi_ddiv+0x3ee>
 800113c:	e6cb      	b.n	8000ed6 <__aeabi_ddiv+0x186>
 800113e:	1861      	adds	r1, r4, r1
 8001140:	1e6e      	subs	r6, r5, #1
 8001142:	42a1      	cmp	r1, r4
 8001144:	d200      	bcs.n	8001148 <__aeabi_ddiv+0x3f8>
 8001146:	e0a4      	b.n	8001292 <__aeabi_ddiv+0x542>
 8001148:	4281      	cmp	r1, r0
 800114a:	d200      	bcs.n	800114e <__aeabi_ddiv+0x3fe>
 800114c:	e0c9      	b.n	80012e2 <__aeabi_ddiv+0x592>
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x402>
 8001150:	e0d9      	b.n	8001306 <__aeabi_ddiv+0x5b6>
 8001152:	0035      	movs	r5, r6
 8001154:	e7ed      	b.n	8001132 <__aeabi_ddiv+0x3e2>
 8001156:	2501      	movs	r5, #1
 8001158:	426d      	negs	r5, r5
 800115a:	2101      	movs	r1, #1
 800115c:	1a89      	subs	r1, r1, r2
 800115e:	2938      	cmp	r1, #56	; 0x38
 8001160:	dd00      	ble.n	8001164 <__aeabi_ddiv+0x414>
 8001162:	e64c      	b.n	8000dfe <__aeabi_ddiv+0xae>
 8001164:	291f      	cmp	r1, #31
 8001166:	dc00      	bgt.n	800116a <__aeabi_ddiv+0x41a>
 8001168:	e07f      	b.n	800126a <__aeabi_ddiv+0x51a>
 800116a:	231f      	movs	r3, #31
 800116c:	425b      	negs	r3, r3
 800116e:	1a9a      	subs	r2, r3, r2
 8001170:	4643      	mov	r3, r8
 8001172:	40d3      	lsrs	r3, r2
 8001174:	2920      	cmp	r1, #32
 8001176:	d004      	beq.n	8001182 <__aeabi_ddiv+0x432>
 8001178:	4644      	mov	r4, r8
 800117a:	4a65      	ldr	r2, [pc, #404]	; (8001310 <__aeabi_ddiv+0x5c0>)
 800117c:	445a      	add	r2, fp
 800117e:	4094      	lsls	r4, r2
 8001180:	4325      	orrs	r5, r4
 8001182:	1e6a      	subs	r2, r5, #1
 8001184:	4195      	sbcs	r5, r2
 8001186:	2207      	movs	r2, #7
 8001188:	432b      	orrs	r3, r5
 800118a:	0015      	movs	r5, r2
 800118c:	2400      	movs	r4, #0
 800118e:	401d      	ands	r5, r3
 8001190:	421a      	tst	r2, r3
 8001192:	d100      	bne.n	8001196 <__aeabi_ddiv+0x446>
 8001194:	e0a1      	b.n	80012da <__aeabi_ddiv+0x58a>
 8001196:	220f      	movs	r2, #15
 8001198:	2400      	movs	r4, #0
 800119a:	401a      	ands	r2, r3
 800119c:	2a04      	cmp	r2, #4
 800119e:	d100      	bne.n	80011a2 <__aeabi_ddiv+0x452>
 80011a0:	e098      	b.n	80012d4 <__aeabi_ddiv+0x584>
 80011a2:	1d1a      	adds	r2, r3, #4
 80011a4:	429a      	cmp	r2, r3
 80011a6:	419b      	sbcs	r3, r3
 80011a8:	425b      	negs	r3, r3
 80011aa:	18e4      	adds	r4, r4, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	0222      	lsls	r2, r4, #8
 80011b0:	d400      	bmi.n	80011b4 <__aeabi_ddiv+0x464>
 80011b2:	e08f      	b.n	80012d4 <__aeabi_ddiv+0x584>
 80011b4:	2301      	movs	r3, #1
 80011b6:	2400      	movs	r4, #0
 80011b8:	2500      	movs	r5, #0
 80011ba:	e623      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 80011bc:	42b5      	cmp	r5, r6
 80011be:	d300      	bcc.n	80011c2 <__aeabi_ddiv+0x472>
 80011c0:	e764      	b.n	800108c <__aeabi_ddiv+0x33c>
 80011c2:	4643      	mov	r3, r8
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	9b00      	ldr	r3, [sp, #0]
 80011c8:	469c      	mov	ip, r3
 80011ca:	4465      	add	r5, ip
 80011cc:	001f      	movs	r7, r3
 80011ce:	429d      	cmp	r5, r3
 80011d0:	419b      	sbcs	r3, r3
 80011d2:	425b      	negs	r3, r3
 80011d4:	191b      	adds	r3, r3, r4
 80011d6:	18c9      	adds	r1, r1, r3
 80011d8:	428c      	cmp	r4, r1
 80011da:	d23a      	bcs.n	8001252 <__aeabi_ddiv+0x502>
 80011dc:	4288      	cmp	r0, r1
 80011de:	d863      	bhi.n	80012a8 <__aeabi_ddiv+0x558>
 80011e0:	d060      	beq.n	80012a4 <__aeabi_ddiv+0x554>
 80011e2:	4690      	mov	r8, r2
 80011e4:	e752      	b.n	800108c <__aeabi_ddiv+0x33c>
 80011e6:	42aa      	cmp	r2, r5
 80011e8:	d900      	bls.n	80011ec <__aeabi_ddiv+0x49c>
 80011ea:	e6ea      	b.n	8000fc2 <__aeabi_ddiv+0x272>
 80011ec:	4643      	mov	r3, r8
 80011ee:	07de      	lsls	r6, r3, #31
 80011f0:	0858      	lsrs	r0, r3, #1
 80011f2:	086b      	lsrs	r3, r5, #1
 80011f4:	431e      	orrs	r6, r3
 80011f6:	07ed      	lsls	r5, r5, #31
 80011f8:	e6ea      	b.n	8000fd0 <__aeabi_ddiv+0x280>
 80011fa:	4648      	mov	r0, r9
 80011fc:	f001 f856 	bl	80022ac <__clzsi2>
 8001200:	0001      	movs	r1, r0
 8001202:	0002      	movs	r2, r0
 8001204:	3115      	adds	r1, #21
 8001206:	3220      	adds	r2, #32
 8001208:	291c      	cmp	r1, #28
 800120a:	dc00      	bgt.n	800120e <__aeabi_ddiv+0x4be>
 800120c:	e61a      	b.n	8000e44 <__aeabi_ddiv+0xf4>
 800120e:	464b      	mov	r3, r9
 8001210:	3808      	subs	r0, #8
 8001212:	4083      	lsls	r3, r0
 8001214:	2500      	movs	r5, #0
 8001216:	4698      	mov	r8, r3
 8001218:	e620      	b.n	8000e5c <__aeabi_ddiv+0x10c>
 800121a:	f001 f847 	bl	80022ac <__clzsi2>
 800121e:	0003      	movs	r3, r0
 8001220:	001a      	movs	r2, r3
 8001222:	3215      	adds	r2, #21
 8001224:	3020      	adds	r0, #32
 8001226:	2a1c      	cmp	r2, #28
 8001228:	dc00      	bgt.n	800122c <__aeabi_ddiv+0x4dc>
 800122a:	e630      	b.n	8000e8e <__aeabi_ddiv+0x13e>
 800122c:	4654      	mov	r4, sl
 800122e:	3b08      	subs	r3, #8
 8001230:	2200      	movs	r2, #0
 8001232:	409c      	lsls	r4, r3
 8001234:	e635      	b.n	8000ea2 <__aeabi_ddiv+0x152>
 8001236:	230f      	movs	r3, #15
 8001238:	402b      	ands	r3, r5
 800123a:	2b04      	cmp	r3, #4
 800123c:	d100      	bne.n	8001240 <__aeabi_ddiv+0x4f0>
 800123e:	e652      	b.n	8000ee6 <__aeabi_ddiv+0x196>
 8001240:	2305      	movs	r3, #5
 8001242:	425b      	negs	r3, r3
 8001244:	42ab      	cmp	r3, r5
 8001246:	419b      	sbcs	r3, r3
 8001248:	3504      	adds	r5, #4
 800124a:	425b      	negs	r3, r3
 800124c:	08ed      	lsrs	r5, r5, #3
 800124e:	4498      	add	r8, r3
 8001250:	e64a      	b.n	8000ee8 <__aeabi_ddiv+0x198>
 8001252:	428c      	cmp	r4, r1
 8001254:	d1c5      	bne.n	80011e2 <__aeabi_ddiv+0x492>
 8001256:	42af      	cmp	r7, r5
 8001258:	d9c0      	bls.n	80011dc <__aeabi_ddiv+0x48c>
 800125a:	4690      	mov	r8, r2
 800125c:	e716      	b.n	800108c <__aeabi_ddiv+0x33c>
 800125e:	428a      	cmp	r2, r1
 8001260:	d800      	bhi.n	8001264 <__aeabi_ddiv+0x514>
 8001262:	e6ea      	b.n	800103a <__aeabi_ddiv+0x2ea>
 8001264:	1e83      	subs	r3, r0, #2
 8001266:	1909      	adds	r1, r1, r4
 8001268:	e6e7      	b.n	800103a <__aeabi_ddiv+0x2ea>
 800126a:	4a2a      	ldr	r2, [pc, #168]	; (8001314 <__aeabi_ddiv+0x5c4>)
 800126c:	0028      	movs	r0, r5
 800126e:	445a      	add	r2, fp
 8001270:	4643      	mov	r3, r8
 8001272:	4095      	lsls	r5, r2
 8001274:	4093      	lsls	r3, r2
 8001276:	40c8      	lsrs	r0, r1
 8001278:	1e6a      	subs	r2, r5, #1
 800127a:	4195      	sbcs	r5, r2
 800127c:	4644      	mov	r4, r8
 800127e:	4303      	orrs	r3, r0
 8001280:	432b      	orrs	r3, r5
 8001282:	40cc      	lsrs	r4, r1
 8001284:	075a      	lsls	r2, r3, #29
 8001286:	d092      	beq.n	80011ae <__aeabi_ddiv+0x45e>
 8001288:	220f      	movs	r2, #15
 800128a:	401a      	ands	r2, r3
 800128c:	2a04      	cmp	r2, #4
 800128e:	d188      	bne.n	80011a2 <__aeabi_ddiv+0x452>
 8001290:	e78d      	b.n	80011ae <__aeabi_ddiv+0x45e>
 8001292:	0035      	movs	r5, r6
 8001294:	4281      	cmp	r1, r0
 8001296:	d000      	beq.n	800129a <__aeabi_ddiv+0x54a>
 8001298:	e74b      	b.n	8001132 <__aeabi_ddiv+0x3e2>
 800129a:	9a00      	ldr	r2, [sp, #0]
 800129c:	4293      	cmp	r3, r2
 800129e:	d000      	beq.n	80012a2 <__aeabi_ddiv+0x552>
 80012a0:	e747      	b.n	8001132 <__aeabi_ddiv+0x3e2>
 80012a2:	e618      	b.n	8000ed6 <__aeabi_ddiv+0x186>
 80012a4:	42ae      	cmp	r6, r5
 80012a6:	d99c      	bls.n	80011e2 <__aeabi_ddiv+0x492>
 80012a8:	2302      	movs	r3, #2
 80012aa:	425b      	negs	r3, r3
 80012ac:	469c      	mov	ip, r3
 80012ae:	9b00      	ldr	r3, [sp, #0]
 80012b0:	44e0      	add	r8, ip
 80012b2:	469c      	mov	ip, r3
 80012b4:	4465      	add	r5, ip
 80012b6:	429d      	cmp	r5, r3
 80012b8:	419b      	sbcs	r3, r3
 80012ba:	425b      	negs	r3, r3
 80012bc:	191b      	adds	r3, r3, r4
 80012be:	18c9      	adds	r1, r1, r3
 80012c0:	e6e4      	b.n	800108c <__aeabi_ddiv+0x33c>
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <__aeabi_ddiv+0x5c8>)
 80012c4:	445a      	add	r2, fp
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	dc00      	bgt.n	80012cc <__aeabi_ddiv+0x57c>
 80012ca:	e744      	b.n	8001156 <__aeabi_ddiv+0x406>
 80012cc:	2301      	movs	r3, #1
 80012ce:	2500      	movs	r5, #0
 80012d0:	4498      	add	r8, r3
 80012d2:	e609      	b.n	8000ee8 <__aeabi_ddiv+0x198>
 80012d4:	0765      	lsls	r5, r4, #29
 80012d6:	0264      	lsls	r4, r4, #9
 80012d8:	0b24      	lsrs	r4, r4, #12
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	431d      	orrs	r5, r3
 80012de:	2300      	movs	r3, #0
 80012e0:	e590      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 80012e2:	9e00      	ldr	r6, [sp, #0]
 80012e4:	3d02      	subs	r5, #2
 80012e6:	0072      	lsls	r2, r6, #1
 80012e8:	42b2      	cmp	r2, r6
 80012ea:	41bf      	sbcs	r7, r7
 80012ec:	427f      	negs	r7, r7
 80012ee:	193c      	adds	r4, r7, r4
 80012f0:	1909      	adds	r1, r1, r4
 80012f2:	9200      	str	r2, [sp, #0]
 80012f4:	e7ce      	b.n	8001294 <__aeabi_ddiv+0x544>
 80012f6:	2480      	movs	r4, #128	; 0x80
 80012f8:	4643      	mov	r3, r8
 80012fa:	0324      	lsls	r4, r4, #12
 80012fc:	431c      	orrs	r4, r3
 80012fe:	0324      	lsls	r4, r4, #12
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <__aeabi_ddiv+0x5cc>)
 8001302:	0b24      	lsrs	r4, r4, #12
 8001304:	e57e      	b.n	8000e04 <__aeabi_ddiv+0xb4>
 8001306:	9a00      	ldr	r2, [sp, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3ea      	bcc.n	80012e2 <__aeabi_ddiv+0x592>
 800130c:	0035      	movs	r5, r6
 800130e:	e7c4      	b.n	800129a <__aeabi_ddiv+0x54a>
 8001310:	0000043e 	.word	0x0000043e
 8001314:	0000041e 	.word	0x0000041e
 8001318:	000003ff 	.word	0x000003ff
 800131c:	000007ff 	.word	0x000007ff

08001320 <__eqdf2>:
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	464f      	mov	r7, r9
 8001324:	4646      	mov	r6, r8
 8001326:	46d6      	mov	lr, sl
 8001328:	4694      	mov	ip, r2
 800132a:	4691      	mov	r9, r2
 800132c:	031a      	lsls	r2, r3, #12
 800132e:	0b12      	lsrs	r2, r2, #12
 8001330:	4d18      	ldr	r5, [pc, #96]	; (8001394 <__eqdf2+0x74>)
 8001332:	b5c0      	push	{r6, r7, lr}
 8001334:	004c      	lsls	r4, r1, #1
 8001336:	030f      	lsls	r7, r1, #12
 8001338:	4692      	mov	sl, r2
 800133a:	005a      	lsls	r2, r3, #1
 800133c:	0006      	movs	r6, r0
 800133e:	4680      	mov	r8, r0
 8001340:	0b3f      	lsrs	r7, r7, #12
 8001342:	2001      	movs	r0, #1
 8001344:	0d64      	lsrs	r4, r4, #21
 8001346:	0fc9      	lsrs	r1, r1, #31
 8001348:	0d52      	lsrs	r2, r2, #21
 800134a:	0fdb      	lsrs	r3, r3, #31
 800134c:	42ac      	cmp	r4, r5
 800134e:	d00a      	beq.n	8001366 <__eqdf2+0x46>
 8001350:	42aa      	cmp	r2, r5
 8001352:	d003      	beq.n	800135c <__eqdf2+0x3c>
 8001354:	4294      	cmp	r4, r2
 8001356:	d101      	bne.n	800135c <__eqdf2+0x3c>
 8001358:	4557      	cmp	r7, sl
 800135a:	d00d      	beq.n	8001378 <__eqdf2+0x58>
 800135c:	bce0      	pop	{r5, r6, r7}
 800135e:	46ba      	mov	sl, r7
 8001360:	46b1      	mov	r9, r6
 8001362:	46a8      	mov	r8, r5
 8001364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001366:	003d      	movs	r5, r7
 8001368:	4335      	orrs	r5, r6
 800136a:	d1f7      	bne.n	800135c <__eqdf2+0x3c>
 800136c:	42a2      	cmp	r2, r4
 800136e:	d1f5      	bne.n	800135c <__eqdf2+0x3c>
 8001370:	4652      	mov	r2, sl
 8001372:	4665      	mov	r5, ip
 8001374:	432a      	orrs	r2, r5
 8001376:	d1f1      	bne.n	800135c <__eqdf2+0x3c>
 8001378:	2001      	movs	r0, #1
 800137a:	45c8      	cmp	r8, r9
 800137c:	d1ee      	bne.n	800135c <__eqdf2+0x3c>
 800137e:	4299      	cmp	r1, r3
 8001380:	d006      	beq.n	8001390 <__eqdf2+0x70>
 8001382:	2c00      	cmp	r4, #0
 8001384:	d1ea      	bne.n	800135c <__eqdf2+0x3c>
 8001386:	433e      	orrs	r6, r7
 8001388:	0030      	movs	r0, r6
 800138a:	1e46      	subs	r6, r0, #1
 800138c:	41b0      	sbcs	r0, r6
 800138e:	e7e5      	b.n	800135c <__eqdf2+0x3c>
 8001390:	2000      	movs	r0, #0
 8001392:	e7e3      	b.n	800135c <__eqdf2+0x3c>
 8001394:	000007ff 	.word	0x000007ff

08001398 <__gedf2>:
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	464e      	mov	r6, r9
 800139c:	4645      	mov	r5, r8
 800139e:	4657      	mov	r7, sl
 80013a0:	46de      	mov	lr, fp
 80013a2:	0004      	movs	r4, r0
 80013a4:	0018      	movs	r0, r3
 80013a6:	b5e0      	push	{r5, r6, r7, lr}
 80013a8:	0016      	movs	r6, r2
 80013aa:	031b      	lsls	r3, r3, #12
 80013ac:	0b1b      	lsrs	r3, r3, #12
 80013ae:	4d32      	ldr	r5, [pc, #200]	; (8001478 <__gedf2+0xe0>)
 80013b0:	030f      	lsls	r7, r1, #12
 80013b2:	004a      	lsls	r2, r1, #1
 80013b4:	4699      	mov	r9, r3
 80013b6:	0043      	lsls	r3, r0, #1
 80013b8:	46a4      	mov	ip, r4
 80013ba:	46b0      	mov	r8, r6
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	0d52      	lsrs	r2, r2, #21
 80013c0:	0fc9      	lsrs	r1, r1, #31
 80013c2:	0d5b      	lsrs	r3, r3, #21
 80013c4:	0fc0      	lsrs	r0, r0, #31
 80013c6:	42aa      	cmp	r2, r5
 80013c8:	d029      	beq.n	800141e <__gedf2+0x86>
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	d018      	beq.n	8001400 <__gedf2+0x68>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d12a      	bne.n	8001428 <__gedf2+0x90>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	46a3      	mov	fp, r4
 80013d6:	4265      	negs	r5, r4
 80013d8:	4165      	adcs	r5, r4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <__gedf2+0x4c>
 80013de:	464c      	mov	r4, r9
 80013e0:	4326      	orrs	r6, r4
 80013e2:	d027      	beq.n	8001434 <__gedf2+0x9c>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d115      	bne.n	8001414 <__gedf2+0x7c>
 80013e8:	4281      	cmp	r1, r0
 80013ea:	d028      	beq.n	800143e <__gedf2+0xa6>
 80013ec:	2002      	movs	r0, #2
 80013ee:	3901      	subs	r1, #1
 80013f0:	4008      	ands	r0, r1
 80013f2:	3801      	subs	r0, #1
 80013f4:	bcf0      	pop	{r4, r5, r6, r7}
 80013f6:	46bb      	mov	fp, r7
 80013f8:	46b2      	mov	sl, r6
 80013fa:	46a9      	mov	r9, r5
 80013fc:	46a0      	mov	r8, r4
 80013fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001400:	464d      	mov	r5, r9
 8001402:	432e      	orrs	r6, r5
 8001404:	d12f      	bne.n	8001466 <__gedf2+0xce>
 8001406:	2a00      	cmp	r2, #0
 8001408:	d1ee      	bne.n	80013e8 <__gedf2+0x50>
 800140a:	433c      	orrs	r4, r7
 800140c:	4265      	negs	r5, r4
 800140e:	4165      	adcs	r5, r4
 8001410:	2d00      	cmp	r5, #0
 8001412:	d0e9      	beq.n	80013e8 <__gedf2+0x50>
 8001414:	2800      	cmp	r0, #0
 8001416:	d1ed      	bne.n	80013f4 <__gedf2+0x5c>
 8001418:	2001      	movs	r0, #1
 800141a:	4240      	negs	r0, r0
 800141c:	e7ea      	b.n	80013f4 <__gedf2+0x5c>
 800141e:	003d      	movs	r5, r7
 8001420:	4325      	orrs	r5, r4
 8001422:	d120      	bne.n	8001466 <__gedf2+0xce>
 8001424:	4293      	cmp	r3, r2
 8001426:	d0eb      	beq.n	8001400 <__gedf2+0x68>
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1dd      	bne.n	80013e8 <__gedf2+0x50>
 800142c:	464c      	mov	r4, r9
 800142e:	4326      	orrs	r6, r4
 8001430:	d1da      	bne.n	80013e8 <__gedf2+0x50>
 8001432:	e7db      	b.n	80013ec <__gedf2+0x54>
 8001434:	465b      	mov	r3, fp
 8001436:	2000      	movs	r0, #0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0db      	beq.n	80013f4 <__gedf2+0x5c>
 800143c:	e7d6      	b.n	80013ec <__gedf2+0x54>
 800143e:	429a      	cmp	r2, r3
 8001440:	dc0a      	bgt.n	8001458 <__gedf2+0xc0>
 8001442:	dbe7      	blt.n	8001414 <__gedf2+0x7c>
 8001444:	454f      	cmp	r7, r9
 8001446:	d8d1      	bhi.n	80013ec <__gedf2+0x54>
 8001448:	d010      	beq.n	800146c <__gedf2+0xd4>
 800144a:	2000      	movs	r0, #0
 800144c:	454f      	cmp	r7, r9
 800144e:	d2d1      	bcs.n	80013f4 <__gedf2+0x5c>
 8001450:	2900      	cmp	r1, #0
 8001452:	d0e1      	beq.n	8001418 <__gedf2+0x80>
 8001454:	0008      	movs	r0, r1
 8001456:	e7cd      	b.n	80013f4 <__gedf2+0x5c>
 8001458:	4243      	negs	r3, r0
 800145a:	4158      	adcs	r0, r3
 800145c:	2302      	movs	r3, #2
 800145e:	4240      	negs	r0, r0
 8001460:	4018      	ands	r0, r3
 8001462:	3801      	subs	r0, #1
 8001464:	e7c6      	b.n	80013f4 <__gedf2+0x5c>
 8001466:	2002      	movs	r0, #2
 8001468:	4240      	negs	r0, r0
 800146a:	e7c3      	b.n	80013f4 <__gedf2+0x5c>
 800146c:	45c4      	cmp	ip, r8
 800146e:	d8bd      	bhi.n	80013ec <__gedf2+0x54>
 8001470:	2000      	movs	r0, #0
 8001472:	45c4      	cmp	ip, r8
 8001474:	d2be      	bcs.n	80013f4 <__gedf2+0x5c>
 8001476:	e7eb      	b.n	8001450 <__gedf2+0xb8>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__ledf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	464e      	mov	r6, r9
 8001480:	4645      	mov	r5, r8
 8001482:	4657      	mov	r7, sl
 8001484:	46de      	mov	lr, fp
 8001486:	0004      	movs	r4, r0
 8001488:	0018      	movs	r0, r3
 800148a:	b5e0      	push	{r5, r6, r7, lr}
 800148c:	0016      	movs	r6, r2
 800148e:	031b      	lsls	r3, r3, #12
 8001490:	0b1b      	lsrs	r3, r3, #12
 8001492:	4d31      	ldr	r5, [pc, #196]	; (8001558 <__ledf2+0xdc>)
 8001494:	030f      	lsls	r7, r1, #12
 8001496:	004a      	lsls	r2, r1, #1
 8001498:	4699      	mov	r9, r3
 800149a:	0043      	lsls	r3, r0, #1
 800149c:	46a4      	mov	ip, r4
 800149e:	46b0      	mov	r8, r6
 80014a0:	0b3f      	lsrs	r7, r7, #12
 80014a2:	0d52      	lsrs	r2, r2, #21
 80014a4:	0fc9      	lsrs	r1, r1, #31
 80014a6:	0d5b      	lsrs	r3, r3, #21
 80014a8:	0fc0      	lsrs	r0, r0, #31
 80014aa:	42aa      	cmp	r2, r5
 80014ac:	d011      	beq.n	80014d2 <__ledf2+0x56>
 80014ae:	42ab      	cmp	r3, r5
 80014b0:	d014      	beq.n	80014dc <__ledf2+0x60>
 80014b2:	2a00      	cmp	r2, #0
 80014b4:	d12f      	bne.n	8001516 <__ledf2+0x9a>
 80014b6:	433c      	orrs	r4, r7
 80014b8:	46a3      	mov	fp, r4
 80014ba:	4265      	negs	r5, r4
 80014bc:	4165      	adcs	r5, r4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d114      	bne.n	80014ec <__ledf2+0x70>
 80014c2:	464c      	mov	r4, r9
 80014c4:	4326      	orrs	r6, r4
 80014c6:	d111      	bne.n	80014ec <__ledf2+0x70>
 80014c8:	465b      	mov	r3, fp
 80014ca:	2000      	movs	r0, #0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d017      	beq.n	8001500 <__ledf2+0x84>
 80014d0:	e010      	b.n	80014f4 <__ledf2+0x78>
 80014d2:	003d      	movs	r5, r7
 80014d4:	4325      	orrs	r5, r4
 80014d6:	d112      	bne.n	80014fe <__ledf2+0x82>
 80014d8:	4293      	cmp	r3, r2
 80014da:	d11c      	bne.n	8001516 <__ledf2+0x9a>
 80014dc:	464d      	mov	r5, r9
 80014de:	432e      	orrs	r6, r5
 80014e0:	d10d      	bne.n	80014fe <__ledf2+0x82>
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	d104      	bne.n	80014f0 <__ledf2+0x74>
 80014e6:	433c      	orrs	r4, r7
 80014e8:	4265      	negs	r5, r4
 80014ea:	4165      	adcs	r5, r4
 80014ec:	2d00      	cmp	r5, #0
 80014ee:	d10d      	bne.n	800150c <__ledf2+0x90>
 80014f0:	4281      	cmp	r1, r0
 80014f2:	d016      	beq.n	8001522 <__ledf2+0xa6>
 80014f4:	2002      	movs	r0, #2
 80014f6:	3901      	subs	r1, #1
 80014f8:	4008      	ands	r0, r1
 80014fa:	3801      	subs	r0, #1
 80014fc:	e000      	b.n	8001500 <__ledf2+0x84>
 80014fe:	2002      	movs	r0, #2
 8001500:	bcf0      	pop	{r4, r5, r6, r7}
 8001502:	46bb      	mov	fp, r7
 8001504:	46b2      	mov	sl, r6
 8001506:	46a9      	mov	r9, r5
 8001508:	46a0      	mov	r8, r4
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150c:	2800      	cmp	r0, #0
 800150e:	d1f7      	bne.n	8001500 <__ledf2+0x84>
 8001510:	2001      	movs	r0, #1
 8001512:	4240      	negs	r0, r0
 8001514:	e7f4      	b.n	8001500 <__ledf2+0x84>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ea      	bne.n	80014f0 <__ledf2+0x74>
 800151a:	464c      	mov	r4, r9
 800151c:	4326      	orrs	r6, r4
 800151e:	d1e7      	bne.n	80014f0 <__ledf2+0x74>
 8001520:	e7e8      	b.n	80014f4 <__ledf2+0x78>
 8001522:	429a      	cmp	r2, r3
 8001524:	dd06      	ble.n	8001534 <__ledf2+0xb8>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	2302      	movs	r3, #2
 800152c:	4240      	negs	r0, r0
 800152e:	4018      	ands	r0, r3
 8001530:	3801      	subs	r0, #1
 8001532:	e7e5      	b.n	8001500 <__ledf2+0x84>
 8001534:	429a      	cmp	r2, r3
 8001536:	dbe9      	blt.n	800150c <__ledf2+0x90>
 8001538:	454f      	cmp	r7, r9
 800153a:	d8db      	bhi.n	80014f4 <__ledf2+0x78>
 800153c:	d006      	beq.n	800154c <__ledf2+0xd0>
 800153e:	2000      	movs	r0, #0
 8001540:	454f      	cmp	r7, r9
 8001542:	d2dd      	bcs.n	8001500 <__ledf2+0x84>
 8001544:	2900      	cmp	r1, #0
 8001546:	d0e3      	beq.n	8001510 <__ledf2+0x94>
 8001548:	0008      	movs	r0, r1
 800154a:	e7d9      	b.n	8001500 <__ledf2+0x84>
 800154c:	45c4      	cmp	ip, r8
 800154e:	d8d1      	bhi.n	80014f4 <__ledf2+0x78>
 8001550:	2000      	movs	r0, #0
 8001552:	45c4      	cmp	ip, r8
 8001554:	d2d4      	bcs.n	8001500 <__ledf2+0x84>
 8001556:	e7f5      	b.n	8001544 <__ledf2+0xc8>
 8001558:	000007ff 	.word	0x000007ff

0800155c <__aeabi_dmul>:
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	4657      	mov	r7, sl
 8001560:	464e      	mov	r6, r9
 8001562:	4645      	mov	r5, r8
 8001564:	46de      	mov	lr, fp
 8001566:	b5e0      	push	{r5, r6, r7, lr}
 8001568:	4698      	mov	r8, r3
 800156a:	030c      	lsls	r4, r1, #12
 800156c:	004b      	lsls	r3, r1, #1
 800156e:	0006      	movs	r6, r0
 8001570:	4692      	mov	sl, r2
 8001572:	b087      	sub	sp, #28
 8001574:	0b24      	lsrs	r4, r4, #12
 8001576:	0d5b      	lsrs	r3, r3, #21
 8001578:	0fcf      	lsrs	r7, r1, #31
 800157a:	2b00      	cmp	r3, #0
 800157c:	d06c      	beq.n	8001658 <__aeabi_dmul+0xfc>
 800157e:	4add      	ldr	r2, [pc, #884]	; (80018f4 <__aeabi_dmul+0x398>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d100      	bne.n	8001586 <__aeabi_dmul+0x2a>
 8001584:	e086      	b.n	8001694 <__aeabi_dmul+0x138>
 8001586:	0f42      	lsrs	r2, r0, #29
 8001588:	00e4      	lsls	r4, r4, #3
 800158a:	4314      	orrs	r4, r2
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	0412      	lsls	r2, r2, #16
 8001590:	4314      	orrs	r4, r2
 8001592:	4ad9      	ldr	r2, [pc, #868]	; (80018f8 <__aeabi_dmul+0x39c>)
 8001594:	00c5      	lsls	r5, r0, #3
 8001596:	4694      	mov	ip, r2
 8001598:	4463      	add	r3, ip
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2300      	movs	r3, #0
 800159e:	4699      	mov	r9, r3
 80015a0:	469b      	mov	fp, r3
 80015a2:	4643      	mov	r3, r8
 80015a4:	4642      	mov	r2, r8
 80015a6:	031e      	lsls	r6, r3, #12
 80015a8:	0fd2      	lsrs	r2, r2, #31
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4650      	mov	r0, sl
 80015ae:	4690      	mov	r8, r2
 80015b0:	0b36      	lsrs	r6, r6, #12
 80015b2:	0d5b      	lsrs	r3, r3, #21
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dmul+0x5c>
 80015b6:	e078      	b.n	80016aa <__aeabi_dmul+0x14e>
 80015b8:	4ace      	ldr	r2, [pc, #824]	; (80018f4 <__aeabi_dmul+0x398>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01d      	beq.n	80015fa <__aeabi_dmul+0x9e>
 80015be:	49ce      	ldr	r1, [pc, #824]	; (80018f8 <__aeabi_dmul+0x39c>)
 80015c0:	0f42      	lsrs	r2, r0, #29
 80015c2:	468c      	mov	ip, r1
 80015c4:	9900      	ldr	r1, [sp, #0]
 80015c6:	4463      	add	r3, ip
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	468c      	mov	ip, r1
 80015cc:	4316      	orrs	r6, r2
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	449c      	add	ip, r3
 80015d2:	0412      	lsls	r2, r2, #16
 80015d4:	4663      	mov	r3, ip
 80015d6:	4316      	orrs	r6, r2
 80015d8:	00c2      	lsls	r2, r0, #3
 80015da:	2000      	movs	r0, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	9900      	ldr	r1, [sp, #0]
 80015e0:	4643      	mov	r3, r8
 80015e2:	3101      	adds	r1, #1
 80015e4:	468c      	mov	ip, r1
 80015e6:	4649      	mov	r1, r9
 80015e8:	407b      	eors	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	290f      	cmp	r1, #15
 80015ee:	d900      	bls.n	80015f2 <__aeabi_dmul+0x96>
 80015f0:	e07e      	b.n	80016f0 <__aeabi_dmul+0x194>
 80015f2:	4bc2      	ldr	r3, [pc, #776]	; (80018fc <__aeabi_dmul+0x3a0>)
 80015f4:	0089      	lsls	r1, r1, #2
 80015f6:	5859      	ldr	r1, [r3, r1]
 80015f8:	468f      	mov	pc, r1
 80015fa:	4652      	mov	r2, sl
 80015fc:	9b00      	ldr	r3, [sp, #0]
 80015fe:	4332      	orrs	r2, r6
 8001600:	d000      	beq.n	8001604 <__aeabi_dmul+0xa8>
 8001602:	e156      	b.n	80018b2 <__aeabi_dmul+0x356>
 8001604:	49bb      	ldr	r1, [pc, #748]	; (80018f4 <__aeabi_dmul+0x398>)
 8001606:	2600      	movs	r6, #0
 8001608:	468c      	mov	ip, r1
 800160a:	4463      	add	r3, ip
 800160c:	4649      	mov	r1, r9
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2302      	movs	r3, #2
 8001612:	4319      	orrs	r1, r3
 8001614:	4689      	mov	r9, r1
 8001616:	2002      	movs	r0, #2
 8001618:	e7e1      	b.n	80015de <__aeabi_dmul+0x82>
 800161a:	4643      	mov	r3, r8
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	0034      	movs	r4, r6
 8001620:	0015      	movs	r5, r2
 8001622:	4683      	mov	fp, r0
 8001624:	465b      	mov	r3, fp
 8001626:	2b02      	cmp	r3, #2
 8001628:	d05e      	beq.n	80016e8 <__aeabi_dmul+0x18c>
 800162a:	2b03      	cmp	r3, #3
 800162c:	d100      	bne.n	8001630 <__aeabi_dmul+0xd4>
 800162e:	e1f3      	b.n	8001a18 <__aeabi_dmul+0x4bc>
 8001630:	2b01      	cmp	r3, #1
 8001632:	d000      	beq.n	8001636 <__aeabi_dmul+0xda>
 8001634:	e118      	b.n	8001868 <__aeabi_dmul+0x30c>
 8001636:	2200      	movs	r2, #0
 8001638:	2400      	movs	r4, #0
 800163a:	2500      	movs	r5, #0
 800163c:	9b01      	ldr	r3, [sp, #4]
 800163e:	0512      	lsls	r2, r2, #20
 8001640:	4322      	orrs	r2, r4
 8001642:	07db      	lsls	r3, r3, #31
 8001644:	431a      	orrs	r2, r3
 8001646:	0028      	movs	r0, r5
 8001648:	0011      	movs	r1, r2
 800164a:	b007      	add	sp, #28
 800164c:	bcf0      	pop	{r4, r5, r6, r7}
 800164e:	46bb      	mov	fp, r7
 8001650:	46b2      	mov	sl, r6
 8001652:	46a9      	mov	r9, r5
 8001654:	46a0      	mov	r8, r4
 8001656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001658:	0025      	movs	r5, r4
 800165a:	4305      	orrs	r5, r0
 800165c:	d100      	bne.n	8001660 <__aeabi_dmul+0x104>
 800165e:	e141      	b.n	80018e4 <__aeabi_dmul+0x388>
 8001660:	2c00      	cmp	r4, #0
 8001662:	d100      	bne.n	8001666 <__aeabi_dmul+0x10a>
 8001664:	e1ad      	b.n	80019c2 <__aeabi_dmul+0x466>
 8001666:	0020      	movs	r0, r4
 8001668:	f000 fe20 	bl	80022ac <__clzsi2>
 800166c:	0001      	movs	r1, r0
 800166e:	0002      	movs	r2, r0
 8001670:	390b      	subs	r1, #11
 8001672:	231d      	movs	r3, #29
 8001674:	0010      	movs	r0, r2
 8001676:	1a5b      	subs	r3, r3, r1
 8001678:	0031      	movs	r1, r6
 800167a:	0035      	movs	r5, r6
 800167c:	3808      	subs	r0, #8
 800167e:	4084      	lsls	r4, r0
 8001680:	40d9      	lsrs	r1, r3
 8001682:	4085      	lsls	r5, r0
 8001684:	430c      	orrs	r4, r1
 8001686:	489e      	ldr	r0, [pc, #632]	; (8001900 <__aeabi_dmul+0x3a4>)
 8001688:	1a83      	subs	r3, r0, r2
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2300      	movs	r3, #0
 800168e:	4699      	mov	r9, r3
 8001690:	469b      	mov	fp, r3
 8001692:	e786      	b.n	80015a2 <__aeabi_dmul+0x46>
 8001694:	0005      	movs	r5, r0
 8001696:	4325      	orrs	r5, r4
 8001698:	d000      	beq.n	800169c <__aeabi_dmul+0x140>
 800169a:	e11c      	b.n	80018d6 <__aeabi_dmul+0x37a>
 800169c:	2208      	movs	r2, #8
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2302      	movs	r3, #2
 80016a2:	2400      	movs	r4, #0
 80016a4:	4691      	mov	r9, r2
 80016a6:	469b      	mov	fp, r3
 80016a8:	e77b      	b.n	80015a2 <__aeabi_dmul+0x46>
 80016aa:	4652      	mov	r2, sl
 80016ac:	4332      	orrs	r2, r6
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dmul+0x156>
 80016b0:	e10a      	b.n	80018c8 <__aeabi_dmul+0x36c>
 80016b2:	2e00      	cmp	r6, #0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dmul+0x15c>
 80016b6:	e176      	b.n	80019a6 <__aeabi_dmul+0x44a>
 80016b8:	0030      	movs	r0, r6
 80016ba:	f000 fdf7 	bl	80022ac <__clzsi2>
 80016be:	0002      	movs	r2, r0
 80016c0:	3a0b      	subs	r2, #11
 80016c2:	231d      	movs	r3, #29
 80016c4:	0001      	movs	r1, r0
 80016c6:	1a9b      	subs	r3, r3, r2
 80016c8:	4652      	mov	r2, sl
 80016ca:	3908      	subs	r1, #8
 80016cc:	40da      	lsrs	r2, r3
 80016ce:	408e      	lsls	r6, r1
 80016d0:	4316      	orrs	r6, r2
 80016d2:	4652      	mov	r2, sl
 80016d4:	408a      	lsls	r2, r1
 80016d6:	9b00      	ldr	r3, [sp, #0]
 80016d8:	4989      	ldr	r1, [pc, #548]	; (8001900 <__aeabi_dmul+0x3a4>)
 80016da:	1a18      	subs	r0, r3, r0
 80016dc:	0003      	movs	r3, r0
 80016de:	468c      	mov	ip, r1
 80016e0:	4463      	add	r3, ip
 80016e2:	2000      	movs	r0, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	e77a      	b.n	80015de <__aeabi_dmul+0x82>
 80016e8:	2400      	movs	r4, #0
 80016ea:	2500      	movs	r5, #0
 80016ec:	4a81      	ldr	r2, [pc, #516]	; (80018f4 <__aeabi_dmul+0x398>)
 80016ee:	e7a5      	b.n	800163c <__aeabi_dmul+0xe0>
 80016f0:	0c2f      	lsrs	r7, r5, #16
 80016f2:	042d      	lsls	r5, r5, #16
 80016f4:	0c2d      	lsrs	r5, r5, #16
 80016f6:	002b      	movs	r3, r5
 80016f8:	0c11      	lsrs	r1, r2, #16
 80016fa:	0412      	lsls	r2, r2, #16
 80016fc:	0c12      	lsrs	r2, r2, #16
 80016fe:	4353      	muls	r3, r2
 8001700:	4698      	mov	r8, r3
 8001702:	0013      	movs	r3, r2
 8001704:	0028      	movs	r0, r5
 8001706:	437b      	muls	r3, r7
 8001708:	4699      	mov	r9, r3
 800170a:	4348      	muls	r0, r1
 800170c:	4448      	add	r0, r9
 800170e:	4683      	mov	fp, r0
 8001710:	4640      	mov	r0, r8
 8001712:	000b      	movs	r3, r1
 8001714:	0c00      	lsrs	r0, r0, #16
 8001716:	4682      	mov	sl, r0
 8001718:	4658      	mov	r0, fp
 800171a:	437b      	muls	r3, r7
 800171c:	4450      	add	r0, sl
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	4581      	cmp	r9, r0
 8001722:	d906      	bls.n	8001732 <__aeabi_dmul+0x1d6>
 8001724:	469a      	mov	sl, r3
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	4699      	mov	r9, r3
 800172c:	44ca      	add	sl, r9
 800172e:	4653      	mov	r3, sl
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	0c03      	lsrs	r3, r0, #16
 8001734:	469b      	mov	fp, r3
 8001736:	4643      	mov	r3, r8
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	0400      	lsls	r0, r0, #16
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	4698      	mov	r8, r3
 8001740:	0003      	movs	r3, r0
 8001742:	4443      	add	r3, r8
 8001744:	9304      	str	r3, [sp, #16]
 8001746:	0c33      	lsrs	r3, r6, #16
 8001748:	4699      	mov	r9, r3
 800174a:	002b      	movs	r3, r5
 800174c:	0436      	lsls	r6, r6, #16
 800174e:	0c36      	lsrs	r6, r6, #16
 8001750:	4373      	muls	r3, r6
 8001752:	4698      	mov	r8, r3
 8001754:	0033      	movs	r3, r6
 8001756:	437b      	muls	r3, r7
 8001758:	469a      	mov	sl, r3
 800175a:	464b      	mov	r3, r9
 800175c:	435d      	muls	r5, r3
 800175e:	435f      	muls	r7, r3
 8001760:	4643      	mov	r3, r8
 8001762:	4455      	add	r5, sl
 8001764:	0c18      	lsrs	r0, r3, #16
 8001766:	1940      	adds	r0, r0, r5
 8001768:	4582      	cmp	sl, r0
 800176a:	d903      	bls.n	8001774 <__aeabi_dmul+0x218>
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	469a      	mov	sl, r3
 8001772:	4457      	add	r7, sl
 8001774:	0c05      	lsrs	r5, r0, #16
 8001776:	19eb      	adds	r3, r5, r7
 8001778:	9305      	str	r3, [sp, #20]
 800177a:	4643      	mov	r3, r8
 800177c:	041d      	lsls	r5, r3, #16
 800177e:	0c2d      	lsrs	r5, r5, #16
 8001780:	0400      	lsls	r0, r0, #16
 8001782:	1940      	adds	r0, r0, r5
 8001784:	0c25      	lsrs	r5, r4, #16
 8001786:	0424      	lsls	r4, r4, #16
 8001788:	0c24      	lsrs	r4, r4, #16
 800178a:	0027      	movs	r7, r4
 800178c:	4357      	muls	r7, r2
 800178e:	436a      	muls	r2, r5
 8001790:	4690      	mov	r8, r2
 8001792:	002a      	movs	r2, r5
 8001794:	0c3b      	lsrs	r3, r7, #16
 8001796:	469a      	mov	sl, r3
 8001798:	434a      	muls	r2, r1
 800179a:	4361      	muls	r1, r4
 800179c:	4441      	add	r1, r8
 800179e:	4451      	add	r1, sl
 80017a0:	4483      	add	fp, r0
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x252>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	4698      	mov	r8, r3
 80017ac:	4442      	add	r2, r8
 80017ae:	043f      	lsls	r7, r7, #16
 80017b0:	0c0b      	lsrs	r3, r1, #16
 80017b2:	0c3f      	lsrs	r7, r7, #16
 80017b4:	0409      	lsls	r1, r1, #16
 80017b6:	19c9      	adds	r1, r1, r7
 80017b8:	0027      	movs	r7, r4
 80017ba:	4698      	mov	r8, r3
 80017bc:	464b      	mov	r3, r9
 80017be:	4377      	muls	r7, r6
 80017c0:	435c      	muls	r4, r3
 80017c2:	436e      	muls	r6, r5
 80017c4:	435d      	muls	r5, r3
 80017c6:	0c3b      	lsrs	r3, r7, #16
 80017c8:	4699      	mov	r9, r3
 80017ca:	19a4      	adds	r4, r4, r6
 80017cc:	444c      	add	r4, r9
 80017ce:	4442      	add	r2, r8
 80017d0:	9503      	str	r5, [sp, #12]
 80017d2:	42a6      	cmp	r6, r4
 80017d4:	d904      	bls.n	80017e0 <__aeabi_dmul+0x284>
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	025b      	lsls	r3, r3, #9
 80017da:	4698      	mov	r8, r3
 80017dc:	4445      	add	r5, r8
 80017de:	9503      	str	r5, [sp, #12]
 80017e0:	9b02      	ldr	r3, [sp, #8]
 80017e2:	043f      	lsls	r7, r7, #16
 80017e4:	445b      	add	r3, fp
 80017e6:	001e      	movs	r6, r3
 80017e8:	4283      	cmp	r3, r0
 80017ea:	4180      	sbcs	r0, r0
 80017ec:	0423      	lsls	r3, r4, #16
 80017ee:	4698      	mov	r8, r3
 80017f0:	9b05      	ldr	r3, [sp, #20]
 80017f2:	0c3f      	lsrs	r7, r7, #16
 80017f4:	4447      	add	r7, r8
 80017f6:	4698      	mov	r8, r3
 80017f8:	1876      	adds	r6, r6, r1
 80017fa:	428e      	cmp	r6, r1
 80017fc:	4189      	sbcs	r1, r1
 80017fe:	4447      	add	r7, r8
 8001800:	4240      	negs	r0, r0
 8001802:	183d      	adds	r5, r7, r0
 8001804:	46a8      	mov	r8, r5
 8001806:	4693      	mov	fp, r2
 8001808:	4249      	negs	r1, r1
 800180a:	468a      	mov	sl, r1
 800180c:	44c3      	add	fp, r8
 800180e:	429f      	cmp	r7, r3
 8001810:	41bf      	sbcs	r7, r7
 8001812:	4580      	cmp	r8, r0
 8001814:	4180      	sbcs	r0, r0
 8001816:	9b03      	ldr	r3, [sp, #12]
 8001818:	44da      	add	sl, fp
 800181a:	4698      	mov	r8, r3
 800181c:	4653      	mov	r3, sl
 800181e:	4240      	negs	r0, r0
 8001820:	427f      	negs	r7, r7
 8001822:	4307      	orrs	r7, r0
 8001824:	0c24      	lsrs	r4, r4, #16
 8001826:	4593      	cmp	fp, r2
 8001828:	4192      	sbcs	r2, r2
 800182a:	458a      	cmp	sl, r1
 800182c:	4189      	sbcs	r1, r1
 800182e:	193f      	adds	r7, r7, r4
 8001830:	0ddc      	lsrs	r4, r3, #23
 8001832:	9b04      	ldr	r3, [sp, #16]
 8001834:	0275      	lsls	r5, r6, #9
 8001836:	431d      	orrs	r5, r3
 8001838:	1e68      	subs	r0, r5, #1
 800183a:	4185      	sbcs	r5, r0
 800183c:	4653      	mov	r3, sl
 800183e:	4252      	negs	r2, r2
 8001840:	4249      	negs	r1, r1
 8001842:	430a      	orrs	r2, r1
 8001844:	18bf      	adds	r7, r7, r2
 8001846:	4447      	add	r7, r8
 8001848:	0df6      	lsrs	r6, r6, #23
 800184a:	027f      	lsls	r7, r7, #9
 800184c:	4335      	orrs	r5, r6
 800184e:	025a      	lsls	r2, r3, #9
 8001850:	433c      	orrs	r4, r7
 8001852:	4315      	orrs	r5, r2
 8001854:	01fb      	lsls	r3, r7, #7
 8001856:	d400      	bmi.n	800185a <__aeabi_dmul+0x2fe>
 8001858:	e0c1      	b.n	80019de <__aeabi_dmul+0x482>
 800185a:	2101      	movs	r1, #1
 800185c:	086a      	lsrs	r2, r5, #1
 800185e:	400d      	ands	r5, r1
 8001860:	4315      	orrs	r5, r2
 8001862:	07e2      	lsls	r2, r4, #31
 8001864:	4315      	orrs	r5, r2
 8001866:	0864      	lsrs	r4, r4, #1
 8001868:	4926      	ldr	r1, [pc, #152]	; (8001904 <__aeabi_dmul+0x3a8>)
 800186a:	4461      	add	r1, ip
 800186c:	2900      	cmp	r1, #0
 800186e:	dd56      	ble.n	800191e <__aeabi_dmul+0x3c2>
 8001870:	076b      	lsls	r3, r5, #29
 8001872:	d009      	beq.n	8001888 <__aeabi_dmul+0x32c>
 8001874:	220f      	movs	r2, #15
 8001876:	402a      	ands	r2, r5
 8001878:	2a04      	cmp	r2, #4
 800187a:	d005      	beq.n	8001888 <__aeabi_dmul+0x32c>
 800187c:	1d2a      	adds	r2, r5, #4
 800187e:	42aa      	cmp	r2, r5
 8001880:	41ad      	sbcs	r5, r5
 8001882:	426d      	negs	r5, r5
 8001884:	1964      	adds	r4, r4, r5
 8001886:	0015      	movs	r5, r2
 8001888:	01e3      	lsls	r3, r4, #7
 800188a:	d504      	bpl.n	8001896 <__aeabi_dmul+0x33a>
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <__aeabi_dmul+0x3ac>)
 8001890:	00c9      	lsls	r1, r1, #3
 8001892:	4014      	ands	r4, r2
 8001894:	4461      	add	r1, ip
 8001896:	4a1d      	ldr	r2, [pc, #116]	; (800190c <__aeabi_dmul+0x3b0>)
 8001898:	4291      	cmp	r1, r2
 800189a:	dd00      	ble.n	800189e <__aeabi_dmul+0x342>
 800189c:	e724      	b.n	80016e8 <__aeabi_dmul+0x18c>
 800189e:	0762      	lsls	r2, r4, #29
 80018a0:	08ed      	lsrs	r5, r5, #3
 80018a2:	0264      	lsls	r4, r4, #9
 80018a4:	0549      	lsls	r1, r1, #21
 80018a6:	4315      	orrs	r5, r2
 80018a8:	0b24      	lsrs	r4, r4, #12
 80018aa:	0d4a      	lsrs	r2, r1, #21
 80018ac:	e6c6      	b.n	800163c <__aeabi_dmul+0xe0>
 80018ae:	9701      	str	r7, [sp, #4]
 80018b0:	e6b8      	b.n	8001624 <__aeabi_dmul+0xc8>
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <__aeabi_dmul+0x398>)
 80018b4:	2003      	movs	r0, #3
 80018b6:	4694      	mov	ip, r2
 80018b8:	4463      	add	r3, ip
 80018ba:	464a      	mov	r2, r9
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2303      	movs	r3, #3
 80018c0:	431a      	orrs	r2, r3
 80018c2:	4691      	mov	r9, r2
 80018c4:	4652      	mov	r2, sl
 80018c6:	e68a      	b.n	80015de <__aeabi_dmul+0x82>
 80018c8:	4649      	mov	r1, r9
 80018ca:	2301      	movs	r3, #1
 80018cc:	4319      	orrs	r1, r3
 80018ce:	4689      	mov	r9, r1
 80018d0:	2600      	movs	r6, #0
 80018d2:	2001      	movs	r0, #1
 80018d4:	e683      	b.n	80015de <__aeabi_dmul+0x82>
 80018d6:	220c      	movs	r2, #12
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2303      	movs	r3, #3
 80018dc:	0005      	movs	r5, r0
 80018de:	4691      	mov	r9, r2
 80018e0:	469b      	mov	fp, r3
 80018e2:	e65e      	b.n	80015a2 <__aeabi_dmul+0x46>
 80018e4:	2304      	movs	r3, #4
 80018e6:	4699      	mov	r9, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	2400      	movs	r4, #0
 80018f0:	469b      	mov	fp, r3
 80018f2:	e656      	b.n	80015a2 <__aeabi_dmul+0x46>
 80018f4:	000007ff 	.word	0x000007ff
 80018f8:	fffffc01 	.word	0xfffffc01
 80018fc:	0800ed28 	.word	0x0800ed28
 8001900:	fffffc0d 	.word	0xfffffc0d
 8001904:	000003ff 	.word	0x000003ff
 8001908:	feffffff 	.word	0xfeffffff
 800190c:	000007fe 	.word	0x000007fe
 8001910:	2300      	movs	r3, #0
 8001912:	2480      	movs	r4, #128	; 0x80
 8001914:	2500      	movs	r5, #0
 8001916:	4a44      	ldr	r2, [pc, #272]	; (8001a28 <__aeabi_dmul+0x4cc>)
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	0324      	lsls	r4, r4, #12
 800191c:	e68e      	b.n	800163c <__aeabi_dmul+0xe0>
 800191e:	2001      	movs	r0, #1
 8001920:	1a40      	subs	r0, r0, r1
 8001922:	2838      	cmp	r0, #56	; 0x38
 8001924:	dd00      	ble.n	8001928 <__aeabi_dmul+0x3cc>
 8001926:	e686      	b.n	8001636 <__aeabi_dmul+0xda>
 8001928:	281f      	cmp	r0, #31
 800192a:	dd5b      	ble.n	80019e4 <__aeabi_dmul+0x488>
 800192c:	221f      	movs	r2, #31
 800192e:	0023      	movs	r3, r4
 8001930:	4252      	negs	r2, r2
 8001932:	1a51      	subs	r1, r2, r1
 8001934:	40cb      	lsrs	r3, r1
 8001936:	0019      	movs	r1, r3
 8001938:	2820      	cmp	r0, #32
 800193a:	d003      	beq.n	8001944 <__aeabi_dmul+0x3e8>
 800193c:	4a3b      	ldr	r2, [pc, #236]	; (8001a2c <__aeabi_dmul+0x4d0>)
 800193e:	4462      	add	r2, ip
 8001940:	4094      	lsls	r4, r2
 8001942:	4325      	orrs	r5, r4
 8001944:	1e6a      	subs	r2, r5, #1
 8001946:	4195      	sbcs	r5, r2
 8001948:	002a      	movs	r2, r5
 800194a:	430a      	orrs	r2, r1
 800194c:	2107      	movs	r1, #7
 800194e:	000d      	movs	r5, r1
 8001950:	2400      	movs	r4, #0
 8001952:	4015      	ands	r5, r2
 8001954:	4211      	tst	r1, r2
 8001956:	d05b      	beq.n	8001a10 <__aeabi_dmul+0x4b4>
 8001958:	210f      	movs	r1, #15
 800195a:	2400      	movs	r4, #0
 800195c:	4011      	ands	r1, r2
 800195e:	2904      	cmp	r1, #4
 8001960:	d053      	beq.n	8001a0a <__aeabi_dmul+0x4ae>
 8001962:	1d11      	adds	r1, r2, #4
 8001964:	4291      	cmp	r1, r2
 8001966:	4192      	sbcs	r2, r2
 8001968:	4252      	negs	r2, r2
 800196a:	18a4      	adds	r4, r4, r2
 800196c:	000a      	movs	r2, r1
 800196e:	0223      	lsls	r3, r4, #8
 8001970:	d54b      	bpl.n	8001a0a <__aeabi_dmul+0x4ae>
 8001972:	2201      	movs	r2, #1
 8001974:	2400      	movs	r4, #0
 8001976:	2500      	movs	r5, #0
 8001978:	e660      	b.n	800163c <__aeabi_dmul+0xe0>
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	031b      	lsls	r3, r3, #12
 800197e:	421c      	tst	r4, r3
 8001980:	d009      	beq.n	8001996 <__aeabi_dmul+0x43a>
 8001982:	421e      	tst	r6, r3
 8001984:	d107      	bne.n	8001996 <__aeabi_dmul+0x43a>
 8001986:	4333      	orrs	r3, r6
 8001988:	031c      	lsls	r4, r3, #12
 800198a:	4643      	mov	r3, r8
 800198c:	0015      	movs	r5, r2
 800198e:	0b24      	lsrs	r4, r4, #12
 8001990:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <__aeabi_dmul+0x4cc>)
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	e652      	b.n	800163c <__aeabi_dmul+0xe0>
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	0312      	lsls	r2, r2, #12
 800199a:	4314      	orrs	r4, r2
 800199c:	0324      	lsls	r4, r4, #12
 800199e:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <__aeabi_dmul+0x4cc>)
 80019a0:	0b24      	lsrs	r4, r4, #12
 80019a2:	9701      	str	r7, [sp, #4]
 80019a4:	e64a      	b.n	800163c <__aeabi_dmul+0xe0>
 80019a6:	f000 fc81 	bl	80022ac <__clzsi2>
 80019aa:	0003      	movs	r3, r0
 80019ac:	001a      	movs	r2, r3
 80019ae:	3215      	adds	r2, #21
 80019b0:	3020      	adds	r0, #32
 80019b2:	2a1c      	cmp	r2, #28
 80019b4:	dc00      	bgt.n	80019b8 <__aeabi_dmul+0x45c>
 80019b6:	e684      	b.n	80016c2 <__aeabi_dmul+0x166>
 80019b8:	4656      	mov	r6, sl
 80019ba:	3b08      	subs	r3, #8
 80019bc:	2200      	movs	r2, #0
 80019be:	409e      	lsls	r6, r3
 80019c0:	e689      	b.n	80016d6 <__aeabi_dmul+0x17a>
 80019c2:	f000 fc73 	bl	80022ac <__clzsi2>
 80019c6:	0001      	movs	r1, r0
 80019c8:	0002      	movs	r2, r0
 80019ca:	3115      	adds	r1, #21
 80019cc:	3220      	adds	r2, #32
 80019ce:	291c      	cmp	r1, #28
 80019d0:	dc00      	bgt.n	80019d4 <__aeabi_dmul+0x478>
 80019d2:	e64e      	b.n	8001672 <__aeabi_dmul+0x116>
 80019d4:	0034      	movs	r4, r6
 80019d6:	3808      	subs	r0, #8
 80019d8:	2500      	movs	r5, #0
 80019da:	4084      	lsls	r4, r0
 80019dc:	e653      	b.n	8001686 <__aeabi_dmul+0x12a>
 80019de:	9b00      	ldr	r3, [sp, #0]
 80019e0:	469c      	mov	ip, r3
 80019e2:	e741      	b.n	8001868 <__aeabi_dmul+0x30c>
 80019e4:	4912      	ldr	r1, [pc, #72]	; (8001a30 <__aeabi_dmul+0x4d4>)
 80019e6:	0022      	movs	r2, r4
 80019e8:	4461      	add	r1, ip
 80019ea:	002e      	movs	r6, r5
 80019ec:	408d      	lsls	r5, r1
 80019ee:	408a      	lsls	r2, r1
 80019f0:	40c6      	lsrs	r6, r0
 80019f2:	1e69      	subs	r1, r5, #1
 80019f4:	418d      	sbcs	r5, r1
 80019f6:	4332      	orrs	r2, r6
 80019f8:	432a      	orrs	r2, r5
 80019fa:	40c4      	lsrs	r4, r0
 80019fc:	0753      	lsls	r3, r2, #29
 80019fe:	d0b6      	beq.n	800196e <__aeabi_dmul+0x412>
 8001a00:	210f      	movs	r1, #15
 8001a02:	4011      	ands	r1, r2
 8001a04:	2904      	cmp	r1, #4
 8001a06:	d1ac      	bne.n	8001962 <__aeabi_dmul+0x406>
 8001a08:	e7b1      	b.n	800196e <__aeabi_dmul+0x412>
 8001a0a:	0765      	lsls	r5, r4, #29
 8001a0c:	0264      	lsls	r4, r4, #9
 8001a0e:	0b24      	lsrs	r4, r4, #12
 8001a10:	08d2      	lsrs	r2, r2, #3
 8001a12:	4315      	orrs	r5, r2
 8001a14:	2200      	movs	r2, #0
 8001a16:	e611      	b.n	800163c <__aeabi_dmul+0xe0>
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	4314      	orrs	r4, r2
 8001a1e:	0324      	lsls	r4, r4, #12
 8001a20:	4a01      	ldr	r2, [pc, #4]	; (8001a28 <__aeabi_dmul+0x4cc>)
 8001a22:	0b24      	lsrs	r4, r4, #12
 8001a24:	e60a      	b.n	800163c <__aeabi_dmul+0xe0>
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	000007ff 	.word	0x000007ff
 8001a2c:	0000043e 	.word	0x0000043e
 8001a30:	0000041e 	.word	0x0000041e

08001a34 <__aeabi_dsub>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	4657      	mov	r7, sl
 8001a38:	464e      	mov	r6, r9
 8001a3a:	4645      	mov	r5, r8
 8001a3c:	46de      	mov	lr, fp
 8001a3e:	0004      	movs	r4, r0
 8001a40:	b5e0      	push	{r5, r6, r7, lr}
 8001a42:	001f      	movs	r7, r3
 8001a44:	0010      	movs	r0, r2
 8001a46:	030b      	lsls	r3, r1, #12
 8001a48:	0f62      	lsrs	r2, r4, #29
 8001a4a:	004e      	lsls	r6, r1, #1
 8001a4c:	0fcd      	lsrs	r5, r1, #31
 8001a4e:	0a5b      	lsrs	r3, r3, #9
 8001a50:	0339      	lsls	r1, r7, #12
 8001a52:	4313      	orrs	r3, r2
 8001a54:	0a49      	lsrs	r1, r1, #9
 8001a56:	00e2      	lsls	r2, r4, #3
 8001a58:	0f44      	lsrs	r4, r0, #29
 8001a5a:	4321      	orrs	r1, r4
 8001a5c:	4cc2      	ldr	r4, [pc, #776]	; (8001d68 <__aeabi_dsub+0x334>)
 8001a5e:	4691      	mov	r9, r2
 8001a60:	4692      	mov	sl, r2
 8001a62:	00c0      	lsls	r0, r0, #3
 8001a64:	007a      	lsls	r2, r7, #1
 8001a66:	4680      	mov	r8, r0
 8001a68:	0d76      	lsrs	r6, r6, #21
 8001a6a:	0d52      	lsrs	r2, r2, #21
 8001a6c:	0fff      	lsrs	r7, r7, #31
 8001a6e:	42a2      	cmp	r2, r4
 8001a70:	d100      	bne.n	8001a74 <__aeabi_dsub+0x40>
 8001a72:	e0b4      	b.n	8001bde <__aeabi_dsub+0x1aa>
 8001a74:	2401      	movs	r4, #1
 8001a76:	4067      	eors	r7, r4
 8001a78:	46bb      	mov	fp, r7
 8001a7a:	42bd      	cmp	r5, r7
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x4c>
 8001a7e:	e088      	b.n	8001b92 <__aeabi_dsub+0x15e>
 8001a80:	1ab4      	subs	r4, r6, r2
 8001a82:	46a4      	mov	ip, r4
 8001a84:	2c00      	cmp	r4, #0
 8001a86:	dc00      	bgt.n	8001a8a <__aeabi_dsub+0x56>
 8001a88:	e0b2      	b.n	8001bf0 <__aeabi_dsub+0x1bc>
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x5c>
 8001a8e:	e0c5      	b.n	8001c1c <__aeabi_dsub+0x1e8>
 8001a90:	4ab5      	ldr	r2, [pc, #724]	; (8001d68 <__aeabi_dsub+0x334>)
 8001a92:	4296      	cmp	r6, r2
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0x64>
 8001a96:	e28b      	b.n	8001fb0 <__aeabi_dsub+0x57c>
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	0412      	lsls	r2, r2, #16
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	4662      	mov	r2, ip
 8001aa0:	2a38      	cmp	r2, #56	; 0x38
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x72>
 8001aa4:	e1a1      	b.n	8001dea <__aeabi_dsub+0x3b6>
 8001aa6:	2a1f      	cmp	r2, #31
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_dsub+0x78>
 8001aaa:	e216      	b.n	8001eda <__aeabi_dsub+0x4a6>
 8001aac:	2720      	movs	r7, #32
 8001aae:	000c      	movs	r4, r1
 8001ab0:	1abf      	subs	r7, r7, r2
 8001ab2:	40bc      	lsls	r4, r7
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	46a0      	mov	r8, r4
 8001ab8:	4664      	mov	r4, ip
 8001aba:	40b8      	lsls	r0, r7
 8001abc:	40e2      	lsrs	r2, r4
 8001abe:	4644      	mov	r4, r8
 8001ac0:	4314      	orrs	r4, r2
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	1e50      	subs	r0, r2, #1
 8001ac6:	4182      	sbcs	r2, r0
 8001ac8:	4660      	mov	r0, ip
 8001aca:	40c1      	lsrs	r1, r0
 8001acc:	4322      	orrs	r2, r4
 8001ace:	1a5b      	subs	r3, r3, r1
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	1a8c      	subs	r4, r1, r2
 8001ad4:	45a1      	cmp	r9, r4
 8001ad6:	4192      	sbcs	r2, r2
 8001ad8:	4252      	negs	r2, r2
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	4698      	mov	r8, r3
 8001ade:	4643      	mov	r3, r8
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	d400      	bmi.n	8001ae6 <__aeabi_dsub+0xb2>
 8001ae4:	e117      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 8001ae6:	4643      	mov	r3, r8
 8001ae8:	025b      	lsls	r3, r3, #9
 8001aea:	0a5b      	lsrs	r3, r3, #9
 8001aec:	4698      	mov	r8, r3
 8001aee:	4643      	mov	r3, r8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0xc2>
 8001af4:	e16c      	b.n	8001dd0 <__aeabi_dsub+0x39c>
 8001af6:	4640      	mov	r0, r8
 8001af8:	f000 fbd8 	bl	80022ac <__clzsi2>
 8001afc:	0002      	movs	r2, r0
 8001afe:	3a08      	subs	r2, #8
 8001b00:	2120      	movs	r1, #32
 8001b02:	0020      	movs	r0, r4
 8001b04:	4643      	mov	r3, r8
 8001b06:	1a89      	subs	r1, r1, r2
 8001b08:	4093      	lsls	r3, r2
 8001b0a:	40c8      	lsrs	r0, r1
 8001b0c:	4094      	lsls	r4, r2
 8001b0e:	4303      	orrs	r3, r0
 8001b10:	4296      	cmp	r6, r2
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0xe2>
 8001b14:	e157      	b.n	8001dc6 <__aeabi_dsub+0x392>
 8001b16:	1b96      	subs	r6, r2, r6
 8001b18:	1c71      	adds	r1, r6, #1
 8001b1a:	291f      	cmp	r1, #31
 8001b1c:	dd00      	ble.n	8001b20 <__aeabi_dsub+0xec>
 8001b1e:	e1cb      	b.n	8001eb8 <__aeabi_dsub+0x484>
 8001b20:	2220      	movs	r2, #32
 8001b22:	0018      	movs	r0, r3
 8001b24:	0026      	movs	r6, r4
 8001b26:	1a52      	subs	r2, r2, r1
 8001b28:	4094      	lsls	r4, r2
 8001b2a:	4090      	lsls	r0, r2
 8001b2c:	40ce      	lsrs	r6, r1
 8001b2e:	40cb      	lsrs	r3, r1
 8001b30:	1e62      	subs	r2, r4, #1
 8001b32:	4194      	sbcs	r4, r2
 8001b34:	4330      	orrs	r0, r6
 8001b36:	4698      	mov	r8, r3
 8001b38:	2600      	movs	r6, #0
 8001b3a:	4304      	orrs	r4, r0
 8001b3c:	0763      	lsls	r3, r4, #29
 8001b3e:	d009      	beq.n	8001b54 <__aeabi_dsub+0x120>
 8001b40:	230f      	movs	r3, #15
 8001b42:	4023      	ands	r3, r4
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d005      	beq.n	8001b54 <__aeabi_dsub+0x120>
 8001b48:	1d23      	adds	r3, r4, #4
 8001b4a:	42a3      	cmp	r3, r4
 8001b4c:	41a4      	sbcs	r4, r4
 8001b4e:	4264      	negs	r4, r4
 8001b50:	44a0      	add	r8, r4
 8001b52:	001c      	movs	r4, r3
 8001b54:	4643      	mov	r3, r8
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	d400      	bmi.n	8001b5c <__aeabi_dsub+0x128>
 8001b5a:	e0df      	b.n	8001d1c <__aeabi_dsub+0x2e8>
 8001b5c:	4b82      	ldr	r3, [pc, #520]	; (8001d68 <__aeabi_dsub+0x334>)
 8001b5e:	3601      	adds	r6, #1
 8001b60:	429e      	cmp	r6, r3
 8001b62:	d100      	bne.n	8001b66 <__aeabi_dsub+0x132>
 8001b64:	e0fb      	b.n	8001d5e <__aeabi_dsub+0x32a>
 8001b66:	4642      	mov	r2, r8
 8001b68:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <__aeabi_dsub+0x338>)
 8001b6a:	08e4      	lsrs	r4, r4, #3
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	0571      	lsls	r1, r6, #21
 8001b72:	0752      	lsls	r2, r2, #29
 8001b74:	025b      	lsls	r3, r3, #9
 8001b76:	4322      	orrs	r2, r4
 8001b78:	0b1b      	lsrs	r3, r3, #12
 8001b7a:	0d49      	lsrs	r1, r1, #21
 8001b7c:	0509      	lsls	r1, r1, #20
 8001b7e:	07ed      	lsls	r5, r5, #31
 8001b80:	4319      	orrs	r1, r3
 8001b82:	4329      	orrs	r1, r5
 8001b84:	0010      	movs	r0, r2
 8001b86:	bcf0      	pop	{r4, r5, r6, r7}
 8001b88:	46bb      	mov	fp, r7
 8001b8a:	46b2      	mov	sl, r6
 8001b8c:	46a9      	mov	r9, r5
 8001b8e:	46a0      	mov	r8, r4
 8001b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b92:	1ab4      	subs	r4, r6, r2
 8001b94:	46a4      	mov	ip, r4
 8001b96:	2c00      	cmp	r4, #0
 8001b98:	dd58      	ble.n	8001c4c <__aeabi_dsub+0x218>
 8001b9a:	2a00      	cmp	r2, #0
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dsub+0x16c>
 8001b9e:	e09e      	b.n	8001cde <__aeabi_dsub+0x2aa>
 8001ba0:	4a71      	ldr	r2, [pc, #452]	; (8001d68 <__aeabi_dsub+0x334>)
 8001ba2:	4296      	cmp	r6, r2
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x174>
 8001ba6:	e13b      	b.n	8001e20 <__aeabi_dsub+0x3ec>
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	0412      	lsls	r2, r2, #16
 8001bac:	4311      	orrs	r1, r2
 8001bae:	4662      	mov	r2, ip
 8001bb0:	2a38      	cmp	r2, #56	; 0x38
 8001bb2:	dd00      	ble.n	8001bb6 <__aeabi_dsub+0x182>
 8001bb4:	e0c1      	b.n	8001d3a <__aeabi_dsub+0x306>
 8001bb6:	2a1f      	cmp	r2, #31
 8001bb8:	dc00      	bgt.n	8001bbc <__aeabi_dsub+0x188>
 8001bba:	e1bb      	b.n	8001f34 <__aeabi_dsub+0x500>
 8001bbc:	000c      	movs	r4, r1
 8001bbe:	3a20      	subs	r2, #32
 8001bc0:	40d4      	lsrs	r4, r2
 8001bc2:	0022      	movs	r2, r4
 8001bc4:	4664      	mov	r4, ip
 8001bc6:	2c20      	cmp	r4, #32
 8001bc8:	d004      	beq.n	8001bd4 <__aeabi_dsub+0x1a0>
 8001bca:	2740      	movs	r7, #64	; 0x40
 8001bcc:	1b3f      	subs	r7, r7, r4
 8001bce:	40b9      	lsls	r1, r7
 8001bd0:	4308      	orrs	r0, r1
 8001bd2:	4680      	mov	r8, r0
 8001bd4:	4644      	mov	r4, r8
 8001bd6:	1e61      	subs	r1, r4, #1
 8001bd8:	418c      	sbcs	r4, r1
 8001bda:	4314      	orrs	r4, r2
 8001bdc:	e0b1      	b.n	8001d42 <__aeabi_dsub+0x30e>
 8001bde:	000c      	movs	r4, r1
 8001be0:	4304      	orrs	r4, r0
 8001be2:	d02a      	beq.n	8001c3a <__aeabi_dsub+0x206>
 8001be4:	46bb      	mov	fp, r7
 8001be6:	42bd      	cmp	r5, r7
 8001be8:	d02d      	beq.n	8001c46 <__aeabi_dsub+0x212>
 8001bea:	4c61      	ldr	r4, [pc, #388]	; (8001d70 <__aeabi_dsub+0x33c>)
 8001bec:	46a4      	mov	ip, r4
 8001bee:	44b4      	add	ip, r6
 8001bf0:	4664      	mov	r4, ip
 8001bf2:	2c00      	cmp	r4, #0
 8001bf4:	d05c      	beq.n	8001cb0 <__aeabi_dsub+0x27c>
 8001bf6:	1b94      	subs	r4, r2, r6
 8001bf8:	46a4      	mov	ip, r4
 8001bfa:	2e00      	cmp	r6, #0
 8001bfc:	d000      	beq.n	8001c00 <__aeabi_dsub+0x1cc>
 8001bfe:	e115      	b.n	8001e2c <__aeabi_dsub+0x3f8>
 8001c00:	464d      	mov	r5, r9
 8001c02:	431d      	orrs	r5, r3
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0x1d4>
 8001c06:	e1c3      	b.n	8001f90 <__aeabi_dsub+0x55c>
 8001c08:	1e65      	subs	r5, r4, #1
 8001c0a:	2c01      	cmp	r4, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x1dc>
 8001c0e:	e20c      	b.n	800202a <__aeabi_dsub+0x5f6>
 8001c10:	4e55      	ldr	r6, [pc, #340]	; (8001d68 <__aeabi_dsub+0x334>)
 8001c12:	42b4      	cmp	r4, r6
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x1e4>
 8001c16:	e1f8      	b.n	800200a <__aeabi_dsub+0x5d6>
 8001c18:	46ac      	mov	ip, r5
 8001c1a:	e10e      	b.n	8001e3a <__aeabi_dsub+0x406>
 8001c1c:	000a      	movs	r2, r1
 8001c1e:	4302      	orrs	r2, r0
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dsub+0x1f0>
 8001c22:	e136      	b.n	8001e92 <__aeabi_dsub+0x45e>
 8001c24:	0022      	movs	r2, r4
 8001c26:	3a01      	subs	r2, #1
 8001c28:	2c01      	cmp	r4, #1
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x1fa>
 8001c2c:	e1c6      	b.n	8001fbc <__aeabi_dsub+0x588>
 8001c2e:	4c4e      	ldr	r4, [pc, #312]	; (8001d68 <__aeabi_dsub+0x334>)
 8001c30:	45a4      	cmp	ip, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x202>
 8001c34:	e0f4      	b.n	8001e20 <__aeabi_dsub+0x3ec>
 8001c36:	4694      	mov	ip, r2
 8001c38:	e731      	b.n	8001a9e <__aeabi_dsub+0x6a>
 8001c3a:	2401      	movs	r4, #1
 8001c3c:	4067      	eors	r7, r4
 8001c3e:	46bb      	mov	fp, r7
 8001c40:	42bd      	cmp	r5, r7
 8001c42:	d000      	beq.n	8001c46 <__aeabi_dsub+0x212>
 8001c44:	e71c      	b.n	8001a80 <__aeabi_dsub+0x4c>
 8001c46:	4c4a      	ldr	r4, [pc, #296]	; (8001d70 <__aeabi_dsub+0x33c>)
 8001c48:	46a4      	mov	ip, r4
 8001c4a:	44b4      	add	ip, r6
 8001c4c:	4664      	mov	r4, ip
 8001c4e:	2c00      	cmp	r4, #0
 8001c50:	d100      	bne.n	8001c54 <__aeabi_dsub+0x220>
 8001c52:	e0cf      	b.n	8001df4 <__aeabi_dsub+0x3c0>
 8001c54:	1b94      	subs	r4, r2, r6
 8001c56:	46a4      	mov	ip, r4
 8001c58:	2e00      	cmp	r6, #0
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x22a>
 8001c5c:	e15c      	b.n	8001f18 <__aeabi_dsub+0x4e4>
 8001c5e:	4e42      	ldr	r6, [pc, #264]	; (8001d68 <__aeabi_dsub+0x334>)
 8001c60:	42b2      	cmp	r2, r6
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dsub+0x232>
 8001c64:	e1ec      	b.n	8002040 <__aeabi_dsub+0x60c>
 8001c66:	2680      	movs	r6, #128	; 0x80
 8001c68:	0436      	lsls	r6, r6, #16
 8001c6a:	4333      	orrs	r3, r6
 8001c6c:	4664      	mov	r4, ip
 8001c6e:	2c38      	cmp	r4, #56	; 0x38
 8001c70:	dd00      	ble.n	8001c74 <__aeabi_dsub+0x240>
 8001c72:	e1b3      	b.n	8001fdc <__aeabi_dsub+0x5a8>
 8001c74:	2c1f      	cmp	r4, #31
 8001c76:	dd00      	ble.n	8001c7a <__aeabi_dsub+0x246>
 8001c78:	e238      	b.n	80020ec <__aeabi_dsub+0x6b8>
 8001c7a:	2620      	movs	r6, #32
 8001c7c:	1b36      	subs	r6, r6, r4
 8001c7e:	001c      	movs	r4, r3
 8001c80:	40b4      	lsls	r4, r6
 8001c82:	464f      	mov	r7, r9
 8001c84:	46a0      	mov	r8, r4
 8001c86:	4664      	mov	r4, ip
 8001c88:	40e7      	lsrs	r7, r4
 8001c8a:	4644      	mov	r4, r8
 8001c8c:	433c      	orrs	r4, r7
 8001c8e:	464f      	mov	r7, r9
 8001c90:	40b7      	lsls	r7, r6
 8001c92:	003e      	movs	r6, r7
 8001c94:	1e77      	subs	r7, r6, #1
 8001c96:	41be      	sbcs	r6, r7
 8001c98:	4334      	orrs	r4, r6
 8001c9a:	4666      	mov	r6, ip
 8001c9c:	40f3      	lsrs	r3, r6
 8001c9e:	18c9      	adds	r1, r1, r3
 8001ca0:	1824      	adds	r4, r4, r0
 8001ca2:	4284      	cmp	r4, r0
 8001ca4:	419b      	sbcs	r3, r3
 8001ca6:	425b      	negs	r3, r3
 8001ca8:	4698      	mov	r8, r3
 8001caa:	0016      	movs	r6, r2
 8001cac:	4488      	add	r8, r1
 8001cae:	e04e      	b.n	8001d4e <__aeabi_dsub+0x31a>
 8001cb0:	4a30      	ldr	r2, [pc, #192]	; (8001d74 <__aeabi_dsub+0x340>)
 8001cb2:	1c74      	adds	r4, r6, #1
 8001cb4:	4214      	tst	r4, r2
 8001cb6:	d000      	beq.n	8001cba <__aeabi_dsub+0x286>
 8001cb8:	e0d6      	b.n	8001e68 <__aeabi_dsub+0x434>
 8001cba:	464a      	mov	r2, r9
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	2e00      	cmp	r6, #0
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dsub+0x290>
 8001cc2:	e15b      	b.n	8001f7c <__aeabi_dsub+0x548>
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d100      	bne.n	8001cca <__aeabi_dsub+0x296>
 8001cc8:	e1a5      	b.n	8002016 <__aeabi_dsub+0x5e2>
 8001cca:	000a      	movs	r2, r1
 8001ccc:	4302      	orrs	r2, r0
 8001cce:	d000      	beq.n	8001cd2 <__aeabi_dsub+0x29e>
 8001cd0:	e1bb      	b.n	800204a <__aeabi_dsub+0x616>
 8001cd2:	464a      	mov	r2, r9
 8001cd4:	0759      	lsls	r1, r3, #29
 8001cd6:	08d2      	lsrs	r2, r2, #3
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	08db      	lsrs	r3, r3, #3
 8001cdc:	e027      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 8001cde:	000a      	movs	r2, r1
 8001ce0:	4302      	orrs	r2, r0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x2b2>
 8001ce4:	e174      	b.n	8001fd0 <__aeabi_dsub+0x59c>
 8001ce6:	0022      	movs	r2, r4
 8001ce8:	3a01      	subs	r2, #1
 8001cea:	2c01      	cmp	r4, #1
 8001cec:	d005      	beq.n	8001cfa <__aeabi_dsub+0x2c6>
 8001cee:	4c1e      	ldr	r4, [pc, #120]	; (8001d68 <__aeabi_dsub+0x334>)
 8001cf0:	45a4      	cmp	ip, r4
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x2c2>
 8001cf4:	e094      	b.n	8001e20 <__aeabi_dsub+0x3ec>
 8001cf6:	4694      	mov	ip, r2
 8001cf8:	e759      	b.n	8001bae <__aeabi_dsub+0x17a>
 8001cfa:	4448      	add	r0, r9
 8001cfc:	4548      	cmp	r0, r9
 8001cfe:	4192      	sbcs	r2, r2
 8001d00:	185b      	adds	r3, r3, r1
 8001d02:	4698      	mov	r8, r3
 8001d04:	0004      	movs	r4, r0
 8001d06:	4252      	negs	r2, r2
 8001d08:	4490      	add	r8, r2
 8001d0a:	4643      	mov	r3, r8
 8001d0c:	2602      	movs	r6, #2
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	d500      	bpl.n	8001d14 <__aeabi_dsub+0x2e0>
 8001d12:	e0c4      	b.n	8001e9e <__aeabi_dsub+0x46a>
 8001d14:	3e01      	subs	r6, #1
 8001d16:	0763      	lsls	r3, r4, #29
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dsub+0x2e8>
 8001d1a:	e711      	b.n	8001b40 <__aeabi_dsub+0x10c>
 8001d1c:	4643      	mov	r3, r8
 8001d1e:	46b4      	mov	ip, r6
 8001d20:	0759      	lsls	r1, r3, #29
 8001d22:	08e2      	lsrs	r2, r4, #3
 8001d24:	430a      	orrs	r2, r1
 8001d26:	08db      	lsrs	r3, r3, #3
 8001d28:	490f      	ldr	r1, [pc, #60]	; (8001d68 <__aeabi_dsub+0x334>)
 8001d2a:	458c      	cmp	ip, r1
 8001d2c:	d040      	beq.n	8001db0 <__aeabi_dsub+0x37c>
 8001d2e:	4661      	mov	r1, ip
 8001d30:	031b      	lsls	r3, r3, #12
 8001d32:	0549      	lsls	r1, r1, #21
 8001d34:	0b1b      	lsrs	r3, r3, #12
 8001d36:	0d49      	lsrs	r1, r1, #21
 8001d38:	e720      	b.n	8001b7c <__aeabi_dsub+0x148>
 8001d3a:	4301      	orrs	r1, r0
 8001d3c:	000c      	movs	r4, r1
 8001d3e:	1e61      	subs	r1, r4, #1
 8001d40:	418c      	sbcs	r4, r1
 8001d42:	444c      	add	r4, r9
 8001d44:	454c      	cmp	r4, r9
 8001d46:	4192      	sbcs	r2, r2
 8001d48:	4252      	negs	r2, r2
 8001d4a:	4690      	mov	r8, r2
 8001d4c:	4498      	add	r8, r3
 8001d4e:	4643      	mov	r3, r8
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	d5e0      	bpl.n	8001d16 <__aeabi_dsub+0x2e2>
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__aeabi_dsub+0x334>)
 8001d56:	3601      	adds	r6, #1
 8001d58:	429e      	cmp	r6, r3
 8001d5a:	d000      	beq.n	8001d5e <__aeabi_dsub+0x32a>
 8001d5c:	e09f      	b.n	8001e9e <__aeabi_dsub+0x46a>
 8001d5e:	0031      	movs	r1, r6
 8001d60:	2300      	movs	r3, #0
 8001d62:	2200      	movs	r2, #0
 8001d64:	e70a      	b.n	8001b7c <__aeabi_dsub+0x148>
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	000007ff 	.word	0x000007ff
 8001d6c:	ff7fffff 	.word	0xff7fffff
 8001d70:	fffff801 	.word	0xfffff801
 8001d74:	000007fe 	.word	0x000007fe
 8001d78:	2a00      	cmp	r2, #0
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_dsub+0x34a>
 8001d7c:	e160      	b.n	8002040 <__aeabi_dsub+0x60c>
 8001d7e:	000a      	movs	r2, r1
 8001d80:	4302      	orrs	r2, r0
 8001d82:	d04d      	beq.n	8001e20 <__aeabi_dsub+0x3ec>
 8001d84:	464a      	mov	r2, r9
 8001d86:	075c      	lsls	r4, r3, #29
 8001d88:	08d2      	lsrs	r2, r2, #3
 8001d8a:	4322      	orrs	r2, r4
 8001d8c:	2480      	movs	r4, #128	; 0x80
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	0324      	lsls	r4, r4, #12
 8001d92:	4223      	tst	r3, r4
 8001d94:	d007      	beq.n	8001da6 <__aeabi_dsub+0x372>
 8001d96:	08ce      	lsrs	r6, r1, #3
 8001d98:	4226      	tst	r6, r4
 8001d9a:	d104      	bne.n	8001da6 <__aeabi_dsub+0x372>
 8001d9c:	465d      	mov	r5, fp
 8001d9e:	0033      	movs	r3, r6
 8001da0:	08c2      	lsrs	r2, r0, #3
 8001da2:	0749      	lsls	r1, r1, #29
 8001da4:	430a      	orrs	r2, r1
 8001da6:	0f51      	lsrs	r1, r2, #29
 8001da8:	00d2      	lsls	r2, r2, #3
 8001daa:	08d2      	lsrs	r2, r2, #3
 8001dac:	0749      	lsls	r1, r1, #29
 8001dae:	430a      	orrs	r2, r1
 8001db0:	0011      	movs	r1, r2
 8001db2:	4319      	orrs	r1, r3
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x384>
 8001db6:	e1c8      	b.n	800214a <__aeabi_dsub+0x716>
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	0309      	lsls	r1, r1, #12
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	031b      	lsls	r3, r3, #12
 8001dc0:	49d5      	ldr	r1, [pc, #852]	; (8002118 <__aeabi_dsub+0x6e4>)
 8001dc2:	0b1b      	lsrs	r3, r3, #12
 8001dc4:	e6da      	b.n	8001b7c <__aeabi_dsub+0x148>
 8001dc6:	49d5      	ldr	r1, [pc, #852]	; (800211c <__aeabi_dsub+0x6e8>)
 8001dc8:	1ab6      	subs	r6, r6, r2
 8001dca:	400b      	ands	r3, r1
 8001dcc:	4698      	mov	r8, r3
 8001dce:	e6b5      	b.n	8001b3c <__aeabi_dsub+0x108>
 8001dd0:	0020      	movs	r0, r4
 8001dd2:	f000 fa6b 	bl	80022ac <__clzsi2>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	3218      	adds	r2, #24
 8001dda:	2a1f      	cmp	r2, #31
 8001ddc:	dc00      	bgt.n	8001de0 <__aeabi_dsub+0x3ac>
 8001dde:	e68f      	b.n	8001b00 <__aeabi_dsub+0xcc>
 8001de0:	0023      	movs	r3, r4
 8001de2:	3808      	subs	r0, #8
 8001de4:	4083      	lsls	r3, r0
 8001de6:	2400      	movs	r4, #0
 8001de8:	e692      	b.n	8001b10 <__aeabi_dsub+0xdc>
 8001dea:	4308      	orrs	r0, r1
 8001dec:	0002      	movs	r2, r0
 8001dee:	1e50      	subs	r0, r2, #1
 8001df0:	4182      	sbcs	r2, r0
 8001df2:	e66d      	b.n	8001ad0 <__aeabi_dsub+0x9c>
 8001df4:	4cca      	ldr	r4, [pc, #808]	; (8002120 <__aeabi_dsub+0x6ec>)
 8001df6:	1c72      	adds	r2, r6, #1
 8001df8:	4222      	tst	r2, r4
 8001dfa:	d000      	beq.n	8001dfe <__aeabi_dsub+0x3ca>
 8001dfc:	e0ad      	b.n	8001f5a <__aeabi_dsub+0x526>
 8001dfe:	464a      	mov	r2, r9
 8001e00:	431a      	orrs	r2, r3
 8001e02:	2e00      	cmp	r6, #0
 8001e04:	d1b8      	bne.n	8001d78 <__aeabi_dsub+0x344>
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x3d8>
 8001e0a:	e158      	b.n	80020be <__aeabi_dsub+0x68a>
 8001e0c:	000a      	movs	r2, r1
 8001e0e:	4302      	orrs	r2, r0
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x3e0>
 8001e12:	e159      	b.n	80020c8 <__aeabi_dsub+0x694>
 8001e14:	464a      	mov	r2, r9
 8001e16:	0759      	lsls	r1, r3, #29
 8001e18:	08d2      	lsrs	r2, r2, #3
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	e786      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 8001e20:	464a      	mov	r2, r9
 8001e22:	0759      	lsls	r1, r3, #29
 8001e24:	08d2      	lsrs	r2, r2, #3
 8001e26:	430a      	orrs	r2, r1
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	e7c1      	b.n	8001db0 <__aeabi_dsub+0x37c>
 8001e2c:	4dba      	ldr	r5, [pc, #744]	; (8002118 <__aeabi_dsub+0x6e4>)
 8001e2e:	42aa      	cmp	r2, r5
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x400>
 8001e32:	e11e      	b.n	8002072 <__aeabi_dsub+0x63e>
 8001e34:	2580      	movs	r5, #128	; 0x80
 8001e36:	042d      	lsls	r5, r5, #16
 8001e38:	432b      	orrs	r3, r5
 8001e3a:	4664      	mov	r4, ip
 8001e3c:	2c38      	cmp	r4, #56	; 0x38
 8001e3e:	dc5d      	bgt.n	8001efc <__aeabi_dsub+0x4c8>
 8001e40:	2c1f      	cmp	r4, #31
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x412>
 8001e44:	e0d0      	b.n	8001fe8 <__aeabi_dsub+0x5b4>
 8001e46:	2520      	movs	r5, #32
 8001e48:	4667      	mov	r7, ip
 8001e4a:	1b2d      	subs	r5, r5, r4
 8001e4c:	464e      	mov	r6, r9
 8001e4e:	001c      	movs	r4, r3
 8001e50:	40fe      	lsrs	r6, r7
 8001e52:	40ac      	lsls	r4, r5
 8001e54:	4334      	orrs	r4, r6
 8001e56:	464e      	mov	r6, r9
 8001e58:	40ae      	lsls	r6, r5
 8001e5a:	0035      	movs	r5, r6
 8001e5c:	40fb      	lsrs	r3, r7
 8001e5e:	1e6e      	subs	r6, r5, #1
 8001e60:	41b5      	sbcs	r5, r6
 8001e62:	1ac9      	subs	r1, r1, r3
 8001e64:	432c      	orrs	r4, r5
 8001e66:	e04e      	b.n	8001f06 <__aeabi_dsub+0x4d2>
 8001e68:	464a      	mov	r2, r9
 8001e6a:	1a14      	subs	r4, r2, r0
 8001e6c:	45a1      	cmp	r9, r4
 8001e6e:	4192      	sbcs	r2, r2
 8001e70:	4252      	negs	r2, r2
 8001e72:	4690      	mov	r8, r2
 8001e74:	1a5f      	subs	r7, r3, r1
 8001e76:	003a      	movs	r2, r7
 8001e78:	4647      	mov	r7, r8
 8001e7a:	1bd2      	subs	r2, r2, r7
 8001e7c:	4690      	mov	r8, r2
 8001e7e:	0212      	lsls	r2, r2, #8
 8001e80:	d500      	bpl.n	8001e84 <__aeabi_dsub+0x450>
 8001e82:	e08b      	b.n	8001f9c <__aeabi_dsub+0x568>
 8001e84:	4642      	mov	r2, r8
 8001e86:	4322      	orrs	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x458>
 8001e8a:	e630      	b.n	8001aee <__aeabi_dsub+0xba>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2500      	movs	r5, #0
 8001e90:	e74d      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 8001e92:	464a      	mov	r2, r9
 8001e94:	0759      	lsls	r1, r3, #29
 8001e96:	08d2      	lsrs	r2, r2, #3
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	08db      	lsrs	r3, r3, #3
 8001e9c:	e744      	b.n	8001d28 <__aeabi_dsub+0x2f4>
 8001e9e:	4642      	mov	r2, r8
 8001ea0:	4b9e      	ldr	r3, [pc, #632]	; (800211c <__aeabi_dsub+0x6e8>)
 8001ea2:	0861      	lsrs	r1, r4, #1
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4014      	ands	r4, r2
 8001eac:	430c      	orrs	r4, r1
 8001eae:	07da      	lsls	r2, r3, #31
 8001eb0:	085b      	lsrs	r3, r3, #1
 8001eb2:	4698      	mov	r8, r3
 8001eb4:	4314      	orrs	r4, r2
 8001eb6:	e641      	b.n	8001b3c <__aeabi_dsub+0x108>
 8001eb8:	001a      	movs	r2, r3
 8001eba:	3e1f      	subs	r6, #31
 8001ebc:	40f2      	lsrs	r2, r6
 8001ebe:	0016      	movs	r6, r2
 8001ec0:	2920      	cmp	r1, #32
 8001ec2:	d003      	beq.n	8001ecc <__aeabi_dsub+0x498>
 8001ec4:	2240      	movs	r2, #64	; 0x40
 8001ec6:	1a51      	subs	r1, r2, r1
 8001ec8:	408b      	lsls	r3, r1
 8001eca:	431c      	orrs	r4, r3
 8001ecc:	1e62      	subs	r2, r4, #1
 8001ece:	4194      	sbcs	r4, r2
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	4334      	orrs	r4, r6
 8001ed4:	4698      	mov	r8, r3
 8001ed6:	2600      	movs	r6, #0
 8001ed8:	e71d      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 8001eda:	000c      	movs	r4, r1
 8001edc:	3a20      	subs	r2, #32
 8001ede:	40d4      	lsrs	r4, r2
 8001ee0:	0022      	movs	r2, r4
 8001ee2:	4664      	mov	r4, ip
 8001ee4:	2c20      	cmp	r4, #32
 8001ee6:	d004      	beq.n	8001ef2 <__aeabi_dsub+0x4be>
 8001ee8:	2740      	movs	r7, #64	; 0x40
 8001eea:	1b3f      	subs	r7, r7, r4
 8001eec:	40b9      	lsls	r1, r7
 8001eee:	4308      	orrs	r0, r1
 8001ef0:	4680      	mov	r8, r0
 8001ef2:	4644      	mov	r4, r8
 8001ef4:	1e61      	subs	r1, r4, #1
 8001ef6:	418c      	sbcs	r4, r1
 8001ef8:	4322      	orrs	r2, r4
 8001efa:	e5e9      	b.n	8001ad0 <__aeabi_dsub+0x9c>
 8001efc:	464c      	mov	r4, r9
 8001efe:	4323      	orrs	r3, r4
 8001f00:	001c      	movs	r4, r3
 8001f02:	1e63      	subs	r3, r4, #1
 8001f04:	419c      	sbcs	r4, r3
 8001f06:	1b04      	subs	r4, r0, r4
 8001f08:	42a0      	cmp	r0, r4
 8001f0a:	419b      	sbcs	r3, r3
 8001f0c:	425b      	negs	r3, r3
 8001f0e:	1acb      	subs	r3, r1, r3
 8001f10:	4698      	mov	r8, r3
 8001f12:	465d      	mov	r5, fp
 8001f14:	0016      	movs	r6, r2
 8001f16:	e5e2      	b.n	8001ade <__aeabi_dsub+0xaa>
 8001f18:	464e      	mov	r6, r9
 8001f1a:	431e      	orrs	r6, r3
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_dsub+0x4ec>
 8001f1e:	e0ae      	b.n	800207e <__aeabi_dsub+0x64a>
 8001f20:	1e66      	subs	r6, r4, #1
 8001f22:	2c01      	cmp	r4, #1
 8001f24:	d100      	bne.n	8001f28 <__aeabi_dsub+0x4f4>
 8001f26:	e0fd      	b.n	8002124 <__aeabi_dsub+0x6f0>
 8001f28:	4f7b      	ldr	r7, [pc, #492]	; (8002118 <__aeabi_dsub+0x6e4>)
 8001f2a:	42bc      	cmp	r4, r7
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x4fc>
 8001f2e:	e107      	b.n	8002140 <__aeabi_dsub+0x70c>
 8001f30:	46b4      	mov	ip, r6
 8001f32:	e69b      	b.n	8001c6c <__aeabi_dsub+0x238>
 8001f34:	4664      	mov	r4, ip
 8001f36:	2220      	movs	r2, #32
 8001f38:	1b12      	subs	r2, r2, r4
 8001f3a:	000c      	movs	r4, r1
 8001f3c:	4094      	lsls	r4, r2
 8001f3e:	0007      	movs	r7, r0
 8001f40:	4090      	lsls	r0, r2
 8001f42:	46a0      	mov	r8, r4
 8001f44:	4664      	mov	r4, ip
 8001f46:	1e42      	subs	r2, r0, #1
 8001f48:	4190      	sbcs	r0, r2
 8001f4a:	4662      	mov	r2, ip
 8001f4c:	40e7      	lsrs	r7, r4
 8001f4e:	4644      	mov	r4, r8
 8001f50:	40d1      	lsrs	r1, r2
 8001f52:	433c      	orrs	r4, r7
 8001f54:	4304      	orrs	r4, r0
 8001f56:	185b      	adds	r3, r3, r1
 8001f58:	e6f3      	b.n	8001d42 <__aeabi_dsub+0x30e>
 8001f5a:	4c6f      	ldr	r4, [pc, #444]	; (8002118 <__aeabi_dsub+0x6e4>)
 8001f5c:	42a2      	cmp	r2, r4
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x52e>
 8001f60:	e0d5      	b.n	800210e <__aeabi_dsub+0x6da>
 8001f62:	4448      	add	r0, r9
 8001f64:	185b      	adds	r3, r3, r1
 8001f66:	4548      	cmp	r0, r9
 8001f68:	4189      	sbcs	r1, r1
 8001f6a:	4249      	negs	r1, r1
 8001f6c:	185b      	adds	r3, r3, r1
 8001f6e:	07dc      	lsls	r4, r3, #31
 8001f70:	0840      	lsrs	r0, r0, #1
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	4698      	mov	r8, r3
 8001f76:	0016      	movs	r6, r2
 8001f78:	4304      	orrs	r4, r0
 8001f7a:	e6cc      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x54e>
 8001f80:	e082      	b.n	8002088 <__aeabi_dsub+0x654>
 8001f82:	000a      	movs	r2, r1
 8001f84:	4302      	orrs	r2, r0
 8001f86:	d140      	bne.n	800200a <__aeabi_dsub+0x5d6>
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	2500      	movs	r5, #0
 8001f8c:	031b      	lsls	r3, r3, #12
 8001f8e:	e713      	b.n	8001db8 <__aeabi_dsub+0x384>
 8001f90:	074b      	lsls	r3, r1, #29
 8001f92:	08c2      	lsrs	r2, r0, #3
 8001f94:	431a      	orrs	r2, r3
 8001f96:	465d      	mov	r5, fp
 8001f98:	08cb      	lsrs	r3, r1, #3
 8001f9a:	e6c5      	b.n	8001d28 <__aeabi_dsub+0x2f4>
 8001f9c:	464a      	mov	r2, r9
 8001f9e:	1a84      	subs	r4, r0, r2
 8001fa0:	42a0      	cmp	r0, r4
 8001fa2:	4192      	sbcs	r2, r2
 8001fa4:	1acb      	subs	r3, r1, r3
 8001fa6:	4252      	negs	r2, r2
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	4698      	mov	r8, r3
 8001fac:	465d      	mov	r5, fp
 8001fae:	e59e      	b.n	8001aee <__aeabi_dsub+0xba>
 8001fb0:	464a      	mov	r2, r9
 8001fb2:	0759      	lsls	r1, r3, #29
 8001fb4:	08d2      	lsrs	r2, r2, #3
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	e6f9      	b.n	8001db0 <__aeabi_dsub+0x37c>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	1a14      	subs	r4, r2, r0
 8001fc0:	45a1      	cmp	r9, r4
 8001fc2:	4192      	sbcs	r2, r2
 8001fc4:	1a5b      	subs	r3, r3, r1
 8001fc6:	4252      	negs	r2, r2
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	4698      	mov	r8, r3
 8001fcc:	2601      	movs	r6, #1
 8001fce:	e586      	b.n	8001ade <__aeabi_dsub+0xaa>
 8001fd0:	464a      	mov	r2, r9
 8001fd2:	0759      	lsls	r1, r3, #29
 8001fd4:	08d2      	lsrs	r2, r2, #3
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	e6a5      	b.n	8001d28 <__aeabi_dsub+0x2f4>
 8001fdc:	464c      	mov	r4, r9
 8001fde:	4323      	orrs	r3, r4
 8001fe0:	001c      	movs	r4, r3
 8001fe2:	1e63      	subs	r3, r4, #1
 8001fe4:	419c      	sbcs	r4, r3
 8001fe6:	e65b      	b.n	8001ca0 <__aeabi_dsub+0x26c>
 8001fe8:	4665      	mov	r5, ip
 8001fea:	001e      	movs	r6, r3
 8001fec:	3d20      	subs	r5, #32
 8001fee:	40ee      	lsrs	r6, r5
 8001ff0:	2c20      	cmp	r4, #32
 8001ff2:	d005      	beq.n	8002000 <__aeabi_dsub+0x5cc>
 8001ff4:	2540      	movs	r5, #64	; 0x40
 8001ff6:	1b2d      	subs	r5, r5, r4
 8001ff8:	40ab      	lsls	r3, r5
 8001ffa:	464c      	mov	r4, r9
 8001ffc:	431c      	orrs	r4, r3
 8001ffe:	46a2      	mov	sl, r4
 8002000:	4654      	mov	r4, sl
 8002002:	1e63      	subs	r3, r4, #1
 8002004:	419c      	sbcs	r4, r3
 8002006:	4334      	orrs	r4, r6
 8002008:	e77d      	b.n	8001f06 <__aeabi_dsub+0x4d2>
 800200a:	074b      	lsls	r3, r1, #29
 800200c:	08c2      	lsrs	r2, r0, #3
 800200e:	431a      	orrs	r2, r3
 8002010:	465d      	mov	r5, fp
 8002012:	08cb      	lsrs	r3, r1, #3
 8002014:	e6cc      	b.n	8001db0 <__aeabi_dsub+0x37c>
 8002016:	000a      	movs	r2, r1
 8002018:	4302      	orrs	r2, r0
 800201a:	d100      	bne.n	800201e <__aeabi_dsub+0x5ea>
 800201c:	e736      	b.n	8001e8c <__aeabi_dsub+0x458>
 800201e:	074b      	lsls	r3, r1, #29
 8002020:	08c2      	lsrs	r2, r0, #3
 8002022:	431a      	orrs	r2, r3
 8002024:	465d      	mov	r5, fp
 8002026:	08cb      	lsrs	r3, r1, #3
 8002028:	e681      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 800202a:	464a      	mov	r2, r9
 800202c:	1a84      	subs	r4, r0, r2
 800202e:	42a0      	cmp	r0, r4
 8002030:	4192      	sbcs	r2, r2
 8002032:	1acb      	subs	r3, r1, r3
 8002034:	4252      	negs	r2, r2
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	4698      	mov	r8, r3
 800203a:	465d      	mov	r5, fp
 800203c:	2601      	movs	r6, #1
 800203e:	e54e      	b.n	8001ade <__aeabi_dsub+0xaa>
 8002040:	074b      	lsls	r3, r1, #29
 8002042:	08c2      	lsrs	r2, r0, #3
 8002044:	431a      	orrs	r2, r3
 8002046:	08cb      	lsrs	r3, r1, #3
 8002048:	e6b2      	b.n	8001db0 <__aeabi_dsub+0x37c>
 800204a:	464a      	mov	r2, r9
 800204c:	1a14      	subs	r4, r2, r0
 800204e:	45a1      	cmp	r9, r4
 8002050:	4192      	sbcs	r2, r2
 8002052:	1a5f      	subs	r7, r3, r1
 8002054:	4252      	negs	r2, r2
 8002056:	1aba      	subs	r2, r7, r2
 8002058:	4690      	mov	r8, r2
 800205a:	0212      	lsls	r2, r2, #8
 800205c:	d56b      	bpl.n	8002136 <__aeabi_dsub+0x702>
 800205e:	464a      	mov	r2, r9
 8002060:	1a84      	subs	r4, r0, r2
 8002062:	42a0      	cmp	r0, r4
 8002064:	4192      	sbcs	r2, r2
 8002066:	1acb      	subs	r3, r1, r3
 8002068:	4252      	negs	r2, r2
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	4698      	mov	r8, r3
 800206e:	465d      	mov	r5, fp
 8002070:	e564      	b.n	8001b3c <__aeabi_dsub+0x108>
 8002072:	074b      	lsls	r3, r1, #29
 8002074:	08c2      	lsrs	r2, r0, #3
 8002076:	431a      	orrs	r2, r3
 8002078:	465d      	mov	r5, fp
 800207a:	08cb      	lsrs	r3, r1, #3
 800207c:	e698      	b.n	8001db0 <__aeabi_dsub+0x37c>
 800207e:	074b      	lsls	r3, r1, #29
 8002080:	08c2      	lsrs	r2, r0, #3
 8002082:	431a      	orrs	r2, r3
 8002084:	08cb      	lsrs	r3, r1, #3
 8002086:	e64f      	b.n	8001d28 <__aeabi_dsub+0x2f4>
 8002088:	000a      	movs	r2, r1
 800208a:	4302      	orrs	r2, r0
 800208c:	d090      	beq.n	8001fb0 <__aeabi_dsub+0x57c>
 800208e:	464a      	mov	r2, r9
 8002090:	075c      	lsls	r4, r3, #29
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4314      	orrs	r4, r2
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	0312      	lsls	r2, r2, #12
 800209c:	4213      	tst	r3, r2
 800209e:	d008      	beq.n	80020b2 <__aeabi_dsub+0x67e>
 80020a0:	08ce      	lsrs	r6, r1, #3
 80020a2:	4216      	tst	r6, r2
 80020a4:	d105      	bne.n	80020b2 <__aeabi_dsub+0x67e>
 80020a6:	08c0      	lsrs	r0, r0, #3
 80020a8:	0749      	lsls	r1, r1, #29
 80020aa:	4308      	orrs	r0, r1
 80020ac:	0004      	movs	r4, r0
 80020ae:	465d      	mov	r5, fp
 80020b0:	0033      	movs	r3, r6
 80020b2:	0f61      	lsrs	r1, r4, #29
 80020b4:	00e2      	lsls	r2, r4, #3
 80020b6:	0749      	lsls	r1, r1, #29
 80020b8:	08d2      	lsrs	r2, r2, #3
 80020ba:	430a      	orrs	r2, r1
 80020bc:	e678      	b.n	8001db0 <__aeabi_dsub+0x37c>
 80020be:	074b      	lsls	r3, r1, #29
 80020c0:	08c2      	lsrs	r2, r0, #3
 80020c2:	431a      	orrs	r2, r3
 80020c4:	08cb      	lsrs	r3, r1, #3
 80020c6:	e632      	b.n	8001d2e <__aeabi_dsub+0x2fa>
 80020c8:	4448      	add	r0, r9
 80020ca:	185b      	adds	r3, r3, r1
 80020cc:	4548      	cmp	r0, r9
 80020ce:	4192      	sbcs	r2, r2
 80020d0:	4698      	mov	r8, r3
 80020d2:	4252      	negs	r2, r2
 80020d4:	4490      	add	r8, r2
 80020d6:	4643      	mov	r3, r8
 80020d8:	0004      	movs	r4, r0
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	d400      	bmi.n	80020e0 <__aeabi_dsub+0x6ac>
 80020de:	e61a      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 80020e0:	4642      	mov	r2, r8
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <__aeabi_dsub+0x6e8>)
 80020e4:	2601      	movs	r6, #1
 80020e6:	401a      	ands	r2, r3
 80020e8:	4690      	mov	r8, r2
 80020ea:	e614      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 80020ec:	4666      	mov	r6, ip
 80020ee:	001f      	movs	r7, r3
 80020f0:	3e20      	subs	r6, #32
 80020f2:	40f7      	lsrs	r7, r6
 80020f4:	2c20      	cmp	r4, #32
 80020f6:	d005      	beq.n	8002104 <__aeabi_dsub+0x6d0>
 80020f8:	2640      	movs	r6, #64	; 0x40
 80020fa:	1b36      	subs	r6, r6, r4
 80020fc:	40b3      	lsls	r3, r6
 80020fe:	464c      	mov	r4, r9
 8002100:	431c      	orrs	r4, r3
 8002102:	46a2      	mov	sl, r4
 8002104:	4654      	mov	r4, sl
 8002106:	1e63      	subs	r3, r4, #1
 8002108:	419c      	sbcs	r4, r3
 800210a:	433c      	orrs	r4, r7
 800210c:	e5c8      	b.n	8001ca0 <__aeabi_dsub+0x26c>
 800210e:	0011      	movs	r1, r2
 8002110:	2300      	movs	r3, #0
 8002112:	2200      	movs	r2, #0
 8002114:	e532      	b.n	8001b7c <__aeabi_dsub+0x148>
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	000007ff 	.word	0x000007ff
 800211c:	ff7fffff 	.word	0xff7fffff
 8002120:	000007fe 	.word	0x000007fe
 8002124:	464a      	mov	r2, r9
 8002126:	1814      	adds	r4, r2, r0
 8002128:	4284      	cmp	r4, r0
 800212a:	4192      	sbcs	r2, r2
 800212c:	185b      	adds	r3, r3, r1
 800212e:	4698      	mov	r8, r3
 8002130:	4252      	negs	r2, r2
 8002132:	4490      	add	r8, r2
 8002134:	e5e9      	b.n	8001d0a <__aeabi_dsub+0x2d6>
 8002136:	4642      	mov	r2, r8
 8002138:	4322      	orrs	r2, r4
 800213a:	d100      	bne.n	800213e <__aeabi_dsub+0x70a>
 800213c:	e6a6      	b.n	8001e8c <__aeabi_dsub+0x458>
 800213e:	e5ea      	b.n	8001d16 <__aeabi_dsub+0x2e2>
 8002140:	074b      	lsls	r3, r1, #29
 8002142:	08c2      	lsrs	r2, r0, #3
 8002144:	431a      	orrs	r2, r3
 8002146:	08cb      	lsrs	r3, r1, #3
 8002148:	e632      	b.n	8001db0 <__aeabi_dsub+0x37c>
 800214a:	2200      	movs	r2, #0
 800214c:	4901      	ldr	r1, [pc, #4]	; (8002154 <__aeabi_dsub+0x720>)
 800214e:	0013      	movs	r3, r2
 8002150:	e514      	b.n	8001b7c <__aeabi_dsub+0x148>
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	000007ff 	.word	0x000007ff

08002158 <__aeabi_dcmpun>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	0005      	movs	r5, r0
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <__aeabi_dcmpun+0x38>)
 800215e:	030c      	lsls	r4, r1, #12
 8002160:	0016      	movs	r6, r2
 8002162:	0049      	lsls	r1, r1, #1
 8002164:	031a      	lsls	r2, r3, #12
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	0b24      	lsrs	r4, r4, #12
 800216a:	0d49      	lsrs	r1, r1, #21
 800216c:	0b12      	lsrs	r2, r2, #12
 800216e:	0d5b      	lsrs	r3, r3, #21
 8002170:	4281      	cmp	r1, r0
 8002172:	d008      	beq.n	8002186 <__aeabi_dcmpun+0x2e>
 8002174:	4906      	ldr	r1, [pc, #24]	; (8002190 <__aeabi_dcmpun+0x38>)
 8002176:	2000      	movs	r0, #0
 8002178:	428b      	cmp	r3, r1
 800217a:	d103      	bne.n	8002184 <__aeabi_dcmpun+0x2c>
 800217c:	4332      	orrs	r2, r6
 800217e:	0010      	movs	r0, r2
 8002180:	1e42      	subs	r2, r0, #1
 8002182:	4190      	sbcs	r0, r2
 8002184:	bd70      	pop	{r4, r5, r6, pc}
 8002186:	2001      	movs	r0, #1
 8002188:	432c      	orrs	r4, r5
 800218a:	d1fb      	bne.n	8002184 <__aeabi_dcmpun+0x2c>
 800218c:	e7f2      	b.n	8002174 <__aeabi_dcmpun+0x1c>
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	000007ff 	.word	0x000007ff

08002194 <__aeabi_d2iz>:
 8002194:	000a      	movs	r2, r1
 8002196:	b530      	push	{r4, r5, lr}
 8002198:	4c13      	ldr	r4, [pc, #76]	; (80021e8 <__aeabi_d2iz+0x54>)
 800219a:	0053      	lsls	r3, r2, #1
 800219c:	0309      	lsls	r1, r1, #12
 800219e:	0005      	movs	r5, r0
 80021a0:	0b09      	lsrs	r1, r1, #12
 80021a2:	2000      	movs	r0, #0
 80021a4:	0d5b      	lsrs	r3, r3, #21
 80021a6:	0fd2      	lsrs	r2, r2, #31
 80021a8:	42a3      	cmp	r3, r4
 80021aa:	dd04      	ble.n	80021b6 <__aeabi_d2iz+0x22>
 80021ac:	480f      	ldr	r0, [pc, #60]	; (80021ec <__aeabi_d2iz+0x58>)
 80021ae:	4283      	cmp	r3, r0
 80021b0:	dd02      	ble.n	80021b8 <__aeabi_d2iz+0x24>
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <__aeabi_d2iz+0x5c>)
 80021b4:	18d0      	adds	r0, r2, r3
 80021b6:	bd30      	pop	{r4, r5, pc}
 80021b8:	2080      	movs	r0, #128	; 0x80
 80021ba:	0340      	lsls	r0, r0, #13
 80021bc:	4301      	orrs	r1, r0
 80021be:	480d      	ldr	r0, [pc, #52]	; (80021f4 <__aeabi_d2iz+0x60>)
 80021c0:	1ac0      	subs	r0, r0, r3
 80021c2:	281f      	cmp	r0, #31
 80021c4:	dd08      	ble.n	80021d8 <__aeabi_d2iz+0x44>
 80021c6:	480c      	ldr	r0, [pc, #48]	; (80021f8 <__aeabi_d2iz+0x64>)
 80021c8:	1ac3      	subs	r3, r0, r3
 80021ca:	40d9      	lsrs	r1, r3
 80021cc:	000b      	movs	r3, r1
 80021ce:	4258      	negs	r0, r3
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	d1f0      	bne.n	80021b6 <__aeabi_d2iz+0x22>
 80021d4:	0018      	movs	r0, r3
 80021d6:	e7ee      	b.n	80021b6 <__aeabi_d2iz+0x22>
 80021d8:	4c08      	ldr	r4, [pc, #32]	; (80021fc <__aeabi_d2iz+0x68>)
 80021da:	40c5      	lsrs	r5, r0
 80021dc:	46a4      	mov	ip, r4
 80021de:	4463      	add	r3, ip
 80021e0:	4099      	lsls	r1, r3
 80021e2:	000b      	movs	r3, r1
 80021e4:	432b      	orrs	r3, r5
 80021e6:	e7f2      	b.n	80021ce <__aeabi_d2iz+0x3a>
 80021e8:	000003fe 	.word	0x000003fe
 80021ec:	0000041d 	.word	0x0000041d
 80021f0:	7fffffff 	.word	0x7fffffff
 80021f4:	00000433 	.word	0x00000433
 80021f8:	00000413 	.word	0x00000413
 80021fc:	fffffbed 	.word	0xfffffbed

08002200 <__aeabi_i2d>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	2800      	cmp	r0, #0
 8002204:	d016      	beq.n	8002234 <__aeabi_i2d+0x34>
 8002206:	17c3      	asrs	r3, r0, #31
 8002208:	18c5      	adds	r5, r0, r3
 800220a:	405d      	eors	r5, r3
 800220c:	0fc4      	lsrs	r4, r0, #31
 800220e:	0028      	movs	r0, r5
 8002210:	f000 f84c 	bl	80022ac <__clzsi2>
 8002214:	4a11      	ldr	r2, [pc, #68]	; (800225c <__aeabi_i2d+0x5c>)
 8002216:	1a12      	subs	r2, r2, r0
 8002218:	280a      	cmp	r0, #10
 800221a:	dc16      	bgt.n	800224a <__aeabi_i2d+0x4a>
 800221c:	0003      	movs	r3, r0
 800221e:	002e      	movs	r6, r5
 8002220:	3315      	adds	r3, #21
 8002222:	409e      	lsls	r6, r3
 8002224:	230b      	movs	r3, #11
 8002226:	1a18      	subs	r0, r3, r0
 8002228:	40c5      	lsrs	r5, r0
 800222a:	0553      	lsls	r3, r2, #21
 800222c:	032d      	lsls	r5, r5, #12
 800222e:	0b2d      	lsrs	r5, r5, #12
 8002230:	0d5b      	lsrs	r3, r3, #21
 8002232:	e003      	b.n	800223c <__aeabi_i2d+0x3c>
 8002234:	2400      	movs	r4, #0
 8002236:	2300      	movs	r3, #0
 8002238:	2500      	movs	r5, #0
 800223a:	2600      	movs	r6, #0
 800223c:	051b      	lsls	r3, r3, #20
 800223e:	432b      	orrs	r3, r5
 8002240:	07e4      	lsls	r4, r4, #31
 8002242:	4323      	orrs	r3, r4
 8002244:	0030      	movs	r0, r6
 8002246:	0019      	movs	r1, r3
 8002248:	bd70      	pop	{r4, r5, r6, pc}
 800224a:	380b      	subs	r0, #11
 800224c:	4085      	lsls	r5, r0
 800224e:	0553      	lsls	r3, r2, #21
 8002250:	032d      	lsls	r5, r5, #12
 8002252:	2600      	movs	r6, #0
 8002254:	0b2d      	lsrs	r5, r5, #12
 8002256:	0d5b      	lsrs	r3, r3, #21
 8002258:	e7f0      	b.n	800223c <__aeabi_i2d+0x3c>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	0000041e 	.word	0x0000041e

08002260 <__aeabi_ui2d>:
 8002260:	b510      	push	{r4, lr}
 8002262:	1e04      	subs	r4, r0, #0
 8002264:	d010      	beq.n	8002288 <__aeabi_ui2d+0x28>
 8002266:	f000 f821 	bl	80022ac <__clzsi2>
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <__aeabi_ui2d+0x48>)
 800226c:	1a1b      	subs	r3, r3, r0
 800226e:	280a      	cmp	r0, #10
 8002270:	dc11      	bgt.n	8002296 <__aeabi_ui2d+0x36>
 8002272:	220b      	movs	r2, #11
 8002274:	0021      	movs	r1, r4
 8002276:	1a12      	subs	r2, r2, r0
 8002278:	40d1      	lsrs	r1, r2
 800227a:	3015      	adds	r0, #21
 800227c:	030a      	lsls	r2, r1, #12
 800227e:	055b      	lsls	r3, r3, #21
 8002280:	4084      	lsls	r4, r0
 8002282:	0b12      	lsrs	r2, r2, #12
 8002284:	0d5b      	lsrs	r3, r3, #21
 8002286:	e001      	b.n	800228c <__aeabi_ui2d+0x2c>
 8002288:	2300      	movs	r3, #0
 800228a:	2200      	movs	r2, #0
 800228c:	051b      	lsls	r3, r3, #20
 800228e:	4313      	orrs	r3, r2
 8002290:	0020      	movs	r0, r4
 8002292:	0019      	movs	r1, r3
 8002294:	bd10      	pop	{r4, pc}
 8002296:	0022      	movs	r2, r4
 8002298:	380b      	subs	r0, #11
 800229a:	4082      	lsls	r2, r0
 800229c:	055b      	lsls	r3, r3, #21
 800229e:	0312      	lsls	r2, r2, #12
 80022a0:	2400      	movs	r4, #0
 80022a2:	0b12      	lsrs	r2, r2, #12
 80022a4:	0d5b      	lsrs	r3, r3, #21
 80022a6:	e7f1      	b.n	800228c <__aeabi_ui2d+0x2c>
 80022a8:	0000041e 	.word	0x0000041e

080022ac <__clzsi2>:
 80022ac:	211c      	movs	r1, #28
 80022ae:	2301      	movs	r3, #1
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d301      	bcc.n	80022ba <__clzsi2+0xe>
 80022b6:	0c00      	lsrs	r0, r0, #16
 80022b8:	3910      	subs	r1, #16
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	4298      	cmp	r0, r3
 80022be:	d301      	bcc.n	80022c4 <__clzsi2+0x18>
 80022c0:	0a00      	lsrs	r0, r0, #8
 80022c2:	3908      	subs	r1, #8
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	4298      	cmp	r0, r3
 80022c8:	d301      	bcc.n	80022ce <__clzsi2+0x22>
 80022ca:	0900      	lsrs	r0, r0, #4
 80022cc:	3904      	subs	r1, #4
 80022ce:	a202      	add	r2, pc, #8	; (adr r2, 80022d8 <__clzsi2+0x2c>)
 80022d0:	5c10      	ldrb	r0, [r2, r0]
 80022d2:	1840      	adds	r0, r0, r1
 80022d4:	4770      	bx	lr
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	02020304 	.word	0x02020304
 80022dc:	01010101 	.word	0x01010101
	...

080022e8 <__clzdi2>:
 80022e8:	b510      	push	{r4, lr}
 80022ea:	2900      	cmp	r1, #0
 80022ec:	d103      	bne.n	80022f6 <__clzdi2+0xe>
 80022ee:	f7ff ffdd 	bl	80022ac <__clzsi2>
 80022f2:	3020      	adds	r0, #32
 80022f4:	e002      	b.n	80022fc <__clzdi2+0x14>
 80022f6:	1c08      	adds	r0, r1, #0
 80022f8:	f7ff ffd8 	bl	80022ac <__clzsi2>
 80022fc:	bd10      	pop	{r4, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)

08002300 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Callback to be called after HAL_UART_RECEIVE_IT finishes getting data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	// Disable Interrupts
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002308:	201b      	movs	r0, #27
 800230a:	f002 fe28 	bl	8004f5e <HAL_NVIC_DisableIRQ>
	// Set received flag
	cmd_received = 1;
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_UART_RxCpltCallback+0x84>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]
	// Copy the receive buffer into the command buffer.
	memcpy(cmd_data,Rx_data,20);
 8002314:	4a1c      	ldr	r2, [pc, #112]	; (8002388 <HAL_UART_RxCpltCallback+0x88>)
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_UART_RxCpltCallback+0x8c>)
 8002318:	0010      	movs	r0, r2
 800231a:	0019      	movs	r1, r3
 800231c:	2314      	movs	r3, #20
 800231e:	001a      	movs	r2, r3
 8002320:	f009 fd4a 	bl	800bdb8 <memcpy>
	// Save the last command
	// Enable Interrupts
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002324:	201b      	movs	r0, #27
 8002326:	f002 fe0a 	bl	8004f3e <HAL_NVIC_EnableIRQ>
	ret = HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 800232a:	4918      	ldr	r1, [pc, #96]	; (800238c <HAL_UART_RxCpltCallback+0x8c>)
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_UART_RxCpltCallback+0x90>)
 800232e:	2214      	movs	r2, #20
 8002330:	0018      	movs	r0, r3
 8002332:	f007 fd07 	bl	8009d44 <HAL_UART_Receive_DMA>
 8002336:	0003      	movs	r3, r0
 8002338:	001a      	movs	r2, r3
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_UART_RxCpltCallback+0x94>)
 800233c:	701a      	strb	r2, [r3, #0]

	//__HAL_UART_CLEAR_FLAG(JETSON_UART, UART_CLEAR_OREF);
	//__HAL_UART_SEND_REQ(JETSON_UART, UART_RXDATA_FLUSH_REQUEST);

	if (ret != HAL_OK) {
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_UART_RxCpltCallback+0x94>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01a      	beq.n	800237c <HAL_UART_RxCpltCallback+0x7c>
		Error_Handler();
 8002346:	f000 fc21 	bl	8002b8c <Error_Handler>
		HAL_UART_Abort_IT(&huart1);
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_UART_RxCpltCallback+0x98>)
 800234c:	0018      	movs	r0, r3
 800234e:	f007 fd69 	bl	8009e24 <HAL_UART_Abort_IT>
	    SET_BIT(huart1.Instance->CR3, USART_CR3_EIE);
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_UART_RxCpltCallback+0x98>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <HAL_UART_RxCpltCallback+0x98>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	430a      	orrs	r2, r1
 8002360:	609a      	str	r2, [r3, #8]
	    //This flag no longer exists
	    //SET_BIT(huart1.Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
	    HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 8002362:	201b      	movs	r0, #27
 8002364:	f002 fe18 	bl	8004f98 <HAL_NVIC_ClearPendingIRQ>

	    ret = HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 8002368:	4908      	ldr	r1, [pc, #32]	; (800238c <HAL_UART_RxCpltCallback+0x8c>)
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_UART_RxCpltCallback+0x90>)
 800236c:	2214      	movs	r2, #20
 800236e:	0018      	movs	r0, r3
 8002370:	f007 fce8 	bl	8009d44 <HAL_UART_Receive_DMA>
 8002374:	0003      	movs	r3, r0
 8002376:	001a      	movs	r2, r3
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_UART_RxCpltCallback+0x94>)
 800237a:	701a      	strb	r2, [r3, #0]
	}
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000224 	.word	0x20000224
 8002388:	20000404 	.word	0x20000404
 800238c:	200002e0 	.word	0x200002e0
 8002390:	200004f4 	.word	0x200004f4
 8002394:	20000584 	.word	0x20000584
 8002398:	20000418 	.word	0x20000418

0800239c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}

080023ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b0:	f001 ff68 	bl	8004284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b4:	f000 f816 	bl	80023e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023b8:	f000 fb14 	bl	80029e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80023bc:	f000 faec 	bl	8002998 <MX_DMA_Init>
  MX_ADC1_Init();
 80023c0:	f000 f87e 	bl	80024c0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80023c4:	f000 f928 	bl	8002618 <MX_TIM1_Init>
  MX_TIM3_Init();
 80023c8:	f000 f9de 	bl	8002788 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80023cc:	f000 fa48 	bl	8002860 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80023d0:	f000 fa94 	bl	80028fc <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80023d4:	f000 f8e0 	bl	8002598 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  main_preloop();
 80023d8:	f000 fc84 	bl	8002ce4 <main_preloop>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  main_loop();
 80023dc:	f000 fbdc 	bl	8002b98 <main_loop>
 80023e0:	e7fc      	b.n	80023dc <main+0x30>
	...

080023e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b0a7      	sub	sp, #156	; 0x9c
 80023e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ea:	245c      	movs	r4, #92	; 0x5c
 80023ec:	193b      	adds	r3, r7, r4
 80023ee:	0018      	movs	r0, r3
 80023f0:	233c      	movs	r3, #60	; 0x3c
 80023f2:	001a      	movs	r2, r3
 80023f4:	2100      	movs	r1, #0
 80023f6:	f009 fce8 	bl	800bdca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023fa:	234c      	movs	r3, #76	; 0x4c
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	0018      	movs	r0, r3
 8002400:	2310      	movs	r3, #16
 8002402:	001a      	movs	r2, r3
 8002404:	2100      	movs	r1, #0
 8002406:	f009 fce0 	bl	800bdca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800240a:	003b      	movs	r3, r7
 800240c:	0018      	movs	r0, r3
 800240e:	234c      	movs	r3, #76	; 0x4c
 8002410:	001a      	movs	r2, r3
 8002412:	2100      	movs	r1, #0
 8002414:	f009 fcd9 	bl	800bdca <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	0018      	movs	r0, r3
 800241e:	f005 fd83 	bl	8007f28 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002422:	193b      	adds	r3, r7, r4
 8002424:	2202      	movs	r2, #2
 8002426:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002428:	193b      	adds	r3, r7, r4
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	0052      	lsls	r2, r2, #1
 800242e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002430:	193b      	adds	r3, r7, r4
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002436:	193b      	adds	r3, r7, r4
 8002438:	2240      	movs	r2, #64	; 0x40
 800243a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800243c:	193b      	adds	r3, r7, r4
 800243e:	2200      	movs	r2, #0
 8002440:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002442:	193b      	adds	r3, r7, r4
 8002444:	0018      	movs	r0, r3
 8002446:	f005 fdbb 	bl	8007fc0 <HAL_RCC_OscConfig>
 800244a:	1e03      	subs	r3, r0, #0
 800244c:	d001      	beq.n	8002452 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800244e:	f000 fb9d 	bl	8002b8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002452:	214c      	movs	r1, #76	; 0x4c
 8002454:	187b      	adds	r3, r7, r1
 8002456:	2207      	movs	r2, #7
 8002458:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800245a:	187b      	adds	r3, r7, r1
 800245c:	2200      	movs	r2, #0
 800245e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002460:	187b      	adds	r3, r7, r1
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002466:	187b      	adds	r3, r7, r1
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800246c:	187b      	adds	r3, r7, r1
 800246e:	2100      	movs	r1, #0
 8002470:	0018      	movs	r0, r3
 8002472:	f006 f90b 	bl	800868c <HAL_RCC_ClockConfig>
 8002476:	1e03      	subs	r3, r0, #0
 8002478:	d001      	beq.n	800247e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800247a:	f000 fb87 	bl	8002b8c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800247e:	003b      	movs	r3, r7
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <SystemClock_Config+0xd8>)
 8002482:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002484:	003b      	movs	r3, r7
 8002486:	2200      	movs	r2, #0
 8002488:	605a      	str	r2, [r3, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800248a:	003b      	movs	r3, r7
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002490:	003b      	movs	r3, r7
 8002492:	2200      	movs	r2, #0
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002496:	003b      	movs	r3, r7
 8002498:	2200      	movs	r2, #0
 800249a:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800249c:	003b      	movs	r3, r7
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a2:	003b      	movs	r3, r7
 80024a4:	0018      	movs	r0, r3
 80024a6:	f006 fa9b 	bl	80089e0 <HAL_RCCEx_PeriphCLKConfig>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d001      	beq.n	80024b2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80024ae:	f000 fb6d 	bl	8002b8c <Error_Handler>
  }
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b027      	add	sp, #156	; 0x9c
 80024b8:	bd90      	pop	{r4, r7, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	00204043 	.word	0x00204043

080024c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	0018      	movs	r0, r3
 80024ca:	230c      	movs	r3, #12
 80024cc:	001a      	movs	r2, r3
 80024ce:	2100      	movs	r1, #0
 80024d0:	f009 fc7b 	bl	800bdca <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024d4:	4b2d      	ldr	r3, [pc, #180]	; (800258c <MX_ADC1_Init+0xcc>)
 80024d6:	4a2e      	ldr	r2, [pc, #184]	; (8002590 <MX_ADC1_Init+0xd0>)
 80024d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80024da:	4b2c      	ldr	r3, [pc, #176]	; (800258c <MX_ADC1_Init+0xcc>)
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	05d2      	lsls	r2, r2, #23
 80024e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <MX_ADC1_Init+0xcc>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024e8:	4b28      	ldr	r3, [pc, #160]	; (800258c <MX_ADC1_Init+0xcc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024ee:	4b27      	ldr	r3, [pc, #156]	; (800258c <MX_ADC1_Init+0xcc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024f4:	4b25      	ldr	r3, [pc, #148]	; (800258c <MX_ADC1_Init+0xcc>)
 80024f6:	2204      	movs	r2, #4
 80024f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <MX_ADC1_Init+0xcc>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <MX_ADC1_Init+0xcc>)
 8002502:	2200      	movs	r2, #0
 8002504:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002506:	4b21      	ldr	r3, [pc, #132]	; (800258c <MX_ADC1_Init+0xcc>)
 8002508:	2200      	movs	r2, #0
 800250a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <MX_ADC1_Init+0xcc>)
 800250e:	2201      	movs	r2, #1
 8002510:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <MX_ADC1_Init+0xcc>)
 8002514:	2220      	movs	r2, #32
 8002516:	2100      	movs	r1, #0
 8002518:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800251a:	4b1c      	ldr	r3, [pc, #112]	; (800258c <MX_ADC1_Init+0xcc>)
 800251c:	2200      	movs	r2, #0
 800251e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <MX_ADC1_Init+0xcc>)
 8002522:	2200      	movs	r2, #0
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <MX_ADC1_Init+0xcc>)
 8002528:	222c      	movs	r2, #44	; 0x2c
 800252a:	2100      	movs	r1, #0
 800252c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <MX_ADC1_Init+0xcc>)
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <MX_ADC1_Init+0xcc>)
 8002536:	2200      	movs	r2, #0
 8002538:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <MX_ADC1_Init+0xcc>)
 800253c:	2200      	movs	r2, #0
 800253e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <MX_ADC1_Init+0xcc>)
 8002542:	223c      	movs	r2, #60	; 0x3c
 8002544:	2100      	movs	r1, #0
 8002546:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002548:	4b10      	ldr	r3, [pc, #64]	; (800258c <MX_ADC1_Init+0xcc>)
 800254a:	2200      	movs	r2, #0
 800254c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <MX_ADC1_Init+0xcc>)
 8002550:	0018      	movs	r0, r3
 8002552:	f002 f83f 	bl	80045d4 <HAL_ADC_Init>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d001      	beq.n	800255e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800255a:	f000 fb17 	bl	8002b8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <MX_ADC1_Init+0xd4>)
 8002562:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	2200      	movs	r2, #0
 8002568:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002570:	1d3a      	adds	r2, r7, #4
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <MX_ADC1_Init+0xcc>)
 8002574:	0011      	movs	r1, r2
 8002576:	0018      	movs	r0, r3
 8002578:	f002 fa0a 	bl	8004990 <HAL_ADC_ConfigChannel>
 800257c:	1e03      	subs	r3, r0, #0
 800257e:	d001      	beq.n	8002584 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002580:	f000 fb04 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b004      	add	sp, #16
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000340 	.word	0x20000340
 8002590:	40012400 	.word	0x40012400
 8002594:	0c000008 	.word	0x0c000008

08002598 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <MX_I2C2_Init+0x74>)
 800259e:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <MX_I2C2_Init+0x78>)
 80025a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <MX_I2C2_Init+0x74>)
 80025a4:	4a1b      	ldr	r2, [pc, #108]	; (8002614 <MX_I2C2_Init+0x7c>)
 80025a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <MX_I2C2_Init+0x74>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <MX_I2C2_Init+0x74>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b4:	4b15      	ldr	r3, [pc, #84]	; (800260c <MX_I2C2_Init+0x74>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <MX_I2C2_Init+0x74>)
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <MX_I2C2_Init+0x74>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <MX_I2C2_Init+0x74>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <MX_I2C2_Init+0x74>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_I2C2_Init+0x74>)
 80025d4:	0018      	movs	r0, r3
 80025d6:	f003 f9ed 	bl	80059b4 <HAL_I2C_Init>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d001      	beq.n	80025e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80025de:	f000 fad5 	bl	8002b8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <MX_I2C2_Init+0x74>)
 80025e4:	2100      	movs	r1, #0
 80025e6:	0018      	movs	r0, r3
 80025e8:	f005 fc06 	bl	8007df8 <HAL_I2CEx_ConfigAnalogFilter>
 80025ec:	1e03      	subs	r3, r0, #0
 80025ee:	d001      	beq.n	80025f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80025f0:	f000 facc 	bl	8002b8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <MX_I2C2_Init+0x74>)
 80025f6:	2100      	movs	r1, #0
 80025f8:	0018      	movs	r0, r3
 80025fa:	f005 fc49 	bl	8007e90 <HAL_I2CEx_ConfigDigitalFilter>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d001      	beq.n	8002606 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002602:	f000 fac3 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000294 	.word	0x20000294
 8002610:	40005800 	.word	0x40005800
 8002614:	00303d5b 	.word	0x00303d5b

08002618 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b098      	sub	sp, #96	; 0x60
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261e:	2354      	movs	r3, #84	; 0x54
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	0018      	movs	r0, r3
 8002624:	230c      	movs	r3, #12
 8002626:	001a      	movs	r2, r3
 8002628:	2100      	movs	r1, #0
 800262a:	f009 fbce 	bl	800bdca <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800262e:	2338      	movs	r3, #56	; 0x38
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	0018      	movs	r0, r3
 8002634:	231c      	movs	r3, #28
 8002636:	001a      	movs	r2, r3
 8002638:	2100      	movs	r1, #0
 800263a:	f009 fbc6 	bl	800bdca <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	0018      	movs	r0, r3
 8002642:	2334      	movs	r3, #52	; 0x34
 8002644:	001a      	movs	r2, r3
 8002646:	2100      	movs	r1, #0
 8002648:	f009 fbbf 	bl	800bdca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800264c:	4b4b      	ldr	r3, [pc, #300]	; (800277c <MX_TIM1_Init+0x164>)
 800264e:	4a4c      	ldr	r2, [pc, #304]	; (8002780 <MX_TIM1_Init+0x168>)
 8002650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002652:	4b4a      	ldr	r3, [pc, #296]	; (800277c <MX_TIM1_Init+0x164>)
 8002654:	2200      	movs	r2, #0
 8002656:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002658:	4b48      	ldr	r3, [pc, #288]	; (800277c <MX_TIM1_Init+0x164>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <MX_TIM1_Init+0x164>)
 8002660:	4a48      	ldr	r2, [pc, #288]	; (8002784 <MX_TIM1_Init+0x16c>)
 8002662:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002664:	4b45      	ldr	r3, [pc, #276]	; (800277c <MX_TIM1_Init+0x164>)
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800266a:	4b44      	ldr	r3, [pc, #272]	; (800277c <MX_TIM1_Init+0x164>)
 800266c:	2200      	movs	r2, #0
 800266e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002670:	4b42      	ldr	r3, [pc, #264]	; (800277c <MX_TIM1_Init+0x164>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <MX_TIM1_Init+0x164>)
 8002678:	0018      	movs	r0, r3
 800267a:	f006 fbed 	bl	8008e58 <HAL_TIM_PWM_Init>
 800267e:	1e03      	subs	r3, r0, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002682:	f000 fa83 	bl	8002b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002686:	2154      	movs	r1, #84	; 0x54
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800269a:	187a      	adds	r2, r7, r1
 800269c:	4b37      	ldr	r3, [pc, #220]	; (800277c <MX_TIM1_Init+0x164>)
 800269e:	0011      	movs	r1, r2
 80026a0:	0018      	movs	r0, r3
 80026a2:	f007 f875 	bl	8009790 <HAL_TIMEx_MasterConfigSynchronization>
 80026a6:	1e03      	subs	r3, r0, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80026aa:	f000 fa6f 	bl	8002b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ae:	2138      	movs	r1, #56	; 0x38
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	2260      	movs	r2, #96	; 0x60
 80026b4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2200      	movs	r2, #0
 80026ba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2200      	movs	r2, #0
 80026c6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026da:	1879      	adds	r1, r7, r1
 80026dc:	4b27      	ldr	r3, [pc, #156]	; (800277c <MX_TIM1_Init+0x164>)
 80026de:	2200      	movs	r2, #0
 80026e0:	0018      	movs	r0, r3
 80026e2:	f006 fc11 	bl	8008f08 <HAL_TIM_PWM_ConfigChannel>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80026ea:	f000 fa4f 	bl	8002b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026ee:	2338      	movs	r3, #56	; 0x38
 80026f0:	18f9      	adds	r1, r7, r3
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <MX_TIM1_Init+0x164>)
 80026f4:	2204      	movs	r2, #4
 80026f6:	0018      	movs	r0, r3
 80026f8:	f006 fc06 	bl	8008f08 <HAL_TIM_PWM_ConfigChannel>
 80026fc:	1e03      	subs	r3, r0, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8002700:	f000 fa44 	bl	8002b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	2200      	movs	r2, #0
 800270e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2200      	movs	r2, #0
 800271a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	0192      	lsls	r2, r2, #6
 8002728:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	0492      	lsls	r2, r2, #18
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	2200      	movs	r2, #0
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	2200      	movs	r2, #0
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	2200      	movs	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002756:	1d3a      	adds	r2, r7, #4
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <MX_TIM1_Init+0x164>)
 800275a:	0011      	movs	r1, r2
 800275c:	0018      	movs	r0, r3
 800275e:	f007 f88d 	bl	800987c <HAL_TIMEx_ConfigBreakDeadTime>
 8002762:	1e03      	subs	r3, r0, #0
 8002764:	d001      	beq.n	800276a <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8002766:	f000 fa11 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <MX_TIM1_Init+0x164>)
 800276c:	0018      	movs	r0, r3
 800276e:	f000 fdb5 	bl	80032dc <HAL_TIM_MspPostInit>

}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b018      	add	sp, #96	; 0x60
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	200004a8 	.word	0x200004a8
 8002780:	40012c00 	.word	0x40012c00
 8002784:	0000ffff 	.word	0x0000ffff

08002788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278e:	231c      	movs	r3, #28
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	0018      	movs	r0, r3
 8002794:	230c      	movs	r3, #12
 8002796:	001a      	movs	r2, r3
 8002798:	2100      	movs	r1, #0
 800279a:	f009 fb16 	bl	800bdca <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800279e:	003b      	movs	r3, r7
 80027a0:	0018      	movs	r0, r3
 80027a2:	231c      	movs	r3, #28
 80027a4:	001a      	movs	r2, r3
 80027a6:	2100      	movs	r1, #0
 80027a8:	f009 fb0f 	bl	800bdca <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027ac:	4b29      	ldr	r3, [pc, #164]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027ae:	4a2a      	ldr	r2, [pc, #168]	; (8002858 <MX_TIM3_Init+0xd0>)
 80027b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027b2:	4b28      	ldr	r3, [pc, #160]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b8:	4b26      	ldr	r3, [pc, #152]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <MX_TIM3_Init+0xd4>)
 80027c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027d2:	0018      	movs	r0, r3
 80027d4:	f006 fb40 	bl	8008e58 <HAL_TIM_PWM_Init>
 80027d8:	1e03      	subs	r3, r0, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80027dc:	f000 f9d6 	bl	8002b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e0:	211c      	movs	r1, #28
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027ee:	187a      	adds	r2, r7, r1
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <MX_TIM3_Init+0xcc>)
 80027f2:	0011      	movs	r1, r2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f006 ffcb 	bl	8009790 <HAL_TIMEx_MasterConfigSynchronization>
 80027fa:	1e03      	subs	r3, r0, #0
 80027fc:	d001      	beq.n	8002802 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80027fe:	f000 f9c5 	bl	8002b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002802:	003b      	movs	r3, r7
 8002804:	2260      	movs	r2, #96	; 0x60
 8002806:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002808:	003b      	movs	r3, r7
 800280a:	2200      	movs	r2, #0
 800280c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800280e:	003b      	movs	r3, r7
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002814:	003b      	movs	r3, r7
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800281a:	0039      	movs	r1, r7
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <MX_TIM3_Init+0xcc>)
 800281e:	2200      	movs	r2, #0
 8002820:	0018      	movs	r0, r3
 8002822:	f006 fb71 	bl	8008f08 <HAL_TIM_PWM_ConfigChannel>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d001      	beq.n	800282e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800282a:	f000 f9af 	bl	8002b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800282e:	0039      	movs	r1, r7
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <MX_TIM3_Init+0xcc>)
 8002832:	2204      	movs	r2, #4
 8002834:	0018      	movs	r0, r3
 8002836:	f006 fb67 	bl	8008f08 <HAL_TIM_PWM_ConfigChannel>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800283e:	f000 f9a5 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <MX_TIM3_Init+0xcc>)
 8002844:	0018      	movs	r0, r3
 8002846:	f000 fd49 	bl	80032dc <HAL_TIM_MspPostInit>

}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b00a      	add	sp, #40	; 0x28
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	200002f4 	.word	0x200002f4
 8002858:	40000400 	.word	0x40000400
 800285c:	0000ffff 	.word	0x0000ffff

08002860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002866:	4a24      	ldr	r2, [pc, #144]	; (80028f8 <MX_USART1_UART_Init+0x98>)
 8002868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800286a:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 800286c:	2296      	movs	r2, #150	; 0x96
 800286e:	0212      	lsls	r2, r2, #8
 8002870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002878:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002886:	220c      	movs	r2, #12
 8002888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_CTS;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 8002894:	2200      	movs	r2, #0
 8002896:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002898:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 800289a:	2200      	movs	r2, #0
 800289c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028ac:	0018      	movs	r0, r3
 80028ae:	f007 f88b 	bl	80099c8 <HAL_UART_Init>
 80028b2:	1e03      	subs	r3, r0, #0
 80028b4:	d001      	beq.n	80028ba <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80028b6:	f000 f969 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028bc:	2100      	movs	r1, #0
 80028be:	0018      	movs	r0, r3
 80028c0:	f009 f966 	bl	800bb90 <HAL_UARTEx_SetTxFifoThreshold>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d001      	beq.n	80028cc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80028c8:	f000 f960 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028ce:	2100      	movs	r1, #0
 80028d0:	0018      	movs	r0, r3
 80028d2:	f009 f99d 	bl	800bc10 <HAL_UARTEx_SetRxFifoThreshold>
 80028d6:	1e03      	subs	r3, r0, #0
 80028d8:	d001      	beq.n	80028de <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80028da:	f000 f957 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <MX_USART1_UART_Init+0x94>)
 80028e0:	0018      	movs	r0, r3
 80028e2:	f009 f91b 	bl	800bb1c <HAL_UARTEx_DisableFifoMode>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d001      	beq.n	80028ee <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80028ea:	f000 f94f 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000418 	.word	0x20000418
 80028f8:	40013800 	.word	0x40013800

080028fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002900:	4b23      	ldr	r3, [pc, #140]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002902:	4a24      	ldr	r2, [pc, #144]	; (8002994 <MX_USART2_UART_Init+0x98>)
 8002904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002906:	4b22      	ldr	r3, [pc, #136]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002908:	2296      	movs	r2, #150	; 0x96
 800290a:	0212      	lsls	r2, r2, #8
 800290c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <MX_USART2_UART_Init+0x94>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002922:	220c      	movs	r2, #12
 8002924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <MX_USART2_UART_Init+0x94>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002934:	2200      	movs	r2, #0
 8002936:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <MX_USART2_UART_Init+0x94>)
 800293a:	2200      	movs	r2, #0
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002940:	2200      	movs	r2, #0
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002946:	0018      	movs	r0, r3
 8002948:	f007 f83e 	bl	80099c8 <HAL_UART_Init>
 800294c:	1e03      	subs	r3, r0, #0
 800294e:	d001      	beq.n	8002954 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002950:	f000 f91c 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002956:	2100      	movs	r1, #0
 8002958:	0018      	movs	r0, r3
 800295a:	f009 f919 	bl	800bb90 <HAL_UARTEx_SetTxFifoThreshold>
 800295e:	1e03      	subs	r3, r0, #0
 8002960:	d001      	beq.n	8002966 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002962:	f000 f913 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <MX_USART2_UART_Init+0x94>)
 8002968:	2100      	movs	r1, #0
 800296a:	0018      	movs	r0, r3
 800296c:	f009 f950 	bl	800bc10 <HAL_UARTEx_SetRxFifoThreshold>
 8002970:	1e03      	subs	r3, r0, #0
 8002972:	d001      	beq.n	8002978 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002974:	f000 f90a 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <MX_USART2_UART_Init+0x94>)
 800297a:	0018      	movs	r0, r3
 800297c:	f009 f8ce 	bl	800bb1c <HAL_UARTEx_DisableFifoMode>
 8002980:	1e03      	subs	r3, r0, #0
 8002982:	d001      	beq.n	8002988 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002984:	f000 f902 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	200004f4 	.word	0x200004f4
 8002994:	40004400 	.word	0x40004400

08002998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <MX_DMA_Init+0x48>)
 80029a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_DMA_Init+0x48>)
 80029a4:	2101      	movs	r1, #1
 80029a6:	430a      	orrs	r2, r1
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
 80029aa:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <MX_DMA_Init+0x48>)
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	2201      	movs	r2, #1
 80029b0:	4013      	ands	r3, r2
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2009      	movs	r0, #9
 80029bc:	f002 faaa 	bl	8004f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80029c0:	2009      	movs	r0, #9
 80029c2:	f002 fabc 	bl	8004f3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	200a      	movs	r0, #10
 80029cc:	f002 faa2 	bl	8004f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80029d0:	200a      	movs	r0, #10
 80029d2:	f002 fab4 	bl	8004f3e <HAL_NVIC_EnableIRQ>

}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b002      	add	sp, #8
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	40021000 	.word	0x40021000

080029e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b08b      	sub	sp, #44	; 0x2c
 80029e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ea:	2414      	movs	r4, #20
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	0018      	movs	r0, r3
 80029f0:	2314      	movs	r3, #20
 80029f2:	001a      	movs	r2, r3
 80029f4:	2100      	movs	r1, #0
 80029f6:	f009 f9e8 	bl	800bdca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fa:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <MX_GPIO_Init+0x190>)
 80029fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fe:	4b5d      	ldr	r3, [pc, #372]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a00:	2104      	movs	r1, #4
 8002a02:	430a      	orrs	r2, r1
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34
 8002a06:	4b5b      	ldr	r3, [pc, #364]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a12:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a16:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a18:	2120      	movs	r1, #32
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a1e:	4b55      	ldr	r3, [pc, #340]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a22:	2220      	movs	r2, #32
 8002a24:	4013      	ands	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	4b52      	ldr	r3, [pc, #328]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	430a      	orrs	r2, r1
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
 8002a36:	4b4f      	ldr	r3, [pc, #316]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a46:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a48:	2102      	movs	r1, #2
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a4e:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	2202      	movs	r2, #2
 8002a54:	4013      	ands	r3, r2
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a5a:	4b46      	ldr	r3, [pc, #280]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a5e:	4b45      	ldr	r3, [pc, #276]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a60:	2108      	movs	r1, #8
 8002a62:	430a      	orrs	r2, r1
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34
 8002a66:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <MX_GPIO_Init+0x190>)
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HBRIDGE_BWD_Pin|LIMIT_SWITCH_0_Pin, GPIO_PIN_RESET);
 8002a72:	23c0      	movs	r3, #192	; 0xc0
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	4840      	ldr	r0, [pc, #256]	; (8002b78 <MX_GPIO_Init+0x194>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	f002 ff7c 	bl	8005978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, GPIO_PIN_RESET);
 8002a80:	4b3e      	ldr	r3, [pc, #248]	; (8002b7c <MX_GPIO_Init+0x198>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	2102      	movs	r1, #2
 8002a86:	0018      	movs	r0, r3
 8002a88:	f002 ff76 	bl	8005978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIMIT_SWITCH_2_GPIO_Port, LIMIT_SWITCH_2_Pin, GPIO_PIN_RESET);
 8002a8c:	23a0      	movs	r3, #160	; 0xa0
 8002a8e:	05db      	lsls	r3, r3, #23
 8002a90:	2200      	movs	r2, #0
 8002a92:	2101      	movs	r1, #1
 8002a94:	0018      	movs	r0, r3
 8002a96:	f002 ff6f 	bl	8005978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WHITE_LED_Pin|UV_BULB_Pin|RAMAN_LASER_Pin|NICHROME_WIRE_0_Pin
 8002a9a:	4939      	ldr	r1, [pc, #228]	; (8002b80 <MX_GPIO_Init+0x19c>)
 8002a9c:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <MX_GPIO_Init+0x1a0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f002 ff69 	bl	8005978 <HAL_GPIO_WritePin>
                          |AUTON_LED_1_AND_LASER_Pin|AUTON_LED_0_Pin|SERVO_PWM_2_Pin|AUTON_LED_2_AND_UV_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NICHROME_WIRE_1_Pin|NICHROME_WIRE_2_Pin, GPIO_PIN_RESET);
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <MX_GPIO_Init+0x1a4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	210a      	movs	r1, #10
 8002aac:	0018      	movs	r0, r3
 8002aae:	f002 ff63 	bl	8005978 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HBRIDGE_BWD_Pin LIMIT_SWITCH_0_Pin */
  GPIO_InitStruct.Pin = HBRIDGE_BWD_Pin|LIMIT_SWITCH_0_Pin;
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	22c0      	movs	r2, #192	; 0xc0
 8002ab6:	0212      	lsls	r2, r2, #8
 8002ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	2201      	movs	r2, #1
 8002abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	193b      	adds	r3, r7, r4
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002acc:	193b      	adds	r3, r7, r4
 8002ace:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <MX_GPIO_Init+0x194>)
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	0010      	movs	r0, r2
 8002ad4:	f002 fde4 	bl	80056a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_SWITCH_1_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin;
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	2202      	movs	r2, #2
 8002adc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ade:	193b      	adds	r3, r7, r4
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	193b      	adds	r3, r7, r4
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	193b      	adds	r3, r7, r4
 8002aec:	2200      	movs	r2, #0
 8002aee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIMIT_SWITCH_1_GPIO_Port, &GPIO_InitStruct);
 8002af0:	193b      	adds	r3, r7, r4
 8002af2:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <MX_GPIO_Init+0x198>)
 8002af4:	0019      	movs	r1, r3
 8002af6:	0010      	movs	r0, r2
 8002af8:	f002 fdd2 	bl	80056a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_2_Pin;
 8002afc:	193b      	adds	r3, r7, r4
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b02:	193b      	adds	r3, r7, r4
 8002b04:	2201      	movs	r2, #1
 8002b06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	193b      	adds	r3, r7, r4
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	193b      	adds	r3, r7, r4
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIMIT_SWITCH_2_GPIO_Port, &GPIO_InitStruct);
 8002b14:	193a      	adds	r2, r7, r4
 8002b16:	23a0      	movs	r3, #160	; 0xa0
 8002b18:	05db      	lsls	r3, r3, #23
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f002 fdbf 	bl	80056a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WHITE_LED_Pin UV_BULB_Pin RAMAN_LASER_Pin NICHROME_WIRE_0_Pin
                           AUTON_LED_1_AND_LASER_Pin AUTON_LED_0_Pin SERVO_PWM_2_Pin AUTON_LED_2_AND_UV_LED_Pin */
  GPIO_InitStruct.Pin = WHITE_LED_Pin|UV_BULB_Pin|RAMAN_LASER_Pin|NICHROME_WIRE_0_Pin
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <MX_GPIO_Init+0x19c>)
 8002b26:	601a      	str	r2, [r3, #0]
                          |AUTON_LED_1_AND_LASER_Pin|AUTON_LED_0_Pin|SERVO_PWM_2_Pin|AUTON_LED_2_AND_UV_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b28:	193b      	adds	r3, r7, r4
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	193b      	adds	r3, r7, r4
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	193b      	adds	r3, r7, r4
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	193b      	adds	r3, r7, r4
 8002b3c:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <MX_GPIO_Init+0x1a0>)
 8002b3e:	0019      	movs	r1, r3
 8002b40:	0010      	movs	r0, r2
 8002b42:	f002 fdad 	bl	80056a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NICHROME_WIRE_1_Pin NICHROME_WIRE_2_Pin */
  GPIO_InitStruct.Pin = NICHROME_WIRE_1_Pin|NICHROME_WIRE_2_Pin;
 8002b46:	0021      	movs	r1, r4
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	220a      	movs	r2, #10
 8002b4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4e:	187b      	adds	r3, r7, r1
 8002b50:	2201      	movs	r2, #1
 8002b52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <MX_GPIO_Init+0x1a4>)
 8002b64:	0019      	movs	r1, r3
 8002b66:	0010      	movs	r0, r2
 8002b68:	f002 fd9a 	bl	80056a0 <HAL_GPIO_Init>

}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b00b      	add	sp, #44	; 0x2c
 8002b72:	bd90      	pop	{r4, r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	50000800 	.word	0x50000800
 8002b7c:	50001400 	.word	0x50001400
 8002b80:	00003e70 	.word	0x00003e70
 8002b84:	50000400 	.word	0x50000400
 8002b88:	50000c00 	.word	0x50000c00

08002b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b90:	b672      	cpsid	i
}
 8002b92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b94:	e7fe      	b.n	8002b94 <Error_Handler+0x8>
	...

08002b98 <main_loop>:
extern SMBus *i2cBus;
extern Device *triad[3];

#define JETSON_UART &huart2

int main_loop(){
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
	// Read and send all thermistor data over Jetson UART
	send_thermistor_data(thermistors, JETSON_UART);
#endif

	//Disable interrupts
	    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002b9e:	201b      	movs	r0, #27
 8002ba0:	f002 f9dd 	bl	8004f5e <HAL_NVIC_DisableIRQ>
	   	uint8_t message[20];
	   	for(int i = 0; i< 20; ++i){
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
 8002ba8:	e007      	b.n	8002bba <main_loop+0x22>
	   		message[i] = 0;
 8002baa:	003a      	movs	r2, r7
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	18d3      	adds	r3, r2, r3
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
	   	for(int i = 0; i< 20; ++i){
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b13      	cmp	r3, #19
 8002bbe:	ddf4      	ble.n	8002baa <main_loop+0x12>
	   	}
	   	if(cmd_received == 1){
 8002bc0:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <main_loop+0x134>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d10a      	bne.n	8002bde <main_loop+0x46>
	   		cmd_received = 0;
 8002bc8:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <main_loop+0x134>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
	   		memcpy(message,cmd_data,20);
 8002bce:	003a      	movs	r2, r7
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	; (8002cd0 <main_loop+0x138>)
 8002bd2:	0010      	movs	r0, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	2314      	movs	r3, #20
 8002bd8:	001a      	movs	r2, r3
 8002bda:	f009 f8ed 	bl	800bdb8 <memcpy>
	   	}
	   	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bde:	201b      	movs	r0, #27
 8002be0:	f002 f9ad 	bl	8004f3e <HAL_NVIC_EnableIRQ>

#ifdef TRIAD_ENABLE
	// strcpy((char*)buf, "Hello!\r\n");
	// HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	// HAL_Delay(500);
	Channel *channel = new_channel(0, 0);
 8002be4:	2100      	movs	r1, #0
 8002be6:	2000      	movs	r0, #0
 8002be8:	f000 ff5e 	bl	8003aa8 <new_channel>
 8002bec:	0003      	movs	r3, r0
 8002bee:	617b      	str	r3, [r7, #20]

	channel_select(mux, mux->channel_list[SPECTRAL_DEVICES]);
 8002bf0:	4b38      	ldr	r3, [pc, #224]	; (8002cd4 <main_loop+0x13c>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <main_loop+0x13c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	0010      	movs	r0, r2
 8002bfe:	f000 f925 	bl	8002e4c <channel_select>

	for (uint8_t i = 0; i < 3; ++i) {
 8002c02:	231b      	movs	r3, #27
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e04b      	b.n	8002ca4 <main_loop+0x10c>
	  virtual_write(DEV_SEL, triad[i]->dev_register);
 8002c0c:	231b      	movs	r3, #27
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <main_loop+0x140>)
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	58d3      	ldr	r3, [r2, r3]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	204f      	movs	r0, #79	; 0x4f
 8002c1e:	f000 fef5 	bl	8003a0c <virtual_write>
	  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8002c22:	231a      	movs	r3, #26
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e030      	b.n	8002c8e <main_loop+0xf6>
		  channel = triad[i]->channels[j];
 8002c2c:	251b      	movs	r5, #27
 8002c2e:	197b      	adds	r3, r7, r5
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <main_loop+0x140>)
 8002c34:	0092      	lsls	r2, r2, #2
 8002c36:	58d2      	ldr	r2, [r2, r3]
 8002c38:	241a      	movs	r4, #26
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	18d3      	adds	r3, r2, r3
 8002c42:	3304      	adds	r3, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	617b      	str	r3, [r7, #20]
		  channel->color_data = get_decimal(channel->lsb_register, channel->msb_register);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	781a      	ldrb	r2, [r3, #0]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	0019      	movs	r1, r3
 8002c52:	0010      	movs	r0, r2
 8002c54:	f000 fe09 	bl	800386a <get_decimal>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	805a      	strh	r2, [r3, #2]
		  // less complicated way
		  triad_data[(i*CHANNELS) + j] = channel->color_data;
 8002c60:	197b      	adds	r3, r7, r5
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	0013      	movs	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	189b      	adds	r3, r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	001a      	movs	r2, r3
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	18d2      	adds	r2, r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	8859      	ldrh	r1, [r3, #2]
 8002c78:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <main_loop+0x144>)
 8002c7a:	0052      	lsls	r2, r2, #1
 8002c7c:	52d1      	strh	r1, [r2, r3]

		  HAL_Delay(10);
 8002c7e:	200a      	movs	r0, #10
 8002c80:	f001 fb86 	bl	8004390 <HAL_Delay>
	  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8002c84:	193b      	adds	r3, r7, r4
 8002c86:	193a      	adds	r2, r7, r4
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	3201      	adds	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	231a      	movs	r3, #26
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d9c9      	bls.n	8002c2c <main_loop+0x94>
	for (uint8_t i = 0; i < 3; ++i) {
 8002c98:	221b      	movs	r2, #27
 8002c9a:	18bb      	adds	r3, r7, r2
 8002c9c:	18ba      	adds	r2, r7, r2
 8002c9e:	7812      	ldrb	r2, [r2, #0]
 8002ca0:	3201      	adds	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	231b      	movs	r3, #27
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d9ae      	bls.n	8002c0c <main_loop+0x74>
	  }
	}
	send_triad_data(triad_data, &huart2);
 8002cae:	4a0c      	ldr	r2, [pc, #48]	; (8002ce0 <main_loop+0x148>)
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <main_loop+0x144>)
 8002cb2:	0011      	movs	r1, r2
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 ff15 	bl	8003ae4 <send_triad_data>

	HAL_Delay(10);
 8002cba:	200a      	movs	r0, #10
 8002cbc:	f001 fb68 	bl	8004390 <HAL_Delay>
#endif

	return 0;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b008      	add	sp, #32
 8002cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	20000224 	.word	0x20000224
 8002cd0:	20000404 	.word	0x20000404
 8002cd4:	200005b4 	.word	0x200005b4
 8002cd8:	200005fc 	.word	0x200005fc
 8002cdc:	200005b8 	.word	0x200005b8
 8002ce0:	200004f4 	.word	0x200004f4

08002ce4 <main_preloop>:
#include "main.h"
#include "main_loop.h"

#define JETSON_UART &huart2

int main_preloop(){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 8002cea:	4930      	ldr	r1, [pc, #192]	; (8002dac <main_preloop+0xc8>)
 8002cec:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <main_preloop+0xcc>)
 8002cee:	2214      	movs	r2, #20
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f007 f827 	bl	8009d44 <HAL_UART_Receive_DMA>

  mosfetcopy = (char *)malloc(21);
#endif

#ifdef MUX_ENABLE
  	i2cBus = new_smbus(&hi2c2, &huart2);
 8002cf6:	4a2e      	ldr	r2, [pc, #184]	; (8002db0 <main_preloop+0xcc>)
 8002cf8:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <main_preloop+0xd0>)
 8002cfa:	0011      	movs	r1, r2
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 f8b6 	bl	8002e6e <new_smbus>
 8002d02:	0002      	movs	r2, r0
 8002d04:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <main_preloop+0xd4>)
 8002d06:	601a      	str	r2, [r3, #0]
  	disable_DMA(i2cBus);
 8002d08:	4b2b      	ldr	r3, [pc, #172]	; (8002db8 <main_preloop+0xd4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 f8ce 	bl	8002eae <disable_DMA>
  	mux = new_mux(i2cBus);
 8002d12:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <main_preloop+0xd4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 f856 	bl	8002dc8 <new_mux>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <main_preloop+0xd8>)
 8002d20:	601a      	str	r2, [r3, #0]
#ifdef TRIAD_ENABLE

//	add_channel(mux, SPECTRAL_DEVICES);
//	channel_select(mux, mux->channel_list[SPECTRAL_DEVICES]);

	for (int i = 0; i < SPECTRAL_DEVICES; ++i) {
 8002d22:	2300      	movs	r3, #0
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	e00b      	b.n	8002d40 <main_preloop+0x5c>
		add_channel(mux, spectral_channels[i]);
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <main_preloop+0xd8>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <main_preloop+0xdc>)
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	58d3      	ldr	r3, [r2, r3]
 8002d34:	0019      	movs	r1, r3
 8002d36:	f000 f86b 	bl	8002e10 <add_channel>
	for (int i = 0; i < SPECTRAL_DEVICES; ++i) {
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	ddf0      	ble.n	8002d28 <main_preloop+0x44>
	}

	add_channel(mux, SPECTRAL_DEVICES);
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <main_preloop+0xd8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2103      	movs	r1, #3
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 f85f 	bl	8002e10 <add_channel>
	channel_select(mux, mux->channel_list[SPECTRAL_DEVICES]);
 8002d52:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <main_preloop+0xd8>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <main_preloop+0xd8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	0010      	movs	r0, r2
 8002d60:	f000 f874 	bl	8002e4c <channel_select>


	triad[0] = new_device(0x00);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f000 fda3 	bl	80038b0 <new_device>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <main_preloop+0xe0>)
 8002d6e:	601a      	str	r2, [r3, #0]
	triad[1] = new_device(0x01);
 8002d70:	2001      	movs	r0, #1
 8002d72:	f000 fd9d 	bl	80038b0 <new_device>
 8002d76:	0002      	movs	r2, r0
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <main_preloop+0xe0>)
 8002d7a:	605a      	str	r2, [r3, #4]
	triad[2] = new_device(0x02);
 8002d7c:	2002      	movs	r0, #2
 8002d7e:	f000 fd97 	bl	80038b0 <new_device>
 8002d82:	0002      	movs	r2, r0
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <main_preloop+0xe0>)
 8002d86:	609a      	str	r2, [r3, #8]

	virtual_write(0x04, 0x28);
 8002d88:	2128      	movs	r1, #40	; 0x28
 8002d8a:	2004      	movs	r0, #4
 8002d8c:	f000 fe3e 	bl	8003a0c <virtual_write>
	virtual_write(0x04, 0x28);
 8002d90:	2128      	movs	r1, #40	; 0x28
 8002d92:	2004      	movs	r0, #4
 8002d94:	f000 fe3a 	bl	8003a0c <virtual_write>
	virtual_write(0x05, 0xFF);
 8002d98:	21ff      	movs	r1, #255	; 0xff
 8002d9a:	2005      	movs	r0, #5
 8002d9c:	f000 fe36 	bl	8003a0c <virtual_write>

#endif

	return 0;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	200002e0 	.word	0x200002e0
 8002db0:	200004f4 	.word	0x200004f4
 8002db4:	20000294 	.word	0x20000294
 8002db8:	200005ac 	.word	0x200005ac
 8002dbc:	200005b4 	.word	0x200005b4
 8002dc0:	20000020 	.word	0x20000020
 8002dc4:	200005fc 	.word	0x200005fc

08002dc8 <new_mux>:
#include "mux.h"
#include "smbus.h"

int channel_map[8] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };

Mux *new_mux(SMBus *i2cBus) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
    Mux *mux = malloc(sizeof(Mux));
 8002dd0:	2028      	movs	r0, #40	; 0x28
 8002dd2:	f008 ffe7 	bl	800bda4 <malloc>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	60bb      	str	r3, [r7, #8]
    mux->i2cBus = i2cBus;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; ++i) {
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	e009      	b.n	8002dfa <new_mux+0x32>
        mux->channel_list[i] = 0x00;
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	18d3      	adds	r3, r2, r3
 8002dee:	3304      	adds	r3, #4
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; ++i) {
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3301      	adds	r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b07      	cmp	r3, #7
 8002dfe:	ddf2      	ble.n	8002de6 <new_mux+0x1e>
    }
    mux->channels_active = 0;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2200      	movs	r2, #0
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24

    return mux;
 8002e06:	68bb      	ldr	r3, [r7, #8]
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b004      	add	sp, #16
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <add_channel>:

void add_channel(Mux *mux, int channel) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
    if (channel > 7) {
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b07      	cmp	r3, #7
 8002e1e:	dc0f      	bgt.n	8002e40 <add_channel+0x30>
        return;
    }
    mux->channel_list[channel] = channel_map[channel];
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <add_channel+0x38>)
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	0092      	lsls	r2, r2, #2
 8002e26:	58d2      	ldr	r2, [r2, r3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	18cb      	adds	r3, r1, r3
 8002e30:	3304      	adds	r3, #4
 8002e32:	601a      	str	r2, [r3, #0]
    mux->channels_active += 1;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e3e:	e000      	b.n	8002e42 <add_channel+0x32>
        return;
 8002e40:	46c0      	nop			; (mov r8, r8)
}
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000000 	.word	0x20000000

08002e4c <channel_select>:

void channel_select(Mux *mux, int channel){
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
    write_byte_data(mux->i2cBus, I2C_MUX_ADDRESS, MUX_CMD, channel);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	22cc      	movs	r2, #204	; 0xcc
 8002e60:	2170      	movs	r1, #112	; 0x70
 8002e62:	f000 f8aa 	bl	8002fba <write_byte_data>
}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b002      	add	sp, #8
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <new_smbus>:
#include "smbus.h"


SMBus *new_smbus(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
    SMBus *smbus = malloc(sizeof(SMBus));
 8002e78:	2028      	movs	r0, #40	; 0x28
 8002e7a:	f008 ff93 	bl	800bda4 <malloc>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	60fb      	str	r3, [r7, #12]
    smbus->i2c = hi2c;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	601a      	str	r2, [r3, #0]
    smbus->uart = huart;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
    smbus->DMA = TRUE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2227      	movs	r2, #39	; 0x27
 8002e92:	2101      	movs	r1, #1
 8002e94:	5499      	strb	r1, [r3, r2]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3309      	adds	r3, #9
 8002e9a:	221e      	movs	r2, #30
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f008 ff93 	bl	800bdca <memset>

    return smbus;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b004      	add	sp, #16
 8002eac:	bd80      	pop	{r7, pc}

08002eae <disable_DMA>:

void disable_DMA(SMBus *smbus) {
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
    smbus->DMA = FALSE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2227      	movs	r2, #39	; 0x27
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <read_byte_data>:
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
    }
    _check_error(smbus);
}

long read_byte_data(SMBus *smbus, uint8_t addr, char cmd) {
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af02      	add	r7, sp, #8
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	0008      	movs	r0, r1
 8002ed0:	0011      	movs	r1, r2
 8002ed2:	1cfb      	adds	r3, r7, #3
 8002ed4:	1c02      	adds	r2, r0, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	1cbb      	adds	r3, r7, #2
 8002eda:	1c0a      	adds	r2, r1, #0
 8002edc:	701a      	strb	r2, [r3, #0]
    //transmits the address to read from
    smbus->buf[0] = cmd;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	1cba      	adds	r2, r7, #2
 8002ee2:	7812      	ldrb	r2, [r2, #0]
 8002ee4:	725a      	strb	r2, [r3, #9]
    if (!smbus->DMA) {
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2227      	movs	r2, #39	; 0x27
 8002eea:	5c9b      	ldrb	r3, [r3, r2]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d114      	bne.n	8002f1a <read_byte_data+0x54>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, 1000);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	1cfb      	adds	r3, r7, #3
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	18db      	adds	r3, r3, r3
 8002efc:	b299      	uxth	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3309      	adds	r3, #9
 8002f02:	001a      	movs	r2, r3
 8002f04:	23fa      	movs	r3, #250	; 0xfa
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f002 fde8 	bl	8005ae0 <HAL_I2C_Master_Transmit>
 8002f10:	0003      	movs	r3, r0
 8002f12:	001a      	movs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	721a      	strb	r2, [r3, #8]
 8002f18:	e010      	b.n	8002f3c <read_byte_data+0x76>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	1cfb      	adds	r3, r7, #3
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	18db      	adds	r3, r3, r3
 8002f26:	b299      	uxth	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3309      	adds	r3, #9
 8002f2c:	001a      	movs	r2, r3
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f002 ffe6 	bl	8005f00 <HAL_I2C_Master_Transmit_DMA>
 8002f34:	0003      	movs	r3, r0
 8002f36:	001a      	movs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 f886 	bl	8003050 <_check_error>
    //reads from address sent above
    if (!smbus->DMA) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2227      	movs	r2, #39	; 0x27
 8002f48:	5c9b      	ldrb	r3, [r3, r2]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d117      	bne.n	8002f7e <read_byte_data+0xb8>
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 1, 1000);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	1cfb      	adds	r3, r7, #3
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	b21b      	sxth	r3, r3
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	b21b      	sxth	r3, r3
 8002f60:	b299      	uxth	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3309      	adds	r3, #9
 8002f66:	001a      	movs	r2, r3
 8002f68:	23fa      	movs	r3, #250	; 0xfa
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f002 febe 	bl	8005cf0 <HAL_I2C_Master_Receive>
 8002f74:	0003      	movs	r3, r0
 8002f76:	001a      	movs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	721a      	strb	r2, [r3, #8]
 8002f7c:	e013      	b.n	8002fa6 <read_byte_data+0xe0>
    }
    else {
        smbus->ret = HAL_I2C_Master_Receive_DMA(smbus->i2c, (addr << 1) | 1, smbus->buf, 1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	1cfb      	adds	r3, r7, #3
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b21b      	sxth	r3, r3
 8002f90:	b299      	uxth	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3309      	adds	r3, #9
 8002f96:	001a      	movs	r2, r3
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f003 f8b7 	bl	800610c <HAL_I2C_Master_Receive_DMA>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 f851 	bl	8003050 <_check_error>
    return smbus->buf[0];
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7a5b      	ldrb	r3, [r3, #9]
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b002      	add	sp, #8
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <write_byte_data>:

void write_byte_data(SMBus *smbus, uint8_t addr, char cmd, uint8_t data) {
 8002fba:	b590      	push	{r4, r7, lr}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af02      	add	r7, sp, #8
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	000c      	movs	r4, r1
 8002fc4:	0010      	movs	r0, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	1cfb      	adds	r3, r7, #3
 8002fca:	1c22      	adds	r2, r4, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
 8002fce:	1cbb      	adds	r3, r7, #2
 8002fd0:	1c02      	adds	r2, r0, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	1c7b      	adds	r3, r7, #1
 8002fd6:	1c0a      	adds	r2, r1, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
    smbus->buf[0] = cmd;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	1cba      	adds	r2, r7, #2
 8002fde:	7812      	ldrb	r2, [r2, #0]
 8002fe0:	725a      	strb	r2, [r3, #9]
    smbus->buf[1] = data;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	1c7a      	adds	r2, r7, #1
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	729a      	strb	r2, [r3, #10]

    //SMBUS docs first byte is cmd to write, second is data
    if (!smbus->DMA) {
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2227      	movs	r2, #39	; 0x27
 8002fee:	5c9b      	ldrb	r3, [r3, r2]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d114      	bne.n	800301e <write_byte_data+0x64>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 2, 1000);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	1cfb      	adds	r3, r7, #3
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	18db      	adds	r3, r3, r3
 8003000:	b299      	uxth	r1, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3309      	adds	r3, #9
 8003006:	001a      	movs	r2, r3
 8003008:	23fa      	movs	r3, #250	; 0xfa
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	2302      	movs	r3, #2
 8003010:	f002 fd66 	bl	8005ae0 <HAL_I2C_Master_Transmit>
 8003014:	0003      	movs	r3, r0
 8003016:	001a      	movs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	721a      	strb	r2, [r3, #8]
 800301c:	e010      	b.n	8003040 <write_byte_data+0x86>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 2);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	1cfb      	adds	r3, r7, #3
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	18db      	adds	r3, r3, r3
 800302a:	b299      	uxth	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3309      	adds	r3, #9
 8003030:	001a      	movs	r2, r3
 8003032:	2302      	movs	r3, #2
 8003034:	f002 ff64 	bl	8005f00 <HAL_I2C_Master_Transmit_DMA>
 8003038:	0003      	movs	r3, r0
 800303a:	001a      	movs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f804 	bl	8003050 <_check_error>
}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	b003      	add	sp, #12
 800304e:	bd90      	pop	{r4, r7, pc}

08003050 <_check_error>:
    }
    
    _check_error(smbus);
}

int _check_error(SMBus *smbus) {
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
    if (smbus->ret != HAL_OK) {
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7a1b      	ldrb	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <_check_error+0x52>
        strcpy((char*)smbus->buf, "Err \r\n");
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3309      	adds	r3, #9
 8003064:	001a      	movs	r2, r3
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <_check_error+0x5c>)
 8003068:	0010      	movs	r0, r2
 800306a:	0019      	movs	r1, r3
 800306c:	2307      	movs	r3, #7
 800306e:	001a      	movs	r2, r3
 8003070:	f008 fea2 	bl	800bdb8 <memcpy>

        HAL_UART_Transmit(smbus->uart, smbus->buf, strlen((char*)smbus->buf), 1000);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685c      	ldr	r4, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3309      	adds	r3, #9
 800307c:	001d      	movs	r5, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3309      	adds	r3, #9
 8003082:	0018      	movs	r0, r3
 8003084:	f7fd f83e 	bl	8000104 <strlen>
 8003088:	0003      	movs	r3, r0
 800308a:	b29a      	uxth	r2, r3
 800308c:	23fa      	movs	r3, #250	; 0xfa
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	0029      	movs	r1, r5
 8003092:	0020      	movs	r0, r4
 8003094:	f006 fcee 	bl	8009a74 <HAL_UART_Transmit>
        HAL_Delay(10);
 8003098:	200a      	movs	r0, #10
 800309a:	f001 f979 	bl	8004390 <HAL_Delay>
        return FALSE;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <_check_error+0x54>
    }
    return TRUE;
 80030a2:	2301      	movs	r3, #1
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bdb0      	pop	{r4, r5, r7, pc}
 80030ac:	0800ec68 	.word	0x0800ec68

080030b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_MspInit+0x4c>)
 80030b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_MspInit+0x4c>)
 80030bc:	2101      	movs	r1, #1
 80030be:	430a      	orrs	r2, r1
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <HAL_MspInit+0x4c>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2201      	movs	r2, #1
 80030c8:	4013      	ands	r3, r2
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_MspInit+0x4c>)
 80030d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_MspInit+0x4c>)
 80030d4:	2180      	movs	r1, #128	; 0x80
 80030d6:	0549      	lsls	r1, r1, #21
 80030d8:	430a      	orrs	r2, r1
 80030da:	63da      	str	r2, [r3, #60]	; 0x3c
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <HAL_MspInit+0x4c>)
 80030de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	055b      	lsls	r3, r3, #21
 80030e4:	4013      	ands	r3, r2
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80030ea:	23c0      	movs	r3, #192	; 0xc0
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	0018      	movs	r0, r3
 80030f0:	f001 f972 	bl	80043d8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000

08003100 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b08b      	sub	sp, #44	; 0x2c
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	2414      	movs	r4, #20
 800310a:	193b      	adds	r3, r7, r4
 800310c:	0018      	movs	r0, r3
 800310e:	2314      	movs	r3, #20
 8003110:	001a      	movs	r2, r3
 8003112:	2100      	movs	r1, #0
 8003114:	f008 fe59 	bl	800bdca <memset>
  if(hadc->Instance==ADC1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a18      	ldr	r2, [pc, #96]	; (8003180 <HAL_ADC_MspInit+0x80>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d129      	bne.n	8003176 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <HAL_ADC_MspInit+0x84>)
 8003124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003126:	4b17      	ldr	r3, [pc, #92]	; (8003184 <HAL_ADC_MspInit+0x84>)
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	0349      	lsls	r1, r1, #13
 800312c:	430a      	orrs	r2, r1
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <HAL_ADC_MspInit+0x84>)
 8003132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	035b      	lsls	r3, r3, #13
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_ADC_MspInit+0x84>)
 8003140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <HAL_ADC_MspInit+0x84>)
 8003144:	2101      	movs	r1, #1
 8003146:	430a      	orrs	r2, r1
 8003148:	635a      	str	r2, [r3, #52]	; 0x34
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <HAL_ADC_MspInit+0x84>)
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	2201      	movs	r2, #1
 8003150:	4013      	ands	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = THERMISTOR_1_Pin|THERMISTOR_2_Pin|THERMISTOR_0_Pin;
 8003156:	193b      	adds	r3, r7, r4
 8003158:	2238      	movs	r2, #56	; 0x38
 800315a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800315c:	193b      	adds	r3, r7, r4
 800315e:	2203      	movs	r2, #3
 8003160:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	193b      	adds	r3, r7, r4
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003168:	193a      	adds	r2, r7, r4
 800316a:	23a0      	movs	r3, #160	; 0xa0
 800316c:	05db      	lsls	r3, r3, #23
 800316e:	0011      	movs	r1, r2
 8003170:	0018      	movs	r0, r3
 8003172:	f002 fa95 	bl	80056a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	46bd      	mov	sp, r7
 800317a:	b00b      	add	sp, #44	; 0x2c
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	40012400 	.word	0x40012400
 8003184:	40021000 	.word	0x40021000

08003188 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b08b      	sub	sp, #44	; 0x2c
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	2414      	movs	r4, #20
 8003192:	193b      	adds	r3, r7, r4
 8003194:	0018      	movs	r0, r3
 8003196:	2314      	movs	r3, #20
 8003198:	001a      	movs	r2, r3
 800319a:	2100      	movs	r1, #0
 800319c:	f008 fe15 	bl	800bdca <memset>
  if(hi2c->Instance==I2C2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a30      	ldr	r2, [pc, #192]	; (8003268 <HAL_I2C_MspInit+0xe0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d15a      	bne.n	8003260 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031aa:	4b30      	ldr	r3, [pc, #192]	; (800326c <HAL_I2C_MspInit+0xe4>)
 80031ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ae:	4b2f      	ldr	r3, [pc, #188]	; (800326c <HAL_I2C_MspInit+0xe4>)
 80031b0:	2101      	movs	r1, #1
 80031b2:	430a      	orrs	r2, r1
 80031b4:	635a      	str	r2, [r3, #52]	; 0x34
 80031b6:	4b2d      	ldr	r3, [pc, #180]	; (800326c <HAL_I2C_MspInit+0xe4>)
 80031b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ba:	2201      	movs	r2, #1
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c2:	4b2a      	ldr	r3, [pc, #168]	; (800326c <HAL_I2C_MspInit+0xe4>)
 80031c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c6:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_I2C_MspInit+0xe4>)
 80031c8:	2102      	movs	r1, #2
 80031ca:	430a      	orrs	r2, r1
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34
 80031ce:	4b27      	ldr	r3, [pc, #156]	; (800326c <HAL_I2C_MspInit+0xe4>)
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	2202      	movs	r2, #2
 80031d4:	4013      	ands	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA7     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MUX_SCL_Pin;
 80031da:	193b      	adds	r3, r7, r4
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031e0:	193b      	adds	r3, r7, r4
 80031e2:	2212      	movs	r2, #18
 80031e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	2200      	movs	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	193b      	adds	r3, r7, r4
 80031ee:	2200      	movs	r2, #0
 80031f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 80031f2:	193b      	adds	r3, r7, r4
 80031f4:	2208      	movs	r2, #8
 80031f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MUX_SCL_GPIO_Port, &GPIO_InitStruct);
 80031f8:	193a      	adds	r2, r7, r4
 80031fa:	23a0      	movs	r3, #160	; 0xa0
 80031fc:	05db      	lsls	r3, r3, #23
 80031fe:	0011      	movs	r1, r2
 8003200:	0018      	movs	r0, r3
 8003202:	f002 fa4d 	bl	80056a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MUX_SDA_Pin;
 8003206:	0021      	movs	r1, r4
 8003208:	187b      	adds	r3, r7, r1
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	01d2      	lsls	r2, r2, #7
 800320e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003210:	187b      	adds	r3, r7, r1
 8003212:	2212      	movs	r2, #18
 8003214:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	187b      	adds	r3, r7, r1
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003222:	187b      	adds	r3, r7, r1
 8003224:	2206      	movs	r2, #6
 8003226:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MUX_SDA_GPIO_Port, &GPIO_InitStruct);
 8003228:	187b      	adds	r3, r7, r1
 800322a:	4a11      	ldr	r2, [pc, #68]	; (8003270 <HAL_I2C_MspInit+0xe8>)
 800322c:	0019      	movs	r1, r3
 800322e:	0010      	movs	r0, r2
 8003230:	f002 fa36 	bl	80056a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <HAL_I2C_MspInit+0xe4>)
 8003236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <HAL_I2C_MspInit+0xe4>)
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	03c9      	lsls	r1, r1, #15
 800323e:	430a      	orrs	r2, r1
 8003240:	63da      	str	r2, [r3, #60]	; 0x3c
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <HAL_I2C_MspInit+0xe4>)
 8003244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	03db      	lsls	r3, r3, #15
 800324a:	4013      	ands	r3, r2
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_3_IRQn, 0, 0);
 8003250:	2200      	movs	r2, #0
 8003252:	2100      	movs	r1, #0
 8003254:	2018      	movs	r0, #24
 8003256:	f001 fe5d 	bl	8004f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_3_IRQn);
 800325a:	2018      	movs	r0, #24
 800325c:	f001 fe6f 	bl	8004f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b00b      	add	sp, #44	; 0x2c
 8003266:	bd90      	pop	{r4, r7, pc}
 8003268:	40005800 	.word	0x40005800
 800326c:	40021000 	.word	0x40021000
 8003270:	50000400 	.word	0x50000400

08003274 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <HAL_TIM_PWM_MspInit+0x5c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10e      	bne.n	80032a4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <HAL_TIM_PWM_MspInit+0x60>)
 8003288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_TIM_PWM_MspInit+0x60>)
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	0109      	lsls	r1, r1, #4
 8003290:	430a      	orrs	r2, r1
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <HAL_TIM_PWM_MspInit+0x60>)
 8003296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	4013      	ands	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032a2:	e010      	b.n	80032c6 <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM3)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0b      	ldr	r2, [pc, #44]	; (80032d8 <HAL_TIM_PWM_MspInit+0x64>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d10b      	bne.n	80032c6 <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_TIM_PWM_MspInit+0x60>)
 80032b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_TIM_PWM_MspInit+0x60>)
 80032b4:	2102      	movs	r1, #2
 80032b6:	430a      	orrs	r2, r1
 80032b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_TIM_PWM_MspInit+0x60>)
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	2202      	movs	r2, #2
 80032c0:	4013      	ands	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b004      	add	sp, #16
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	40012c00 	.word	0x40012c00
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40000400 	.word	0x40000400

080032dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b08d      	sub	sp, #52	; 0x34
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e4:	241c      	movs	r4, #28
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	0018      	movs	r0, r3
 80032ea:	2314      	movs	r3, #20
 80032ec:	001a      	movs	r2, r3
 80032ee:	2100      	movs	r1, #0
 80032f0:	f008 fd6b 	bl	800bdca <memset>
  if(htim->Instance==TIM1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a4b      	ldr	r2, [pc, #300]	; (8003428 <HAL_TIM_MspPostInit+0x14c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d145      	bne.n	800338a <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fe:	4b4b      	ldr	r3, [pc, #300]	; (800342c <HAL_TIM_MspPostInit+0x150>)
 8003300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003302:	4b4a      	ldr	r3, [pc, #296]	; (800342c <HAL_TIM_MspPostInit+0x150>)
 8003304:	2101      	movs	r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	635a      	str	r2, [r3, #52]	; 0x34
 800330a:	4b48      	ldr	r3, [pc, #288]	; (800342c <HAL_TIM_MspPostInit+0x150>)
 800330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330e:	2201      	movs	r2, #1
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003316:	4b45      	ldr	r3, [pc, #276]	; (800342c <HAL_TIM_MspPostInit+0x150>)
 8003318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800331a:	4b44      	ldr	r3, [pc, #272]	; (800342c <HAL_TIM_MspPostInit+0x150>)
 800331c:	2102      	movs	r1, #2
 800331e:	430a      	orrs	r2, r1
 8003320:	635a      	str	r2, [r3, #52]	; 0x34
 8003322:	4b42      	ldr	r3, [pc, #264]	; (800342c <HAL_TIM_MspPostInit+0x150>)
 8003324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003326:	2202      	movs	r2, #2
 8003328:	4013      	ands	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_0_Pin;
 800332e:	193b      	adds	r3, r7, r4
 8003330:	2280      	movs	r2, #128	; 0x80
 8003332:	0052      	lsls	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003336:	193b      	adds	r3, r7, r4
 8003338:	2202      	movs	r2, #2
 800333a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	193b      	adds	r3, r7, r4
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003342:	193b      	adds	r3, r7, r4
 8003344:	2200      	movs	r2, #0
 8003346:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003348:	193b      	adds	r3, r7, r4
 800334a:	2202      	movs	r2, #2
 800334c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_0_GPIO_Port, &GPIO_InitStruct);
 800334e:	193a      	adds	r2, r7, r4
 8003350:	23a0      	movs	r3, #160	; 0xa0
 8003352:	05db      	lsls	r3, r3, #23
 8003354:	0011      	movs	r1, r2
 8003356:	0018      	movs	r0, r3
 8003358:	f002 f9a2 	bl	80056a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 800335c:	0021      	movs	r1, r4
 800335e:	187b      	adds	r3, r7, r1
 8003360:	2208      	movs	r2, #8
 8003362:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003364:	187b      	adds	r3, r7, r1
 8003366:	2202      	movs	r2, #2
 8003368:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	187b      	adds	r3, r7, r1
 800336c:	2200      	movs	r2, #0
 800336e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003370:	187b      	adds	r3, r7, r1
 8003372:	2200      	movs	r2, #0
 8003374:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003376:	187b      	adds	r3, r7, r1
 8003378:	2201      	movs	r2, #1
 800337a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 800337c:	187b      	adds	r3, r7, r1
 800337e:	4a2c      	ldr	r2, [pc, #176]	; (8003430 <HAL_TIM_MspPostInit+0x154>)
 8003380:	0019      	movs	r1, r3
 8003382:	0010      	movs	r0, r2
 8003384:	f002 f98c 	bl	80056a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003388:	e049      	b.n	800341e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM3)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a29      	ldr	r2, [pc, #164]	; (8003434 <HAL_TIM_MspPostInit+0x158>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d144      	bne.n	800341e <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <HAL_TIM_MspPostInit+0x150>)
 8003396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003398:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_TIM_MspPostInit+0x150>)
 800339a:	2101      	movs	r1, #1
 800339c:	430a      	orrs	r2, r1
 800339e:	635a      	str	r2, [r3, #52]	; 0x34
 80033a0:	4b22      	ldr	r3, [pc, #136]	; (800342c <HAL_TIM_MspPostInit+0x150>)
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	2201      	movs	r2, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ac:	4b1f      	ldr	r3, [pc, #124]	; (800342c <HAL_TIM_MspPostInit+0x150>)
 80033ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b0:	4b1e      	ldr	r3, [pc, #120]	; (800342c <HAL_TIM_MspPostInit+0x150>)
 80033b2:	2104      	movs	r1, #4
 80033b4:	430a      	orrs	r2, r1
 80033b6:	635a      	str	r2, [r3, #52]	; 0x34
 80033b8:	4b1c      	ldr	r3, [pc, #112]	; (800342c <HAL_TIM_MspPostInit+0x150>)
 80033ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033bc:	2204      	movs	r2, #4
 80033be:	4013      	ands	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HBRIDGE_PWM_Pin;
 80033c4:	241c      	movs	r4, #28
 80033c6:	193b      	adds	r3, r7, r4
 80033c8:	2240      	movs	r2, #64	; 0x40
 80033ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	2202      	movs	r2, #2
 80033d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	193b      	adds	r3, r7, r4
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d8:	193b      	adds	r3, r7, r4
 80033da:	2200      	movs	r2, #0
 80033dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80033de:	193b      	adds	r3, r7, r4
 80033e0:	2201      	movs	r2, #1
 80033e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HBRIDGE_PWM_GPIO_Port, &GPIO_InitStruct);
 80033e4:	193a      	adds	r2, r7, r4
 80033e6:	23a0      	movs	r3, #160	; 0xa0
 80033e8:	05db      	lsls	r3, r3, #23
 80033ea:	0011      	movs	r1, r2
 80033ec:	0018      	movs	r0, r3
 80033ee:	f002 f957 	bl	80056a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HBRIDGE_FWD_Pin;
 80033f2:	0021      	movs	r1, r4
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	187b      	adds	r3, r7, r1
 80033fc:	2202      	movs	r2, #2
 80033fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	187b      	adds	r3, r7, r1
 8003402:	2200      	movs	r2, #0
 8003404:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003406:	187b      	adds	r3, r7, r1
 8003408:	2200      	movs	r2, #0
 800340a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800340c:	187b      	adds	r3, r7, r1
 800340e:	2201      	movs	r2, #1
 8003410:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HBRIDGE_FWD_GPIO_Port, &GPIO_InitStruct);
 8003412:	187b      	adds	r3, r7, r1
 8003414:	4a08      	ldr	r2, [pc, #32]	; (8003438 <HAL_TIM_MspPostInit+0x15c>)
 8003416:	0019      	movs	r1, r3
 8003418:	0010      	movs	r0, r2
 800341a:	f002 f941 	bl	80056a0 <HAL_GPIO_Init>
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b00d      	add	sp, #52	; 0x34
 8003424:	bd90      	pop	{r4, r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40021000 	.word	0x40021000
 8003430:	50000400 	.word	0x50000400
 8003434:	40000400 	.word	0x40000400
 8003438:	50000800 	.word	0x50000800

0800343c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b08d      	sub	sp, #52	; 0x34
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003444:	241c      	movs	r4, #28
 8003446:	193b      	adds	r3, r7, r4
 8003448:	0018      	movs	r0, r3
 800344a:	2314      	movs	r3, #20
 800344c:	001a      	movs	r2, r3
 800344e:	2100      	movs	r1, #0
 8003450:	f008 fcbb 	bl	800bdca <memset>
  if(huart->Instance==USART1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a70      	ldr	r2, [pc, #448]	; (800361c <HAL_UART_MspInit+0x1e0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d172      	bne.n	8003544 <HAL_UART_MspInit+0x108>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800345e:	4b70      	ldr	r3, [pc, #448]	; (8003620 <HAL_UART_MspInit+0x1e4>)
 8003460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003462:	4b6f      	ldr	r3, [pc, #444]	; (8003620 <HAL_UART_MspInit+0x1e4>)
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	01c9      	lsls	r1, r1, #7
 8003468:	430a      	orrs	r2, r1
 800346a:	641a      	str	r2, [r3, #64]	; 0x40
 800346c:	4b6c      	ldr	r3, [pc, #432]	; (8003620 <HAL_UART_MspInit+0x1e4>)
 800346e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	01db      	lsls	r3, r3, #7
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347a:	4b69      	ldr	r3, [pc, #420]	; (8003620 <HAL_UART_MspInit+0x1e4>)
 800347c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800347e:	4b68      	ldr	r3, [pc, #416]	; (8003620 <HAL_UART_MspInit+0x1e4>)
 8003480:	2101      	movs	r1, #1
 8003482:	430a      	orrs	r2, r1
 8003484:	635a      	str	r2, [r3, #52]	; 0x34
 8003486:	4b66      	ldr	r3, [pc, #408]	; (8003620 <HAL_UART_MspInit+0x1e4>)
 8003488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348a:	2201      	movs	r2, #1
 800348c:	4013      	ands	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11 [PA9]     ------> USART1_CTS
    */
    GPIO_InitStruct.Pin = JETSON_UART_TX_Pin|JETSON_UART_RX_Pin;
 8003492:	193b      	adds	r3, r7, r4
 8003494:	22c0      	movs	r2, #192	; 0xc0
 8003496:	00d2      	lsls	r2, r2, #3
 8003498:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349a:	193b      	adds	r3, r7, r4
 800349c:	2202      	movs	r2, #2
 800349e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034a6:	193b      	adds	r3, r7, r4
 80034a8:	2202      	movs	r2, #2
 80034aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80034ac:	193b      	adds	r3, r7, r4
 80034ae:	2201      	movs	r2, #1
 80034b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b2:	193a      	adds	r2, r7, r4
 80034b4:	23a0      	movs	r3, #160	; 0xa0
 80034b6:	05db      	lsls	r3, r3, #23
 80034b8:	0011      	movs	r1, r2
 80034ba:	0018      	movs	r0, r3
 80034bc:	f002 f8f0 	bl	80056a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JETSON_UART_CTS_Pin;
 80034c0:	0021      	movs	r1, r4
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	2280      	movs	r2, #128	; 0x80
 80034c6:	0112      	lsls	r2, r2, #4
 80034c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	187b      	adds	r3, r7, r1
 80034cc:	2202      	movs	r2, #2
 80034ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d6:	187b      	adds	r3, r7, r1
 80034d8:	2200      	movs	r2, #0
 80034da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80034dc:	187b      	adds	r3, r7, r1
 80034de:	2201      	movs	r2, #1
 80034e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(JETSON_UART_CTS_GPIO_Port, &GPIO_InitStruct);
 80034e2:	187a      	adds	r2, r7, r1
 80034e4:	23a0      	movs	r3, #160	; 0xa0
 80034e6:	05db      	lsls	r3, r3, #23
 80034e8:	0011      	movs	r1, r2
 80034ea:	0018      	movs	r0, r3
 80034ec:	f002 f8d8 	bl	80056a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80034f0:	4b4c      	ldr	r3, [pc, #304]	; (8003624 <HAL_UART_MspInit+0x1e8>)
 80034f2:	4a4d      	ldr	r2, [pc, #308]	; (8003628 <HAL_UART_MspInit+0x1ec>)
 80034f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80034f6:	4b4b      	ldr	r3, [pc, #300]	; (8003624 <HAL_UART_MspInit+0x1e8>)
 80034f8:	2232      	movs	r2, #50	; 0x32
 80034fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034fc:	4b49      	ldr	r3, [pc, #292]	; (8003624 <HAL_UART_MspInit+0x1e8>)
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003502:	4b48      	ldr	r3, [pc, #288]	; (8003624 <HAL_UART_MspInit+0x1e8>)
 8003504:	2200      	movs	r2, #0
 8003506:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003508:	4b46      	ldr	r3, [pc, #280]	; (8003624 <HAL_UART_MspInit+0x1e8>)
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800350e:	4b45      	ldr	r3, [pc, #276]	; (8003624 <HAL_UART_MspInit+0x1e8>)
 8003510:	2200      	movs	r2, #0
 8003512:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003514:	4b43      	ldr	r3, [pc, #268]	; (8003624 <HAL_UART_MspInit+0x1e8>)
 8003516:	2200      	movs	r2, #0
 8003518:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800351a:	4b42      	ldr	r3, [pc, #264]	; (8003624 <HAL_UART_MspInit+0x1e8>)
 800351c:	2200      	movs	r2, #0
 800351e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003520:	4b40      	ldr	r3, [pc, #256]	; (8003624 <HAL_UART_MspInit+0x1e8>)
 8003522:	2200      	movs	r2, #0
 8003524:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003526:	4b3f      	ldr	r3, [pc, #252]	; (8003624 <HAL_UART_MspInit+0x1e8>)
 8003528:	0018      	movs	r0, r3
 800352a:	f001 fd45 	bl	8004fb8 <HAL_DMA_Init>
 800352e:	1e03      	subs	r3, r0, #0
 8003530:	d001      	beq.n	8003536 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8003532:	f7ff fb2b 	bl	8002b8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a3a      	ldr	r2, [pc, #232]	; (8003624 <HAL_UART_MspInit+0x1e8>)
 800353a:	67da      	str	r2, [r3, #124]	; 0x7c
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_UART_MspInit+0x1e8>)
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003542:	e066      	b.n	8003612 <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a38      	ldr	r2, [pc, #224]	; (800362c <HAL_UART_MspInit+0x1f0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d161      	bne.n	8003612 <HAL_UART_MspInit+0x1d6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800354e:	4b34      	ldr	r3, [pc, #208]	; (8003620 <HAL_UART_MspInit+0x1e4>)
 8003550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003552:	4b33      	ldr	r3, [pc, #204]	; (8003620 <HAL_UART_MspInit+0x1e4>)
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	0289      	lsls	r1, r1, #10
 8003558:	430a      	orrs	r2, r1
 800355a:	63da      	str	r2, [r3, #60]	; 0x3c
 800355c:	4b30      	ldr	r3, [pc, #192]	; (8003620 <HAL_UART_MspInit+0x1e4>)
 800355e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	029b      	lsls	r3, r3, #10
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356a:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <HAL_UART_MspInit+0x1e4>)
 800356c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356e:	4b2c      	ldr	r3, [pc, #176]	; (8003620 <HAL_UART_MspInit+0x1e4>)
 8003570:	2101      	movs	r1, #1
 8003572:	430a      	orrs	r2, r1
 8003574:	635a      	str	r2, [r3, #52]	; 0x34
 8003576:	4b2a      	ldr	r3, [pc, #168]	; (8003620 <HAL_UART_MspInit+0x1e4>)
 8003578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357a:	2201      	movs	r2, #1
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8003582:	211c      	movs	r1, #28
 8003584:	187b      	adds	r3, r7, r1
 8003586:	4a2a      	ldr	r2, [pc, #168]	; (8003630 <HAL_UART_MspInit+0x1f4>)
 8003588:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358a:	187b      	adds	r3, r7, r1
 800358c:	2202      	movs	r2, #2
 800358e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003590:	187b      	adds	r3, r7, r1
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003596:	187b      	adds	r3, r7, r1
 8003598:	2200      	movs	r2, #0
 800359a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800359c:	187b      	adds	r3, r7, r1
 800359e:	2201      	movs	r2, #1
 80035a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	187a      	adds	r2, r7, r1
 80035a4:	23a0      	movs	r3, #160	; 0xa0
 80035a6:	05db      	lsls	r3, r3, #23
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f002 f878 	bl	80056a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80035b0:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_UART_MspInit+0x1f8>)
 80035b2:	4a21      	ldr	r2, [pc, #132]	; (8003638 <HAL_UART_MspInit+0x1fc>)
 80035b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80035b6:	4b1f      	ldr	r3, [pc, #124]	; (8003634 <HAL_UART_MspInit+0x1f8>)
 80035b8:	2234      	movs	r2, #52	; 0x34
 80035ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035bc:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <HAL_UART_MspInit+0x1f8>)
 80035be:	2200      	movs	r2, #0
 80035c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c2:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <HAL_UART_MspInit+0x1f8>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035c8:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <HAL_UART_MspInit+0x1f8>)
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035ce:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_UART_MspInit+0x1f8>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035d4:	4b17      	ldr	r3, [pc, #92]	; (8003634 <HAL_UART_MspInit+0x1f8>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <HAL_UART_MspInit+0x1f8>)
 80035dc:	2200      	movs	r2, #0
 80035de:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035e0:	4b14      	ldr	r3, [pc, #80]	; (8003634 <HAL_UART_MspInit+0x1f8>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_UART_MspInit+0x1f8>)
 80035e8:	0018      	movs	r0, r3
 80035ea:	f001 fce5 	bl	8004fb8 <HAL_DMA_Init>
 80035ee:	1e03      	subs	r3, r0, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 80035f2:	f7ff facb 	bl	8002b8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <HAL_UART_MspInit+0x1f8>)
 80035fa:	67da      	str	r2, [r3, #124]	; 0x7c
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <HAL_UART_MspInit+0x1f8>)
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	2100      	movs	r1, #0
 8003606:	201c      	movs	r0, #28
 8003608:	f001 fc84 	bl	8004f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 800360c:	201c      	movs	r0, #28
 800360e:	f001 fc96 	bl	8004f3e <HAL_NVIC_EnableIRQ>
}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	46bd      	mov	sp, r7
 8003616:	b00d      	add	sp, #52	; 0x34
 8003618:	bd90      	pop	{r4, r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	40013800 	.word	0x40013800
 8003620:	40021000 	.word	0x40021000
 8003624:	200003a4 	.word	0x200003a4
 8003628:	40020008 	.word	0x40020008
 800362c:	40004400 	.word	0x40004400
 8003630:	00008004 	.word	0x00008004
 8003634:	20000234 	.word	0x20000234
 8003638:	4002001c 	.word	0x4002001c

0800363c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003640:	e7fe      	b.n	8003640 <NMI_Handler+0x4>

08003642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003646:	e7fe      	b.n	8003646 <HardFault_Handler+0x4>

08003648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003660:	f000 fe7a 	bl	8004358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <DMA1_Channel1_IRQHandler+0x14>)
 8003672:	0018      	movs	r0, r3
 8003674:	f001 fe9a 	bl	80053ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	200003a4 	.word	0x200003a4

08003684 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <DMA1_Channel2_3_IRQHandler+0x14>)
 800368a:	0018      	movs	r0, r3
 800368c:	f001 fe8e 	bl	80053ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	20000234 	.word	0x20000234

0800369c <I2C2_3_IRQHandler>:

/**
  * @brief This function handles I2C2, I2C3 Interrupt (combined with EXTI 24 and EXTI 22).
  */
void I2C2_3_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_3_IRQn 0 */

  /* USER CODE END I2C2_3_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <I2C2_3_IRQHandler+0x2c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	23e0      	movs	r3, #224	; 0xe0
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4013      	ands	r3, r2
 80036ac:	d004      	beq.n	80036b8 <I2C2_3_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <I2C2_3_IRQHandler+0x2c>)
 80036b0:	0018      	movs	r0, r3
 80036b2:	f002 fe4b 	bl	800634c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_3_IRQn 1 */

  /* USER CODE END I2C2_3_IRQn 1 */
}
 80036b6:	e003      	b.n	80036c0 <I2C2_3_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <I2C2_3_IRQHandler+0x2c>)
 80036ba:	0018      	movs	r0, r3
 80036bc:	f002 fe2c 	bl	8006318 <HAL_I2C_EV_IRQHandler>
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	20000294 	.word	0x20000294

080036cc <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <USART2_LPUART2_IRQHandler+0x14>)
 80036d2:	0018      	movs	r0, r3
 80036d4:	f006 fcd4 	bl	800a080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	200004f4 	.word	0x200004f4

080036e4 <_getpid>:
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	2301      	movs	r3, #1
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <_kill>:
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	f008 fb29 	bl	800bd50 <__errno>
 80036fe:	0003      	movs	r3, r0
 8003700:	2216      	movs	r2, #22
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	2301      	movs	r3, #1
 8003706:	425b      	negs	r3, r3
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <_exit>:
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	2301      	movs	r3, #1
 800371a:	425a      	negs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	0011      	movs	r1, r2
 8003720:	0018      	movs	r0, r3
 8003722:	f7ff ffe5 	bl	80036f0 <_kill>
 8003726:	e7fe      	b.n	8003726 <_exit+0x16>

08003728 <_read>:
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e00a      	b.n	8003750 <_read+0x28>
 800373a:	e000      	b.n	800373e <_read+0x16>
 800373c:	bf00      	nop
 800373e:	0001      	movs	r1, r0
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	60ba      	str	r2, [r7, #8]
 8003746:	b2ca      	uxtb	r2, r1
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3301      	adds	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	dbf0      	blt.n	800373a <_read+0x12>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b006      	add	sp, #24
 8003760:	bd80      	pop	{r7, pc}

08003762 <_write>:
 8003762:	b580      	push	{r7, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e009      	b.n	8003788 <_write+0x26>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	60ba      	str	r2, [r7, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	0018      	movs	r0, r3
 800377e:	e000      	b.n	8003782 <_write+0x20>
 8003780:	bf00      	nop
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	3301      	adds	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	dbf1      	blt.n	8003774 <_write+0x12>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	0018      	movs	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	b006      	add	sp, #24
 8003798:	bd80      	pop	{r7, pc}

0800379a <_close>:
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	2301      	movs	r3, #1
 80037a4:	425b      	negs	r3, r3
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b002      	add	sp, #8
 80037ac:	bd80      	pop	{r7, pc}

080037ae <_fstat>:
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2280      	movs	r2, #128	; 0x80
 80037bc:	0192      	lsls	r2, r2, #6
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	2300      	movs	r3, #0
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b002      	add	sp, #8
 80037c8:	bd80      	pop	{r7, pc}

080037ca <_isatty>:
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	2301      	movs	r3, #1
 80037d4:	0018      	movs	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b002      	add	sp, #8
 80037da:	bd80      	pop	{r7, pc}

080037dc <_lseek>:
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	2300      	movs	r3, #0
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b004      	add	sp, #16
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <_sbrk>:
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <_sbrk+0x5c>)
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <_sbrk+0x60>)
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <_sbrk+0x64>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <_sbrk+0x22>
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <_sbrk+0x64>)
 8003812:	4a12      	ldr	r2, [pc, #72]	; (800385c <_sbrk+0x68>)
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <_sbrk+0x64>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	18d3      	adds	r3, r2, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	429a      	cmp	r2, r3
 8003822:	d207      	bcs.n	8003834 <_sbrk+0x40>
 8003824:	f008 fa94 	bl	800bd50 <__errno>
 8003828:	0003      	movs	r3, r0
 800382a:	220c      	movs	r2, #12
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	2301      	movs	r3, #1
 8003830:	425b      	negs	r3, r3
 8003832:	e009      	b.n	8003848 <_sbrk+0x54>
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <_sbrk+0x64>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <_sbrk+0x64>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	18d2      	adds	r2, r2, r3
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <_sbrk+0x64>)
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b006      	add	sp, #24
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20024000 	.word	0x20024000
 8003854:	00000400 	.word	0x00000400
 8003858:	20000228 	.word	0x20000228
 800385c:	20000620 	.word	0x20000620

08003860 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <get_decimal>:
SMBus *i2cBus;
Device *triad[3];

uint16_t triad_data[18];

uint16_t get_decimal(uint8_t virtual_reg_l, uint8_t virtual_reg_h) {
 800386a:	b590      	push	{r4, r7, lr}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	0002      	movs	r2, r0
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	1dbb      	adds	r3, r7, #6
 8003878:	1c0a      	adds	r2, r1, #0
 800387a:	701a      	strb	r2, [r3, #0]
	uint16_t high = virtual_read(virtual_reg_h) << 8;
 800387c:	1dbb      	adds	r3, r7, #6
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	0018      	movs	r0, r3
 8003882:	f000 f85d 	bl	8003940 <virtual_read>
 8003886:	0003      	movs	r3, r0
 8003888:	b29a      	uxth	r2, r3
 800388a:	240e      	movs	r4, #14
 800388c:	193b      	adds	r3, r7, r4
 800388e:	0212      	lsls	r2, r2, #8
 8003890:	801a      	strh	r2, [r3, #0]
	return high | (virtual_read(virtual_reg_l) & 0xFF);
 8003892:	1dfb      	adds	r3, r7, #7
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	0018      	movs	r0, r3
 8003898:	f000 f852 	bl	8003940 <virtual_read>
 800389c:	0003      	movs	r3, r0
 800389e:	b29a      	uxth	r2, r3
 80038a0:	193b      	adds	r3, r7, r4
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	b29b      	uxth	r3, r3
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b005      	add	sp, #20
 80038ae:	bd90      	pop	{r4, r7, pc}

080038b0 <new_device>:

Device* new_device(uint8_t dev_register) {
 80038b0:	b5b0      	push	{r4, r5, r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	0002      	movs	r2, r0
 80038b8:	1dfb      	adds	r3, r7, #7
 80038ba:	701a      	strb	r2, [r3, #0]
	Device* dev = malloc(sizeof(Device));
 80038bc:	201c      	movs	r0, #28
 80038be:	f008 fa71 	bl	800bda4 <malloc>
 80038c2:	0003      	movs	r3, r0
 80038c4:	613b      	str	r3, [r7, #16]
	dev->dev_register = dev_register;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1dfa      	adds	r2, r7, #7
 80038ca:	7812      	ldrb	r2, [r2, #0]
 80038cc:	701a      	strb	r2, [r3, #0]

	uint8_t START_REG = 0x08; //RAW_VALUE_RGA_LOW;
 80038ce:	230f      	movs	r3, #15
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	2208      	movs	r2, #8
 80038d4:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < CHANNELS; ++i) {
 80038d6:	2317      	movs	r3, #23
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e024      	b.n	800392a <new_device+0x7a>
		dev->channels[i] = new_channel(START_REG + (2 * i), START_REG + (2 * i) + 1);
 80038e0:	2117      	movs	r1, #23
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	18db      	adds	r3, r3, r3
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	240f      	movs	r4, #15
 80038ec:	193b      	adds	r3, r7, r4
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	18d3      	adds	r3, r2, r3
 80038f2:	b2d8      	uxtb	r0, r3
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	18db      	adds	r3, r3, r3
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	193b      	adds	r3, r7, r4
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	18d3      	adds	r3, r2, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	3301      	adds	r3, #1
 8003906:	b2da      	uxtb	r2, r3
 8003908:	000d      	movs	r5, r1
 800390a:	187b      	adds	r3, r7, r1
 800390c:	781c      	ldrb	r4, [r3, #0]
 800390e:	0011      	movs	r1, r2
 8003910:	f000 f8ca 	bl	8003aa8 <new_channel>
 8003914:	0001      	movs	r1, r0
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	00a3      	lsls	r3, r4, #2
 800391a:	18d3      	adds	r3, r2, r3
 800391c:	3304      	adds	r3, #4
 800391e:	6019      	str	r1, [r3, #0]
	for (uint8_t i = 0; i < CHANNELS; ++i) {
 8003920:	197b      	adds	r3, r7, r5
 8003922:	197a      	adds	r2, r7, r5
 8003924:	7812      	ldrb	r2, [r2, #0]
 8003926:	3201      	adds	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	2317      	movs	r3, #23
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b05      	cmp	r3, #5
 8003932:	d9d5      	bls.n	80038e0 <new_device+0x30>
	}
	return dev;
 8003934:	693b      	ldr	r3, [r7, #16]
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b006      	add	sp, #24
 800393c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003940 <virtual_read>:

uint8_t virtual_read(uint8_t v_reg) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	0002      	movs	r2, r0
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t d;

	// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
	status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 800394c:	4b2e      	ldr	r3, [pc, #184]	; (8003a08 <virtual_read+0xc8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2200      	movs	r2, #0
 8003952:	2149      	movs	r1, #73	; 0x49
 8003954:	0018      	movs	r0, r3
 8003956:	f7ff fab6 	bl	8002ec6 <read_byte_data>
 800395a:	0002      	movs	r2, r0
 800395c:	210f      	movs	r1, #15
 800395e:	187b      	adds	r3, r7, r1
 8003960:	701a      	strb	r2, [r3, #0]

	if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8003962:	187b      	adds	r3, r7, r1
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	4013      	ands	r3, r2
 800396a:	d00a      	beq.n	8003982 <virtual_read+0x42>
		// d = nucleo_byte_read(I2C_AS72XX_SLAVE_READ_REG);
		d = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 800396c:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <virtual_read+0xc8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2202      	movs	r2, #2
 8003972:	2149      	movs	r1, #73	; 0x49
 8003974:	0018      	movs	r0, r3
 8003976:	f7ff faa6 	bl	8002ec6 <read_byte_data>
 800397a:	0002      	movs	r2, r0
 800397c:	230e      	movs	r3, #14
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	701a      	strb	r2, [r3, #0]
	}

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003982:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <virtual_read+0xc8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	2149      	movs	r1, #73	; 0x49
 800398a:	0018      	movs	r0, r3
 800398c:	f7ff fa9b 	bl	8002ec6 <read_byte_data>
 8003990:	0002      	movs	r2, r0
 8003992:	210f      	movs	r1, #15
 8003994:	187b      	adds	r3, r7, r1
 8003996:	701a      	strb	r2, [r3, #0]

		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8003998:	187b      	adds	r3, r7, r1
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2202      	movs	r2, #2
 800399e:	4013      	ands	r3, r2
 80039a0:	d003      	beq.n	80039aa <virtual_read+0x6a>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 80039a2:	2005      	movs	r0, #5
 80039a4:	f000 fcf4 	bl	8004390 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 80039a8:	e7eb      	b.n	8003982 <virtual_read+0x42>
			break;
 80039aa:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
 80039ac:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <virtual_read+0xc8>)
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	1dfb      	adds	r3, r7, #7
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2201      	movs	r2, #1
 80039b6:	2149      	movs	r1, #73	; 0x49
 80039b8:	f7ff faff 	bl	8002fba <write_byte_data>

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <virtual_read+0xc8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2200      	movs	r2, #0
 80039c2:	2149      	movs	r1, #73	; 0x49
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7ff fa7e 	bl	8002ec6 <read_byte_data>
 80039ca:	0002      	movs	r2, r0
 80039cc:	210f      	movs	r1, #15
 80039ce:	187b      	adds	r3, r7, r1
 80039d0:	701a      	strb	r2, [r3, #0]

		if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 80039d2:	187b      	adds	r3, r7, r1
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2201      	movs	r2, #1
 80039d8:	4013      	ands	r3, r2
 80039da:	d103      	bne.n	80039e4 <virtual_read+0xa4>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 80039dc:	2005      	movs	r0, #5
 80039de:	f000 fcd7 	bl	8004390 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 80039e2:	e7eb      	b.n	80039bc <virtual_read+0x7c>
			break;
 80039e4:	46c0      	nop			; (mov r8, r8)
	}

	// d = nucleo_byte_read( I2C_AS72XX_SLAVE_READ_REG);

	d = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 80039e6:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <virtual_read+0xc8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2202      	movs	r2, #2
 80039ec:	2149      	movs	r1, #73	; 0x49
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7ff fa69 	bl	8002ec6 <read_byte_data>
 80039f4:	0002      	movs	r2, r0
 80039f6:	210e      	movs	r1, #14
 80039f8:	187b      	adds	r3, r7, r1
 80039fa:	701a      	strb	r2, [r3, #0]

	return d;
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	781b      	ldrb	r3, [r3, #0]
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b004      	add	sp, #16
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	200005ac 	.word	0x200005ac

08003a0c <virtual_write>:


void virtual_write(uint8_t v_reg, uint8_t data) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	0002      	movs	r2, r0
 8003a14:	1dfb      	adds	r3, r7, #7
 8003a16:	701a      	strb	r2, [r3, #0]
 8003a18:	1dbb      	adds	r3, r7, #6
 8003a1a:	1c0a      	adds	r2, r1, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
	uint8_t status;

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003a1e:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <virtual_write+0x98>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2200      	movs	r2, #0
 8003a24:	2149      	movs	r1, #73	; 0x49
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7ff fa4d 	bl	8002ec6 <read_byte_data>
 8003a2c:	0002      	movs	r2, r0
 8003a2e:	210f      	movs	r1, #15
 8003a30:	187b      	adds	r3, r7, r1
 8003a32:	701a      	strb	r2, [r3, #0]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8003a34:	187b      	adds	r3, r7, r1
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <virtual_write+0x3a>
			break;
		}
		HAL_Delay(5);
 8003a3e:	2005      	movs	r0, #5
 8003a40:	f000 fca6 	bl	8004390 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003a44:	e7eb      	b.n	8003a1e <virtual_write+0x12>
			break;
 8003a46:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
 8003a48:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <virtual_write+0x98>)
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	1dfb      	adds	r3, r7, #7
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	4252      	negs	r2, r2
 8003a54:	4313      	orrs	r3, r2
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2201      	movs	r2, #1
 8003a5a:	2149      	movs	r1, #73	; 0x49
 8003a5c:	f7ff faad 	bl	8002fba <write_byte_data>

	while(1) {
//		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003a60:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <virtual_write+0x98>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2200      	movs	r2, #0
 8003a66:	2149      	movs	r1, #73	; 0x49
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7ff fa2c 	bl	8002ec6 <read_byte_data>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	210f      	movs	r1, #15
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	701a      	strb	r2, [r3, #0]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <virtual_write+0x7c>
			break;
		}
		HAL_Delay(5);
 8003a80:	2005      	movs	r0, #5
 8003a82:	f000 fc85 	bl	8004390 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003a86:	e7eb      	b.n	8003a60 <virtual_write+0x54>
			break;
 8003a88:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, data);
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, data);
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <virtual_write+0x98>)
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	1dbb      	adds	r3, r7, #6
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2201      	movs	r2, #1
 8003a94:	2149      	movs	r1, #73	; 0x49
 8003a96:	f7ff fa90 	bl	8002fba <write_byte_data>
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b004      	add	sp, #16
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	200005ac 	.word	0x200005ac

08003aa8 <new_channel>:

Channel* new_channel(uint8_t lsb_r, uint8_t msb_r) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	0002      	movs	r2, r0
 8003ab0:	1dfb      	adds	r3, r7, #7
 8003ab2:	701a      	strb	r2, [r3, #0]
 8003ab4:	1dbb      	adds	r3, r7, #6
 8003ab6:	1c0a      	adds	r2, r1, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
	Channel* ch = malloc(sizeof(Channel));
 8003aba:	2004      	movs	r0, #4
 8003abc:	f008 f972 	bl	800bda4 <malloc>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	60fb      	str	r3, [r7, #12]
	ch->color_data = 0;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	805a      	strh	r2, [r3, #2]
	ch->lsb_register = lsb_r;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1dfa      	adds	r2, r7, #7
 8003ace:	7812      	ldrb	r2, [r2, #0]
 8003ad0:	701a      	strb	r2, [r3, #0]
	ch->msb_register = msb_r;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1dba      	adds	r2, r7, #6
 8003ad6:	7812      	ldrb	r2, [r2, #0]
 8003ad8:	705a      	strb	r2, [r3, #1]
	return ch;
 8003ada:	68fb      	ldr	r3, [r7, #12]
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b004      	add	sp, #16
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <send_triad_data>:

//transmits the triad data as a sentence
//$TRIAD,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,
void send_triad_data(uint16_t *data, UART_HandleTypeDef * huart){
 8003ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae6:	46de      	mov	lr, fp
 8003ae8:	4657      	mov	r7, sl
 8003aea:	464e      	mov	r6, r9
 8003aec:	4645      	mov	r5, r8
 8003aee:	b5e0      	push	{r5, r6, r7, lr}
 8003af0:	4c2a      	ldr	r4, [pc, #168]	; (8003b9c <send_triad_data+0xb8>)
 8003af2:	44a5      	add	sp, r4
 8003af4:	af22      	add	r7, sp, #136	; 0x88
 8003af6:	67f8      	str	r0, [r7, #124]	; 0x7c
 8003af8:	67b9      	str	r1, [r7, #120]	; 0x78
	int channels = 6;
 8003afa:	2306      	movs	r3, #6
 8003afc:	22a0      	movs	r2, #160	; 0xa0
 8003afe:	0052      	lsls	r2, r2, #1
 8003b00:	2170      	movs	r1, #112	; 0x70
 8003b02:	468c      	mov	ip, r1
 8003b04:	2108      	movs	r1, #8
 8003b06:	4688      	mov	r8, r1
 8003b08:	44b8      	add	r8, r7
 8003b0a:	44c4      	add	ip, r8
 8003b0c:	4462      	add	r2, ip
 8003b0e:	6013      	str	r3, [r2, #0]
	int devices = 3;
 8003b10:	2303      	movs	r3, #3
 8003b12:	229e      	movs	r2, #158	; 0x9e
 8003b14:	0052      	lsls	r2, r2, #1
 8003b16:	2170      	movs	r1, #112	; 0x70
 8003b18:	468c      	mov	ip, r1
 8003b1a:	2108      	movs	r1, #8
 8003b1c:	4688      	mov	r8, r1
 8003b1e:	44b8      	add	r8, r7
 8003b20:	44c4      	add	ip, r8
 8003b22:	4462      	add	r2, ip
 8003b24:	6013      	str	r3, [r2, #0]

	// 150 - total length of output string $TRIAD,x,y,z...
	char string[150] = "";
 8003b26:	239c      	movs	r3, #156	; 0x9c
 8003b28:	2270      	movs	r2, #112	; 0x70
 8003b2a:	4694      	mov	ip, r2
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	4690      	mov	r8, r2
 8003b30:	44b8      	add	r8, r7
 8003b32:	44c4      	add	ip, r8
 8003b34:	4463      	add	r3, ip
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	2292      	movs	r2, #146	; 0x92
 8003b3e:	2100      	movs	r1, #0
 8003b40:	0018      	movs	r0, r3
 8003b42:	f008 f942 	bl	800bdca <memset>

	// 36 - 18 channels w/ msb & lsb for each
	int separated_data[36] = {0};
 8003b46:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <send_triad_data+0xbc>)
 8003b48:	22a4      	movs	r2, #164	; 0xa4
 8003b4a:	0052      	lsls	r2, r2, #1
 8003b4c:	4694      	mov	ip, r2
 8003b4e:	2270      	movs	r2, #112	; 0x70
 8003b50:	4690      	mov	r8, r2
 8003b52:	2208      	movs	r2, #8
 8003b54:	4691      	mov	r9, r2
 8003b56:	44b9      	add	r9, r7
 8003b58:	44c8      	add	r8, r9
 8003b5a:	44c4      	add	ip, r8
 8003b5c:	4463      	add	r3, ip
 8003b5e:	0018      	movs	r0, r3
 8003b60:	2390      	movs	r3, #144	; 0x90
 8003b62:	001a      	movs	r2, r3
 8003b64:	2100      	movs	r1, #0
 8003b66:	f008 f930 	bl	800bdca <memset>

	for (uint8_t i = 0; i < devices; ++i) {
 8003b6a:	2348      	movs	r3, #72	; 0x48
 8003b6c:	33ff      	adds	r3, #255	; 0xff
 8003b6e:	2270      	movs	r2, #112	; 0x70
 8003b70:	4694      	mov	ip, r2
 8003b72:	2208      	movs	r2, #8
 8003b74:	4690      	mov	r8, r2
 8003b76:	44b8      	add	r8, r7
 8003b78:	44c4      	add	ip, r8
 8003b7a:	4463      	add	r3, ip
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	e0e7      	b.n	8003d52 <send_triad_data+0x26e>

		for (uint8_t j = 0; j < channels; ++j) {
 8003b82:	23a3      	movs	r3, #163	; 0xa3
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	2270      	movs	r2, #112	; 0x70
 8003b88:	4694      	mov	ip, r2
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	4690      	mov	r8, r2
 8003b8e:	44b8      	add	r8, r7
 8003b90:	44c4      	add	ip, r8
 8003b92:	4463      	add	r3, ip
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e0b2      	b.n	8003d00 <send_triad_data+0x21c>
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	fffffdb4 	.word	0xfffffdb4
 8003ba0:	fffffec4 	.word	0xfffffec4

			unsigned int msb = (data[i*channels + j] >> 8) & 0xff;
 8003ba4:	2448      	movs	r4, #72	; 0x48
 8003ba6:	34ff      	adds	r4, #255	; 0xff
 8003ba8:	2070      	movs	r0, #112	; 0x70
 8003baa:	2308      	movs	r3, #8
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	181b      	adds	r3, r3, r0
 8003bb0:	191b      	adds	r3, r3, r4
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	25a0      	movs	r5, #160	; 0xa0
 8003bb6:	006d      	lsls	r5, r5, #1
 8003bb8:	2208      	movs	r2, #8
 8003bba:	18ba      	adds	r2, r7, r2
 8003bbc:	1812      	adds	r2, r2, r0
 8003bbe:	1952      	adds	r2, r2, r5
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	435a      	muls	r2, r3
 8003bc4:	21a3      	movs	r1, #163	; 0xa3
 8003bc6:	0049      	lsls	r1, r1, #1
 8003bc8:	2308      	movs	r3, #8
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	181b      	adds	r3, r3, r0
 8003bce:	185b      	adds	r3, r3, r1
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	18d3      	adds	r3, r2, r3
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003bd8:	18d3      	adds	r3, r2, r3
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	001a      	movs	r2, r3
 8003be2:	23ff      	movs	r3, #255	; 0xff
 8003be4:	4013      	ands	r3, r2
 8003be6:	269c      	movs	r6, #156	; 0x9c
 8003be8:	0076      	lsls	r6, r6, #1
 8003bea:	603e      	str	r6, [r7, #0]
 8003bec:	2208      	movs	r2, #8
 8003bee:	18ba      	adds	r2, r7, r2
 8003bf0:	1812      	adds	r2, r2, r0
 8003bf2:	1992      	adds	r2, r2, r6
 8003bf4:	6013      	str	r3, [r2, #0]
			unsigned int lsb = (data[i*channels + j]) & 0xff;
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	181b      	adds	r3, r3, r0
 8003bfc:	191b      	adds	r3, r3, r4
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2208      	movs	r2, #8
 8003c02:	18ba      	adds	r2, r7, r2
 8003c04:	1812      	adds	r2, r2, r0
 8003c06:	1952      	adds	r2, r2, r5
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	435a      	muls	r2, r3
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	181b      	adds	r3, r3, r0
 8003c12:	185b      	adds	r3, r3, r1
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	18d3      	adds	r3, r2, r3
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c1c:	18d3      	adds	r3, r2, r3
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	001a      	movs	r2, r3
 8003c22:	23ff      	movs	r3, #255	; 0xff
 8003c24:	4013      	ands	r3, r2
 8003c26:	229a      	movs	r2, #154	; 0x9a
 8003c28:	0052      	lsls	r2, r2, #1
 8003c2a:	2608      	movs	r6, #8
 8003c2c:	46b4      	mov	ip, r6
 8003c2e:	44bc      	add	ip, r7
 8003c30:	4460      	add	r0, ip
 8003c32:	1880      	adds	r0, r0, r2
 8003c34:	6003      	str	r3, [r0, #0]

			separated_data[(2*i*channels) + (2*j)] =  msb;
 8003c36:	2070      	movs	r0, #112	; 0x70
 8003c38:	2308      	movs	r3, #8
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	181b      	adds	r3, r3, r0
 8003c3e:	191b      	adds	r3, r3, r4
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2208      	movs	r2, #8
 8003c44:	18ba      	adds	r2, r7, r2
 8003c46:	1812      	adds	r2, r2, r0
 8003c48:	1950      	adds	r0, r2, r5
 8003c4a:	6802      	ldr	r2, [r0, #0]
 8003c4c:	435a      	muls	r2, r3
 8003c4e:	0008      	movs	r0, r1
 8003c50:	2370      	movs	r3, #112	; 0x70
 8003c52:	2608      	movs	r6, #8
 8003c54:	46b4      	mov	ip, r6
 8003c56:	44bc      	add	ip, r7
 8003c58:	4463      	add	r3, ip
 8003c5a:	185b      	adds	r3, r3, r1
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	18d3      	adds	r3, r2, r3
 8003c60:	005a      	lsls	r2, r3, #1
 8003c62:	683e      	ldr	r6, [r7, #0]
 8003c64:	2370      	movs	r3, #112	; 0x70
 8003c66:	2108      	movs	r1, #8
 8003c68:	1879      	adds	r1, r7, r1
 8003c6a:	18c9      	adds	r1, r1, r3
 8003c6c:	1989      	adds	r1, r1, r6
 8003c6e:	6809      	ldr	r1, [r1, #0]
 8003c70:	4bfd      	ldr	r3, [pc, #1012]	; (8004068 <send_triad_data+0x584>)
 8003c72:	26a4      	movs	r6, #164	; 0xa4
 8003c74:	0076      	lsls	r6, r6, #1
 8003c76:	46b4      	mov	ip, r6
 8003c78:	2670      	movs	r6, #112	; 0x70
 8003c7a:	46b0      	mov	r8, r6
 8003c7c:	2608      	movs	r6, #8
 8003c7e:	46b1      	mov	r9, r6
 8003c80:	44b9      	add	r9, r7
 8003c82:	44c8      	add	r8, r9
 8003c84:	44c4      	add	ip, r8
 8003c86:	4463      	add	r3, ip
 8003c88:	0092      	lsls	r2, r2, #2
 8003c8a:	50d1      	str	r1, [r2, r3]
			separated_data[(2*i*channels) + (2*j) + 1] =  lsb;
 8003c8c:	2270      	movs	r2, #112	; 0x70
 8003c8e:	2308      	movs	r3, #8
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	191b      	adds	r3, r3, r4
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	0014      	movs	r4, r2
 8003c9a:	2108      	movs	r1, #8
 8003c9c:	468c      	mov	ip, r1
 8003c9e:	44bc      	add	ip, r7
 8003ca0:	4462      	add	r2, ip
 8003ca2:	1951      	adds	r1, r2, r5
 8003ca4:	680a      	ldr	r2, [r1, #0]
 8003ca6:	435a      	muls	r2, r3
 8003ca8:	0025      	movs	r5, r4
 8003caa:	2308      	movs	r3, #8
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	191b      	adds	r3, r3, r4
 8003cb0:	181b      	adds	r3, r3, r0
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	18d3      	adds	r3, r2, r3
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	239a      	movs	r3, #154	; 0x9a
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	2170      	movs	r1, #112	; 0x70
 8003cc0:	468c      	mov	ip, r1
 8003cc2:	2108      	movs	r1, #8
 8003cc4:	4688      	mov	r8, r1
 8003cc6:	44b8      	add	r8, r7
 8003cc8:	44c4      	add	ip, r8
 8003cca:	4463      	add	r3, ip
 8003ccc:	6819      	ldr	r1, [r3, #0]
 8003cce:	4be6      	ldr	r3, [pc, #920]	; (8004068 <send_triad_data+0x584>)
 8003cd0:	24a4      	movs	r4, #164	; 0xa4
 8003cd2:	0064      	lsls	r4, r4, #1
 8003cd4:	46a4      	mov	ip, r4
 8003cd6:	2470      	movs	r4, #112	; 0x70
 8003cd8:	46a0      	mov	r8, r4
 8003cda:	2408      	movs	r4, #8
 8003cdc:	46a1      	mov	r9, r4
 8003cde:	44b9      	add	r9, r7
 8003ce0:	44c8      	add	r8, r9
 8003ce2:	44c4      	add	ip, r8
 8003ce4:	4463      	add	r3, ip
 8003ce6:	0092      	lsls	r2, r2, #2
 8003ce8:	50d1      	str	r1, [r2, r3]
		for (uint8_t j = 0; j < channels; ++j) {
 8003cea:	2308      	movs	r3, #8
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	195b      	adds	r3, r3, r5
 8003cf0:	181b      	adds	r3, r3, r0
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	18ba      	adds	r2, r7, r2
 8003cf6:	1952      	adds	r2, r2, r5
 8003cf8:	1812      	adds	r2, r2, r0
 8003cfa:	7812      	ldrb	r2, [r2, #0]
 8003cfc:	3201      	adds	r2, #1
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	23a3      	movs	r3, #163	; 0xa3
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	2270      	movs	r2, #112	; 0x70
 8003d06:	4694      	mov	ip, r2
 8003d08:	2208      	movs	r2, #8
 8003d0a:	4690      	mov	r8, r2
 8003d0c:	44b8      	add	r8, r7
 8003d0e:	44c4      	add	ip, r8
 8003d10:	4463      	add	r3, ip
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	22a0      	movs	r2, #160	; 0xa0
 8003d16:	0052      	lsls	r2, r2, #1
 8003d18:	2170      	movs	r1, #112	; 0x70
 8003d1a:	468c      	mov	ip, r1
 8003d1c:	2108      	movs	r1, #8
 8003d1e:	4688      	mov	r8, r1
 8003d20:	44b8      	add	r8, r7
 8003d22:	44c4      	add	ip, r8
 8003d24:	4462      	add	r2, ip
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	dd00      	ble.n	8003d2e <send_triad_data+0x24a>
 8003d2c:	e73a      	b.n	8003ba4 <send_triad_data+0xc0>
	for (uint8_t i = 0; i < devices; ++i) {
 8003d2e:	2248      	movs	r2, #72	; 0x48
 8003d30:	32ff      	adds	r2, #255	; 0xff
 8003d32:	2370      	movs	r3, #112	; 0x70
 8003d34:	2108      	movs	r1, #8
 8003d36:	468c      	mov	ip, r1
 8003d38:	44bc      	add	ip, r7
 8003d3a:	4463      	add	r3, ip
 8003d3c:	189b      	adds	r3, r3, r2
 8003d3e:	2170      	movs	r1, #112	; 0x70
 8003d40:	468c      	mov	ip, r1
 8003d42:	2108      	movs	r1, #8
 8003d44:	4688      	mov	r8, r1
 8003d46:	44b8      	add	r8, r7
 8003d48:	44c4      	add	ip, r8
 8003d4a:	4462      	add	r2, ip
 8003d4c:	7812      	ldrb	r2, [r2, #0]
 8003d4e:	3201      	adds	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	2348      	movs	r3, #72	; 0x48
 8003d54:	33ff      	adds	r3, #255	; 0xff
 8003d56:	2270      	movs	r2, #112	; 0x70
 8003d58:	4694      	mov	ip, r2
 8003d5a:	2208      	movs	r2, #8
 8003d5c:	4690      	mov	r8, r2
 8003d5e:	44b8      	add	r8, r7
 8003d60:	44c4      	add	ip, r8
 8003d62:	4463      	add	r3, ip
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	229e      	movs	r2, #158	; 0x9e
 8003d68:	0052      	lsls	r2, r2, #1
 8003d6a:	2170      	movs	r1, #112	; 0x70
 8003d6c:	468c      	mov	ip, r1
 8003d6e:	2108      	movs	r1, #8
 8003d70:	4688      	mov	r8, r1
 8003d72:	44b8      	add	r8, r7
 8003d74:	44c4      	add	ip, r8
 8003d76:	4462      	add	r2, ip
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	dd00      	ble.n	8003d80 <send_triad_data+0x29c>
 8003d7e:	e700      	b.n	8003b82 <send_triad_data+0x9e>

		}

	}

	sprintf((char *)string, "$TRIAD,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u \r\n",\
 8003d80:	4bb9      	ldr	r3, [pc, #740]	; (8004068 <send_triad_data+0x584>)
 8003d82:	22a4      	movs	r2, #164	; 0xa4
 8003d84:	0052      	lsls	r2, r2, #1
 8003d86:	4694      	mov	ip, r2
 8003d88:	2270      	movs	r2, #112	; 0x70
 8003d8a:	4690      	mov	r8, r2
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	4691      	mov	r9, r2
 8003d90:	44b9      	add	r9, r7
 8003d92:	44c8      	add	r8, r9
 8003d94:	44c4      	add	ip, r8
 8003d96:	4463      	add	r3, ip
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	677b      	str	r3, [r7, #116]	; 0x74
 8003d9c:	4bb2      	ldr	r3, [pc, #712]	; (8004068 <send_triad_data+0x584>)
 8003d9e:	21a4      	movs	r1, #164	; 0xa4
 8003da0:	0049      	lsls	r1, r1, #1
 8003da2:	468c      	mov	ip, r1
 8003da4:	2270      	movs	r2, #112	; 0x70
 8003da6:	4690      	mov	r8, r2
 8003da8:	2208      	movs	r2, #8
 8003daa:	4691      	mov	r9, r2
 8003dac:	44b9      	add	r9, r7
 8003dae:	44c8      	add	r8, r9
 8003db0:	44c4      	add	ip, r8
 8003db2:	4463      	add	r3, ip
 8003db4:	6859      	ldr	r1, [r3, #4]
 8003db6:	6739      	str	r1, [r7, #112]	; 0x70
 8003db8:	4bab      	ldr	r3, [pc, #684]	; (8004068 <send_triad_data+0x584>)
 8003dba:	20a4      	movs	r0, #164	; 0xa4
 8003dbc:	0040      	lsls	r0, r0, #1
 8003dbe:	4684      	mov	ip, r0
 8003dc0:	2270      	movs	r2, #112	; 0x70
 8003dc2:	4690      	mov	r8, r2
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	4691      	mov	r9, r2
 8003dc8:	44b9      	add	r9, r7
 8003dca:	44c8      	add	r8, r9
 8003dcc:	44c4      	add	ip, r8
 8003dce:	4463      	add	r3, ip
 8003dd0:	6898      	ldr	r0, [r3, #8]
 8003dd2:	66f8      	str	r0, [r7, #108]	; 0x6c
 8003dd4:	4ba4      	ldr	r3, [pc, #656]	; (8004068 <send_triad_data+0x584>)
 8003dd6:	24a4      	movs	r4, #164	; 0xa4
 8003dd8:	0064      	lsls	r4, r4, #1
 8003dda:	46a4      	mov	ip, r4
 8003ddc:	2270      	movs	r2, #112	; 0x70
 8003dde:	4690      	mov	r8, r2
 8003de0:	2208      	movs	r2, #8
 8003de2:	4691      	mov	r9, r2
 8003de4:	44b9      	add	r9, r7
 8003de6:	44c8      	add	r8, r9
 8003de8:	44c4      	add	ip, r8
 8003dea:	4463      	add	r3, ip
 8003dec:	68dc      	ldr	r4, [r3, #12]
 8003dee:	66bc      	str	r4, [r7, #104]	; 0x68
 8003df0:	4b9d      	ldr	r3, [pc, #628]	; (8004068 <send_triad_data+0x584>)
 8003df2:	25a4      	movs	r5, #164	; 0xa4
 8003df4:	006d      	lsls	r5, r5, #1
 8003df6:	46ac      	mov	ip, r5
 8003df8:	2270      	movs	r2, #112	; 0x70
 8003dfa:	4690      	mov	r8, r2
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	4691      	mov	r9, r2
 8003e00:	44b9      	add	r9, r7
 8003e02:	44c8      	add	r8, r9
 8003e04:	44c4      	add	ip, r8
 8003e06:	4463      	add	r3, ip
 8003e08:	691d      	ldr	r5, [r3, #16]
 8003e0a:	667d      	str	r5, [r7, #100]	; 0x64
 8003e0c:	4b96      	ldr	r3, [pc, #600]	; (8004068 <send_triad_data+0x584>)
 8003e0e:	26a4      	movs	r6, #164	; 0xa4
 8003e10:	0076      	lsls	r6, r6, #1
 8003e12:	46b4      	mov	ip, r6
 8003e14:	2270      	movs	r2, #112	; 0x70
 8003e16:	4690      	mov	r8, r2
 8003e18:	2208      	movs	r2, #8
 8003e1a:	4691      	mov	r9, r2
 8003e1c:	44b9      	add	r9, r7
 8003e1e:	44c8      	add	r8, r9
 8003e20:	44c4      	add	ip, r8
 8003e22:	4463      	add	r3, ip
 8003e24:	695e      	ldr	r6, [r3, #20]
 8003e26:	663e      	str	r6, [r7, #96]	; 0x60
 8003e28:	4b8f      	ldr	r3, [pc, #572]	; (8004068 <send_triad_data+0x584>)
 8003e2a:	22a4      	movs	r2, #164	; 0xa4
 8003e2c:	0052      	lsls	r2, r2, #1
 8003e2e:	4694      	mov	ip, r2
 8003e30:	2270      	movs	r2, #112	; 0x70
 8003e32:	4690      	mov	r8, r2
 8003e34:	2208      	movs	r2, #8
 8003e36:	4691      	mov	r9, r2
 8003e38:	44b9      	add	r9, r7
 8003e3a:	44c8      	add	r8, r9
 8003e3c:	44c4      	add	ip, r8
 8003e3e:	4463      	add	r3, ip
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e44:	4b88      	ldr	r3, [pc, #544]	; (8004068 <send_triad_data+0x584>)
 8003e46:	21a4      	movs	r1, #164	; 0xa4
 8003e48:	0049      	lsls	r1, r1, #1
 8003e4a:	468c      	mov	ip, r1
 8003e4c:	2270      	movs	r2, #112	; 0x70
 8003e4e:	4690      	mov	r8, r2
 8003e50:	2208      	movs	r2, #8
 8003e52:	4691      	mov	r9, r2
 8003e54:	44b9      	add	r9, r7
 8003e56:	44c8      	add	r8, r9
 8003e58:	44c4      	add	ip, r8
 8003e5a:	4463      	add	r3, ip
 8003e5c:	69d9      	ldr	r1, [r3, #28]
 8003e5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e60:	4b81      	ldr	r3, [pc, #516]	; (8004068 <send_triad_data+0x584>)
 8003e62:	20a4      	movs	r0, #164	; 0xa4
 8003e64:	0040      	lsls	r0, r0, #1
 8003e66:	4684      	mov	ip, r0
 8003e68:	2270      	movs	r2, #112	; 0x70
 8003e6a:	4690      	mov	r8, r2
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	4691      	mov	r9, r2
 8003e70:	44b9      	add	r9, r7
 8003e72:	44c8      	add	r8, r9
 8003e74:	44c4      	add	ip, r8
 8003e76:	4463      	add	r3, ip
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e7c:	4b7a      	ldr	r3, [pc, #488]	; (8004068 <send_triad_data+0x584>)
 8003e7e:	20a4      	movs	r0, #164	; 0xa4
 8003e80:	0040      	lsls	r0, r0, #1
 8003e82:	4684      	mov	ip, r0
 8003e84:	2270      	movs	r2, #112	; 0x70
 8003e86:	4690      	mov	r8, r2
 8003e88:	2208      	movs	r2, #8
 8003e8a:	4691      	mov	r9, r2
 8003e8c:	44b9      	add	r9, r7
 8003e8e:	44c8      	add	r8, r9
 8003e90:	44c4      	add	ip, r8
 8003e92:	4463      	add	r3, ip
 8003e94:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003e96:	6538      	str	r0, [r7, #80]	; 0x50
 8003e98:	4b73      	ldr	r3, [pc, #460]	; (8004068 <send_triad_data+0x584>)
 8003e9a:	24a4      	movs	r4, #164	; 0xa4
 8003e9c:	0064      	lsls	r4, r4, #1
 8003e9e:	46a4      	mov	ip, r4
 8003ea0:	2270      	movs	r2, #112	; 0x70
 8003ea2:	4690      	mov	r8, r2
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	4691      	mov	r9, r2
 8003ea8:	44b9      	add	r9, r7
 8003eaa:	44c8      	add	r8, r9
 8003eac:	44c4      	add	ip, r8
 8003eae:	4463      	add	r3, ip
 8003eb0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003eb2:	64fc      	str	r4, [r7, #76]	; 0x4c
 8003eb4:	4b6c      	ldr	r3, [pc, #432]	; (8004068 <send_triad_data+0x584>)
 8003eb6:	25a4      	movs	r5, #164	; 0xa4
 8003eb8:	006d      	lsls	r5, r5, #1
 8003eba:	46ac      	mov	ip, r5
 8003ebc:	2270      	movs	r2, #112	; 0x70
 8003ebe:	4690      	mov	r8, r2
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	4691      	mov	r9, r2
 8003ec4:	44b9      	add	r9, r7
 8003ec6:	44c8      	add	r8, r9
 8003ec8:	44c4      	add	ip, r8
 8003eca:	4463      	add	r3, ip
 8003ecc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003ece:	64bd      	str	r5, [r7, #72]	; 0x48
 8003ed0:	4b65      	ldr	r3, [pc, #404]	; (8004068 <send_triad_data+0x584>)
 8003ed2:	26a4      	movs	r6, #164	; 0xa4
 8003ed4:	0076      	lsls	r6, r6, #1
 8003ed6:	46b4      	mov	ip, r6
 8003ed8:	2270      	movs	r2, #112	; 0x70
 8003eda:	4690      	mov	r8, r2
 8003edc:	2208      	movs	r2, #8
 8003ede:	4691      	mov	r9, r2
 8003ee0:	44b9      	add	r9, r7
 8003ee2:	44c8      	add	r8, r9
 8003ee4:	44c4      	add	ip, r8
 8003ee6:	4463      	add	r3, ip
 8003ee8:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8003eea:	647e      	str	r6, [r7, #68]	; 0x44
 8003eec:	4b5e      	ldr	r3, [pc, #376]	; (8004068 <send_triad_data+0x584>)
 8003eee:	22a4      	movs	r2, #164	; 0xa4
 8003ef0:	0052      	lsls	r2, r2, #1
 8003ef2:	4694      	mov	ip, r2
 8003ef4:	2270      	movs	r2, #112	; 0x70
 8003ef6:	4690      	mov	r8, r2
 8003ef8:	2208      	movs	r2, #8
 8003efa:	4691      	mov	r9, r2
 8003efc:	44b9      	add	r9, r7
 8003efe:	44c8      	add	r8, r9
 8003f00:	44c4      	add	ip, r8
 8003f02:	4463      	add	r3, ip
 8003f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f06:	643a      	str	r2, [r7, #64]	; 0x40
 8003f08:	4b57      	ldr	r3, [pc, #348]	; (8004068 <send_triad_data+0x584>)
 8003f0a:	21a4      	movs	r1, #164	; 0xa4
 8003f0c:	0049      	lsls	r1, r1, #1
 8003f0e:	468c      	mov	ip, r1
 8003f10:	2270      	movs	r2, #112	; 0x70
 8003f12:	4690      	mov	r8, r2
 8003f14:	2208      	movs	r2, #8
 8003f16:	4691      	mov	r9, r2
 8003f18:	44b9      	add	r9, r7
 8003f1a:	44c8      	add	r8, r9
 8003f1c:	44c4      	add	ip, r8
 8003f1e:	4463      	add	r3, ip
 8003f20:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003f22:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003f24:	4b50      	ldr	r3, [pc, #320]	; (8004068 <send_triad_data+0x584>)
 8003f26:	20a4      	movs	r0, #164	; 0xa4
 8003f28:	0040      	lsls	r0, r0, #1
 8003f2a:	4684      	mov	ip, r0
 8003f2c:	2270      	movs	r2, #112	; 0x70
 8003f2e:	4690      	mov	r8, r2
 8003f30:	2208      	movs	r2, #8
 8003f32:	4691      	mov	r9, r2
 8003f34:	44b9      	add	r9, r7
 8003f36:	44c8      	add	r8, r9
 8003f38:	44c4      	add	ip, r8
 8003f3a:	4463      	add	r3, ip
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f40:	4b49      	ldr	r3, [pc, #292]	; (8004068 <send_triad_data+0x584>)
 8003f42:	20a4      	movs	r0, #164	; 0xa4
 8003f44:	0040      	lsls	r0, r0, #1
 8003f46:	4684      	mov	ip, r0
 8003f48:	2270      	movs	r2, #112	; 0x70
 8003f4a:	4690      	mov	r8, r2
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	4691      	mov	r9, r2
 8003f50:	44b9      	add	r9, r7
 8003f52:	44c8      	add	r8, r9
 8003f54:	44c4      	add	ip, r8
 8003f56:	4463      	add	r3, ip
 8003f58:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003f5a:	6378      	str	r0, [r7, #52]	; 0x34
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <send_triad_data+0x584>)
 8003f5e:	24a4      	movs	r4, #164	; 0xa4
 8003f60:	0064      	lsls	r4, r4, #1
 8003f62:	46a4      	mov	ip, r4
 8003f64:	2270      	movs	r2, #112	; 0x70
 8003f66:	4690      	mov	r8, r2
 8003f68:	2208      	movs	r2, #8
 8003f6a:	4691      	mov	r9, r2
 8003f6c:	44b9      	add	r9, r7
 8003f6e:	44c8      	add	r8, r9
 8003f70:	44c4      	add	ip, r8
 8003f72:	4463      	add	r3, ip
 8003f74:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003f76:	633c      	str	r4, [r7, #48]	; 0x30
 8003f78:	4b3b      	ldr	r3, [pc, #236]	; (8004068 <send_triad_data+0x584>)
 8003f7a:	25a4      	movs	r5, #164	; 0xa4
 8003f7c:	006d      	lsls	r5, r5, #1
 8003f7e:	46ac      	mov	ip, r5
 8003f80:	2270      	movs	r2, #112	; 0x70
 8003f82:	4690      	mov	r8, r2
 8003f84:	2208      	movs	r2, #8
 8003f86:	4691      	mov	r9, r2
 8003f88:	44b9      	add	r9, r7
 8003f8a:	44c8      	add	r8, r9
 8003f8c:	44c4      	add	ip, r8
 8003f8e:	4463      	add	r3, ip
 8003f90:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8003f92:	62fd      	str	r5, [r7, #44]	; 0x2c
 8003f94:	4b34      	ldr	r3, [pc, #208]	; (8004068 <send_triad_data+0x584>)
 8003f96:	26a4      	movs	r6, #164	; 0xa4
 8003f98:	0076      	lsls	r6, r6, #1
 8003f9a:	46b4      	mov	ip, r6
 8003f9c:	2270      	movs	r2, #112	; 0x70
 8003f9e:	4690      	mov	r8, r2
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	4691      	mov	r9, r2
 8003fa4:	44b9      	add	r9, r7
 8003fa6:	44c8      	add	r8, r9
 8003fa8:	44c4      	add	ip, r8
 8003faa:	4463      	add	r3, ip
 8003fac:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8003fae:	62be      	str	r6, [r7, #40]	; 0x28
 8003fb0:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <send_triad_data+0x584>)
 8003fb2:	22a4      	movs	r2, #164	; 0xa4
 8003fb4:	0052      	lsls	r2, r2, #1
 8003fb6:	4694      	mov	ip, r2
 8003fb8:	2270      	movs	r2, #112	; 0x70
 8003fba:	4690      	mov	r8, r2
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	4691      	mov	r9, r2
 8003fc0:	44b9      	add	r9, r7
 8003fc2:	44c8      	add	r8, r9
 8003fc4:	44c4      	add	ip, r8
 8003fc6:	4463      	add	r3, ip
 8003fc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fca:	627a      	str	r2, [r7, #36]	; 0x24
 8003fcc:	4b26      	ldr	r3, [pc, #152]	; (8004068 <send_triad_data+0x584>)
 8003fce:	21a4      	movs	r1, #164	; 0xa4
 8003fd0:	0049      	lsls	r1, r1, #1
 8003fd2:	468c      	mov	ip, r1
 8003fd4:	2270      	movs	r2, #112	; 0x70
 8003fd6:	4690      	mov	r8, r2
 8003fd8:	2208      	movs	r2, #8
 8003fda:	4691      	mov	r9, r2
 8003fdc:	44b9      	add	r9, r7
 8003fde:	44c8      	add	r8, r9
 8003fe0:	44c4      	add	ip, r8
 8003fe2:	4463      	add	r3, ip
 8003fe4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fe6:	6239      	str	r1, [r7, #32]
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <send_triad_data+0x584>)
 8003fea:	20a4      	movs	r0, #164	; 0xa4
 8003fec:	0040      	lsls	r0, r0, #1
 8003fee:	4684      	mov	ip, r0
 8003ff0:	2270      	movs	r2, #112	; 0x70
 8003ff2:	4690      	mov	r8, r2
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	4691      	mov	r9, r2
 8003ff8:	44b9      	add	r9, r7
 8003ffa:	44c8      	add	r8, r9
 8003ffc:	44c4      	add	ip, r8
 8003ffe:	4463      	add	r3, ip
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	4b18      	ldr	r3, [pc, #96]	; (8004068 <send_triad_data+0x584>)
 8004006:	20a4      	movs	r0, #164	; 0xa4
 8004008:	0040      	lsls	r0, r0, #1
 800400a:	4684      	mov	ip, r0
 800400c:	2270      	movs	r2, #112	; 0x70
 800400e:	4690      	mov	r8, r2
 8004010:	2208      	movs	r2, #8
 8004012:	4691      	mov	r9, r2
 8004014:	44b9      	add	r9, r7
 8004016:	44c8      	add	r8, r9
 8004018:	44c4      	add	ip, r8
 800401a:	4463      	add	r3, ip
 800401c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800401e:	61b8      	str	r0, [r7, #24]
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <send_triad_data+0x584>)
 8004022:	24a4      	movs	r4, #164	; 0xa4
 8004024:	0064      	lsls	r4, r4, #1
 8004026:	46a4      	mov	ip, r4
 8004028:	2270      	movs	r2, #112	; 0x70
 800402a:	4690      	mov	r8, r2
 800402c:	2208      	movs	r2, #8
 800402e:	4691      	mov	r9, r2
 8004030:	44b9      	add	r9, r7
 8004032:	44c8      	add	r8, r9
 8004034:	44c4      	add	ip, r8
 8004036:	4463      	add	r3, ip
 8004038:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800403a:	617c      	str	r4, [r7, #20]
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <send_triad_data+0x584>)
 800403e:	25a4      	movs	r5, #164	; 0xa4
 8004040:	006d      	lsls	r5, r5, #1
 8004042:	46ac      	mov	ip, r5
 8004044:	2270      	movs	r2, #112	; 0x70
 8004046:	4690      	mov	r8, r2
 8004048:	2208      	movs	r2, #8
 800404a:	4691      	mov	r9, r2
 800404c:	44b9      	add	r9, r7
 800404e:	44c8      	add	r8, r9
 8004050:	44c4      	add	ip, r8
 8004052:	4463      	add	r3, ip
 8004054:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004056:	613d      	str	r5, [r7, #16]
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <send_triad_data+0x584>)
 800405a:	26a4      	movs	r6, #164	; 0xa4
 800405c:	0076      	lsls	r6, r6, #1
 800405e:	46b4      	mov	ip, r6
 8004060:	2270      	movs	r2, #112	; 0x70
 8004062:	4690      	mov	r8, r2
 8004064:	e002      	b.n	800406c <send_triad_data+0x588>
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	fffffec4 	.word	0xfffffec4
 800406c:	2208      	movs	r2, #8
 800406e:	4691      	mov	r9, r2
 8004070:	44b9      	add	r9, r7
 8004072:	44c8      	add	r8, r9
 8004074:	44c4      	add	ip, r8
 8004076:	4463      	add	r3, ip
 8004078:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 800407a:	60fe      	str	r6, [r7, #12]
 800407c:	4b6a      	ldr	r3, [pc, #424]	; (8004228 <send_triad_data+0x744>)
 800407e:	22a4      	movs	r2, #164	; 0xa4
 8004080:	0052      	lsls	r2, r2, #1
 8004082:	4694      	mov	ip, r2
 8004084:	2270      	movs	r2, #112	; 0x70
 8004086:	4690      	mov	r8, r2
 8004088:	2208      	movs	r2, #8
 800408a:	4691      	mov	r9, r2
 800408c:	44b9      	add	r9, r7
 800408e:	44c8      	add	r8, r9
 8004090:	44c4      	add	ip, r8
 8004092:	4463      	add	r3, ip
 8004094:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004096:	4693      	mov	fp, r2
 8004098:	4b63      	ldr	r3, [pc, #396]	; (8004228 <send_triad_data+0x744>)
 800409a:	22a4      	movs	r2, #164	; 0xa4
 800409c:	0052      	lsls	r2, r2, #1
 800409e:	4694      	mov	ip, r2
 80040a0:	2270      	movs	r2, #112	; 0x70
 80040a2:	4690      	mov	r8, r2
 80040a4:	2208      	movs	r2, #8
 80040a6:	4691      	mov	r9, r2
 80040a8:	44b9      	add	r9, r7
 80040aa:	44c8      	add	r8, r9
 80040ac:	44c4      	add	ip, r8
 80040ae:	4463      	add	r3, ip
 80040b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040b2:	4692      	mov	sl, r2
 80040b4:	4b5c      	ldr	r3, [pc, #368]	; (8004228 <send_triad_data+0x744>)
 80040b6:	22a4      	movs	r2, #164	; 0xa4
 80040b8:	0052      	lsls	r2, r2, #1
 80040ba:	4694      	mov	ip, r2
 80040bc:	2270      	movs	r2, #112	; 0x70
 80040be:	4690      	mov	r8, r2
 80040c0:	2208      	movs	r2, #8
 80040c2:	4691      	mov	r9, r2
 80040c4:	44b9      	add	r9, r7
 80040c6:	44c8      	add	r8, r9
 80040c8:	44c4      	add	ip, r8
 80040ca:	4463      	add	r3, ip
 80040cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80040ce:	603a      	str	r2, [r7, #0]
 80040d0:	4b55      	ldr	r3, [pc, #340]	; (8004228 <send_triad_data+0x744>)
 80040d2:	22a4      	movs	r2, #164	; 0xa4
 80040d4:	0052      	lsls	r2, r2, #1
 80040d6:	4694      	mov	ip, r2
 80040d8:	2270      	movs	r2, #112	; 0x70
 80040da:	4690      	mov	r8, r2
 80040dc:	2208      	movs	r2, #8
 80040de:	4691      	mov	r9, r2
 80040e0:	44b9      	add	r9, r7
 80040e2:	44c8      	add	r8, r9
 80040e4:	44c4      	add	ip, r8
 80040e6:	4463      	add	r3, ip
 80040e8:	6f9e      	ldr	r6, [r3, #120]	; 0x78
 80040ea:	4b4f      	ldr	r3, [pc, #316]	; (8004228 <send_triad_data+0x744>)
 80040ec:	22a4      	movs	r2, #164	; 0xa4
 80040ee:	0052      	lsls	r2, r2, #1
 80040f0:	4694      	mov	ip, r2
 80040f2:	2270      	movs	r2, #112	; 0x70
 80040f4:	4690      	mov	r8, r2
 80040f6:	2208      	movs	r2, #8
 80040f8:	4691      	mov	r9, r2
 80040fa:	44b9      	add	r9, r7
 80040fc:	44c8      	add	r8, r9
 80040fe:	44c4      	add	ip, r8
 8004100:	4463      	add	r3, ip
 8004102:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 8004104:	4b48      	ldr	r3, [pc, #288]	; (8004228 <send_triad_data+0x744>)
 8004106:	21a4      	movs	r1, #164	; 0xa4
 8004108:	0049      	lsls	r1, r1, #1
 800410a:	2070      	movs	r0, #112	; 0x70
 800410c:	2208      	movs	r2, #8
 800410e:	18ba      	adds	r2, r7, r2
 8004110:	1812      	adds	r2, r2, r0
 8004112:	1852      	adds	r2, r2, r1
 8004114:	18d2      	adds	r2, r2, r3
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	58d4      	ldr	r4, [r2, r3]
 800411a:	4b43      	ldr	r3, [pc, #268]	; (8004228 <send_triad_data+0x744>)
 800411c:	2208      	movs	r2, #8
 800411e:	18ba      	adds	r2, r7, r2
 8004120:	1812      	adds	r2, r2, r0
 8004122:	1852      	adds	r2, r2, r1
 8004124:	18d2      	adds	r2, r2, r3
 8004126:	2384      	movs	r3, #132	; 0x84
 8004128:	58d3      	ldr	r3, [r2, r3]
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	4b3e      	ldr	r3, [pc, #248]	; (8004228 <send_triad_data+0x744>)
 800412e:	0002      	movs	r2, r0
 8004130:	2008      	movs	r0, #8
 8004132:	1838      	adds	r0, r7, r0
 8004134:	1880      	adds	r0, r0, r2
 8004136:	1842      	adds	r2, r0, r1
 8004138:	18d2      	adds	r2, r2, r3
 800413a:	2388      	movs	r3, #136	; 0x88
 800413c:	58d1      	ldr	r1, [r2, r3]
 800413e:	4b3a      	ldr	r3, [pc, #232]	; (8004228 <send_triad_data+0x744>)
 8004140:	22a4      	movs	r2, #164	; 0xa4
 8004142:	0052      	lsls	r2, r2, #1
 8004144:	2070      	movs	r0, #112	; 0x70
 8004146:	4684      	mov	ip, r0
 8004148:	2008      	movs	r0, #8
 800414a:	4680      	mov	r8, r0
 800414c:	44b8      	add	r8, r7
 800414e:	44c4      	add	ip, r8
 8004150:	4462      	add	r2, ip
 8004152:	18d2      	adds	r2, r2, r3
 8004154:	238c      	movs	r3, #140	; 0x8c
 8004156:	58d3      	ldr	r3, [r2, r3]
 8004158:	4a34      	ldr	r2, [pc, #208]	; (800422c <send_triad_data+0x748>)
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	229c      	movs	r2, #156	; 0x9c
 800415e:	4694      	mov	ip, r2
 8004160:	2070      	movs	r0, #112	; 0x70
 8004162:	4680      	mov	r8, r0
 8004164:	2208      	movs	r2, #8
 8004166:	4691      	mov	r9, r2
 8004168:	44b9      	add	r9, r7
 800416a:	44c8      	add	r8, r9
 800416c:	44c4      	add	ip, r8
 800416e:	9321      	str	r3, [sp, #132]	; 0x84
 8004170:	9120      	str	r1, [sp, #128]	; 0x80
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	931f      	str	r3, [sp, #124]	; 0x7c
 8004176:	941e      	str	r4, [sp, #120]	; 0x78
 8004178:	951d      	str	r5, [sp, #116]	; 0x74
 800417a:	961c      	str	r6, [sp, #112]	; 0x70
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004180:	4652      	mov	r2, sl
 8004182:	921a      	str	r2, [sp, #104]	; 0x68
 8004184:	465a      	mov	r2, fp
 8004186:	9219      	str	r2, [sp, #100]	; 0x64
 8004188:	68fe      	ldr	r6, [r7, #12]
 800418a:	9618      	str	r6, [sp, #96]	; 0x60
 800418c:	693d      	ldr	r5, [r7, #16]
 800418e:	9517      	str	r5, [sp, #92]	; 0x5c
 8004190:	697c      	ldr	r4, [r7, #20]
 8004192:	9416      	str	r4, [sp, #88]	; 0x58
 8004194:	69b8      	ldr	r0, [r7, #24]
 8004196:	9015      	str	r0, [sp, #84]	; 0x54
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	9314      	str	r3, [sp, #80]	; 0x50
 800419c:	6a39      	ldr	r1, [r7, #32]
 800419e:	9113      	str	r1, [sp, #76]	; 0x4c
 80041a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a2:	9212      	str	r2, [sp, #72]	; 0x48
 80041a4:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80041a6:	9611      	str	r6, [sp, #68]	; 0x44
 80041a8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80041aa:	9510      	str	r5, [sp, #64]	; 0x40
 80041ac:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80041ae:	940f      	str	r4, [sp, #60]	; 0x3c
 80041b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80041b2:	900e      	str	r0, [sp, #56]	; 0x38
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	930d      	str	r3, [sp, #52]	; 0x34
 80041b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041ba:	910c      	str	r1, [sp, #48]	; 0x30
 80041bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041be:	920b      	str	r2, [sp, #44]	; 0x2c
 80041c0:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 80041c2:	960a      	str	r6, [sp, #40]	; 0x28
 80041c4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80041c6:	9509      	str	r5, [sp, #36]	; 0x24
 80041c8:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80041ca:	9408      	str	r4, [sp, #32]
 80041cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80041ce:	9007      	str	r0, [sp, #28]
 80041d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d2:	9306      	str	r3, [sp, #24]
 80041d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041d6:	9105      	str	r1, [sp, #20]
 80041d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041da:	9204      	str	r2, [sp, #16]
 80041dc:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 80041de:	9603      	str	r6, [sp, #12]
 80041e0:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 80041e2:	9502      	str	r5, [sp, #8]
 80041e4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80041e6:	9401      	str	r4, [sp, #4]
 80041e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041ea:	9000      	str	r0, [sp, #0]
 80041ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4660      	mov	r0, ip
 80041f4:	f008 fb26 	bl	800c844 <siprintf>
		  separated_data[18], separated_data[19], separated_data[20], separated_data[21], separated_data[22], separated_data[23], \
		  separated_data[24], separated_data[25], separated_data[26], separated_data[27], separated_data[28], separated_data[29], \
		  separated_data[30], separated_data[31], separated_data[32], separated_data[33], separated_data[34], separated_data[35]);


	HAL_UART_Transmit_IT(huart, (uint8_t *)string, sizeof(string));
 80041f8:	239c      	movs	r3, #156	; 0x9c
 80041fa:	2270      	movs	r2, #112	; 0x70
 80041fc:	2108      	movs	r1, #8
 80041fe:	468c      	mov	ip, r1
 8004200:	44bc      	add	ip, r7
 8004202:	4462      	add	r2, ip
 8004204:	18d1      	adds	r1, r2, r3
 8004206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004208:	2296      	movs	r2, #150	; 0x96
 800420a:	0018      	movs	r0, r3
 800420c:	f005 fcde 	bl	8009bcc <HAL_UART_Transmit_IT>
	HAL_Delay(40);
 8004210:	2028      	movs	r0, #40	; 0x28
 8004212:	f000 f8bd 	bl	8004390 <HAL_Delay>
}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	46bd      	mov	sp, r7
 800421a:	b071      	add	sp, #452	; 0x1c4
 800421c:	bcf0      	pop	{r4, r5, r6, r7}
 800421e:	46bb      	mov	fp, r7
 8004220:	46b2      	mov	sl, r6
 8004222:	46a9      	mov	r9, r5
 8004224:	46a0      	mov	r8, r4
 8004226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004228:	fffffec4 	.word	0xfffffec4
 800422c:	0800ec70 	.word	0x0800ec70

08004230 <Reset_Handler>:
 8004230:	480d      	ldr	r0, [pc, #52]	; (8004268 <LoopForever+0x2>)
 8004232:	4685      	mov	sp, r0
 8004234:	f7ff fb14 	bl	8003860 <SystemInit>
 8004238:	480c      	ldr	r0, [pc, #48]	; (800426c <LoopForever+0x6>)
 800423a:	490d      	ldr	r1, [pc, #52]	; (8004270 <LoopForever+0xa>)
 800423c:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <LoopForever+0xe>)
 800423e:	2300      	movs	r3, #0
 8004240:	e002      	b.n	8004248 <LoopCopyDataInit>

08004242 <CopyDataInit>:
 8004242:	58d4      	ldr	r4, [r2, r3]
 8004244:	50c4      	str	r4, [r0, r3]
 8004246:	3304      	adds	r3, #4

08004248 <LoopCopyDataInit>:
 8004248:	18c4      	adds	r4, r0, r3
 800424a:	428c      	cmp	r4, r1
 800424c:	d3f9      	bcc.n	8004242 <CopyDataInit>
 800424e:	4a0a      	ldr	r2, [pc, #40]	; (8004278 <LoopForever+0x12>)
 8004250:	4c0a      	ldr	r4, [pc, #40]	; (800427c <LoopForever+0x16>)
 8004252:	2300      	movs	r3, #0
 8004254:	e001      	b.n	800425a <LoopFillZerobss>

08004256 <FillZerobss>:
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	3204      	adds	r2, #4

0800425a <LoopFillZerobss>:
 800425a:	42a2      	cmp	r2, r4
 800425c:	d3fb      	bcc.n	8004256 <FillZerobss>
 800425e:	f007 fd7d 	bl	800bd5c <__libc_init_array>
 8004262:	f7fe f8a3 	bl	80023ac <main>

08004266 <LoopForever>:
 8004266:	e7fe      	b.n	8004266 <LoopForever>
 8004268:	20024000 	.word	0x20024000
 800426c:	20000000 	.word	0x20000000
 8004270:	20000208 	.word	0x20000208
 8004274:	0800f238 	.word	0x0800f238
 8004278:	20000208 	.word	0x20000208
 800427c:	2000061c 	.word	0x2000061c

08004280 <ADC1_COMP_IRQHandler>:
 8004280:	e7fe      	b.n	8004280 <ADC1_COMP_IRQHandler>
	...

08004284 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800428a:	1dfb      	adds	r3, r7, #7
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_Init+0x3c>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_Init+0x3c>)
 8004296:	2180      	movs	r1, #128	; 0x80
 8004298:	0049      	lsls	r1, r1, #1
 800429a:	430a      	orrs	r2, r1
 800429c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800429e:	2000      	movs	r0, #0
 80042a0:	f000 f810 	bl	80042c4 <HAL_InitTick>
 80042a4:	1e03      	subs	r3, r0, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80042a8:	1dfb      	adds	r3, r7, #7
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e001      	b.n	80042b4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80042b0:	f7fe fefe 	bl	80030b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042b4:	1dfb      	adds	r3, r7, #7
 80042b6:	781b      	ldrb	r3, [r3, #0]
}
 80042b8:	0018      	movs	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40022000 	.word	0x40022000

080042c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042cc:	230f      	movs	r3, #15
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80042d4:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_InitTick+0x88>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d02b      	beq.n	8004334 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80042dc:	4b1c      	ldr	r3, [pc, #112]	; (8004350 <HAL_InitTick+0x8c>)
 80042de:	681c      	ldr	r4, [r3, #0]
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_InitTick+0x88>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	0019      	movs	r1, r3
 80042e6:	23fa      	movs	r3, #250	; 0xfa
 80042e8:	0098      	lsls	r0, r3, #2
 80042ea:	f7fb ff27 	bl	800013c <__udivsi3>
 80042ee:	0003      	movs	r3, r0
 80042f0:	0019      	movs	r1, r3
 80042f2:	0020      	movs	r0, r4
 80042f4:	f7fb ff22 	bl	800013c <__udivsi3>
 80042f8:	0003      	movs	r3, r0
 80042fa:	0018      	movs	r0, r3
 80042fc:	f000 fe3f 	bl	8004f7e <HAL_SYSTICK_Config>
 8004300:	1e03      	subs	r3, r0, #0
 8004302:	d112      	bne.n	800432a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b03      	cmp	r3, #3
 8004308:	d80a      	bhi.n	8004320 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	2301      	movs	r3, #1
 800430e:	425b      	negs	r3, r3
 8004310:	2200      	movs	r2, #0
 8004312:	0018      	movs	r0, r3
 8004314:	f000 fdfe 	bl	8004f14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004318:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <HAL_InitTick+0x90>)
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e00d      	b.n	800433c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004320:	230f      	movs	r3, #15
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	2201      	movs	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	e008      	b.n	800433c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800432a:	230f      	movs	r3, #15
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	2201      	movs	r2, #1
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e003      	b.n	800433c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004334:	230f      	movs	r3, #15
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800433c:	230f      	movs	r3, #15
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	781b      	ldrb	r3, [r3, #0]
}
 8004342:	0018      	movs	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	b005      	add	sp, #20
 8004348:	bd90      	pop	{r4, r7, pc}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	20000034 	.word	0x20000034
 8004350:	2000002c 	.word	0x2000002c
 8004354:	20000030 	.word	0x20000030

08004358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_IncTick+0x1c>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	001a      	movs	r2, r3
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_IncTick+0x20>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	18d2      	adds	r2, r2, r3
 8004368:	4b03      	ldr	r3, [pc, #12]	; (8004378 <HAL_IncTick+0x20>)
 800436a:	601a      	str	r2, [r3, #0]
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	20000034 	.word	0x20000034
 8004378:	20000608 	.word	0x20000608

0800437c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  return uwTick;
 8004380:	4b02      	ldr	r3, [pc, #8]	; (800438c <HAL_GetTick+0x10>)
 8004382:	681b      	ldr	r3, [r3, #0]
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	20000608 	.word	0x20000608

08004390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004398:	f7ff fff0 	bl	800437c <HAL_GetTick>
 800439c:	0003      	movs	r3, r0
 800439e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3301      	adds	r3, #1
 80043a8:	d005      	beq.n	80043b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043aa:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <HAL_Delay+0x44>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	001a      	movs	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	189b      	adds	r3, r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	f7ff ffe0 	bl	800437c <HAL_GetTick>
 80043bc:	0002      	movs	r2, r0
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d8f7      	bhi.n	80043b8 <HAL_Delay+0x28>
  {
  }
}
 80043c8:	46c0      	nop			; (mov r8, r8)
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b004      	add	sp, #16
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	20000034 	.word	0x20000034

080043d8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a06      	ldr	r2, [pc, #24]	; (8004400 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	0019      	movs	r1, r3
 80043ea:	4b04      	ldr	r3, [pc, #16]	; (80043fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]
}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b002      	add	sp, #8
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	40010000 	.word	0x40010000
 8004400:	fffff9ff 	.word	0xfffff9ff

08004404 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a05      	ldr	r2, [pc, #20]	; (8004428 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004414:	401a      	ands	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	601a      	str	r2, [r3, #0]
}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	46bd      	mov	sp, r7
 8004422:	b002      	add	sp, #8
 8004424:	bd80      	pop	{r7, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	fe3fffff 	.word	0xfe3fffff

0800442c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	23e0      	movs	r3, #224	; 0xe0
 800443a:	045b      	lsls	r3, r3, #17
 800443c:	4013      	ands	r3, r2
}
 800443e:	0018      	movs	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	b002      	add	sp, #8
 8004444:	bd80      	pop	{r7, pc}

08004446 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	2104      	movs	r1, #4
 800445a:	400a      	ands	r2, r1
 800445c:	2107      	movs	r1, #7
 800445e:	4091      	lsls	r1, r2
 8004460:	000a      	movs	r2, r1
 8004462:	43d2      	mvns	r2, r2
 8004464:	401a      	ands	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2104      	movs	r1, #4
 800446a:	400b      	ands	r3, r1
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4099      	lsls	r1, r3
 8004470:	000b      	movs	r3, r1
 8004472:	431a      	orrs	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004478:	46c0      	nop			; (mov r8, r8)
 800447a:	46bd      	mov	sp, r7
 800447c:	b004      	add	sp, #16
 800447e:	bd80      	pop	{r7, pc}

08004480 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	211f      	movs	r1, #31
 8004494:	400a      	ands	r2, r1
 8004496:	210f      	movs	r1, #15
 8004498:	4091      	lsls	r1, r2
 800449a:	000a      	movs	r2, r1
 800449c:	43d2      	mvns	r2, r2
 800449e:	401a      	ands	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	0e9b      	lsrs	r3, r3, #26
 80044a4:	210f      	movs	r1, #15
 80044a6:	4019      	ands	r1, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	201f      	movs	r0, #31
 80044ac:	4003      	ands	r3, r0
 80044ae:	4099      	lsls	r1, r3
 80044b0:	000b      	movs	r3, r1
 80044b2:	431a      	orrs	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044b8:	46c0      	nop			; (mov r8, r8)
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b004      	add	sp, #16
 80044be:	bd80      	pop	{r7, pc}

080044c0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	035b      	lsls	r3, r3, #13
 80044d2:	0b5b      	lsrs	r3, r3, #13
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	46bd      	mov	sp, r7
 80044de:	b002      	add	sp, #8
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	0352      	lsls	r2, r2, #13
 80044f4:	0b52      	lsrs	r2, r2, #13
 80044f6:	43d2      	mvns	r2, r2
 80044f8:	401a      	ands	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	b002      	add	sp, #8
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	0212      	lsls	r2, r2, #8
 800451c:	43d2      	mvns	r2, r2
 800451e:	401a      	ands	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	400b      	ands	r3, r1
 8004528:	4904      	ldr	r1, [pc, #16]	; (800453c <LL_ADC_SetChannelSamplingTime+0x34>)
 800452a:	400b      	ands	r3, r1
 800452c:	431a      	orrs	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	46bd      	mov	sp, r7
 8004536:	b004      	add	sp, #16
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	07ffff00 	.word	0x07ffff00

08004540 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a05      	ldr	r2, [pc, #20]	; (8004564 <LL_ADC_EnableInternalRegulator+0x24>)
 800454e:	4013      	ands	r3, r2
 8004550:	2280      	movs	r2, #128	; 0x80
 8004552:	0552      	lsls	r2, r2, #21
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	46bd      	mov	sp, r7
 800455e:	b002      	add	sp, #8
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	6fffffe8 	.word	0x6fffffe8

08004568 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	055b      	lsls	r3, r3, #21
 8004578:	401a      	ands	r2, r3
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	055b      	lsls	r3, r3, #21
 800457e:	429a      	cmp	r2, r3
 8004580:	d101      	bne.n	8004586 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004586:	2300      	movs	r3, #0
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b002      	add	sp, #8
 800458e:	bd80      	pop	{r7, pc}

08004590 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2201      	movs	r2, #1
 800459e:	4013      	ands	r3, r2
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <LL_ADC_IsEnabled+0x18>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <LL_ADC_IsEnabled+0x1a>
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	0018      	movs	r0, r3
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b002      	add	sp, #8
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2204      	movs	r2, #4
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d101      	bne.n	80045ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	0018      	movs	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b002      	add	sp, #8
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045dc:	231f      	movs	r3, #31
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e1b1      	b.n	800495e <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f7fe fd7b 	bl	8003100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2254      	movs	r2, #84	; 0x54
 8004614:	2100      	movs	r1, #0
 8004616:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	0018      	movs	r0, r3
 800461e:	f7ff ffa3 	bl	8004568 <LL_ADC_IsInternalRegulatorEnabled>
 8004622:	1e03      	subs	r3, r0, #0
 8004624:	d115      	bne.n	8004652 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	0018      	movs	r0, r3
 800462c:	f7ff ff88 	bl	8004540 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004630:	4bcd      	ldr	r3, [pc, #820]	; (8004968 <HAL_ADC_Init+0x394>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	49cd      	ldr	r1, [pc, #820]	; (800496c <HAL_ADC_Init+0x398>)
 8004636:	0018      	movs	r0, r3
 8004638:	f7fb fd80 	bl	800013c <__udivsi3>
 800463c:	0003      	movs	r3, r0
 800463e:	3301      	adds	r3, #1
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004644:	e002      	b.n	800464c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	3b01      	subs	r3, #1
 800464a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f9      	bne.n	8004646 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	0018      	movs	r0, r3
 8004658:	f7ff ff86 	bl	8004568 <LL_ADC_IsInternalRegulatorEnabled>
 800465c:	1e03      	subs	r3, r0, #0
 800465e:	d10f      	bne.n	8004680 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004664:	2210      	movs	r2, #16
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004670:	2201      	movs	r2, #1
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004678:	231f      	movs	r3, #31
 800467a:	18fb      	adds	r3, r7, r3
 800467c:	2201      	movs	r2, #1
 800467e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	0018      	movs	r0, r3
 8004686:	f7ff ff94 	bl	80045b2 <LL_ADC_REG_IsConversionOngoing>
 800468a:	0003      	movs	r3, r0
 800468c:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004692:	2210      	movs	r2, #16
 8004694:	4013      	ands	r3, r2
 8004696:	d000      	beq.n	800469a <HAL_ADC_Init+0xc6>
 8004698:	e154      	b.n	8004944 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d000      	beq.n	80046a2 <HAL_ADC_Init+0xce>
 80046a0:	e150      	b.n	8004944 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a6:	4ab2      	ldr	r2, [pc, #712]	; (8004970 <HAL_ADC_Init+0x39c>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	2202      	movs	r2, #2
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7ff ff6a 	bl	8004590 <LL_ADC_IsEnabled>
 80046bc:	1e03      	subs	r3, r0, #0
 80046be:	d156      	bne.n	800476e <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2218      	movs	r2, #24
 80046c8:	4393      	bics	r3, r2
 80046ca:	0019      	movs	r1, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	0f9b      	lsrs	r3, r3, #30
 80046de:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046e4:	4313      	orrs	r3, r2
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	223c      	movs	r2, #60	; 0x3c
 80046f0:	5c9b      	ldrb	r3, [r3, r2]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d111      	bne.n	800471a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	0f9b      	lsrs	r3, r3, #30
 80046fc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004702:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004708:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800470e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	2201      	movs	r2, #1
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	4a94      	ldr	r2, [pc, #592]	; (8004974 <HAL_ADC_Init+0x3a0>)
 8004722:	4013      	ands	r3, r2
 8004724:	0019      	movs	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	430a      	orrs	r2, r1
 800472e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	23c0      	movs	r3, #192	; 0xc0
 8004736:	061b      	lsls	r3, r3, #24
 8004738:	429a      	cmp	r2, r3
 800473a:	d018      	beq.n	800476e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	05db      	lsls	r3, r3, #23
 8004744:	429a      	cmp	r2, r3
 8004746:	d012      	beq.n	800476e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	061b      	lsls	r3, r3, #24
 8004750:	429a      	cmp	r2, r3
 8004752:	d00c      	beq.n	800476e <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004754:	4b88      	ldr	r3, [pc, #544]	; (8004978 <HAL_ADC_Init+0x3a4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a88      	ldr	r2, [pc, #544]	; (800497c <HAL_ADC_Init+0x3a8>)
 800475a:	4013      	ands	r3, r2
 800475c:	0019      	movs	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	23f0      	movs	r3, #240	; 0xf0
 8004764:	039b      	lsls	r3, r3, #14
 8004766:	401a      	ands	r2, r3
 8004768:	4b83      	ldr	r3, [pc, #524]	; (8004978 <HAL_ADC_Init+0x3a4>)
 800476a:	430a      	orrs	r2, r1
 800476c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	7e1b      	ldrb	r3, [r3, #24]
 8004772:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	7e5b      	ldrb	r3, [r3, #25]
 8004778:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800477a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	7e9b      	ldrb	r3, [r3, #26]
 8004780:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004782:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_ADC_Init+0x1be>
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	015b      	lsls	r3, r3, #5
 8004790:	e000      	b.n	8004794 <HAL_ADC_Init+0x1c0>
 8004792:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004794:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800479a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	da04      	bge.n	80047ae <HAL_ADC_Init+0x1da>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	e001      	b.n	80047b2 <HAL_ADC_Init+0x1de>
 80047ae:	2380      	movs	r3, #128	; 0x80
 80047b0:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80047b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	212c      	movs	r1, #44	; 0x2c
 80047b8:	5c5b      	ldrb	r3, [r3, r1]
 80047ba:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80047bc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	5c9b      	ldrb	r3, [r3, r2]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d115      	bne.n	80047fa <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	7e9b      	ldrb	r3, [r3, #26]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d105      	bne.n	80047e2 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2280      	movs	r2, #128	; 0x80
 80047da:	0252      	lsls	r2, r2, #9
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	e00b      	b.n	80047fa <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	2220      	movs	r2, #32
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f2:	2201      	movs	r2, #1
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004806:	23e0      	movs	r3, #224	; 0xe0
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004810:	4313      	orrs	r3, r2
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4313      	orrs	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4a58      	ldr	r2, [pc, #352]	; (8004980 <HAL_ADC_Init+0x3ac>)
 8004820:	4013      	ands	r3, r2
 8004822:	0019      	movs	r1, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	430a      	orrs	r2, r1
 800482c:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	4a53      	ldr	r2, [pc, #332]	; (8004984 <HAL_ADC_Init+0x3b0>)
 8004836:	4013      	ands	r3, r2
 8004838:	0019      	movs	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	430a      	orrs	r2, r1
 8004842:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	001a      	movs	r2, r3
 800484e:	2100      	movs	r1, #0
 8004850:	f7ff fdf9 	bl	8004446 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	494a      	ldr	r1, [pc, #296]	; (8004988 <HAL_ADC_Init+0x3b4>)
 800485e:	001a      	movs	r2, r3
 8004860:	f7ff fdf1 	bl	8004446 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2110      	movs	r1, #16
 8004878:	4249      	negs	r1, r1
 800487a:	430a      	orrs	r2, r1
 800487c:	629a      	str	r2, [r3, #40]	; 0x28
 800487e:	e03a      	b.n	80048f6 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	039b      	lsls	r3, r3, #14
 8004888:	429a      	cmp	r2, r3
 800488a:	d134      	bne.n	80048f6 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e00c      	b.n	80048ac <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	40da      	lsrs	r2, r3
 800489c:	0013      	movs	r3, r2
 800489e:	220f      	movs	r2, #15
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b0f      	cmp	r3, #15
 80048a4:	d006      	beq.n	80048b4 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3301      	adds	r3, #1
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b07      	cmp	r3, #7
 80048b0:	d9ef      	bls.n	8004892 <HAL_ADC_Init+0x2be>
 80048b2:	e000      	b.n	80048b6 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 80048b4:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d109      	bne.n	80048d0 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2110      	movs	r1, #16
 80048c8:	4249      	negs	r1, r1
 80048ca:	430a      	orrs	r2, r1
 80048cc:	629a      	str	r2, [r3, #40]	; 0x28
 80048ce:	e012      	b.n	80048f6 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	3b01      	subs	r3, #1
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	221c      	movs	r2, #28
 80048e0:	4013      	ands	r3, r2
 80048e2:	2210      	movs	r2, #16
 80048e4:	4252      	negs	r2, r2
 80048e6:	409a      	lsls	r2, r3
 80048e8:	0011      	movs	r1, r2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4a23      	ldr	r2, [pc, #140]	; (800498c <HAL_ADC_Init+0x3b8>)
 80048fe:	4013      	ands	r3, r2
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	429a      	cmp	r2, r3
 8004904:	d10b      	bne.n	800491e <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004910:	2203      	movs	r2, #3
 8004912:	4393      	bics	r3, r2
 8004914:	2201      	movs	r2, #1
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800491c:	e01c      	b.n	8004958 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	2212      	movs	r2, #18
 8004924:	4393      	bics	r3, r2
 8004926:	2210      	movs	r2, #16
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	2201      	movs	r2, #1
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800493a:	231f      	movs	r3, #31
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	2201      	movs	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004942:	e009      	b.n	8004958 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	2210      	movs	r2, #16
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004950:	231f      	movs	r3, #31
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	2201      	movs	r2, #1
 8004956:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004958:	231f      	movs	r3, #31
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	781b      	ldrb	r3, [r3, #0]
}
 800495e:	0018      	movs	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	b008      	add	sp, #32
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	2000002c 	.word	0x2000002c
 800496c:	00030d40 	.word	0x00030d40
 8004970:	fffffefd 	.word	0xfffffefd
 8004974:	1ffffc02 	.word	0x1ffffc02
 8004978:	40012708 	.word	0x40012708
 800497c:	ffc3ffff 	.word	0xffc3ffff
 8004980:	fffe0219 	.word	0xfffe0219
 8004984:	dffffc02 	.word	0xdffffc02
 8004988:	07ffff04 	.word	0x07ffff04
 800498c:	833fffe7 	.word	0x833fffe7

08004990 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800499a:	2317      	movs	r3, #23
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2254      	movs	r2, #84	; 0x54
 80049aa:	5c9b      	ldrb	r3, [r3, r2]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x24>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e1c0      	b.n	8004d36 <HAL_ADC_ConfigChannel+0x3a6>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2254      	movs	r2, #84	; 0x54
 80049b8:	2101      	movs	r1, #1
 80049ba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7ff fdf6 	bl	80045b2 <LL_ADC_REG_IsConversionOngoing>
 80049c6:	1e03      	subs	r3, r0, #0
 80049c8:	d000      	beq.n	80049cc <HAL_ADC_ConfigChannel+0x3c>
 80049ca:	e1a3      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d100      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x46>
 80049d4:	e143      	b.n	8004c5e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	061b      	lsls	r3, r3, #24
 80049de:	429a      	cmp	r2, r3
 80049e0:	d004      	beq.n	80049ec <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049e6:	4ac1      	ldr	r2, [pc, #772]	; (8004cec <HAL_ADC_ConfigChannel+0x35c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d108      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	0019      	movs	r1, r3
 80049f6:	0010      	movs	r0, r2
 80049f8:	f7ff fd62 	bl	80044c0 <LL_ADC_REG_SetSequencerChAdd>
 80049fc:	e0c9      	b.n	8004b92 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	211f      	movs	r1, #31
 8004a08:	400b      	ands	r3, r1
 8004a0a:	210f      	movs	r1, #15
 8004a0c:	4099      	lsls	r1, r3
 8004a0e:	000b      	movs	r3, r1
 8004a10:	43db      	mvns	r3, r3
 8004a12:	4013      	ands	r3, r2
 8004a14:	0019      	movs	r1, r3
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	035b      	lsls	r3, r3, #13
 8004a1c:	0b5b      	lsrs	r3, r3, #13
 8004a1e:	d105      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x9c>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	0e9b      	lsrs	r3, r3, #26
 8004a26:	221f      	movs	r2, #31
 8004a28:	4013      	ands	r3, r2
 8004a2a:	e098      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2201      	movs	r2, #1
 8004a32:	4013      	ands	r3, r2
 8004a34:	d000      	beq.n	8004a38 <HAL_ADC_ConfigChannel+0xa8>
 8004a36:	e091      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x1cc>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d000      	beq.n	8004a44 <HAL_ADC_ConfigChannel+0xb4>
 8004a42:	e089      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x1c8>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d000      	beq.n	8004a50 <HAL_ADC_ConfigChannel+0xc0>
 8004a4e:	e081      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x1c4>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2208      	movs	r2, #8
 8004a56:	4013      	ands	r3, r2
 8004a58:	d000      	beq.n	8004a5c <HAL_ADC_ConfigChannel+0xcc>
 8004a5a:	e079      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x1c0>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2210      	movs	r2, #16
 8004a62:	4013      	ands	r3, r2
 8004a64:	d000      	beq.n	8004a68 <HAL_ADC_ConfigChannel+0xd8>
 8004a66:	e071      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x1bc>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d000      	beq.n	8004a74 <HAL_ADC_ConfigChannel+0xe4>
 8004a72:	e069      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x1b8>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2240      	movs	r2, #64	; 0x40
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d000      	beq.n	8004a80 <HAL_ADC_ConfigChannel+0xf0>
 8004a7e:	e061      	b.n	8004b44 <HAL_ADC_ConfigChannel+0x1b4>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2280      	movs	r2, #128	; 0x80
 8004a86:	4013      	ands	r3, r2
 8004a88:	d000      	beq.n	8004a8c <HAL_ADC_ConfigChannel+0xfc>
 8004a8a:	e059      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x1b0>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	2380      	movs	r3, #128	; 0x80
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	4013      	ands	r3, r2
 8004a96:	d151      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x1ac>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d149      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x1a8>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4013      	ands	r3, r2
 8004aae:	d141      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x1a4>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d139      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x1a0>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	015b      	lsls	r3, r3, #5
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d131      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x19c>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	2380      	movs	r3, #128	; 0x80
 8004ace:	019b      	lsls	r3, r3, #6
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d129      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x198>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	01db      	lsls	r3, r3, #7
 8004adc:	4013      	ands	r3, r2
 8004ade:	d121      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x194>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d119      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x190>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	025b      	lsls	r3, r3, #9
 8004af4:	4013      	ands	r3, r2
 8004af6:	d111      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x18c>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	029b      	lsls	r3, r3, #10
 8004b00:	4013      	ands	r3, r2
 8004b02:	d109      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x188>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	02db      	lsls	r3, r3, #11
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d001      	beq.n	8004b14 <HAL_ADC_ConfigChannel+0x184>
 8004b10:	2312      	movs	r3, #18
 8004b12:	e024      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b14:	2300      	movs	r3, #0
 8004b16:	e022      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b18:	2311      	movs	r3, #17
 8004b1a:	e020      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	e01e      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b20:	230f      	movs	r3, #15
 8004b22:	e01c      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b24:	230e      	movs	r3, #14
 8004b26:	e01a      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b28:	230d      	movs	r3, #13
 8004b2a:	e018      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b2c:	230c      	movs	r3, #12
 8004b2e:	e016      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b30:	230b      	movs	r3, #11
 8004b32:	e014      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b34:	230a      	movs	r3, #10
 8004b36:	e012      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b38:	2309      	movs	r3, #9
 8004b3a:	e010      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	e00e      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b40:	2307      	movs	r3, #7
 8004b42:	e00c      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b44:	2306      	movs	r3, #6
 8004b46:	e00a      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b48:	2305      	movs	r3, #5
 8004b4a:	e008      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	e006      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b50:	2303      	movs	r3, #3
 8004b52:	e004      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e002      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x1ce>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	6852      	ldr	r2, [r2, #4]
 8004b62:	201f      	movs	r0, #31
 8004b64:	4002      	ands	r2, r0
 8004b66:	4093      	lsls	r3, r2
 8004b68:	000a      	movs	r2, r1
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	089b      	lsrs	r3, r3, #2
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d808      	bhi.n	8004b92 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	001a      	movs	r2, r3
 8004b8e:	f7ff fc77 	bl	8004480 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	001a      	movs	r2, r3
 8004ba0:	f7ff fcb2 	bl	8004508 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	db00      	blt.n	8004bae <HAL_ADC_ConfigChannel+0x21e>
 8004bac:	e0bc      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bae:	4b50      	ldr	r3, [pc, #320]	; (8004cf0 <HAL_ADC_ConfigChannel+0x360>)
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f7ff fc3b 	bl	800442c <LL_ADC_GetCommonPathInternalCh>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a4d      	ldr	r2, [pc, #308]	; (8004cf4 <HAL_ADC_ConfigChannel+0x364>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d122      	bne.n	8004c0a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004bcc:	d11d      	bne.n	8004c0a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2280      	movs	r2, #128	; 0x80
 8004bd2:	0412      	lsls	r2, r2, #16
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	4a46      	ldr	r2, [pc, #280]	; (8004cf0 <HAL_ADC_ConfigChannel+0x360>)
 8004bd8:	0019      	movs	r1, r3
 8004bda:	0010      	movs	r0, r2
 8004bdc:	f7ff fc12 	bl	8004404 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004be0:	4b45      	ldr	r3, [pc, #276]	; (8004cf8 <HAL_ADC_ConfigChannel+0x368>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4945      	ldr	r1, [pc, #276]	; (8004cfc <HAL_ADC_ConfigChannel+0x36c>)
 8004be6:	0018      	movs	r0, r3
 8004be8:	f7fb faa8 	bl	800013c <__udivsi3>
 8004bec:	0003      	movs	r3, r0
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	0013      	movs	r3, r2
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	189b      	adds	r3, r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bfa:	e002      	b.n	8004c02 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f9      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004c08:	e08e      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a3c      	ldr	r2, [pc, #240]	; (8004d00 <HAL_ADC_ConfigChannel+0x370>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d10e      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x2a2>
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	2380      	movs	r3, #128	; 0x80
 8004c18:	045b      	lsls	r3, r3, #17
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d109      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2280      	movs	r2, #128	; 0x80
 8004c22:	0452      	lsls	r2, r2, #17
 8004c24:	4313      	orrs	r3, r2
 8004c26:	4a32      	ldr	r2, [pc, #200]	; (8004cf0 <HAL_ADC_ConfigChannel+0x360>)
 8004c28:	0019      	movs	r1, r3
 8004c2a:	0010      	movs	r0, r2
 8004c2c:	f7ff fbea 	bl	8004404 <LL_ADC_SetCommonPathInternalCh>
 8004c30:	e07a      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a33      	ldr	r2, [pc, #204]	; (8004d04 <HAL_ADC_ConfigChannel+0x374>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d000      	beq.n	8004c3e <HAL_ADC_ConfigChannel+0x2ae>
 8004c3c:	e074      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	03db      	lsls	r3, r3, #15
 8004c44:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004c46:	d000      	beq.n	8004c4a <HAL_ADC_ConfigChannel+0x2ba>
 8004c48:	e06e      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2280      	movs	r2, #128	; 0x80
 8004c4e:	03d2      	lsls	r2, r2, #15
 8004c50:	4313      	orrs	r3, r2
 8004c52:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <HAL_ADC_ConfigChannel+0x360>)
 8004c54:	0019      	movs	r1, r3
 8004c56:	0010      	movs	r0, r2
 8004c58:	f7ff fbd4 	bl	8004404 <LL_ADC_SetCommonPathInternalCh>
 8004c5c:	e064      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	2380      	movs	r3, #128	; 0x80
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d004      	beq.n	8004c74 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c6e:	4a1f      	ldr	r2, [pc, #124]	; (8004cec <HAL_ADC_ConfigChannel+0x35c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d107      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	0010      	movs	r0, r2
 8004c80:	f7ff fc2f 	bl	80044e2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	da4d      	bge.n	8004d28 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c8c:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <HAL_ADC_ConfigChannel+0x360>)
 8004c8e:	0018      	movs	r0, r3
 8004c90:	f7ff fbcc 	bl	800442c <LL_ADC_GetCommonPathInternalCh>
 8004c94:	0003      	movs	r3, r0
 8004c96:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <HAL_ADC_ConfigChannel+0x364>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d108      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <HAL_ADC_ConfigChannel+0x378>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	4a11      	ldr	r2, [pc, #68]	; (8004cf0 <HAL_ADC_ConfigChannel+0x360>)
 8004caa:	0019      	movs	r1, r3
 8004cac:	0010      	movs	r0, r2
 8004cae:	f7ff fba9 	bl	8004404 <LL_ADC_SetCommonPathInternalCh>
 8004cb2:	e039      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <HAL_ADC_ConfigChannel+0x370>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d108      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <HAL_ADC_ConfigChannel+0x37c>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <HAL_ADC_ConfigChannel+0x360>)
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	0010      	movs	r0, r2
 8004cca:	f7ff fb9b 	bl	8004404 <LL_ADC_SetCommonPathInternalCh>
 8004cce:	e02b      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a0b      	ldr	r2, [pc, #44]	; (8004d04 <HAL_ADC_ConfigChannel+0x374>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d126      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <HAL_ADC_ConfigChannel+0x380>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	4a03      	ldr	r2, [pc, #12]	; (8004cf0 <HAL_ADC_ConfigChannel+0x360>)
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	0010      	movs	r0, r2
 8004ce6:	f7ff fb8d 	bl	8004404 <LL_ADC_SetCommonPathInternalCh>
 8004cea:	e01d      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x398>
 8004cec:	80000004 	.word	0x80000004
 8004cf0:	40012708 	.word	0x40012708
 8004cf4:	b0001000 	.word	0xb0001000
 8004cf8:	2000002c 	.word	0x2000002c
 8004cfc:	00030d40 	.word	0x00030d40
 8004d00:	b8004000 	.word	0xb8004000
 8004d04:	b4002000 	.word	0xb4002000
 8004d08:	ff7fffff 	.word	0xff7fffff
 8004d0c:	feffffff 	.word	0xfeffffff
 8004d10:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	2220      	movs	r2, #32
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004d20:	2317      	movs	r3, #23
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	2201      	movs	r2, #1
 8004d26:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2254      	movs	r2, #84	; 0x54
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004d30:	2317      	movs	r3, #23
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	781b      	ldrb	r3, [r3, #0]
}
 8004d36:	0018      	movs	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b006      	add	sp, #24
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)

08004d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	0002      	movs	r2, r0
 8004d48:	1dfb      	adds	r3, r7, #7
 8004d4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d4c:	1dfb      	adds	r3, r7, #7
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b7f      	cmp	r3, #127	; 0x7f
 8004d52:	d809      	bhi.n	8004d68 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d54:	1dfb      	adds	r3, r7, #7
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	001a      	movs	r2, r3
 8004d5a:	231f      	movs	r3, #31
 8004d5c:	401a      	ands	r2, r3
 8004d5e:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <__NVIC_EnableIRQ+0x30>)
 8004d60:	2101      	movs	r1, #1
 8004d62:	4091      	lsls	r1, r2
 8004d64:	000a      	movs	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004d68:	46c0      	nop			; (mov r8, r8)
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b002      	add	sp, #8
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	e000e100 	.word	0xe000e100

08004d74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	0002      	movs	r2, r0
 8004d7c:	1dfb      	adds	r3, r7, #7
 8004d7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d80:	1dfb      	adds	r3, r7, #7
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b7f      	cmp	r3, #127	; 0x7f
 8004d86:	d810      	bhi.n	8004daa <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d88:	1dfb      	adds	r3, r7, #7
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	001a      	movs	r2, r3
 8004d8e:	231f      	movs	r3, #31
 8004d90:	4013      	ands	r3, r2
 8004d92:	4908      	ldr	r1, [pc, #32]	; (8004db4 <__NVIC_DisableIRQ+0x40>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	409a      	lsls	r2, r3
 8004d98:	0013      	movs	r3, r2
 8004d9a:	2280      	movs	r2, #128	; 0x80
 8004d9c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004d9e:	f3bf 8f4f 	dsb	sy
}
 8004da2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8004da4:	f3bf 8f6f 	isb	sy
}
 8004da8:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b002      	add	sp, #8
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	e000e100 	.word	0xe000e100

08004db8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	0002      	movs	r2, r0
 8004dc0:	1dfb      	adds	r3, r7, #7
 8004dc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004dc4:	1dfb      	adds	r3, r7, #7
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8004dca:	d80a      	bhi.n	8004de2 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dcc:	1dfb      	adds	r3, r7, #7
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	001a      	movs	r2, r3
 8004dd2:	231f      	movs	r3, #31
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	4905      	ldr	r1, [pc, #20]	; (8004dec <__NVIC_ClearPendingIRQ+0x34>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	409a      	lsls	r2, r3
 8004ddc:	23c0      	movs	r3, #192	; 0xc0
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	50ca      	str	r2, [r1, r3]
  }
}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b002      	add	sp, #8
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	e000e100 	.word	0xe000e100

08004df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	0002      	movs	r2, r0
 8004df8:	6039      	str	r1, [r7, #0]
 8004dfa:	1dfb      	adds	r3, r7, #7
 8004dfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004dfe:	1dfb      	adds	r3, r7, #7
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b7f      	cmp	r3, #127	; 0x7f
 8004e04:	d828      	bhi.n	8004e58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e06:	4a2f      	ldr	r2, [pc, #188]	; (8004ec4 <__NVIC_SetPriority+0xd4>)
 8004e08:	1dfb      	adds	r3, r7, #7
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b25b      	sxtb	r3, r3
 8004e0e:	089b      	lsrs	r3, r3, #2
 8004e10:	33c0      	adds	r3, #192	; 0xc0
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	589b      	ldr	r3, [r3, r2]
 8004e16:	1dfa      	adds	r2, r7, #7
 8004e18:	7812      	ldrb	r2, [r2, #0]
 8004e1a:	0011      	movs	r1, r2
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	400a      	ands	r2, r1
 8004e20:	00d2      	lsls	r2, r2, #3
 8004e22:	21ff      	movs	r1, #255	; 0xff
 8004e24:	4091      	lsls	r1, r2
 8004e26:	000a      	movs	r2, r1
 8004e28:	43d2      	mvns	r2, r2
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	019b      	lsls	r3, r3, #6
 8004e32:	22ff      	movs	r2, #255	; 0xff
 8004e34:	401a      	ands	r2, r3
 8004e36:	1dfb      	adds	r3, r7, #7
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	4003      	ands	r3, r0
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e44:	481f      	ldr	r0, [pc, #124]	; (8004ec4 <__NVIC_SetPriority+0xd4>)
 8004e46:	1dfb      	adds	r3, r7, #7
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	b25b      	sxtb	r3, r3
 8004e4c:	089b      	lsrs	r3, r3, #2
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	33c0      	adds	r3, #192	; 0xc0
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004e56:	e031      	b.n	8004ebc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e58:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <__NVIC_SetPriority+0xd8>)
 8004e5a:	1dfb      	adds	r3, r7, #7
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	0019      	movs	r1, r3
 8004e60:	230f      	movs	r3, #15
 8004e62:	400b      	ands	r3, r1
 8004e64:	3b08      	subs	r3, #8
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	3306      	adds	r3, #6
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	18d3      	adds	r3, r2, r3
 8004e6e:	3304      	adds	r3, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	1dfa      	adds	r2, r7, #7
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	0011      	movs	r1, r2
 8004e78:	2203      	movs	r2, #3
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	00d2      	lsls	r2, r2, #3
 8004e7e:	21ff      	movs	r1, #255	; 0xff
 8004e80:	4091      	lsls	r1, r2
 8004e82:	000a      	movs	r2, r1
 8004e84:	43d2      	mvns	r2, r2
 8004e86:	401a      	ands	r2, r3
 8004e88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	019b      	lsls	r3, r3, #6
 8004e8e:	22ff      	movs	r2, #255	; 0xff
 8004e90:	401a      	ands	r2, r3
 8004e92:	1dfb      	adds	r3, r7, #7
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	0018      	movs	r0, r3
 8004e98:	2303      	movs	r3, #3
 8004e9a:	4003      	ands	r3, r0
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ea0:	4809      	ldr	r0, [pc, #36]	; (8004ec8 <__NVIC_SetPriority+0xd8>)
 8004ea2:	1dfb      	adds	r3, r7, #7
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	001c      	movs	r4, r3
 8004ea8:	230f      	movs	r3, #15
 8004eaa:	4023      	ands	r3, r4
 8004eac:	3b08      	subs	r3, #8
 8004eae:	089b      	lsrs	r3, r3, #2
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	3306      	adds	r3, #6
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	18c3      	adds	r3, r0, r3
 8004eb8:	3304      	adds	r3, #4
 8004eba:	601a      	str	r2, [r3, #0]
}
 8004ebc:	46c0      	nop			; (mov r8, r8)
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b003      	add	sp, #12
 8004ec2:	bd90      	pop	{r4, r7, pc}
 8004ec4:	e000e100 	.word	0xe000e100
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	1e5a      	subs	r2, r3, #1
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	045b      	lsls	r3, r3, #17
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d301      	bcc.n	8004ee4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e010      	b.n	8004f06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <SysTick_Config+0x44>)
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	3a01      	subs	r2, #1
 8004eea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eec:	2301      	movs	r3, #1
 8004eee:	425b      	negs	r3, r3
 8004ef0:	2103      	movs	r1, #3
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f7ff ff7c 	bl	8004df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <SysTick_Config+0x44>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004efe:	4b04      	ldr	r3, [pc, #16]	; (8004f10 <SysTick_Config+0x44>)
 8004f00:	2207      	movs	r2, #7
 8004f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	0018      	movs	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b002      	add	sp, #8
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	e000e010 	.word	0xe000e010

08004f14 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
 8004f1e:	210f      	movs	r1, #15
 8004f20:	187b      	adds	r3, r7, r1
 8004f22:	1c02      	adds	r2, r0, #0
 8004f24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	187b      	adds	r3, r7, r1
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	b25b      	sxtb	r3, r3
 8004f2e:	0011      	movs	r1, r2
 8004f30:	0018      	movs	r0, r3
 8004f32:	f7ff ff5d 	bl	8004df0 <__NVIC_SetPriority>
}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b004      	add	sp, #16
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	0002      	movs	r2, r0
 8004f46:	1dfb      	adds	r3, r7, #7
 8004f48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f4a:	1dfb      	adds	r3, r7, #7
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	0018      	movs	r0, r3
 8004f52:	f7ff fef5 	bl	8004d40 <__NVIC_EnableIRQ>
}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b002      	add	sp, #8
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	0002      	movs	r2, r0
 8004f66:	1dfb      	adds	r3, r7, #7
 8004f68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004f6a:	1dfb      	adds	r3, r7, #7
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b25b      	sxtb	r3, r3
 8004f70:	0018      	movs	r0, r3
 8004f72:	f7ff feff 	bl	8004d74 <__NVIC_DisableIRQ>
}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b002      	add	sp, #8
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f7ff ff9f 	bl	8004ecc <SysTick_Config>
 8004f8e:	0003      	movs	r3, r0
}
 8004f90:	0018      	movs	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b002      	add	sp, #8
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	0002      	movs	r2, r0
 8004fa0:	1dfb      	adds	r3, r7, #7
 8004fa2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004fa4:	1dfb      	adds	r3, r7, #7
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	b25b      	sxtb	r3, r3
 8004faa:	0018      	movs	r0, r3
 8004fac:	f7ff ff04 	bl	8004db8 <__NVIC_ClearPendingIRQ>
}
 8004fb0:	46c0      	nop			; (mov r8, r8)
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b002      	add	sp, #8
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e091      	b.n	80050ee <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	001a      	movs	r2, r3
 8004fd0:	4b49      	ldr	r3, [pc, #292]	; (80050f8 <HAL_DMA_Init+0x140>)
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d810      	bhi.n	8004ff8 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a48      	ldr	r2, [pc, #288]	; (80050fc <HAL_DMA_Init+0x144>)
 8004fdc:	4694      	mov	ip, r2
 8004fde:	4463      	add	r3, ip
 8004fe0:	2114      	movs	r1, #20
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f7fb f8aa 	bl	800013c <__udivsi3>
 8004fe8:	0003      	movs	r3, r0
 8004fea:	009a      	lsls	r2, r3, #2
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a43      	ldr	r2, [pc, #268]	; (8005100 <HAL_DMA_Init+0x148>)
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ff6:	e00f      	b.n	8005018 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a41      	ldr	r2, [pc, #260]	; (8005104 <HAL_DMA_Init+0x14c>)
 8004ffe:	4694      	mov	ip, r2
 8005000:	4463      	add	r3, ip
 8005002:	2114      	movs	r1, #20
 8005004:	0018      	movs	r0, r3
 8005006:	f7fb f899 	bl	800013c <__udivsi3>
 800500a:	0003      	movs	r3, r0
 800500c:	009a      	lsls	r2, r3, #2
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a3c      	ldr	r2, [pc, #240]	; (8005108 <HAL_DMA_Init+0x150>)
 8005016:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2225      	movs	r2, #37	; 0x25
 800501c:	2102      	movs	r1, #2
 800501e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4938      	ldr	r1, [pc, #224]	; (800510c <HAL_DMA_Init+0x154>)
 800502c:	400a      	ands	r2, r1
 800502e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6819      	ldr	r1, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	0018      	movs	r0, r3
 800506a:	f000 faab 	bl	80055c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	01db      	lsls	r3, r3, #7
 8005076:	429a      	cmp	r2, r3
 8005078:	d102      	bne.n	8005080 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005088:	217f      	movs	r1, #127	; 0x7f
 800508a:	400a      	ands	r2, r1
 800508c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005096:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d011      	beq.n	80050c4 <HAL_DMA_Init+0x10c>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d80d      	bhi.n	80050c4 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	0018      	movs	r0, r3
 80050ac:	f000 fad4 	bl	8005658 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	e008      	b.n	80050d6 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2225      	movs	r2, #37	; 0x25
 80050e0:	2101      	movs	r1, #1
 80050e2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2224      	movs	r2, #36	; 0x24
 80050e8:	2100      	movs	r1, #0
 80050ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	0018      	movs	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b002      	add	sp, #8
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	40020407 	.word	0x40020407
 80050fc:	bffdfff8 	.word	0xbffdfff8
 8005100:	40020000 	.word	0x40020000
 8005104:	bffdfbf8 	.word	0xbffdfbf8
 8005108:	40020400 	.word	0x40020400
 800510c:	ffff800f 	.word	0xffff800f

08005110 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800511e:	2317      	movs	r3, #23
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2224      	movs	r2, #36	; 0x24
 800512a:	5c9b      	ldrb	r3, [r3, r2]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_DMA_Start_IT+0x24>
 8005130:	2302      	movs	r3, #2
 8005132:	e06f      	b.n	8005214 <HAL_DMA_Start_IT+0x104>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2224      	movs	r2, #36	; 0x24
 8005138:	2101      	movs	r1, #1
 800513a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2225      	movs	r2, #37	; 0x25
 8005140:	5c9b      	ldrb	r3, [r3, r2]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	d157      	bne.n	80051f8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2225      	movs	r2, #37	; 0x25
 800514c:	2102      	movs	r1, #2
 800514e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2101      	movs	r1, #1
 8005162:	438a      	bics	r2, r1
 8005164:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f9ed 	bl	800554c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	210e      	movs	r1, #14
 8005186:	430a      	orrs	r2, r1
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e00f      	b.n	80051ac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2104      	movs	r1, #4
 8005198:	438a      	bics	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	210a      	movs	r1, #10
 80051a8:	430a      	orrs	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	2380      	movs	r3, #128	; 0x80
 80051b4:	025b      	lsls	r3, r3, #9
 80051b6:	4013      	ands	r3, r2
 80051b8:	d008      	beq.n	80051cc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c4:	2180      	movs	r1, #128	; 0x80
 80051c6:	0049      	lsls	r1, r1, #1
 80051c8:	430a      	orrs	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	2180      	movs	r1, #128	; 0x80
 80051e0:	0049      	lsls	r1, r1, #1
 80051e2:	430a      	orrs	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2101      	movs	r1, #1
 80051f2:	430a      	orrs	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e00a      	b.n	800520e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2280      	movs	r2, #128	; 0x80
 80051fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2224      	movs	r2, #36	; 0x24
 8005202:	2100      	movs	r1, #0
 8005204:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005206:	2317      	movs	r3, #23
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	2201      	movs	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800520e:	2317      	movs	r3, #23
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	781b      	ldrb	r3, [r3, #0]
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b006      	add	sp, #24
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e04f      	b.n	80052ce <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2225      	movs	r2, #37	; 0x25
 8005232:	5c9b      	ldrb	r3, [r3, r2]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d008      	beq.n	800524c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2204      	movs	r2, #4
 800523e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2224      	movs	r2, #36	; 0x24
 8005244:	2100      	movs	r1, #0
 8005246:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e040      	b.n	80052ce <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	210e      	movs	r1, #14
 8005258:	438a      	bics	r2, r1
 800525a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005266:	491c      	ldr	r1, [pc, #112]	; (80052d8 <HAL_DMA_Abort+0xbc>)
 8005268:	400a      	ands	r2, r1
 800526a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2101      	movs	r1, #1
 8005278:	438a      	bics	r2, r1
 800527a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005280:	221c      	movs	r2, #28
 8005282:	401a      	ands	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	2101      	movs	r1, #1
 800528a:	4091      	lsls	r1, r2
 800528c:	000a      	movs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005298:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00c      	beq.n	80052bc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ac:	490a      	ldr	r1, [pc, #40]	; (80052d8 <HAL_DMA_Abort+0xbc>)
 80052ae:	400a      	ands	r2, r1
 80052b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80052ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2225      	movs	r2, #37	; 0x25
 80052c0:	2101      	movs	r1, #1
 80052c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2224      	movs	r2, #36	; 0x24
 80052c8:	2100      	movs	r1, #0
 80052ca:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b002      	add	sp, #8
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	fffffeff 	.word	0xfffffeff

080052dc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e4:	210f      	movs	r1, #15
 80052e6:	187b      	adds	r3, r7, r1
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2225      	movs	r2, #37	; 0x25
 80052f0:	5c9b      	ldrb	r3, [r3, r2]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d006      	beq.n	8005306 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2204      	movs	r2, #4
 80052fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80052fe:	187b      	adds	r3, r7, r1
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	e048      	b.n	8005398 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	210e      	movs	r1, #14
 8005312:	438a      	bics	r2, r1
 8005314:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2101      	movs	r1, #1
 8005322:	438a      	bics	r2, r1
 8005324:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005330:	491d      	ldr	r1, [pc, #116]	; (80053a8 <HAL_DMA_Abort_IT+0xcc>)
 8005332:	400a      	ands	r2, r1
 8005334:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	221c      	movs	r2, #28
 800533c:	401a      	ands	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	2101      	movs	r1, #1
 8005344:	4091      	lsls	r1, r2
 8005346:	000a      	movs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005352:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00c      	beq.n	8005376 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	4910      	ldr	r1, [pc, #64]	; (80053a8 <HAL_DMA_Abort_IT+0xcc>)
 8005368:	400a      	ands	r2, r1
 800536a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005374:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2225      	movs	r2, #37	; 0x25
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2224      	movs	r2, #36	; 0x24
 8005382:	2100      	movs	r1, #0
 8005384:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	0010      	movs	r0, r2
 8005396:	4798      	blx	r3
    }
  }
  return status;
 8005398:	230f      	movs	r3, #15
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	781b      	ldrb	r3, [r3, #0]
}
 800539e:	0018      	movs	r0, r3
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b004      	add	sp, #16
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	fffffeff 	.word	0xfffffeff

080053ac <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c8:	221c      	movs	r2, #28
 80053ca:	4013      	ands	r3, r2
 80053cc:	2204      	movs	r2, #4
 80053ce:	409a      	lsls	r2, r3
 80053d0:	0013      	movs	r3, r2
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4013      	ands	r3, r2
 80053d6:	d026      	beq.n	8005426 <HAL_DMA_IRQHandler+0x7a>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2204      	movs	r2, #4
 80053dc:	4013      	ands	r3, r2
 80053de:	d022      	beq.n	8005426 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2220      	movs	r2, #32
 80053e8:	4013      	ands	r3, r2
 80053ea:	d107      	bne.n	80053fc <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2104      	movs	r1, #4
 80053f8:	438a      	bics	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	221c      	movs	r2, #28
 8005402:	401a      	ands	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	2104      	movs	r1, #4
 800540a:	4091      	lsls	r1, r2
 800540c:	000a      	movs	r2, r1
 800540e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	2b00      	cmp	r3, #0
 8005416:	d100      	bne.n	800541a <HAL_DMA_IRQHandler+0x6e>
 8005418:	e080      	b.n	800551c <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	0010      	movs	r0, r2
 8005422:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005424:	e07a      	b.n	800551c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	221c      	movs	r2, #28
 800542c:	4013      	ands	r3, r2
 800542e:	2202      	movs	r2, #2
 8005430:	409a      	lsls	r2, r3
 8005432:	0013      	movs	r3, r2
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4013      	ands	r3, r2
 8005438:	d03c      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x108>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2202      	movs	r2, #2
 800543e:	4013      	ands	r3, r2
 8005440:	d038      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2220      	movs	r2, #32
 800544a:	4013      	ands	r3, r2
 800544c:	d10b      	bne.n	8005466 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	210a      	movs	r1, #10
 800545a:	438a      	bics	r2, r1
 800545c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2225      	movs	r2, #37	; 0x25
 8005462:	2101      	movs	r1, #1
 8005464:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	001a      	movs	r2, r3
 800546c:	4b2e      	ldr	r3, [pc, #184]	; (8005528 <HAL_DMA_IRQHandler+0x17c>)
 800546e:	429a      	cmp	r2, r3
 8005470:	d909      	bls.n	8005486 <HAL_DMA_IRQHandler+0xda>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	221c      	movs	r2, #28
 8005478:	401a      	ands	r2, r3
 800547a:	4b2c      	ldr	r3, [pc, #176]	; (800552c <HAL_DMA_IRQHandler+0x180>)
 800547c:	2102      	movs	r1, #2
 800547e:	4091      	lsls	r1, r2
 8005480:	000a      	movs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
 8005484:	e008      	b.n	8005498 <HAL_DMA_IRQHandler+0xec>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	221c      	movs	r2, #28
 800548c:	401a      	ands	r2, r3
 800548e:	4b28      	ldr	r3, [pc, #160]	; (8005530 <HAL_DMA_IRQHandler+0x184>)
 8005490:	2102      	movs	r1, #2
 8005492:	4091      	lsls	r1, r2
 8005494:	000a      	movs	r2, r1
 8005496:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2224      	movs	r2, #36	; 0x24
 800549c:	2100      	movs	r1, #0
 800549e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d039      	beq.n	800551c <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	0010      	movs	r0, r2
 80054b0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80054b2:	e033      	b.n	800551c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b8:	221c      	movs	r2, #28
 80054ba:	4013      	ands	r3, r2
 80054bc:	2208      	movs	r2, #8
 80054be:	409a      	lsls	r2, r3
 80054c0:	0013      	movs	r3, r2
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4013      	ands	r3, r2
 80054c6:	d02a      	beq.n	800551e <HAL_DMA_IRQHandler+0x172>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2208      	movs	r2, #8
 80054cc:	4013      	ands	r3, r2
 80054ce:	d026      	beq.n	800551e <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	210e      	movs	r1, #14
 80054dc:	438a      	bics	r2, r1
 80054de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e4:	221c      	movs	r2, #28
 80054e6:	401a      	ands	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	2101      	movs	r1, #1
 80054ee:	4091      	lsls	r1, r2
 80054f0:	000a      	movs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2225      	movs	r2, #37	; 0x25
 80054fe:	2101      	movs	r1, #1
 8005500:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2224      	movs	r2, #36	; 0x24
 8005506:	2100      	movs	r1, #0
 8005508:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	0010      	movs	r0, r2
 800551a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800551c:	46c0      	nop			; (mov r8, r8)
 800551e:	46c0      	nop			; (mov r8, r8)
}
 8005520:	46bd      	mov	sp, r7
 8005522:	b004      	add	sp, #16
 8005524:	bd80      	pop	{r7, pc}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	40020080 	.word	0x40020080
 800552c:	40020400 	.word	0x40020400
 8005530:	40020000 	.word	0x40020000

08005534 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2225      	movs	r2, #37	; 0x25
 8005540:	5c9b      	ldrb	r3, [r3, r2]
 8005542:	b2db      	uxtb	r3, r3
}
 8005544:	0018      	movs	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	b002      	add	sp, #8
 800554a:	bd80      	pop	{r7, pc}

0800554c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005562:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	2b00      	cmp	r3, #0
 800556a:	d004      	beq.n	8005576 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005574:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557a:	221c      	movs	r2, #28
 800557c:	401a      	ands	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	2101      	movs	r1, #1
 8005584:	4091      	lsls	r1, r2
 8005586:	000a      	movs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b10      	cmp	r3, #16
 8005598:	d108      	bne.n	80055ac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80055aa:	e007      	b.n	80055bc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]
}
 80055bc:	46c0      	nop			; (mov r8, r8)
 80055be:	46bd      	mov	sp, r7
 80055c0:	b004      	add	sp, #16
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	001a      	movs	r2, r3
 80055d2:	4b1d      	ldr	r3, [pc, #116]	; (8005648 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d814      	bhi.n	8005602 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4a1a      	ldr	r2, [pc, #104]	; (800564c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80055e2:	189a      	adds	r2, r3, r2
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	001a      	movs	r2, r3
 80055ee:	23ff      	movs	r3, #255	; 0xff
 80055f0:	4013      	ands	r3, r2
 80055f2:	3b08      	subs	r3, #8
 80055f4:	2114      	movs	r1, #20
 80055f6:	0018      	movs	r0, r3
 80055f8:	f7fa fda0 	bl	800013c <__udivsi3>
 80055fc:	0003      	movs	r3, r0
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e014      	b.n	800562c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	089b      	lsrs	r3, r3, #2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4a11      	ldr	r2, [pc, #68]	; (8005650 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800560c:	189a      	adds	r2, r3, r2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	001a      	movs	r2, r3
 8005618:	23ff      	movs	r3, #255	; 0xff
 800561a:	4013      	ands	r3, r2
 800561c:	3b08      	subs	r3, #8
 800561e:	2114      	movs	r1, #20
 8005620:	0018      	movs	r0, r3
 8005622:	f7fa fd8b 	bl	800013c <__udivsi3>
 8005626:	0003      	movs	r3, r0
 8005628:	3307      	adds	r3, #7
 800562a:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a09      	ldr	r2, [pc, #36]	; (8005654 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8005630:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	221f      	movs	r2, #31
 8005636:	4013      	ands	r3, r2
 8005638:	2201      	movs	r2, #1
 800563a:	409a      	lsls	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b004      	add	sp, #16
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40020407 	.word	0x40020407
 800564c:	40020800 	.word	0x40020800
 8005650:	4002081c 	.word	0x4002081c
 8005654:	40020880 	.word	0x40020880

08005658 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	227f      	movs	r2, #127	; 0x7f
 8005666:	4013      	ands	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800566e:	4694      	mov	ip, r2
 8005670:	4463      	add	r3, ip
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	001a      	movs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a07      	ldr	r2, [pc, #28]	; (800569c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800567e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3b01      	subs	r3, #1
 8005684:	2203      	movs	r2, #3
 8005686:	4013      	ands	r3, r2
 8005688:	2201      	movs	r2, #1
 800568a:	409a      	lsls	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005690:	46c0      	nop			; (mov r8, r8)
 8005692:	46bd      	mov	sp, r7
 8005694:	b004      	add	sp, #16
 8005696:	bd80      	pop	{r7, pc}
 8005698:	1000823f 	.word	0x1000823f
 800569c:	40020940 	.word	0x40020940

080056a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056ae:	e14d      	b.n	800594c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2101      	movs	r1, #1
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4091      	lsls	r1, r2
 80056ba:	000a      	movs	r2, r1
 80056bc:	4013      	ands	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d100      	bne.n	80056c8 <HAL_GPIO_Init+0x28>
 80056c6:	e13e      	b.n	8005946 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2203      	movs	r2, #3
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d005      	beq.n	80056e0 <HAL_GPIO_Init+0x40>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2203      	movs	r2, #3
 80056da:	4013      	ands	r3, r2
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d130      	bne.n	8005742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	2203      	movs	r2, #3
 80056ec:	409a      	lsls	r2, r3
 80056ee:	0013      	movs	r3, r2
 80056f0:	43da      	mvns	r2, r3
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4013      	ands	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	409a      	lsls	r2, r3
 8005702:	0013      	movs	r3, r2
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005716:	2201      	movs	r2, #1
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	409a      	lsls	r2, r3
 800571c:	0013      	movs	r3, r2
 800571e:	43da      	mvns	r2, r3
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4013      	ands	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	091b      	lsrs	r3, r3, #4
 800572c:	2201      	movs	r2, #1
 800572e:	401a      	ands	r2, r3
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	409a      	lsls	r2, r3
 8005734:	0013      	movs	r3, r2
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2203      	movs	r2, #3
 8005748:	4013      	ands	r3, r2
 800574a:	2b03      	cmp	r3, #3
 800574c:	d017      	beq.n	800577e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	2203      	movs	r2, #3
 800575a:	409a      	lsls	r2, r3
 800575c:	0013      	movs	r3, r2
 800575e:	43da      	mvns	r2, r3
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4013      	ands	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	409a      	lsls	r2, r3
 8005770:	0013      	movs	r3, r2
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2203      	movs	r2, #3
 8005784:	4013      	ands	r3, r2
 8005786:	2b02      	cmp	r3, #2
 8005788:	d123      	bne.n	80057d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	08da      	lsrs	r2, r3, #3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3208      	adds	r2, #8
 8005792:	0092      	lsls	r2, r2, #2
 8005794:	58d3      	ldr	r3, [r2, r3]
 8005796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2207      	movs	r2, #7
 800579c:	4013      	ands	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	220f      	movs	r2, #15
 80057a2:	409a      	lsls	r2, r3
 80057a4:	0013      	movs	r3, r2
 80057a6:	43da      	mvns	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4013      	ands	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2107      	movs	r1, #7
 80057b6:	400b      	ands	r3, r1
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	409a      	lsls	r2, r3
 80057bc:	0013      	movs	r3, r2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	08da      	lsrs	r2, r3, #3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3208      	adds	r2, #8
 80057cc:	0092      	lsls	r2, r2, #2
 80057ce:	6939      	ldr	r1, [r7, #16]
 80057d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	2203      	movs	r2, #3
 80057de:	409a      	lsls	r2, r3
 80057e0:	0013      	movs	r3, r2
 80057e2:	43da      	mvns	r2, r3
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4013      	ands	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2203      	movs	r2, #3
 80057f0:	401a      	ands	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	409a      	lsls	r2, r3
 80057f8:	0013      	movs	r3, r2
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	23c0      	movs	r3, #192	; 0xc0
 800580c:	029b      	lsls	r3, r3, #10
 800580e:	4013      	ands	r3, r2
 8005810:	d100      	bne.n	8005814 <HAL_GPIO_Init+0x174>
 8005812:	e098      	b.n	8005946 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005814:	4a53      	ldr	r2, [pc, #332]	; (8005964 <HAL_GPIO_Init+0x2c4>)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	089b      	lsrs	r3, r3, #2
 800581a:	3318      	adds	r3, #24
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	589b      	ldr	r3, [r3, r2]
 8005820:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2203      	movs	r2, #3
 8005826:	4013      	ands	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	220f      	movs	r2, #15
 800582c:	409a      	lsls	r2, r3
 800582e:	0013      	movs	r3, r2
 8005830:	43da      	mvns	r2, r3
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	4013      	ands	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	23a0      	movs	r3, #160	; 0xa0
 800583c:	05db      	lsls	r3, r3, #23
 800583e:	429a      	cmp	r2, r3
 8005840:	d019      	beq.n	8005876 <HAL_GPIO_Init+0x1d6>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a48      	ldr	r2, [pc, #288]	; (8005968 <HAL_GPIO_Init+0x2c8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <HAL_GPIO_Init+0x1d2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a47      	ldr	r2, [pc, #284]	; (800596c <HAL_GPIO_Init+0x2cc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00d      	beq.n	800586e <HAL_GPIO_Init+0x1ce>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a46      	ldr	r2, [pc, #280]	; (8005970 <HAL_GPIO_Init+0x2d0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d007      	beq.n	800586a <HAL_GPIO_Init+0x1ca>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a45      	ldr	r2, [pc, #276]	; (8005974 <HAL_GPIO_Init+0x2d4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d101      	bne.n	8005866 <HAL_GPIO_Init+0x1c6>
 8005862:	2304      	movs	r3, #4
 8005864:	e008      	b.n	8005878 <HAL_GPIO_Init+0x1d8>
 8005866:	2305      	movs	r3, #5
 8005868:	e006      	b.n	8005878 <HAL_GPIO_Init+0x1d8>
 800586a:	2303      	movs	r3, #3
 800586c:	e004      	b.n	8005878 <HAL_GPIO_Init+0x1d8>
 800586e:	2302      	movs	r3, #2
 8005870:	e002      	b.n	8005878 <HAL_GPIO_Init+0x1d8>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <HAL_GPIO_Init+0x1d8>
 8005876:	2300      	movs	r3, #0
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	2103      	movs	r1, #3
 800587c:	400a      	ands	r2, r1
 800587e:	00d2      	lsls	r2, r2, #3
 8005880:	4093      	lsls	r3, r2
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005888:	4936      	ldr	r1, [pc, #216]	; (8005964 <HAL_GPIO_Init+0x2c4>)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	089b      	lsrs	r3, r3, #2
 800588e:	3318      	adds	r3, #24
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005896:	4a33      	ldr	r2, [pc, #204]	; (8005964 <HAL_GPIO_Init+0x2c4>)
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	58d3      	ldr	r3, [r2, r3]
 800589c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	43da      	mvns	r2, r3
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4013      	ands	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	2380      	movs	r3, #128	; 0x80
 80058ae:	025b      	lsls	r3, r3, #9
 80058b0:	4013      	ands	r3, r2
 80058b2:	d003      	beq.n	80058bc <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80058bc:	4929      	ldr	r1, [pc, #164]	; (8005964 <HAL_GPIO_Init+0x2c4>)
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80058c4:	4a27      	ldr	r2, [pc, #156]	; (8005964 <HAL_GPIO_Init+0x2c4>)
 80058c6:	2384      	movs	r3, #132	; 0x84
 80058c8:	58d3      	ldr	r3, [r2, r3]
 80058ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	43da      	mvns	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4013      	ands	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	029b      	lsls	r3, r3, #10
 80058de:	4013      	ands	r3, r2
 80058e0:	d003      	beq.n	80058ea <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058ea:	491e      	ldr	r1, [pc, #120]	; (8005964 <HAL_GPIO_Init+0x2c4>)
 80058ec:	2284      	movs	r2, #132	; 0x84
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058f2:	4b1c      	ldr	r3, [pc, #112]	; (8005964 <HAL_GPIO_Init+0x2c4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	43da      	mvns	r2, r3
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	2380      	movs	r3, #128	; 0x80
 8005908:	035b      	lsls	r3, r3, #13
 800590a:	4013      	ands	r3, r2
 800590c:	d003      	beq.n	8005916 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005916:	4b13      	ldr	r3, [pc, #76]	; (8005964 <HAL_GPIO_Init+0x2c4>)
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800591c:	4b11      	ldr	r3, [pc, #68]	; (8005964 <HAL_GPIO_Init+0x2c4>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	43da      	mvns	r2, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4013      	ands	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	039b      	lsls	r3, r3, #14
 8005934:	4013      	ands	r3, r2
 8005936:	d003      	beq.n	8005940 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005940:	4b08      	ldr	r3, [pc, #32]	; (8005964 <HAL_GPIO_Init+0x2c4>)
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	3301      	adds	r3, #1
 800594a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	40da      	lsrs	r2, r3
 8005954:	1e13      	subs	r3, r2, #0
 8005956:	d000      	beq.n	800595a <HAL_GPIO_Init+0x2ba>
 8005958:	e6aa      	b.n	80056b0 <HAL_GPIO_Init+0x10>
  }
}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	46c0      	nop			; (mov r8, r8)
 800595e:	46bd      	mov	sp, r7
 8005960:	b006      	add	sp, #24
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40021800 	.word	0x40021800
 8005968:	50000400 	.word	0x50000400
 800596c:	50000800 	.word	0x50000800
 8005970:	50000c00 	.word	0x50000c00
 8005974:	50001000 	.word	0x50001000

08005978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	0008      	movs	r0, r1
 8005982:	0011      	movs	r1, r2
 8005984:	1cbb      	adds	r3, r7, #2
 8005986:	1c02      	adds	r2, r0, #0
 8005988:	801a      	strh	r2, [r3, #0]
 800598a:	1c7b      	adds	r3, r7, #1
 800598c:	1c0a      	adds	r2, r1, #0
 800598e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005990:	1c7b      	adds	r3, r7, #1
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005998:	1cbb      	adds	r3, r7, #2
 800599a:	881a      	ldrh	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059a0:	e003      	b.n	80059aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059a2:	1cbb      	adds	r3, r7, #2
 80059a4:	881a      	ldrh	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b002      	add	sp, #8
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e082      	b.n	8005acc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2241      	movs	r2, #65	; 0x41
 80059ca:	5c9b      	ldrb	r3, [r3, r2]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d107      	bne.n	80059e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2240      	movs	r2, #64	; 0x40
 80059d6:	2100      	movs	r1, #0
 80059d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	0018      	movs	r0, r3
 80059de:	f7fd fbd3 	bl	8003188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2241      	movs	r2, #65	; 0x41
 80059e6:	2124      	movs	r1, #36	; 0x24
 80059e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2101      	movs	r1, #1
 80059f6:	438a      	bics	r2, r1
 80059f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4934      	ldr	r1, [pc, #208]	; (8005ad4 <HAL_I2C_Init+0x120>)
 8005a04:	400a      	ands	r2, r1
 8005a06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4931      	ldr	r1, [pc, #196]	; (8005ad8 <HAL_I2C_Init+0x124>)
 8005a14:	400a      	ands	r2, r1
 8005a16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d108      	bne.n	8005a32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	0209      	lsls	r1, r1, #8
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	e007      	b.n	8005a42 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2184      	movs	r1, #132	; 0x84
 8005a3c:	0209      	lsls	r1, r1, #8
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d104      	bne.n	8005a54 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2280      	movs	r2, #128	; 0x80
 8005a50:	0112      	lsls	r2, r2, #4
 8005a52:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	491f      	ldr	r1, [pc, #124]	; (8005adc <HAL_I2C_Init+0x128>)
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	491a      	ldr	r1, [pc, #104]	; (8005ad8 <HAL_I2C_Init+0x124>)
 8005a70:	400a      	ands	r2, r1
 8005a72:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69d9      	ldr	r1, [r3, #28]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1a      	ldr	r2, [r3, #32]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2241      	movs	r2, #65	; 0x41
 8005ab8:	2120      	movs	r1, #32
 8005aba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2242      	movs	r2, #66	; 0x42
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	0018      	movs	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b002      	add	sp, #8
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	f0ffffff 	.word	0xf0ffffff
 8005ad8:	ffff7fff 	.word	0xffff7fff
 8005adc:	02008000 	.word	0x02008000

08005ae0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 8005ae0:	b590      	push	{r4, r7, lr}
 8005ae2:	b089      	sub	sp, #36	; 0x24
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	0008      	movs	r0, r1
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	0019      	movs	r1, r3
 8005aee:	230a      	movs	r3, #10
 8005af0:	18fb      	adds	r3, r7, r3
 8005af2:	1c02      	adds	r2, r0, #0
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	2308      	movs	r3, #8
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	1c0a      	adds	r2, r1, #0
 8005afc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2241      	movs	r2, #65	; 0x41
 8005b02:	5c9b      	ldrb	r3, [r3, r2]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d000      	beq.n	8005b0c <HAL_I2C_Master_Transmit+0x2c>
 8005b0a:	e0e7      	b.n	8005cdc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2240      	movs	r2, #64	; 0x40
 8005b10:	5c9b      	ldrb	r3, [r3, r2]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_I2C_Master_Transmit+0x3a>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e0e1      	b.n	8005cde <HAL_I2C_Master_Transmit+0x1fe>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2240      	movs	r2, #64	; 0x40
 8005b1e:	2101      	movs	r1, #1
 8005b20:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b22:	f7fe fc2b 	bl	800437c <HAL_GetTick>
 8005b26:	0003      	movs	r3, r0
 8005b28:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b2a:	2380      	movs	r3, #128	; 0x80
 8005b2c:	0219      	lsls	r1, r3, #8
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	2319      	movs	r3, #25
 8005b36:	2201      	movs	r2, #1
 8005b38:	f001 febc 	bl	80078b4 <I2C_WaitOnFlagUntilTimeout>
 8005b3c:	1e03      	subs	r3, r0, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0cc      	b.n	8005cde <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2241      	movs	r2, #65	; 0x41
 8005b48:	2121      	movs	r1, #33	; 0x21
 8005b4a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2242      	movs	r2, #66	; 0x42
 8005b50:	2110      	movs	r1, #16
 8005b52:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2208      	movs	r2, #8
 8005b64:	18ba      	adds	r2, r7, r2
 8005b66:	8812      	ldrh	r2, [r2, #0]
 8005b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2bff      	cmp	r3, #255	; 0xff
 8005b78:	d911      	bls.n	8005b9e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	22ff      	movs	r2, #255	; 0xff
 8005b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	045c      	lsls	r4, r3, #17
 8005b8a:	230a      	movs	r3, #10
 8005b8c:	18fb      	adds	r3, r7, r3
 8005b8e:	8819      	ldrh	r1, [r3, #0]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	4b55      	ldr	r3, [pc, #340]	; (8005ce8 <HAL_I2C_Master_Transmit+0x208>)
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	0023      	movs	r3, r4
 8005b98:	f002 f82c 	bl	8007bf4 <I2C_TransferConfig>
 8005b9c:	e075      	b.n	8005c8a <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	2380      	movs	r3, #128	; 0x80
 8005bb0:	049c      	lsls	r4, r3, #18
 8005bb2:	230a      	movs	r3, #10
 8005bb4:	18fb      	adds	r3, r7, r3
 8005bb6:	8819      	ldrh	r1, [r3, #0]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	4b4b      	ldr	r3, [pc, #300]	; (8005ce8 <HAL_I2C_Master_Transmit+0x208>)
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	0023      	movs	r3, r4
 8005bc0:	f002 f818 	bl	8007bf4 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005bc4:	e061      	b.n	8005c8a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f001 feb0 	bl	8007932 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bd2:	1e03      	subs	r3, r0, #0
 8005bd4:	d001      	beq.n	8005bda <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e081      	b.n	8005cde <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	781a      	ldrb	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d03a      	beq.n	8005c8a <HAL_I2C_Master_Transmit+0x1aa>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d136      	bne.n	8005c8a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	0013      	movs	r3, r2
 8005c26:	2200      	movs	r2, #0
 8005c28:	2180      	movs	r1, #128	; 0x80
 8005c2a:	f001 fe43 	bl	80078b4 <I2C_WaitOnFlagUntilTimeout>
 8005c2e:	1e03      	subs	r3, r0, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e053      	b.n	8005cde <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2bff      	cmp	r3, #255	; 0xff
 8005c3e:	d911      	bls.n	8005c64 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	22ff      	movs	r2, #255	; 0xff
 8005c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	045c      	lsls	r4, r3, #17
 8005c50:	230a      	movs	r3, #10
 8005c52:	18fb      	adds	r3, r7, r3
 8005c54:	8819      	ldrh	r1, [r3, #0]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	0023      	movs	r3, r4
 8005c5e:	f001 ffc9 	bl	8007bf4 <I2C_TransferConfig>
 8005c62:	e012      	b.n	8005c8a <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	2380      	movs	r3, #128	; 0x80
 8005c76:	049c      	lsls	r4, r3, #18
 8005c78:	230a      	movs	r3, #10
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	8819      	ldrh	r1, [r3, #0]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	2300      	movs	r3, #0
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	0023      	movs	r3, r4
 8005c86:	f001 ffb5 	bl	8007bf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d198      	bne.n	8005bc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f001 fe88 	bl	80079b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ca0:	1e03      	subs	r3, r0, #0
 8005ca2:	d001      	beq.n	8005ca8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e01a      	b.n	8005cde <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2220      	movs	r2, #32
 8005cae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	490c      	ldr	r1, [pc, #48]	; (8005cec <HAL_I2C_Master_Transmit+0x20c>)
 8005cbc:	400a      	ands	r2, r1
 8005cbe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2241      	movs	r2, #65	; 0x41
 8005cc4:	2120      	movs	r1, #32
 8005cc6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2242      	movs	r2, #66	; 0x42
 8005ccc:	2100      	movs	r1, #0
 8005cce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2240      	movs	r2, #64	; 0x40
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	e000      	b.n	8005cde <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005cdc:	2302      	movs	r3, #2
  }
}
 8005cde:	0018      	movs	r0, r3
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	b007      	add	sp, #28
 8005ce4:	bd90      	pop	{r4, r7, pc}
 8005ce6:	46c0      	nop			; (mov r8, r8)
 8005ce8:	80002000 	.word	0x80002000
 8005cec:	fe00e800 	.word	0xfe00e800

08005cf0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 8005cf0:	b590      	push	{r4, r7, lr}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	0008      	movs	r0, r1
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	230a      	movs	r3, #10
 8005d00:	18fb      	adds	r3, r7, r3
 8005d02:	1c02      	adds	r2, r0, #0
 8005d04:	801a      	strh	r2, [r3, #0]
 8005d06:	2308      	movs	r3, #8
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	1c0a      	adds	r2, r1, #0
 8005d0c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2241      	movs	r2, #65	; 0x41
 8005d12:	5c9b      	ldrb	r3, [r3, r2]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d000      	beq.n	8005d1c <HAL_I2C_Master_Receive+0x2c>
 8005d1a:	e0e8      	b.n	8005eee <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2240      	movs	r2, #64	; 0x40
 8005d20:	5c9b      	ldrb	r3, [r3, r2]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_I2C_Master_Receive+0x3a>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e0e2      	b.n	8005ef0 <HAL_I2C_Master_Receive+0x200>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2240      	movs	r2, #64	; 0x40
 8005d2e:	2101      	movs	r1, #1
 8005d30:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d32:	f7fe fb23 	bl	800437c <HAL_GetTick>
 8005d36:	0003      	movs	r3, r0
 8005d38:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d3a:	2380      	movs	r3, #128	; 0x80
 8005d3c:	0219      	lsls	r1, r3, #8
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	2319      	movs	r3, #25
 8005d46:	2201      	movs	r2, #1
 8005d48:	f001 fdb4 	bl	80078b4 <I2C_WaitOnFlagUntilTimeout>
 8005d4c:	1e03      	subs	r3, r0, #0
 8005d4e:	d001      	beq.n	8005d54 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0cd      	b.n	8005ef0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2241      	movs	r2, #65	; 0x41
 8005d58:	2122      	movs	r1, #34	; 0x22
 8005d5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2242      	movs	r2, #66	; 0x42
 8005d60:	2110      	movs	r1, #16
 8005d62:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2208      	movs	r2, #8
 8005d74:	18ba      	adds	r2, r7, r2
 8005d76:	8812      	ldrh	r2, [r2, #0]
 8005d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2bff      	cmp	r3, #255	; 0xff
 8005d88:	d911      	bls.n	8005dae <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	22ff      	movs	r2, #255	; 0xff
 8005d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	2380      	movs	r3, #128	; 0x80
 8005d98:	045c      	lsls	r4, r3, #17
 8005d9a:	230a      	movs	r3, #10
 8005d9c:	18fb      	adds	r3, r7, r3
 8005d9e:	8819      	ldrh	r1, [r3, #0]
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	4b55      	ldr	r3, [pc, #340]	; (8005ef8 <HAL_I2C_Master_Receive+0x208>)
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	0023      	movs	r3, r4
 8005da8:	f001 ff24 	bl	8007bf4 <I2C_TransferConfig>
 8005dac:	e076      	b.n	8005e9c <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	2380      	movs	r3, #128	; 0x80
 8005dc0:	049c      	lsls	r4, r3, #18
 8005dc2:	230a      	movs	r3, #10
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	8819      	ldrh	r1, [r3, #0]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	4b4b      	ldr	r3, [pc, #300]	; (8005ef8 <HAL_I2C_Master_Receive+0x208>)
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	0023      	movs	r3, r4
 8005dd0:	f001 ff10 	bl	8007bf4 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005dd4:	e062      	b.n	8005e9c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f001 fe23 	bl	8007a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005de2:	1e03      	subs	r3, r0, #0
 8005de4:	d001      	beq.n	8005dea <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e082      	b.n	8005ef0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d03a      	beq.n	8005e9c <HAL_I2C_Master_Receive+0x1ac>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d136      	bne.n	8005e9c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	0013      	movs	r3, r2
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2180      	movs	r1, #128	; 0x80
 8005e3c:	f001 fd3a 	bl	80078b4 <I2C_WaitOnFlagUntilTimeout>
 8005e40:	1e03      	subs	r3, r0, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e053      	b.n	8005ef0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2bff      	cmp	r3, #255	; 0xff
 8005e50:	d911      	bls.n	8005e76 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	22ff      	movs	r2, #255	; 0xff
 8005e56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	045c      	lsls	r4, r3, #17
 8005e62:	230a      	movs	r3, #10
 8005e64:	18fb      	adds	r3, r7, r3
 8005e66:	8819      	ldrh	r1, [r3, #0]
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	0023      	movs	r3, r4
 8005e70:	f001 fec0 	bl	8007bf4 <I2C_TransferConfig>
 8005e74:	e012      	b.n	8005e9c <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	049c      	lsls	r4, r3, #18
 8005e8a:	230a      	movs	r3, #10
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	8819      	ldrh	r1, [r3, #0]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	2300      	movs	r3, #0
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	0023      	movs	r3, r4
 8005e98:	f001 feac 	bl	8007bf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d197      	bne.n	8005dd6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	0018      	movs	r0, r3
 8005eae:	f001 fd7f 	bl	80079b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005eb2:	1e03      	subs	r3, r0, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e01a      	b.n	8005ef0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	490b      	ldr	r1, [pc, #44]	; (8005efc <HAL_I2C_Master_Receive+0x20c>)
 8005ece:	400a      	ands	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2241      	movs	r2, #65	; 0x41
 8005ed6:	2120      	movs	r1, #32
 8005ed8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2242      	movs	r2, #66	; 0x42
 8005ede:	2100      	movs	r1, #0
 8005ee0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2240      	movs	r2, #64	; 0x40
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	e000      	b.n	8005ef0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005eee:	2302      	movs	r3, #2
  }
}
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	b007      	add	sp, #28
 8005ef6:	bd90      	pop	{r4, r7, pc}
 8005ef8:	80002400 	.word	0x80002400
 8005efc:	fe00e800 	.word	0xfe00e800

08005f00 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005f00:	b5b0      	push	{r4, r5, r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	0008      	movs	r0, r1
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	0019      	movs	r1, r3
 8005f0e:	230a      	movs	r3, #10
 8005f10:	18fb      	adds	r3, r7, r3
 8005f12:	1c02      	adds	r2, r0, #0
 8005f14:	801a      	strh	r2, [r3, #0]
 8005f16:	2308      	movs	r3, #8
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	1c0a      	adds	r2, r1, #0
 8005f1c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2241      	movs	r2, #65	; 0x41
 8005f22:	5c9b      	ldrb	r3, [r3, r2]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d000      	beq.n	8005f2c <HAL_I2C_Master_Transmit_DMA+0x2c>
 8005f2a:	e0dd      	b.n	80060e8 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	2380      	movs	r3, #128	; 0x80
 8005f34:	021b      	lsls	r3, r3, #8
 8005f36:	401a      	ands	r2, r3
 8005f38:	2380      	movs	r3, #128	; 0x80
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d101      	bne.n	8005f44 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
 8005f42:	e0d2      	b.n	80060ea <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2240      	movs	r2, #64	; 0x40
 8005f48:	5c9b      	ldrb	r3, [r3, r2]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_I2C_Master_Transmit_DMA+0x52>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e0cb      	b.n	80060ea <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2240      	movs	r2, #64	; 0x40
 8005f56:	2101      	movs	r1, #1
 8005f58:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2241      	movs	r2, #65	; 0x41
 8005f5e:	2121      	movs	r1, #33	; 0x21
 8005f60:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2242      	movs	r2, #66	; 0x42
 8005f66:	2110      	movs	r1, #16
 8005f68:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2208      	movs	r2, #8
 8005f7a:	18ba      	adds	r2, r7, r2
 8005f7c:	8812      	ldrh	r2, [r2, #0]
 8005f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a5c      	ldr	r2, [pc, #368]	; (80060f4 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8005f84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4a5b      	ldr	r2, [pc, #364]	; (80060f8 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8005f8a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2bff      	cmp	r3, #255	; 0xff
 8005f94:	d906      	bls.n	8005fa4 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	22ff      	movs	r2, #255	; 0xff
 8005f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005f9c:	2380      	movs	r3, #128	; 0x80
 8005f9e:	045b      	lsls	r3, r3, #17
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	e007      	b.n	8005fb4 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005fae:	2380      	movs	r3, #128	; 0x80
 8005fb0:	049b      	lsls	r3, r3, #18
 8005fb2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d100      	bne.n	8005fbe <HAL_I2C_Master_Transmit_DMA+0xbe>
 8005fbc:	e078      	b.n	80060b0 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d023      	beq.n	800600e <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	4a4c      	ldr	r2, [pc, #304]	; (80060fc <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8005fcc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	4a4b      	ldr	r2, [pc, #300]	; (8006100 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8005fd4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fda:	2200      	movs	r2, #0
 8005fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3328      	adds	r3, #40	; 0x28
 8005ff2:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005ff8:	2513      	movs	r5, #19
 8005ffa:	197c      	adds	r4, r7, r5
 8005ffc:	f7ff f888 	bl	8005110 <HAL_DMA_Start_IT>
 8006000:	0003      	movs	r3, r0
 8006002:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006004:	197b      	adds	r3, r7, r5
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d13d      	bne.n	8006088 <HAL_I2C_Master_Transmit_DMA+0x188>
 800600c:	e013      	b.n	8006036 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2241      	movs	r2, #65	; 0x41
 8006012:	2120      	movs	r1, #32
 8006014:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2242      	movs	r2, #66	; 0x42
 800601a:	2100      	movs	r1, #0
 800601c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	2280      	movs	r2, #128	; 0x80
 8006024:	431a      	orrs	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2240      	movs	r2, #64	; 0x40
 800602e:	2100      	movs	r1, #0
 8006030:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e059      	b.n	80060ea <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603a:	b2da      	uxtb	r2, r3
 800603c:	697c      	ldr	r4, [r7, #20]
 800603e:	230a      	movs	r3, #10
 8006040:	18fb      	adds	r3, r7, r3
 8006042:	8819      	ldrh	r1, [r3, #0]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	4b2f      	ldr	r3, [pc, #188]	; (8006104 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	0023      	movs	r3, r4
 800604c:	f001 fdd2 	bl	8007bf4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2240      	movs	r2, #64	; 0x40
 8006066:	2100      	movs	r1, #0
 8006068:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2110      	movs	r1, #16
 800606e:	0018      	movs	r0, r3
 8006070:	f001 fdf6 	bl	8007c60 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2180      	movs	r1, #128	; 0x80
 8006080:	01c9      	lsls	r1, r1, #7
 8006082:	430a      	orrs	r2, r1
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e02d      	b.n	80060e4 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2241      	movs	r2, #65	; 0x41
 800608c:	2120      	movs	r1, #32
 800608e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2242      	movs	r2, #66	; 0x42
 8006094:	2100      	movs	r1, #0
 8006096:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609c:	2210      	movs	r2, #16
 800609e:	431a      	orrs	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2240      	movs	r2, #64	; 0x40
 80060a8:	2100      	movs	r1, #0
 80060aa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e01c      	b.n	80060ea <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a15      	ldr	r2, [pc, #84]	; (8006108 <HAL_I2C_Master_Transmit_DMA+0x208>)
 80060b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	049c      	lsls	r4, r3, #18
 80060c0:	230a      	movs	r3, #10
 80060c2:	18fb      	adds	r3, r7, r3
 80060c4:	8819      	ldrh	r1, [r3, #0]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	0023      	movs	r3, r4
 80060ce:	f001 fd91 	bl	8007bf4 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2240      	movs	r2, #64	; 0x40
 80060d6:	2100      	movs	r1, #0
 80060d8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2101      	movs	r1, #1
 80060de:	0018      	movs	r0, r3
 80060e0:	f001 fdbe 	bl	8007c60 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	e000      	b.n	80060ea <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80060e8:	2302      	movs	r3, #2
  }
}
 80060ea:	0018      	movs	r0, r3
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b006      	add	sp, #24
 80060f0:	bdb0      	pop	{r4, r5, r7, pc}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	ffff0000 	.word	0xffff0000
 80060f8:	0800696d 	.word	0x0800696d
 80060fc:	08007705 	.word	0x08007705
 8006100:	08007845 	.word	0x08007845
 8006104:	80002000 	.word	0x80002000
 8006108:	080064c1 	.word	0x080064c1

0800610c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800610c:	b5b0      	push	{r4, r5, r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	0008      	movs	r0, r1
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	0019      	movs	r1, r3
 800611a:	230a      	movs	r3, #10
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	1c02      	adds	r2, r0, #0
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	2308      	movs	r3, #8
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	1c0a      	adds	r2, r1, #0
 8006128:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2241      	movs	r2, #65	; 0x41
 800612e:	5c9b      	ldrb	r3, [r3, r2]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b20      	cmp	r3, #32
 8006134:	d000      	beq.n	8006138 <HAL_I2C_Master_Receive_DMA+0x2c>
 8006136:	e0dd      	b.n	80062f4 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	401a      	ands	r2, r3
 8006144:	2380      	movs	r3, #128	; 0x80
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	429a      	cmp	r2, r3
 800614a:	d101      	bne.n	8006150 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800614c:	2302      	movs	r3, #2
 800614e:	e0d2      	b.n	80062f6 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2240      	movs	r2, #64	; 0x40
 8006154:	5c9b      	ldrb	r3, [r3, r2]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_I2C_Master_Receive_DMA+0x52>
 800615a:	2302      	movs	r3, #2
 800615c:	e0cb      	b.n	80062f6 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2240      	movs	r2, #64	; 0x40
 8006162:	2101      	movs	r1, #1
 8006164:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2241      	movs	r2, #65	; 0x41
 800616a:	2122      	movs	r1, #34	; 0x22
 800616c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2242      	movs	r2, #66	; 0x42
 8006172:	2110      	movs	r1, #16
 8006174:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2208      	movs	r2, #8
 8006186:	18ba      	adds	r2, r7, r2
 8006188:	8812      	ldrh	r2, [r2, #0]
 800618a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4a5c      	ldr	r2, [pc, #368]	; (8006300 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8006190:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4a5b      	ldr	r2, [pc, #364]	; (8006304 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8006196:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2bff      	cmp	r3, #255	; 0xff
 80061a0:	d906      	bls.n	80061b0 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	22ff      	movs	r2, #255	; 0xff
 80061a6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80061a8:	2380      	movs	r3, #128	; 0x80
 80061aa:	045b      	lsls	r3, r3, #17
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	e007      	b.n	80061c0 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80061ba:	2380      	movs	r3, #128	; 0x80
 80061bc:	049b      	lsls	r3, r3, #18
 80061be:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d100      	bne.n	80061ca <HAL_I2C_Master_Receive_DMA+0xbe>
 80061c8:	e078      	b.n	80062bc <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d023      	beq.n	800621a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d6:	4a4c      	ldr	r2, [pc, #304]	; (8006308 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80061d8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061de:	4a4b      	ldr	r2, [pc, #300]	; (800630c <HAL_I2C_Master_Receive_DMA+0x200>)
 80061e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e6:	2200      	movs	r2, #0
 80061e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ee:	2200      	movs	r2, #0
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3324      	adds	r3, #36	; 0x24
 80061fc:	0019      	movs	r1, r3
 80061fe:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006204:	2513      	movs	r5, #19
 8006206:	197c      	adds	r4, r7, r5
 8006208:	f7fe ff82 	bl	8005110 <HAL_DMA_Start_IT>
 800620c:	0003      	movs	r3, r0
 800620e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006210:	197b      	adds	r3, r7, r5
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d13d      	bne.n	8006294 <HAL_I2C_Master_Receive_DMA+0x188>
 8006218:	e013      	b.n	8006242 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2241      	movs	r2, #65	; 0x41
 800621e:	2120      	movs	r1, #32
 8006220:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2242      	movs	r2, #66	; 0x42
 8006226:	2100      	movs	r1, #0
 8006228:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622e:	2280      	movs	r2, #128	; 0x80
 8006230:	431a      	orrs	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2240      	movs	r2, #64	; 0x40
 800623a:	2100      	movs	r1, #0
 800623c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e059      	b.n	80062f6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006246:	b2da      	uxtb	r2, r3
 8006248:	697c      	ldr	r4, [r7, #20]
 800624a:	230a      	movs	r3, #10
 800624c:	18fb      	adds	r3, r7, r3
 800624e:	8819      	ldrh	r1, [r3, #0]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	4b2f      	ldr	r3, [pc, #188]	; (8006310 <HAL_I2C_Master_Receive_DMA+0x204>)
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	0023      	movs	r3, r4
 8006258:	f001 fccc 	bl	8007bf4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2240      	movs	r2, #64	; 0x40
 8006272:	2100      	movs	r1, #0
 8006274:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2110      	movs	r1, #16
 800627a:	0018      	movs	r0, r3
 800627c:	f001 fcf0 	bl	8007c60 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2180      	movs	r1, #128	; 0x80
 800628c:	0209      	lsls	r1, r1, #8
 800628e:	430a      	orrs	r2, r1
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	e02d      	b.n	80062f0 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2241      	movs	r2, #65	; 0x41
 8006298:	2120      	movs	r1, #32
 800629a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2242      	movs	r2, #66	; 0x42
 80062a0:	2100      	movs	r1, #0
 80062a2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a8:	2210      	movs	r2, #16
 80062aa:	431a      	orrs	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2240      	movs	r2, #64	; 0x40
 80062b4:	2100      	movs	r1, #0
 80062b6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e01c      	b.n	80062f6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4a15      	ldr	r2, [pc, #84]	; (8006314 <HAL_I2C_Master_Receive_DMA+0x208>)
 80062c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	2380      	movs	r3, #128	; 0x80
 80062ca:	049c      	lsls	r4, r3, #18
 80062cc:	230a      	movs	r3, #10
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	8819      	ldrh	r1, [r3, #0]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <HAL_I2C_Master_Receive_DMA+0x204>)
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	0023      	movs	r3, r4
 80062da:	f001 fc8b 	bl	8007bf4 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2240      	movs	r2, #64	; 0x40
 80062e2:	2100      	movs	r1, #0
 80062e4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2101      	movs	r1, #1
 80062ea:	0018      	movs	r0, r3
 80062ec:	f001 fcb8 	bl	8007c60 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e000      	b.n	80062f6 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80062f4:	2302      	movs	r3, #2
  }
}
 80062f6:	0018      	movs	r0, r3
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b006      	add	sp, #24
 80062fc:	bdb0      	pop	{r4, r5, r7, pc}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	ffff0000 	.word	0xffff0000
 8006304:	0800696d 	.word	0x0800696d
 8006308:	080077a5 	.word	0x080077a5
 800630c:	08007845 	.word	0x08007845
 8006310:	80002400 	.word	0x80002400
 8006314:	080064c1 	.word	0x080064c1

08006318 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	68f9      	ldr	r1, [r7, #12]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	4798      	blx	r3
  }
}
 8006344:	46c0      	nop			; (mov r8, r8)
 8006346:	46bd      	mov	sp, r7
 8006348:	b004      	add	sp, #16
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	0a1b      	lsrs	r3, r3, #8
 8006368:	001a      	movs	r2, r3
 800636a:	2301      	movs	r3, #1
 800636c:	4013      	ands	r3, r2
 800636e:	d010      	beq.n	8006392 <HAL_I2C_ER_IRQHandler+0x46>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	09db      	lsrs	r3, r3, #7
 8006374:	001a      	movs	r2, r3
 8006376:	2301      	movs	r3, #1
 8006378:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800637a:	d00a      	beq.n	8006392 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006380:	2201      	movs	r2, #1
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2280      	movs	r2, #128	; 0x80
 800638e:	0052      	lsls	r2, r2, #1
 8006390:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	0a9b      	lsrs	r3, r3, #10
 8006396:	001a      	movs	r2, r3
 8006398:	2301      	movs	r3, #1
 800639a:	4013      	ands	r3, r2
 800639c:	d010      	beq.n	80063c0 <HAL_I2C_ER_IRQHandler+0x74>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	09db      	lsrs	r3, r3, #7
 80063a2:	001a      	movs	r2, r3
 80063a4:	2301      	movs	r3, #1
 80063a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80063a8:	d00a      	beq.n	80063c0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ae:	2208      	movs	r2, #8
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2280      	movs	r2, #128	; 0x80
 80063bc:	00d2      	lsls	r2, r2, #3
 80063be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	0a5b      	lsrs	r3, r3, #9
 80063c4:	001a      	movs	r2, r3
 80063c6:	2301      	movs	r3, #1
 80063c8:	4013      	ands	r3, r2
 80063ca:	d010      	beq.n	80063ee <HAL_I2C_ER_IRQHandler+0xa2>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	09db      	lsrs	r3, r3, #7
 80063d0:	001a      	movs	r2, r3
 80063d2:	2301      	movs	r3, #1
 80063d4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80063d6:	d00a      	beq.n	80063ee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063dc:	2202      	movs	r2, #2
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2280      	movs	r2, #128	; 0x80
 80063ea:	0092      	lsls	r2, r2, #2
 80063ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	220b      	movs	r2, #11
 80063f8:	4013      	ands	r3, r2
 80063fa:	d005      	beq.n	8006408 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	0011      	movs	r1, r2
 8006402:	0018      	movs	r0, r3
 8006404:	f001 f850 	bl	80074a8 <I2C_ITError>
  }
}
 8006408:	46c0      	nop			; (mov r8, r8)
 800640a:	46bd      	mov	sp, r7
 800640c:	b006      	add	sp, #24
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006418:	46c0      	nop			; (mov r8, r8)
 800641a:	46bd      	mov	sp, r7
 800641c:	b002      	add	sp, #8
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006428:	46c0      	nop			; (mov r8, r8)
 800642a:	46bd      	mov	sp, r7
 800642c:	b002      	add	sp, #8
 800642e:	bd80      	pop	{r7, pc}

08006430 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006438:	46c0      	nop			; (mov r8, r8)
 800643a:	46bd      	mov	sp, r7
 800643c:	b002      	add	sp, #8
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006448:	46c0      	nop			; (mov r8, r8)
 800644a:	46bd      	mov	sp, r7
 800644c:	b002      	add	sp, #8
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	0008      	movs	r0, r1
 800645a:	0011      	movs	r1, r2
 800645c:	1cfb      	adds	r3, r7, #3
 800645e:	1c02      	adds	r2, r0, #0
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	003b      	movs	r3, r7
 8006464:	1c0a      	adds	r2, r1, #0
 8006466:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006468:	46c0      	nop			; (mov r8, r8)
 800646a:	46bd      	mov	sp, r7
 800646c:	b002      	add	sp, #8
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006478:	46c0      	nop			; (mov r8, r8)
 800647a:	46bd      	mov	sp, r7
 800647c:	b002      	add	sp, #8
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006488:	46c0      	nop			; (mov r8, r8)
 800648a:	46bd      	mov	sp, r7
 800648c:	b002      	add	sp, #8
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006498:	46c0      	nop			; (mov r8, r8)
 800649a:	46bd      	mov	sp, r7
 800649c:	b002      	add	sp, #8
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80064a8:	46c0      	nop			; (mov r8, r8)
 80064aa:	46bd      	mov	sp, r7
 80064ac:	b002      	add	sp, #8
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80064b8:	46c0      	nop			; (mov r8, r8)
 80064ba:	46bd      	mov	sp, r7
 80064bc:	b002      	add	sp, #8
 80064be:	bd80      	pop	{r7, pc}

080064c0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 80064c0:	b590      	push	{r4, r7, lr}
 80064c2:	b089      	sub	sp, #36	; 0x24
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2240      	movs	r2, #64	; 0x40
 80064d4:	5c9b      	ldrb	r3, [r3, r2]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d101      	bne.n	80064de <I2C_Master_ISR_IT+0x1e>
 80064da:	2302      	movs	r3, #2
 80064dc:	e12b      	b.n	8006736 <I2C_Master_ISR_IT+0x276>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2240      	movs	r2, #64	; 0x40
 80064e2:	2101      	movs	r1, #1
 80064e4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	091b      	lsrs	r3, r3, #4
 80064ea:	001a      	movs	r2, r3
 80064ec:	2301      	movs	r3, #1
 80064ee:	4013      	ands	r3, r2
 80064f0:	d014      	beq.n	800651c <I2C_Master_ISR_IT+0x5c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	091b      	lsrs	r3, r3, #4
 80064f6:	001a      	movs	r2, r3
 80064f8:	2301      	movs	r3, #1
 80064fa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064fc:	d00e      	beq.n	800651c <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2210      	movs	r2, #16
 8006504:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650a:	2204      	movs	r2, #4
 800650c:	431a      	orrs	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	0018      	movs	r0, r3
 8006516:	f001 f8d2 	bl	80076be <I2C_Flush_TXDR>
 800651a:	e0f5      	b.n	8006708 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	089b      	lsrs	r3, r3, #2
 8006520:	001a      	movs	r2, r3
 8006522:	2301      	movs	r3, #1
 8006524:	4013      	ands	r3, r2
 8006526:	d023      	beq.n	8006570 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	089b      	lsrs	r3, r3, #2
 800652c:	001a      	movs	r2, r3
 800652e:	2301      	movs	r3, #1
 8006530:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006532:	d01d      	beq.n	8006570 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2204      	movs	r2, #4
 8006538:	4393      	bics	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006558:	3b01      	subs	r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006564:	b29b      	uxth	r3, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800656e:	e0cb      	b.n	8006708 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	085b      	lsrs	r3, r3, #1
 8006574:	001a      	movs	r2, r3
 8006576:	2301      	movs	r3, #1
 8006578:	4013      	ands	r3, r2
 800657a:	d01e      	beq.n	80065ba <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	001a      	movs	r2, r3
 8006582:	2301      	movs	r3, #1
 8006584:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006586:	d018      	beq.n	80065ba <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	781a      	ldrb	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065b8:	e0a6      	b.n	8006708 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	09db      	lsrs	r3, r3, #7
 80065be:	001a      	movs	r2, r3
 80065c0:	2301      	movs	r3, #1
 80065c2:	4013      	ands	r3, r2
 80065c4:	d100      	bne.n	80065c8 <I2C_Master_ISR_IT+0x108>
 80065c6:	e06b      	b.n	80066a0 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	099b      	lsrs	r3, r3, #6
 80065cc:	001a      	movs	r2, r3
 80065ce:	2301      	movs	r3, #1
 80065d0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065d2:	d065      	beq.n	80066a0 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d04a      	beq.n	8006674 <I2C_Master_ISR_IT+0x1b4>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d146      	bne.n	8006674 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	2112      	movs	r1, #18
 80065f0:	187b      	adds	r3, r7, r1
 80065f2:	0592      	lsls	r2, r2, #22
 80065f4:	0d92      	lsrs	r2, r2, #22
 80065f6:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2bff      	cmp	r3, #255	; 0xff
 8006600:	d910      	bls.n	8006624 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	22ff      	movs	r2, #255	; 0xff
 8006606:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660c:	b2da      	uxtb	r2, r3
 800660e:	2380      	movs	r3, #128	; 0x80
 8006610:	045c      	lsls	r4, r3, #17
 8006612:	187b      	adds	r3, r7, r1
 8006614:	8819      	ldrh	r1, [r3, #0]
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	2300      	movs	r3, #0
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	0023      	movs	r3, r4
 800661e:	f001 fae9 	bl	8007bf4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006622:	e03c      	b.n	800669e <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006632:	4a43      	ldr	r2, [pc, #268]	; (8006740 <I2C_Master_ISR_IT+0x280>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00e      	beq.n	8006656 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663c:	b2da      	uxtb	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006642:	2312      	movs	r3, #18
 8006644:	18fb      	adds	r3, r7, r3
 8006646:	8819      	ldrh	r1, [r3, #0]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	2300      	movs	r3, #0
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	0023      	movs	r3, r4
 8006650:	f001 fad0 	bl	8007bf4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006654:	e023      	b.n	800669e <I2C_Master_ISR_IT+0x1de>
                                hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665a:	b2da      	uxtb	r2, r3
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	049c      	lsls	r4, r3, #18
 8006660:	2312      	movs	r3, #18
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	8819      	ldrh	r1, [r3, #0]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	2300      	movs	r3, #0
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	0023      	movs	r3, r4
 800666e:	f001 fac1 	bl	8007bf4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006672:	e014      	b.n	800669e <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	2380      	movs	r3, #128	; 0x80
 800667c:	049b      	lsls	r3, r3, #18
 800667e:	401a      	ands	r2, r3
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	049b      	lsls	r3, r3, #18
 8006684:	429a      	cmp	r2, r3
 8006686:	d004      	beq.n	8006692 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	0018      	movs	r0, r3
 800668c:	f000 fc14 	bl	8006eb8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006690:	e03a      	b.n	8006708 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2140      	movs	r1, #64	; 0x40
 8006696:	0018      	movs	r0, r3
 8006698:	f000 ff06 	bl	80074a8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800669c:	e034      	b.n	8006708 <I2C_Master_ISR_IT+0x248>
 800669e:	e033      	b.n	8006708 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	099b      	lsrs	r3, r3, #6
 80066a4:	001a      	movs	r2, r3
 80066a6:	2301      	movs	r3, #1
 80066a8:	4013      	ands	r3, r2
 80066aa:	d02d      	beq.n	8006708 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	099b      	lsrs	r3, r3, #6
 80066b0:	001a      	movs	r2, r3
 80066b2:	2301      	movs	r3, #1
 80066b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80066b6:	d027      	beq.n	8006708 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d11d      	bne.n	80066fe <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	2380      	movs	r3, #128	; 0x80
 80066ca:	049b      	lsls	r3, r3, #18
 80066cc:	401a      	ands	r2, r3
 80066ce:	2380      	movs	r3, #128	; 0x80
 80066d0:	049b      	lsls	r3, r3, #18
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d018      	beq.n	8006708 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	4a19      	ldr	r2, [pc, #100]	; (8006740 <I2C_Master_ISR_IT+0x280>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d109      	bne.n	80066f4 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2180      	movs	r1, #128	; 0x80
 80066ec:	01c9      	lsls	r1, r1, #7
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
 80066f2:	e009      	b.n	8006708 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	0018      	movs	r0, r3
 80066f8:	f000 fbde 	bl	8006eb8 <I2C_ITMasterSeqCplt>
 80066fc:	e004      	b.n	8006708 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2140      	movs	r1, #64	; 0x40
 8006702:	0018      	movs	r0, r3
 8006704:	f000 fed0 	bl	80074a8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	001a      	movs	r2, r3
 800670e:	2301      	movs	r3, #1
 8006710:	4013      	ands	r3, r2
 8006712:	d00b      	beq.n	800672c <I2C_Master_ISR_IT+0x26c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	095b      	lsrs	r3, r3, #5
 8006718:	001a      	movs	r2, r3
 800671a:	2301      	movs	r3, #1
 800671c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800671e:	d005      	beq.n	800672c <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	0011      	movs	r1, r2
 8006726:	0018      	movs	r0, r3
 8006728:	f000 fc6e 	bl	8007008 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2240      	movs	r2, #64	; 0x40
 8006730:	2100      	movs	r1, #0
 8006732:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	0018      	movs	r0, r3
 8006738:	46bd      	mov	sp, r7
 800673a:	b007      	add	sp, #28
 800673c:	bd90      	pop	{r4, r7, pc}
 800673e:	46c0      	nop			; (mov r8, r8)
 8006740:	ffff0000 	.word	0xffff0000

08006744 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2240      	movs	r2, #64	; 0x40
 800675e:	5c9b      	ldrb	r3, [r3, r2]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <I2C_Slave_ISR_IT+0x24>
 8006764:	2302      	movs	r3, #2
 8006766:	e0fa      	b.n	800695e <I2C_Slave_ISR_IT+0x21a>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2240      	movs	r2, #64	; 0x40
 800676c:	2101      	movs	r1, #1
 800676e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	001a      	movs	r2, r3
 8006776:	2301      	movs	r3, #1
 8006778:	4013      	ands	r3, r2
 800677a:	d00b      	beq.n	8006794 <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	001a      	movs	r2, r3
 8006782:	2301      	movs	r3, #1
 8006784:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006786:	d005      	beq.n	8006794 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	0011      	movs	r1, r2
 800678e:	0018      	movs	r0, r3
 8006790:	f000 fd0c 	bl	80071ac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	091b      	lsrs	r3, r3, #4
 8006798:	001a      	movs	r2, r3
 800679a:	2301      	movs	r3, #1
 800679c:	4013      	ands	r3, r2
 800679e:	d054      	beq.n	800684a <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	091b      	lsrs	r3, r3, #4
 80067a4:	001a      	movs	r2, r3
 80067a6:	2301      	movs	r3, #1
 80067a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80067aa:	d04e      	beq.n	800684a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d12d      	bne.n	8006812 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2241      	movs	r2, #65	; 0x41
 80067ba:	5c9b      	ldrb	r3, [r3, r2]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b28      	cmp	r3, #40	; 0x28
 80067c0:	d10b      	bne.n	80067da <I2C_Slave_ISR_IT+0x96>
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	2380      	movs	r3, #128	; 0x80
 80067c6:	049b      	lsls	r3, r3, #18
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d106      	bne.n	80067da <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	0011      	movs	r1, r2
 80067d2:	0018      	movs	r0, r3
 80067d4:	f000 fe0e 	bl	80073f4 <I2C_ITListenCplt>
 80067d8:	e036      	b.n	8006848 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2241      	movs	r2, #65	; 0x41
 80067de:	5c9b      	ldrb	r3, [r3, r2]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b29      	cmp	r3, #41	; 0x29
 80067e4:	d110      	bne.n	8006808 <I2C_Slave_ISR_IT+0xc4>
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	4a5f      	ldr	r2, [pc, #380]	; (8006968 <I2C_Slave_ISR_IT+0x224>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00c      	beq.n	8006808 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2210      	movs	r2, #16
 80067f4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	0018      	movs	r0, r3
 80067fa:	f000 ff60 	bl	80076be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	0018      	movs	r0, r3
 8006802:	f000 fb9b 	bl	8006f3c <I2C_ITSlaveSeqCplt>
 8006806:	e01f      	b.n	8006848 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2210      	movs	r2, #16
 800680e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006810:	e09d      	b.n	800694e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2210      	movs	r2, #16
 8006818:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681e:	2204      	movs	r2, #4
 8006820:	431a      	orrs	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <I2C_Slave_ISR_IT+0xf4>
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	2380      	movs	r3, #128	; 0x80
 8006830:	045b      	lsls	r3, r3, #17
 8006832:	429a      	cmp	r2, r3
 8006834:	d000      	beq.n	8006838 <I2C_Slave_ISR_IT+0xf4>
 8006836:	e08a      	b.n	800694e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	0011      	movs	r1, r2
 8006840:	0018      	movs	r0, r3
 8006842:	f000 fe31 	bl	80074a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006846:	e082      	b.n	800694e <I2C_Slave_ISR_IT+0x20a>
 8006848:	e081      	b.n	800694e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	089b      	lsrs	r3, r3, #2
 800684e:	001a      	movs	r2, r3
 8006850:	2301      	movs	r3, #1
 8006852:	4013      	ands	r3, r2
 8006854:	d031      	beq.n	80068ba <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	089b      	lsrs	r3, r3, #2
 800685a:	001a      	movs	r2, r3
 800685c:	2301      	movs	r3, #1
 800685e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006860:	d02b      	beq.n	80068ba <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d018      	beq.n	800689e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006888:	3b01      	subs	r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d154      	bne.n	8006952 <I2C_Slave_ISR_IT+0x20e>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	4a2f      	ldr	r2, [pc, #188]	; (8006968 <I2C_Slave_ISR_IT+0x224>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d050      	beq.n	8006952 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	0018      	movs	r0, r3
 80068b4:	f000 fb42 	bl	8006f3c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80068b8:	e04b      	b.n	8006952 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	08db      	lsrs	r3, r3, #3
 80068be:	001a      	movs	r2, r3
 80068c0:	2301      	movs	r3, #1
 80068c2:	4013      	ands	r3, r2
 80068c4:	d00c      	beq.n	80068e0 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	08db      	lsrs	r3, r3, #3
 80068ca:	001a      	movs	r2, r3
 80068cc:	2301      	movs	r3, #1
 80068ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068d0:	d006      	beq.n	80068e0 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	0011      	movs	r1, r2
 80068d8:	0018      	movs	r0, r3
 80068da:	f000 fa49 	bl	8006d70 <I2C_ITAddrCplt>
 80068de:	e039      	b.n	8006954 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	001a      	movs	r2, r3
 80068e6:	2301      	movs	r3, #1
 80068e8:	4013      	ands	r3, r2
 80068ea:	d033      	beq.n	8006954 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	085b      	lsrs	r3, r3, #1
 80068f0:	001a      	movs	r2, r3
 80068f2:	2301      	movs	r3, #1
 80068f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068f6:	d02d      	beq.n	8006954 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d018      	beq.n	8006934 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	781a      	ldrb	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691c:	b29b      	uxth	r3, r3
 800691e:	3b01      	subs	r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	851a      	strh	r2, [r3, #40]	; 0x28
 8006932:	e00f      	b.n	8006954 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	2380      	movs	r3, #128	; 0x80
 8006938:	045b      	lsls	r3, r3, #17
 800693a:	429a      	cmp	r2, r3
 800693c:	d002      	beq.n	8006944 <I2C_Slave_ISR_IT+0x200>
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d107      	bne.n	8006954 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	0018      	movs	r0, r3
 8006948:	f000 faf8 	bl	8006f3c <I2C_ITSlaveSeqCplt>
 800694c:	e002      	b.n	8006954 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800694e:	46c0      	nop			; (mov r8, r8)
 8006950:	e000      	b.n	8006954 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006952:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2240      	movs	r2, #64	; 0x40
 8006958:	2100      	movs	r1, #0
 800695a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	0018      	movs	r0, r3
 8006960:	46bd      	mov	sp, r7
 8006962:	b006      	add	sp, #24
 8006964:	bd80      	pop	{r7, pc}
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	ffff0000 	.word	0xffff0000

0800696c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                               uint32_t ITSources)
{
 800696c:	b590      	push	{r4, r7, lr}
 800696e:	b089      	sub	sp, #36	; 0x24
 8006970:	af02      	add	r7, sp, #8
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2240      	movs	r2, #64	; 0x40
 800697c:	5c9b      	ldrb	r3, [r3, r2]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <I2C_Master_ISR_DMA+0x1a>
 8006982:	2302      	movs	r3, #2
 8006984:	e0f7      	b.n	8006b76 <I2C_Master_ISR_DMA+0x20a>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2240      	movs	r2, #64	; 0x40
 800698a:	2101      	movs	r1, #1
 800698c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	091b      	lsrs	r3, r3, #4
 8006992:	001a      	movs	r2, r3
 8006994:	2301      	movs	r3, #1
 8006996:	4013      	ands	r3, r2
 8006998:	d019      	beq.n	80069ce <I2C_Master_ISR_DMA+0x62>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	091b      	lsrs	r3, r3, #4
 800699e:	001a      	movs	r2, r3
 80069a0:	2301      	movs	r3, #1
 80069a2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80069a4:	d013      	beq.n	80069ce <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2210      	movs	r2, #16
 80069ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b2:	2204      	movs	r2, #4
 80069b4:	431a      	orrs	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2120      	movs	r1, #32
 80069be:	0018      	movs	r0, r3
 80069c0:	f001 f94e 	bl	8007c60 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	0018      	movs	r0, r3
 80069c8:	f000 fe79 	bl	80076be <I2C_Flush_TXDR>
 80069cc:	e0ce      	b.n	8006b6c <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	09db      	lsrs	r3, r3, #7
 80069d2:	001a      	movs	r2, r3
 80069d4:	2301      	movs	r3, #1
 80069d6:	4013      	ands	r3, r2
 80069d8:	d100      	bne.n	80069dc <I2C_Master_ISR_DMA+0x70>
 80069da:	e07e      	b.n	8006ada <I2C_Master_ISR_DMA+0x16e>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	099b      	lsrs	r3, r3, #6
 80069e0:	001a      	movs	r2, r3
 80069e2:	2301      	movs	r3, #1
 80069e4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80069e6:	d100      	bne.n	80069ea <I2C_Master_ISR_DMA+0x7e>
 80069e8:	e077      	b.n	8006ada <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2140      	movs	r1, #64	; 0x40
 80069f6:	438a      	bics	r2, r1
 80069f8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d055      	beq.n	8006ab0 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	2312      	movs	r3, #18
 8006a0e:	18fb      	adds	r3, r7, r3
 8006a10:	0592      	lsls	r2, r2, #22
 8006a12:	0d92      	lsrs	r2, r2, #22
 8006a14:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2bff      	cmp	r3, #255	; 0xff
 8006a1e:	d906      	bls.n	8006a2e <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	22ff      	movs	r2, #255	; 0xff
 8006a24:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006a26:	2380      	movs	r3, #128	; 0x80
 8006a28:	045b      	lsls	r3, r3, #17
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	e010      	b.n	8006a50 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	4a50      	ldr	r2, [pc, #320]	; (8006b80 <I2C_Master_ISR_DMA+0x214>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d003      	beq.n	8006a4a <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	e002      	b.n	8006a50 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006a4a:	2380      	movs	r3, #128	; 0x80
 8006a4c:	049b      	lsls	r3, r3, #18
 8006a4e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	697c      	ldr	r4, [r7, #20]
 8006a58:	2312      	movs	r3, #18
 8006a5a:	18fb      	adds	r3, r7, r3
 8006a5c:	8819      	ldrh	r1, [r3, #0]
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	2300      	movs	r3, #0
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	0023      	movs	r3, r4
 8006a66:	f001 f8c5 	bl	8007bf4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2241      	movs	r2, #65	; 0x41
 8006a80:	5c9b      	ldrb	r3, [r3, r2]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b22      	cmp	r3, #34	; 0x22
 8006a86:	d109      	bne.n	8006a9c <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2180      	movs	r1, #128	; 0x80
 8006a94:	0209      	lsls	r1, r1, #8
 8006a96:	430a      	orrs	r2, r1
 8006a98:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a9a:	e067      	b.n	8006b6c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2180      	movs	r1, #128	; 0x80
 8006aa8:	01c9      	lsls	r1, r1, #7
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006aae:	e05d      	b.n	8006b6c <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	2380      	movs	r3, #128	; 0x80
 8006ab8:	049b      	lsls	r3, r3, #18
 8006aba:	401a      	ands	r2, r3
 8006abc:	2380      	movs	r3, #128	; 0x80
 8006abe:	049b      	lsls	r3, r3, #18
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d004      	beq.n	8006ace <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f000 f9f6 	bl	8006eb8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006acc:	e04e      	b.n	8006b6c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2140      	movs	r1, #64	; 0x40
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	f000 fce8 	bl	80074a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006ad8:	e048      	b.n	8006b6c <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	099b      	lsrs	r3, r3, #6
 8006ade:	001a      	movs	r2, r3
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	d02e      	beq.n	8006b44 <I2C_Master_ISR_DMA+0x1d8>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	099b      	lsrs	r3, r3, #6
 8006aea:	001a      	movs	r2, r3
 8006aec:	2301      	movs	r3, #1
 8006aee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006af0:	d028      	beq.n	8006b44 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d11d      	bne.n	8006b38 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	2380      	movs	r3, #128	; 0x80
 8006b04:	049b      	lsls	r3, r3, #18
 8006b06:	401a      	ands	r2, r3
 8006b08:	2380      	movs	r3, #128	; 0x80
 8006b0a:	049b      	lsls	r3, r3, #18
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d02c      	beq.n	8006b6a <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	4a1a      	ldr	r2, [pc, #104]	; (8006b80 <I2C_Master_ISR_DMA+0x214>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d109      	bne.n	8006b2e <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2180      	movs	r1, #128	; 0x80
 8006b26:	01c9      	lsls	r1, r1, #7
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006b2c:	e01d      	b.n	8006b6a <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f000 f9c1 	bl	8006eb8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006b36:	e018      	b.n	8006b6a <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2140      	movs	r1, #64	; 0x40
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f000 fcb3 	bl	80074a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006b42:	e012      	b.n	8006b6a <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	001a      	movs	r2, r3
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	d00d      	beq.n	8006b6c <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	001a      	movs	r2, r3
 8006b56:	2301      	movs	r3, #1
 8006b58:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b5a:	d007      	beq.n	8006b6c <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	0011      	movs	r1, r2
 8006b62:	0018      	movs	r0, r3
 8006b64:	f000 fa50 	bl	8007008 <I2C_ITMasterCplt>
 8006b68:	e000      	b.n	8006b6c <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8006b6a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2240      	movs	r2, #64	; 0x40
 8006b70:	2100      	movs	r1, #0
 8006b72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	0018      	movs	r0, r3
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	b007      	add	sp, #28
 8006b7c:	bd90      	pop	{r4, r7, pc}
 8006b7e:	46c0      	nop			; (mov r8, r8)
 8006b80:	ffff0000 	.word	0xffff0000

08006b84 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2240      	movs	r2, #64	; 0x40
 8006b9e:	5c9b      	ldrb	r3, [r3, r2]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <I2C_Slave_ISR_DMA+0x24>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e0dd      	b.n	8006d64 <I2C_Slave_ISR_DMA+0x1e0>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2240      	movs	r2, #64	; 0x40
 8006bac:	2101      	movs	r1, #1
 8006bae:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	001a      	movs	r2, r3
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d00b      	beq.n	8006bd4 <I2C_Slave_ISR_DMA+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	001a      	movs	r2, r3
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006bc6:	d005      	beq.n	8006bd4 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	0011      	movs	r1, r2
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 faec 	bl	80071ac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	091b      	lsrs	r3, r3, #4
 8006bd8:	001a      	movs	r2, r3
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4013      	ands	r3, r2
 8006bde:	d100      	bne.n	8006be2 <I2C_Slave_ISR_DMA+0x5e>
 8006be0:	e0a9      	b.n	8006d36 <I2C_Slave_ISR_DMA+0x1b2>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	091b      	lsrs	r3, r3, #4
 8006be6:	001a      	movs	r2, r3
 8006be8:	2301      	movs	r3, #1
 8006bea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006bec:	d100      	bne.n	8006bf0 <I2C_Slave_ISR_DMA+0x6c>
 8006bee:	e0a2      	b.n	8006d36 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	0b9b      	lsrs	r3, r3, #14
 8006bf4:	001a      	movs	r2, r3
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d106      	bne.n	8006c0a <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	0bdb      	lsrs	r3, r3, #15
 8006c00:	001a      	movs	r2, r3
 8006c02:	2301      	movs	r3, #1
 8006c04:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c06:	d100      	bne.n	8006c0a <I2C_Slave_ISR_DMA+0x86>
 8006c08:	e08e      	b.n	8006d28 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00d      	beq.n	8006c2e <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	0bdb      	lsrs	r3, r3, #15
 8006c16:	001a      	movs	r2, r3
 8006c18:	2301      	movs	r3, #1
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00d      	beq.n	8006c52 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	0b9b      	lsrs	r3, r3, #14
 8006c3a:	001a      	movs	r2, r3
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	4013      	ands	r3, r2
 8006c40:	d007      	beq.n	8006c52 <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d12d      	bne.n	8006cb4 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2241      	movs	r2, #65	; 0x41
 8006c5c:	5c9b      	ldrb	r3, [r3, r2]
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b28      	cmp	r3, #40	; 0x28
 8006c62:	d10b      	bne.n	8006c7c <I2C_Slave_ISR_DMA+0xf8>
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	2380      	movs	r3, #128	; 0x80
 8006c68:	049b      	lsls	r3, r3, #18
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d106      	bne.n	8006c7c <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	0011      	movs	r1, r2
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 fbbd 	bl	80073f4 <I2C_ITListenCplt>
 8006c7a:	e054      	b.n	8006d26 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2241      	movs	r2, #65	; 0x41
 8006c80:	5c9b      	ldrb	r3, [r3, r2]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b29      	cmp	r3, #41	; 0x29
 8006c86:	d110      	bne.n	8006caa <I2C_Slave_ISR_DMA+0x126>
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	4a38      	ldr	r2, [pc, #224]	; (8006d6c <I2C_Slave_ISR_DMA+0x1e8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00c      	beq.n	8006caa <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2210      	movs	r2, #16
 8006c96:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f000 fd0f 	bl	80076be <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f000 f94a 	bl	8006f3c <I2C_ITSlaveSeqCplt>
 8006ca8:	e03d      	b.n	8006d26 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2210      	movs	r2, #16
 8006cb0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006cb2:	e03e      	b.n	8006d32 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2210      	movs	r2, #16
 8006cba:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006cc8:	2317      	movs	r3, #23
 8006cca:	18fb      	adds	r3, r7, r3
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	2141      	movs	r1, #65	; 0x41
 8006cd0:	5c52      	ldrb	r2, [r2, r1]
 8006cd2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d004      	beq.n	8006ce4 <I2C_Slave_ISR_DMA+0x160>
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	2380      	movs	r3, #128	; 0x80
 8006cde:	045b      	lsls	r3, r3, #17
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d126      	bne.n	8006d32 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006ce4:	2217      	movs	r2, #23
 8006ce6:	18bb      	adds	r3, r7, r2
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b21      	cmp	r3, #33	; 0x21
 8006cec:	d003      	beq.n	8006cf6 <I2C_Slave_ISR_DMA+0x172>
 8006cee:	18bb      	adds	r3, r7, r2
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b29      	cmp	r3, #41	; 0x29
 8006cf4:	d103      	bne.n	8006cfe <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2221      	movs	r2, #33	; 0x21
 8006cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8006cfc:	e00b      	b.n	8006d16 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cfe:	2217      	movs	r2, #23
 8006d00:	18bb      	adds	r3, r7, r2
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b22      	cmp	r3, #34	; 0x22
 8006d06:	d003      	beq.n	8006d10 <I2C_Slave_ISR_DMA+0x18c>
 8006d08:	18bb      	adds	r3, r7, r2
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d0e:	d102      	bne.n	8006d16 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2222      	movs	r2, #34	; 0x22
 8006d14:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	0011      	movs	r1, r2
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f000 fbc2 	bl	80074a8 <I2C_ITError>
      if (treatdmanack == 1U)
 8006d24:	e005      	b.n	8006d32 <I2C_Slave_ISR_DMA+0x1ae>
 8006d26:	e004      	b.n	8006d32 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2210      	movs	r2, #16
 8006d2e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006d30:	e013      	b.n	8006d5a <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8006d32:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006d34:	e011      	b.n	8006d5a <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	08db      	lsrs	r3, r3, #3
 8006d3a:	001a      	movs	r2, r3
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	4013      	ands	r3, r2
 8006d40:	d00b      	beq.n	8006d5a <I2C_Slave_ISR_DMA+0x1d6>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	08db      	lsrs	r3, r3, #3
 8006d46:	001a      	movs	r2, r3
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006d4c:	d005      	beq.n	8006d5a <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	0011      	movs	r1, r2
 8006d54:	0018      	movs	r0, r3
 8006d56:	f000 f80b 	bl	8006d70 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2240      	movs	r2, #64	; 0x40
 8006d5e:	2100      	movs	r1, #0
 8006d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	0018      	movs	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b008      	add	sp, #32
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	ffff0000 	.word	0xffff0000

08006d70 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d70:	b5b0      	push	{r4, r5, r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2241      	movs	r2, #65	; 0x41
 8006d7e:	5c9b      	ldrb	r3, [r3, r2]
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	001a      	movs	r2, r3
 8006d84:	2328      	movs	r3, #40	; 0x28
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b28      	cmp	r3, #40	; 0x28
 8006d8a:	d000      	beq.n	8006d8e <I2C_ITAddrCplt+0x1e>
 8006d8c:	e088      	b.n	8006ea0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	0c1b      	lsrs	r3, r3, #16
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	250f      	movs	r5, #15
 8006d9a:	197b      	adds	r3, r7, r5
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	400a      	ands	r2, r1
 8006da0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	0c1b      	lsrs	r3, r3, #16
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	200c      	movs	r0, #12
 8006dae:	183b      	adds	r3, r7, r0
 8006db0:	21fe      	movs	r1, #254	; 0xfe
 8006db2:	400a      	ands	r2, r1
 8006db4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	240a      	movs	r4, #10
 8006dc0:	193b      	adds	r3, r7, r4
 8006dc2:	0592      	lsls	r2, r2, #22
 8006dc4:	0d92      	lsrs	r2, r2, #22
 8006dc6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	21fe      	movs	r1, #254	; 0xfe
 8006dd6:	400a      	ands	r2, r1
 8006dd8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d148      	bne.n	8006e74 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006de2:	0021      	movs	r1, r4
 8006de4:	187b      	adds	r3, r7, r1
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	09db      	lsrs	r3, r3, #7
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	183b      	adds	r3, r7, r0
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	4053      	eors	r3, r2
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	001a      	movs	r2, r3
 8006df6:	2306      	movs	r3, #6
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d120      	bne.n	8006e3e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006dfc:	183b      	adds	r3, r7, r0
 8006dfe:	187a      	adds	r2, r7, r1
 8006e00:	8812      	ldrh	r2, [r2, #0]
 8006e02:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d14c      	bne.n	8006eb0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2208      	movs	r2, #8
 8006e22:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2240      	movs	r2, #64	; 0x40
 8006e28:	2100      	movs	r1, #0
 8006e2a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e2c:	183b      	adds	r3, r7, r0
 8006e2e:	881a      	ldrh	r2, [r3, #0]
 8006e30:	197b      	adds	r3, r7, r5
 8006e32:	7819      	ldrb	r1, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	0018      	movs	r0, r3
 8006e38:	f7ff fb0a 	bl	8006450 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006e3c:	e038      	b.n	8006eb0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006e3e:	240c      	movs	r4, #12
 8006e40:	193b      	adds	r3, r7, r4
 8006e42:	2208      	movs	r2, #8
 8006e44:	18ba      	adds	r2, r7, r2
 8006e46:	8812      	ldrh	r2, [r2, #0]
 8006e48:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006e4a:	2380      	movs	r3, #128	; 0x80
 8006e4c:	021a      	lsls	r2, r3, #8
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	0011      	movs	r1, r2
 8006e52:	0018      	movs	r0, r3
 8006e54:	f000 ff6c 	bl	8007d30 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2240      	movs	r2, #64	; 0x40
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e60:	193b      	adds	r3, r7, r4
 8006e62:	881a      	ldrh	r2, [r3, #0]
 8006e64:	230f      	movs	r3, #15
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	7819      	ldrb	r1, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f7ff faef 	bl	8006450 <HAL_I2C_AddrCallback>
}
 8006e72:	e01d      	b.n	8006eb0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006e74:	2380      	movs	r3, #128	; 0x80
 8006e76:	021a      	lsls	r2, r3, #8
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	0011      	movs	r1, r2
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f000 ff57 	bl	8007d30 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2240      	movs	r2, #64	; 0x40
 8006e86:	2100      	movs	r1, #0
 8006e88:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e8a:	230c      	movs	r3, #12
 8006e8c:	18fb      	adds	r3, r7, r3
 8006e8e:	881a      	ldrh	r2, [r3, #0]
 8006e90:	230f      	movs	r3, #15
 8006e92:	18fb      	adds	r3, r7, r3
 8006e94:	7819      	ldrb	r1, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f7ff fad9 	bl	8006450 <HAL_I2C_AddrCallback>
}
 8006e9e:	e007      	b.n	8006eb0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2240      	movs	r2, #64	; 0x40
 8006eac:	2100      	movs	r1, #0
 8006eae:	5499      	strb	r1, [r3, r2]
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b004      	add	sp, #16
 8006eb6:	bdb0      	pop	{r4, r5, r7, pc}

08006eb8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2242      	movs	r2, #66	; 0x42
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2241      	movs	r2, #65	; 0x41
 8006ecc:	5c9b      	ldrb	r3, [r3, r2]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b21      	cmp	r3, #33	; 0x21
 8006ed2:	d117      	bne.n	8006f04 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2241      	movs	r2, #65	; 0x41
 8006ed8:	2120      	movs	r1, #32
 8006eda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2211      	movs	r2, #17
 8006ee0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2101      	movs	r1, #1
 8006eec:	0018      	movs	r0, r3
 8006eee:	f000 ff1f 	bl	8007d30 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2240      	movs	r2, #64	; 0x40
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	0018      	movs	r0, r3
 8006efe:	f7ff fa87 	bl	8006410 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f02:	e016      	b.n	8006f32 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2241      	movs	r2, #65	; 0x41
 8006f08:	2120      	movs	r1, #32
 8006f0a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2212      	movs	r2, #18
 8006f10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2102      	movs	r1, #2
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f000 ff07 	bl	8007d30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2240      	movs	r2, #64	; 0x40
 8006f26:	2100      	movs	r1, #0
 8006f28:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	f7ff fa77 	bl	8006420 <HAL_I2C_MasterRxCpltCallback>
}
 8006f32:	46c0      	nop			; (mov r8, r8)
 8006f34:	46bd      	mov	sp, r7
 8006f36:	b002      	add	sp, #8
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2242      	movs	r2, #66	; 0x42
 8006f50:	2100      	movs	r1, #0
 8006f52:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	0b9b      	lsrs	r3, r3, #14
 8006f58:	001a      	movs	r2, r3
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	d008      	beq.n	8006f72 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4925      	ldr	r1, [pc, #148]	; (8007000 <I2C_ITSlaveSeqCplt+0xc4>)
 8006f6c:	400a      	ands	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	e00d      	b.n	8006f8e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	0bdb      	lsrs	r3, r3, #15
 8006f76:	001a      	movs	r2, r3
 8006f78:	2301      	movs	r3, #1
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	d007      	beq.n	8006f8e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	491e      	ldr	r1, [pc, #120]	; (8007004 <I2C_ITSlaveSeqCplt+0xc8>)
 8006f8a:	400a      	ands	r2, r1
 8006f8c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2241      	movs	r2, #65	; 0x41
 8006f92:	5c9b      	ldrb	r3, [r3, r2]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b29      	cmp	r3, #41	; 0x29
 8006f98:	d114      	bne.n	8006fc4 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2241      	movs	r2, #65	; 0x41
 8006f9e:	2128      	movs	r1, #40	; 0x28
 8006fa0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2221      	movs	r2, #33	; 0x21
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2101      	movs	r1, #1
 8006fac:	0018      	movs	r0, r3
 8006fae:	f000 febf 	bl	8007d30 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2240      	movs	r2, #64	; 0x40
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f7ff fa37 	bl	8006430 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fc2:	e019      	b.n	8006ff8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2241      	movs	r2, #65	; 0x41
 8006fc8:	5c9b      	ldrb	r3, [r3, r2]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8006fce:	d113      	bne.n	8006ff8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2241      	movs	r2, #65	; 0x41
 8006fd4:	2128      	movs	r1, #40	; 0x28
 8006fd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2222      	movs	r2, #34	; 0x22
 8006fdc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2102      	movs	r1, #2
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	f000 fea4 	bl	8007d30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2240      	movs	r2, #64	; 0x40
 8006fec:	2100      	movs	r1, #0
 8006fee:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	f7ff fa24 	bl	8006440 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ff8:	46c0      	nop			; (mov r8, r8)
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	b004      	add	sp, #16
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	ffffbfff 	.word	0xffffbfff
 8007004:	ffff7fff 	.word	0xffff7fff

08007008 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2220      	movs	r2, #32
 800701c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2241      	movs	r2, #65	; 0x41
 8007022:	5c9b      	ldrb	r3, [r3, r2]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b21      	cmp	r3, #33	; 0x21
 8007028:	d108      	bne.n	800703c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2101      	movs	r1, #1
 800702e:	0018      	movs	r0, r3
 8007030:	f000 fe7e 	bl	8007d30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2211      	movs	r2, #17
 8007038:	631a      	str	r2, [r3, #48]	; 0x30
 800703a:	e00d      	b.n	8007058 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2241      	movs	r2, #65	; 0x41
 8007040:	5c9b      	ldrb	r3, [r3, r2]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b22      	cmp	r3, #34	; 0x22
 8007046:	d107      	bne.n	8007058 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2102      	movs	r1, #2
 800704c:	0018      	movs	r0, r3
 800704e:	f000 fe6f 	bl	8007d30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2212      	movs	r2, #18
 8007056:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4950      	ldr	r1, [pc, #320]	; (80071a4 <I2C_ITMasterCplt+0x19c>)
 8007064:	400a      	ands	r2, r1
 8007066:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a4d      	ldr	r2, [pc, #308]	; (80071a8 <I2C_ITMasterCplt+0x1a0>)
 8007072:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	091b      	lsrs	r3, r3, #4
 8007078:	001a      	movs	r2, r3
 800707a:	2301      	movs	r3, #1
 800707c:	4013      	ands	r3, r2
 800707e:	d009      	beq.n	8007094 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2210      	movs	r2, #16
 8007086:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708c:	2204      	movs	r2, #4
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2241      	movs	r2, #65	; 0x41
 8007098:	5c9b      	ldrb	r3, [r3, r2]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b60      	cmp	r3, #96	; 0x60
 800709e:	d10b      	bne.n	80070b8 <I2C_ITMasterCplt+0xb0>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	089b      	lsrs	r3, r3, #2
 80070a4:	001a      	movs	r2, r3
 80070a6:	2301      	movs	r3, #1
 80070a8:	4013      	ands	r3, r2
 80070aa:	d005      	beq.n	80070b8 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80070b6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	0018      	movs	r0, r3
 80070bc:	f000 faff 	bl	80076be <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2241      	movs	r2, #65	; 0x41
 80070ca:	5c9b      	ldrb	r3, [r3, r2]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b60      	cmp	r3, #96	; 0x60
 80070d0:	d002      	beq.n	80070d8 <I2C_ITMasterCplt+0xd0>
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d007      	beq.n	80070e8 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	0011      	movs	r1, r2
 80070e0:	0018      	movs	r0, r3
 80070e2:	f000 f9e1 	bl	80074a8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80070e6:	e058      	b.n	800719a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2241      	movs	r2, #65	; 0x41
 80070ec:	5c9b      	ldrb	r3, [r3, r2]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b21      	cmp	r3, #33	; 0x21
 80070f2:	d126      	bne.n	8007142 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2241      	movs	r2, #65	; 0x41
 80070f8:	2120      	movs	r1, #32
 80070fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2242      	movs	r2, #66	; 0x42
 8007106:	5c9b      	ldrb	r3, [r3, r2]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	d10c      	bne.n	8007128 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2242      	movs	r2, #66	; 0x42
 8007112:	2100      	movs	r1, #0
 8007114:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2240      	movs	r2, #64	; 0x40
 800711a:	2100      	movs	r1, #0
 800711c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	0018      	movs	r0, r3
 8007122:	f7ff f9ad 	bl	8006480 <HAL_I2C_MemTxCpltCallback>
}
 8007126:	e038      	b.n	800719a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2242      	movs	r2, #66	; 0x42
 800712c:	2100      	movs	r1, #0
 800712e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2240      	movs	r2, #64	; 0x40
 8007134:	2100      	movs	r1, #0
 8007136:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	0018      	movs	r0, r3
 800713c:	f7ff f968 	bl	8006410 <HAL_I2C_MasterTxCpltCallback>
}
 8007140:	e02b      	b.n	800719a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2241      	movs	r2, #65	; 0x41
 8007146:	5c9b      	ldrb	r3, [r3, r2]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b22      	cmp	r3, #34	; 0x22
 800714c:	d125      	bne.n	800719a <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2241      	movs	r2, #65	; 0x41
 8007152:	2120      	movs	r1, #32
 8007154:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2242      	movs	r2, #66	; 0x42
 8007160:	5c9b      	ldrb	r3, [r3, r2]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b40      	cmp	r3, #64	; 0x40
 8007166:	d10c      	bne.n	8007182 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2242      	movs	r2, #66	; 0x42
 800716c:	2100      	movs	r1, #0
 800716e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2240      	movs	r2, #64	; 0x40
 8007174:	2100      	movs	r1, #0
 8007176:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	0018      	movs	r0, r3
 800717c:	f7ff f988 	bl	8006490 <HAL_I2C_MemRxCpltCallback>
}
 8007180:	e00b      	b.n	800719a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2242      	movs	r2, #66	; 0x42
 8007186:	2100      	movs	r1, #0
 8007188:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2240      	movs	r2, #64	; 0x40
 800718e:	2100      	movs	r1, #0
 8007190:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	0018      	movs	r0, r3
 8007196:	f7ff f943 	bl	8006420 <HAL_I2C_MasterRxCpltCallback>
}
 800719a:	46c0      	nop			; (mov r8, r8)
 800719c:	46bd      	mov	sp, r7
 800719e:	b006      	add	sp, #24
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	46c0      	nop			; (mov r8, r8)
 80071a4:	fe00e800 	.word	0xfe00e800
 80071a8:	ffff0000 	.word	0xffff0000

080071ac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80071c2:	200f      	movs	r0, #15
 80071c4:	183b      	adds	r3, r7, r0
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	2141      	movs	r1, #65	; 0x41
 80071ca:	5c52      	ldrb	r2, [r2, r1]
 80071cc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2220      	movs	r2, #32
 80071d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80071d6:	183b      	adds	r3, r7, r0
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b21      	cmp	r3, #33	; 0x21
 80071dc:	d003      	beq.n	80071e6 <I2C_ITSlaveCplt+0x3a>
 80071de:	183b      	adds	r3, r7, r0
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	2b29      	cmp	r3, #41	; 0x29
 80071e4:	d109      	bne.n	80071fa <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80071e6:	4a7d      	ldr	r2, [pc, #500]	; (80073dc <I2C_ITSlaveCplt+0x230>)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	0011      	movs	r1, r2
 80071ec:	0018      	movs	r0, r3
 80071ee:	f000 fd9f 	bl	8007d30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2221      	movs	r2, #33	; 0x21
 80071f6:	631a      	str	r2, [r3, #48]	; 0x30
 80071f8:	e011      	b.n	800721e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80071fa:	220f      	movs	r2, #15
 80071fc:	18bb      	adds	r3, r7, r2
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b22      	cmp	r3, #34	; 0x22
 8007202:	d003      	beq.n	800720c <I2C_ITSlaveCplt+0x60>
 8007204:	18bb      	adds	r3, r7, r2
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b2a      	cmp	r3, #42	; 0x2a
 800720a:	d108      	bne.n	800721e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800720c:	4a74      	ldr	r2, [pc, #464]	; (80073e0 <I2C_ITSlaveCplt+0x234>)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	0011      	movs	r1, r2
 8007212:	0018      	movs	r0, r3
 8007214:	f000 fd8c 	bl	8007d30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2222      	movs	r2, #34	; 0x22
 800721c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2180      	movs	r1, #128	; 0x80
 800722a:	0209      	lsls	r1, r1, #8
 800722c:	430a      	orrs	r2, r1
 800722e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	496a      	ldr	r1, [pc, #424]	; (80073e4 <I2C_ITSlaveCplt+0x238>)
 800723c:	400a      	ands	r2, r1
 800723e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	0018      	movs	r0, r3
 8007244:	f000 fa3b 	bl	80076be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	0b9b      	lsrs	r3, r3, #14
 800724c:	001a      	movs	r2, r3
 800724e:	2301      	movs	r3, #1
 8007250:	4013      	ands	r3, r2
 8007252:	d013      	beq.n	800727c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4962      	ldr	r1, [pc, #392]	; (80073e8 <I2C_ITSlaveCplt+0x23c>)
 8007260:	400a      	ands	r2, r1
 8007262:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	2b00      	cmp	r3, #0
 800726a:	d020      	beq.n	80072ae <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	b29a      	uxth	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	855a      	strh	r2, [r3, #42]	; 0x2a
 800727a:	e018      	b.n	80072ae <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	0bdb      	lsrs	r3, r3, #15
 8007280:	001a      	movs	r2, r3
 8007282:	2301      	movs	r3, #1
 8007284:	4013      	ands	r3, r2
 8007286:	d012      	beq.n	80072ae <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4956      	ldr	r1, [pc, #344]	; (80073ec <I2C_ITSlaveCplt+0x240>)
 8007294:	400a      	ands	r2, r1
 8007296:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	089b      	lsrs	r3, r3, #2
 80072b2:	001a      	movs	r2, r3
 80072b4:	2301      	movs	r3, #1
 80072b6:	4013      	ands	r3, r2
 80072b8:	d020      	beq.n	80072fc <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2204      	movs	r2, #4
 80072be:	4393      	bics	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00c      	beq.n	80072fc <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d005      	beq.n	8007312 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730a:	2204      	movs	r2, #4
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2242      	movs	r2, #66	; 0x42
 8007316:	2100      	movs	r1, #0
 8007318:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007324:	2b00      	cmp	r3, #0
 8007326:	d013      	beq.n	8007350 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	0011      	movs	r1, r2
 8007330:	0018      	movs	r0, r3
 8007332:	f000 f8b9 	bl	80074a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2241      	movs	r2, #65	; 0x41
 800733a:	5c9b      	ldrb	r3, [r3, r2]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b28      	cmp	r3, #40	; 0x28
 8007340:	d147      	bne.n	80073d2 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	0011      	movs	r1, r2
 8007348:	0018      	movs	r0, r3
 800734a:	f000 f853 	bl	80073f4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800734e:	e040      	b.n	80073d2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	4a26      	ldr	r2, [pc, #152]	; (80073f0 <I2C_ITSlaveCplt+0x244>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d016      	beq.n	8007388 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	0018      	movs	r0, r3
 800735e:	f7ff fded 	bl	8006f3c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a22      	ldr	r2, [pc, #136]	; (80073f0 <I2C_ITSlaveCplt+0x244>)
 8007366:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2241      	movs	r2, #65	; 0x41
 800736c:	2120      	movs	r1, #32
 800736e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2240      	movs	r2, #64	; 0x40
 800737a:	2100      	movs	r1, #0
 800737c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	0018      	movs	r0, r3
 8007382:	f7ff f875 	bl	8006470 <HAL_I2C_ListenCpltCallback>
}
 8007386:	e024      	b.n	80073d2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2241      	movs	r2, #65	; 0x41
 800738c:	5c9b      	ldrb	r3, [r3, r2]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b22      	cmp	r3, #34	; 0x22
 8007392:	d10f      	bne.n	80073b4 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2241      	movs	r2, #65	; 0x41
 8007398:	2120      	movs	r1, #32
 800739a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2240      	movs	r2, #64	; 0x40
 80073a6:	2100      	movs	r1, #0
 80073a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	0018      	movs	r0, r3
 80073ae:	f7ff f847 	bl	8006440 <HAL_I2C_SlaveRxCpltCallback>
}
 80073b2:	e00e      	b.n	80073d2 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2241      	movs	r2, #65	; 0x41
 80073b8:	2120      	movs	r1, #32
 80073ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2240      	movs	r2, #64	; 0x40
 80073c6:	2100      	movs	r1, #0
 80073c8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	0018      	movs	r0, r3
 80073ce:	f7ff f82f 	bl	8006430 <HAL_I2C_SlaveTxCpltCallback>
}
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	46bd      	mov	sp, r7
 80073d6:	b006      	add	sp, #24
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	00008001 	.word	0x00008001
 80073e0:	00008002 	.word	0x00008002
 80073e4:	fe00e800 	.word	0xfe00e800
 80073e8:	ffffbfff 	.word	0xffffbfff
 80073ec:	ffff7fff 	.word	0xffff7fff
 80073f0:	ffff0000 	.word	0xffff0000

080073f4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a27      	ldr	r2, [pc, #156]	; (80074a0 <I2C_ITListenCplt+0xac>)
 8007402:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2241      	movs	r2, #65	; 0x41
 800740e:	2120      	movs	r1, #32
 8007410:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2242      	movs	r2, #66	; 0x42
 8007416:	2100      	movs	r1, #0
 8007418:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	089b      	lsrs	r3, r3, #2
 8007424:	001a      	movs	r2, r3
 8007426:	2301      	movs	r3, #1
 8007428:	4013      	ands	r3, r2
 800742a:	d022      	beq.n	8007472 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007448:	2b00      	cmp	r3, #0
 800744a:	d012      	beq.n	8007472 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745c:	b29b      	uxth	r3, r3
 800745e:	3b01      	subs	r3, #1
 8007460:	b29a      	uxth	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746a:	2204      	movs	r2, #4
 800746c:	431a      	orrs	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007472:	4a0c      	ldr	r2, [pc, #48]	; (80074a4 <I2C_ITListenCplt+0xb0>)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	0011      	movs	r1, r2
 8007478:	0018      	movs	r0, r3
 800747a:	f000 fc59 	bl	8007d30 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2210      	movs	r2, #16
 8007484:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2240      	movs	r2, #64	; 0x40
 800748a:	2100      	movs	r1, #0
 800748c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	0018      	movs	r0, r3
 8007492:	f7fe ffed 	bl	8006470 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	46bd      	mov	sp, r7
 800749a:	b002      	add	sp, #8
 800749c:	bd80      	pop	{r7, pc}
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	ffff0000 	.word	0xffff0000
 80074a4:	00008003 	.word	0x00008003

080074a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80074b2:	200f      	movs	r0, #15
 80074b4:	183b      	adds	r3, r7, r0
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	2141      	movs	r1, #65	; 0x41
 80074ba:	5c52      	ldrb	r2, [r2, r1]
 80074bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2242      	movs	r2, #66	; 0x42
 80074c2:	2100      	movs	r1, #0
 80074c4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a62      	ldr	r2, [pc, #392]	; (8007654 <I2C_ITError+0x1ac>)
 80074ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80074de:	183b      	adds	r3, r7, r0
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b28      	cmp	r3, #40	; 0x28
 80074e4:	d007      	beq.n	80074f6 <I2C_ITError+0x4e>
 80074e6:	183b      	adds	r3, r7, r0
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b29      	cmp	r3, #41	; 0x29
 80074ec:	d003      	beq.n	80074f6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80074ee:	183b      	adds	r3, r7, r0
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b2a      	cmp	r3, #42	; 0x2a
 80074f4:	d10c      	bne.n	8007510 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2103      	movs	r1, #3
 80074fa:	0018      	movs	r0, r3
 80074fc:	f000 fc18 	bl	8007d30 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2241      	movs	r2, #65	; 0x41
 8007504:	2128      	movs	r1, #40	; 0x28
 8007506:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a53      	ldr	r2, [pc, #332]	; (8007658 <I2C_ITError+0x1b0>)
 800750c:	635a      	str	r2, [r3, #52]	; 0x34
 800750e:	e012      	b.n	8007536 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007510:	4a52      	ldr	r2, [pc, #328]	; (800765c <I2C_ITError+0x1b4>)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	0011      	movs	r1, r2
 8007516:	0018      	movs	r0, r3
 8007518:	f000 fc0a 	bl	8007d30 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2241      	movs	r2, #65	; 0x41
 8007520:	5c9b      	ldrb	r3, [r3, r2]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b60      	cmp	r3, #96	; 0x60
 8007526:	d003      	beq.n	8007530 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2241      	movs	r2, #65	; 0x41
 800752c:	2120      	movs	r1, #32
 800752e:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	2b00      	cmp	r3, #0
 8007542:	d03b      	beq.n	80075bc <I2C_ITError+0x114>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b11      	cmp	r3, #17
 8007548:	d002      	beq.n	8007550 <I2C_ITError+0xa8>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b21      	cmp	r3, #33	; 0x21
 800754e:	d135      	bne.n	80075bc <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	2380      	movs	r3, #128	; 0x80
 8007558:	01db      	lsls	r3, r3, #7
 800755a:	401a      	ands	r2, r3
 800755c:	2380      	movs	r3, #128	; 0x80
 800755e:	01db      	lsls	r3, r3, #7
 8007560:	429a      	cmp	r2, r3
 8007562:	d107      	bne.n	8007574 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	493c      	ldr	r1, [pc, #240]	; (8007660 <I2C_ITError+0x1b8>)
 8007570:	400a      	ands	r2, r1
 8007572:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	0018      	movs	r0, r3
 800757a:	f7fd ffdb 	bl	8005534 <HAL_DMA_GetState>
 800757e:	0003      	movs	r3, r0
 8007580:	2b01      	cmp	r3, #1
 8007582:	d016      	beq.n	80075b2 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	4a36      	ldr	r2, [pc, #216]	; (8007664 <I2C_ITError+0x1bc>)
 800758a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2240      	movs	r2, #64	; 0x40
 8007590:	2100      	movs	r1, #0
 8007592:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	0018      	movs	r0, r3
 800759a:	f7fd fe9f 	bl	80052dc <HAL_DMA_Abort_IT>
 800759e:	1e03      	subs	r3, r0, #0
 80075a0:	d051      	beq.n	8007646 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	0018      	movs	r0, r3
 80075ae:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80075b0:	e049      	b.n	8007646 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	0018      	movs	r0, r3
 80075b6:	f000 f859 	bl	800766c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80075ba:	e044      	b.n	8007646 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d03b      	beq.n	800763c <I2C_ITError+0x194>
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b12      	cmp	r3, #18
 80075c8:	d002      	beq.n	80075d0 <I2C_ITError+0x128>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b22      	cmp	r3, #34	; 0x22
 80075ce:	d135      	bne.n	800763c <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	2380      	movs	r3, #128	; 0x80
 80075d8:	021b      	lsls	r3, r3, #8
 80075da:	401a      	ands	r2, r3
 80075dc:	2380      	movs	r3, #128	; 0x80
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d107      	bne.n	80075f4 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	491e      	ldr	r1, [pc, #120]	; (8007668 <I2C_ITError+0x1c0>)
 80075f0:	400a      	ands	r2, r1
 80075f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f8:	0018      	movs	r0, r3
 80075fa:	f7fd ff9b 	bl	8005534 <HAL_DMA_GetState>
 80075fe:	0003      	movs	r3, r0
 8007600:	2b01      	cmp	r3, #1
 8007602:	d016      	beq.n	8007632 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007608:	4a16      	ldr	r2, [pc, #88]	; (8007664 <I2C_ITError+0x1bc>)
 800760a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2240      	movs	r2, #64	; 0x40
 8007610:	2100      	movs	r1, #0
 8007612:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007618:	0018      	movs	r0, r3
 800761a:	f7fd fe5f 	bl	80052dc <HAL_DMA_Abort_IT>
 800761e:	1e03      	subs	r3, r0, #0
 8007620:	d013      	beq.n	800764a <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	0018      	movs	r0, r3
 800762e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007630:	e00b      	b.n	800764a <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	0018      	movs	r0, r3
 8007636:	f000 f819 	bl	800766c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800763a:	e006      	b.n	800764a <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	0018      	movs	r0, r3
 8007640:	f000 f814 	bl	800766c <I2C_TreatErrorCallback>
  }
}
 8007644:	e002      	b.n	800764c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	e000      	b.n	800764c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800764a:	46c0      	nop			; (mov r8, r8)
}
 800764c:	46c0      	nop			; (mov r8, r8)
 800764e:	46bd      	mov	sp, r7
 8007650:	b004      	add	sp, #16
 8007652:	bd80      	pop	{r7, pc}
 8007654:	ffff0000 	.word	0xffff0000
 8007658:	08006745 	.word	0x08006745
 800765c:	00008003 	.word	0x00008003
 8007660:	ffffbfff 	.word	0xffffbfff
 8007664:	08007877 	.word	0x08007877
 8007668:	ffff7fff 	.word	0xffff7fff

0800766c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2241      	movs	r2, #65	; 0x41
 8007678:	5c9b      	ldrb	r3, [r3, r2]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b60      	cmp	r3, #96	; 0x60
 800767e:	d10f      	bne.n	80076a0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2241      	movs	r2, #65	; 0x41
 8007684:	2120      	movs	r1, #32
 8007686:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2240      	movs	r2, #64	; 0x40
 8007692:	2100      	movs	r1, #0
 8007694:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	0018      	movs	r0, r3
 800769a:	f7fe ff09 	bl	80064b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800769e:	e00a      	b.n	80076b6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2240      	movs	r2, #64	; 0x40
 80076aa:	2100      	movs	r1, #0
 80076ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	0018      	movs	r0, r3
 80076b2:	f7fe fef5 	bl	80064a0 <HAL_I2C_ErrorCallback>
}
 80076b6:	46c0      	nop			; (mov r8, r8)
 80076b8:	46bd      	mov	sp, r7
 80076ba:	b002      	add	sp, #8
 80076bc:	bd80      	pop	{r7, pc}

080076be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	2202      	movs	r2, #2
 80076ce:	4013      	ands	r3, r2
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d103      	bne.n	80076dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2200      	movs	r2, #0
 80076da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	2201      	movs	r2, #1
 80076e4:	4013      	ands	r3, r2
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d007      	beq.n	80076fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699a      	ldr	r2, [r3, #24]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2101      	movs	r1, #1
 80076f6:	430a      	orrs	r2, r1
 80076f8:	619a      	str	r2, [r3, #24]
  }
}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	46bd      	mov	sp, r7
 80076fe:	b002      	add	sp, #8
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007710:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4920      	ldr	r1, [pc, #128]	; (80077a0 <I2C_DMAMasterTransmitCplt+0x9c>)
 800771e:	400a      	ands	r2, r1
 8007720:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007726:	b29b      	uxth	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d105      	bne.n	8007738 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2120      	movs	r1, #32
 8007730:	0018      	movs	r0, r3
 8007732:	f000 fa95 	bl	8007c60 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007736:	e02e      	b.n	8007796 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007740:	189a      	adds	r2, r3, r2
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800774a:	b29b      	uxth	r3, r3
 800774c:	2bff      	cmp	r3, #255	; 0xff
 800774e:	d903      	bls.n	8007758 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	22ff      	movs	r2, #255	; 0xff
 8007754:	851a      	strh	r2, [r3, #40]	; 0x28
 8007756:	e004      	b.n	8007762 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	0019      	movs	r1, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3328      	adds	r3, #40	; 0x28
 8007772:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007778:	f7fd fcca 	bl	8005110 <HAL_DMA_Start_IT>
 800777c:	1e03      	subs	r3, r0, #0
 800777e:	d005      	beq.n	800778c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2110      	movs	r1, #16
 8007784:	0018      	movs	r0, r3
 8007786:	f7ff fe8f 	bl	80074a8 <I2C_ITError>
}
 800778a:	e004      	b.n	8007796 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2140      	movs	r1, #64	; 0x40
 8007790:	0018      	movs	r0, r3
 8007792:	f000 fa65 	bl	8007c60 <I2C_Enable_IRQ>
}
 8007796:	46c0      	nop			; (mov r8, r8)
 8007798:	46bd      	mov	sp, r7
 800779a:	b004      	add	sp, #16
 800779c:	bd80      	pop	{r7, pc}
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	ffffbfff 	.word	0xffffbfff

080077a4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4920      	ldr	r1, [pc, #128]	; (8007840 <I2C_DMAMasterReceiveCplt+0x9c>)
 80077be:	400a      	ands	r2, r1
 80077c0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d105      	bne.n	80077d8 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2120      	movs	r1, #32
 80077d0:	0018      	movs	r0, r3
 80077d2:	f000 fa45 	bl	8007c60 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80077d6:	e02e      	b.n	8007836 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80077e0:	189a      	adds	r2, r3, r2
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2bff      	cmp	r3, #255	; 0xff
 80077ee:	d903      	bls.n	80077f8 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	22ff      	movs	r2, #255	; 0xff
 80077f4:	851a      	strh	r2, [r3, #40]	; 0x28
 80077f6:	e004      	b.n	8007802 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3324      	adds	r3, #36	; 0x24
 800780c:	0019      	movs	r1, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007818:	f7fd fc7a 	bl	8005110 <HAL_DMA_Start_IT>
 800781c:	1e03      	subs	r3, r0, #0
 800781e:	d005      	beq.n	800782c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2110      	movs	r1, #16
 8007824:	0018      	movs	r0, r3
 8007826:	f7ff fe3f 	bl	80074a8 <I2C_ITError>
}
 800782a:	e004      	b.n	8007836 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2140      	movs	r1, #64	; 0x40
 8007830:	0018      	movs	r0, r3
 8007832:	f000 fa15 	bl	8007c60 <I2C_Enable_IRQ>
}
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	46bd      	mov	sp, r7
 800783a:	b004      	add	sp, #16
 800783c:	bd80      	pop	{r7, pc}
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	ffff7fff 	.word	0xffff7fff

08007844 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2180      	movs	r1, #128	; 0x80
 800785e:	0209      	lsls	r1, r1, #8
 8007860:	430a      	orrs	r2, r1
 8007862:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2110      	movs	r1, #16
 8007868:	0018      	movs	r0, r3
 800786a:	f7ff fe1d 	bl	80074a8 <I2C_ITError>
}
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	46bd      	mov	sp, r7
 8007872:	b004      	add	sp, #16
 8007874:	bd80      	pop	{r7, pc}

08007876 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007882:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007890:	2200      	movs	r2, #0
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a0:	2200      	movs	r2, #0
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	0018      	movs	r0, r3
 80078a8:	f7ff fee0 	bl	800766c <I2C_TreatErrorCallback>
}
 80078ac:	46c0      	nop			; (mov r8, r8)
 80078ae:	46bd      	mov	sp, r7
 80078b0:	b004      	add	sp, #16
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	1dfb      	adds	r3, r7, #7
 80078c2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078c4:	e021      	b.n	800790a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	3301      	adds	r3, #1
 80078ca:	d01e      	beq.n	800790a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078cc:	f7fc fd56 	bl	800437c <HAL_GetTick>
 80078d0:	0002      	movs	r2, r0
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d302      	bcc.n	80078e2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d113      	bne.n	800790a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e6:	2220      	movs	r2, #32
 80078e8:	431a      	orrs	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2241      	movs	r2, #65	; 0x41
 80078f2:	2120      	movs	r1, #32
 80078f4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2242      	movs	r2, #66	; 0x42
 80078fa:	2100      	movs	r1, #0
 80078fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2240      	movs	r2, #64	; 0x40
 8007902:	2100      	movs	r1, #0
 8007904:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e00f      	b.n	800792a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	4013      	ands	r3, r2
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	425a      	negs	r2, r3
 800791a:	4153      	adcs	r3, r2
 800791c:	b2db      	uxtb	r3, r3
 800791e:	001a      	movs	r2, r3
 8007920:	1dfb      	adds	r3, r7, #7
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d0ce      	beq.n	80078c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	0018      	movs	r0, r3
 800792c:	46bd      	mov	sp, r7
 800792e:	b004      	add	sp, #16
 8007930:	bd80      	pop	{r7, pc}

08007932 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800793e:	e02b      	b.n	8007998 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	0018      	movs	r0, r3
 8007948:	f000 f8da 	bl	8007b00 <I2C_IsAcknowledgeFailed>
 800794c:	1e03      	subs	r3, r0, #0
 800794e:	d001      	beq.n	8007954 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e029      	b.n	80079a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	3301      	adds	r3, #1
 8007958:	d01e      	beq.n	8007998 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800795a:	f7fc fd0f 	bl	800437c <HAL_GetTick>
 800795e:	0002      	movs	r2, r0
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	429a      	cmp	r2, r3
 8007968:	d302      	bcc.n	8007970 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d113      	bne.n	8007998 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007974:	2220      	movs	r2, #32
 8007976:	431a      	orrs	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2241      	movs	r2, #65	; 0x41
 8007980:	2120      	movs	r1, #32
 8007982:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2242      	movs	r2, #66	; 0x42
 8007988:	2100      	movs	r1, #0
 800798a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2240      	movs	r2, #64	; 0x40
 8007990:	2100      	movs	r1, #0
 8007992:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e007      	b.n	80079a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	2202      	movs	r2, #2
 80079a0:	4013      	ands	r3, r2
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d1cc      	bne.n	8007940 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	0018      	movs	r0, r3
 80079aa:	46bd      	mov	sp, r7
 80079ac:	b004      	add	sp, #16
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079bc:	e028      	b.n	8007a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	0018      	movs	r0, r3
 80079c6:	f000 f89b 	bl	8007b00 <I2C_IsAcknowledgeFailed>
 80079ca:	1e03      	subs	r3, r0, #0
 80079cc:	d001      	beq.n	80079d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e026      	b.n	8007a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d2:	f7fc fcd3 	bl	800437c <HAL_GetTick>
 80079d6:	0002      	movs	r2, r0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d302      	bcc.n	80079e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d113      	bne.n	8007a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ec:	2220      	movs	r2, #32
 80079ee:	431a      	orrs	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2241      	movs	r2, #65	; 0x41
 80079f8:	2120      	movs	r1, #32
 80079fa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2242      	movs	r2, #66	; 0x42
 8007a00:	2100      	movs	r1, #0
 8007a02:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2240      	movs	r2, #64	; 0x40
 8007a08:	2100      	movs	r1, #0
 8007a0a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e007      	b.n	8007a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	2220      	movs	r2, #32
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d1cf      	bne.n	80079be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	0018      	movs	r0, r3
 8007a22:	46bd      	mov	sp, r7
 8007a24:	b004      	add	sp, #16
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a34:	e055      	b.n	8007ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f000 f85f 	bl	8007b00 <I2C_IsAcknowledgeFailed>
 8007a42:	1e03      	subs	r3, r0, #0
 8007a44:	d001      	beq.n	8007a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e053      	b.n	8007af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	2220      	movs	r2, #32
 8007a52:	4013      	ands	r3, r2
 8007a54:	2b20      	cmp	r3, #32
 8007a56:	d129      	bne.n	8007aac <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	2204      	movs	r2, #4
 8007a60:	4013      	ands	r3, r2
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d105      	bne.n	8007a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e03f      	b.n	8007af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2220      	movs	r2, #32
 8007a78:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	491d      	ldr	r1, [pc, #116]	; (8007afc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8007a86:	400a      	ands	r2, r1
 8007a88:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2241      	movs	r2, #65	; 0x41
 8007a94:	2120      	movs	r1, #32
 8007a96:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2242      	movs	r2, #66	; 0x42
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2240      	movs	r2, #64	; 0x40
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e022      	b.n	8007af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aac:	f7fc fc66 	bl	800437c <HAL_GetTick>
 8007ab0:	0002      	movs	r2, r0
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d302      	bcc.n	8007ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10f      	bne.n	8007ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2241      	movs	r2, #65	; 0x41
 8007ad2:	2120      	movs	r1, #32
 8007ad4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2240      	movs	r2, #64	; 0x40
 8007ada:	2100      	movs	r1, #0
 8007adc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e007      	b.n	8007af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	2204      	movs	r2, #4
 8007aea:	4013      	ands	r3, r2
 8007aec:	2b04      	cmp	r3, #4
 8007aee:	d1a2      	bne.n	8007a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	0018      	movs	r0, r3
 8007af4:	46bd      	mov	sp, r7
 8007af6:	b004      	add	sp, #16
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	fe00e800 	.word	0xfe00e800

08007b00 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	2210      	movs	r2, #16
 8007b14:	4013      	ands	r3, r2
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d164      	bne.n	8007be4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	2380      	movs	r3, #128	; 0x80
 8007b22:	049b      	lsls	r3, r3, #18
 8007b24:	401a      	ands	r2, r3
 8007b26:	2380      	movs	r3, #128	; 0x80
 8007b28:	049b      	lsls	r3, r3, #18
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d02b      	beq.n	8007b86 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2180      	movs	r1, #128	; 0x80
 8007b3a:	01c9      	lsls	r1, r1, #7
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b40:	e021      	b.n	8007b86 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	3301      	adds	r3, #1
 8007b46:	d01e      	beq.n	8007b86 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b48:	f7fc fc18 	bl	800437c <HAL_GetTick>
 8007b4c:	0002      	movs	r2, r0
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d302      	bcc.n	8007b5e <I2C_IsAcknowledgeFailed+0x5e>
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d113      	bne.n	8007b86 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b62:	2220      	movs	r2, #32
 8007b64:	431a      	orrs	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2241      	movs	r2, #65	; 0x41
 8007b6e:	2120      	movs	r1, #32
 8007b70:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2242      	movs	r2, #66	; 0x42
 8007b76:	2100      	movs	r1, #0
 8007b78:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2240      	movs	r2, #64	; 0x40
 8007b7e:	2100      	movs	r1, #0
 8007b80:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e02f      	b.n	8007be6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	4013      	ands	r3, r2
 8007b90:	2b20      	cmp	r3, #32
 8007b92:	d1d6      	bne.n	8007b42 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2210      	movs	r2, #16
 8007b9a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f7ff fd89 	bl	80076be <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	490e      	ldr	r1, [pc, #56]	; (8007bf0 <I2C_IsAcknowledgeFailed+0xf0>)
 8007bb8:	400a      	ands	r2, r1
 8007bba:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc0:	2204      	movs	r2, #4
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2241      	movs	r2, #65	; 0x41
 8007bcc:	2120      	movs	r1, #32
 8007bce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2242      	movs	r2, #66	; 0x42
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2240      	movs	r2, #64	; 0x40
 8007bdc:	2100      	movs	r1, #0
 8007bde:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e000      	b.n	8007be6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	0018      	movs	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b004      	add	sp, #16
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	fe00e800 	.word	0xfe00e800

08007bf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007bf4:	b590      	push	{r4, r7, lr}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	0008      	movs	r0, r1
 8007bfe:	0011      	movs	r1, r2
 8007c00:	607b      	str	r3, [r7, #4]
 8007c02:	240a      	movs	r4, #10
 8007c04:	193b      	adds	r3, r7, r4
 8007c06:	1c02      	adds	r2, r0, #0
 8007c08:	801a      	strh	r2, [r3, #0]
 8007c0a:	2009      	movs	r0, #9
 8007c0c:	183b      	adds	r3, r7, r0
 8007c0e:	1c0a      	adds	r2, r1, #0
 8007c10:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	6a3a      	ldr	r2, [r7, #32]
 8007c1a:	0d51      	lsrs	r1, r2, #21
 8007c1c:	2280      	movs	r2, #128	; 0x80
 8007c1e:	00d2      	lsls	r2, r2, #3
 8007c20:	400a      	ands	r2, r1
 8007c22:	490e      	ldr	r1, [pc, #56]	; (8007c5c <I2C_TransferConfig+0x68>)
 8007c24:	430a      	orrs	r2, r1
 8007c26:	43d2      	mvns	r2, r2
 8007c28:	401a      	ands	r2, r3
 8007c2a:	0011      	movs	r1, r2
 8007c2c:	193b      	adds	r3, r7, r4
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	059b      	lsls	r3, r3, #22
 8007c32:	0d9a      	lsrs	r2, r3, #22
 8007c34:	183b      	adds	r3, r7, r0
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	0418      	lsls	r0, r3, #16
 8007c3a:	23ff      	movs	r3, #255	; 0xff
 8007c3c:	041b      	lsls	r3, r3, #16
 8007c3e:	4003      	ands	r3, r0
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	431a      	orrs	r2, r3
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	46bd      	mov	sp, r7
 8007c56:	b005      	add	sp, #20
 8007c58:	bd90      	pop	{r4, r7, pc}
 8007c5a:	46c0      	nop			; (mov r8, r8)
 8007c5c:	03ff63ff 	.word	0x03ff63ff

08007c60 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	000a      	movs	r2, r1
 8007c6a:	1cbb      	adds	r3, r7, #2
 8007c6c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c76:	4b2c      	ldr	r3, [pc, #176]	; (8007d28 <I2C_Enable_IRQ+0xc8>)
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d004      	beq.n	8007c86 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007c80:	4b2a      	ldr	r3, [pc, #168]	; (8007d2c <I2C_Enable_IRQ+0xcc>)
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d121      	bne.n	8007cca <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c86:	1cbb      	adds	r3, r7, #2
 8007c88:	2200      	movs	r2, #0
 8007c8a:	5e9b      	ldrsh	r3, [r3, r2]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	da03      	bge.n	8007c98 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	22b8      	movs	r2, #184	; 0xb8
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007c98:	1cbb      	adds	r3, r7, #2
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	2b10      	cmp	r3, #16
 8007c9e:	d103      	bne.n	8007ca8 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2290      	movs	r2, #144	; 0x90
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007ca8:	1cbb      	adds	r3, r7, #2
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d103      	bne.n	8007cb8 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2260      	movs	r2, #96	; 0x60
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007cb8:	1cbb      	adds	r3, r7, #2
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	2b40      	cmp	r3, #64	; 0x40
 8007cbe:	d127      	bne.n	8007d10 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2240      	movs	r2, #64	; 0x40
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007cc8:	e022      	b.n	8007d10 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007cca:	1cbb      	adds	r3, r7, #2
 8007ccc:	2200      	movs	r2, #0
 8007cce:	5e9b      	ldrsh	r3, [r3, r2]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	da03      	bge.n	8007cdc <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	22b8      	movs	r2, #184	; 0xb8
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007cdc:	1cbb      	adds	r3, r7, #2
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	d003      	beq.n	8007cee <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	22f2      	movs	r2, #242	; 0xf2
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007cee:	1cbb      	adds	r3, r7, #2
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	d003      	beq.n	8007d00 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	22f4      	movs	r2, #244	; 0xf4
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d00:	1cbb      	adds	r3, r7, #2
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	d103      	bne.n	8007d10 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6819      	ldr	r1, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	601a      	str	r2, [r3, #0]
}
 8007d20:	46c0      	nop			; (mov r8, r8)
 8007d22:	46bd      	mov	sp, r7
 8007d24:	b004      	add	sp, #16
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	0800696d 	.word	0x0800696d
 8007d2c:	08006b85 	.word	0x08006b85

08007d30 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	000a      	movs	r2, r1
 8007d3a:	1cbb      	adds	r3, r7, #2
 8007d3c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007d42:	1cbb      	adds	r3, r7, #2
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	2201      	movs	r2, #1
 8007d48:	4013      	ands	r3, r2
 8007d4a:	d010      	beq.n	8007d6e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2242      	movs	r2, #66	; 0x42
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2241      	movs	r2, #65	; 0x41
 8007d58:	5c9b      	ldrb	r3, [r3, r2]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	001a      	movs	r2, r3
 8007d5e:	2328      	movs	r3, #40	; 0x28
 8007d60:	4013      	ands	r3, r2
 8007d62:	2b28      	cmp	r3, #40	; 0x28
 8007d64:	d003      	beq.n	8007d6e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	22b0      	movs	r2, #176	; 0xb0
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007d6e:	1cbb      	adds	r3, r7, #2
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	2202      	movs	r2, #2
 8007d74:	4013      	ands	r3, r2
 8007d76:	d010      	beq.n	8007d9a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2244      	movs	r2, #68	; 0x44
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2241      	movs	r2, #65	; 0x41
 8007d84:	5c9b      	ldrb	r3, [r3, r2]
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	001a      	movs	r2, r3
 8007d8a:	2328      	movs	r3, #40	; 0x28
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	2b28      	cmp	r3, #40	; 0x28
 8007d90:	d003      	beq.n	8007d9a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	22b0      	movs	r2, #176	; 0xb0
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007d9a:	1cbb      	adds	r3, r7, #2
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	5e9b      	ldrsh	r3, [r3, r2]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	da03      	bge.n	8007dac <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	22b8      	movs	r2, #184	; 0xb8
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007dac:	1cbb      	adds	r3, r7, #2
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	2b10      	cmp	r3, #16
 8007db2:	d103      	bne.n	8007dbc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2290      	movs	r2, #144	; 0x90
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007dbc:	1cbb      	adds	r3, r7, #2
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d103      	bne.n	8007dcc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007dcc:	1cbb      	adds	r3, r7, #2
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	2b40      	cmp	r3, #64	; 0x40
 8007dd2:	d103      	bne.n	8007ddc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2240      	movs	r2, #64	; 0x40
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	43d9      	mvns	r1, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	400a      	ands	r2, r1
 8007dec:	601a      	str	r2, [r3, #0]
}
 8007dee:	46c0      	nop			; (mov r8, r8)
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b004      	add	sp, #16
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2241      	movs	r2, #65	; 0x41
 8007e06:	5c9b      	ldrb	r3, [r3, r2]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d138      	bne.n	8007e80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2240      	movs	r2, #64	; 0x40
 8007e12:	5c9b      	ldrb	r3, [r3, r2]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e032      	b.n	8007e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2240      	movs	r2, #64	; 0x40
 8007e20:	2101      	movs	r1, #1
 8007e22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2241      	movs	r2, #65	; 0x41
 8007e28:	2124      	movs	r1, #36	; 0x24
 8007e2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2101      	movs	r1, #1
 8007e38:	438a      	bics	r2, r1
 8007e3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4911      	ldr	r1, [pc, #68]	; (8007e8c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007e48:	400a      	ands	r2, r1
 8007e4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6819      	ldr	r1, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2101      	movs	r1, #1
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2241      	movs	r2, #65	; 0x41
 8007e70:	2120      	movs	r1, #32
 8007e72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2240      	movs	r2, #64	; 0x40
 8007e78:	2100      	movs	r1, #0
 8007e7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	e000      	b.n	8007e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e80:	2302      	movs	r3, #2
  }
}
 8007e82:	0018      	movs	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	b002      	add	sp, #8
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	ffffefff 	.word	0xffffefff

08007e90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2241      	movs	r2, #65	; 0x41
 8007e9e:	5c9b      	ldrb	r3, [r3, r2]
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b20      	cmp	r3, #32
 8007ea4:	d139      	bne.n	8007f1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2240      	movs	r2, #64	; 0x40
 8007eaa:	5c9b      	ldrb	r3, [r3, r2]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e033      	b.n	8007f1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2240      	movs	r2, #64	; 0x40
 8007eb8:	2101      	movs	r1, #1
 8007eba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2241      	movs	r2, #65	; 0x41
 8007ec0:	2124      	movs	r1, #36	; 0x24
 8007ec2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2101      	movs	r1, #1
 8007ed0:	438a      	bics	r2, r1
 8007ed2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4a11      	ldr	r2, [pc, #68]	; (8007f24 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	021b      	lsls	r3, r3, #8
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2101      	movs	r1, #1
 8007f02:	430a      	orrs	r2, r1
 8007f04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2241      	movs	r2, #65	; 0x41
 8007f0a:	2120      	movs	r1, #32
 8007f0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2240      	movs	r2, #64	; 0x40
 8007f12:	2100      	movs	r1, #0
 8007f14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	e000      	b.n	8007f1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f1a:	2302      	movs	r3, #2
  }
}
 8007f1c:	0018      	movs	r0, r3
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	b004      	add	sp, #16
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	fffff0ff 	.word	0xfffff0ff

08007f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007f30:	4b19      	ldr	r3, [pc, #100]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a19      	ldr	r2, [pc, #100]	; (8007f9c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007f36:	4013      	ands	r3, r2
 8007f38:	0019      	movs	r1, r3
 8007f3a:	4b17      	ldr	r3, [pc, #92]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	2380      	movs	r3, #128	; 0x80
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d11f      	bne.n	8007f8c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007f4c:	4b14      	ldr	r3, [pc, #80]	; (8007fa0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	0013      	movs	r3, r2
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	189b      	adds	r3, r3, r2
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	4912      	ldr	r1, [pc, #72]	; (8007fa4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f7f8 f8ee 	bl	800013c <__udivsi3>
 8007f60:	0003      	movs	r3, r0
 8007f62:	3301      	adds	r3, #1
 8007f64:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f66:	e008      	b.n	8007f7a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	e001      	b.n	8007f7a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e009      	b.n	8007f8e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f7a:	4b07      	ldr	r3, [pc, #28]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007f7c:	695a      	ldr	r2, [r3, #20]
 8007f7e:	2380      	movs	r3, #128	; 0x80
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	401a      	ands	r2, r3
 8007f84:	2380      	movs	r3, #128	; 0x80
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d0ed      	beq.n	8007f68 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	0018      	movs	r0, r3
 8007f90:	46bd      	mov	sp, r7
 8007f92:	b004      	add	sp, #16
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	40007000 	.word	0x40007000
 8007f9c:	fffff9ff 	.word	0xfffff9ff
 8007fa0:	2000002c 	.word	0x2000002c
 8007fa4:	000f4240 	.word	0x000f4240

08007fa8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007fac:	4b03      	ldr	r3, [pc, #12]	; (8007fbc <LL_RCC_GetAPB1Prescaler+0x14>)
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	23e0      	movs	r3, #224	; 0xe0
 8007fb2:	01db      	lsls	r3, r3, #7
 8007fb4:	4013      	ands	r3, r2
}
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	40021000 	.word	0x40021000

08007fc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d102      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f000 fb56 	bl	8008680 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	4013      	ands	r3, r2
 8007fdc:	d100      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x20>
 8007fde:	e07d      	b.n	80080dc <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fe0:	4bc3      	ldr	r3, [pc, #780]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	2238      	movs	r2, #56	; 0x38
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fea:	4bc1      	ldr	r3, [pc, #772]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	2203      	movs	r2, #3
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	2b10      	cmp	r3, #16
 8007ff8:	d102      	bne.n	8008000 <HAL_RCC_OscConfig+0x40>
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d002      	beq.n	8008006 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	2b08      	cmp	r3, #8
 8008004:	d10c      	bne.n	8008020 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008006:	4bba      	ldr	r3, [pc, #744]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	2380      	movs	r3, #128	; 0x80
 800800c:	029b      	lsls	r3, r3, #10
 800800e:	4013      	ands	r3, r2
 8008010:	d063      	beq.n	80080da <HAL_RCC_OscConfig+0x11a>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d15f      	bne.n	80080da <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	f000 fb30 	bl	8008680 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	2380      	movs	r3, #128	; 0x80
 8008026:	025b      	lsls	r3, r3, #9
 8008028:	429a      	cmp	r2, r3
 800802a:	d107      	bne.n	800803c <HAL_RCC_OscConfig+0x7c>
 800802c:	4bb0      	ldr	r3, [pc, #704]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	4baf      	ldr	r3, [pc, #700]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008032:	2180      	movs	r1, #128	; 0x80
 8008034:	0249      	lsls	r1, r1, #9
 8008036:	430a      	orrs	r2, r1
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	e020      	b.n	800807e <HAL_RCC_OscConfig+0xbe>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	23a0      	movs	r3, #160	; 0xa0
 8008042:	02db      	lsls	r3, r3, #11
 8008044:	429a      	cmp	r2, r3
 8008046:	d10e      	bne.n	8008066 <HAL_RCC_OscConfig+0xa6>
 8008048:	4ba9      	ldr	r3, [pc, #676]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4ba8      	ldr	r3, [pc, #672]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 800804e:	2180      	movs	r1, #128	; 0x80
 8008050:	02c9      	lsls	r1, r1, #11
 8008052:	430a      	orrs	r2, r1
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	4ba6      	ldr	r3, [pc, #664]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	4ba5      	ldr	r3, [pc, #660]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 800805c:	2180      	movs	r1, #128	; 0x80
 800805e:	0249      	lsls	r1, r1, #9
 8008060:	430a      	orrs	r2, r1
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	e00b      	b.n	800807e <HAL_RCC_OscConfig+0xbe>
 8008066:	4ba2      	ldr	r3, [pc, #648]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	4ba1      	ldr	r3, [pc, #644]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 800806c:	49a1      	ldr	r1, [pc, #644]	; (80082f4 <HAL_RCC_OscConfig+0x334>)
 800806e:	400a      	ands	r2, r1
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	4b9f      	ldr	r3, [pc, #636]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4b9e      	ldr	r3, [pc, #632]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008078:	499f      	ldr	r1, [pc, #636]	; (80082f8 <HAL_RCC_OscConfig+0x338>)
 800807a:	400a      	ands	r2, r1
 800807c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d014      	beq.n	80080b0 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008086:	f7fc f979 	bl	800437c <HAL_GetTick>
 800808a:	0003      	movs	r3, r0
 800808c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800808e:	e008      	b.n	80080a2 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008090:	f7fc f974 	bl	800437c <HAL_GetTick>
 8008094:	0002      	movs	r2, r0
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	2b64      	cmp	r3, #100	; 0x64
 800809c:	d901      	bls.n	80080a2 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e2ee      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080a2:	4b93      	ldr	r3, [pc, #588]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	2380      	movs	r3, #128	; 0x80
 80080a8:	029b      	lsls	r3, r3, #10
 80080aa:	4013      	ands	r3, r2
 80080ac:	d0f0      	beq.n	8008090 <HAL_RCC_OscConfig+0xd0>
 80080ae:	e015      	b.n	80080dc <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b0:	f7fc f964 	bl	800437c <HAL_GetTick>
 80080b4:	0003      	movs	r3, r0
 80080b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080b8:	e008      	b.n	80080cc <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080ba:	f7fc f95f 	bl	800437c <HAL_GetTick>
 80080be:	0002      	movs	r2, r0
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	2b64      	cmp	r3, #100	; 0x64
 80080c6:	d901      	bls.n	80080cc <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e2d9      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080cc:	4b88      	ldr	r3, [pc, #544]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	2380      	movs	r3, #128	; 0x80
 80080d2:	029b      	lsls	r3, r3, #10
 80080d4:	4013      	ands	r3, r2
 80080d6:	d1f0      	bne.n	80080ba <HAL_RCC_OscConfig+0xfa>
 80080d8:	e000      	b.n	80080dc <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2202      	movs	r2, #2
 80080e2:	4013      	ands	r3, r2
 80080e4:	d100      	bne.n	80080e8 <HAL_RCC_OscConfig+0x128>
 80080e6:	e099      	b.n	800821c <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080e8:	4b81      	ldr	r3, [pc, #516]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	2238      	movs	r2, #56	; 0x38
 80080ee:	4013      	ands	r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080f2:	4b7f      	ldr	r3, [pc, #508]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	2203      	movs	r2, #3
 80080f8:	4013      	ands	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	2b10      	cmp	r3, #16
 8008100:	d102      	bne.n	8008108 <HAL_RCC_OscConfig+0x148>
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b02      	cmp	r3, #2
 8008106:	d002      	beq.n	800810e <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d135      	bne.n	800817a <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800810e:	4b78      	ldr	r3, [pc, #480]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	2380      	movs	r3, #128	; 0x80
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	4013      	ands	r3, r2
 8008118:	d005      	beq.n	8008126 <HAL_RCC_OscConfig+0x166>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e2ac      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008126:	4b72      	ldr	r3, [pc, #456]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	4a74      	ldr	r2, [pc, #464]	; (80082fc <HAL_RCC_OscConfig+0x33c>)
 800812c:	4013      	ands	r3, r2
 800812e:	0019      	movs	r1, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	021a      	lsls	r2, r3, #8
 8008136:	4b6e      	ldr	r3, [pc, #440]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008138:	430a      	orrs	r2, r1
 800813a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d112      	bne.n	8008168 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008142:	4b6b      	ldr	r3, [pc, #428]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a6e      	ldr	r2, [pc, #440]	; (8008300 <HAL_RCC_OscConfig+0x340>)
 8008148:	4013      	ands	r3, r2
 800814a:	0019      	movs	r1, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691a      	ldr	r2, [r3, #16]
 8008150:	4b67      	ldr	r3, [pc, #412]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008152:	430a      	orrs	r2, r1
 8008154:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008156:	4b66      	ldr	r3, [pc, #408]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	0adb      	lsrs	r3, r3, #11
 800815c:	2207      	movs	r2, #7
 800815e:	4013      	ands	r3, r2
 8008160:	4a68      	ldr	r2, [pc, #416]	; (8008304 <HAL_RCC_OscConfig+0x344>)
 8008162:	40da      	lsrs	r2, r3
 8008164:	4b68      	ldr	r3, [pc, #416]	; (8008308 <HAL_RCC_OscConfig+0x348>)
 8008166:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008168:	4b68      	ldr	r3, [pc, #416]	; (800830c <HAL_RCC_OscConfig+0x34c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	0018      	movs	r0, r3
 800816e:	f7fc f8a9 	bl	80042c4 <HAL_InitTick>
 8008172:	1e03      	subs	r3, r0, #0
 8008174:	d051      	beq.n	800821a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e282      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d030      	beq.n	80081e4 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008182:	4b5b      	ldr	r3, [pc, #364]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a5e      	ldr	r2, [pc, #376]	; (8008300 <HAL_RCC_OscConfig+0x340>)
 8008188:	4013      	ands	r3, r2
 800818a:	0019      	movs	r1, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691a      	ldr	r2, [r3, #16]
 8008190:	4b57      	ldr	r3, [pc, #348]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008192:	430a      	orrs	r2, r1
 8008194:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008196:	4b56      	ldr	r3, [pc, #344]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4b55      	ldr	r3, [pc, #340]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 800819c:	2180      	movs	r1, #128	; 0x80
 800819e:	0049      	lsls	r1, r1, #1
 80081a0:	430a      	orrs	r2, r1
 80081a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a4:	f7fc f8ea 	bl	800437c <HAL_GetTick>
 80081a8:	0003      	movs	r3, r0
 80081aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081ac:	e008      	b.n	80081c0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081ae:	f7fc f8e5 	bl	800437c <HAL_GetTick>
 80081b2:	0002      	movs	r2, r0
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d901      	bls.n	80081c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e25f      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081c0:	4b4b      	ldr	r3, [pc, #300]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	2380      	movs	r3, #128	; 0x80
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	4013      	ands	r3, r2
 80081ca:	d0f0      	beq.n	80081ae <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081cc:	4b48      	ldr	r3, [pc, #288]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4a4a      	ldr	r2, [pc, #296]	; (80082fc <HAL_RCC_OscConfig+0x33c>)
 80081d2:	4013      	ands	r3, r2
 80081d4:	0019      	movs	r1, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	021a      	lsls	r2, r3, #8
 80081dc:	4b44      	ldr	r3, [pc, #272]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]
 80081e2:	e01b      	b.n	800821c <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80081e4:	4b42      	ldr	r3, [pc, #264]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	4b41      	ldr	r3, [pc, #260]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 80081ea:	4949      	ldr	r1, [pc, #292]	; (8008310 <HAL_RCC_OscConfig+0x350>)
 80081ec:	400a      	ands	r2, r1
 80081ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f0:	f7fc f8c4 	bl	800437c <HAL_GetTick>
 80081f4:	0003      	movs	r3, r0
 80081f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081f8:	e008      	b.n	800820c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081fa:	f7fc f8bf 	bl	800437c <HAL_GetTick>
 80081fe:	0002      	movs	r2, r0
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	2b02      	cmp	r3, #2
 8008206:	d901      	bls.n	800820c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e239      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800820c:	4b38      	ldr	r3, [pc, #224]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	2380      	movs	r3, #128	; 0x80
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	4013      	ands	r3, r2
 8008216:	d1f0      	bne.n	80081fa <HAL_RCC_OscConfig+0x23a>
 8008218:	e000      	b.n	800821c <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800821a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2208      	movs	r2, #8
 8008222:	4013      	ands	r3, r2
 8008224:	d047      	beq.n	80082b6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008226:	4b32      	ldr	r3, [pc, #200]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	2238      	movs	r2, #56	; 0x38
 800822c:	4013      	ands	r3, r2
 800822e:	2b18      	cmp	r3, #24
 8008230:	d10a      	bne.n	8008248 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008232:	4b2f      	ldr	r3, [pc, #188]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008236:	2202      	movs	r2, #2
 8008238:	4013      	ands	r3, r2
 800823a:	d03c      	beq.n	80082b6 <HAL_RCC_OscConfig+0x2f6>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d138      	bne.n	80082b6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e21b      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d019      	beq.n	8008284 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008250:	4b27      	ldr	r3, [pc, #156]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008252:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008254:	4b26      	ldr	r3, [pc, #152]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008256:	2101      	movs	r1, #1
 8008258:	430a      	orrs	r2, r1
 800825a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825c:	f7fc f88e 	bl	800437c <HAL_GetTick>
 8008260:	0003      	movs	r3, r0
 8008262:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008264:	e008      	b.n	8008278 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008266:	f7fc f889 	bl	800437c <HAL_GetTick>
 800826a:	0002      	movs	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b02      	cmp	r3, #2
 8008272:	d901      	bls.n	8008278 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e203      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008278:	4b1d      	ldr	r3, [pc, #116]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 800827a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827c:	2202      	movs	r2, #2
 800827e:	4013      	ands	r3, r2
 8008280:	d0f1      	beq.n	8008266 <HAL_RCC_OscConfig+0x2a6>
 8008282:	e018      	b.n	80082b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008284:	4b1a      	ldr	r3, [pc, #104]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 8008286:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008288:	4b19      	ldr	r3, [pc, #100]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 800828a:	2101      	movs	r1, #1
 800828c:	438a      	bics	r2, r1
 800828e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008290:	f7fc f874 	bl	800437c <HAL_GetTick>
 8008294:	0003      	movs	r3, r0
 8008296:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008298:	e008      	b.n	80082ac <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800829a:	f7fc f86f 	bl	800437c <HAL_GetTick>
 800829e:	0002      	movs	r2, r0
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d901      	bls.n	80082ac <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e1e9      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80082ac:	4b10      	ldr	r3, [pc, #64]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 80082ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b0:	2202      	movs	r2, #2
 80082b2:	4013      	ands	r3, r2
 80082b4:	d1f1      	bne.n	800829a <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2204      	movs	r2, #4
 80082bc:	4013      	ands	r3, r2
 80082be:	d100      	bne.n	80082c2 <HAL_RCC_OscConfig+0x302>
 80082c0:	e0c6      	b.n	8008450 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082c2:	231f      	movs	r3, #31
 80082c4:	18fb      	adds	r3, r7, r3
 80082c6:	2200      	movs	r2, #0
 80082c8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80082ca:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	2238      	movs	r2, #56	; 0x38
 80082d0:	4013      	ands	r3, r2
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d11e      	bne.n	8008314 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80082d6:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <HAL_RCC_OscConfig+0x330>)
 80082d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082da:	2202      	movs	r2, #2
 80082dc:	4013      	ands	r3, r2
 80082de:	d100      	bne.n	80082e2 <HAL_RCC_OscConfig+0x322>
 80082e0:	e0b6      	b.n	8008450 <HAL_RCC_OscConfig+0x490>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d000      	beq.n	80082ec <HAL_RCC_OscConfig+0x32c>
 80082ea:	e0b1      	b.n	8008450 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e1c7      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
 80082f0:	40021000 	.word	0x40021000
 80082f4:	fffeffff 	.word	0xfffeffff
 80082f8:	fffbffff 	.word	0xfffbffff
 80082fc:	ffff80ff 	.word	0xffff80ff
 8008300:	ffffc7ff 	.word	0xffffc7ff
 8008304:	00f42400 	.word	0x00f42400
 8008308:	2000002c 	.word	0x2000002c
 800830c:	20000030 	.word	0x20000030
 8008310:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008314:	4bb8      	ldr	r3, [pc, #736]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008318:	2380      	movs	r3, #128	; 0x80
 800831a:	055b      	lsls	r3, r3, #21
 800831c:	4013      	ands	r3, r2
 800831e:	d101      	bne.n	8008324 <HAL_RCC_OscConfig+0x364>
 8008320:	2301      	movs	r3, #1
 8008322:	e000      	b.n	8008326 <HAL_RCC_OscConfig+0x366>
 8008324:	2300      	movs	r3, #0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d011      	beq.n	800834e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800832a:	4bb3      	ldr	r3, [pc, #716]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 800832c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800832e:	4bb2      	ldr	r3, [pc, #712]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008330:	2180      	movs	r1, #128	; 0x80
 8008332:	0549      	lsls	r1, r1, #21
 8008334:	430a      	orrs	r2, r1
 8008336:	63da      	str	r2, [r3, #60]	; 0x3c
 8008338:	4baf      	ldr	r3, [pc, #700]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 800833a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800833c:	2380      	movs	r3, #128	; 0x80
 800833e:	055b      	lsls	r3, r3, #21
 8008340:	4013      	ands	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008346:	231f      	movs	r3, #31
 8008348:	18fb      	adds	r3, r7, r3
 800834a:	2201      	movs	r2, #1
 800834c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800834e:	4bab      	ldr	r3, [pc, #684]	; (80085fc <HAL_RCC_OscConfig+0x63c>)
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	2380      	movs	r3, #128	; 0x80
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	4013      	ands	r3, r2
 8008358:	d11a      	bne.n	8008390 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800835a:	4ba8      	ldr	r3, [pc, #672]	; (80085fc <HAL_RCC_OscConfig+0x63c>)
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	4ba7      	ldr	r3, [pc, #668]	; (80085fc <HAL_RCC_OscConfig+0x63c>)
 8008360:	2180      	movs	r1, #128	; 0x80
 8008362:	0049      	lsls	r1, r1, #1
 8008364:	430a      	orrs	r2, r1
 8008366:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008368:	f7fc f808 	bl	800437c <HAL_GetTick>
 800836c:	0003      	movs	r3, r0
 800836e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008370:	e008      	b.n	8008384 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008372:	f7fc f803 	bl	800437c <HAL_GetTick>
 8008376:	0002      	movs	r2, r0
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d901      	bls.n	8008384 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e17d      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008384:	4b9d      	ldr	r3, [pc, #628]	; (80085fc <HAL_RCC_OscConfig+0x63c>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	2380      	movs	r3, #128	; 0x80
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	4013      	ands	r3, r2
 800838e:	d0f0      	beq.n	8008372 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d106      	bne.n	80083a6 <HAL_RCC_OscConfig+0x3e6>
 8008398:	4b97      	ldr	r3, [pc, #604]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 800839a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800839c:	4b96      	ldr	r3, [pc, #600]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 800839e:	2101      	movs	r1, #1
 80083a0:	430a      	orrs	r2, r1
 80083a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80083a4:	e01c      	b.n	80083e0 <HAL_RCC_OscConfig+0x420>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	d10c      	bne.n	80083c8 <HAL_RCC_OscConfig+0x408>
 80083ae:	4b92      	ldr	r3, [pc, #584]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80083b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083b2:	4b91      	ldr	r3, [pc, #580]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80083b4:	2104      	movs	r1, #4
 80083b6:	430a      	orrs	r2, r1
 80083b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80083ba:	4b8f      	ldr	r3, [pc, #572]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80083bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083be:	4b8e      	ldr	r3, [pc, #568]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80083c0:	2101      	movs	r1, #1
 80083c2:	430a      	orrs	r2, r1
 80083c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80083c6:	e00b      	b.n	80083e0 <HAL_RCC_OscConfig+0x420>
 80083c8:	4b8b      	ldr	r3, [pc, #556]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80083ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083cc:	4b8a      	ldr	r3, [pc, #552]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80083ce:	2101      	movs	r1, #1
 80083d0:	438a      	bics	r2, r1
 80083d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80083d4:	4b88      	ldr	r3, [pc, #544]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80083d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083d8:	4b87      	ldr	r3, [pc, #540]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80083da:	2104      	movs	r1, #4
 80083dc:	438a      	bics	r2, r1
 80083de:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d014      	beq.n	8008412 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e8:	f7fb ffc8 	bl	800437c <HAL_GetTick>
 80083ec:	0003      	movs	r3, r0
 80083ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083f0:	e009      	b.n	8008406 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083f2:	f7fb ffc3 	bl	800437c <HAL_GetTick>
 80083f6:	0002      	movs	r2, r0
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	4a80      	ldr	r2, [pc, #512]	; (8008600 <HAL_RCC_OscConfig+0x640>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d901      	bls.n	8008406 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e13c      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008406:	4b7c      	ldr	r3, [pc, #496]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800840a:	2202      	movs	r2, #2
 800840c:	4013      	ands	r3, r2
 800840e:	d0f0      	beq.n	80083f2 <HAL_RCC_OscConfig+0x432>
 8008410:	e013      	b.n	800843a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008412:	f7fb ffb3 	bl	800437c <HAL_GetTick>
 8008416:	0003      	movs	r3, r0
 8008418:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800841a:	e009      	b.n	8008430 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800841c:	f7fb ffae 	bl	800437c <HAL_GetTick>
 8008420:	0002      	movs	r2, r0
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	4a76      	ldr	r2, [pc, #472]	; (8008600 <HAL_RCC_OscConfig+0x640>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d901      	bls.n	8008430 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e127      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008430:	4b71      	ldr	r3, [pc, #452]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008434:	2202      	movs	r2, #2
 8008436:	4013      	ands	r3, r2
 8008438:	d1f0      	bne.n	800841c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800843a:	231f      	movs	r3, #31
 800843c:	18fb      	adds	r3, r7, r3
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d105      	bne.n	8008450 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008444:	4b6c      	ldr	r3, [pc, #432]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008448:	4b6b      	ldr	r3, [pc, #428]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 800844a:	496e      	ldr	r1, [pc, #440]	; (8008604 <HAL_RCC_OscConfig+0x644>)
 800844c:	400a      	ands	r2, r1
 800844e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2220      	movs	r2, #32
 8008456:	4013      	ands	r3, r2
 8008458:	d039      	beq.n	80084ce <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d01b      	beq.n	800849a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008462:	4b65      	ldr	r3, [pc, #404]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	4b64      	ldr	r3, [pc, #400]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008468:	2180      	movs	r1, #128	; 0x80
 800846a:	03c9      	lsls	r1, r1, #15
 800846c:	430a      	orrs	r2, r1
 800846e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008470:	f7fb ff84 	bl	800437c <HAL_GetTick>
 8008474:	0003      	movs	r3, r0
 8008476:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008478:	e008      	b.n	800848c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800847a:	f7fb ff7f 	bl	800437c <HAL_GetTick>
 800847e:	0002      	movs	r2, r0
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e0f9      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800848c:	4b5a      	ldr	r3, [pc, #360]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	2380      	movs	r3, #128	; 0x80
 8008492:	041b      	lsls	r3, r3, #16
 8008494:	4013      	ands	r3, r2
 8008496:	d0f0      	beq.n	800847a <HAL_RCC_OscConfig+0x4ba>
 8008498:	e019      	b.n	80084ce <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800849a:	4b57      	ldr	r3, [pc, #348]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	4b56      	ldr	r3, [pc, #344]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80084a0:	4959      	ldr	r1, [pc, #356]	; (8008608 <HAL_RCC_OscConfig+0x648>)
 80084a2:	400a      	ands	r2, r1
 80084a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a6:	f7fb ff69 	bl	800437c <HAL_GetTick>
 80084aa:	0003      	movs	r3, r0
 80084ac:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80084ae:	e008      	b.n	80084c2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084b0:	f7fb ff64 	bl	800437c <HAL_GetTick>
 80084b4:	0002      	movs	r2, r0
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e0de      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80084c2:	4b4d      	ldr	r3, [pc, #308]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	2380      	movs	r3, #128	; 0x80
 80084c8:	041b      	lsls	r3, r3, #16
 80084ca:	4013      	ands	r3, r2
 80084cc:	d1f0      	bne.n	80084b0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d100      	bne.n	80084d8 <HAL_RCC_OscConfig+0x518>
 80084d6:	e0d2      	b.n	800867e <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084d8:	4b47      	ldr	r3, [pc, #284]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	2238      	movs	r2, #56	; 0x38
 80084de:	4013      	ands	r3, r2
 80084e0:	2b10      	cmp	r3, #16
 80084e2:	d100      	bne.n	80084e6 <HAL_RCC_OscConfig+0x526>
 80084e4:	e081      	b.n	80085ea <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d156      	bne.n	800859c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084ee:	4b42      	ldr	r3, [pc, #264]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4b41      	ldr	r3, [pc, #260]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80084f4:	4945      	ldr	r1, [pc, #276]	; (800860c <HAL_RCC_OscConfig+0x64c>)
 80084f6:	400a      	ands	r2, r1
 80084f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fa:	f7fb ff3f 	bl	800437c <HAL_GetTick>
 80084fe:	0003      	movs	r3, r0
 8008500:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008504:	f7fb ff3a 	bl	800437c <HAL_GetTick>
 8008508:	0002      	movs	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d901      	bls.n	8008516 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e0b4      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008516:	4b38      	ldr	r3, [pc, #224]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	2380      	movs	r3, #128	; 0x80
 800851c:	049b      	lsls	r3, r3, #18
 800851e:	4013      	ands	r3, r2
 8008520:	d1f0      	bne.n	8008504 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008522:	4b35      	ldr	r3, [pc, #212]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	4a3a      	ldr	r2, [pc, #232]	; (8008610 <HAL_RCC_OscConfig+0x650>)
 8008528:	4013      	ands	r3, r2
 800852a:	0019      	movs	r1, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008534:	431a      	orrs	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853a:	021b      	lsls	r3, r3, #8
 800853c:	431a      	orrs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008542:	431a      	orrs	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854e:	431a      	orrs	r2, r3
 8008550:	4b29      	ldr	r3, [pc, #164]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008552:	430a      	orrs	r2, r1
 8008554:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008556:	4b28      	ldr	r3, [pc, #160]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	4b27      	ldr	r3, [pc, #156]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 800855c:	2180      	movs	r1, #128	; 0x80
 800855e:	0449      	lsls	r1, r1, #17
 8008560:	430a      	orrs	r2, r1
 8008562:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008564:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	4b23      	ldr	r3, [pc, #140]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 800856a:	2180      	movs	r1, #128	; 0x80
 800856c:	0549      	lsls	r1, r1, #21
 800856e:	430a      	orrs	r2, r1
 8008570:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008572:	f7fb ff03 	bl	800437c <HAL_GetTick>
 8008576:	0003      	movs	r3, r0
 8008578:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800857a:	e008      	b.n	800858e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800857c:	f7fb fefe 	bl	800437c <HAL_GetTick>
 8008580:	0002      	movs	r2, r0
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	2b02      	cmp	r3, #2
 8008588:	d901      	bls.n	800858e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e078      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800858e:	4b1a      	ldr	r3, [pc, #104]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	2380      	movs	r3, #128	; 0x80
 8008594:	049b      	lsls	r3, r3, #18
 8008596:	4013      	ands	r3, r2
 8008598:	d0f0      	beq.n	800857c <HAL_RCC_OscConfig+0x5bc>
 800859a:	e070      	b.n	800867e <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800859c:	4b16      	ldr	r3, [pc, #88]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	4b15      	ldr	r3, [pc, #84]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80085a2:	491a      	ldr	r1, [pc, #104]	; (800860c <HAL_RCC_OscConfig+0x64c>)
 80085a4:	400a      	ands	r2, r1
 80085a6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80085a8:	4b13      	ldr	r3, [pc, #76]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80085aa:	68da      	ldr	r2, [r3, #12]
 80085ac:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80085ae:	2103      	movs	r1, #3
 80085b0:	438a      	bics	r2, r1
 80085b2:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80085b4:	4b10      	ldr	r3, [pc, #64]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80085b6:	68da      	ldr	r2, [r3, #12]
 80085b8:	4b0f      	ldr	r3, [pc, #60]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80085ba:	4916      	ldr	r1, [pc, #88]	; (8008614 <HAL_RCC_OscConfig+0x654>)
 80085bc:	400a      	ands	r2, r1
 80085be:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c0:	f7fb fedc 	bl	800437c <HAL_GetTick>
 80085c4:	0003      	movs	r3, r0
 80085c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085c8:	e008      	b.n	80085dc <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085ca:	f7fb fed7 	bl	800437c <HAL_GetTick>
 80085ce:	0002      	movs	r2, r0
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d901      	bls.n	80085dc <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e051      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085dc:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <HAL_RCC_OscConfig+0x638>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	2380      	movs	r3, #128	; 0x80
 80085e2:	049b      	lsls	r3, r3, #18
 80085e4:	4013      	ands	r3, r2
 80085e6:	d1f0      	bne.n	80085ca <HAL_RCC_OscConfig+0x60a>
 80085e8:	e049      	b.n	800867e <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d112      	bne.n	8008618 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e044      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
 80085f6:	46c0      	nop			; (mov r8, r8)
 80085f8:	40021000 	.word	0x40021000
 80085fc:	40007000 	.word	0x40007000
 8008600:	00001388 	.word	0x00001388
 8008604:	efffffff 	.word	0xefffffff
 8008608:	ffbfffff 	.word	0xffbfffff
 800860c:	feffffff 	.word	0xfeffffff
 8008610:	11c1808c 	.word	0x11c1808c
 8008614:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008618:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <HAL_RCC_OscConfig+0x6c8>)
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2203      	movs	r2, #3
 8008622:	401a      	ands	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	429a      	cmp	r2, r3
 800862a:	d126      	bne.n	800867a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2270      	movs	r2, #112	; 0x70
 8008630:	401a      	ands	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008636:	429a      	cmp	r2, r3
 8008638:	d11f      	bne.n	800867a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	23fe      	movs	r3, #254	; 0xfe
 800863e:	01db      	lsls	r3, r3, #7
 8008640:	401a      	ands	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008646:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008648:	429a      	cmp	r2, r3
 800864a:	d116      	bne.n	800867a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	23f8      	movs	r3, #248	; 0xf8
 8008650:	039b      	lsls	r3, r3, #14
 8008652:	401a      	ands	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008658:	429a      	cmp	r2, r3
 800865a:	d10e      	bne.n	800867a <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	23e0      	movs	r3, #224	; 0xe0
 8008660:	051b      	lsls	r3, r3, #20
 8008662:	401a      	ands	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008668:	429a      	cmp	r2, r3
 800866a:	d106      	bne.n	800867a <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	0f5b      	lsrs	r3, r3, #29
 8008670:	075a      	lsls	r2, r3, #29
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008676:	429a      	cmp	r2, r3
 8008678:	d001      	beq.n	800867e <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e000      	b.n	8008680 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	0018      	movs	r0, r3
 8008682:	46bd      	mov	sp, r7
 8008684:	b008      	add	sp, #32
 8008686:	bd80      	pop	{r7, pc}
 8008688:	40021000 	.word	0x40021000

0800868c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e0e9      	b.n	8008874 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086a0:	4b76      	ldr	r3, [pc, #472]	; (800887c <HAL_RCC_ClockConfig+0x1f0>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2207      	movs	r2, #7
 80086a6:	4013      	ands	r3, r2
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d91e      	bls.n	80086ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ae:	4b73      	ldr	r3, [pc, #460]	; (800887c <HAL_RCC_ClockConfig+0x1f0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2207      	movs	r2, #7
 80086b4:	4393      	bics	r3, r2
 80086b6:	0019      	movs	r1, r3
 80086b8:	4b70      	ldr	r3, [pc, #448]	; (800887c <HAL_RCC_ClockConfig+0x1f0>)
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80086c0:	f7fb fe5c 	bl	800437c <HAL_GetTick>
 80086c4:	0003      	movs	r3, r0
 80086c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80086c8:	e009      	b.n	80086de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086ca:	f7fb fe57 	bl	800437c <HAL_GetTick>
 80086ce:	0002      	movs	r2, r0
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	4a6a      	ldr	r2, [pc, #424]	; (8008880 <HAL_RCC_ClockConfig+0x1f4>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e0ca      	b.n	8008874 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80086de:	4b67      	ldr	r3, [pc, #412]	; (800887c <HAL_RCC_ClockConfig+0x1f0>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2207      	movs	r2, #7
 80086e4:	4013      	ands	r3, r2
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d1ee      	bne.n	80086ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2202      	movs	r2, #2
 80086f2:	4013      	ands	r3, r2
 80086f4:	d015      	beq.n	8008722 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2204      	movs	r2, #4
 80086fc:	4013      	ands	r3, r2
 80086fe:	d006      	beq.n	800870e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008700:	4b60      	ldr	r3, [pc, #384]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	4b5f      	ldr	r3, [pc, #380]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 8008706:	21e0      	movs	r1, #224	; 0xe0
 8008708:	01c9      	lsls	r1, r1, #7
 800870a:	430a      	orrs	r2, r1
 800870c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800870e:	4b5d      	ldr	r3, [pc, #372]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	4a5d      	ldr	r2, [pc, #372]	; (8008888 <HAL_RCC_ClockConfig+0x1fc>)
 8008714:	4013      	ands	r3, r2
 8008716:	0019      	movs	r1, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689a      	ldr	r2, [r3, #8]
 800871c:	4b59      	ldr	r3, [pc, #356]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 800871e:	430a      	orrs	r2, r1
 8008720:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2201      	movs	r2, #1
 8008728:	4013      	ands	r3, r2
 800872a:	d057      	beq.n	80087dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d107      	bne.n	8008744 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008734:	4b53      	ldr	r3, [pc, #332]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	2380      	movs	r3, #128	; 0x80
 800873a:	029b      	lsls	r3, r3, #10
 800873c:	4013      	ands	r3, r2
 800873e:	d12b      	bne.n	8008798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e097      	b.n	8008874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	2b02      	cmp	r3, #2
 800874a:	d107      	bne.n	800875c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800874c:	4b4d      	ldr	r3, [pc, #308]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	2380      	movs	r3, #128	; 0x80
 8008752:	049b      	lsls	r3, r3, #18
 8008754:	4013      	ands	r3, r2
 8008756:	d11f      	bne.n	8008798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e08b      	b.n	8008874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d107      	bne.n	8008774 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008764:	4b47      	ldr	r3, [pc, #284]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	2380      	movs	r3, #128	; 0x80
 800876a:	00db      	lsls	r3, r3, #3
 800876c:	4013      	ands	r3, r2
 800876e:	d113      	bne.n	8008798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e07f      	b.n	8008874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2b03      	cmp	r3, #3
 800877a:	d106      	bne.n	800878a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800877c:	4b41      	ldr	r3, [pc, #260]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 800877e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008780:	2202      	movs	r2, #2
 8008782:	4013      	ands	r3, r2
 8008784:	d108      	bne.n	8008798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e074      	b.n	8008874 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800878a:	4b3e      	ldr	r3, [pc, #248]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 800878c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800878e:	2202      	movs	r2, #2
 8008790:	4013      	ands	r3, r2
 8008792:	d101      	bne.n	8008798 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e06d      	b.n	8008874 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008798:	4b3a      	ldr	r3, [pc, #232]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	2207      	movs	r2, #7
 800879e:	4393      	bics	r3, r2
 80087a0:	0019      	movs	r1, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	4b37      	ldr	r3, [pc, #220]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 80087a8:	430a      	orrs	r2, r1
 80087aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087ac:	f7fb fde6 	bl	800437c <HAL_GetTick>
 80087b0:	0003      	movs	r3, r0
 80087b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087b4:	e009      	b.n	80087ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087b6:	f7fb fde1 	bl	800437c <HAL_GetTick>
 80087ba:	0002      	movs	r2, r0
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	4a2f      	ldr	r2, [pc, #188]	; (8008880 <HAL_RCC_ClockConfig+0x1f4>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d901      	bls.n	80087ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e054      	b.n	8008874 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ca:	4b2e      	ldr	r3, [pc, #184]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	2238      	movs	r2, #56	; 0x38
 80087d0:	401a      	ands	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	429a      	cmp	r2, r3
 80087da:	d1ec      	bne.n	80087b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087dc:	4b27      	ldr	r3, [pc, #156]	; (800887c <HAL_RCC_ClockConfig+0x1f0>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2207      	movs	r2, #7
 80087e2:	4013      	ands	r3, r2
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d21e      	bcs.n	8008828 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ea:	4b24      	ldr	r3, [pc, #144]	; (800887c <HAL_RCC_ClockConfig+0x1f0>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2207      	movs	r2, #7
 80087f0:	4393      	bics	r3, r2
 80087f2:	0019      	movs	r1, r3
 80087f4:	4b21      	ldr	r3, [pc, #132]	; (800887c <HAL_RCC_ClockConfig+0x1f0>)
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80087fc:	f7fb fdbe 	bl	800437c <HAL_GetTick>
 8008800:	0003      	movs	r3, r0
 8008802:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008804:	e009      	b.n	800881a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008806:	f7fb fdb9 	bl	800437c <HAL_GetTick>
 800880a:	0002      	movs	r2, r0
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	4a1b      	ldr	r2, [pc, #108]	; (8008880 <HAL_RCC_ClockConfig+0x1f4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d901      	bls.n	800881a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e02c      	b.n	8008874 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800881a:	4b18      	ldr	r3, [pc, #96]	; (800887c <HAL_RCC_ClockConfig+0x1f0>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2207      	movs	r2, #7
 8008820:	4013      	ands	r3, r2
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d1ee      	bne.n	8008806 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2204      	movs	r2, #4
 800882e:	4013      	ands	r3, r2
 8008830:	d009      	beq.n	8008846 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008832:	4b14      	ldr	r3, [pc, #80]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	4a15      	ldr	r2, [pc, #84]	; (800888c <HAL_RCC_ClockConfig+0x200>)
 8008838:	4013      	ands	r3, r2
 800883a:	0019      	movs	r1, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68da      	ldr	r2, [r3, #12]
 8008840:	4b10      	ldr	r3, [pc, #64]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 8008842:	430a      	orrs	r2, r1
 8008844:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008846:	f000 f829 	bl	800889c <HAL_RCC_GetSysClockFreq>
 800884a:	0001      	movs	r1, r0
 800884c:	4b0d      	ldr	r3, [pc, #52]	; (8008884 <HAL_RCC_ClockConfig+0x1f8>)
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	0a1b      	lsrs	r3, r3, #8
 8008852:	220f      	movs	r2, #15
 8008854:	401a      	ands	r2, r3
 8008856:	4b0e      	ldr	r3, [pc, #56]	; (8008890 <HAL_RCC_ClockConfig+0x204>)
 8008858:	0092      	lsls	r2, r2, #2
 800885a:	58d3      	ldr	r3, [r2, r3]
 800885c:	221f      	movs	r2, #31
 800885e:	4013      	ands	r3, r2
 8008860:	000a      	movs	r2, r1
 8008862:	40da      	lsrs	r2, r3
 8008864:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <HAL_RCC_ClockConfig+0x208>)
 8008866:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008868:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <HAL_RCC_ClockConfig+0x20c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	0018      	movs	r0, r3
 800886e:	f7fb fd29 	bl	80042c4 <HAL_InitTick>
 8008872:	0003      	movs	r3, r0
}
 8008874:	0018      	movs	r0, r3
 8008876:	46bd      	mov	sp, r7
 8008878:	b004      	add	sp, #16
 800887a:	bd80      	pop	{r7, pc}
 800887c:	40022000 	.word	0x40022000
 8008880:	00001388 	.word	0x00001388
 8008884:	40021000 	.word	0x40021000
 8008888:	fffff0ff 	.word	0xfffff0ff
 800888c:	ffff8fff 	.word	0xffff8fff
 8008890:	0800ed68 	.word	0x0800ed68
 8008894:	2000002c 	.word	0x2000002c
 8008898:	20000030 	.word	0x20000030

0800889c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80088a2:	4b3c      	ldr	r3, [pc, #240]	; (8008994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	2238      	movs	r2, #56	; 0x38
 80088a8:	4013      	ands	r3, r2
 80088aa:	d10f      	bne.n	80088cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80088ac:	4b39      	ldr	r3, [pc, #228]	; (8008994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	0adb      	lsrs	r3, r3, #11
 80088b2:	2207      	movs	r2, #7
 80088b4:	4013      	ands	r3, r2
 80088b6:	2201      	movs	r2, #1
 80088b8:	409a      	lsls	r2, r3
 80088ba:	0013      	movs	r3, r2
 80088bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	4835      	ldr	r0, [pc, #212]	; (8008998 <HAL_RCC_GetSysClockFreq+0xfc>)
 80088c2:	f7f7 fc3b 	bl	800013c <__udivsi3>
 80088c6:	0003      	movs	r3, r0
 80088c8:	613b      	str	r3, [r7, #16]
 80088ca:	e05d      	b.n	8008988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088cc:	4b31      	ldr	r3, [pc, #196]	; (8008994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	2238      	movs	r2, #56	; 0x38
 80088d2:	4013      	ands	r3, r2
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d102      	bne.n	80088de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80088d8:	4b30      	ldr	r3, [pc, #192]	; (800899c <HAL_RCC_GetSysClockFreq+0x100>)
 80088da:	613b      	str	r3, [r7, #16]
 80088dc:	e054      	b.n	8008988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088de:	4b2d      	ldr	r3, [pc, #180]	; (8008994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	2238      	movs	r2, #56	; 0x38
 80088e4:	4013      	ands	r3, r2
 80088e6:	2b10      	cmp	r3, #16
 80088e8:	d138      	bne.n	800895c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80088ea:	4b2a      	ldr	r3, [pc, #168]	; (8008994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2203      	movs	r2, #3
 80088f0:	4013      	ands	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80088f4:	4b27      	ldr	r3, [pc, #156]	; (8008994 <HAL_RCC_GetSysClockFreq+0xf8>)
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	091b      	lsrs	r3, r3, #4
 80088fa:	2207      	movs	r2, #7
 80088fc:	4013      	ands	r3, r2
 80088fe:	3301      	adds	r3, #1
 8008900:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2b03      	cmp	r3, #3
 8008906:	d10d      	bne.n	8008924 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008908:	68b9      	ldr	r1, [r7, #8]
 800890a:	4824      	ldr	r0, [pc, #144]	; (800899c <HAL_RCC_GetSysClockFreq+0x100>)
 800890c:	f7f7 fc16 	bl	800013c <__udivsi3>
 8008910:	0003      	movs	r3, r0
 8008912:	0019      	movs	r1, r3
 8008914:	4b1f      	ldr	r3, [pc, #124]	; (8008994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	0a1b      	lsrs	r3, r3, #8
 800891a:	227f      	movs	r2, #127	; 0x7f
 800891c:	4013      	ands	r3, r2
 800891e:	434b      	muls	r3, r1
 8008920:	617b      	str	r3, [r7, #20]
        break;
 8008922:	e00d      	b.n	8008940 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008924:	68b9      	ldr	r1, [r7, #8]
 8008926:	481c      	ldr	r0, [pc, #112]	; (8008998 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008928:	f7f7 fc08 	bl	800013c <__udivsi3>
 800892c:	0003      	movs	r3, r0
 800892e:	0019      	movs	r1, r3
 8008930:	4b18      	ldr	r3, [pc, #96]	; (8008994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	0a1b      	lsrs	r3, r3, #8
 8008936:	227f      	movs	r2, #127	; 0x7f
 8008938:	4013      	ands	r3, r2
 800893a:	434b      	muls	r3, r1
 800893c:	617b      	str	r3, [r7, #20]
        break;
 800893e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008940:	4b14      	ldr	r3, [pc, #80]	; (8008994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	0f5b      	lsrs	r3, r3, #29
 8008946:	2207      	movs	r2, #7
 8008948:	4013      	ands	r3, r2
 800894a:	3301      	adds	r3, #1
 800894c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	6978      	ldr	r0, [r7, #20]
 8008952:	f7f7 fbf3 	bl	800013c <__udivsi3>
 8008956:	0003      	movs	r3, r0
 8008958:	613b      	str	r3, [r7, #16]
 800895a:	e015      	b.n	8008988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800895c:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <HAL_RCC_GetSysClockFreq+0xf8>)
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2238      	movs	r2, #56	; 0x38
 8008962:	4013      	ands	r3, r2
 8008964:	2b20      	cmp	r3, #32
 8008966:	d103      	bne.n	8008970 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	613b      	str	r3, [r7, #16]
 800896e:	e00b      	b.n	8008988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008970:	4b08      	ldr	r3, [pc, #32]	; (8008994 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	2238      	movs	r2, #56	; 0x38
 8008976:	4013      	ands	r3, r2
 8008978:	2b18      	cmp	r3, #24
 800897a:	d103      	bne.n	8008984 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800897c:	23fa      	movs	r3, #250	; 0xfa
 800897e:	01db      	lsls	r3, r3, #7
 8008980:	613b      	str	r3, [r7, #16]
 8008982:	e001      	b.n	8008988 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008988:	693b      	ldr	r3, [r7, #16]
}
 800898a:	0018      	movs	r0, r3
 800898c:	46bd      	mov	sp, r7
 800898e:	b006      	add	sp, #24
 8008990:	bd80      	pop	{r7, pc}
 8008992:	46c0      	nop			; (mov r8, r8)
 8008994:	40021000 	.word	0x40021000
 8008998:	00f42400 	.word	0x00f42400
 800899c:	007a1200 	.word	0x007a1200

080089a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089a4:	4b02      	ldr	r3, [pc, #8]	; (80089b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80089a6:	681b      	ldr	r3, [r3, #0]
}
 80089a8:	0018      	movs	r0, r3
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	2000002c 	.word	0x2000002c

080089b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089b4:	b5b0      	push	{r4, r5, r7, lr}
 80089b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80089b8:	f7ff fff2 	bl	80089a0 <HAL_RCC_GetHCLKFreq>
 80089bc:	0004      	movs	r4, r0
 80089be:	f7ff faf3 	bl	8007fa8 <LL_RCC_GetAPB1Prescaler>
 80089c2:	0003      	movs	r3, r0
 80089c4:	0b1a      	lsrs	r2, r3, #12
 80089c6:	4b05      	ldr	r3, [pc, #20]	; (80089dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80089c8:	0092      	lsls	r2, r2, #2
 80089ca:	58d3      	ldr	r3, [r2, r3]
 80089cc:	221f      	movs	r2, #31
 80089ce:	4013      	ands	r3, r2
 80089d0:	40dc      	lsrs	r4, r3
 80089d2:	0023      	movs	r3, r4
}
 80089d4:	0018      	movs	r0, r3
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bdb0      	pop	{r4, r5, r7, pc}
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	0800eda8 	.word	0x0800eda8

080089e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80089e8:	2313      	movs	r3, #19
 80089ea:	18fb      	adds	r3, r7, r3
 80089ec:	2200      	movs	r2, #0
 80089ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80089f0:	2312      	movs	r3, #18
 80089f2:	18fb      	adds	r3, r7, r3
 80089f4:	2200      	movs	r2, #0
 80089f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	2380      	movs	r3, #128	; 0x80
 80089fe:	029b      	lsls	r3, r3, #10
 8008a00:	4013      	ands	r3, r2
 8008a02:	d100      	bne.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008a04:	e0ad      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a06:	2011      	movs	r0, #17
 8008a08:	183b      	adds	r3, r7, r0
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a0e:	4b47      	ldr	r3, [pc, #284]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a12:	2380      	movs	r3, #128	; 0x80
 8008a14:	055b      	lsls	r3, r3, #21
 8008a16:	4013      	ands	r3, r2
 8008a18:	d110      	bne.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a1a:	4b44      	ldr	r3, [pc, #272]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a1e:	4b43      	ldr	r3, [pc, #268]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a20:	2180      	movs	r1, #128	; 0x80
 8008a22:	0549      	lsls	r1, r1, #21
 8008a24:	430a      	orrs	r2, r1
 8008a26:	63da      	str	r2, [r3, #60]	; 0x3c
 8008a28:	4b40      	ldr	r3, [pc, #256]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a2c:	2380      	movs	r3, #128	; 0x80
 8008a2e:	055b      	lsls	r3, r3, #21
 8008a30:	4013      	ands	r3, r2
 8008a32:	60bb      	str	r3, [r7, #8]
 8008a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a36:	183b      	adds	r3, r7, r0
 8008a38:	2201      	movs	r2, #1
 8008a3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a3c:	4b3c      	ldr	r3, [pc, #240]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	4b3b      	ldr	r3, [pc, #236]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008a42:	2180      	movs	r1, #128	; 0x80
 8008a44:	0049      	lsls	r1, r1, #1
 8008a46:	430a      	orrs	r2, r1
 8008a48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a4a:	f7fb fc97 	bl	800437c <HAL_GetTick>
 8008a4e:	0003      	movs	r3, r0
 8008a50:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a52:	e00b      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a54:	f7fb fc92 	bl	800437c <HAL_GetTick>
 8008a58:	0002      	movs	r2, r0
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d904      	bls.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008a62:	2313      	movs	r3, #19
 8008a64:	18fb      	adds	r3, r7, r3
 8008a66:	2203      	movs	r2, #3
 8008a68:	701a      	strb	r2, [r3, #0]
        break;
 8008a6a:	e005      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a6c:	4b30      	ldr	r3, [pc, #192]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	2380      	movs	r3, #128	; 0x80
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	4013      	ands	r3, r2
 8008a76:	d0ed      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008a78:	2313      	movs	r3, #19
 8008a7a:	18fb      	adds	r3, r7, r3
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d15e      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008a82:	4b2a      	ldr	r3, [pc, #168]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a86:	23c0      	movs	r3, #192	; 0xc0
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d019      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d014      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008a9e:	4b23      	ldr	r3, [pc, #140]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aa2:	4a24      	ldr	r2, [pc, #144]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008aa8:	4b20      	ldr	r3, [pc, #128]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008aaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008aac:	4b1f      	ldr	r3, [pc, #124]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008aae:	2180      	movs	r1, #128	; 0x80
 8008ab0:	0249      	lsls	r1, r1, #9
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ab6:	4b1d      	ldr	r3, [pc, #116]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008ab8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008aba:	4b1c      	ldr	r3, [pc, #112]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008abc:	491e      	ldr	r1, [pc, #120]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8008abe:	400a      	ands	r2, r1
 8008ac0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008ac2:	4b1a      	ldr	r3, [pc, #104]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2201      	movs	r2, #1
 8008acc:	4013      	ands	r3, r2
 8008ace:	d016      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad0:	f7fb fc54 	bl	800437c <HAL_GetTick>
 8008ad4:	0003      	movs	r3, r0
 8008ad6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ad8:	e00c      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ada:	f7fb fc4f 	bl	800437c <HAL_GetTick>
 8008ade:	0002      	movs	r2, r0
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	4a15      	ldr	r2, [pc, #84]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d904      	bls.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008aea:	2313      	movs	r3, #19
 8008aec:	18fb      	adds	r3, r7, r3
 8008aee:	2203      	movs	r2, #3
 8008af0:	701a      	strb	r2, [r3, #0]
            break;
 8008af2:	e004      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008af4:	4b0d      	ldr	r3, [pc, #52]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af8:	2202      	movs	r2, #2
 8008afa:	4013      	ands	r3, r2
 8008afc:	d0ed      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008afe:	2313      	movs	r3, #19
 8008b00:	18fb      	adds	r3, r7, r3
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10a      	bne.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b08:	4b08      	ldr	r3, [pc, #32]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0c:	4a09      	ldr	r2, [pc, #36]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8008b0e:	4013      	ands	r3, r2
 8008b10:	0019      	movs	r1, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b16:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b1c:	e016      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b1e:	2312      	movs	r3, #18
 8008b20:	18fb      	adds	r3, r7, r3
 8008b22:	2213      	movs	r2, #19
 8008b24:	18ba      	adds	r2, r7, r2
 8008b26:	7812      	ldrb	r2, [r2, #0]
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	e00f      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008b2c:	40021000 	.word	0x40021000
 8008b30:	40007000 	.word	0x40007000
 8008b34:	fffffcff 	.word	0xfffffcff
 8008b38:	fffeffff 	.word	0xfffeffff
 8008b3c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b40:	2312      	movs	r3, #18
 8008b42:	18fb      	adds	r3, r7, r3
 8008b44:	2213      	movs	r2, #19
 8008b46:	18ba      	adds	r2, r7, r2
 8008b48:	7812      	ldrb	r2, [r2, #0]
 8008b4a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b4c:	2311      	movs	r3, #17
 8008b4e:	18fb      	adds	r3, r7, r3
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d105      	bne.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b56:	4bb6      	ldr	r3, [pc, #728]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b5a:	4bb5      	ldr	r3, [pc, #724]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b5c:	49b5      	ldr	r1, [pc, #724]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8008b5e:	400a      	ands	r2, r1
 8008b60:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2201      	movs	r2, #1
 8008b68:	4013      	ands	r3, r2
 8008b6a:	d009      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b6c:	4bb0      	ldr	r3, [pc, #704]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b70:	2203      	movs	r2, #3
 8008b72:	4393      	bics	r3, r2
 8008b74:	0019      	movs	r1, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	4bad      	ldr	r3, [pc, #692]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2202      	movs	r2, #2
 8008b86:	4013      	ands	r3, r2
 8008b88:	d009      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b8a:	4ba9      	ldr	r3, [pc, #676]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8e:	220c      	movs	r2, #12
 8008b90:	4393      	bics	r3, r2
 8008b92:	0019      	movs	r1, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689a      	ldr	r2, [r3, #8]
 8008b98:	4ba5      	ldr	r3, [pc, #660]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	d009      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008ba8:	4ba1      	ldr	r3, [pc, #644]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bac:	2230      	movs	r2, #48	; 0x30
 8008bae:	4393      	bics	r3, r2
 8008bb0:	0019      	movs	r1, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68da      	ldr	r2, [r3, #12]
 8008bb6:	4b9e      	ldr	r3, [pc, #632]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2210      	movs	r2, #16
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	d009      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008bc6:	4b9a      	ldr	r3, [pc, #616]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bca:	4a9b      	ldr	r2, [pc, #620]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8008bcc:	4013      	ands	r3, r2
 8008bce:	0019      	movs	r1, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	4b96      	ldr	r3, [pc, #600]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	2380      	movs	r3, #128	; 0x80
 8008be0:	015b      	lsls	r3, r3, #5
 8008be2:	4013      	ands	r3, r2
 8008be4:	d009      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8008be6:	4b92      	ldr	r3, [pc, #584]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bea:	4a94      	ldr	r2, [pc, #592]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	0019      	movs	r1, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	695a      	ldr	r2, [r3, #20]
 8008bf4:	4b8e      	ldr	r3, [pc, #568]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	2380      	movs	r3, #128	; 0x80
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4013      	ands	r3, r2
 8008c04:	d009      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c06:	4b8a      	ldr	r3, [pc, #552]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c0a:	4a8d      	ldr	r2, [pc, #564]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	0019      	movs	r1, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c14:	4b86      	ldr	r3, [pc, #536]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c16:	430a      	orrs	r2, r1
 8008c18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	2380      	movs	r3, #128	; 0x80
 8008c20:	00db      	lsls	r3, r3, #3
 8008c22:	4013      	ands	r3, r2
 8008c24:	d009      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c26:	4b82      	ldr	r3, [pc, #520]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2a:	4a86      	ldr	r2, [pc, #536]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	0019      	movs	r1, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c34:	4b7e      	ldr	r3, [pc, #504]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c36:	430a      	orrs	r2, r1
 8008c38:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	4013      	ands	r3, r2
 8008c42:	d009      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c44:	4b7a      	ldr	r3, [pc, #488]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c48:	4a7f      	ldr	r2, [pc, #508]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	0019      	movs	r1, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	699a      	ldr	r2, [r3, #24]
 8008c52:	4b77      	ldr	r3, [pc, #476]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c54:	430a      	orrs	r2, r1
 8008c56:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2240      	movs	r2, #64	; 0x40
 8008c5e:	4013      	ands	r3, r2
 8008c60:	d009      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008c62:	4b73      	ldr	r3, [pc, #460]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c66:	4a79      	ldr	r2, [pc, #484]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8008c68:	4013      	ands	r3, r2
 8008c6a:	0019      	movs	r1, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	69da      	ldr	r2, [r3, #28]
 8008c70:	4b6f      	ldr	r3, [pc, #444]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c72:	430a      	orrs	r2, r1
 8008c74:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	2380      	movs	r3, #128	; 0x80
 8008c7c:	01db      	lsls	r3, r3, #7
 8008c7e:	4013      	ands	r3, r2
 8008c80:	d015      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c82:	4b6b      	ldr	r3, [pc, #428]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	0899      	lsrs	r1, r3, #2
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c8e:	4b68      	ldr	r3, [pc, #416]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c90:	430a      	orrs	r2, r1
 8008c92:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c98:	2380      	movs	r3, #128	; 0x80
 8008c9a:	05db      	lsls	r3, r3, #23
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d106      	bne.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008ca0:	4b63      	ldr	r3, [pc, #396]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	4b62      	ldr	r3, [pc, #392]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008ca6:	2180      	movs	r1, #128	; 0x80
 8008ca8:	0249      	lsls	r1, r1, #9
 8008caa:	430a      	orrs	r2, r1
 8008cac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	2380      	movs	r3, #128	; 0x80
 8008cb4:	031b      	lsls	r3, r3, #12
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	d009      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008cba:	4b5d      	ldr	r3, [pc, #372]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cbe:	2240      	movs	r2, #64	; 0x40
 8008cc0:	4393      	bics	r3, r2
 8008cc2:	0019      	movs	r1, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc8:	4b59      	ldr	r3, [pc, #356]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	2380      	movs	r3, #128	; 0x80
 8008cd4:	039b      	lsls	r3, r3, #14
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	d016      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008cda:	4b55      	ldr	r3, [pc, #340]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cde:	4a5c      	ldr	r2, [pc, #368]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	0019      	movs	r1, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ce8:	4b51      	ldr	r3, [pc, #324]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cea:	430a      	orrs	r2, r1
 8008cec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cf2:	2380      	movs	r3, #128	; 0x80
 8008cf4:	03db      	lsls	r3, r3, #15
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d106      	bne.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008cfa:	4b4d      	ldr	r3, [pc, #308]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	4b4c      	ldr	r3, [pc, #304]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d00:	2180      	movs	r1, #128	; 0x80
 8008d02:	0449      	lsls	r1, r1, #17
 8008d04:	430a      	orrs	r2, r1
 8008d06:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	2380      	movs	r3, #128	; 0x80
 8008d0e:	03db      	lsls	r3, r3, #15
 8008d10:	4013      	ands	r3, r2
 8008d12:	d016      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008d14:	4b46      	ldr	r3, [pc, #280]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d18:	4a4e      	ldr	r2, [pc, #312]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	0019      	movs	r1, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d22:	4b43      	ldr	r3, [pc, #268]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d24:	430a      	orrs	r2, r1
 8008d26:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d2c:	2380      	movs	r3, #128	; 0x80
 8008d2e:	045b      	lsls	r3, r3, #17
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d106      	bne.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008d34:	4b3e      	ldr	r3, [pc, #248]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d36:	68da      	ldr	r2, [r3, #12]
 8008d38:	4b3d      	ldr	r3, [pc, #244]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d3a:	2180      	movs	r1, #128	; 0x80
 8008d3c:	0449      	lsls	r1, r1, #17
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	2380      	movs	r3, #128	; 0x80
 8008d48:	011b      	lsls	r3, r3, #4
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	d014      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008d4e:	4b38      	ldr	r3, [pc, #224]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d52:	2203      	movs	r2, #3
 8008d54:	4393      	bics	r3, r2
 8008d56:	0019      	movs	r1, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a1a      	ldr	r2, [r3, #32]
 8008d5c:	4b34      	ldr	r3, [pc, #208]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d106      	bne.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008d6a:	4b31      	ldr	r3, [pc, #196]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	4b30      	ldr	r3, [pc, #192]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d70:	2180      	movs	r1, #128	; 0x80
 8008d72:	0249      	lsls	r1, r1, #9
 8008d74:	430a      	orrs	r2, r1
 8008d76:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	019b      	lsls	r3, r3, #6
 8008d80:	4013      	ands	r3, r2
 8008d82:	d014      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008d84:	4b2a      	ldr	r3, [pc, #168]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d88:	220c      	movs	r2, #12
 8008d8a:	4393      	bics	r3, r2
 8008d8c:	0019      	movs	r1, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d92:	4b27      	ldr	r3, [pc, #156]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d94:	430a      	orrs	r2, r1
 8008d96:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d106      	bne.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008da0:	4b23      	ldr	r3, [pc, #140]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	4b22      	ldr	r3, [pc, #136]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008da6:	2180      	movs	r1, #128	; 0x80
 8008da8:	0249      	lsls	r1, r1, #9
 8008daa:	430a      	orrs	r2, r1
 8008dac:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	2380      	movs	r3, #128	; 0x80
 8008db4:	045b      	lsls	r3, r3, #17
 8008db6:	4013      	ands	r3, r2
 8008db8:	d016      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008dba:	4b1d      	ldr	r3, [pc, #116]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dbe:	4a22      	ldr	r2, [pc, #136]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	0019      	movs	r1, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dc8:	4b19      	ldr	r3, [pc, #100]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dd2:	2380      	movs	r3, #128	; 0x80
 8008dd4:	019b      	lsls	r3, r3, #6
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d106      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008dda:	4b15      	ldr	r3, [pc, #84]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	4b14      	ldr	r3, [pc, #80]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008de0:	2180      	movs	r1, #128	; 0x80
 8008de2:	0449      	lsls	r1, r1, #17
 8008de4:	430a      	orrs	r2, r1
 8008de6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	2380      	movs	r3, #128	; 0x80
 8008dee:	049b      	lsls	r3, r3, #18
 8008df0:	4013      	ands	r3, r2
 8008df2:	d016      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008df4:	4b0e      	ldr	r3, [pc, #56]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df8:	4a10      	ldr	r2, [pc, #64]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	0019      	movs	r1, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e02:	4b0b      	ldr	r3, [pc, #44]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e04:	430a      	orrs	r2, r1
 8008e06:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e0c:	2380      	movs	r3, #128	; 0x80
 8008e0e:	005b      	lsls	r3, r3, #1
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d106      	bne.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008e14:	4b06      	ldr	r3, [pc, #24]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e16:	68da      	ldr	r2, [r3, #12]
 8008e18:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e1a:	2180      	movs	r1, #128	; 0x80
 8008e1c:	0449      	lsls	r1, r1, #17
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008e22:	2312      	movs	r3, #18
 8008e24:	18fb      	adds	r3, r7, r3
 8008e26:	781b      	ldrb	r3, [r3, #0]
}
 8008e28:	0018      	movs	r0, r3
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	b006      	add	sp, #24
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	40021000 	.word	0x40021000
 8008e34:	efffffff 	.word	0xefffffff
 8008e38:	fffff3ff 	.word	0xfffff3ff
 8008e3c:	fffffcff 	.word	0xfffffcff
 8008e40:	fff3ffff 	.word	0xfff3ffff
 8008e44:	ffcfffff 	.word	0xffcfffff
 8008e48:	ffffcfff 	.word	0xffffcfff
 8008e4c:	ffff3fff 	.word	0xffff3fff
 8008e50:	ffbfffff 	.word	0xffbfffff
 8008e54:	feffffff 	.word	0xfeffffff

08008e58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e04a      	b.n	8008f00 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	223d      	movs	r2, #61	; 0x3d
 8008e6e:	5c9b      	ldrb	r3, [r3, r2]
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d107      	bne.n	8008e86 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	223c      	movs	r2, #60	; 0x3c
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	0018      	movs	r0, r3
 8008e82:	f7fa f9f7 	bl	8003274 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	223d      	movs	r2, #61	; 0x3d
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3304      	adds	r3, #4
 8008e96:	0019      	movs	r1, r3
 8008e98:	0010      	movs	r0, r2
 8008e9a:	f000 f92b 	bl	80090f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2248      	movs	r2, #72	; 0x48
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	223e      	movs	r2, #62	; 0x3e
 8008eaa:	2101      	movs	r1, #1
 8008eac:	5499      	strb	r1, [r3, r2]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	223f      	movs	r2, #63	; 0x3f
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	5499      	strb	r1, [r3, r2]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2240      	movs	r2, #64	; 0x40
 8008eba:	2101      	movs	r1, #1
 8008ebc:	5499      	strb	r1, [r3, r2]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2241      	movs	r2, #65	; 0x41
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	5499      	strb	r1, [r3, r2]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2242      	movs	r2, #66	; 0x42
 8008eca:	2101      	movs	r1, #1
 8008ecc:	5499      	strb	r1, [r3, r2]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2243      	movs	r2, #67	; 0x43
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2244      	movs	r2, #68	; 0x44
 8008eda:	2101      	movs	r1, #1
 8008edc:	5499      	strb	r1, [r3, r2]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2245      	movs	r2, #69	; 0x45
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	5499      	strb	r1, [r3, r2]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2246      	movs	r2, #70	; 0x46
 8008eea:	2101      	movs	r1, #1
 8008eec:	5499      	strb	r1, [r3, r2]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2247      	movs	r2, #71	; 0x47
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	223d      	movs	r2, #61	; 0x3d
 8008efa:	2101      	movs	r1, #1
 8008efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	0018      	movs	r0, r3
 8008f02:	46bd      	mov	sp, r7
 8008f04:	b002      	add	sp, #8
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	223c      	movs	r2, #60	; 0x3c
 8008f18:	5c9b      	ldrb	r3, [r3, r2]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d101      	bne.n	8008f22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008f1e:	2302      	movs	r3, #2
 8008f20:	e0df      	b.n	80090e2 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	223c      	movs	r2, #60	; 0x3c
 8008f26:	2101      	movs	r1, #1
 8008f28:	5499      	strb	r1, [r3, r2]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b14      	cmp	r3, #20
 8008f2e:	d900      	bls.n	8008f32 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8008f30:	e0d1      	b.n	80090d6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	009a      	lsls	r2, r3, #2
 8008f36:	4b6d      	ldr	r3, [pc, #436]	; (80090ec <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8008f38:	18d3      	adds	r3, r2, r3
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	0011      	movs	r1, r2
 8008f46:	0018      	movs	r0, r3
 8008f48:	f000 f95e 	bl	8009208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	699a      	ldr	r2, [r3, #24]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2108      	movs	r1, #8
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	699a      	ldr	r2, [r3, #24]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2104      	movs	r1, #4
 8008f68:	438a      	bics	r2, r1
 8008f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6999      	ldr	r1, [r3, #24]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	691a      	ldr	r2, [r3, #16]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	619a      	str	r2, [r3, #24]
      break;
 8008f7e:	e0ab      	b.n	80090d8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	0011      	movs	r1, r2
 8008f88:	0018      	movs	r0, r3
 8008f8a:	f000 f9c7 	bl	800931c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	699a      	ldr	r2, [r3, #24]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2180      	movs	r1, #128	; 0x80
 8008f9a:	0109      	lsls	r1, r1, #4
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	699a      	ldr	r2, [r3, #24]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4951      	ldr	r1, [pc, #324]	; (80090f0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008fac:	400a      	ands	r2, r1
 8008fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6999      	ldr	r1, [r3, #24]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	021a      	lsls	r2, r3, #8
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	619a      	str	r2, [r3, #24]
      break;
 8008fc4:	e088      	b.n	80090d8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	0011      	movs	r1, r2
 8008fce:	0018      	movs	r0, r3
 8008fd0:	f000 fa28 	bl	8009424 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	69da      	ldr	r2, [r3, #28]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2108      	movs	r1, #8
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	69da      	ldr	r2, [r3, #28]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2104      	movs	r1, #4
 8008ff0:	438a      	bics	r2, r1
 8008ff2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	69d9      	ldr	r1, [r3, #28]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	691a      	ldr	r2, [r3, #16]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	61da      	str	r2, [r3, #28]
      break;
 8009006:	e067      	b.n	80090d8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	0011      	movs	r1, r2
 8009010:	0018      	movs	r0, r3
 8009012:	f000 fa8f 	bl	8009534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69da      	ldr	r2, [r3, #28]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2180      	movs	r1, #128	; 0x80
 8009022:	0109      	lsls	r1, r1, #4
 8009024:	430a      	orrs	r2, r1
 8009026:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	69da      	ldr	r2, [r3, #28]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	492f      	ldr	r1, [pc, #188]	; (80090f0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8009034:	400a      	ands	r2, r1
 8009036:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	69d9      	ldr	r1, [r3, #28]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	021a      	lsls	r2, r3, #8
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	61da      	str	r2, [r3, #28]
      break;
 800904c:	e044      	b.n	80090d8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	0011      	movs	r1, r2
 8009056:	0018      	movs	r0, r3
 8009058:	f000 fad6 	bl	8009608 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2108      	movs	r1, #8
 8009068:	430a      	orrs	r2, r1
 800906a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2104      	movs	r1, #4
 8009078:	438a      	bics	r2, r1
 800907a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	691a      	ldr	r2, [r3, #16]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	430a      	orrs	r2, r1
 800908c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800908e:	e023      	b.n	80090d8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	0011      	movs	r1, r2
 8009098:	0018      	movs	r0, r3
 800909a:	f000 fb15 	bl	80096c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2180      	movs	r1, #128	; 0x80
 80090aa:	0109      	lsls	r1, r1, #4
 80090ac:	430a      	orrs	r2, r1
 80090ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	490d      	ldr	r1, [pc, #52]	; (80090f0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80090bc:	400a      	ands	r2, r1
 80090be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	021a      	lsls	r2, r3, #8
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090d4:	e000      	b.n	80090d8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80090d6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	223c      	movs	r2, #60	; 0x3c
 80090dc:	2100      	movs	r1, #0
 80090de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	0018      	movs	r0, r3
 80090e4:	46bd      	mov	sp, r7
 80090e6:	b004      	add	sp, #16
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	0800edc8 	.word	0x0800edc8
 80090f0:	fffffbff 	.word	0xfffffbff

080090f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a38      	ldr	r2, [pc, #224]	; (80091e8 <TIM_Base_SetConfig+0xf4>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d00c      	beq.n	8009126 <TIM_Base_SetConfig+0x32>
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	2380      	movs	r3, #128	; 0x80
 8009110:	05db      	lsls	r3, r3, #23
 8009112:	429a      	cmp	r2, r3
 8009114:	d007      	beq.n	8009126 <TIM_Base_SetConfig+0x32>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a34      	ldr	r2, [pc, #208]	; (80091ec <TIM_Base_SetConfig+0xf8>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d003      	beq.n	8009126 <TIM_Base_SetConfig+0x32>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a33      	ldr	r2, [pc, #204]	; (80091f0 <TIM_Base_SetConfig+0xfc>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d108      	bne.n	8009138 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2270      	movs	r2, #112	; 0x70
 800912a:	4393      	bics	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	4313      	orrs	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a2b      	ldr	r2, [pc, #172]	; (80091e8 <TIM_Base_SetConfig+0xf4>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d01c      	beq.n	800917a <TIM_Base_SetConfig+0x86>
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	2380      	movs	r3, #128	; 0x80
 8009144:	05db      	lsls	r3, r3, #23
 8009146:	429a      	cmp	r2, r3
 8009148:	d017      	beq.n	800917a <TIM_Base_SetConfig+0x86>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a27      	ldr	r2, [pc, #156]	; (80091ec <TIM_Base_SetConfig+0xf8>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d013      	beq.n	800917a <TIM_Base_SetConfig+0x86>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a26      	ldr	r2, [pc, #152]	; (80091f0 <TIM_Base_SetConfig+0xfc>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00f      	beq.n	800917a <TIM_Base_SetConfig+0x86>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a25      	ldr	r2, [pc, #148]	; (80091f4 <TIM_Base_SetConfig+0x100>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d00b      	beq.n	800917a <TIM_Base_SetConfig+0x86>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a24      	ldr	r2, [pc, #144]	; (80091f8 <TIM_Base_SetConfig+0x104>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d007      	beq.n	800917a <TIM_Base_SetConfig+0x86>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a23      	ldr	r2, [pc, #140]	; (80091fc <TIM_Base_SetConfig+0x108>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d003      	beq.n	800917a <TIM_Base_SetConfig+0x86>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a22      	ldr	r2, [pc, #136]	; (8009200 <TIM_Base_SetConfig+0x10c>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d108      	bne.n	800918c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	4a21      	ldr	r2, [pc, #132]	; (8009204 <TIM_Base_SetConfig+0x110>)
 800917e:	4013      	ands	r3, r2
 8009180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2280      	movs	r2, #128	; 0x80
 8009190:	4393      	bics	r3, r2
 8009192:	001a      	movs	r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	695b      	ldr	r3, [r3, #20]
 8009198:	4313      	orrs	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	689a      	ldr	r2, [r3, #8]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a0c      	ldr	r2, [pc, #48]	; (80091e8 <TIM_Base_SetConfig+0xf4>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d00b      	beq.n	80091d2 <TIM_Base_SetConfig+0xde>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a0e      	ldr	r2, [pc, #56]	; (80091f8 <TIM_Base_SetConfig+0x104>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d007      	beq.n	80091d2 <TIM_Base_SetConfig+0xde>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a0d      	ldr	r2, [pc, #52]	; (80091fc <TIM_Base_SetConfig+0x108>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d003      	beq.n	80091d2 <TIM_Base_SetConfig+0xde>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a0c      	ldr	r2, [pc, #48]	; (8009200 <TIM_Base_SetConfig+0x10c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d103      	bne.n	80091da <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	691a      	ldr	r2, [r3, #16]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	615a      	str	r2, [r3, #20]
}
 80091e0:	46c0      	nop			; (mov r8, r8)
 80091e2:	46bd      	mov	sp, r7
 80091e4:	b004      	add	sp, #16
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	40012c00 	.word	0x40012c00
 80091ec:	40000400 	.word	0x40000400
 80091f0:	40000800 	.word	0x40000800
 80091f4:	40002000 	.word	0x40002000
 80091f8:	40014000 	.word	0x40014000
 80091fc:	40014400 	.word	0x40014400
 8009200:	40014800 	.word	0x40014800
 8009204:	fffffcff 	.word	0xfffffcff

08009208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	2201      	movs	r2, #1
 8009218:	4393      	bics	r3, r2
 800921a:	001a      	movs	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4a32      	ldr	r2, [pc, #200]	; (8009300 <TIM_OC1_SetConfig+0xf8>)
 8009236:	4013      	ands	r3, r2
 8009238:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2203      	movs	r2, #3
 800923e:	4393      	bics	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	4313      	orrs	r3, r2
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	2202      	movs	r2, #2
 8009250:	4393      	bics	r3, r2
 8009252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	4313      	orrs	r3, r2
 800925c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a28      	ldr	r2, [pc, #160]	; (8009304 <TIM_OC1_SetConfig+0xfc>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d00b      	beq.n	800927e <TIM_OC1_SetConfig+0x76>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a27      	ldr	r2, [pc, #156]	; (8009308 <TIM_OC1_SetConfig+0x100>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d007      	beq.n	800927e <TIM_OC1_SetConfig+0x76>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a26      	ldr	r2, [pc, #152]	; (800930c <TIM_OC1_SetConfig+0x104>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d003      	beq.n	800927e <TIM_OC1_SetConfig+0x76>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a25      	ldr	r2, [pc, #148]	; (8009310 <TIM_OC1_SetConfig+0x108>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d10c      	bne.n	8009298 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2208      	movs	r2, #8
 8009282:	4393      	bics	r3, r2
 8009284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	4313      	orrs	r3, r2
 800928e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	2204      	movs	r2, #4
 8009294:	4393      	bics	r3, r2
 8009296:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a1a      	ldr	r2, [pc, #104]	; (8009304 <TIM_OC1_SetConfig+0xfc>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d00b      	beq.n	80092b8 <TIM_OC1_SetConfig+0xb0>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a19      	ldr	r2, [pc, #100]	; (8009308 <TIM_OC1_SetConfig+0x100>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d007      	beq.n	80092b8 <TIM_OC1_SetConfig+0xb0>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a18      	ldr	r2, [pc, #96]	; (800930c <TIM_OC1_SetConfig+0x104>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d003      	beq.n	80092b8 <TIM_OC1_SetConfig+0xb0>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a17      	ldr	r2, [pc, #92]	; (8009310 <TIM_OC1_SetConfig+0x108>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d111      	bne.n	80092dc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	4a16      	ldr	r2, [pc, #88]	; (8009314 <TIM_OC1_SetConfig+0x10c>)
 80092bc:	4013      	ands	r3, r2
 80092be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	4a15      	ldr	r2, [pc, #84]	; (8009318 <TIM_OC1_SetConfig+0x110>)
 80092c4:	4013      	ands	r3, r2
 80092c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	4313      	orrs	r3, r2
 80092da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	621a      	str	r2, [r3, #32]
}
 80092f6:	46c0      	nop			; (mov r8, r8)
 80092f8:	46bd      	mov	sp, r7
 80092fa:	b006      	add	sp, #24
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	46c0      	nop			; (mov r8, r8)
 8009300:	fffeff8f 	.word	0xfffeff8f
 8009304:	40012c00 	.word	0x40012c00
 8009308:	40014000 	.word	0x40014000
 800930c:	40014400 	.word	0x40014400
 8009310:	40014800 	.word	0x40014800
 8009314:	fffffeff 	.word	0xfffffeff
 8009318:	fffffdff 	.word	0xfffffdff

0800931c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	2210      	movs	r2, #16
 800932c:	4393      	bics	r3, r2
 800932e:	001a      	movs	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a1b      	ldr	r3, [r3, #32]
 8009338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	4a2e      	ldr	r2, [pc, #184]	; (8009404 <TIM_OC2_SetConfig+0xe8>)
 800934a:	4013      	ands	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	4a2d      	ldr	r2, [pc, #180]	; (8009408 <TIM_OC2_SetConfig+0xec>)
 8009352:	4013      	ands	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	021b      	lsls	r3, r3, #8
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	4313      	orrs	r3, r2
 8009360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2220      	movs	r2, #32
 8009366:	4393      	bics	r3, r2
 8009368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	4313      	orrs	r3, r2
 8009374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a24      	ldr	r2, [pc, #144]	; (800940c <TIM_OC2_SetConfig+0xf0>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d10d      	bne.n	800939a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2280      	movs	r2, #128	; 0x80
 8009382:	4393      	bics	r3, r2
 8009384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	011b      	lsls	r3, r3, #4
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	4313      	orrs	r3, r2
 8009390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2240      	movs	r2, #64	; 0x40
 8009396:	4393      	bics	r3, r2
 8009398:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a1b      	ldr	r2, [pc, #108]	; (800940c <TIM_OC2_SetConfig+0xf0>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d00b      	beq.n	80093ba <TIM_OC2_SetConfig+0x9e>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a1a      	ldr	r2, [pc, #104]	; (8009410 <TIM_OC2_SetConfig+0xf4>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d007      	beq.n	80093ba <TIM_OC2_SetConfig+0x9e>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a19      	ldr	r2, [pc, #100]	; (8009414 <TIM_OC2_SetConfig+0xf8>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d003      	beq.n	80093ba <TIM_OC2_SetConfig+0x9e>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a18      	ldr	r2, [pc, #96]	; (8009418 <TIM_OC2_SetConfig+0xfc>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d113      	bne.n	80093e2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	4a17      	ldr	r2, [pc, #92]	; (800941c <TIM_OC2_SetConfig+0x100>)
 80093be:	4013      	ands	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	4a16      	ldr	r2, [pc, #88]	; (8009420 <TIM_OC2_SetConfig+0x104>)
 80093c6:	4013      	ands	r3, r2
 80093c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	4313      	orrs	r3, r2
 80093e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	621a      	str	r2, [r3, #32]
}
 80093fc:	46c0      	nop			; (mov r8, r8)
 80093fe:	46bd      	mov	sp, r7
 8009400:	b006      	add	sp, #24
 8009402:	bd80      	pop	{r7, pc}
 8009404:	feff8fff 	.word	0xfeff8fff
 8009408:	fffffcff 	.word	0xfffffcff
 800940c:	40012c00 	.word	0x40012c00
 8009410:	40014000 	.word	0x40014000
 8009414:	40014400 	.word	0x40014400
 8009418:	40014800 	.word	0x40014800
 800941c:	fffffbff 	.word	0xfffffbff
 8009420:	fffff7ff 	.word	0xfffff7ff

08009424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	4a35      	ldr	r2, [pc, #212]	; (8009508 <TIM_OC3_SetConfig+0xe4>)
 8009434:	401a      	ands	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4a2f      	ldr	r2, [pc, #188]	; (800950c <TIM_OC3_SetConfig+0xe8>)
 8009450:	4013      	ands	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2203      	movs	r2, #3
 8009458:	4393      	bics	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	4313      	orrs	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	4a29      	ldr	r2, [pc, #164]	; (8009510 <TIM_OC3_SetConfig+0xec>)
 800946a:	4013      	ands	r3, r2
 800946c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	4313      	orrs	r3, r2
 8009478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a25      	ldr	r2, [pc, #148]	; (8009514 <TIM_OC3_SetConfig+0xf0>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d10d      	bne.n	800949e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	4a24      	ldr	r2, [pc, #144]	; (8009518 <TIM_OC3_SetConfig+0xf4>)
 8009486:	4013      	ands	r3, r2
 8009488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	021b      	lsls	r3, r3, #8
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	4313      	orrs	r3, r2
 8009494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	4a20      	ldr	r2, [pc, #128]	; (800951c <TIM_OC3_SetConfig+0xf8>)
 800949a:	4013      	ands	r3, r2
 800949c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a1c      	ldr	r2, [pc, #112]	; (8009514 <TIM_OC3_SetConfig+0xf0>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d00b      	beq.n	80094be <TIM_OC3_SetConfig+0x9a>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a1d      	ldr	r2, [pc, #116]	; (8009520 <TIM_OC3_SetConfig+0xfc>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d007      	beq.n	80094be <TIM_OC3_SetConfig+0x9a>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a1c      	ldr	r2, [pc, #112]	; (8009524 <TIM_OC3_SetConfig+0x100>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d003      	beq.n	80094be <TIM_OC3_SetConfig+0x9a>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a1b      	ldr	r2, [pc, #108]	; (8009528 <TIM_OC3_SetConfig+0x104>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d113      	bne.n	80094e6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	4a1a      	ldr	r2, [pc, #104]	; (800952c <TIM_OC3_SetConfig+0x108>)
 80094c2:	4013      	ands	r3, r2
 80094c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	4a19      	ldr	r2, [pc, #100]	; (8009530 <TIM_OC3_SetConfig+0x10c>)
 80094ca:	4013      	ands	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	011b      	lsls	r3, r3, #4
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	621a      	str	r2, [r3, #32]
}
 8009500:	46c0      	nop			; (mov r8, r8)
 8009502:	46bd      	mov	sp, r7
 8009504:	b006      	add	sp, #24
 8009506:	bd80      	pop	{r7, pc}
 8009508:	fffffeff 	.word	0xfffffeff
 800950c:	fffeff8f 	.word	0xfffeff8f
 8009510:	fffffdff 	.word	0xfffffdff
 8009514:	40012c00 	.word	0x40012c00
 8009518:	fffff7ff 	.word	0xfffff7ff
 800951c:	fffffbff 	.word	0xfffffbff
 8009520:	40014000 	.word	0x40014000
 8009524:	40014400 	.word	0x40014400
 8009528:	40014800 	.word	0x40014800
 800952c:	ffffefff 	.word	0xffffefff
 8009530:	ffffdfff 	.word	0xffffdfff

08009534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	4a28      	ldr	r2, [pc, #160]	; (80095e4 <TIM_OC4_SetConfig+0xb0>)
 8009544:	401a      	ands	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4a22      	ldr	r2, [pc, #136]	; (80095e8 <TIM_OC4_SetConfig+0xb4>)
 8009560:	4013      	ands	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4a21      	ldr	r2, [pc, #132]	; (80095ec <TIM_OC4_SetConfig+0xb8>)
 8009568:	4013      	ands	r3, r2
 800956a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	021b      	lsls	r3, r3, #8
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4313      	orrs	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	4a1d      	ldr	r2, [pc, #116]	; (80095f0 <TIM_OC4_SetConfig+0xbc>)
 800957c:	4013      	ands	r3, r2
 800957e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	031b      	lsls	r3, r3, #12
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	4313      	orrs	r3, r2
 800958a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a19      	ldr	r2, [pc, #100]	; (80095f4 <TIM_OC4_SetConfig+0xc0>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00b      	beq.n	80095ac <TIM_OC4_SetConfig+0x78>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a18      	ldr	r2, [pc, #96]	; (80095f8 <TIM_OC4_SetConfig+0xc4>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d007      	beq.n	80095ac <TIM_OC4_SetConfig+0x78>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a17      	ldr	r2, [pc, #92]	; (80095fc <TIM_OC4_SetConfig+0xc8>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d003      	beq.n	80095ac <TIM_OC4_SetConfig+0x78>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a16      	ldr	r2, [pc, #88]	; (8009600 <TIM_OC4_SetConfig+0xcc>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d109      	bne.n	80095c0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	4a15      	ldr	r2, [pc, #84]	; (8009604 <TIM_OC4_SetConfig+0xd0>)
 80095b0:	4013      	ands	r3, r2
 80095b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	019b      	lsls	r3, r3, #6
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	4313      	orrs	r3, r2
 80095be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	621a      	str	r2, [r3, #32]
}
 80095da:	46c0      	nop			; (mov r8, r8)
 80095dc:	46bd      	mov	sp, r7
 80095de:	b006      	add	sp, #24
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	46c0      	nop			; (mov r8, r8)
 80095e4:	ffffefff 	.word	0xffffefff
 80095e8:	feff8fff 	.word	0xfeff8fff
 80095ec:	fffffcff 	.word	0xfffffcff
 80095f0:	ffffdfff 	.word	0xffffdfff
 80095f4:	40012c00 	.word	0x40012c00
 80095f8:	40014000 	.word	0x40014000
 80095fc:	40014400 	.word	0x40014400
 8009600:	40014800 	.word	0x40014800
 8009604:	ffffbfff 	.word	0xffffbfff

08009608 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	4a25      	ldr	r2, [pc, #148]	; (80096ac <TIM_OC5_SetConfig+0xa4>)
 8009618:	401a      	ands	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800962e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4a1f      	ldr	r2, [pc, #124]	; (80096b0 <TIM_OC5_SetConfig+0xa8>)
 8009634:	4013      	ands	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	4313      	orrs	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	4a1b      	ldr	r2, [pc, #108]	; (80096b4 <TIM_OC5_SetConfig+0xac>)
 8009646:	4013      	ands	r3, r2
 8009648:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	041b      	lsls	r3, r3, #16
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	4313      	orrs	r3, r2
 8009654:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a17      	ldr	r2, [pc, #92]	; (80096b8 <TIM_OC5_SetConfig+0xb0>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d00b      	beq.n	8009676 <TIM_OC5_SetConfig+0x6e>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a16      	ldr	r2, [pc, #88]	; (80096bc <TIM_OC5_SetConfig+0xb4>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d007      	beq.n	8009676 <TIM_OC5_SetConfig+0x6e>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a15      	ldr	r2, [pc, #84]	; (80096c0 <TIM_OC5_SetConfig+0xb8>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d003      	beq.n	8009676 <TIM_OC5_SetConfig+0x6e>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a14      	ldr	r2, [pc, #80]	; (80096c4 <TIM_OC5_SetConfig+0xbc>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d109      	bne.n	800968a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	4a0c      	ldr	r2, [pc, #48]	; (80096ac <TIM_OC5_SetConfig+0xa4>)
 800967a:	4013      	ands	r3, r2
 800967c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	4313      	orrs	r3, r2
 8009688:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	621a      	str	r2, [r3, #32]
}
 80096a4:	46c0      	nop			; (mov r8, r8)
 80096a6:	46bd      	mov	sp, r7
 80096a8:	b006      	add	sp, #24
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	fffeffff 	.word	0xfffeffff
 80096b0:	fffeff8f 	.word	0xfffeff8f
 80096b4:	fffdffff 	.word	0xfffdffff
 80096b8:	40012c00 	.word	0x40012c00
 80096bc:	40014000 	.word	0x40014000
 80096c0:	40014400 	.word	0x40014400
 80096c4:	40014800 	.word	0x40014800

080096c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	4a26      	ldr	r2, [pc, #152]	; (8009770 <TIM_OC6_SetConfig+0xa8>)
 80096d8:	401a      	ands	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4a20      	ldr	r2, [pc, #128]	; (8009774 <TIM_OC6_SetConfig+0xac>)
 80096f4:	4013      	ands	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	4313      	orrs	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	4a1c      	ldr	r2, [pc, #112]	; (8009778 <TIM_OC6_SetConfig+0xb0>)
 8009708:	4013      	ands	r3, r2
 800970a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	051b      	lsls	r3, r3, #20
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	4313      	orrs	r3, r2
 8009716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a18      	ldr	r2, [pc, #96]	; (800977c <TIM_OC6_SetConfig+0xb4>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d00b      	beq.n	8009738 <TIM_OC6_SetConfig+0x70>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a17      	ldr	r2, [pc, #92]	; (8009780 <TIM_OC6_SetConfig+0xb8>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d007      	beq.n	8009738 <TIM_OC6_SetConfig+0x70>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a16      	ldr	r2, [pc, #88]	; (8009784 <TIM_OC6_SetConfig+0xbc>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d003      	beq.n	8009738 <TIM_OC6_SetConfig+0x70>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a15      	ldr	r2, [pc, #84]	; (8009788 <TIM_OC6_SetConfig+0xc0>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d109      	bne.n	800974c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	4a14      	ldr	r2, [pc, #80]	; (800978c <TIM_OC6_SetConfig+0xc4>)
 800973c:	4013      	ands	r3, r2
 800973e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	029b      	lsls	r3, r3, #10
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	4313      	orrs	r3, r2
 800974a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	621a      	str	r2, [r3, #32]
}
 8009766:	46c0      	nop			; (mov r8, r8)
 8009768:	46bd      	mov	sp, r7
 800976a:	b006      	add	sp, #24
 800976c:	bd80      	pop	{r7, pc}
 800976e:	46c0      	nop			; (mov r8, r8)
 8009770:	ffefffff 	.word	0xffefffff
 8009774:	feff8fff 	.word	0xfeff8fff
 8009778:	ffdfffff 	.word	0xffdfffff
 800977c:	40012c00 	.word	0x40012c00
 8009780:	40014000 	.word	0x40014000
 8009784:	40014400 	.word	0x40014400
 8009788:	40014800 	.word	0x40014800
 800978c:	fffbffff 	.word	0xfffbffff

08009790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	223c      	movs	r2, #60	; 0x3c
 800979e:	5c9b      	ldrb	r3, [r3, r2]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d101      	bne.n	80097a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097a4:	2302      	movs	r3, #2
 80097a6:	e05a      	b.n	800985e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	223c      	movs	r2, #60	; 0x3c
 80097ac:	2101      	movs	r1, #1
 80097ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	223d      	movs	r2, #61	; 0x3d
 80097b4:	2102      	movs	r1, #2
 80097b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a26      	ldr	r2, [pc, #152]	; (8009868 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d108      	bne.n	80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	4a25      	ldr	r2, [pc, #148]	; (800986c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80097d6:	4013      	ands	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2270      	movs	r2, #112	; 0x70
 80097e8:	4393      	bics	r3, r2
 80097ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a19      	ldr	r2, [pc, #100]	; (8009868 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d014      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	2380      	movs	r3, #128	; 0x80
 800980e:	05db      	lsls	r3, r3, #23
 8009810:	429a      	cmp	r2, r3
 8009812:	d00e      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a15      	ldr	r2, [pc, #84]	; (8009870 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d009      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a14      	ldr	r2, [pc, #80]	; (8009874 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d004      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a12      	ldr	r2, [pc, #72]	; (8009878 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d10c      	bne.n	800984c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	2280      	movs	r2, #128	; 0x80
 8009836:	4393      	bics	r3, r2
 8009838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	4313      	orrs	r3, r2
 8009842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	223d      	movs	r2, #61	; 0x3d
 8009850:	2101      	movs	r1, #1
 8009852:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	223c      	movs	r2, #60	; 0x3c
 8009858:	2100      	movs	r1, #0
 800985a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	0018      	movs	r0, r3
 8009860:	46bd      	mov	sp, r7
 8009862:	b004      	add	sp, #16
 8009864:	bd80      	pop	{r7, pc}
 8009866:	46c0      	nop			; (mov r8, r8)
 8009868:	40012c00 	.word	0x40012c00
 800986c:	ff0fffff 	.word	0xff0fffff
 8009870:	40000400 	.word	0x40000400
 8009874:	40000800 	.word	0x40000800
 8009878:	40014000 	.word	0x40014000

0800987c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	223c      	movs	r2, #60	; 0x3c
 800988e:	5c9b      	ldrb	r3, [r3, r2]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d101      	bne.n	8009898 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009894:	2302      	movs	r3, #2
 8009896:	e079      	b.n	800998c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	223c      	movs	r2, #60	; 0x3c
 800989c:	2101      	movs	r1, #1
 800989e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	22ff      	movs	r2, #255	; 0xff
 80098a4:	4393      	bics	r3, r2
 80098a6:	001a      	movs	r2, r3
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4a38      	ldr	r2, [pc, #224]	; (8009994 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80098b4:	401a      	ands	r2, r3
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	4a35      	ldr	r2, [pc, #212]	; (8009998 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80098c2:	401a      	ands	r2, r3
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4a33      	ldr	r2, [pc, #204]	; (800999c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80098d0:	401a      	ands	r2, r3
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	4a30      	ldr	r2, [pc, #192]	; (80099a0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80098de:	401a      	ands	r2, r3
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4a2e      	ldr	r2, [pc, #184]	; (80099a4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80098ec:	401a      	ands	r2, r3
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	4a2b      	ldr	r2, [pc, #172]	; (80099a8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80098fa:	401a      	ands	r2, r3
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009900:	4313      	orrs	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4a29      	ldr	r2, [pc, #164]	; (80099ac <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8009908:	401a      	ands	r2, r3
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	041b      	lsls	r3, r3, #16
 8009910:	4313      	orrs	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a25      	ldr	r2, [pc, #148]	; (80099b0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d106      	bne.n	800992c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	4a24      	ldr	r2, [pc, #144]	; (80099b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009922:	401a      	ands	r2, r3
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	4313      	orrs	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a1f      	ldr	r2, [pc, #124]	; (80099b0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d121      	bne.n	800997a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4a1f      	ldr	r2, [pc, #124]	; (80099b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800993a:	401a      	ands	r2, r3
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009940:	051b      	lsls	r3, r3, #20
 8009942:	4313      	orrs	r3, r2
 8009944:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4a1c      	ldr	r2, [pc, #112]	; (80099bc <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800994a:	401a      	ands	r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	4313      	orrs	r3, r2
 8009952:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4a1a      	ldr	r2, [pc, #104]	; (80099c0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8009958:	401a      	ands	r2, r3
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	4313      	orrs	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a12      	ldr	r2, [pc, #72]	; (80099b0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d106      	bne.n	800997a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4a15      	ldr	r2, [pc, #84]	; (80099c4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8009970:	401a      	ands	r2, r3
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	223c      	movs	r2, #60	; 0x3c
 8009986:	2100      	movs	r1, #0
 8009988:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	0018      	movs	r0, r3
 800998e:	46bd      	mov	sp, r7
 8009990:	b004      	add	sp, #16
 8009992:	bd80      	pop	{r7, pc}
 8009994:	fffffcff 	.word	0xfffffcff
 8009998:	fffffbff 	.word	0xfffffbff
 800999c:	fffff7ff 	.word	0xfffff7ff
 80099a0:	ffffefff 	.word	0xffffefff
 80099a4:	ffffdfff 	.word	0xffffdfff
 80099a8:	ffffbfff 	.word	0xffffbfff
 80099ac:	fff0ffff 	.word	0xfff0ffff
 80099b0:	40012c00 	.word	0x40012c00
 80099b4:	efffffff 	.word	0xefffffff
 80099b8:	ff0fffff 	.word	0xff0fffff
 80099bc:	feffffff 	.word	0xfeffffff
 80099c0:	fdffffff 	.word	0xfdffffff
 80099c4:	dfffffff 	.word	0xdfffffff

080099c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d101      	bne.n	80099da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e046      	b.n	8009a68 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2284      	movs	r2, #132	; 0x84
 80099de:	589b      	ldr	r3, [r3, r2]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d107      	bne.n	80099f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2280      	movs	r2, #128	; 0x80
 80099e8:	2100      	movs	r1, #0
 80099ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	0018      	movs	r0, r3
 80099f0:	f7f9 fd24 	bl	800343c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2284      	movs	r2, #132	; 0x84
 80099f8:	2124      	movs	r1, #36	; 0x24
 80099fa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2101      	movs	r1, #1
 8009a08:	438a      	bics	r2, r1
 8009a0a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	0018      	movs	r0, r3
 8009a10:	f000 fe74 	bl	800a6fc <UART_SetConfig>
 8009a14:	0003      	movs	r3, r0
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d101      	bne.n	8009a1e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e024      	b.n	8009a68 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d003      	beq.n	8009a2e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	0018      	movs	r0, r3
 8009a2a:	f001 f9e7 	bl	800adfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	490d      	ldr	r1, [pc, #52]	; (8009a70 <HAL_UART_Init+0xa8>)
 8009a3a:	400a      	ands	r2, r1
 8009a3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	212a      	movs	r1, #42	; 0x2a
 8009a4a:	438a      	bics	r2, r1
 8009a4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2101      	movs	r1, #1
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	0018      	movs	r0, r3
 8009a62:	f001 fa7f 	bl	800af64 <UART_CheckIdleState>
 8009a66:	0003      	movs	r3, r0
}
 8009a68:	0018      	movs	r0, r3
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	b002      	add	sp, #8
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	ffffb7ff 	.word	0xffffb7ff

08009a74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08a      	sub	sp, #40	; 0x28
 8009a78:	af02      	add	r7, sp, #8
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	603b      	str	r3, [r7, #0]
 8009a80:	1dbb      	adds	r3, r7, #6
 8009a82:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2284      	movs	r2, #132	; 0x84
 8009a88:	589b      	ldr	r3, [r3, r2]
 8009a8a:	2b20      	cmp	r3, #32
 8009a8c:	d000      	beq.n	8009a90 <HAL_UART_Transmit+0x1c>
 8009a8e:	e097      	b.n	8009bc0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_UART_Transmit+0x2a>
 8009a96:	1dbb      	adds	r3, r7, #6
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e08f      	b.n	8009bc2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	689a      	ldr	r2, [r3, #8]
 8009aa6:	2380      	movs	r3, #128	; 0x80
 8009aa8:	015b      	lsls	r3, r3, #5
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d109      	bne.n	8009ac2 <HAL_UART_Transmit+0x4e>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d105      	bne.n	8009ac2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	4013      	ands	r3, r2
 8009abc:	d001      	beq.n	8009ac2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e07f      	b.n	8009bc2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2280      	movs	r2, #128	; 0x80
 8009ac6:	5c9b      	ldrb	r3, [r3, r2]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d101      	bne.n	8009ad0 <HAL_UART_Transmit+0x5c>
 8009acc:	2302      	movs	r3, #2
 8009ace:	e078      	b.n	8009bc2 <HAL_UART_Transmit+0x14e>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2280      	movs	r2, #128	; 0x80
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	228c      	movs	r2, #140	; 0x8c
 8009adc:	2100      	movs	r1, #0
 8009ade:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2284      	movs	r2, #132	; 0x84
 8009ae4:	2121      	movs	r1, #33	; 0x21
 8009ae6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ae8:	f7fa fc48 	bl	800437c <HAL_GetTick>
 8009aec:	0003      	movs	r3, r0
 8009aee:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	1dba      	adds	r2, r7, #6
 8009af4:	2154      	movs	r1, #84	; 0x54
 8009af6:	8812      	ldrh	r2, [r2, #0]
 8009af8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	1dba      	adds	r2, r7, #6
 8009afe:	2156      	movs	r1, #86	; 0x56
 8009b00:	8812      	ldrh	r2, [r2, #0]
 8009b02:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	2380      	movs	r3, #128	; 0x80
 8009b0a:	015b      	lsls	r3, r3, #5
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d108      	bne.n	8009b22 <HAL_UART_Transmit+0xae>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d104      	bne.n	8009b22 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	61bb      	str	r3, [r7, #24]
 8009b20:	e003      	b.n	8009b2a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2280      	movs	r2, #128	; 0x80
 8009b2e:	2100      	movs	r1, #0
 8009b30:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8009b32:	e02c      	b.n	8009b8e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	0013      	movs	r3, r2
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2180      	movs	r1, #128	; 0x80
 8009b42:	f001 fa59 	bl	800aff8 <UART_WaitOnFlagUntilTimeout>
 8009b46:	1e03      	subs	r3, r0, #0
 8009b48:	d001      	beq.n	8009b4e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e039      	b.n	8009bc2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10b      	bne.n	8009b6c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	001a      	movs	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	05d2      	lsls	r2, r2, #23
 8009b60:	0dd2      	lsrs	r2, r2, #23
 8009b62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	3302      	adds	r3, #2
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	e007      	b.n	8009b7c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	781a      	ldrb	r2, [r3, #0]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2256      	movs	r2, #86	; 0x56
 8009b80:	5a9b      	ldrh	r3, [r3, r2]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	3b01      	subs	r3, #1
 8009b86:	b299      	uxth	r1, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2256      	movs	r2, #86	; 0x56
 8009b8c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2256      	movs	r2, #86	; 0x56
 8009b92:	5a9b      	ldrh	r3, [r3, r2]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1cc      	bne.n	8009b34 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	0013      	movs	r3, r2
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2140      	movs	r1, #64	; 0x40
 8009ba8:	f001 fa26 	bl	800aff8 <UART_WaitOnFlagUntilTimeout>
 8009bac:	1e03      	subs	r3, r0, #0
 8009bae:	d001      	beq.n	8009bb4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e006      	b.n	8009bc2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2284      	movs	r2, #132	; 0x84
 8009bb8:	2120      	movs	r1, #32
 8009bba:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	e000      	b.n	8009bc2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8009bc0:	2302      	movs	r3, #2
  }
}
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	b008      	add	sp, #32
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08c      	sub	sp, #48	; 0x30
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	1dbb      	adds	r3, r7, #6
 8009bd8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2284      	movs	r2, #132	; 0x84
 8009bde:	589b      	ldr	r3, [r3, r2]
 8009be0:	2b20      	cmp	r3, #32
 8009be2:	d000      	beq.n	8009be6 <HAL_UART_Transmit_IT+0x1a>
 8009be4:	e0a0      	b.n	8009d28 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d003      	beq.n	8009bf4 <HAL_UART_Transmit_IT+0x28>
 8009bec:	1dbb      	adds	r3, r7, #6
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d101      	bne.n	8009bf8 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e098      	b.n	8009d2a <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	689a      	ldr	r2, [r3, #8]
 8009bfc:	2380      	movs	r3, #128	; 0x80
 8009bfe:	015b      	lsls	r3, r3, #5
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d109      	bne.n	8009c18 <HAL_UART_Transmit_IT+0x4c>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d105      	bne.n	8009c18 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	4013      	ands	r3, r2
 8009c12:	d001      	beq.n	8009c18 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e088      	b.n	8009d2a <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2280      	movs	r2, #128	; 0x80
 8009c1c:	5c9b      	ldrb	r3, [r3, r2]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d101      	bne.n	8009c26 <HAL_UART_Transmit_IT+0x5a>
 8009c22:	2302      	movs	r3, #2
 8009c24:	e081      	b.n	8009d2a <HAL_UART_Transmit_IT+0x15e>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2280      	movs	r2, #128	; 0x80
 8009c2a:	2101      	movs	r1, #1
 8009c2c:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	1dba      	adds	r2, r7, #6
 8009c38:	2154      	movs	r1, #84	; 0x54
 8009c3a:	8812      	ldrh	r2, [r2, #0]
 8009c3c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	1dba      	adds	r2, r7, #6
 8009c42:	2156      	movs	r1, #86	; 0x56
 8009c44:	8812      	ldrh	r2, [r2, #0]
 8009c46:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	228c      	movs	r2, #140	; 0x8c
 8009c52:	2100      	movs	r1, #0
 8009c54:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2284      	movs	r2, #132	; 0x84
 8009c5a:	2121      	movs	r1, #33	; 0x21
 8009c5c:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009c62:	2380      	movs	r3, #128	; 0x80
 8009c64:	059b      	lsls	r3, r3, #22
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d12e      	bne.n	8009cc8 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	689a      	ldr	r2, [r3, #8]
 8009c6e:	2380      	movs	r3, #128	; 0x80
 8009c70:	015b      	lsls	r3, r3, #5
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d107      	bne.n	8009c86 <HAL_UART_Transmit_IT+0xba>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d103      	bne.n	8009c86 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	4a2c      	ldr	r2, [pc, #176]	; (8009d34 <HAL_UART_Transmit_IT+0x168>)
 8009c82:	675a      	str	r2, [r3, #116]	; 0x74
 8009c84:	e002      	b.n	8009c8c <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	4a2b      	ldr	r2, [pc, #172]	; (8009d38 <HAL_UART_Transmit_IT+0x16c>)
 8009c8a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2280      	movs	r2, #128	; 0x80
 8009c90:	2100      	movs	r1, #0
 8009c92:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c94:	f3ef 8310 	mrs	r3, PRIMASK
 8009c98:	61fb      	str	r3, [r7, #28]
  return(result);
 8009c9a:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ca2:	6a3b      	ldr	r3, [r7, #32]
 8009ca4:	f383 8810 	msr	PRIMASK, r3
}
 8009ca8:	46c0      	nop			; (mov r8, r8)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	689a      	ldr	r2, [r3, #8]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2180      	movs	r1, #128	; 0x80
 8009cb6:	0409      	lsls	r1, r1, #16
 8009cb8:	430a      	orrs	r2, r1
 8009cba:	609a      	str	r2, [r3, #8]
 8009cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	f383 8810 	msr	PRIMASK, r3
}
 8009cc6:	e02d      	b.n	8009d24 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	689a      	ldr	r2, [r3, #8]
 8009ccc:	2380      	movs	r3, #128	; 0x80
 8009cce:	015b      	lsls	r3, r3, #5
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d107      	bne.n	8009ce4 <HAL_UART_Transmit_IT+0x118>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d103      	bne.n	8009ce4 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4a17      	ldr	r2, [pc, #92]	; (8009d3c <HAL_UART_Transmit_IT+0x170>)
 8009ce0:	675a      	str	r2, [r3, #116]	; 0x74
 8009ce2:	e002      	b.n	8009cea <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4a16      	ldr	r2, [pc, #88]	; (8009d40 <HAL_UART_Transmit_IT+0x174>)
 8009ce8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2280      	movs	r2, #128	; 0x80
 8009cee:	2100      	movs	r1, #0
 8009cf0:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8009cf6:	613b      	str	r3, [r7, #16]
  return(result);
 8009cf8:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	f383 8810 	msr	PRIMASK, r3
}
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2180      	movs	r1, #128	; 0x80
 8009d14:	430a      	orrs	r2, r1
 8009d16:	601a      	str	r2, [r3, #0]
 8009d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	f383 8810 	msr	PRIMASK, r3
}
 8009d22:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	e000      	b.n	8009d2a <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8009d28:	2302      	movs	r3, #2
  }
}
 8009d2a:	0018      	movs	r0, r3
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	b00c      	add	sp, #48	; 0x30
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	46c0      	nop			; (mov r8, r8)
 8009d34:	0800b9a1 	.word	0x0800b9a1
 8009d38:	0800b8b5 	.word	0x0800b8b5
 8009d3c:	0800b7f5 	.word	0x0800b7f5
 8009d40:	0800b741 	.word	0x0800b741

08009d44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	1dbb      	adds	r3, r7, #6
 8009d50:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2288      	movs	r2, #136	; 0x88
 8009d56:	589b      	ldr	r3, [r3, r2]
 8009d58:	2b20      	cmp	r3, #32
 8009d5a:	d15a      	bne.n	8009e12 <HAL_UART_Receive_DMA+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <HAL_UART_Receive_DMA+0x26>
 8009d62:	1dbb      	adds	r3, r7, #6
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e052      	b.n	8009e14 <HAL_UART_Receive_DMA+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	2380      	movs	r3, #128	; 0x80
 8009d74:	015b      	lsls	r3, r3, #5
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d109      	bne.n	8009d8e <HAL_UART_Receive_DMA+0x4a>
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d105      	bne.n	8009d8e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2201      	movs	r2, #1
 8009d86:	4013      	ands	r3, r2
 8009d88:	d001      	beq.n	8009d8e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e042      	b.n	8009e14 <HAL_UART_Receive_DMA+0xd0>
      }
    }

    __HAL_LOCK(huart);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2280      	movs	r2, #128	; 0x80
 8009d92:	5c9b      	ldrb	r3, [r3, r2]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d101      	bne.n	8009d9c <HAL_UART_Receive_DMA+0x58>
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e03b      	b.n	8009e14 <HAL_UART_Receive_DMA+0xd0>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2280      	movs	r2, #128	; 0x80
 8009da0:	2101      	movs	r1, #1
 8009da2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a1b      	ldr	r2, [pc, #108]	; (8009e1c <HAL_UART_Receive_DMA+0xd8>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d025      	beq.n	8009e00 <HAL_UART_Receive_DMA+0xbc>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a19      	ldr	r2, [pc, #100]	; (8009e20 <HAL_UART_Receive_DMA+0xdc>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d020      	beq.n	8009e00 <HAL_UART_Receive_DMA+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	2380      	movs	r3, #128	; 0x80
 8009dc6:	041b      	lsls	r3, r3, #16
 8009dc8:	4013      	ands	r3, r2
 8009dca:	d019      	beq.n	8009e00 <HAL_UART_Receive_DMA+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8009dd0:	613b      	str	r3, [r7, #16]
  return(result);
 8009dd2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009dd4:	61fb      	str	r3, [r7, #28]
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f383 8810 	msr	PRIMASK, r3
}
 8009de0:	46c0      	nop			; (mov r8, r8)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2180      	movs	r1, #128	; 0x80
 8009dee:	04c9      	lsls	r1, r1, #19
 8009df0:	430a      	orrs	r2, r1
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	f383 8810 	msr	PRIMASK, r3
}
 8009dfe:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009e00:	1dbb      	adds	r3, r7, #6
 8009e02:	881a      	ldrh	r2, [r3, #0]
 8009e04:	68b9      	ldr	r1, [r7, #8]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	0018      	movs	r0, r3
 8009e0a:	f001 f9bd 	bl	800b188 <UART_Start_Receive_DMA>
 8009e0e:	0003      	movs	r3, r0
 8009e10:	e000      	b.n	8009e14 <HAL_UART_Receive_DMA+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8009e12:	2302      	movs	r3, #2
  }
}
 8009e14:	0018      	movs	r0, r3
 8009e16:	46bd      	mov	sp, r7
 8009e18:	b008      	add	sp, #32
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	40008000 	.word	0x40008000
 8009e20:	40008400 	.word	0x40008400

08009e24 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b098      	sub	sp, #96	; 0x60
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e30:	f3ef 8310 	mrs	r3, PRIMASK
 8009e34:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8009e38:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e40:	f383 8810 	msr	PRIMASK, r3
}
 8009e44:	46c0      	nop			; (mov r8, r8)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4987      	ldr	r1, [pc, #540]	; (800a070 <HAL_UART_Abort_IT+0x24c>)
 8009e52:	400a      	ands	r2, r1
 8009e54:	601a      	str	r2, [r3, #0]
 8009e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e58:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	f383 8810 	msr	PRIMASK, r3
}
 8009e60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e62:	f3ef 8310 	mrs	r3, PRIMASK
 8009e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8009e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e72:	f383 8810 	msr	PRIMASK, r3
}
 8009e76:	46c0      	nop			; (mov r8, r8)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689a      	ldr	r2, [r3, #8]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	497c      	ldr	r1, [pc, #496]	; (800a074 <HAL_UART_Abort_IT+0x250>)
 8009e84:	400a      	ands	r2, r1
 8009e86:	609a      	str	r2, [r3, #8]
 8009e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e8a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e8e:	f383 8810 	msr	PRIMASK, r3
}
 8009e92:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d118      	bne.n	8009ece <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8009ea0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009ea4:	653b      	str	r3, [r7, #80]	; 0x50
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eac:	f383 8810 	msr	PRIMASK, r3
}
 8009eb0:	46c0      	nop			; (mov r8, r8)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2110      	movs	r1, #16
 8009ebe:	438a      	bics	r2, r1
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec8:	f383 8810 	msr	PRIMASK, r3
}
 8009ecc:	46c0      	nop			; (mov r8, r8)
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00f      	beq.n	8009ef6 <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	2280      	movs	r2, #128	; 0x80
 8009ede:	4013      	ands	r3, r2
 8009ee0:	2b80      	cmp	r3, #128	; 0x80
 8009ee2:	d104      	bne.n	8009eee <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ee8:	4a63      	ldr	r2, [pc, #396]	; (800a078 <HAL_UART_Abort_IT+0x254>)
 8009eea:	639a      	str	r2, [r3, #56]	; 0x38
 8009eec:	e003      	b.n	8009ef6 <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00f      	beq.n	8009f1e <HAL_UART_Abort_IT+0xfa>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	2240      	movs	r2, #64	; 0x40
 8009f06:	4013      	ands	r3, r2
 8009f08:	2b40      	cmp	r3, #64	; 0x40
 8009f0a:	d104      	bne.n	8009f16 <HAL_UART_Abort_IT+0xf2>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f10:	4a5a      	ldr	r2, [pc, #360]	; (800a07c <HAL_UART_Abort_IT+0x258>)
 8009f12:	639a      	str	r2, [r3, #56]	; 0x38
 8009f14:	e003      	b.n	8009f1e <HAL_UART_Abort_IT+0xfa>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	2280      	movs	r2, #128	; 0x80
 8009f26:	4013      	ands	r3, r2
 8009f28:	2b80      	cmp	r3, #128	; 0x80
 8009f2a:	d12a      	bne.n	8009f82 <HAL_UART_Abort_IT+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009f30:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f32:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f36:	2301      	movs	r3, #1
 8009f38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	f383 8810 	msr	PRIMASK, r3
}
 8009f40:	46c0      	nop			; (mov r8, r8)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2180      	movs	r1, #128	; 0x80
 8009f4e:	438a      	bics	r2, r1
 8009f50:	609a      	str	r2, [r3, #8]
 8009f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	f383 8810 	msr	PRIMASK, r3
}
 8009f5c:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00d      	beq.n	8009f82 <HAL_UART_Abort_IT+0x15e>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f6a:	0018      	movs	r0, r3
 8009f6c:	f7fb f9b6 	bl	80052dc <HAL_DMA_Abort_IT>
 8009f70:	1e03      	subs	r3, r0, #0
 8009f72:	d004      	beq.n	8009f7e <HAL_UART_Abort_IT+0x15a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f78:	2200      	movs	r2, #0
 8009f7a:	639a      	str	r2, [r3, #56]	; 0x38
 8009f7c:	e001      	b.n	8009f82 <HAL_UART_Abort_IT+0x15e>
      }
      else
      {
        abortcplt = 0U;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	2240      	movs	r2, #64	; 0x40
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	2b40      	cmp	r3, #64	; 0x40
 8009f8e:	d12c      	bne.n	8009fea <HAL_UART_Abort_IT+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f90:	f3ef 8310 	mrs	r3, PRIMASK
 8009f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f96:	68fb      	ldr	r3, [r7, #12]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f383 8810 	msr	PRIMASK, r3
}
 8009fa4:	46c0      	nop			; (mov r8, r8)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2140      	movs	r1, #64	; 0x40
 8009fb2:	438a      	bics	r2, r1
 8009fb4:	609a      	str	r2, [r3, #8]
 8009fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f383 8810 	msr	PRIMASK, r3
}
 8009fc0:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00f      	beq.n	8009fea <HAL_UART_Abort_IT+0x1c6>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fce:	0018      	movs	r0, r3
 8009fd0:	f7fb f984 	bl	80052dc <HAL_DMA_Abort_IT>
 8009fd4:	1e03      	subs	r3, r0, #0
 8009fd6:	d006      	beq.n	8009fe6 <HAL_UART_Abort_IT+0x1c2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fdc:	2200      	movs	r2, #0
 8009fde:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fe4:	e001      	b.n	8009fea <HAL_UART_Abort_IT+0x1c6>
      }
      else
      {
        abortcplt = 0U;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8009fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d13a      	bne.n	800a066 <HAL_UART_Abort_IT+0x242>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2256      	movs	r2, #86	; 0x56
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	225e      	movs	r2, #94	; 0x5e
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	228c      	movs	r2, #140	; 0x8c
 800a010:	2100      	movs	r1, #0
 800a012:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	220f      	movs	r2, #15
 800a01a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a020:	2380      	movs	r3, #128	; 0x80
 800a022:	059b      	lsls	r3, r3, #22
 800a024:	429a      	cmp	r2, r3
 800a026:	d107      	bne.n	800a038 <HAL_UART_Abort_IT+0x214>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	699a      	ldr	r2, [r3, #24]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2110      	movs	r1, #16
 800a034:	430a      	orrs	r2, r1
 800a036:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	699a      	ldr	r2, [r3, #24]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2108      	movs	r1, #8
 800a044:	430a      	orrs	r2, r1
 800a046:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2284      	movs	r2, #132	; 0x84
 800a04c:	2120      	movs	r1, #32
 800a04e:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2288      	movs	r2, #136	; 0x88
 800a054:	2120      	movs	r1, #32
 800a056:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	0018      	movs	r0, r3
 800a062:	f000 fb37 	bl	800a6d4 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	0018      	movs	r0, r3
 800a06a:	46bd      	mov	sp, r7
 800a06c:	b018      	add	sp, #96	; 0x60
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	fffffe1f 	.word	0xfffffe1f
 800a074:	ef7ffffe 	.word	0xef7ffffe
 800a078:	0800b635 	.word	0x0800b635
 800a07c:	0800b6c1 	.word	0x0800b6c1

0800a080 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a080:	b5b0      	push	{r4, r5, r7, lr}
 800a082:	b0aa      	sub	sp, #168	; 0xa8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	22a4      	movs	r2, #164	; 0xa4
 800a090:	18b9      	adds	r1, r7, r2
 800a092:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	20a0      	movs	r0, #160	; 0xa0
 800a09c:	1839      	adds	r1, r7, r0
 800a09e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	249c      	movs	r4, #156	; 0x9c
 800a0a8:	1939      	adds	r1, r7, r4
 800a0aa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a0ac:	0011      	movs	r1, r2
 800a0ae:	18bb      	adds	r3, r7, r2
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4aa0      	ldr	r2, [pc, #640]	; (800a334 <HAL_UART_IRQHandler+0x2b4>)
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	2298      	movs	r2, #152	; 0x98
 800a0b8:	18bd      	adds	r5, r7, r2
 800a0ba:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800a0bc:	18bb      	adds	r3, r7, r2
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d11a      	bne.n	800a0fa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0c4:	187b      	adds	r3, r7, r1
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2220      	movs	r2, #32
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	d015      	beq.n	800a0fa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0ce:	183b      	adds	r3, r7, r0
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2220      	movs	r2, #32
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	d105      	bne.n	800a0e4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a0d8:	193b      	adds	r3, r7, r4
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	2380      	movs	r3, #128	; 0x80
 800a0de:	055b      	lsls	r3, r3, #21
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	d00a      	beq.n	800a0fa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d100      	bne.n	800a0ee <HAL_UART_IRQHandler+0x6e>
 800a0ec:	e2cf      	b.n	800a68e <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	0010      	movs	r0, r2
 800a0f6:	4798      	blx	r3
      }
      return;
 800a0f8:	e2c9      	b.n	800a68e <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a0fa:	2398      	movs	r3, #152	; 0x98
 800a0fc:	18fb      	adds	r3, r7, r3
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d100      	bne.n	800a106 <HAL_UART_IRQHandler+0x86>
 800a104:	e11e      	b.n	800a344 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a106:	239c      	movs	r3, #156	; 0x9c
 800a108:	18fb      	adds	r3, r7, r3
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a8a      	ldr	r2, [pc, #552]	; (800a338 <HAL_UART_IRQHandler+0x2b8>)
 800a10e:	4013      	ands	r3, r2
 800a110:	d106      	bne.n	800a120 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a112:	23a0      	movs	r3, #160	; 0xa0
 800a114:	18fb      	adds	r3, r7, r3
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a88      	ldr	r2, [pc, #544]	; (800a33c <HAL_UART_IRQHandler+0x2bc>)
 800a11a:	4013      	ands	r3, r2
 800a11c:	d100      	bne.n	800a120 <HAL_UART_IRQHandler+0xa0>
 800a11e:	e111      	b.n	800a344 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a120:	23a4      	movs	r3, #164	; 0xa4
 800a122:	18fb      	adds	r3, r7, r3
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2201      	movs	r2, #1
 800a128:	4013      	ands	r3, r2
 800a12a:	d012      	beq.n	800a152 <HAL_UART_IRQHandler+0xd2>
 800a12c:	23a0      	movs	r3, #160	; 0xa0
 800a12e:	18fb      	adds	r3, r7, r3
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	2380      	movs	r3, #128	; 0x80
 800a134:	005b      	lsls	r3, r3, #1
 800a136:	4013      	ands	r3, r2
 800a138:	d00b      	beq.n	800a152 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2201      	movs	r2, #1
 800a140:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	228c      	movs	r2, #140	; 0x8c
 800a146:	589b      	ldr	r3, [r3, r2]
 800a148:	2201      	movs	r2, #1
 800a14a:	431a      	orrs	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	218c      	movs	r1, #140	; 0x8c
 800a150:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a152:	23a4      	movs	r3, #164	; 0xa4
 800a154:	18fb      	adds	r3, r7, r3
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2202      	movs	r2, #2
 800a15a:	4013      	ands	r3, r2
 800a15c:	d011      	beq.n	800a182 <HAL_UART_IRQHandler+0x102>
 800a15e:	239c      	movs	r3, #156	; 0x9c
 800a160:	18fb      	adds	r3, r7, r3
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2201      	movs	r2, #1
 800a166:	4013      	ands	r3, r2
 800a168:	d00b      	beq.n	800a182 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2202      	movs	r2, #2
 800a170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	228c      	movs	r2, #140	; 0x8c
 800a176:	589b      	ldr	r3, [r3, r2]
 800a178:	2204      	movs	r2, #4
 800a17a:	431a      	orrs	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	218c      	movs	r1, #140	; 0x8c
 800a180:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a182:	23a4      	movs	r3, #164	; 0xa4
 800a184:	18fb      	adds	r3, r7, r3
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2204      	movs	r2, #4
 800a18a:	4013      	ands	r3, r2
 800a18c:	d011      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x132>
 800a18e:	239c      	movs	r3, #156	; 0x9c
 800a190:	18fb      	adds	r3, r7, r3
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2201      	movs	r2, #1
 800a196:	4013      	ands	r3, r2
 800a198:	d00b      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2204      	movs	r2, #4
 800a1a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	228c      	movs	r2, #140	; 0x8c
 800a1a6:	589b      	ldr	r3, [r3, r2]
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	218c      	movs	r1, #140	; 0x8c
 800a1b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a1b2:	23a4      	movs	r3, #164	; 0xa4
 800a1b4:	18fb      	adds	r3, r7, r3
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2208      	movs	r2, #8
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	d017      	beq.n	800a1ee <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1be:	23a0      	movs	r3, #160	; 0xa0
 800a1c0:	18fb      	adds	r3, r7, r3
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	d105      	bne.n	800a1d6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a1ca:	239c      	movs	r3, #156	; 0x9c
 800a1cc:	18fb      	adds	r3, r7, r3
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a59      	ldr	r2, [pc, #356]	; (800a338 <HAL_UART_IRQHandler+0x2b8>)
 800a1d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1d4:	d00b      	beq.n	800a1ee <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2208      	movs	r2, #8
 800a1dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	228c      	movs	r2, #140	; 0x8c
 800a1e2:	589b      	ldr	r3, [r3, r2]
 800a1e4:	2208      	movs	r2, #8
 800a1e6:	431a      	orrs	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	218c      	movs	r1, #140	; 0x8c
 800a1ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a1ee:	23a4      	movs	r3, #164	; 0xa4
 800a1f0:	18fb      	adds	r3, r7, r3
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	2380      	movs	r3, #128	; 0x80
 800a1f6:	011b      	lsls	r3, r3, #4
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	d013      	beq.n	800a224 <HAL_UART_IRQHandler+0x1a4>
 800a1fc:	23a0      	movs	r3, #160	; 0xa0
 800a1fe:	18fb      	adds	r3, r7, r3
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	2380      	movs	r3, #128	; 0x80
 800a204:	04db      	lsls	r3, r3, #19
 800a206:	4013      	ands	r3, r2
 800a208:	d00c      	beq.n	800a224 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2280      	movs	r2, #128	; 0x80
 800a210:	0112      	lsls	r2, r2, #4
 800a212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	228c      	movs	r2, #140	; 0x8c
 800a218:	589b      	ldr	r3, [r3, r2]
 800a21a:	2220      	movs	r2, #32
 800a21c:	431a      	orrs	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	218c      	movs	r1, #140	; 0x8c
 800a222:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	228c      	movs	r2, #140	; 0x8c
 800a228:	589b      	ldr	r3, [r3, r2]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d100      	bne.n	800a230 <HAL_UART_IRQHandler+0x1b0>
 800a22e:	e230      	b.n	800a692 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a230:	23a4      	movs	r3, #164	; 0xa4
 800a232:	18fb      	adds	r3, r7, r3
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2220      	movs	r2, #32
 800a238:	4013      	ands	r3, r2
 800a23a:	d015      	beq.n	800a268 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a23c:	23a0      	movs	r3, #160	; 0xa0
 800a23e:	18fb      	adds	r3, r7, r3
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2220      	movs	r2, #32
 800a244:	4013      	ands	r3, r2
 800a246:	d106      	bne.n	800a256 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a248:	239c      	movs	r3, #156	; 0x9c
 800a24a:	18fb      	adds	r3, r7, r3
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	2380      	movs	r3, #128	; 0x80
 800a250:	055b      	lsls	r3, r3, #21
 800a252:	4013      	ands	r3, r2
 800a254:	d008      	beq.n	800a268 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d004      	beq.n	800a268 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	0010      	movs	r0, r2
 800a266:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	228c      	movs	r2, #140	; 0x8c
 800a26c:	589b      	ldr	r3, [r3, r2]
 800a26e:	2194      	movs	r1, #148	; 0x94
 800a270:	187a      	adds	r2, r7, r1
 800a272:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	2240      	movs	r2, #64	; 0x40
 800a27c:	4013      	ands	r3, r2
 800a27e:	2b40      	cmp	r3, #64	; 0x40
 800a280:	d004      	beq.n	800a28c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a282:	187b      	adds	r3, r7, r1
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2228      	movs	r2, #40	; 0x28
 800a288:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a28a:	d047      	beq.n	800a31c <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	0018      	movs	r0, r3
 800a290:	f001 f85e 	bl	800b350 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	2240      	movs	r2, #64	; 0x40
 800a29c:	4013      	ands	r3, r2
 800a29e:	2b40      	cmp	r3, #64	; 0x40
 800a2a0:	d137      	bne.n	800a312 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a2a6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800a2a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2aa:	2090      	movs	r0, #144	; 0x90
 800a2ac:	183a      	adds	r2, r7, r0
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2b6:	f383 8810 	msr	PRIMASK, r3
}
 800a2ba:	46c0      	nop			; (mov r8, r8)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	689a      	ldr	r2, [r3, #8]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2140      	movs	r1, #64	; 0x40
 800a2c8:	438a      	bics	r2, r1
 800a2ca:	609a      	str	r2, [r3, #8]
 800a2cc:	183b      	adds	r3, r7, r0
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2d4:	f383 8810 	msr	PRIMASK, r3
}
 800a2d8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d012      	beq.n	800a308 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2e6:	4a16      	ldr	r2, [pc, #88]	; (800a340 <HAL_UART_IRQHandler+0x2c0>)
 800a2e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	f7fa fff4 	bl	80052dc <HAL_DMA_Abort_IT>
 800a2f4:	1e03      	subs	r3, r0, #0
 800a2f6:	d01a      	beq.n	800a32e <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a302:	0018      	movs	r0, r3
 800a304:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a306:	e012      	b.n	800a32e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	0018      	movs	r0, r3
 800a30c:	f000 f9da 	bl	800a6c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a310:	e00d      	b.n	800a32e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	0018      	movs	r0, r3
 800a316:	f000 f9d5 	bl	800a6c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a31a:	e008      	b.n	800a32e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	0018      	movs	r0, r3
 800a320:	f000 f9d0 	bl	800a6c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	228c      	movs	r2, #140	; 0x8c
 800a328:	2100      	movs	r1, #0
 800a32a:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a32c:	e1b1      	b.n	800a692 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a32e:	46c0      	nop			; (mov r8, r8)
    return;
 800a330:	e1af      	b.n	800a692 <HAL_UART_IRQHandler+0x612>
 800a332:	46c0      	nop			; (mov r8, r8)
 800a334:	0000080f 	.word	0x0000080f
 800a338:	10000001 	.word	0x10000001
 800a33c:	04000120 	.word	0x04000120
 800a340:	0800b607 	.word	0x0800b607

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d000      	beq.n	800a34e <HAL_UART_IRQHandler+0x2ce>
 800a34c:	e135      	b.n	800a5ba <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a34e:	23a4      	movs	r3, #164	; 0xa4
 800a350:	18fb      	adds	r3, r7, r3
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2210      	movs	r2, #16
 800a356:	4013      	ands	r3, r2
 800a358:	d100      	bne.n	800a35c <HAL_UART_IRQHandler+0x2dc>
 800a35a:	e12e      	b.n	800a5ba <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a35c:	23a0      	movs	r3, #160	; 0xa0
 800a35e:	18fb      	adds	r3, r7, r3
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2210      	movs	r2, #16
 800a364:	4013      	ands	r3, r2
 800a366:	d100      	bne.n	800a36a <HAL_UART_IRQHandler+0x2ea>
 800a368:	e127      	b.n	800a5ba <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2210      	movs	r2, #16
 800a370:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	2240      	movs	r2, #64	; 0x40
 800a37a:	4013      	ands	r3, r2
 800a37c:	2b40      	cmp	r3, #64	; 0x40
 800a37e:	d000      	beq.n	800a382 <HAL_UART_IRQHandler+0x302>
 800a380:	e09e      	b.n	800a4c0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	217e      	movs	r1, #126	; 0x7e
 800a38c:	187b      	adds	r3, r7, r1
 800a38e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a390:	187b      	adds	r3, r7, r1
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d100      	bne.n	800a39a <HAL_UART_IRQHandler+0x31a>
 800a398:	e17d      	b.n	800a696 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	225c      	movs	r2, #92	; 0x5c
 800a39e:	5a9b      	ldrh	r3, [r3, r2]
 800a3a0:	187a      	adds	r2, r7, r1
 800a3a2:	8812      	ldrh	r2, [r2, #0]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d300      	bcc.n	800a3aa <HAL_UART_IRQHandler+0x32a>
 800a3a8:	e175      	b.n	800a696 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	187a      	adds	r2, r7, r1
 800a3ae:	215e      	movs	r1, #94	; 0x5e
 800a3b0:	8812      	ldrh	r2, [r2, #0]
 800a3b2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2220      	movs	r2, #32
 800a3be:	4013      	ands	r3, r2
 800a3c0:	d16f      	bne.n	800a4a2 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800a3c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d2:	f383 8810 	msr	PRIMASK, r3
}
 800a3d6:	46c0      	nop			; (mov r8, r8)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	49b1      	ldr	r1, [pc, #708]	; (800a6a8 <HAL_UART_IRQHandler+0x628>)
 800a3e4:	400a      	ands	r2, r1
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	f383 8810 	msr	PRIMASK, r3
}
 800a3f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3fc:	677b      	str	r3, [r7, #116]	; 0x74
 800a3fe:	2301      	movs	r3, #1
 800a400:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a404:	f383 8810 	msr	PRIMASK, r3
}
 800a408:	46c0      	nop			; (mov r8, r8)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2101      	movs	r1, #1
 800a416:	438a      	bics	r2, r1
 800a418:	609a      	str	r2, [r3, #8]
 800a41a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a41c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a41e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a420:	f383 8810 	msr	PRIMASK, r3
}
 800a424:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a426:	f3ef 8310 	mrs	r3, PRIMASK
 800a42a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a42c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a42e:	673b      	str	r3, [r7, #112]	; 0x70
 800a430:	2301      	movs	r3, #1
 800a432:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a436:	f383 8810 	msr	PRIMASK, r3
}
 800a43a:	46c0      	nop			; (mov r8, r8)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689a      	ldr	r2, [r3, #8]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2140      	movs	r1, #64	; 0x40
 800a448:	438a      	bics	r2, r1
 800a44a:	609a      	str	r2, [r3, #8]
 800a44c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a44e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a452:	f383 8810 	msr	PRIMASK, r3
}
 800a456:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2288      	movs	r2, #136	; 0x88
 800a45c:	2120      	movs	r1, #32
 800a45e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a466:	f3ef 8310 	mrs	r3, PRIMASK
 800a46a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a46c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a46e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a470:	2301      	movs	r3, #1
 800a472:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a476:	f383 8810 	msr	PRIMASK, r3
}
 800a47a:	46c0      	nop			; (mov r8, r8)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2110      	movs	r1, #16
 800a488:	438a      	bics	r2, r1
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a48e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a492:	f383 8810 	msr	PRIMASK, r3
}
 800a496:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a49c:	0018      	movs	r0, r3
 800a49e:	f7fa febd 	bl	800521c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	225c      	movs	r2, #92	; 0x5c
 800a4a6:	5a9a      	ldrh	r2, [r3, r2]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	215e      	movs	r1, #94	; 0x5e
 800a4ac:	5a5b      	ldrh	r3, [r3, r1]
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	0011      	movs	r1, r2
 800a4b8:	0018      	movs	r0, r3
 800a4ba:	f000 f913 	bl	800a6e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a4be:	e0ea      	b.n	800a696 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	225c      	movs	r2, #92	; 0x5c
 800a4c4:	5a99      	ldrh	r1, [r3, r2]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	225e      	movs	r2, #94	; 0x5e
 800a4ca:	5a9b      	ldrh	r3, [r3, r2]
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	208e      	movs	r0, #142	; 0x8e
 800a4d0:	183b      	adds	r3, r7, r0
 800a4d2:	1a8a      	subs	r2, r1, r2
 800a4d4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	225e      	movs	r2, #94	; 0x5e
 800a4da:	5a9b      	ldrh	r3, [r3, r2]
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d100      	bne.n	800a4e4 <HAL_UART_IRQHandler+0x464>
 800a4e2:	e0da      	b.n	800a69a <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 800a4e4:	183b      	adds	r3, r7, r0
 800a4e6:	881b      	ldrh	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d100      	bne.n	800a4ee <HAL_UART_IRQHandler+0x46e>
 800a4ec:	e0d5      	b.n	800a69a <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4ee:	f3ef 8310 	mrs	r3, PRIMASK
 800a4f2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4f6:	2488      	movs	r4, #136	; 0x88
 800a4f8:	193a      	adds	r2, r7, r4
 800a4fa:	6013      	str	r3, [r2, #0]
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	f383 8810 	msr	PRIMASK, r3
}
 800a506:	46c0      	nop			; (mov r8, r8)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4966      	ldr	r1, [pc, #408]	; (800a6ac <HAL_UART_IRQHandler+0x62c>)
 800a514:	400a      	ands	r2, r1
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	193b      	adds	r3, r7, r4
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f383 8810 	msr	PRIMASK, r3
}
 800a524:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a526:	f3ef 8310 	mrs	r3, PRIMASK
 800a52a:	61bb      	str	r3, [r7, #24]
  return(result);
 800a52c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a52e:	2484      	movs	r4, #132	; 0x84
 800a530:	193a      	adds	r2, r7, r4
 800a532:	6013      	str	r3, [r2, #0]
 800a534:	2301      	movs	r3, #1
 800a536:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	f383 8810 	msr	PRIMASK, r3
}
 800a53e:	46c0      	nop			; (mov r8, r8)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689a      	ldr	r2, [r3, #8]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4959      	ldr	r1, [pc, #356]	; (800a6b0 <HAL_UART_IRQHandler+0x630>)
 800a54c:	400a      	ands	r2, r1
 800a54e:	609a      	str	r2, [r3, #8]
 800a550:	193b      	adds	r3, r7, r4
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	f383 8810 	msr	PRIMASK, r3
}
 800a55c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2288      	movs	r2, #136	; 0x88
 800a562:	2120      	movs	r1, #32
 800a564:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a572:	f3ef 8310 	mrs	r3, PRIMASK
 800a576:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a57a:	2480      	movs	r4, #128	; 0x80
 800a57c:	193a      	adds	r2, r7, r4
 800a57e:	6013      	str	r3, [r2, #0]
 800a580:	2301      	movs	r3, #1
 800a582:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	f383 8810 	msr	PRIMASK, r3
}
 800a58a:	46c0      	nop			; (mov r8, r8)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2110      	movs	r1, #16
 800a598:	438a      	bics	r2, r1
 800a59a:	601a      	str	r2, [r3, #0]
 800a59c:	193b      	adds	r3, r7, r4
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	f383 8810 	msr	PRIMASK, r3
}
 800a5a8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5aa:	183b      	adds	r3, r7, r0
 800a5ac:	881a      	ldrh	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	0011      	movs	r1, r2
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	f000 f896 	bl	800a6e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a5b8:	e06f      	b.n	800a69a <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a5ba:	23a4      	movs	r3, #164	; 0xa4
 800a5bc:	18fb      	adds	r3, r7, r3
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	2380      	movs	r3, #128	; 0x80
 800a5c2:	035b      	lsls	r3, r3, #13
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	d010      	beq.n	800a5ea <HAL_UART_IRQHandler+0x56a>
 800a5c8:	239c      	movs	r3, #156	; 0x9c
 800a5ca:	18fb      	adds	r3, r7, r3
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	2380      	movs	r3, #128	; 0x80
 800a5d0:	03db      	lsls	r3, r3, #15
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	d009      	beq.n	800a5ea <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2280      	movs	r2, #128	; 0x80
 800a5dc:	0352      	lsls	r2, r2, #13
 800a5de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	f001 fa82 	bl	800baec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5e8:	e05a      	b.n	800a6a0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a5ea:	23a4      	movs	r3, #164	; 0xa4
 800a5ec:	18fb      	adds	r3, r7, r3
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2280      	movs	r2, #128	; 0x80
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	d016      	beq.n	800a624 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a5f6:	23a0      	movs	r3, #160	; 0xa0
 800a5f8:	18fb      	adds	r3, r7, r3
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2280      	movs	r2, #128	; 0x80
 800a5fe:	4013      	ands	r3, r2
 800a600:	d106      	bne.n	800a610 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a602:	239c      	movs	r3, #156	; 0x9c
 800a604:	18fb      	adds	r3, r7, r3
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	2380      	movs	r3, #128	; 0x80
 800a60a:	041b      	lsls	r3, r3, #16
 800a60c:	4013      	ands	r3, r2
 800a60e:	d009      	beq.n	800a624 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a614:	2b00      	cmp	r3, #0
 800a616:	d042      	beq.n	800a69e <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	0010      	movs	r0, r2
 800a620:	4798      	blx	r3
    }
    return;
 800a622:	e03c      	b.n	800a69e <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a624:	23a4      	movs	r3, #164	; 0xa4
 800a626:	18fb      	adds	r3, r7, r3
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2240      	movs	r2, #64	; 0x40
 800a62c:	4013      	ands	r3, r2
 800a62e:	d00a      	beq.n	800a646 <HAL_UART_IRQHandler+0x5c6>
 800a630:	23a0      	movs	r3, #160	; 0xa0
 800a632:	18fb      	adds	r3, r7, r3
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2240      	movs	r2, #64	; 0x40
 800a638:	4013      	ands	r3, r2
 800a63a:	d004      	beq.n	800a646 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	0018      	movs	r0, r3
 800a640:	f001 fa28 	bl	800ba94 <UART_EndTransmit_IT>
    return;
 800a644:	e02c      	b.n	800a6a0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a646:	23a4      	movs	r3, #164	; 0xa4
 800a648:	18fb      	adds	r3, r7, r3
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	2380      	movs	r3, #128	; 0x80
 800a64e:	041b      	lsls	r3, r3, #16
 800a650:	4013      	ands	r3, r2
 800a652:	d00b      	beq.n	800a66c <HAL_UART_IRQHandler+0x5ec>
 800a654:	23a0      	movs	r3, #160	; 0xa0
 800a656:	18fb      	adds	r3, r7, r3
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	2380      	movs	r3, #128	; 0x80
 800a65c:	05db      	lsls	r3, r3, #23
 800a65e:	4013      	ands	r3, r2
 800a660:	d004      	beq.n	800a66c <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	0018      	movs	r0, r3
 800a666:	f001 fa51 	bl	800bb0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a66a:	e019      	b.n	800a6a0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a66c:	23a4      	movs	r3, #164	; 0xa4
 800a66e:	18fb      	adds	r3, r7, r3
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	2380      	movs	r3, #128	; 0x80
 800a674:	045b      	lsls	r3, r3, #17
 800a676:	4013      	ands	r3, r2
 800a678:	d012      	beq.n	800a6a0 <HAL_UART_IRQHandler+0x620>
 800a67a:	23a0      	movs	r3, #160	; 0xa0
 800a67c:	18fb      	adds	r3, r7, r3
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	da0d      	bge.n	800a6a0 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	0018      	movs	r0, r3
 800a688:	f001 fa38 	bl	800bafc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a68c:	e008      	b.n	800a6a0 <HAL_UART_IRQHandler+0x620>
      return;
 800a68e:	46c0      	nop			; (mov r8, r8)
 800a690:	e006      	b.n	800a6a0 <HAL_UART_IRQHandler+0x620>
    return;
 800a692:	46c0      	nop			; (mov r8, r8)
 800a694:	e004      	b.n	800a6a0 <HAL_UART_IRQHandler+0x620>
      return;
 800a696:	46c0      	nop			; (mov r8, r8)
 800a698:	e002      	b.n	800a6a0 <HAL_UART_IRQHandler+0x620>
      return;
 800a69a:	46c0      	nop			; (mov r8, r8)
 800a69c:	e000      	b.n	800a6a0 <HAL_UART_IRQHandler+0x620>
    return;
 800a69e:	46c0      	nop			; (mov r8, r8)
  }
}
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	b02a      	add	sp, #168	; 0xa8
 800a6a4:	bdb0      	pop	{r4, r5, r7, pc}
 800a6a6:	46c0      	nop			; (mov r8, r8)
 800a6a8:	fffffeff 	.word	0xfffffeff
 800a6ac:	fffffedf 	.word	0xfffffedf
 800a6b0:	effffffe 	.word	0xeffffffe

0800a6b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a6bc:	46c0      	nop			; (mov r8, r8)
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	b002      	add	sp, #8
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a6cc:	46c0      	nop			; (mov r8, r8)
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	b002      	add	sp, #8
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a6dc:	46c0      	nop			; (mov r8, r8)
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	b002      	add	sp, #8
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	000a      	movs	r2, r1
 800a6ee:	1cbb      	adds	r3, r7, #2
 800a6f0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a6f2:	46c0      	nop			; (mov r8, r8)
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	b002      	add	sp, #8
 800a6f8:	bd80      	pop	{r7, pc}
	...

0800a6fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6fc:	b5b0      	push	{r4, r5, r7, lr}
 800a6fe:	b090      	sub	sp, #64	; 0x40
 800a700:	af00      	add	r7, sp, #0
 800a702:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a704:	231a      	movs	r3, #26
 800a706:	2220      	movs	r2, #32
 800a708:	4694      	mov	ip, r2
 800a70a:	44bc      	add	ip, r7
 800a70c:	4463      	add	r3, ip
 800a70e:	2200      	movs	r2, #0
 800a710:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a714:	689a      	ldr	r2, [r3, #8]
 800a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	431a      	orrs	r2, r3
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71e:	695b      	ldr	r3, [r3, #20]
 800a720:	431a      	orrs	r2, r3
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	4313      	orrs	r3, r2
 800a728:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4ac1      	ldr	r2, [pc, #772]	; (800aa38 <UART_SetConfig+0x33c>)
 800a732:	4013      	ands	r3, r2
 800a734:	0019      	movs	r1, r3
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a73c:	430b      	orrs	r3, r1
 800a73e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	4abd      	ldr	r2, [pc, #756]	; (800aa3c <UART_SetConfig+0x340>)
 800a748:	4013      	ands	r3, r2
 800a74a:	0018      	movs	r0, r3
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74e:	68d9      	ldr	r1, [r3, #12]
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	0003      	movs	r3, r0
 800a756:	430b      	orrs	r3, r1
 800a758:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4ab6      	ldr	r2, [pc, #728]	; (800aa40 <UART_SetConfig+0x344>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d009      	beq.n	800a77e <UART_SetConfig+0x82>
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4ab5      	ldr	r2, [pc, #724]	; (800aa44 <UART_SetConfig+0x348>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d004      	beq.n	800a77e <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	6a1b      	ldr	r3, [r3, #32]
 800a778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a77a:	4313      	orrs	r3, r2
 800a77c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	4ab0      	ldr	r2, [pc, #704]	; (800aa48 <UART_SetConfig+0x34c>)
 800a786:	4013      	ands	r3, r2
 800a788:	0019      	movs	r1, r3
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a790:	430b      	orrs	r3, r1
 800a792:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79a:	220f      	movs	r2, #15
 800a79c:	4393      	bics	r3, r2
 800a79e:	0018      	movs	r0, r3
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	0003      	movs	r3, r0
 800a7aa:	430b      	orrs	r3, r1
 800a7ac:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4aa6      	ldr	r2, [pc, #664]	; (800aa4c <UART_SetConfig+0x350>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d136      	bne.n	800a826 <UART_SetConfig+0x12a>
 800a7b8:	4ba5      	ldr	r3, [pc, #660]	; (800aa50 <UART_SetConfig+0x354>)
 800a7ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7bc:	2203      	movs	r2, #3
 800a7be:	4013      	ands	r3, r2
 800a7c0:	2b03      	cmp	r3, #3
 800a7c2:	d020      	beq.n	800a806 <UART_SetConfig+0x10a>
 800a7c4:	d827      	bhi.n	800a816 <UART_SetConfig+0x11a>
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d00d      	beq.n	800a7e6 <UART_SetConfig+0xea>
 800a7ca:	d824      	bhi.n	800a816 <UART_SetConfig+0x11a>
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d002      	beq.n	800a7d6 <UART_SetConfig+0xda>
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d010      	beq.n	800a7f6 <UART_SetConfig+0xfa>
 800a7d4:	e01f      	b.n	800a816 <UART_SetConfig+0x11a>
 800a7d6:	231b      	movs	r3, #27
 800a7d8:	2220      	movs	r2, #32
 800a7da:	4694      	mov	ip, r2
 800a7dc:	44bc      	add	ip, r7
 800a7de:	4463      	add	r3, ip
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	701a      	strb	r2, [r3, #0]
 800a7e4:	e16f      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a7e6:	231b      	movs	r3, #27
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	4694      	mov	ip, r2
 800a7ec:	44bc      	add	ip, r7
 800a7ee:	4463      	add	r3, ip
 800a7f0:	2202      	movs	r2, #2
 800a7f2:	701a      	strb	r2, [r3, #0]
 800a7f4:	e167      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a7f6:	231b      	movs	r3, #27
 800a7f8:	2220      	movs	r2, #32
 800a7fa:	4694      	mov	ip, r2
 800a7fc:	44bc      	add	ip, r7
 800a7fe:	4463      	add	r3, ip
 800a800:	2204      	movs	r2, #4
 800a802:	701a      	strb	r2, [r3, #0]
 800a804:	e15f      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a806:	231b      	movs	r3, #27
 800a808:	2220      	movs	r2, #32
 800a80a:	4694      	mov	ip, r2
 800a80c:	44bc      	add	ip, r7
 800a80e:	4463      	add	r3, ip
 800a810:	2208      	movs	r2, #8
 800a812:	701a      	strb	r2, [r3, #0]
 800a814:	e157      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a816:	231b      	movs	r3, #27
 800a818:	2220      	movs	r2, #32
 800a81a:	4694      	mov	ip, r2
 800a81c:	44bc      	add	ip, r7
 800a81e:	4463      	add	r3, ip
 800a820:	2210      	movs	r2, #16
 800a822:	701a      	strb	r2, [r3, #0]
 800a824:	e14f      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a8a      	ldr	r2, [pc, #552]	; (800aa54 <UART_SetConfig+0x358>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d136      	bne.n	800a89e <UART_SetConfig+0x1a2>
 800a830:	4b87      	ldr	r3, [pc, #540]	; (800aa50 <UART_SetConfig+0x354>)
 800a832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a834:	220c      	movs	r2, #12
 800a836:	4013      	ands	r3, r2
 800a838:	2b0c      	cmp	r3, #12
 800a83a:	d020      	beq.n	800a87e <UART_SetConfig+0x182>
 800a83c:	d827      	bhi.n	800a88e <UART_SetConfig+0x192>
 800a83e:	2b08      	cmp	r3, #8
 800a840:	d00d      	beq.n	800a85e <UART_SetConfig+0x162>
 800a842:	d824      	bhi.n	800a88e <UART_SetConfig+0x192>
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <UART_SetConfig+0x152>
 800a848:	2b04      	cmp	r3, #4
 800a84a:	d010      	beq.n	800a86e <UART_SetConfig+0x172>
 800a84c:	e01f      	b.n	800a88e <UART_SetConfig+0x192>
 800a84e:	231b      	movs	r3, #27
 800a850:	2220      	movs	r2, #32
 800a852:	4694      	mov	ip, r2
 800a854:	44bc      	add	ip, r7
 800a856:	4463      	add	r3, ip
 800a858:	2200      	movs	r2, #0
 800a85a:	701a      	strb	r2, [r3, #0]
 800a85c:	e133      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a85e:	231b      	movs	r3, #27
 800a860:	2220      	movs	r2, #32
 800a862:	4694      	mov	ip, r2
 800a864:	44bc      	add	ip, r7
 800a866:	4463      	add	r3, ip
 800a868:	2202      	movs	r2, #2
 800a86a:	701a      	strb	r2, [r3, #0]
 800a86c:	e12b      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a86e:	231b      	movs	r3, #27
 800a870:	2220      	movs	r2, #32
 800a872:	4694      	mov	ip, r2
 800a874:	44bc      	add	ip, r7
 800a876:	4463      	add	r3, ip
 800a878:	2204      	movs	r2, #4
 800a87a:	701a      	strb	r2, [r3, #0]
 800a87c:	e123      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a87e:	231b      	movs	r3, #27
 800a880:	2220      	movs	r2, #32
 800a882:	4694      	mov	ip, r2
 800a884:	44bc      	add	ip, r7
 800a886:	4463      	add	r3, ip
 800a888:	2208      	movs	r2, #8
 800a88a:	701a      	strb	r2, [r3, #0]
 800a88c:	e11b      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a88e:	231b      	movs	r3, #27
 800a890:	2220      	movs	r2, #32
 800a892:	4694      	mov	ip, r2
 800a894:	44bc      	add	ip, r7
 800a896:	4463      	add	r3, ip
 800a898:	2210      	movs	r2, #16
 800a89a:	701a      	strb	r2, [r3, #0]
 800a89c:	e113      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a6d      	ldr	r2, [pc, #436]	; (800aa58 <UART_SetConfig+0x35c>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d136      	bne.n	800a916 <UART_SetConfig+0x21a>
 800a8a8:	4b69      	ldr	r3, [pc, #420]	; (800aa50 <UART_SetConfig+0x354>)
 800a8aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ac:	2230      	movs	r2, #48	; 0x30
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	2b30      	cmp	r3, #48	; 0x30
 800a8b2:	d020      	beq.n	800a8f6 <UART_SetConfig+0x1fa>
 800a8b4:	d827      	bhi.n	800a906 <UART_SetConfig+0x20a>
 800a8b6:	2b20      	cmp	r3, #32
 800a8b8:	d00d      	beq.n	800a8d6 <UART_SetConfig+0x1da>
 800a8ba:	d824      	bhi.n	800a906 <UART_SetConfig+0x20a>
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <UART_SetConfig+0x1ca>
 800a8c0:	2b10      	cmp	r3, #16
 800a8c2:	d010      	beq.n	800a8e6 <UART_SetConfig+0x1ea>
 800a8c4:	e01f      	b.n	800a906 <UART_SetConfig+0x20a>
 800a8c6:	231b      	movs	r3, #27
 800a8c8:	2220      	movs	r2, #32
 800a8ca:	4694      	mov	ip, r2
 800a8cc:	44bc      	add	ip, r7
 800a8ce:	4463      	add	r3, ip
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	701a      	strb	r2, [r3, #0]
 800a8d4:	e0f7      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a8d6:	231b      	movs	r3, #27
 800a8d8:	2220      	movs	r2, #32
 800a8da:	4694      	mov	ip, r2
 800a8dc:	44bc      	add	ip, r7
 800a8de:	4463      	add	r3, ip
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	701a      	strb	r2, [r3, #0]
 800a8e4:	e0ef      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a8e6:	231b      	movs	r3, #27
 800a8e8:	2220      	movs	r2, #32
 800a8ea:	4694      	mov	ip, r2
 800a8ec:	44bc      	add	ip, r7
 800a8ee:	4463      	add	r3, ip
 800a8f0:	2204      	movs	r2, #4
 800a8f2:	701a      	strb	r2, [r3, #0]
 800a8f4:	e0e7      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a8f6:	231b      	movs	r3, #27
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	4694      	mov	ip, r2
 800a8fc:	44bc      	add	ip, r7
 800a8fe:	4463      	add	r3, ip
 800a900:	2208      	movs	r2, #8
 800a902:	701a      	strb	r2, [r3, #0]
 800a904:	e0df      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a906:	231b      	movs	r3, #27
 800a908:	2220      	movs	r2, #32
 800a90a:	4694      	mov	ip, r2
 800a90c:	44bc      	add	ip, r7
 800a90e:	4463      	add	r3, ip
 800a910:	2210      	movs	r2, #16
 800a912:	701a      	strb	r2, [r3, #0]
 800a914:	e0d7      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a50      	ldr	r2, [pc, #320]	; (800aa5c <UART_SetConfig+0x360>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d107      	bne.n	800a930 <UART_SetConfig+0x234>
 800a920:	231b      	movs	r3, #27
 800a922:	2220      	movs	r2, #32
 800a924:	4694      	mov	ip, r2
 800a926:	44bc      	add	ip, r7
 800a928:	4463      	add	r3, ip
 800a92a:	2200      	movs	r2, #0
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	e0ca      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a4a      	ldr	r2, [pc, #296]	; (800aa60 <UART_SetConfig+0x364>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d107      	bne.n	800a94a <UART_SetConfig+0x24e>
 800a93a:	231b      	movs	r3, #27
 800a93c:	2220      	movs	r2, #32
 800a93e:	4694      	mov	ip, r2
 800a940:	44bc      	add	ip, r7
 800a942:	4463      	add	r3, ip
 800a944:	2200      	movs	r2, #0
 800a946:	701a      	strb	r2, [r3, #0]
 800a948:	e0bd      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a45      	ldr	r2, [pc, #276]	; (800aa64 <UART_SetConfig+0x368>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d107      	bne.n	800a964 <UART_SetConfig+0x268>
 800a954:	231b      	movs	r3, #27
 800a956:	2220      	movs	r2, #32
 800a958:	4694      	mov	ip, r2
 800a95a:	44bc      	add	ip, r7
 800a95c:	4463      	add	r3, ip
 800a95e:	2200      	movs	r2, #0
 800a960:	701a      	strb	r2, [r3, #0]
 800a962:	e0b0      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a35      	ldr	r2, [pc, #212]	; (800aa40 <UART_SetConfig+0x344>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d143      	bne.n	800a9f6 <UART_SetConfig+0x2fa>
 800a96e:	4b38      	ldr	r3, [pc, #224]	; (800aa50 <UART_SetConfig+0x354>)
 800a970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a972:	23c0      	movs	r3, #192	; 0xc0
 800a974:	011b      	lsls	r3, r3, #4
 800a976:	4013      	ands	r3, r2
 800a978:	22c0      	movs	r2, #192	; 0xc0
 800a97a:	0112      	lsls	r2, r2, #4
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d02a      	beq.n	800a9d6 <UART_SetConfig+0x2da>
 800a980:	22c0      	movs	r2, #192	; 0xc0
 800a982:	0112      	lsls	r2, r2, #4
 800a984:	4293      	cmp	r3, r2
 800a986:	d82e      	bhi.n	800a9e6 <UART_SetConfig+0x2ea>
 800a988:	2280      	movs	r2, #128	; 0x80
 800a98a:	0112      	lsls	r2, r2, #4
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d012      	beq.n	800a9b6 <UART_SetConfig+0x2ba>
 800a990:	2280      	movs	r2, #128	; 0x80
 800a992:	0112      	lsls	r2, r2, #4
 800a994:	4293      	cmp	r3, r2
 800a996:	d826      	bhi.n	800a9e6 <UART_SetConfig+0x2ea>
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d004      	beq.n	800a9a6 <UART_SetConfig+0x2aa>
 800a99c:	2280      	movs	r2, #128	; 0x80
 800a99e:	00d2      	lsls	r2, r2, #3
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d010      	beq.n	800a9c6 <UART_SetConfig+0x2ca>
 800a9a4:	e01f      	b.n	800a9e6 <UART_SetConfig+0x2ea>
 800a9a6:	231b      	movs	r3, #27
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	4694      	mov	ip, r2
 800a9ac:	44bc      	add	ip, r7
 800a9ae:	4463      	add	r3, ip
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	701a      	strb	r2, [r3, #0]
 800a9b4:	e087      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a9b6:	231b      	movs	r3, #27
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	4694      	mov	ip, r2
 800a9bc:	44bc      	add	ip, r7
 800a9be:	4463      	add	r3, ip
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	701a      	strb	r2, [r3, #0]
 800a9c4:	e07f      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a9c6:	231b      	movs	r3, #27
 800a9c8:	2220      	movs	r2, #32
 800a9ca:	4694      	mov	ip, r2
 800a9cc:	44bc      	add	ip, r7
 800a9ce:	4463      	add	r3, ip
 800a9d0:	2204      	movs	r2, #4
 800a9d2:	701a      	strb	r2, [r3, #0]
 800a9d4:	e077      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a9d6:	231b      	movs	r3, #27
 800a9d8:	2220      	movs	r2, #32
 800a9da:	4694      	mov	ip, r2
 800a9dc:	44bc      	add	ip, r7
 800a9de:	4463      	add	r3, ip
 800a9e0:	2208      	movs	r2, #8
 800a9e2:	701a      	strb	r2, [r3, #0]
 800a9e4:	e06f      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a9e6:	231b      	movs	r3, #27
 800a9e8:	2220      	movs	r2, #32
 800a9ea:	4694      	mov	ip, r2
 800a9ec:	44bc      	add	ip, r7
 800a9ee:	4463      	add	r3, ip
 800a9f0:	2210      	movs	r2, #16
 800a9f2:	701a      	strb	r2, [r3, #0]
 800a9f4:	e067      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a12      	ldr	r2, [pc, #72]	; (800aa44 <UART_SetConfig+0x348>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d15b      	bne.n	800aab8 <UART_SetConfig+0x3bc>
 800aa00:	4b13      	ldr	r3, [pc, #76]	; (800aa50 <UART_SetConfig+0x354>)
 800aa02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa04:	23c0      	movs	r3, #192	; 0xc0
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	4013      	ands	r3, r2
 800aa0a:	22c0      	movs	r2, #192	; 0xc0
 800aa0c:	0092      	lsls	r2, r2, #2
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d042      	beq.n	800aa98 <UART_SetConfig+0x39c>
 800aa12:	22c0      	movs	r2, #192	; 0xc0
 800aa14:	0092      	lsls	r2, r2, #2
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d846      	bhi.n	800aaa8 <UART_SetConfig+0x3ac>
 800aa1a:	2280      	movs	r2, #128	; 0x80
 800aa1c:	0092      	lsls	r2, r2, #2
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d02a      	beq.n	800aa78 <UART_SetConfig+0x37c>
 800aa22:	2280      	movs	r2, #128	; 0x80
 800aa24:	0092      	lsls	r2, r2, #2
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d83e      	bhi.n	800aaa8 <UART_SetConfig+0x3ac>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d01c      	beq.n	800aa68 <UART_SetConfig+0x36c>
 800aa2e:	2280      	movs	r2, #128	; 0x80
 800aa30:	0052      	lsls	r2, r2, #1
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d028      	beq.n	800aa88 <UART_SetConfig+0x38c>
 800aa36:	e037      	b.n	800aaa8 <UART_SetConfig+0x3ac>
 800aa38:	cfff69f3 	.word	0xcfff69f3
 800aa3c:	ffffcfff 	.word	0xffffcfff
 800aa40:	40008000 	.word	0x40008000
 800aa44:	40008400 	.word	0x40008400
 800aa48:	11fff4ff 	.word	0x11fff4ff
 800aa4c:	40013800 	.word	0x40013800
 800aa50:	40021000 	.word	0x40021000
 800aa54:	40004400 	.word	0x40004400
 800aa58:	40004800 	.word	0x40004800
 800aa5c:	40004c00 	.word	0x40004c00
 800aa60:	40005000 	.word	0x40005000
 800aa64:	40013c00 	.word	0x40013c00
 800aa68:	231b      	movs	r3, #27
 800aa6a:	2220      	movs	r2, #32
 800aa6c:	4694      	mov	ip, r2
 800aa6e:	44bc      	add	ip, r7
 800aa70:	4463      	add	r3, ip
 800aa72:	2200      	movs	r2, #0
 800aa74:	701a      	strb	r2, [r3, #0]
 800aa76:	e026      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800aa78:	231b      	movs	r3, #27
 800aa7a:	2220      	movs	r2, #32
 800aa7c:	4694      	mov	ip, r2
 800aa7e:	44bc      	add	ip, r7
 800aa80:	4463      	add	r3, ip
 800aa82:	2202      	movs	r2, #2
 800aa84:	701a      	strb	r2, [r3, #0]
 800aa86:	e01e      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800aa88:	231b      	movs	r3, #27
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	4694      	mov	ip, r2
 800aa8e:	44bc      	add	ip, r7
 800aa90:	4463      	add	r3, ip
 800aa92:	2204      	movs	r2, #4
 800aa94:	701a      	strb	r2, [r3, #0]
 800aa96:	e016      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800aa98:	231b      	movs	r3, #27
 800aa9a:	2220      	movs	r2, #32
 800aa9c:	4694      	mov	ip, r2
 800aa9e:	44bc      	add	ip, r7
 800aaa0:	4463      	add	r3, ip
 800aaa2:	2208      	movs	r2, #8
 800aaa4:	701a      	strb	r2, [r3, #0]
 800aaa6:	e00e      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800aaa8:	231b      	movs	r3, #27
 800aaaa:	2220      	movs	r2, #32
 800aaac:	4694      	mov	ip, r2
 800aaae:	44bc      	add	ip, r7
 800aab0:	4463      	add	r3, ip
 800aab2:	2210      	movs	r2, #16
 800aab4:	701a      	strb	r2, [r3, #0]
 800aab6:	e006      	b.n	800aac6 <UART_SetConfig+0x3ca>
 800aab8:	231b      	movs	r3, #27
 800aaba:	2220      	movs	r2, #32
 800aabc:	4694      	mov	ip, r2
 800aabe:	44bc      	add	ip, r7
 800aac0:	4463      	add	r3, ip
 800aac2:	2210      	movs	r2, #16
 800aac4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4ab8      	ldr	r2, [pc, #736]	; (800adac <UART_SetConfig+0x6b0>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d005      	beq.n	800aadc <UART_SetConfig+0x3e0>
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4ab6      	ldr	r2, [pc, #728]	; (800adb0 <UART_SetConfig+0x6b4>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d000      	beq.n	800aadc <UART_SetConfig+0x3e0>
 800aada:	e097      	b.n	800ac0c <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aadc:	231b      	movs	r3, #27
 800aade:	2220      	movs	r2, #32
 800aae0:	4694      	mov	ip, r2
 800aae2:	44bc      	add	ip, r7
 800aae4:	4463      	add	r3, ip
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2b08      	cmp	r3, #8
 800aaea:	d015      	beq.n	800ab18 <UART_SetConfig+0x41c>
 800aaec:	dc18      	bgt.n	800ab20 <UART_SetConfig+0x424>
 800aaee:	2b04      	cmp	r3, #4
 800aaf0:	d00d      	beq.n	800ab0e <UART_SetConfig+0x412>
 800aaf2:	dc15      	bgt.n	800ab20 <UART_SetConfig+0x424>
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <UART_SetConfig+0x402>
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d005      	beq.n	800ab08 <UART_SetConfig+0x40c>
 800aafc:	e010      	b.n	800ab20 <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aafe:	f7fd ff59 	bl	80089b4 <HAL_RCC_GetPCLK1Freq>
 800ab02:	0003      	movs	r3, r0
 800ab04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab06:	e015      	b.n	800ab34 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab08:	4baa      	ldr	r3, [pc, #680]	; (800adb4 <UART_SetConfig+0x6b8>)
 800ab0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab0c:	e012      	b.n	800ab34 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab0e:	f7fd fec5 	bl	800889c <HAL_RCC_GetSysClockFreq>
 800ab12:	0003      	movs	r3, r0
 800ab14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab16:	e00d      	b.n	800ab34 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab18:	2380      	movs	r3, #128	; 0x80
 800ab1a:	021b      	lsls	r3, r3, #8
 800ab1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab1e:	e009      	b.n	800ab34 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 800ab20:	2300      	movs	r3, #0
 800ab22:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800ab24:	231a      	movs	r3, #26
 800ab26:	2220      	movs	r2, #32
 800ab28:	4694      	mov	ip, r2
 800ab2a:	44bc      	add	ip, r7
 800ab2c:	4463      	add	r3, ip
 800ab2e:	2201      	movs	r2, #1
 800ab30:	701a      	strb	r2, [r3, #0]
        break;
 800ab32:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d100      	bne.n	800ab3c <UART_SetConfig+0x440>
 800ab3a:	e146      	b.n	800adca <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab40:	4b9d      	ldr	r3, [pc, #628]	; (800adb8 <UART_SetConfig+0x6bc>)
 800ab42:	0052      	lsls	r2, r2, #1
 800ab44:	5ad3      	ldrh	r3, [r2, r3]
 800ab46:	0019      	movs	r1, r3
 800ab48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab4a:	f7f5 faf7 	bl	800013c <__udivsi3>
 800ab4e:	0003      	movs	r3, r0
 800ab50:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	0013      	movs	r3, r2
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	189b      	adds	r3, r3, r2
 800ab5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d305      	bcc.n	800ab6e <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d907      	bls.n	800ab7e <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 800ab6e:	231a      	movs	r3, #26
 800ab70:	2220      	movs	r2, #32
 800ab72:	4694      	mov	ip, r2
 800ab74:	44bc      	add	ip, r7
 800ab76:	4463      	add	r3, ip
 800ab78:	2201      	movs	r2, #1
 800ab7a:	701a      	strb	r2, [r3, #0]
 800ab7c:	e045      	b.n	800ac0a <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab80:	61bb      	str	r3, [r7, #24]
 800ab82:	2300      	movs	r3, #0
 800ab84:	61fb      	str	r3, [r7, #28]
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab8a:	4b8b      	ldr	r3, [pc, #556]	; (800adb8 <UART_SetConfig+0x6bc>)
 800ab8c:	0052      	lsls	r2, r2, #1
 800ab8e:	5ad3      	ldrh	r3, [r2, r3]
 800ab90:	613b      	str	r3, [r7, #16]
 800ab92:	2300      	movs	r3, #0
 800ab94:	617b      	str	r3, [r7, #20]
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	69b8      	ldr	r0, [r7, #24]
 800ab9c:	69f9      	ldr	r1, [r7, #28]
 800ab9e:	f7f5 fc81 	bl	80004a4 <__aeabi_uldivmod>
 800aba2:	0002      	movs	r2, r0
 800aba4:	000b      	movs	r3, r1
 800aba6:	0e11      	lsrs	r1, r2, #24
 800aba8:	021d      	lsls	r5, r3, #8
 800abaa:	430d      	orrs	r5, r1
 800abac:	0214      	lsls	r4, r2, #8
 800abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	085b      	lsrs	r3, r3, #1
 800abb4:	60bb      	str	r3, [r7, #8]
 800abb6:	2300      	movs	r3, #0
 800abb8:	60fb      	str	r3, [r7, #12]
 800abba:	68b8      	ldr	r0, [r7, #8]
 800abbc:	68f9      	ldr	r1, [r7, #12]
 800abbe:	1900      	adds	r0, r0, r4
 800abc0:	4169      	adcs	r1, r5
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	603b      	str	r3, [r7, #0]
 800abc8:	2300      	movs	r3, #0
 800abca:	607b      	str	r3, [r7, #4]
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f7f5 fc68 	bl	80004a4 <__aeabi_uldivmod>
 800abd4:	0002      	movs	r2, r0
 800abd6:	000b      	movs	r3, r1
 800abd8:	0013      	movs	r3, r2
 800abda:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abde:	23c0      	movs	r3, #192	; 0xc0
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d309      	bcc.n	800abfa <UART_SetConfig+0x4fe>
 800abe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abe8:	2380      	movs	r3, #128	; 0x80
 800abea:	035b      	lsls	r3, r3, #13
 800abec:	429a      	cmp	r2, r3
 800abee:	d204      	bcs.n	800abfa <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abf6:	60da      	str	r2, [r3, #12]
 800abf8:	e007      	b.n	800ac0a <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 800abfa:	231a      	movs	r3, #26
 800abfc:	2220      	movs	r2, #32
 800abfe:	4694      	mov	ip, r2
 800ac00:	44bc      	add	ip, r7
 800ac02:	4463      	add	r3, ip
 800ac04:	2201      	movs	r2, #1
 800ac06:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800ac08:	e0df      	b.n	800adca <UART_SetConfig+0x6ce>
 800ac0a:	e0de      	b.n	800adca <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	69da      	ldr	r2, [r3, #28]
 800ac10:	2380      	movs	r3, #128	; 0x80
 800ac12:	021b      	lsls	r3, r3, #8
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d000      	beq.n	800ac1a <UART_SetConfig+0x51e>
 800ac18:	e074      	b.n	800ad04 <UART_SetConfig+0x608>
  {
    switch (clocksource)
 800ac1a:	231b      	movs	r3, #27
 800ac1c:	2220      	movs	r2, #32
 800ac1e:	4694      	mov	ip, r2
 800ac20:	44bc      	add	ip, r7
 800ac22:	4463      	add	r3, ip
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b08      	cmp	r3, #8
 800ac28:	d015      	beq.n	800ac56 <UART_SetConfig+0x55a>
 800ac2a:	dc18      	bgt.n	800ac5e <UART_SetConfig+0x562>
 800ac2c:	2b04      	cmp	r3, #4
 800ac2e:	d00d      	beq.n	800ac4c <UART_SetConfig+0x550>
 800ac30:	dc15      	bgt.n	800ac5e <UART_SetConfig+0x562>
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d002      	beq.n	800ac3c <UART_SetConfig+0x540>
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d005      	beq.n	800ac46 <UART_SetConfig+0x54a>
 800ac3a:	e010      	b.n	800ac5e <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac3c:	f7fd feba 	bl	80089b4 <HAL_RCC_GetPCLK1Freq>
 800ac40:	0003      	movs	r3, r0
 800ac42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac44:	e015      	b.n	800ac72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac46:	4b5b      	ldr	r3, [pc, #364]	; (800adb4 <UART_SetConfig+0x6b8>)
 800ac48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac4a:	e012      	b.n	800ac72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac4c:	f7fd fe26 	bl	800889c <HAL_RCC_GetSysClockFreq>
 800ac50:	0003      	movs	r3, r0
 800ac52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac54:	e00d      	b.n	800ac72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac56:	2380      	movs	r3, #128	; 0x80
 800ac58:	021b      	lsls	r3, r3, #8
 800ac5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac5c:	e009      	b.n	800ac72 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800ac62:	231a      	movs	r3, #26
 800ac64:	2220      	movs	r2, #32
 800ac66:	4694      	mov	ip, r2
 800ac68:	44bc      	add	ip, r7
 800ac6a:	4463      	add	r3, ip
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	701a      	strb	r2, [r3, #0]
        break;
 800ac70:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d100      	bne.n	800ac7a <UART_SetConfig+0x57e>
 800ac78:	e0a7      	b.n	800adca <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac7e:	4b4e      	ldr	r3, [pc, #312]	; (800adb8 <UART_SetConfig+0x6bc>)
 800ac80:	0052      	lsls	r2, r2, #1
 800ac82:	5ad3      	ldrh	r3, [r2, r3]
 800ac84:	0019      	movs	r1, r3
 800ac86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ac88:	f7f5 fa58 	bl	800013c <__udivsi3>
 800ac8c:	0003      	movs	r3, r0
 800ac8e:	005a      	lsls	r2, r3, #1
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	085b      	lsrs	r3, r3, #1
 800ac96:	18d2      	adds	r2, r2, r3
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	0019      	movs	r1, r3
 800ac9e:	0010      	movs	r0, r2
 800aca0:	f7f5 fa4c 	bl	800013c <__udivsi3>
 800aca4:	0003      	movs	r3, r0
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	2b0f      	cmp	r3, #15
 800acae:	d921      	bls.n	800acf4 <UART_SetConfig+0x5f8>
 800acb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb2:	2380      	movs	r3, #128	; 0x80
 800acb4:	025b      	lsls	r3, r3, #9
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d21c      	bcs.n	800acf4 <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	200e      	movs	r0, #14
 800acc0:	2420      	movs	r4, #32
 800acc2:	193b      	adds	r3, r7, r4
 800acc4:	181b      	adds	r3, r3, r0
 800acc6:	210f      	movs	r1, #15
 800acc8:	438a      	bics	r2, r1
 800acca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800accc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acce:	085b      	lsrs	r3, r3, #1
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	2207      	movs	r2, #7
 800acd4:	4013      	ands	r3, r2
 800acd6:	b299      	uxth	r1, r3
 800acd8:	193b      	adds	r3, r7, r4
 800acda:	181b      	adds	r3, r3, r0
 800acdc:	193a      	adds	r2, r7, r4
 800acde:	1812      	adds	r2, r2, r0
 800ace0:	8812      	ldrh	r2, [r2, #0]
 800ace2:	430a      	orrs	r2, r1
 800ace4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	193a      	adds	r2, r7, r4
 800acec:	1812      	adds	r2, r2, r0
 800acee:	8812      	ldrh	r2, [r2, #0]
 800acf0:	60da      	str	r2, [r3, #12]
 800acf2:	e06a      	b.n	800adca <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 800acf4:	231a      	movs	r3, #26
 800acf6:	2220      	movs	r2, #32
 800acf8:	4694      	mov	ip, r2
 800acfa:	44bc      	add	ip, r7
 800acfc:	4463      	add	r3, ip
 800acfe:	2201      	movs	r2, #1
 800ad00:	701a      	strb	r2, [r3, #0]
 800ad02:	e062      	b.n	800adca <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad04:	231b      	movs	r3, #27
 800ad06:	2220      	movs	r2, #32
 800ad08:	4694      	mov	ip, r2
 800ad0a:	44bc      	add	ip, r7
 800ad0c:	4463      	add	r3, ip
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	2b08      	cmp	r3, #8
 800ad12:	d015      	beq.n	800ad40 <UART_SetConfig+0x644>
 800ad14:	dc18      	bgt.n	800ad48 <UART_SetConfig+0x64c>
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	d00d      	beq.n	800ad36 <UART_SetConfig+0x63a>
 800ad1a:	dc15      	bgt.n	800ad48 <UART_SetConfig+0x64c>
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <UART_SetConfig+0x62a>
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d005      	beq.n	800ad30 <UART_SetConfig+0x634>
 800ad24:	e010      	b.n	800ad48 <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad26:	f7fd fe45 	bl	80089b4 <HAL_RCC_GetPCLK1Freq>
 800ad2a:	0003      	movs	r3, r0
 800ad2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad2e:	e015      	b.n	800ad5c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad30:	4b20      	ldr	r3, [pc, #128]	; (800adb4 <UART_SetConfig+0x6b8>)
 800ad32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad34:	e012      	b.n	800ad5c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad36:	f7fd fdb1 	bl	800889c <HAL_RCC_GetSysClockFreq>
 800ad3a:	0003      	movs	r3, r0
 800ad3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad3e:	e00d      	b.n	800ad5c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad40:	2380      	movs	r3, #128	; 0x80
 800ad42:	021b      	lsls	r3, r3, #8
 800ad44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad46:	e009      	b.n	800ad5c <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800ad4c:	231a      	movs	r3, #26
 800ad4e:	2220      	movs	r2, #32
 800ad50:	4694      	mov	ip, r2
 800ad52:	44bc      	add	ip, r7
 800ad54:	4463      	add	r3, ip
 800ad56:	2201      	movs	r2, #1
 800ad58:	701a      	strb	r2, [r3, #0]
        break;
 800ad5a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800ad5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d033      	beq.n	800adca <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad66:	4b14      	ldr	r3, [pc, #80]	; (800adb8 <UART_SetConfig+0x6bc>)
 800ad68:	0052      	lsls	r2, r2, #1
 800ad6a:	5ad3      	ldrh	r3, [r2, r3]
 800ad6c:	0019      	movs	r1, r3
 800ad6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ad70:	f7f5 f9e4 	bl	800013c <__udivsi3>
 800ad74:	0003      	movs	r3, r0
 800ad76:	001a      	movs	r2, r3
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	085b      	lsrs	r3, r3, #1
 800ad7e:	18d2      	adds	r2, r2, r3
 800ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	0019      	movs	r1, r3
 800ad86:	0010      	movs	r0, r2
 800ad88:	f7f5 f9d8 	bl	800013c <__udivsi3>
 800ad8c:	0003      	movs	r3, r0
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad94:	2b0f      	cmp	r3, #15
 800ad96:	d911      	bls.n	800adbc <UART_SetConfig+0x6c0>
 800ad98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad9a:	2380      	movs	r3, #128	; 0x80
 800ad9c:	025b      	lsls	r3, r3, #9
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d20c      	bcs.n	800adbc <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ada8:	60da      	str	r2, [r3, #12]
 800adaa:	e00e      	b.n	800adca <UART_SetConfig+0x6ce>
 800adac:	40008000 	.word	0x40008000
 800adb0:	40008400 	.word	0x40008400
 800adb4:	00f42400 	.word	0x00f42400
 800adb8:	0800ee1c 	.word	0x0800ee1c
      }
      else
      {
        ret = HAL_ERROR;
 800adbc:	231a      	movs	r3, #26
 800adbe:	2220      	movs	r2, #32
 800adc0:	4694      	mov	ip, r2
 800adc2:	44bc      	add	ip, r7
 800adc4:	4463      	add	r3, ip
 800adc6:	2201      	movs	r2, #1
 800adc8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	226a      	movs	r2, #106	; 0x6a
 800adce:	2101      	movs	r1, #1
 800add0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	2268      	movs	r2, #104	; 0x68
 800add6:	2101      	movs	r1, #1
 800add8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	2200      	movs	r2, #0
 800adde:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	2200      	movs	r2, #0
 800ade4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ade6:	231a      	movs	r3, #26
 800ade8:	2220      	movs	r2, #32
 800adea:	4694      	mov	ip, r2
 800adec:	44bc      	add	ip, r7
 800adee:	4463      	add	r3, ip
 800adf0:	781b      	ldrb	r3, [r3, #0]
}
 800adf2:	0018      	movs	r0, r3
 800adf4:	46bd      	mov	sp, r7
 800adf6:	b010      	add	sp, #64	; 0x40
 800adf8:	bdb0      	pop	{r4, r5, r7, pc}
 800adfa:	46c0      	nop			; (mov r8, r8)

0800adfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae08:	2201      	movs	r2, #1
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	d00b      	beq.n	800ae26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	4a4a      	ldr	r2, [pc, #296]	; (800af40 <UART_AdvFeatureConfig+0x144>)
 800ae16:	4013      	ands	r3, r2
 800ae18:	0019      	movs	r1, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	430a      	orrs	r2, r1
 800ae24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	d00b      	beq.n	800ae48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	4a43      	ldr	r2, [pc, #268]	; (800af44 <UART_AdvFeatureConfig+0x148>)
 800ae38:	4013      	ands	r3, r2
 800ae3a:	0019      	movs	r1, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	430a      	orrs	r2, r1
 800ae46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4c:	2204      	movs	r2, #4
 800ae4e:	4013      	ands	r3, r2
 800ae50:	d00b      	beq.n	800ae6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	4a3b      	ldr	r2, [pc, #236]	; (800af48 <UART_AdvFeatureConfig+0x14c>)
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	0019      	movs	r1, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	430a      	orrs	r2, r1
 800ae68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae6e:	2208      	movs	r2, #8
 800ae70:	4013      	ands	r3, r2
 800ae72:	d00b      	beq.n	800ae8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	4a34      	ldr	r2, [pc, #208]	; (800af4c <UART_AdvFeatureConfig+0x150>)
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	0019      	movs	r1, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	430a      	orrs	r2, r1
 800ae8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae90:	2210      	movs	r2, #16
 800ae92:	4013      	ands	r3, r2
 800ae94:	d00b      	beq.n	800aeae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	4a2c      	ldr	r2, [pc, #176]	; (800af50 <UART_AdvFeatureConfig+0x154>)
 800ae9e:	4013      	ands	r3, r2
 800aea0:	0019      	movs	r1, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	430a      	orrs	r2, r1
 800aeac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb2:	2220      	movs	r2, #32
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	d00b      	beq.n	800aed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	4a25      	ldr	r2, [pc, #148]	; (800af54 <UART_AdvFeatureConfig+0x158>)
 800aec0:	4013      	ands	r3, r2
 800aec2:	0019      	movs	r1, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	430a      	orrs	r2, r1
 800aece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed4:	2240      	movs	r2, #64	; 0x40
 800aed6:	4013      	ands	r3, r2
 800aed8:	d01d      	beq.n	800af16 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	4a1d      	ldr	r2, [pc, #116]	; (800af58 <UART_AdvFeatureConfig+0x15c>)
 800aee2:	4013      	ands	r3, r2
 800aee4:	0019      	movs	r1, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	430a      	orrs	r2, r1
 800aef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aef6:	2380      	movs	r3, #128	; 0x80
 800aef8:	035b      	lsls	r3, r3, #13
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d10b      	bne.n	800af16 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	4a15      	ldr	r2, [pc, #84]	; (800af5c <UART_AdvFeatureConfig+0x160>)
 800af06:	4013      	ands	r3, r2
 800af08:	0019      	movs	r1, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	430a      	orrs	r2, r1
 800af14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1a:	2280      	movs	r2, #128	; 0x80
 800af1c:	4013      	ands	r3, r2
 800af1e:	d00b      	beq.n	800af38 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	4a0e      	ldr	r2, [pc, #56]	; (800af60 <UART_AdvFeatureConfig+0x164>)
 800af28:	4013      	ands	r3, r2
 800af2a:	0019      	movs	r1, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	430a      	orrs	r2, r1
 800af36:	605a      	str	r2, [r3, #4]
  }
}
 800af38:	46c0      	nop			; (mov r8, r8)
 800af3a:	46bd      	mov	sp, r7
 800af3c:	b002      	add	sp, #8
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	fffdffff 	.word	0xfffdffff
 800af44:	fffeffff 	.word	0xfffeffff
 800af48:	fffbffff 	.word	0xfffbffff
 800af4c:	ffff7fff 	.word	0xffff7fff
 800af50:	ffffefff 	.word	0xffffefff
 800af54:	ffffdfff 	.word	0xffffdfff
 800af58:	ffefffff 	.word	0xffefffff
 800af5c:	ff9fffff 	.word	0xff9fffff
 800af60:	fff7ffff 	.word	0xfff7ffff

0800af64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af02      	add	r7, sp, #8
 800af6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	228c      	movs	r2, #140	; 0x8c
 800af70:	2100      	movs	r1, #0
 800af72:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af74:	f7f9 fa02 	bl	800437c <HAL_GetTick>
 800af78:	0003      	movs	r3, r0
 800af7a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2208      	movs	r2, #8
 800af84:	4013      	ands	r3, r2
 800af86:	2b08      	cmp	r3, #8
 800af88:	d10c      	bne.n	800afa4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2280      	movs	r2, #128	; 0x80
 800af8e:	0391      	lsls	r1, r2, #14
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	4a18      	ldr	r2, [pc, #96]	; (800aff4 <UART_CheckIdleState+0x90>)
 800af94:	9200      	str	r2, [sp, #0]
 800af96:	2200      	movs	r2, #0
 800af98:	f000 f82e 	bl	800aff8 <UART_WaitOnFlagUntilTimeout>
 800af9c:	1e03      	subs	r3, r0, #0
 800af9e:	d001      	beq.n	800afa4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e023      	b.n	800afec <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2204      	movs	r2, #4
 800afac:	4013      	ands	r3, r2
 800afae:	2b04      	cmp	r3, #4
 800afb0:	d10c      	bne.n	800afcc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2280      	movs	r2, #128	; 0x80
 800afb6:	03d1      	lsls	r1, r2, #15
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	4a0e      	ldr	r2, [pc, #56]	; (800aff4 <UART_CheckIdleState+0x90>)
 800afbc:	9200      	str	r2, [sp, #0]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f000 f81a 	bl	800aff8 <UART_WaitOnFlagUntilTimeout>
 800afc4:	1e03      	subs	r3, r0, #0
 800afc6:	d001      	beq.n	800afcc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afc8:	2303      	movs	r3, #3
 800afca:	e00f      	b.n	800afec <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2284      	movs	r2, #132	; 0x84
 800afd0:	2120      	movs	r1, #32
 800afd2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2288      	movs	r2, #136	; 0x88
 800afd8:	2120      	movs	r1, #32
 800afda:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2280      	movs	r2, #128	; 0x80
 800afe6:	2100      	movs	r1, #0
 800afe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	0018      	movs	r0, r3
 800afee:	46bd      	mov	sp, r7
 800aff0:	b004      	add	sp, #16
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	01ffffff 	.word	0x01ffffff

0800aff8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b094      	sub	sp, #80	; 0x50
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	603b      	str	r3, [r7, #0]
 800b004:	1dfb      	adds	r3, r7, #7
 800b006:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b008:	e0a7      	b.n	800b15a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b00a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b00c:	3301      	adds	r3, #1
 800b00e:	d100      	bne.n	800b012 <UART_WaitOnFlagUntilTimeout+0x1a>
 800b010:	e0a3      	b.n	800b15a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b012:	f7f9 f9b3 	bl	800437c <HAL_GetTick>
 800b016:	0002      	movs	r2, r0
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b01e:	429a      	cmp	r2, r3
 800b020:	d302      	bcc.n	800b028 <UART_WaitOnFlagUntilTimeout+0x30>
 800b022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b024:	2b00      	cmp	r3, #0
 800b026:	d13f      	bne.n	800b0a8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b028:	f3ef 8310 	mrs	r3, PRIMASK
 800b02c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b030:	647b      	str	r3, [r7, #68]	; 0x44
 800b032:	2301      	movs	r3, #1
 800b034:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b038:	f383 8810 	msr	PRIMASK, r3
}
 800b03c:	46c0      	nop			; (mov r8, r8)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	494e      	ldr	r1, [pc, #312]	; (800b184 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b04a:	400a      	ands	r2, r1
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b050:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	f383 8810 	msr	PRIMASK, r3
}
 800b058:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b05a:	f3ef 8310 	mrs	r3, PRIMASK
 800b05e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800b060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b062:	643b      	str	r3, [r7, #64]	; 0x40
 800b064:	2301      	movs	r3, #1
 800b066:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	f383 8810 	msr	PRIMASK, r3
}
 800b06e:	46c0      	nop			; (mov r8, r8)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	689a      	ldr	r2, [r3, #8]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2101      	movs	r1, #1
 800b07c:	438a      	bics	r2, r1
 800b07e:	609a      	str	r2, [r3, #8]
 800b080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b082:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b086:	f383 8810 	msr	PRIMASK, r3
}
 800b08a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2284      	movs	r2, #132	; 0x84
 800b090:	2120      	movs	r1, #32
 800b092:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2288      	movs	r2, #136	; 0x88
 800b098:	2120      	movs	r1, #32
 800b09a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2280      	movs	r2, #128	; 0x80
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e069      	b.n	800b17c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2204      	movs	r2, #4
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	d052      	beq.n	800b15a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	69da      	ldr	r2, [r3, #28]
 800b0ba:	2380      	movs	r3, #128	; 0x80
 800b0bc:	011b      	lsls	r3, r3, #4
 800b0be:	401a      	ands	r2, r3
 800b0c0:	2380      	movs	r3, #128	; 0x80
 800b0c2:	011b      	lsls	r3, r3, #4
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d148      	bne.n	800b15a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2280      	movs	r2, #128	; 0x80
 800b0ce:	0112      	lsls	r2, r2, #4
 800b0d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0d2:	f3ef 8310 	mrs	r3, PRIMASK
 800b0d6:	613b      	str	r3, [r7, #16]
  return(result);
 800b0d8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b0da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0dc:	2301      	movs	r3, #1
 800b0de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	f383 8810 	msr	PRIMASK, r3
}
 800b0e6:	46c0      	nop			; (mov r8, r8)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4924      	ldr	r1, [pc, #144]	; (800b184 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800b0f4:	400a      	ands	r2, r1
 800b0f6:	601a      	str	r2, [r3, #0]
 800b0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	f383 8810 	msr	PRIMASK, r3
}
 800b102:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b104:	f3ef 8310 	mrs	r3, PRIMASK
 800b108:	61fb      	str	r3, [r7, #28]
  return(result);
 800b10a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b10c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b10e:	2301      	movs	r3, #1
 800b110:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	f383 8810 	msr	PRIMASK, r3
}
 800b118:	46c0      	nop			; (mov r8, r8)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	689a      	ldr	r2, [r3, #8]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2101      	movs	r1, #1
 800b126:	438a      	bics	r2, r1
 800b128:	609a      	str	r2, [r3, #8]
 800b12a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b12c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	f383 8810 	msr	PRIMASK, r3
}
 800b134:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2284      	movs	r2, #132	; 0x84
 800b13a:	2120      	movs	r1, #32
 800b13c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2288      	movs	r2, #136	; 0x88
 800b142:	2120      	movs	r1, #32
 800b144:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	228c      	movs	r2, #140	; 0x8c
 800b14a:	2120      	movs	r1, #32
 800b14c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2280      	movs	r2, #128	; 0x80
 800b152:	2100      	movs	r1, #0
 800b154:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b156:	2303      	movs	r3, #3
 800b158:	e010      	b.n	800b17c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	69db      	ldr	r3, [r3, #28]
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	4013      	ands	r3, r2
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	425a      	negs	r2, r3
 800b16a:	4153      	adcs	r3, r2
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	001a      	movs	r2, r3
 800b170:	1dfb      	adds	r3, r7, #7
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	429a      	cmp	r2, r3
 800b176:	d100      	bne.n	800b17a <UART_WaitOnFlagUntilTimeout+0x182>
 800b178:	e747      	b.n	800b00a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	0018      	movs	r0, r3
 800b17e:	46bd      	mov	sp, r7
 800b180:	b014      	add	sp, #80	; 0x50
 800b182:	bd80      	pop	{r7, pc}
 800b184:	fffffe5f 	.word	0xfffffe5f

0800b188 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b090      	sub	sp, #64	; 0x40
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	1dbb      	adds	r3, r7, #6
 800b194:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	1dba      	adds	r2, r7, #6
 800b1a0:	215c      	movs	r1, #92	; 0x5c
 800b1a2:	8812      	ldrh	r2, [r2, #0]
 800b1a4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	228c      	movs	r2, #140	; 0x8c
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2288      	movs	r2, #136	; 0x88
 800b1b2:	2122      	movs	r1, #34	; 0x22
 800b1b4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d02c      	beq.n	800b218 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1c2:	4a40      	ldr	r2, [pc, #256]	; (800b2c4 <UART_Start_Receive_DMA+0x13c>)
 800b1c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ca:	4a3f      	ldr	r2, [pc, #252]	; (800b2c8 <UART_Start_Receive_DMA+0x140>)
 800b1cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1d2:	4a3e      	ldr	r2, [pc, #248]	; (800b2cc <UART_Start_Receive_DMA+0x144>)
 800b1d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1da:	2200      	movs	r2, #0
 800b1dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3324      	adds	r3, #36	; 0x24
 800b1e8:	0019      	movs	r1, r3
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ee:	001a      	movs	r2, r3
 800b1f0:	1dbb      	adds	r3, r7, #6
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	f7f9 ff8c 	bl	8005110 <HAL_DMA_Start_IT>
 800b1f8:	1e03      	subs	r3, r0, #0
 800b1fa:	d00d      	beq.n	800b218 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	228c      	movs	r2, #140	; 0x8c
 800b200:	2110      	movs	r1, #16
 800b202:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2280      	movs	r2, #128	; 0x80
 800b208:	2100      	movs	r1, #0
 800b20a:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2288      	movs	r2, #136	; 0x88
 800b210:	2120      	movs	r1, #32
 800b212:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	e050      	b.n	800b2ba <UART_Start_Receive_DMA+0x132>
    }
  }
  __HAL_UNLOCK(huart);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2280      	movs	r2, #128	; 0x80
 800b21c:	2100      	movs	r1, #0
 800b21e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b220:	f3ef 8310 	mrs	r3, PRIMASK
 800b224:	613b      	str	r3, [r7, #16]
  return(result);
 800b226:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b22a:	2301      	movs	r3, #1
 800b22c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f383 8810 	msr	PRIMASK, r3
}
 800b234:	46c0      	nop			; (mov r8, r8)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2180      	movs	r1, #128	; 0x80
 800b242:	0049      	lsls	r1, r1, #1
 800b244:	430a      	orrs	r2, r1
 800b246:	601a      	str	r2, [r3, #0]
 800b248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b24a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	f383 8810 	msr	PRIMASK, r3
}
 800b252:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b254:	f3ef 8310 	mrs	r3, PRIMASK
 800b258:	61fb      	str	r3, [r7, #28]
  return(result);
 800b25a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b25c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b25e:	2301      	movs	r3, #1
 800b260:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	f383 8810 	msr	PRIMASK, r3
}
 800b268:	46c0      	nop			; (mov r8, r8)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	689a      	ldr	r2, [r3, #8]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2101      	movs	r1, #1
 800b276:	430a      	orrs	r2, r1
 800b278:	609a      	str	r2, [r3, #8]
 800b27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b280:	f383 8810 	msr	PRIMASK, r3
}
 800b284:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b286:	f3ef 8310 	mrs	r3, PRIMASK
 800b28a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b28e:	637b      	str	r3, [r7, #52]	; 0x34
 800b290:	2301      	movs	r3, #1
 800b292:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b296:	f383 8810 	msr	PRIMASK, r3
}
 800b29a:	46c0      	nop			; (mov r8, r8)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	689a      	ldr	r2, [r3, #8]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2140      	movs	r1, #64	; 0x40
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	609a      	str	r2, [r3, #8]
 800b2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b2:	f383 8810 	msr	PRIMASK, r3
}
 800b2b6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	0018      	movs	r0, r3
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	b010      	add	sp, #64	; 0x40
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	46c0      	nop			; (mov r8, r8)
 800b2c4:	0800b41d 	.word	0x0800b41d
 800b2c8:	0800b545 	.word	0x0800b545
 800b2cc:	0800b581 	.word	0x0800b581

0800b2d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b08a      	sub	sp, #40	; 0x28
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b2dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2de:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b2e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f383 8810 	msr	PRIMASK, r3
}
 800b2ec:	46c0      	nop			; (mov r8, r8)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	21c0      	movs	r1, #192	; 0xc0
 800b2fa:	438a      	bics	r2, r1
 800b2fc:	601a      	str	r2, [r3, #0]
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	f383 8810 	msr	PRIMASK, r3
}
 800b308:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b30a:	f3ef 8310 	mrs	r3, PRIMASK
 800b30e:	617b      	str	r3, [r7, #20]
  return(result);
 800b310:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b312:	623b      	str	r3, [r7, #32]
 800b314:	2301      	movs	r3, #1
 800b316:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	f383 8810 	msr	PRIMASK, r3
}
 800b31e:	46c0      	nop			; (mov r8, r8)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	689a      	ldr	r2, [r3, #8]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4908      	ldr	r1, [pc, #32]	; (800b34c <UART_EndTxTransfer+0x7c>)
 800b32c:	400a      	ands	r2, r1
 800b32e:	609a      	str	r2, [r3, #8]
 800b330:	6a3b      	ldr	r3, [r7, #32]
 800b332:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	f383 8810 	msr	PRIMASK, r3
}
 800b33a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2284      	movs	r2, #132	; 0x84
 800b340:	2120      	movs	r1, #32
 800b342:	5099      	str	r1, [r3, r2]
}
 800b344:	46c0      	nop			; (mov r8, r8)
 800b346:	46bd      	mov	sp, r7
 800b348:	b00a      	add	sp, #40	; 0x28
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	ff7fffff 	.word	0xff7fffff

0800b350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08e      	sub	sp, #56	; 0x38
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b358:	f3ef 8310 	mrs	r3, PRIMASK
 800b35c:	617b      	str	r3, [r7, #20]
  return(result);
 800b35e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b360:	637b      	str	r3, [r7, #52]	; 0x34
 800b362:	2301      	movs	r3, #1
 800b364:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	f383 8810 	msr	PRIMASK, r3
}
 800b36c:	46c0      	nop			; (mov r8, r8)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4926      	ldr	r1, [pc, #152]	; (800b414 <UART_EndRxTransfer+0xc4>)
 800b37a:	400a      	ands	r2, r1
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b380:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	f383 8810 	msr	PRIMASK, r3
}
 800b388:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b38a:	f3ef 8310 	mrs	r3, PRIMASK
 800b38e:	623b      	str	r3, [r7, #32]
  return(result);
 800b390:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b392:	633b      	str	r3, [r7, #48]	; 0x30
 800b394:	2301      	movs	r3, #1
 800b396:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39a:	f383 8810 	msr	PRIMASK, r3
}
 800b39e:	46c0      	nop			; (mov r8, r8)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	689a      	ldr	r2, [r3, #8]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	491b      	ldr	r1, [pc, #108]	; (800b418 <UART_EndRxTransfer+0xc8>)
 800b3ac:	400a      	ands	r2, r1
 800b3ae:	609a      	str	r2, [r3, #8]
 800b3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b6:	f383 8810 	msr	PRIMASK, r3
}
 800b3ba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d118      	bne.n	800b3f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b3c8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f383 8810 	msr	PRIMASK, r3
}
 800b3d8:	46c0      	nop			; (mov r8, r8)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2110      	movs	r1, #16
 800b3e6:	438a      	bics	r2, r1
 800b3e8:	601a      	str	r2, [r3, #0]
 800b3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	f383 8810 	msr	PRIMASK, r3
}
 800b3f4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2288      	movs	r2, #136	; 0x88
 800b3fa:	2120      	movs	r1, #32
 800b3fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b40a:	46c0      	nop			; (mov r8, r8)
 800b40c:	46bd      	mov	sp, r7
 800b40e:	b00e      	add	sp, #56	; 0x38
 800b410:	bd80      	pop	{r7, pc}
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	fffffedf 	.word	0xfffffedf
 800b418:	effffffe 	.word	0xeffffffe

0800b41c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b094      	sub	sp, #80	; 0x50
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b428:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2220      	movs	r2, #32
 800b432:	4013      	ands	r3, r2
 800b434:	d16f      	bne.n	800b516 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800b436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b438:	225e      	movs	r2, #94	; 0x5e
 800b43a:	2100      	movs	r1, #0
 800b43c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b43e:	f3ef 8310 	mrs	r3, PRIMASK
 800b442:	61bb      	str	r3, [r7, #24]
  return(result);
 800b444:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b446:	64bb      	str	r3, [r7, #72]	; 0x48
 800b448:	2301      	movs	r3, #1
 800b44a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	f383 8810 	msr	PRIMASK, r3
}
 800b452:	46c0      	nop			; (mov r8, r8)
 800b454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4938      	ldr	r1, [pc, #224]	; (800b540 <UART_DMAReceiveCplt+0x124>)
 800b460:	400a      	ands	r2, r1
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b466:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b468:	6a3b      	ldr	r3, [r7, #32]
 800b46a:	f383 8810 	msr	PRIMASK, r3
}
 800b46e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b470:	f3ef 8310 	mrs	r3, PRIMASK
 800b474:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b478:	647b      	str	r3, [r7, #68]	; 0x44
 800b47a:	2301      	movs	r3, #1
 800b47c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b480:	f383 8810 	msr	PRIMASK, r3
}
 800b484:	46c0      	nop			; (mov r8, r8)
 800b486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	689a      	ldr	r2, [r3, #8]
 800b48c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2101      	movs	r1, #1
 800b492:	438a      	bics	r2, r1
 800b494:	609a      	str	r2, [r3, #8]
 800b496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b498:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49c:	f383 8810 	msr	PRIMASK, r3
}
 800b4a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b4a6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4aa:	643b      	str	r3, [r7, #64]	; 0x40
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b2:	f383 8810 	msr	PRIMASK, r3
}
 800b4b6:	46c0      	nop			; (mov r8, r8)
 800b4b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	689a      	ldr	r2, [r3, #8]
 800b4be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2140      	movs	r1, #64	; 0x40
 800b4c4:	438a      	bics	r2, r1
 800b4c6:	609a      	str	r2, [r3, #8]
 800b4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	f383 8810 	msr	PRIMASK, r3
}
 800b4d2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b4d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4d6:	2288      	movs	r2, #136	; 0x88
 800b4d8:	2120      	movs	r1, #32
 800b4da:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d118      	bne.n	800b516 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b4e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	f383 8810 	msr	PRIMASK, r3
}
 800b4f8:	46c0      	nop			; (mov r8, r8)
 800b4fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2110      	movs	r1, #16
 800b506:	438a      	bics	r2, r1
 800b508:	601a      	str	r2, [r3, #0]
 800b50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b50c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f383 8810 	msr	PRIMASK, r3
}
 800b514:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d108      	bne.n	800b530 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b51e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b520:	225c      	movs	r2, #92	; 0x5c
 800b522:	5a9a      	ldrh	r2, [r3, r2]
 800b524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b526:	0011      	movs	r1, r2
 800b528:	0018      	movs	r0, r3
 800b52a:	f7ff f8db 	bl	800a6e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b52e:	e003      	b.n	800b538 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800b530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b532:	0018      	movs	r0, r3
 800b534:	f7f6 fee4 	bl	8002300 <HAL_UART_RxCpltCallback>
}
 800b538:	46c0      	nop			; (mov r8, r8)
 800b53a:	46bd      	mov	sp, r7
 800b53c:	b014      	add	sp, #80	; 0x50
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	fffffeff 	.word	0xfffffeff

0800b544 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b550:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b556:	2b01      	cmp	r3, #1
 800b558:	d10a      	bne.n	800b570 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	225c      	movs	r2, #92	; 0x5c
 800b55e:	5a9b      	ldrh	r3, [r3, r2]
 800b560:	085b      	lsrs	r3, r3, #1
 800b562:	b29a      	uxth	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	0011      	movs	r1, r2
 800b568:	0018      	movs	r0, r3
 800b56a:	f7ff f8bb 	bl	800a6e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b56e:	e003      	b.n	800b578 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	0018      	movs	r0, r3
 800b574:	f7ff f89e 	bl	800a6b4 <HAL_UART_RxHalfCpltCallback>
}
 800b578:	46c0      	nop			; (mov r8, r8)
 800b57a:	46bd      	mov	sp, r7
 800b57c:	b004      	add	sp, #16
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2284      	movs	r2, #132	; 0x84
 800b592:	589b      	ldr	r3, [r3, r2]
 800b594:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2288      	movs	r2, #136	; 0x88
 800b59a:	589b      	ldr	r3, [r3, r2]
 800b59c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	2280      	movs	r2, #128	; 0x80
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	2b80      	cmp	r3, #128	; 0x80
 800b5aa:	d10a      	bne.n	800b5c2 <UART_DMAError+0x42>
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	2b21      	cmp	r3, #33	; 0x21
 800b5b0:	d107      	bne.n	800b5c2 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2256      	movs	r2, #86	; 0x56
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	0018      	movs	r0, r3
 800b5be:	f7ff fe87 	bl	800b2d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	2240      	movs	r2, #64	; 0x40
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	2b40      	cmp	r3, #64	; 0x40
 800b5ce:	d10a      	bne.n	800b5e6 <UART_DMAError+0x66>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b22      	cmp	r3, #34	; 0x22
 800b5d4:	d107      	bne.n	800b5e6 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	225e      	movs	r2, #94	; 0x5e
 800b5da:	2100      	movs	r1, #0
 800b5dc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	0018      	movs	r0, r3
 800b5e2:	f7ff feb5 	bl	800b350 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	228c      	movs	r2, #140	; 0x8c
 800b5ea:	589b      	ldr	r3, [r3, r2]
 800b5ec:	2210      	movs	r2, #16
 800b5ee:	431a      	orrs	r2, r3
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	218c      	movs	r1, #140	; 0x8c
 800b5f4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	0018      	movs	r0, r3
 800b5fa:	f7ff f863 	bl	800a6c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5fe:	46c0      	nop			; (mov r8, r8)
 800b600:	46bd      	mov	sp, r7
 800b602:	b006      	add	sp, #24
 800b604:	bd80      	pop	{r7, pc}

0800b606 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b084      	sub	sp, #16
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b612:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	225e      	movs	r2, #94	; 0x5e
 800b618:	2100      	movs	r1, #0
 800b61a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2256      	movs	r2, #86	; 0x56
 800b620:	2100      	movs	r1, #0
 800b622:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	0018      	movs	r0, r3
 800b628:	f7ff f84c 	bl	800a6c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b62c:	46c0      	nop			; (mov r8, r8)
 800b62e:	46bd      	mov	sp, r7
 800b630:	b004      	add	sp, #16
 800b632:	bd80      	pop	{r7, pc}

0800b634 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b640:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b646:	2200      	movs	r2, #0
 800b648:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d004      	beq.n	800b65c <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d12d      	bne.n	800b6b8 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2256      	movs	r2, #86	; 0x56
 800b660:	2100      	movs	r1, #0
 800b662:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	225e      	movs	r2, #94	; 0x5e
 800b668:	2100      	movs	r1, #0
 800b66a:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	228c      	movs	r2, #140	; 0x8c
 800b670:	2100      	movs	r1, #0
 800b672:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	220f      	movs	r2, #15
 800b67a:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b680:	2380      	movs	r3, #128	; 0x80
 800b682:	059b      	lsls	r3, r3, #22
 800b684:	429a      	cmp	r2, r3
 800b686:	d107      	bne.n	800b698 <UART_DMATxAbortCallback+0x64>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	699a      	ldr	r2, [r3, #24]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2110      	movs	r1, #16
 800b694:	430a      	orrs	r2, r1
 800b696:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2284      	movs	r2, #132	; 0x84
 800b69c:	2120      	movs	r1, #32
 800b69e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2288      	movs	r2, #136	; 0x88
 800b6a4:	2120      	movs	r1, #32
 800b6a6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	f7ff f80f 	bl	800a6d4 <HAL_UART_AbortCpltCallback>
 800b6b6:	e000      	b.n	800b6ba <UART_DMATxAbortCallback+0x86>
      return;
 800b6b8:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	b004      	add	sp, #16
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6cc:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d004      	beq.n	800b6e8 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d127      	bne.n	800b738 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2256      	movs	r2, #86	; 0x56
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	225e      	movs	r2, #94	; 0x5e
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	228c      	movs	r2, #140	; 0x8c
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	220f      	movs	r2, #15
 800b706:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	699a      	ldr	r2, [r3, #24]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2108      	movs	r1, #8
 800b714:	430a      	orrs	r2, r1
 800b716:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2284      	movs	r2, #132	; 0x84
 800b71c:	2120      	movs	r1, #32
 800b71e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2288      	movs	r2, #136	; 0x88
 800b724:	2120      	movs	r1, #32
 800b726:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	0018      	movs	r0, r3
 800b732:	f7fe ffcf 	bl	800a6d4 <HAL_UART_AbortCpltCallback>
 800b736:	e000      	b.n	800b73a <UART_DMARxAbortCallback+0x7a>
      return;
 800b738:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b73a:	46bd      	mov	sp, r7
 800b73c:	b004      	add	sp, #16
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08a      	sub	sp, #40	; 0x28
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2284      	movs	r2, #132	; 0x84
 800b74c:	589b      	ldr	r3, [r3, r2]
 800b74e:	2b21      	cmp	r3, #33	; 0x21
 800b750:	d14c      	bne.n	800b7ec <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2256      	movs	r2, #86	; 0x56
 800b756:	5a9b      	ldrh	r3, [r3, r2]
 800b758:	b29b      	uxth	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d132      	bne.n	800b7c4 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b75e:	f3ef 8310 	mrs	r3, PRIMASK
 800b762:	60bb      	str	r3, [r7, #8]
  return(result);
 800b764:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b766:	627b      	str	r3, [r7, #36]	; 0x24
 800b768:	2301      	movs	r3, #1
 800b76a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f383 8810 	msr	PRIMASK, r3
}
 800b772:	46c0      	nop			; (mov r8, r8)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2180      	movs	r1, #128	; 0x80
 800b780:	438a      	bics	r2, r1
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	f383 8810 	msr	PRIMASK, r3
}
 800b78e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b790:	f3ef 8310 	mrs	r3, PRIMASK
 800b794:	617b      	str	r3, [r7, #20]
  return(result);
 800b796:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b798:	623b      	str	r3, [r7, #32]
 800b79a:	2301      	movs	r3, #1
 800b79c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	f383 8810 	msr	PRIMASK, r3
}
 800b7a4:	46c0      	nop			; (mov r8, r8)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2140      	movs	r1, #64	; 0x40
 800b7b2:	430a      	orrs	r2, r1
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	f383 8810 	msr	PRIMASK, r3
}
 800b7c0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b7c2:	e013      	b.n	800b7ec <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c8:	781a      	ldrb	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d4:	1c5a      	adds	r2, r3, #1
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2256      	movs	r2, #86	; 0x56
 800b7de:	5a9b      	ldrh	r3, [r3, r2]
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	b299      	uxth	r1, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2256      	movs	r2, #86	; 0x56
 800b7ea:	5299      	strh	r1, [r3, r2]
}
 800b7ec:	46c0      	nop			; (mov r8, r8)
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	b00a      	add	sp, #40	; 0x28
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b08c      	sub	sp, #48	; 0x30
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2284      	movs	r2, #132	; 0x84
 800b800:	589b      	ldr	r3, [r3, r2]
 800b802:	2b21      	cmp	r3, #33	; 0x21
 800b804:	d151      	bne.n	800b8aa <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2256      	movs	r2, #86	; 0x56
 800b80a:	5a9b      	ldrh	r3, [r3, r2]
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d132      	bne.n	800b878 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b812:	f3ef 8310 	mrs	r3, PRIMASK
 800b816:	60fb      	str	r3, [r7, #12]
  return(result);
 800b818:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b81a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b81c:	2301      	movs	r3, #1
 800b81e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	f383 8810 	msr	PRIMASK, r3
}
 800b826:	46c0      	nop			; (mov r8, r8)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2180      	movs	r1, #128	; 0x80
 800b834:	438a      	bics	r2, r1
 800b836:	601a      	str	r2, [r3, #0]
 800b838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f383 8810 	msr	PRIMASK, r3
}
 800b842:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b844:	f3ef 8310 	mrs	r3, PRIMASK
 800b848:	61bb      	str	r3, [r7, #24]
  return(result);
 800b84a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
 800b84e:	2301      	movs	r3, #1
 800b850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	f383 8810 	msr	PRIMASK, r3
}
 800b858:	46c0      	nop			; (mov r8, r8)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2140      	movs	r1, #64	; 0x40
 800b866:	430a      	orrs	r2, r1
 800b868:	601a      	str	r2, [r3, #0]
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	f383 8810 	msr	PRIMASK, r3
}
 800b874:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b876:	e018      	b.n	800b8aa <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b87c:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	001a      	movs	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	05d2      	lsls	r2, r2, #23
 800b88a:	0dd2      	lsrs	r2, r2, #23
 800b88c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b892:	1c9a      	adds	r2, r3, #2
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2256      	movs	r2, #86	; 0x56
 800b89c:	5a9b      	ldrh	r3, [r3, r2]
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	b299      	uxth	r1, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2256      	movs	r2, #86	; 0x56
 800b8a8:	5299      	strh	r1, [r3, r2]
}
 800b8aa:	46c0      	nop			; (mov r8, r8)
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	b00c      	add	sp, #48	; 0x30
 800b8b0:	bd80      	pop	{r7, pc}
	...

0800b8b4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b08c      	sub	sp, #48	; 0x30
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2284      	movs	r2, #132	; 0x84
 800b8c0:	589b      	ldr	r3, [r3, r2]
 800b8c2:	2b21      	cmp	r3, #33	; 0x21
 800b8c4:	d165      	bne.n	800b992 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b8c6:	232e      	movs	r3, #46	; 0x2e
 800b8c8:	18fb      	adds	r3, r7, r3
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	216a      	movs	r1, #106	; 0x6a
 800b8ce:	5a52      	ldrh	r2, [r2, r1]
 800b8d0:	801a      	strh	r2, [r3, #0]
 800b8d2:	e059      	b.n	800b988 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2256      	movs	r2, #86	; 0x56
 800b8d8:	5a9b      	ldrh	r3, [r3, r2]
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d133      	bne.n	800b948 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8e0:	f3ef 8310 	mrs	r3, PRIMASK
 800b8e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b8e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	f383 8810 	msr	PRIMASK, r3
}
 800b8f4:	46c0      	nop			; (mov r8, r8)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	689a      	ldr	r2, [r3, #8]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4926      	ldr	r1, [pc, #152]	; (800b99c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800b902:	400a      	ands	r2, r1
 800b904:	609a      	str	r2, [r3, #8]
 800b906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b908:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	f383 8810 	msr	PRIMASK, r3
}
 800b910:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b912:	f3ef 8310 	mrs	r3, PRIMASK
 800b916:	61bb      	str	r3, [r7, #24]
  return(result);
 800b918:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b91a:	627b      	str	r3, [r7, #36]	; 0x24
 800b91c:	2301      	movs	r3, #1
 800b91e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	f383 8810 	msr	PRIMASK, r3
}
 800b926:	46c0      	nop			; (mov r8, r8)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2140      	movs	r1, #64	; 0x40
 800b934:	430a      	orrs	r2, r1
 800b936:	601a      	str	r2, [r3, #0]
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b93c:	6a3b      	ldr	r3, [r7, #32]
 800b93e:	f383 8810 	msr	PRIMASK, r3
}
 800b942:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800b944:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800b946:	e024      	b.n	800b992 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	69db      	ldr	r3, [r3, #28]
 800b94e:	2280      	movs	r2, #128	; 0x80
 800b950:	4013      	ands	r3, r2
 800b952:	d013      	beq.n	800b97c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b958:	781a      	ldrb	r2, [r3, #0]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2256      	movs	r2, #86	; 0x56
 800b96e:	5a9b      	ldrh	r3, [r3, r2]
 800b970:	b29b      	uxth	r3, r3
 800b972:	3b01      	subs	r3, #1
 800b974:	b299      	uxth	r1, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2256      	movs	r2, #86	; 0x56
 800b97a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b97c:	212e      	movs	r1, #46	; 0x2e
 800b97e:	187b      	adds	r3, r7, r1
 800b980:	881a      	ldrh	r2, [r3, #0]
 800b982:	187b      	adds	r3, r7, r1
 800b984:	3a01      	subs	r2, #1
 800b986:	801a      	strh	r2, [r3, #0]
 800b988:	232e      	movs	r3, #46	; 0x2e
 800b98a:	18fb      	adds	r3, r7, r3
 800b98c:	881b      	ldrh	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1a0      	bne.n	800b8d4 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800b992:	46c0      	nop			; (mov r8, r8)
 800b994:	46bd      	mov	sp, r7
 800b996:	b00c      	add	sp, #48	; 0x30
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	46c0      	nop			; (mov r8, r8)
 800b99c:	ff7fffff 	.word	0xff7fffff

0800b9a0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b08c      	sub	sp, #48	; 0x30
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2284      	movs	r2, #132	; 0x84
 800b9ac:	589b      	ldr	r3, [r3, r2]
 800b9ae:	2b21      	cmp	r3, #33	; 0x21
 800b9b0:	d16a      	bne.n	800ba88 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b9b2:	232e      	movs	r3, #46	; 0x2e
 800b9b4:	18fb      	adds	r3, r7, r3
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	216a      	movs	r1, #106	; 0x6a
 800b9ba:	5a52      	ldrh	r2, [r2, r1]
 800b9bc:	801a      	strh	r2, [r3, #0]
 800b9be:	e05e      	b.n	800ba7e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2256      	movs	r2, #86	; 0x56
 800b9c4:	5a9b      	ldrh	r3, [r3, r2]
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d133      	bne.n	800ba34 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9cc:	f3ef 8310 	mrs	r3, PRIMASK
 800b9d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9d2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b9d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f383 8810 	msr	PRIMASK, r3
}
 800b9e0:	46c0      	nop			; (mov r8, r8)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	689a      	ldr	r2, [r3, #8]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4928      	ldr	r1, [pc, #160]	; (800ba90 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800b9ee:	400a      	ands	r2, r1
 800b9f0:	609a      	str	r2, [r3, #8]
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	f383 8810 	msr	PRIMASK, r3
}
 800b9fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9fe:	f3ef 8310 	mrs	r3, PRIMASK
 800ba02:	617b      	str	r3, [r7, #20]
  return(result);
 800ba04:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba06:	623b      	str	r3, [r7, #32]
 800ba08:	2301      	movs	r3, #1
 800ba0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	f383 8810 	msr	PRIMASK, r3
}
 800ba12:	46c0      	nop			; (mov r8, r8)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2140      	movs	r1, #64	; 0x40
 800ba20:	430a      	orrs	r2, r1
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	6a3b      	ldr	r3, [r7, #32]
 800ba26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	f383 8810 	msr	PRIMASK, r3
}
 800ba2e:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800ba30:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800ba32:	e029      	b.n	800ba88 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	69db      	ldr	r3, [r3, #28]
 800ba3a:	2280      	movs	r2, #128	; 0x80
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	d018      	beq.n	800ba72 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba44:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ba46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba48:	881b      	ldrh	r3, [r3, #0]
 800ba4a:	001a      	movs	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	05d2      	lsls	r2, r2, #23
 800ba52:	0dd2      	lsrs	r2, r2, #23
 800ba54:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba5a:	1c9a      	adds	r2, r3, #2
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2256      	movs	r2, #86	; 0x56
 800ba64:	5a9b      	ldrh	r3, [r3, r2]
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	b299      	uxth	r1, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2256      	movs	r2, #86	; 0x56
 800ba70:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ba72:	212e      	movs	r1, #46	; 0x2e
 800ba74:	187b      	adds	r3, r7, r1
 800ba76:	881a      	ldrh	r2, [r3, #0]
 800ba78:	187b      	adds	r3, r7, r1
 800ba7a:	3a01      	subs	r2, #1
 800ba7c:	801a      	strh	r2, [r3, #0]
 800ba7e:	232e      	movs	r3, #46	; 0x2e
 800ba80:	18fb      	adds	r3, r7, r3
 800ba82:	881b      	ldrh	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d19b      	bne.n	800b9c0 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800ba88:	46c0      	nop			; (mov r8, r8)
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	b00c      	add	sp, #48	; 0x30
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	ff7fffff 	.word	0xff7fffff

0800ba94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba9c:	f3ef 8310 	mrs	r3, PRIMASK
 800baa0:	60bb      	str	r3, [r7, #8]
  return(result);
 800baa2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800baa4:	617b      	str	r3, [r7, #20]
 800baa6:	2301      	movs	r3, #1
 800baa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f383 8810 	msr	PRIMASK, r3
}
 800bab0:	46c0      	nop			; (mov r8, r8)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2140      	movs	r1, #64	; 0x40
 800babe:	438a      	bics	r2, r1
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	f383 8810 	msr	PRIMASK, r3
}
 800bacc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2284      	movs	r2, #132	; 0x84
 800bad2:	2120      	movs	r1, #32
 800bad4:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	0018      	movs	r0, r3
 800bae0:	f7f6 fc5c 	bl	800239c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bae4:	46c0      	nop			; (mov r8, r8)
 800bae6:	46bd      	mov	sp, r7
 800bae8:	b006      	add	sp, #24
 800baea:	bd80      	pop	{r7, pc}

0800baec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800baf4:	46c0      	nop			; (mov r8, r8)
 800baf6:	46bd      	mov	sp, r7
 800baf8:	b002      	add	sp, #8
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bb04:	46c0      	nop			; (mov r8, r8)
 800bb06:	46bd      	mov	sp, r7
 800bb08:	b002      	add	sp, #8
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bb14:	46c0      	nop			; (mov r8, r8)
 800bb16:	46bd      	mov	sp, r7
 800bb18:	b002      	add	sp, #8
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2280      	movs	r2, #128	; 0x80
 800bb28:	5c9b      	ldrb	r3, [r3, r2]
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d101      	bne.n	800bb32 <HAL_UARTEx_DisableFifoMode+0x16>
 800bb2e:	2302      	movs	r3, #2
 800bb30:	e027      	b.n	800bb82 <HAL_UARTEx_DisableFifoMode+0x66>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2280      	movs	r2, #128	; 0x80
 800bb36:	2101      	movs	r1, #1
 800bb38:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2284      	movs	r2, #132	; 0x84
 800bb3e:	2124      	movs	r1, #36	; 0x24
 800bb40:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2101      	movs	r1, #1
 800bb56:	438a      	bics	r2, r1
 800bb58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	4a0b      	ldr	r2, [pc, #44]	; (800bb8c <HAL_UARTEx_DisableFifoMode+0x70>)
 800bb5e:	4013      	ands	r3, r2
 800bb60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2284      	movs	r2, #132	; 0x84
 800bb74:	2120      	movs	r1, #32
 800bb76:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2280      	movs	r2, #128	; 0x80
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	0018      	movs	r0, r3
 800bb84:	46bd      	mov	sp, r7
 800bb86:	b004      	add	sp, #16
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	46c0      	nop			; (mov r8, r8)
 800bb8c:	dfffffff 	.word	0xdfffffff

0800bb90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2280      	movs	r2, #128	; 0x80
 800bb9e:	5c9b      	ldrb	r3, [r3, r2]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d101      	bne.n	800bba8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bba4:	2302      	movs	r3, #2
 800bba6:	e02e      	b.n	800bc06 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2280      	movs	r2, #128	; 0x80
 800bbac:	2101      	movs	r1, #1
 800bbae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2284      	movs	r2, #132	; 0x84
 800bbb4:	2124      	movs	r1, #36	; 0x24
 800bbb6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2101      	movs	r1, #1
 800bbcc:	438a      	bics	r2, r1
 800bbce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	00db      	lsls	r3, r3, #3
 800bbd8:	08d9      	lsrs	r1, r3, #3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	430a      	orrs	r2, r1
 800bbe2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	0018      	movs	r0, r3
 800bbe8:	f000 f854 	bl	800bc94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68fa      	ldr	r2, [r7, #12]
 800bbf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2284      	movs	r2, #132	; 0x84
 800bbf8:	2120      	movs	r1, #32
 800bbfa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2280      	movs	r2, #128	; 0x80
 800bc00:	2100      	movs	r1, #0
 800bc02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	0018      	movs	r0, r3
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	b004      	add	sp, #16
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2280      	movs	r2, #128	; 0x80
 800bc1e:	5c9b      	ldrb	r3, [r3, r2]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d101      	bne.n	800bc28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc24:	2302      	movs	r3, #2
 800bc26:	e02f      	b.n	800bc88 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2280      	movs	r2, #128	; 0x80
 800bc2c:	2101      	movs	r1, #1
 800bc2e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2284      	movs	r2, #132	; 0x84
 800bc34:	2124      	movs	r1, #36	; 0x24
 800bc36:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	438a      	bics	r2, r1
 800bc4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	4a0e      	ldr	r2, [pc, #56]	; (800bc90 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800bc58:	4013      	ands	r3, r2
 800bc5a:	0019      	movs	r1, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	430a      	orrs	r2, r1
 800bc64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	0018      	movs	r0, r3
 800bc6a:	f000 f813 	bl	800bc94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2284      	movs	r2, #132	; 0x84
 800bc7a:	2120      	movs	r1, #32
 800bc7c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2280      	movs	r2, #128	; 0x80
 800bc82:	2100      	movs	r1, #0
 800bc84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	0018      	movs	r0, r3
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	b004      	add	sp, #16
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	f1ffffff 	.word	0xf1ffffff

0800bc94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc96:	b085      	sub	sp, #20
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d108      	bne.n	800bcb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	226a      	movs	r2, #106	; 0x6a
 800bca8:	2101      	movs	r1, #1
 800bcaa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2268      	movs	r2, #104	; 0x68
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bcb4:	e043      	b.n	800bd3e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bcb6:	260f      	movs	r6, #15
 800bcb8:	19bb      	adds	r3, r7, r6
 800bcba:	2208      	movs	r2, #8
 800bcbc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bcbe:	200e      	movs	r0, #14
 800bcc0:	183b      	adds	r3, r7, r0
 800bcc2:	2208      	movs	r2, #8
 800bcc4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	0e5b      	lsrs	r3, r3, #25
 800bcce:	b2da      	uxtb	r2, r3
 800bcd0:	240d      	movs	r4, #13
 800bcd2:	193b      	adds	r3, r7, r4
 800bcd4:	2107      	movs	r1, #7
 800bcd6:	400a      	ands	r2, r1
 800bcd8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	0f5b      	lsrs	r3, r3, #29
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	250c      	movs	r5, #12
 800bce6:	197b      	adds	r3, r7, r5
 800bce8:	2107      	movs	r1, #7
 800bcea:	400a      	ands	r2, r1
 800bcec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcee:	183b      	adds	r3, r7, r0
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	197a      	adds	r2, r7, r5
 800bcf4:	7812      	ldrb	r2, [r2, #0]
 800bcf6:	4914      	ldr	r1, [pc, #80]	; (800bd48 <UARTEx_SetNbDataToProcess+0xb4>)
 800bcf8:	5c8a      	ldrb	r2, [r1, r2]
 800bcfa:	435a      	muls	r2, r3
 800bcfc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800bcfe:	197b      	adds	r3, r7, r5
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	4a12      	ldr	r2, [pc, #72]	; (800bd4c <UARTEx_SetNbDataToProcess+0xb8>)
 800bd04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd06:	0019      	movs	r1, r3
 800bd08:	f7f4 faa2 	bl	8000250 <__divsi3>
 800bd0c:	0003      	movs	r3, r0
 800bd0e:	b299      	uxth	r1, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	226a      	movs	r2, #106	; 0x6a
 800bd14:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd16:	19bb      	adds	r3, r7, r6
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	193a      	adds	r2, r7, r4
 800bd1c:	7812      	ldrb	r2, [r2, #0]
 800bd1e:	490a      	ldr	r1, [pc, #40]	; (800bd48 <UARTEx_SetNbDataToProcess+0xb4>)
 800bd20:	5c8a      	ldrb	r2, [r1, r2]
 800bd22:	435a      	muls	r2, r3
 800bd24:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd26:	193b      	adds	r3, r7, r4
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	4a08      	ldr	r2, [pc, #32]	; (800bd4c <UARTEx_SetNbDataToProcess+0xb8>)
 800bd2c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd2e:	0019      	movs	r1, r3
 800bd30:	f7f4 fa8e 	bl	8000250 <__divsi3>
 800bd34:	0003      	movs	r3, r0
 800bd36:	b299      	uxth	r1, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2268      	movs	r2, #104	; 0x68
 800bd3c:	5299      	strh	r1, [r3, r2]
}
 800bd3e:	46c0      	nop			; (mov r8, r8)
 800bd40:	46bd      	mov	sp, r7
 800bd42:	b005      	add	sp, #20
 800bd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd46:	46c0      	nop			; (mov r8, r8)
 800bd48:	0800ee34 	.word	0x0800ee34
 800bd4c:	0800ee3c 	.word	0x0800ee3c

0800bd50 <__errno>:
 800bd50:	4b01      	ldr	r3, [pc, #4]	; (800bd58 <__errno+0x8>)
 800bd52:	6818      	ldr	r0, [r3, #0]
 800bd54:	4770      	bx	lr
 800bd56:	46c0      	nop			; (mov r8, r8)
 800bd58:	20000038 	.word	0x20000038

0800bd5c <__libc_init_array>:
 800bd5c:	b570      	push	{r4, r5, r6, lr}
 800bd5e:	2600      	movs	r6, #0
 800bd60:	4d0c      	ldr	r5, [pc, #48]	; (800bd94 <__libc_init_array+0x38>)
 800bd62:	4c0d      	ldr	r4, [pc, #52]	; (800bd98 <__libc_init_array+0x3c>)
 800bd64:	1b64      	subs	r4, r4, r5
 800bd66:	10a4      	asrs	r4, r4, #2
 800bd68:	42a6      	cmp	r6, r4
 800bd6a:	d109      	bne.n	800bd80 <__libc_init_array+0x24>
 800bd6c:	2600      	movs	r6, #0
 800bd6e:	f002 ff6f 	bl	800ec50 <_init>
 800bd72:	4d0a      	ldr	r5, [pc, #40]	; (800bd9c <__libc_init_array+0x40>)
 800bd74:	4c0a      	ldr	r4, [pc, #40]	; (800bda0 <__libc_init_array+0x44>)
 800bd76:	1b64      	subs	r4, r4, r5
 800bd78:	10a4      	asrs	r4, r4, #2
 800bd7a:	42a6      	cmp	r6, r4
 800bd7c:	d105      	bne.n	800bd8a <__libc_init_array+0x2e>
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	00b3      	lsls	r3, r6, #2
 800bd82:	58eb      	ldr	r3, [r5, r3]
 800bd84:	4798      	blx	r3
 800bd86:	3601      	adds	r6, #1
 800bd88:	e7ee      	b.n	800bd68 <__libc_init_array+0xc>
 800bd8a:	00b3      	lsls	r3, r6, #2
 800bd8c:	58eb      	ldr	r3, [r5, r3]
 800bd8e:	4798      	blx	r3
 800bd90:	3601      	adds	r6, #1
 800bd92:	e7f2      	b.n	800bd7a <__libc_init_array+0x1e>
 800bd94:	0800f230 	.word	0x0800f230
 800bd98:	0800f230 	.word	0x0800f230
 800bd9c:	0800f230 	.word	0x0800f230
 800bda0:	0800f234 	.word	0x0800f234

0800bda4 <malloc>:
 800bda4:	b510      	push	{r4, lr}
 800bda6:	4b03      	ldr	r3, [pc, #12]	; (800bdb4 <malloc+0x10>)
 800bda8:	0001      	movs	r1, r0
 800bdaa:	6818      	ldr	r0, [r3, #0]
 800bdac:	f000 f860 	bl	800be70 <_malloc_r>
 800bdb0:	bd10      	pop	{r4, pc}
 800bdb2:	46c0      	nop			; (mov r8, r8)
 800bdb4:	20000038 	.word	0x20000038

0800bdb8 <memcpy>:
 800bdb8:	2300      	movs	r3, #0
 800bdba:	b510      	push	{r4, lr}
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d100      	bne.n	800bdc2 <memcpy+0xa>
 800bdc0:	bd10      	pop	{r4, pc}
 800bdc2:	5ccc      	ldrb	r4, [r1, r3]
 800bdc4:	54c4      	strb	r4, [r0, r3]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	e7f8      	b.n	800bdbc <memcpy+0x4>

0800bdca <memset>:
 800bdca:	0003      	movs	r3, r0
 800bdcc:	1882      	adds	r2, r0, r2
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d100      	bne.n	800bdd4 <memset+0xa>
 800bdd2:	4770      	bx	lr
 800bdd4:	7019      	strb	r1, [r3, #0]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	e7f9      	b.n	800bdce <memset+0x4>
	...

0800bddc <_free_r>:
 800bddc:	b570      	push	{r4, r5, r6, lr}
 800bdde:	0005      	movs	r5, r0
 800bde0:	2900      	cmp	r1, #0
 800bde2:	d010      	beq.n	800be06 <_free_r+0x2a>
 800bde4:	1f0c      	subs	r4, r1, #4
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	da00      	bge.n	800bdee <_free_r+0x12>
 800bdec:	18e4      	adds	r4, r4, r3
 800bdee:	0028      	movs	r0, r5
 800bdf0:	f001 fc42 	bl	800d678 <__malloc_lock>
 800bdf4:	4a1d      	ldr	r2, [pc, #116]	; (800be6c <_free_r+0x90>)
 800bdf6:	6813      	ldr	r3, [r2, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d105      	bne.n	800be08 <_free_r+0x2c>
 800bdfc:	6063      	str	r3, [r4, #4]
 800bdfe:	6014      	str	r4, [r2, #0]
 800be00:	0028      	movs	r0, r5
 800be02:	f001 fc41 	bl	800d688 <__malloc_unlock>
 800be06:	bd70      	pop	{r4, r5, r6, pc}
 800be08:	42a3      	cmp	r3, r4
 800be0a:	d908      	bls.n	800be1e <_free_r+0x42>
 800be0c:	6821      	ldr	r1, [r4, #0]
 800be0e:	1860      	adds	r0, r4, r1
 800be10:	4283      	cmp	r3, r0
 800be12:	d1f3      	bne.n	800bdfc <_free_r+0x20>
 800be14:	6818      	ldr	r0, [r3, #0]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	1841      	adds	r1, r0, r1
 800be1a:	6021      	str	r1, [r4, #0]
 800be1c:	e7ee      	b.n	800bdfc <_free_r+0x20>
 800be1e:	001a      	movs	r2, r3
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <_free_r+0x4e>
 800be26:	42a3      	cmp	r3, r4
 800be28:	d9f9      	bls.n	800be1e <_free_r+0x42>
 800be2a:	6811      	ldr	r1, [r2, #0]
 800be2c:	1850      	adds	r0, r2, r1
 800be2e:	42a0      	cmp	r0, r4
 800be30:	d10b      	bne.n	800be4a <_free_r+0x6e>
 800be32:	6820      	ldr	r0, [r4, #0]
 800be34:	1809      	adds	r1, r1, r0
 800be36:	1850      	adds	r0, r2, r1
 800be38:	6011      	str	r1, [r2, #0]
 800be3a:	4283      	cmp	r3, r0
 800be3c:	d1e0      	bne.n	800be00 <_free_r+0x24>
 800be3e:	6818      	ldr	r0, [r3, #0]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	1841      	adds	r1, r0, r1
 800be44:	6011      	str	r1, [r2, #0]
 800be46:	6053      	str	r3, [r2, #4]
 800be48:	e7da      	b.n	800be00 <_free_r+0x24>
 800be4a:	42a0      	cmp	r0, r4
 800be4c:	d902      	bls.n	800be54 <_free_r+0x78>
 800be4e:	230c      	movs	r3, #12
 800be50:	602b      	str	r3, [r5, #0]
 800be52:	e7d5      	b.n	800be00 <_free_r+0x24>
 800be54:	6821      	ldr	r1, [r4, #0]
 800be56:	1860      	adds	r0, r4, r1
 800be58:	4283      	cmp	r3, r0
 800be5a:	d103      	bne.n	800be64 <_free_r+0x88>
 800be5c:	6818      	ldr	r0, [r3, #0]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	1841      	adds	r1, r0, r1
 800be62:	6021      	str	r1, [r4, #0]
 800be64:	6063      	str	r3, [r4, #4]
 800be66:	6054      	str	r4, [r2, #4]
 800be68:	e7ca      	b.n	800be00 <_free_r+0x24>
 800be6a:	46c0      	nop			; (mov r8, r8)
 800be6c:	2000022c 	.word	0x2000022c

0800be70 <_malloc_r>:
 800be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be72:	2303      	movs	r3, #3
 800be74:	1ccd      	adds	r5, r1, #3
 800be76:	439d      	bics	r5, r3
 800be78:	3508      	adds	r5, #8
 800be7a:	0006      	movs	r6, r0
 800be7c:	2d0c      	cmp	r5, #12
 800be7e:	d21f      	bcs.n	800bec0 <_malloc_r+0x50>
 800be80:	250c      	movs	r5, #12
 800be82:	42a9      	cmp	r1, r5
 800be84:	d81e      	bhi.n	800bec4 <_malloc_r+0x54>
 800be86:	0030      	movs	r0, r6
 800be88:	f001 fbf6 	bl	800d678 <__malloc_lock>
 800be8c:	4925      	ldr	r1, [pc, #148]	; (800bf24 <_malloc_r+0xb4>)
 800be8e:	680a      	ldr	r2, [r1, #0]
 800be90:	0014      	movs	r4, r2
 800be92:	2c00      	cmp	r4, #0
 800be94:	d11a      	bne.n	800becc <_malloc_r+0x5c>
 800be96:	4f24      	ldr	r7, [pc, #144]	; (800bf28 <_malloc_r+0xb8>)
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d104      	bne.n	800bea8 <_malloc_r+0x38>
 800be9e:	0021      	movs	r1, r4
 800bea0:	0030      	movs	r0, r6
 800bea2:	f000 fcbd 	bl	800c820 <_sbrk_r>
 800bea6:	6038      	str	r0, [r7, #0]
 800bea8:	0029      	movs	r1, r5
 800beaa:	0030      	movs	r0, r6
 800beac:	f000 fcb8 	bl	800c820 <_sbrk_r>
 800beb0:	1c43      	adds	r3, r0, #1
 800beb2:	d12b      	bne.n	800bf0c <_malloc_r+0x9c>
 800beb4:	230c      	movs	r3, #12
 800beb6:	0030      	movs	r0, r6
 800beb8:	6033      	str	r3, [r6, #0]
 800beba:	f001 fbe5 	bl	800d688 <__malloc_unlock>
 800bebe:	e003      	b.n	800bec8 <_malloc_r+0x58>
 800bec0:	2d00      	cmp	r5, #0
 800bec2:	dade      	bge.n	800be82 <_malloc_r+0x12>
 800bec4:	230c      	movs	r3, #12
 800bec6:	6033      	str	r3, [r6, #0]
 800bec8:	2000      	movs	r0, #0
 800beca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	1b5b      	subs	r3, r3, r5
 800bed0:	d419      	bmi.n	800bf06 <_malloc_r+0x96>
 800bed2:	2b0b      	cmp	r3, #11
 800bed4:	d903      	bls.n	800bede <_malloc_r+0x6e>
 800bed6:	6023      	str	r3, [r4, #0]
 800bed8:	18e4      	adds	r4, r4, r3
 800beda:	6025      	str	r5, [r4, #0]
 800bedc:	e003      	b.n	800bee6 <_malloc_r+0x76>
 800bede:	6863      	ldr	r3, [r4, #4]
 800bee0:	42a2      	cmp	r2, r4
 800bee2:	d10e      	bne.n	800bf02 <_malloc_r+0x92>
 800bee4:	600b      	str	r3, [r1, #0]
 800bee6:	0030      	movs	r0, r6
 800bee8:	f001 fbce 	bl	800d688 <__malloc_unlock>
 800beec:	0020      	movs	r0, r4
 800beee:	2207      	movs	r2, #7
 800bef0:	300b      	adds	r0, #11
 800bef2:	1d23      	adds	r3, r4, #4
 800bef4:	4390      	bics	r0, r2
 800bef6:	1ac2      	subs	r2, r0, r3
 800bef8:	4298      	cmp	r0, r3
 800befa:	d0e6      	beq.n	800beca <_malloc_r+0x5a>
 800befc:	1a1b      	subs	r3, r3, r0
 800befe:	50a3      	str	r3, [r4, r2]
 800bf00:	e7e3      	b.n	800beca <_malloc_r+0x5a>
 800bf02:	6053      	str	r3, [r2, #4]
 800bf04:	e7ef      	b.n	800bee6 <_malloc_r+0x76>
 800bf06:	0022      	movs	r2, r4
 800bf08:	6864      	ldr	r4, [r4, #4]
 800bf0a:	e7c2      	b.n	800be92 <_malloc_r+0x22>
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	1cc4      	adds	r4, r0, #3
 800bf10:	439c      	bics	r4, r3
 800bf12:	42a0      	cmp	r0, r4
 800bf14:	d0e1      	beq.n	800beda <_malloc_r+0x6a>
 800bf16:	1a21      	subs	r1, r4, r0
 800bf18:	0030      	movs	r0, r6
 800bf1a:	f000 fc81 	bl	800c820 <_sbrk_r>
 800bf1e:	1c43      	adds	r3, r0, #1
 800bf20:	d1db      	bne.n	800beda <_malloc_r+0x6a>
 800bf22:	e7c7      	b.n	800beb4 <_malloc_r+0x44>
 800bf24:	2000022c 	.word	0x2000022c
 800bf28:	20000230 	.word	0x20000230

0800bf2c <__cvt>:
 800bf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf2e:	001e      	movs	r6, r3
 800bf30:	2300      	movs	r3, #0
 800bf32:	0014      	movs	r4, r2
 800bf34:	b08b      	sub	sp, #44	; 0x2c
 800bf36:	429e      	cmp	r6, r3
 800bf38:	da04      	bge.n	800bf44 <__cvt+0x18>
 800bf3a:	2180      	movs	r1, #128	; 0x80
 800bf3c:	0609      	lsls	r1, r1, #24
 800bf3e:	1873      	adds	r3, r6, r1
 800bf40:	001e      	movs	r6, r3
 800bf42:	232d      	movs	r3, #45	; 0x2d
 800bf44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf46:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bf48:	7013      	strb	r3, [r2, #0]
 800bf4a:	2320      	movs	r3, #32
 800bf4c:	2203      	movs	r2, #3
 800bf4e:	439f      	bics	r7, r3
 800bf50:	2f46      	cmp	r7, #70	; 0x46
 800bf52:	d007      	beq.n	800bf64 <__cvt+0x38>
 800bf54:	003b      	movs	r3, r7
 800bf56:	3b45      	subs	r3, #69	; 0x45
 800bf58:	4259      	negs	r1, r3
 800bf5a:	414b      	adcs	r3, r1
 800bf5c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bf5e:	3a01      	subs	r2, #1
 800bf60:	18cb      	adds	r3, r1, r3
 800bf62:	9310      	str	r3, [sp, #64]	; 0x40
 800bf64:	ab09      	add	r3, sp, #36	; 0x24
 800bf66:	9304      	str	r3, [sp, #16]
 800bf68:	ab08      	add	r3, sp, #32
 800bf6a:	9303      	str	r3, [sp, #12]
 800bf6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf6e:	9200      	str	r2, [sp, #0]
 800bf70:	9302      	str	r3, [sp, #8]
 800bf72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf74:	0022      	movs	r2, r4
 800bf76:	9301      	str	r3, [sp, #4]
 800bf78:	0033      	movs	r3, r6
 800bf7a:	f000 fd2d 	bl	800c9d8 <_dtoa_r>
 800bf7e:	0005      	movs	r5, r0
 800bf80:	2f47      	cmp	r7, #71	; 0x47
 800bf82:	d102      	bne.n	800bf8a <__cvt+0x5e>
 800bf84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf86:	07db      	lsls	r3, r3, #31
 800bf88:	d528      	bpl.n	800bfdc <__cvt+0xb0>
 800bf8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf8c:	18eb      	adds	r3, r5, r3
 800bf8e:	9307      	str	r3, [sp, #28]
 800bf90:	2f46      	cmp	r7, #70	; 0x46
 800bf92:	d114      	bne.n	800bfbe <__cvt+0x92>
 800bf94:	782b      	ldrb	r3, [r5, #0]
 800bf96:	2b30      	cmp	r3, #48	; 0x30
 800bf98:	d10c      	bne.n	800bfb4 <__cvt+0x88>
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	0020      	movs	r0, r4
 800bfa0:	0031      	movs	r1, r6
 800bfa2:	f7f4 fa51 	bl	8000448 <__aeabi_dcmpeq>
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	d104      	bne.n	800bfb4 <__cvt+0x88>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bfae:	1a9b      	subs	r3, r3, r2
 800bfb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bfb2:	6013      	str	r3, [r2, #0]
 800bfb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfb6:	9a07      	ldr	r2, [sp, #28]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	18d3      	adds	r3, r2, r3
 800bfbc:	9307      	str	r3, [sp, #28]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	0020      	movs	r0, r4
 800bfc4:	0031      	movs	r1, r6
 800bfc6:	f7f4 fa3f 	bl	8000448 <__aeabi_dcmpeq>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d001      	beq.n	800bfd2 <__cvt+0xa6>
 800bfce:	9b07      	ldr	r3, [sp, #28]
 800bfd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bfd2:	2230      	movs	r2, #48	; 0x30
 800bfd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd6:	9907      	ldr	r1, [sp, #28]
 800bfd8:	428b      	cmp	r3, r1
 800bfda:	d306      	bcc.n	800bfea <__cvt+0xbe>
 800bfdc:	0028      	movs	r0, r5
 800bfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfe0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bfe2:	1b5b      	subs	r3, r3, r5
 800bfe4:	6013      	str	r3, [r2, #0]
 800bfe6:	b00b      	add	sp, #44	; 0x2c
 800bfe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfea:	1c59      	adds	r1, r3, #1
 800bfec:	9109      	str	r1, [sp, #36]	; 0x24
 800bfee:	701a      	strb	r2, [r3, #0]
 800bff0:	e7f0      	b.n	800bfd4 <__cvt+0xa8>

0800bff2 <__exponent>:
 800bff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bff4:	1c83      	adds	r3, r0, #2
 800bff6:	b087      	sub	sp, #28
 800bff8:	9303      	str	r3, [sp, #12]
 800bffa:	0005      	movs	r5, r0
 800bffc:	000c      	movs	r4, r1
 800bffe:	232b      	movs	r3, #43	; 0x2b
 800c000:	7002      	strb	r2, [r0, #0]
 800c002:	2900      	cmp	r1, #0
 800c004:	da01      	bge.n	800c00a <__exponent+0x18>
 800c006:	424c      	negs	r4, r1
 800c008:	3302      	adds	r3, #2
 800c00a:	706b      	strb	r3, [r5, #1]
 800c00c:	2c09      	cmp	r4, #9
 800c00e:	dd31      	ble.n	800c074 <__exponent+0x82>
 800c010:	270a      	movs	r7, #10
 800c012:	ab04      	add	r3, sp, #16
 800c014:	1dde      	adds	r6, r3, #7
 800c016:	0020      	movs	r0, r4
 800c018:	0039      	movs	r1, r7
 800c01a:	9601      	str	r6, [sp, #4]
 800c01c:	f7f4 f9fe 	bl	800041c <__aeabi_idivmod>
 800c020:	3e01      	subs	r6, #1
 800c022:	3130      	adds	r1, #48	; 0x30
 800c024:	0020      	movs	r0, r4
 800c026:	7031      	strb	r1, [r6, #0]
 800c028:	0039      	movs	r1, r7
 800c02a:	9402      	str	r4, [sp, #8]
 800c02c:	f7f4 f910 	bl	8000250 <__divsi3>
 800c030:	9b02      	ldr	r3, [sp, #8]
 800c032:	0004      	movs	r4, r0
 800c034:	2b63      	cmp	r3, #99	; 0x63
 800c036:	dcee      	bgt.n	800c016 <__exponent+0x24>
 800c038:	9b01      	ldr	r3, [sp, #4]
 800c03a:	3430      	adds	r4, #48	; 0x30
 800c03c:	1e9a      	subs	r2, r3, #2
 800c03e:	0013      	movs	r3, r2
 800c040:	9903      	ldr	r1, [sp, #12]
 800c042:	7014      	strb	r4, [r2, #0]
 800c044:	a804      	add	r0, sp, #16
 800c046:	3007      	adds	r0, #7
 800c048:	4298      	cmp	r0, r3
 800c04a:	d80e      	bhi.n	800c06a <__exponent+0x78>
 800c04c:	ab04      	add	r3, sp, #16
 800c04e:	3307      	adds	r3, #7
 800c050:	2000      	movs	r0, #0
 800c052:	429a      	cmp	r2, r3
 800c054:	d804      	bhi.n	800c060 <__exponent+0x6e>
 800c056:	ab04      	add	r3, sp, #16
 800c058:	3009      	adds	r0, #9
 800c05a:	18c0      	adds	r0, r0, r3
 800c05c:	9b01      	ldr	r3, [sp, #4]
 800c05e:	1ac0      	subs	r0, r0, r3
 800c060:	9b03      	ldr	r3, [sp, #12]
 800c062:	1818      	adds	r0, r3, r0
 800c064:	1b40      	subs	r0, r0, r5
 800c066:	b007      	add	sp, #28
 800c068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c06a:	7818      	ldrb	r0, [r3, #0]
 800c06c:	3301      	adds	r3, #1
 800c06e:	7008      	strb	r0, [r1, #0]
 800c070:	3101      	adds	r1, #1
 800c072:	e7e7      	b.n	800c044 <__exponent+0x52>
 800c074:	2330      	movs	r3, #48	; 0x30
 800c076:	18e4      	adds	r4, r4, r3
 800c078:	70ab      	strb	r3, [r5, #2]
 800c07a:	1d28      	adds	r0, r5, #4
 800c07c:	70ec      	strb	r4, [r5, #3]
 800c07e:	e7f1      	b.n	800c064 <__exponent+0x72>

0800c080 <_printf_float>:
 800c080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c082:	b095      	sub	sp, #84	; 0x54
 800c084:	000c      	movs	r4, r1
 800c086:	9208      	str	r2, [sp, #32]
 800c088:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c08a:	9309      	str	r3, [sp, #36]	; 0x24
 800c08c:	0007      	movs	r7, r0
 800c08e:	f001 fad1 	bl	800d634 <_localeconv_r>
 800c092:	6803      	ldr	r3, [r0, #0]
 800c094:	0018      	movs	r0, r3
 800c096:	930b      	str	r3, [sp, #44]	; 0x2c
 800c098:	f7f4 f834 	bl	8000104 <strlen>
 800c09c:	2300      	movs	r3, #0
 800c09e:	9312      	str	r3, [sp, #72]	; 0x48
 800c0a0:	7e23      	ldrb	r3, [r4, #24]
 800c0a2:	2207      	movs	r2, #7
 800c0a4:	001e      	movs	r6, r3
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	900d      	str	r0, [sp, #52]	; 0x34
 800c0aa:	930c      	str	r3, [sp, #48]	; 0x30
 800c0ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c0ae:	682b      	ldr	r3, [r5, #0]
 800c0b0:	05c9      	lsls	r1, r1, #23
 800c0b2:	d547      	bpl.n	800c144 <_printf_float+0xc4>
 800c0b4:	189b      	adds	r3, r3, r2
 800c0b6:	4393      	bics	r3, r2
 800c0b8:	001a      	movs	r2, r3
 800c0ba:	3208      	adds	r2, #8
 800c0bc:	602a      	str	r2, [r5, #0]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	64a2      	str	r2, [r4, #72]	; 0x48
 800c0c4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c0ca:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800c0cc:	930a      	str	r3, [sp, #40]	; 0x28
 800c0ce:	006b      	lsls	r3, r5, #1
 800c0d0:	085b      	lsrs	r3, r3, #1
 800c0d2:	930e      	str	r3, [sp, #56]	; 0x38
 800c0d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0d6:	4ba8      	ldr	r3, [pc, #672]	; (800c378 <_printf_float+0x2f8>)
 800c0d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c0da:	4252      	negs	r2, r2
 800c0dc:	f7f6 f83c 	bl	8002158 <__aeabi_dcmpun>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d131      	bne.n	800c148 <_printf_float+0xc8>
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	4ba4      	ldr	r3, [pc, #656]	; (800c378 <_printf_float+0x2f8>)
 800c0e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c0ec:	4252      	negs	r2, r2
 800c0ee:	f7f4 f9bb 	bl	8000468 <__aeabi_dcmple>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d128      	bne.n	800c148 <_printf_float+0xc8>
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	0029      	movs	r1, r5
 800c0fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0fe:	f7f4 f9a9 	bl	8000454 <__aeabi_dcmplt>
 800c102:	2800      	cmp	r0, #0
 800c104:	d003      	beq.n	800c10e <_printf_float+0x8e>
 800c106:	0023      	movs	r3, r4
 800c108:	222d      	movs	r2, #45	; 0x2d
 800c10a:	3343      	adds	r3, #67	; 0x43
 800c10c:	701a      	strb	r2, [r3, #0]
 800c10e:	4d9b      	ldr	r5, [pc, #620]	; (800c37c <_printf_float+0x2fc>)
 800c110:	2e47      	cmp	r6, #71	; 0x47
 800c112:	d900      	bls.n	800c116 <_printf_float+0x96>
 800c114:	4d9a      	ldr	r5, [pc, #616]	; (800c380 <_printf_float+0x300>)
 800c116:	2303      	movs	r3, #3
 800c118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c11a:	6123      	str	r3, [r4, #16]
 800c11c:	3301      	adds	r3, #1
 800c11e:	439a      	bics	r2, r3
 800c120:	2300      	movs	r3, #0
 800c122:	6022      	str	r2, [r4, #0]
 800c124:	930a      	str	r3, [sp, #40]	; 0x28
 800c126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c128:	0021      	movs	r1, r4
 800c12a:	9300      	str	r3, [sp, #0]
 800c12c:	0038      	movs	r0, r7
 800c12e:	9b08      	ldr	r3, [sp, #32]
 800c130:	aa13      	add	r2, sp, #76	; 0x4c
 800c132:	f000 f9f3 	bl	800c51c <_printf_common>
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	d000      	beq.n	800c13c <_printf_float+0xbc>
 800c13a:	e09e      	b.n	800c27a <_printf_float+0x1fa>
 800c13c:	2001      	movs	r0, #1
 800c13e:	4240      	negs	r0, r0
 800c140:	b015      	add	sp, #84	; 0x54
 800c142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c144:	3307      	adds	r3, #7
 800c146:	e7b6      	b.n	800c0b6 <_printf_float+0x36>
 800c148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c14a:	002b      	movs	r3, r5
 800c14c:	0010      	movs	r0, r2
 800c14e:	0029      	movs	r1, r5
 800c150:	f7f6 f802 	bl	8002158 <__aeabi_dcmpun>
 800c154:	2800      	cmp	r0, #0
 800c156:	d00a      	beq.n	800c16e <_printf_float+0xee>
 800c158:	2d00      	cmp	r5, #0
 800c15a:	da03      	bge.n	800c164 <_printf_float+0xe4>
 800c15c:	0023      	movs	r3, r4
 800c15e:	222d      	movs	r2, #45	; 0x2d
 800c160:	3343      	adds	r3, #67	; 0x43
 800c162:	701a      	strb	r2, [r3, #0]
 800c164:	4d87      	ldr	r5, [pc, #540]	; (800c384 <_printf_float+0x304>)
 800c166:	2e47      	cmp	r6, #71	; 0x47
 800c168:	d9d5      	bls.n	800c116 <_printf_float+0x96>
 800c16a:	4d87      	ldr	r5, [pc, #540]	; (800c388 <_printf_float+0x308>)
 800c16c:	e7d3      	b.n	800c116 <_printf_float+0x96>
 800c16e:	2220      	movs	r2, #32
 800c170:	0031      	movs	r1, r6
 800c172:	6863      	ldr	r3, [r4, #4]
 800c174:	4391      	bics	r1, r2
 800c176:	910e      	str	r1, [sp, #56]	; 0x38
 800c178:	1c5a      	adds	r2, r3, #1
 800c17a:	d147      	bne.n	800c20c <_printf_float+0x18c>
 800c17c:	3307      	adds	r3, #7
 800c17e:	6063      	str	r3, [r4, #4]
 800c180:	2380      	movs	r3, #128	; 0x80
 800c182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c184:	00db      	lsls	r3, r3, #3
 800c186:	4313      	orrs	r3, r2
 800c188:	2200      	movs	r2, #0
 800c18a:	9206      	str	r2, [sp, #24]
 800c18c:	aa12      	add	r2, sp, #72	; 0x48
 800c18e:	9205      	str	r2, [sp, #20]
 800c190:	aa11      	add	r2, sp, #68	; 0x44
 800c192:	9203      	str	r2, [sp, #12]
 800c194:	2223      	movs	r2, #35	; 0x23
 800c196:	a908      	add	r1, sp, #32
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	9301      	str	r3, [sp, #4]
 800c19c:	6863      	ldr	r3, [r4, #4]
 800c19e:	1852      	adds	r2, r2, r1
 800c1a0:	9202      	str	r2, [sp, #8]
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	0038      	movs	r0, r7
 800c1a6:	002b      	movs	r3, r5
 800c1a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1aa:	9604      	str	r6, [sp, #16]
 800c1ac:	f7ff febe 	bl	800bf2c <__cvt>
 800c1b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1b2:	0005      	movs	r5, r0
 800c1b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c1b6:	2b47      	cmp	r3, #71	; 0x47
 800c1b8:	d108      	bne.n	800c1cc <_printf_float+0x14c>
 800c1ba:	1ccb      	adds	r3, r1, #3
 800c1bc:	db02      	blt.n	800c1c4 <_printf_float+0x144>
 800c1be:	6863      	ldr	r3, [r4, #4]
 800c1c0:	4299      	cmp	r1, r3
 800c1c2:	dd46      	ble.n	800c252 <_printf_float+0x1d2>
 800c1c4:	0033      	movs	r3, r6
 800c1c6:	3b02      	subs	r3, #2
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	001e      	movs	r6, r3
 800c1cc:	2e65      	cmp	r6, #101	; 0x65
 800c1ce:	d824      	bhi.n	800c21a <_printf_float+0x19a>
 800c1d0:	0020      	movs	r0, r4
 800c1d2:	0032      	movs	r2, r6
 800c1d4:	3901      	subs	r1, #1
 800c1d6:	3050      	adds	r0, #80	; 0x50
 800c1d8:	9111      	str	r1, [sp, #68]	; 0x44
 800c1da:	f7ff ff0a 	bl	800bff2 <__exponent>
 800c1de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1e0:	900a      	str	r0, [sp, #40]	; 0x28
 800c1e2:	1813      	adds	r3, r2, r0
 800c1e4:	6123      	str	r3, [r4, #16]
 800c1e6:	2a01      	cmp	r2, #1
 800c1e8:	dc02      	bgt.n	800c1f0 <_printf_float+0x170>
 800c1ea:	6822      	ldr	r2, [r4, #0]
 800c1ec:	07d2      	lsls	r2, r2, #31
 800c1ee:	d501      	bpl.n	800c1f4 <_printf_float+0x174>
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	6123      	str	r3, [r4, #16]
 800c1f4:	2323      	movs	r3, #35	; 0x23
 800c1f6:	aa08      	add	r2, sp, #32
 800c1f8:	189b      	adds	r3, r3, r2
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d100      	bne.n	800c202 <_printf_float+0x182>
 800c200:	e791      	b.n	800c126 <_printf_float+0xa6>
 800c202:	0023      	movs	r3, r4
 800c204:	222d      	movs	r2, #45	; 0x2d
 800c206:	3343      	adds	r3, #67	; 0x43
 800c208:	701a      	strb	r2, [r3, #0]
 800c20a:	e78c      	b.n	800c126 <_printf_float+0xa6>
 800c20c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c20e:	2a47      	cmp	r2, #71	; 0x47
 800c210:	d1b6      	bne.n	800c180 <_printf_float+0x100>
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1b4      	bne.n	800c180 <_printf_float+0x100>
 800c216:	3301      	adds	r3, #1
 800c218:	e7b1      	b.n	800c17e <_printf_float+0xfe>
 800c21a:	2e66      	cmp	r6, #102	; 0x66
 800c21c:	d11b      	bne.n	800c256 <_printf_float+0x1d6>
 800c21e:	6863      	ldr	r3, [r4, #4]
 800c220:	2900      	cmp	r1, #0
 800c222:	dd0d      	ble.n	800c240 <_printf_float+0x1c0>
 800c224:	6121      	str	r1, [r4, #16]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <_printf_float+0x1b0>
 800c22a:	6822      	ldr	r2, [r4, #0]
 800c22c:	07d2      	lsls	r2, r2, #31
 800c22e:	d502      	bpl.n	800c236 <_printf_float+0x1b6>
 800c230:	3301      	adds	r3, #1
 800c232:	1859      	adds	r1, r3, r1
 800c234:	6121      	str	r1, [r4, #16]
 800c236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c238:	65a3      	str	r3, [r4, #88]	; 0x58
 800c23a:	2300      	movs	r3, #0
 800c23c:	930a      	str	r3, [sp, #40]	; 0x28
 800c23e:	e7d9      	b.n	800c1f4 <_printf_float+0x174>
 800c240:	2b00      	cmp	r3, #0
 800c242:	d103      	bne.n	800c24c <_printf_float+0x1cc>
 800c244:	2201      	movs	r2, #1
 800c246:	6821      	ldr	r1, [r4, #0]
 800c248:	4211      	tst	r1, r2
 800c24a:	d000      	beq.n	800c24e <_printf_float+0x1ce>
 800c24c:	1c9a      	adds	r2, r3, #2
 800c24e:	6122      	str	r2, [r4, #16]
 800c250:	e7f1      	b.n	800c236 <_printf_float+0x1b6>
 800c252:	2367      	movs	r3, #103	; 0x67
 800c254:	001e      	movs	r6, r3
 800c256:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c258:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c25a:	4293      	cmp	r3, r2
 800c25c:	db06      	blt.n	800c26c <_printf_float+0x1ec>
 800c25e:	6822      	ldr	r2, [r4, #0]
 800c260:	6123      	str	r3, [r4, #16]
 800c262:	07d2      	lsls	r2, r2, #31
 800c264:	d5e7      	bpl.n	800c236 <_printf_float+0x1b6>
 800c266:	3301      	adds	r3, #1
 800c268:	6123      	str	r3, [r4, #16]
 800c26a:	e7e4      	b.n	800c236 <_printf_float+0x1b6>
 800c26c:	2101      	movs	r1, #1
 800c26e:	2b00      	cmp	r3, #0
 800c270:	dc01      	bgt.n	800c276 <_printf_float+0x1f6>
 800c272:	1849      	adds	r1, r1, r1
 800c274:	1ac9      	subs	r1, r1, r3
 800c276:	1852      	adds	r2, r2, r1
 800c278:	e7e9      	b.n	800c24e <_printf_float+0x1ce>
 800c27a:	6822      	ldr	r2, [r4, #0]
 800c27c:	0553      	lsls	r3, r2, #21
 800c27e:	d408      	bmi.n	800c292 <_printf_float+0x212>
 800c280:	6923      	ldr	r3, [r4, #16]
 800c282:	002a      	movs	r2, r5
 800c284:	0038      	movs	r0, r7
 800c286:	9908      	ldr	r1, [sp, #32]
 800c288:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c28a:	47a8      	blx	r5
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	d129      	bne.n	800c2e4 <_printf_float+0x264>
 800c290:	e754      	b.n	800c13c <_printf_float+0xbc>
 800c292:	2e65      	cmp	r6, #101	; 0x65
 800c294:	d800      	bhi.n	800c298 <_printf_float+0x218>
 800c296:	e0ec      	b.n	800c472 <_printf_float+0x3f2>
 800c298:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c29a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c29c:	2200      	movs	r2, #0
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f7f4 f8d2 	bl	8000448 <__aeabi_dcmpeq>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d034      	beq.n	800c312 <_printf_float+0x292>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	0038      	movs	r0, r7
 800c2ac:	4a37      	ldr	r2, [pc, #220]	; (800c38c <_printf_float+0x30c>)
 800c2ae:	9908      	ldr	r1, [sp, #32]
 800c2b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c2b2:	47a8      	blx	r5
 800c2b4:	1c43      	adds	r3, r0, #1
 800c2b6:	d100      	bne.n	800c2ba <_printf_float+0x23a>
 800c2b8:	e740      	b.n	800c13c <_printf_float+0xbc>
 800c2ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	db02      	blt.n	800c2c8 <_printf_float+0x248>
 800c2c2:	6823      	ldr	r3, [r4, #0]
 800c2c4:	07db      	lsls	r3, r3, #31
 800c2c6:	d50d      	bpl.n	800c2e4 <_printf_float+0x264>
 800c2c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c2ca:	0038      	movs	r0, r7
 800c2cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2d0:	9908      	ldr	r1, [sp, #32]
 800c2d2:	47a8      	blx	r5
 800c2d4:	2500      	movs	r5, #0
 800c2d6:	1c43      	adds	r3, r0, #1
 800c2d8:	d100      	bne.n	800c2dc <_printf_float+0x25c>
 800c2da:	e72f      	b.n	800c13c <_printf_float+0xbc>
 800c2dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	42ab      	cmp	r3, r5
 800c2e2:	dc0a      	bgt.n	800c2fa <_printf_float+0x27a>
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	079b      	lsls	r3, r3, #30
 800c2e8:	d500      	bpl.n	800c2ec <_printf_float+0x26c>
 800c2ea:	e114      	b.n	800c516 <_printf_float+0x496>
 800c2ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2ee:	68e0      	ldr	r0, [r4, #12]
 800c2f0:	4298      	cmp	r0, r3
 800c2f2:	db00      	blt.n	800c2f6 <_printf_float+0x276>
 800c2f4:	e724      	b.n	800c140 <_printf_float+0xc0>
 800c2f6:	0018      	movs	r0, r3
 800c2f8:	e722      	b.n	800c140 <_printf_float+0xc0>
 800c2fa:	0022      	movs	r2, r4
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	0038      	movs	r0, r7
 800c300:	9908      	ldr	r1, [sp, #32]
 800c302:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c304:	321a      	adds	r2, #26
 800c306:	47b0      	blx	r6
 800c308:	1c43      	adds	r3, r0, #1
 800c30a:	d100      	bne.n	800c30e <_printf_float+0x28e>
 800c30c:	e716      	b.n	800c13c <_printf_float+0xbc>
 800c30e:	3501      	adds	r5, #1
 800c310:	e7e4      	b.n	800c2dc <_printf_float+0x25c>
 800c312:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c314:	2b00      	cmp	r3, #0
 800c316:	dc3b      	bgt.n	800c390 <_printf_float+0x310>
 800c318:	2301      	movs	r3, #1
 800c31a:	0038      	movs	r0, r7
 800c31c:	4a1b      	ldr	r2, [pc, #108]	; (800c38c <_printf_float+0x30c>)
 800c31e:	9908      	ldr	r1, [sp, #32]
 800c320:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c322:	47b0      	blx	r6
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d100      	bne.n	800c32a <_printf_float+0x2aa>
 800c328:	e708      	b.n	800c13c <_printf_float+0xbc>
 800c32a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c32c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c32e:	4313      	orrs	r3, r2
 800c330:	d102      	bne.n	800c338 <_printf_float+0x2b8>
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	07db      	lsls	r3, r3, #31
 800c336:	d5d5      	bpl.n	800c2e4 <_printf_float+0x264>
 800c338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c33a:	0038      	movs	r0, r7
 800c33c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c33e:	9908      	ldr	r1, [sp, #32]
 800c340:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c342:	47b0      	blx	r6
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	d100      	bne.n	800c34a <_printf_float+0x2ca>
 800c348:	e6f8      	b.n	800c13c <_printf_float+0xbc>
 800c34a:	2300      	movs	r3, #0
 800c34c:	930a      	str	r3, [sp, #40]	; 0x28
 800c34e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c352:	425b      	negs	r3, r3
 800c354:	4293      	cmp	r3, r2
 800c356:	dc01      	bgt.n	800c35c <_printf_float+0x2dc>
 800c358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c35a:	e792      	b.n	800c282 <_printf_float+0x202>
 800c35c:	0022      	movs	r2, r4
 800c35e:	2301      	movs	r3, #1
 800c360:	0038      	movs	r0, r7
 800c362:	9908      	ldr	r1, [sp, #32]
 800c364:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c366:	321a      	adds	r2, #26
 800c368:	47b0      	blx	r6
 800c36a:	1c43      	adds	r3, r0, #1
 800c36c:	d100      	bne.n	800c370 <_printf_float+0x2f0>
 800c36e:	e6e5      	b.n	800c13c <_printf_float+0xbc>
 800c370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c372:	3301      	adds	r3, #1
 800c374:	e7ea      	b.n	800c34c <_printf_float+0x2cc>
 800c376:	46c0      	nop			; (mov r8, r8)
 800c378:	7fefffff 	.word	0x7fefffff
 800c37c:	0800ee48 	.word	0x0800ee48
 800c380:	0800ee4c 	.word	0x0800ee4c
 800c384:	0800ee50 	.word	0x0800ee50
 800c388:	0800ee54 	.word	0x0800ee54
 800c38c:	0800ee58 	.word	0x0800ee58
 800c390:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c394:	920a      	str	r2, [sp, #40]	; 0x28
 800c396:	429a      	cmp	r2, r3
 800c398:	dd00      	ble.n	800c39c <_printf_float+0x31c>
 800c39a:	930a      	str	r3, [sp, #40]	; 0x28
 800c39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	dc3d      	bgt.n	800c41e <_printf_float+0x39e>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	930e      	str	r3, [sp, #56]	; 0x38
 800c3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a8:	43db      	mvns	r3, r3
 800c3aa:	17db      	asrs	r3, r3, #31
 800c3ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3b2:	930c      	str	r3, [sp, #48]	; 0x30
 800c3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3b6:	4013      	ands	r3, r2
 800c3b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	dc36      	bgt.n	800c430 <_printf_float+0x3b0>
 800c3c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	db40      	blt.n	800c44c <_printf_float+0x3cc>
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	07db      	lsls	r3, r3, #31
 800c3ce:	d43d      	bmi.n	800c44c <_printf_float+0x3cc>
 800c3d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	1a52      	subs	r2, r2, r1
 800c3da:	920a      	str	r2, [sp, #40]	; 0x28
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	dd00      	ble.n	800c3e2 <_printf_float+0x362>
 800c3e0:	930a      	str	r3, [sp, #40]	; 0x28
 800c3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	dc3a      	bgt.n	800c45e <_printf_float+0x3de>
 800c3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ea:	2500      	movs	r5, #0
 800c3ec:	43db      	mvns	r3, r3
 800c3ee:	17db      	asrs	r3, r3, #31
 800c3f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c3f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c3f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c3f8:	1a9b      	subs	r3, r3, r2
 800c3fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3fc:	400a      	ands	r2, r1
 800c3fe:	1a9b      	subs	r3, r3, r2
 800c400:	42ab      	cmp	r3, r5
 800c402:	dc00      	bgt.n	800c406 <_printf_float+0x386>
 800c404:	e76e      	b.n	800c2e4 <_printf_float+0x264>
 800c406:	0022      	movs	r2, r4
 800c408:	2301      	movs	r3, #1
 800c40a:	0038      	movs	r0, r7
 800c40c:	9908      	ldr	r1, [sp, #32]
 800c40e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c410:	321a      	adds	r2, #26
 800c412:	47b0      	blx	r6
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	d100      	bne.n	800c41a <_printf_float+0x39a>
 800c418:	e690      	b.n	800c13c <_printf_float+0xbc>
 800c41a:	3501      	adds	r5, #1
 800c41c:	e7e9      	b.n	800c3f2 <_printf_float+0x372>
 800c41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c420:	002a      	movs	r2, r5
 800c422:	0038      	movs	r0, r7
 800c424:	9908      	ldr	r1, [sp, #32]
 800c426:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c428:	47b0      	blx	r6
 800c42a:	1c43      	adds	r3, r0, #1
 800c42c:	d1b9      	bne.n	800c3a2 <_printf_float+0x322>
 800c42e:	e685      	b.n	800c13c <_printf_float+0xbc>
 800c430:	0022      	movs	r2, r4
 800c432:	2301      	movs	r3, #1
 800c434:	0038      	movs	r0, r7
 800c436:	9908      	ldr	r1, [sp, #32]
 800c438:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c43a:	321a      	adds	r2, #26
 800c43c:	47b0      	blx	r6
 800c43e:	1c43      	adds	r3, r0, #1
 800c440:	d100      	bne.n	800c444 <_printf_float+0x3c4>
 800c442:	e67b      	b.n	800c13c <_printf_float+0xbc>
 800c444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c446:	3301      	adds	r3, #1
 800c448:	930e      	str	r3, [sp, #56]	; 0x38
 800c44a:	e7b0      	b.n	800c3ae <_printf_float+0x32e>
 800c44c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c44e:	0038      	movs	r0, r7
 800c450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c452:	9908      	ldr	r1, [sp, #32]
 800c454:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c456:	47b0      	blx	r6
 800c458:	1c43      	adds	r3, r0, #1
 800c45a:	d1b9      	bne.n	800c3d0 <_printf_float+0x350>
 800c45c:	e66e      	b.n	800c13c <_printf_float+0xbc>
 800c45e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c460:	0038      	movs	r0, r7
 800c462:	18ea      	adds	r2, r5, r3
 800c464:	9908      	ldr	r1, [sp, #32]
 800c466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c468:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c46a:	47a8      	blx	r5
 800c46c:	1c43      	adds	r3, r0, #1
 800c46e:	d1bb      	bne.n	800c3e8 <_printf_float+0x368>
 800c470:	e664      	b.n	800c13c <_printf_float+0xbc>
 800c472:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c474:	2b01      	cmp	r3, #1
 800c476:	dc02      	bgt.n	800c47e <_printf_float+0x3fe>
 800c478:	2301      	movs	r3, #1
 800c47a:	421a      	tst	r2, r3
 800c47c:	d038      	beq.n	800c4f0 <_printf_float+0x470>
 800c47e:	2301      	movs	r3, #1
 800c480:	002a      	movs	r2, r5
 800c482:	0038      	movs	r0, r7
 800c484:	9908      	ldr	r1, [sp, #32]
 800c486:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c488:	47b0      	blx	r6
 800c48a:	1c43      	adds	r3, r0, #1
 800c48c:	d100      	bne.n	800c490 <_printf_float+0x410>
 800c48e:	e655      	b.n	800c13c <_printf_float+0xbc>
 800c490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c492:	0038      	movs	r0, r7
 800c494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c496:	9908      	ldr	r1, [sp, #32]
 800c498:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c49a:	47b0      	blx	r6
 800c49c:	1c43      	adds	r3, r0, #1
 800c49e:	d100      	bne.n	800c4a2 <_printf_float+0x422>
 800c4a0:	e64c      	b.n	800c13c <_printf_float+0xbc>
 800c4a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c4a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f7f3 ffcd 	bl	8000448 <__aeabi_dcmpeq>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d11c      	bne.n	800c4ec <_printf_float+0x46c>
 800c4b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4b4:	1c6a      	adds	r2, r5, #1
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	0038      	movs	r0, r7
 800c4ba:	9908      	ldr	r1, [sp, #32]
 800c4bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c4be:	47a8      	blx	r5
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	d10f      	bne.n	800c4e4 <_printf_float+0x464>
 800c4c4:	e63a      	b.n	800c13c <_printf_float+0xbc>
 800c4c6:	0022      	movs	r2, r4
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	0038      	movs	r0, r7
 800c4cc:	9908      	ldr	r1, [sp, #32]
 800c4ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c4d0:	321a      	adds	r2, #26
 800c4d2:	47b0      	blx	r6
 800c4d4:	1c43      	adds	r3, r0, #1
 800c4d6:	d100      	bne.n	800c4da <_printf_float+0x45a>
 800c4d8:	e630      	b.n	800c13c <_printf_float+0xbc>
 800c4da:	3501      	adds	r5, #1
 800c4dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	42ab      	cmp	r3, r5
 800c4e2:	dcf0      	bgt.n	800c4c6 <_printf_float+0x446>
 800c4e4:	0022      	movs	r2, r4
 800c4e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4e8:	3250      	adds	r2, #80	; 0x50
 800c4ea:	e6cb      	b.n	800c284 <_printf_float+0x204>
 800c4ec:	2500      	movs	r5, #0
 800c4ee:	e7f5      	b.n	800c4dc <_printf_float+0x45c>
 800c4f0:	002a      	movs	r2, r5
 800c4f2:	e7e1      	b.n	800c4b8 <_printf_float+0x438>
 800c4f4:	0022      	movs	r2, r4
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	0038      	movs	r0, r7
 800c4fa:	9908      	ldr	r1, [sp, #32]
 800c4fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c4fe:	3219      	adds	r2, #25
 800c500:	47b0      	blx	r6
 800c502:	1c43      	adds	r3, r0, #1
 800c504:	d100      	bne.n	800c508 <_printf_float+0x488>
 800c506:	e619      	b.n	800c13c <_printf_float+0xbc>
 800c508:	3501      	adds	r5, #1
 800c50a:	68e3      	ldr	r3, [r4, #12]
 800c50c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c50e:	1a9b      	subs	r3, r3, r2
 800c510:	42ab      	cmp	r3, r5
 800c512:	dcef      	bgt.n	800c4f4 <_printf_float+0x474>
 800c514:	e6ea      	b.n	800c2ec <_printf_float+0x26c>
 800c516:	2500      	movs	r5, #0
 800c518:	e7f7      	b.n	800c50a <_printf_float+0x48a>
 800c51a:	46c0      	nop			; (mov r8, r8)

0800c51c <_printf_common>:
 800c51c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c51e:	0015      	movs	r5, r2
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	688a      	ldr	r2, [r1, #8]
 800c524:	690b      	ldr	r3, [r1, #16]
 800c526:	000c      	movs	r4, r1
 800c528:	9000      	str	r0, [sp, #0]
 800c52a:	4293      	cmp	r3, r2
 800c52c:	da00      	bge.n	800c530 <_printf_common+0x14>
 800c52e:	0013      	movs	r3, r2
 800c530:	0022      	movs	r2, r4
 800c532:	602b      	str	r3, [r5, #0]
 800c534:	3243      	adds	r2, #67	; 0x43
 800c536:	7812      	ldrb	r2, [r2, #0]
 800c538:	2a00      	cmp	r2, #0
 800c53a:	d001      	beq.n	800c540 <_printf_common+0x24>
 800c53c:	3301      	adds	r3, #1
 800c53e:	602b      	str	r3, [r5, #0]
 800c540:	6823      	ldr	r3, [r4, #0]
 800c542:	069b      	lsls	r3, r3, #26
 800c544:	d502      	bpl.n	800c54c <_printf_common+0x30>
 800c546:	682b      	ldr	r3, [r5, #0]
 800c548:	3302      	adds	r3, #2
 800c54a:	602b      	str	r3, [r5, #0]
 800c54c:	6822      	ldr	r2, [r4, #0]
 800c54e:	2306      	movs	r3, #6
 800c550:	0017      	movs	r7, r2
 800c552:	401f      	ands	r7, r3
 800c554:	421a      	tst	r2, r3
 800c556:	d027      	beq.n	800c5a8 <_printf_common+0x8c>
 800c558:	0023      	movs	r3, r4
 800c55a:	3343      	adds	r3, #67	; 0x43
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	1e5a      	subs	r2, r3, #1
 800c560:	4193      	sbcs	r3, r2
 800c562:	6822      	ldr	r2, [r4, #0]
 800c564:	0692      	lsls	r2, r2, #26
 800c566:	d430      	bmi.n	800c5ca <_printf_common+0xae>
 800c568:	0022      	movs	r2, r4
 800c56a:	9901      	ldr	r1, [sp, #4]
 800c56c:	9800      	ldr	r0, [sp, #0]
 800c56e:	9e08      	ldr	r6, [sp, #32]
 800c570:	3243      	adds	r2, #67	; 0x43
 800c572:	47b0      	blx	r6
 800c574:	1c43      	adds	r3, r0, #1
 800c576:	d025      	beq.n	800c5c4 <_printf_common+0xa8>
 800c578:	2306      	movs	r3, #6
 800c57a:	6820      	ldr	r0, [r4, #0]
 800c57c:	682a      	ldr	r2, [r5, #0]
 800c57e:	68e1      	ldr	r1, [r4, #12]
 800c580:	2500      	movs	r5, #0
 800c582:	4003      	ands	r3, r0
 800c584:	2b04      	cmp	r3, #4
 800c586:	d103      	bne.n	800c590 <_printf_common+0x74>
 800c588:	1a8d      	subs	r5, r1, r2
 800c58a:	43eb      	mvns	r3, r5
 800c58c:	17db      	asrs	r3, r3, #31
 800c58e:	401d      	ands	r5, r3
 800c590:	68a3      	ldr	r3, [r4, #8]
 800c592:	6922      	ldr	r2, [r4, #16]
 800c594:	4293      	cmp	r3, r2
 800c596:	dd01      	ble.n	800c59c <_printf_common+0x80>
 800c598:	1a9b      	subs	r3, r3, r2
 800c59a:	18ed      	adds	r5, r5, r3
 800c59c:	2700      	movs	r7, #0
 800c59e:	42bd      	cmp	r5, r7
 800c5a0:	d120      	bne.n	800c5e4 <_printf_common+0xc8>
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	e010      	b.n	800c5c8 <_printf_common+0xac>
 800c5a6:	3701      	adds	r7, #1
 800c5a8:	68e3      	ldr	r3, [r4, #12]
 800c5aa:	682a      	ldr	r2, [r5, #0]
 800c5ac:	1a9b      	subs	r3, r3, r2
 800c5ae:	42bb      	cmp	r3, r7
 800c5b0:	ddd2      	ble.n	800c558 <_printf_common+0x3c>
 800c5b2:	0022      	movs	r2, r4
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	9901      	ldr	r1, [sp, #4]
 800c5b8:	9800      	ldr	r0, [sp, #0]
 800c5ba:	9e08      	ldr	r6, [sp, #32]
 800c5bc:	3219      	adds	r2, #25
 800c5be:	47b0      	blx	r6
 800c5c0:	1c43      	adds	r3, r0, #1
 800c5c2:	d1f0      	bne.n	800c5a6 <_printf_common+0x8a>
 800c5c4:	2001      	movs	r0, #1
 800c5c6:	4240      	negs	r0, r0
 800c5c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c5ca:	2030      	movs	r0, #48	; 0x30
 800c5cc:	18e1      	adds	r1, r4, r3
 800c5ce:	3143      	adds	r1, #67	; 0x43
 800c5d0:	7008      	strb	r0, [r1, #0]
 800c5d2:	0021      	movs	r1, r4
 800c5d4:	1c5a      	adds	r2, r3, #1
 800c5d6:	3145      	adds	r1, #69	; 0x45
 800c5d8:	7809      	ldrb	r1, [r1, #0]
 800c5da:	18a2      	adds	r2, r4, r2
 800c5dc:	3243      	adds	r2, #67	; 0x43
 800c5de:	3302      	adds	r3, #2
 800c5e0:	7011      	strb	r1, [r2, #0]
 800c5e2:	e7c1      	b.n	800c568 <_printf_common+0x4c>
 800c5e4:	0022      	movs	r2, r4
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	9901      	ldr	r1, [sp, #4]
 800c5ea:	9800      	ldr	r0, [sp, #0]
 800c5ec:	9e08      	ldr	r6, [sp, #32]
 800c5ee:	321a      	adds	r2, #26
 800c5f0:	47b0      	blx	r6
 800c5f2:	1c43      	adds	r3, r0, #1
 800c5f4:	d0e6      	beq.n	800c5c4 <_printf_common+0xa8>
 800c5f6:	3701      	adds	r7, #1
 800c5f8:	e7d1      	b.n	800c59e <_printf_common+0x82>
	...

0800c5fc <_printf_i>:
 800c5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5fe:	b08b      	sub	sp, #44	; 0x2c
 800c600:	9206      	str	r2, [sp, #24]
 800c602:	000a      	movs	r2, r1
 800c604:	3243      	adds	r2, #67	; 0x43
 800c606:	9307      	str	r3, [sp, #28]
 800c608:	9005      	str	r0, [sp, #20]
 800c60a:	9204      	str	r2, [sp, #16]
 800c60c:	7e0a      	ldrb	r2, [r1, #24]
 800c60e:	000c      	movs	r4, r1
 800c610:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c612:	2a78      	cmp	r2, #120	; 0x78
 800c614:	d806      	bhi.n	800c624 <_printf_i+0x28>
 800c616:	2a62      	cmp	r2, #98	; 0x62
 800c618:	d808      	bhi.n	800c62c <_printf_i+0x30>
 800c61a:	2a00      	cmp	r2, #0
 800c61c:	d100      	bne.n	800c620 <_printf_i+0x24>
 800c61e:	e0c0      	b.n	800c7a2 <_printf_i+0x1a6>
 800c620:	2a58      	cmp	r2, #88	; 0x58
 800c622:	d052      	beq.n	800c6ca <_printf_i+0xce>
 800c624:	0026      	movs	r6, r4
 800c626:	3642      	adds	r6, #66	; 0x42
 800c628:	7032      	strb	r2, [r6, #0]
 800c62a:	e022      	b.n	800c672 <_printf_i+0x76>
 800c62c:	0010      	movs	r0, r2
 800c62e:	3863      	subs	r0, #99	; 0x63
 800c630:	2815      	cmp	r0, #21
 800c632:	d8f7      	bhi.n	800c624 <_printf_i+0x28>
 800c634:	f7f3 fd78 	bl	8000128 <__gnu_thumb1_case_shi>
 800c638:	001f0016 	.word	0x001f0016
 800c63c:	fff6fff6 	.word	0xfff6fff6
 800c640:	fff6fff6 	.word	0xfff6fff6
 800c644:	fff6001f 	.word	0xfff6001f
 800c648:	fff6fff6 	.word	0xfff6fff6
 800c64c:	00a8fff6 	.word	0x00a8fff6
 800c650:	009a0036 	.word	0x009a0036
 800c654:	fff6fff6 	.word	0xfff6fff6
 800c658:	fff600b9 	.word	0xfff600b9
 800c65c:	fff60036 	.word	0xfff60036
 800c660:	009efff6 	.word	0x009efff6
 800c664:	0026      	movs	r6, r4
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	3642      	adds	r6, #66	; 0x42
 800c66a:	1d11      	adds	r1, r2, #4
 800c66c:	6019      	str	r1, [r3, #0]
 800c66e:	6813      	ldr	r3, [r2, #0]
 800c670:	7033      	strb	r3, [r6, #0]
 800c672:	2301      	movs	r3, #1
 800c674:	e0a7      	b.n	800c7c6 <_printf_i+0x1ca>
 800c676:	6808      	ldr	r0, [r1, #0]
 800c678:	6819      	ldr	r1, [r3, #0]
 800c67a:	1d0a      	adds	r2, r1, #4
 800c67c:	0605      	lsls	r5, r0, #24
 800c67e:	d50b      	bpl.n	800c698 <_printf_i+0x9c>
 800c680:	680d      	ldr	r5, [r1, #0]
 800c682:	601a      	str	r2, [r3, #0]
 800c684:	2d00      	cmp	r5, #0
 800c686:	da03      	bge.n	800c690 <_printf_i+0x94>
 800c688:	232d      	movs	r3, #45	; 0x2d
 800c68a:	9a04      	ldr	r2, [sp, #16]
 800c68c:	426d      	negs	r5, r5
 800c68e:	7013      	strb	r3, [r2, #0]
 800c690:	4b61      	ldr	r3, [pc, #388]	; (800c818 <_printf_i+0x21c>)
 800c692:	270a      	movs	r7, #10
 800c694:	9303      	str	r3, [sp, #12]
 800c696:	e032      	b.n	800c6fe <_printf_i+0x102>
 800c698:	680d      	ldr	r5, [r1, #0]
 800c69a:	601a      	str	r2, [r3, #0]
 800c69c:	0641      	lsls	r1, r0, #25
 800c69e:	d5f1      	bpl.n	800c684 <_printf_i+0x88>
 800c6a0:	b22d      	sxth	r5, r5
 800c6a2:	e7ef      	b.n	800c684 <_printf_i+0x88>
 800c6a4:	680d      	ldr	r5, [r1, #0]
 800c6a6:	6819      	ldr	r1, [r3, #0]
 800c6a8:	1d08      	adds	r0, r1, #4
 800c6aa:	6018      	str	r0, [r3, #0]
 800c6ac:	062e      	lsls	r6, r5, #24
 800c6ae:	d501      	bpl.n	800c6b4 <_printf_i+0xb8>
 800c6b0:	680d      	ldr	r5, [r1, #0]
 800c6b2:	e003      	b.n	800c6bc <_printf_i+0xc0>
 800c6b4:	066d      	lsls	r5, r5, #25
 800c6b6:	d5fb      	bpl.n	800c6b0 <_printf_i+0xb4>
 800c6b8:	680d      	ldr	r5, [r1, #0]
 800c6ba:	b2ad      	uxth	r5, r5
 800c6bc:	4b56      	ldr	r3, [pc, #344]	; (800c818 <_printf_i+0x21c>)
 800c6be:	270a      	movs	r7, #10
 800c6c0:	9303      	str	r3, [sp, #12]
 800c6c2:	2a6f      	cmp	r2, #111	; 0x6f
 800c6c4:	d117      	bne.n	800c6f6 <_printf_i+0xfa>
 800c6c6:	2708      	movs	r7, #8
 800c6c8:	e015      	b.n	800c6f6 <_printf_i+0xfa>
 800c6ca:	3145      	adds	r1, #69	; 0x45
 800c6cc:	700a      	strb	r2, [r1, #0]
 800c6ce:	4a52      	ldr	r2, [pc, #328]	; (800c818 <_printf_i+0x21c>)
 800c6d0:	9203      	str	r2, [sp, #12]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	6821      	ldr	r1, [r4, #0]
 800c6d6:	ca20      	ldmia	r2!, {r5}
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	0608      	lsls	r0, r1, #24
 800c6dc:	d550      	bpl.n	800c780 <_printf_i+0x184>
 800c6de:	07cb      	lsls	r3, r1, #31
 800c6e0:	d502      	bpl.n	800c6e8 <_printf_i+0xec>
 800c6e2:	2320      	movs	r3, #32
 800c6e4:	4319      	orrs	r1, r3
 800c6e6:	6021      	str	r1, [r4, #0]
 800c6e8:	2710      	movs	r7, #16
 800c6ea:	2d00      	cmp	r5, #0
 800c6ec:	d103      	bne.n	800c6f6 <_printf_i+0xfa>
 800c6ee:	2320      	movs	r3, #32
 800c6f0:	6822      	ldr	r2, [r4, #0]
 800c6f2:	439a      	bics	r2, r3
 800c6f4:	6022      	str	r2, [r4, #0]
 800c6f6:	0023      	movs	r3, r4
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	3343      	adds	r3, #67	; 0x43
 800c6fc:	701a      	strb	r2, [r3, #0]
 800c6fe:	6863      	ldr	r3, [r4, #4]
 800c700:	60a3      	str	r3, [r4, #8]
 800c702:	2b00      	cmp	r3, #0
 800c704:	db03      	blt.n	800c70e <_printf_i+0x112>
 800c706:	2204      	movs	r2, #4
 800c708:	6821      	ldr	r1, [r4, #0]
 800c70a:	4391      	bics	r1, r2
 800c70c:	6021      	str	r1, [r4, #0]
 800c70e:	2d00      	cmp	r5, #0
 800c710:	d102      	bne.n	800c718 <_printf_i+0x11c>
 800c712:	9e04      	ldr	r6, [sp, #16]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d00c      	beq.n	800c732 <_printf_i+0x136>
 800c718:	9e04      	ldr	r6, [sp, #16]
 800c71a:	0028      	movs	r0, r5
 800c71c:	0039      	movs	r1, r7
 800c71e:	f7f3 fd93 	bl	8000248 <__aeabi_uidivmod>
 800c722:	9b03      	ldr	r3, [sp, #12]
 800c724:	3e01      	subs	r6, #1
 800c726:	5c5b      	ldrb	r3, [r3, r1]
 800c728:	7033      	strb	r3, [r6, #0]
 800c72a:	002b      	movs	r3, r5
 800c72c:	0005      	movs	r5, r0
 800c72e:	429f      	cmp	r7, r3
 800c730:	d9f3      	bls.n	800c71a <_printf_i+0x11e>
 800c732:	2f08      	cmp	r7, #8
 800c734:	d109      	bne.n	800c74a <_printf_i+0x14e>
 800c736:	6823      	ldr	r3, [r4, #0]
 800c738:	07db      	lsls	r3, r3, #31
 800c73a:	d506      	bpl.n	800c74a <_printf_i+0x14e>
 800c73c:	6863      	ldr	r3, [r4, #4]
 800c73e:	6922      	ldr	r2, [r4, #16]
 800c740:	4293      	cmp	r3, r2
 800c742:	dc02      	bgt.n	800c74a <_printf_i+0x14e>
 800c744:	2330      	movs	r3, #48	; 0x30
 800c746:	3e01      	subs	r6, #1
 800c748:	7033      	strb	r3, [r6, #0]
 800c74a:	9b04      	ldr	r3, [sp, #16]
 800c74c:	1b9b      	subs	r3, r3, r6
 800c74e:	6123      	str	r3, [r4, #16]
 800c750:	9b07      	ldr	r3, [sp, #28]
 800c752:	0021      	movs	r1, r4
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	9805      	ldr	r0, [sp, #20]
 800c758:	9b06      	ldr	r3, [sp, #24]
 800c75a:	aa09      	add	r2, sp, #36	; 0x24
 800c75c:	f7ff fede 	bl	800c51c <_printf_common>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	d135      	bne.n	800c7d0 <_printf_i+0x1d4>
 800c764:	2001      	movs	r0, #1
 800c766:	4240      	negs	r0, r0
 800c768:	b00b      	add	sp, #44	; 0x2c
 800c76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c76c:	2220      	movs	r2, #32
 800c76e:	6809      	ldr	r1, [r1, #0]
 800c770:	430a      	orrs	r2, r1
 800c772:	6022      	str	r2, [r4, #0]
 800c774:	0022      	movs	r2, r4
 800c776:	2178      	movs	r1, #120	; 0x78
 800c778:	3245      	adds	r2, #69	; 0x45
 800c77a:	7011      	strb	r1, [r2, #0]
 800c77c:	4a27      	ldr	r2, [pc, #156]	; (800c81c <_printf_i+0x220>)
 800c77e:	e7a7      	b.n	800c6d0 <_printf_i+0xd4>
 800c780:	0648      	lsls	r0, r1, #25
 800c782:	d5ac      	bpl.n	800c6de <_printf_i+0xe2>
 800c784:	b2ad      	uxth	r5, r5
 800c786:	e7aa      	b.n	800c6de <_printf_i+0xe2>
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	680d      	ldr	r5, [r1, #0]
 800c78c:	1d10      	adds	r0, r2, #4
 800c78e:	6949      	ldr	r1, [r1, #20]
 800c790:	6018      	str	r0, [r3, #0]
 800c792:	6813      	ldr	r3, [r2, #0]
 800c794:	062e      	lsls	r6, r5, #24
 800c796:	d501      	bpl.n	800c79c <_printf_i+0x1a0>
 800c798:	6019      	str	r1, [r3, #0]
 800c79a:	e002      	b.n	800c7a2 <_printf_i+0x1a6>
 800c79c:	066d      	lsls	r5, r5, #25
 800c79e:	d5fb      	bpl.n	800c798 <_printf_i+0x19c>
 800c7a0:	8019      	strh	r1, [r3, #0]
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	9e04      	ldr	r6, [sp, #16]
 800c7a6:	6123      	str	r3, [r4, #16]
 800c7a8:	e7d2      	b.n	800c750 <_printf_i+0x154>
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	1d11      	adds	r1, r2, #4
 800c7ae:	6019      	str	r1, [r3, #0]
 800c7b0:	6816      	ldr	r6, [r2, #0]
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	0030      	movs	r0, r6
 800c7b6:	6862      	ldr	r2, [r4, #4]
 800c7b8:	f000 ff52 	bl	800d660 <memchr>
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	d001      	beq.n	800c7c4 <_printf_i+0x1c8>
 800c7c0:	1b80      	subs	r0, r0, r6
 800c7c2:	6060      	str	r0, [r4, #4]
 800c7c4:	6863      	ldr	r3, [r4, #4]
 800c7c6:	6123      	str	r3, [r4, #16]
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	9a04      	ldr	r2, [sp, #16]
 800c7cc:	7013      	strb	r3, [r2, #0]
 800c7ce:	e7bf      	b.n	800c750 <_printf_i+0x154>
 800c7d0:	6923      	ldr	r3, [r4, #16]
 800c7d2:	0032      	movs	r2, r6
 800c7d4:	9906      	ldr	r1, [sp, #24]
 800c7d6:	9805      	ldr	r0, [sp, #20]
 800c7d8:	9d07      	ldr	r5, [sp, #28]
 800c7da:	47a8      	blx	r5
 800c7dc:	1c43      	adds	r3, r0, #1
 800c7de:	d0c1      	beq.n	800c764 <_printf_i+0x168>
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	079b      	lsls	r3, r3, #30
 800c7e4:	d415      	bmi.n	800c812 <_printf_i+0x216>
 800c7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e8:	68e0      	ldr	r0, [r4, #12]
 800c7ea:	4298      	cmp	r0, r3
 800c7ec:	dabc      	bge.n	800c768 <_printf_i+0x16c>
 800c7ee:	0018      	movs	r0, r3
 800c7f0:	e7ba      	b.n	800c768 <_printf_i+0x16c>
 800c7f2:	0022      	movs	r2, r4
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	9906      	ldr	r1, [sp, #24]
 800c7f8:	9805      	ldr	r0, [sp, #20]
 800c7fa:	9e07      	ldr	r6, [sp, #28]
 800c7fc:	3219      	adds	r2, #25
 800c7fe:	47b0      	blx	r6
 800c800:	1c43      	adds	r3, r0, #1
 800c802:	d0af      	beq.n	800c764 <_printf_i+0x168>
 800c804:	3501      	adds	r5, #1
 800c806:	68e3      	ldr	r3, [r4, #12]
 800c808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c80a:	1a9b      	subs	r3, r3, r2
 800c80c:	42ab      	cmp	r3, r5
 800c80e:	dcf0      	bgt.n	800c7f2 <_printf_i+0x1f6>
 800c810:	e7e9      	b.n	800c7e6 <_printf_i+0x1ea>
 800c812:	2500      	movs	r5, #0
 800c814:	e7f7      	b.n	800c806 <_printf_i+0x20a>
 800c816:	46c0      	nop			; (mov r8, r8)
 800c818:	0800ee5a 	.word	0x0800ee5a
 800c81c:	0800ee6b 	.word	0x0800ee6b

0800c820 <_sbrk_r>:
 800c820:	2300      	movs	r3, #0
 800c822:	b570      	push	{r4, r5, r6, lr}
 800c824:	4d06      	ldr	r5, [pc, #24]	; (800c840 <_sbrk_r+0x20>)
 800c826:	0004      	movs	r4, r0
 800c828:	0008      	movs	r0, r1
 800c82a:	602b      	str	r3, [r5, #0]
 800c82c:	f7f6 ffe2 	bl	80037f4 <_sbrk>
 800c830:	1c43      	adds	r3, r0, #1
 800c832:	d103      	bne.n	800c83c <_sbrk_r+0x1c>
 800c834:	682b      	ldr	r3, [r5, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d000      	beq.n	800c83c <_sbrk_r+0x1c>
 800c83a:	6023      	str	r3, [r4, #0]
 800c83c:	bd70      	pop	{r4, r5, r6, pc}
 800c83e:	46c0      	nop			; (mov r8, r8)
 800c840:	2000060c 	.word	0x2000060c

0800c844 <siprintf>:
 800c844:	b40e      	push	{r1, r2, r3}
 800c846:	b500      	push	{lr}
 800c848:	490b      	ldr	r1, [pc, #44]	; (800c878 <siprintf+0x34>)
 800c84a:	b09c      	sub	sp, #112	; 0x70
 800c84c:	ab1d      	add	r3, sp, #116	; 0x74
 800c84e:	9002      	str	r0, [sp, #8]
 800c850:	9006      	str	r0, [sp, #24]
 800c852:	9107      	str	r1, [sp, #28]
 800c854:	9104      	str	r1, [sp, #16]
 800c856:	4809      	ldr	r0, [pc, #36]	; (800c87c <siprintf+0x38>)
 800c858:	4909      	ldr	r1, [pc, #36]	; (800c880 <siprintf+0x3c>)
 800c85a:	cb04      	ldmia	r3!, {r2}
 800c85c:	9105      	str	r1, [sp, #20]
 800c85e:	6800      	ldr	r0, [r0, #0]
 800c860:	a902      	add	r1, sp, #8
 800c862:	9301      	str	r3, [sp, #4]
 800c864:	f001 fb26 	bl	800deb4 <_svfiprintf_r>
 800c868:	2300      	movs	r3, #0
 800c86a:	9a02      	ldr	r2, [sp, #8]
 800c86c:	7013      	strb	r3, [r2, #0]
 800c86e:	b01c      	add	sp, #112	; 0x70
 800c870:	bc08      	pop	{r3}
 800c872:	b003      	add	sp, #12
 800c874:	4718      	bx	r3
 800c876:	46c0      	nop			; (mov r8, r8)
 800c878:	7fffffff 	.word	0x7fffffff
 800c87c:	20000038 	.word	0x20000038
 800c880:	ffff0208 	.word	0xffff0208

0800c884 <__assert_func>:
 800c884:	b530      	push	{r4, r5, lr}
 800c886:	0014      	movs	r4, r2
 800c888:	001a      	movs	r2, r3
 800c88a:	4b09      	ldr	r3, [pc, #36]	; (800c8b0 <__assert_func+0x2c>)
 800c88c:	0005      	movs	r5, r0
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	b085      	sub	sp, #20
 800c892:	68d8      	ldr	r0, [r3, #12]
 800c894:	4b07      	ldr	r3, [pc, #28]	; (800c8b4 <__assert_func+0x30>)
 800c896:	2c00      	cmp	r4, #0
 800c898:	d101      	bne.n	800c89e <__assert_func+0x1a>
 800c89a:	4b07      	ldr	r3, [pc, #28]	; (800c8b8 <__assert_func+0x34>)
 800c89c:	001c      	movs	r4, r3
 800c89e:	9301      	str	r3, [sp, #4]
 800c8a0:	9100      	str	r1, [sp, #0]
 800c8a2:	002b      	movs	r3, r5
 800c8a4:	4905      	ldr	r1, [pc, #20]	; (800c8bc <__assert_func+0x38>)
 800c8a6:	9402      	str	r4, [sp, #8]
 800c8a8:	f000 feb4 	bl	800d614 <fiprintf>
 800c8ac:	f001 fe40 	bl	800e530 <abort>
 800c8b0:	20000038 	.word	0x20000038
 800c8b4:	0800ee7c 	.word	0x0800ee7c
 800c8b8:	0800eeb7 	.word	0x0800eeb7
 800c8bc:	0800ee89 	.word	0x0800ee89

0800c8c0 <quorem>:
 800c8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8c2:	0006      	movs	r6, r0
 800c8c4:	690d      	ldr	r5, [r1, #16]
 800c8c6:	6933      	ldr	r3, [r6, #16]
 800c8c8:	b087      	sub	sp, #28
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	9102      	str	r1, [sp, #8]
 800c8ce:	42ab      	cmp	r3, r5
 800c8d0:	db6b      	blt.n	800c9aa <quorem+0xea>
 800c8d2:	000b      	movs	r3, r1
 800c8d4:	3d01      	subs	r5, #1
 800c8d6:	00ac      	lsls	r4, r5, #2
 800c8d8:	3314      	adds	r3, #20
 800c8da:	9305      	str	r3, [sp, #20]
 800c8dc:	191b      	adds	r3, r3, r4
 800c8de:	9303      	str	r3, [sp, #12]
 800c8e0:	0033      	movs	r3, r6
 800c8e2:	3314      	adds	r3, #20
 800c8e4:	9301      	str	r3, [sp, #4]
 800c8e6:	191c      	adds	r4, r3, r4
 800c8e8:	9b03      	ldr	r3, [sp, #12]
 800c8ea:	6827      	ldr	r7, [r4, #0]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	0038      	movs	r0, r7
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	0019      	movs	r1, r3
 800c8f6:	9304      	str	r3, [sp, #16]
 800c8f8:	f7f3 fc20 	bl	800013c <__udivsi3>
 800c8fc:	9b04      	ldr	r3, [sp, #16]
 800c8fe:	9000      	str	r0, [sp, #0]
 800c900:	429f      	cmp	r7, r3
 800c902:	d329      	bcc.n	800c958 <quorem+0x98>
 800c904:	2300      	movs	r3, #0
 800c906:	469c      	mov	ip, r3
 800c908:	9801      	ldr	r0, [sp, #4]
 800c90a:	9f05      	ldr	r7, [sp, #20]
 800c90c:	9304      	str	r3, [sp, #16]
 800c90e:	cf08      	ldmia	r7!, {r3}
 800c910:	9a00      	ldr	r2, [sp, #0]
 800c912:	b299      	uxth	r1, r3
 800c914:	4351      	muls	r1, r2
 800c916:	0c1b      	lsrs	r3, r3, #16
 800c918:	4353      	muls	r3, r2
 800c91a:	4461      	add	r1, ip
 800c91c:	0c0a      	lsrs	r2, r1, #16
 800c91e:	189b      	adds	r3, r3, r2
 800c920:	0c1a      	lsrs	r2, r3, #16
 800c922:	9305      	str	r3, [sp, #20]
 800c924:	6803      	ldr	r3, [r0, #0]
 800c926:	4694      	mov	ip, r2
 800c928:	b29a      	uxth	r2, r3
 800c92a:	9b04      	ldr	r3, [sp, #16]
 800c92c:	b289      	uxth	r1, r1
 800c92e:	18d2      	adds	r2, r2, r3
 800c930:	6803      	ldr	r3, [r0, #0]
 800c932:	1a52      	subs	r2, r2, r1
 800c934:	0c19      	lsrs	r1, r3, #16
 800c936:	466b      	mov	r3, sp
 800c938:	8a9b      	ldrh	r3, [r3, #20]
 800c93a:	1acb      	subs	r3, r1, r3
 800c93c:	1411      	asrs	r1, r2, #16
 800c93e:	185b      	adds	r3, r3, r1
 800c940:	1419      	asrs	r1, r3, #16
 800c942:	b292      	uxth	r2, r2
 800c944:	041b      	lsls	r3, r3, #16
 800c946:	431a      	orrs	r2, r3
 800c948:	9b03      	ldr	r3, [sp, #12]
 800c94a:	9104      	str	r1, [sp, #16]
 800c94c:	c004      	stmia	r0!, {r2}
 800c94e:	42bb      	cmp	r3, r7
 800c950:	d2dd      	bcs.n	800c90e <quorem+0x4e>
 800c952:	6823      	ldr	r3, [r4, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d02e      	beq.n	800c9b6 <quorem+0xf6>
 800c958:	0030      	movs	r0, r6
 800c95a:	9902      	ldr	r1, [sp, #8]
 800c95c:	f001 f922 	bl	800dba4 <__mcmp>
 800c960:	2800      	cmp	r0, #0
 800c962:	db21      	blt.n	800c9a8 <quorem+0xe8>
 800c964:	0030      	movs	r0, r6
 800c966:	2400      	movs	r4, #0
 800c968:	9b00      	ldr	r3, [sp, #0]
 800c96a:	9902      	ldr	r1, [sp, #8]
 800c96c:	3301      	adds	r3, #1
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	3014      	adds	r0, #20
 800c972:	3114      	adds	r1, #20
 800c974:	6802      	ldr	r2, [r0, #0]
 800c976:	c908      	ldmia	r1!, {r3}
 800c978:	b292      	uxth	r2, r2
 800c97a:	1914      	adds	r4, r2, r4
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	1aa2      	subs	r2, r4, r2
 800c980:	6804      	ldr	r4, [r0, #0]
 800c982:	0c1b      	lsrs	r3, r3, #16
 800c984:	0c24      	lsrs	r4, r4, #16
 800c986:	1ae3      	subs	r3, r4, r3
 800c988:	1414      	asrs	r4, r2, #16
 800c98a:	191b      	adds	r3, r3, r4
 800c98c:	141c      	asrs	r4, r3, #16
 800c98e:	b292      	uxth	r2, r2
 800c990:	041b      	lsls	r3, r3, #16
 800c992:	4313      	orrs	r3, r2
 800c994:	c008      	stmia	r0!, {r3}
 800c996:	9b03      	ldr	r3, [sp, #12]
 800c998:	428b      	cmp	r3, r1
 800c99a:	d2eb      	bcs.n	800c974 <quorem+0xb4>
 800c99c:	9a01      	ldr	r2, [sp, #4]
 800c99e:	00ab      	lsls	r3, r5, #2
 800c9a0:	18d3      	adds	r3, r2, r3
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	2a00      	cmp	r2, #0
 800c9a6:	d010      	beq.n	800c9ca <quorem+0x10a>
 800c9a8:	9800      	ldr	r0, [sp, #0]
 800c9aa:	b007      	add	sp, #28
 800c9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9ae:	6823      	ldr	r3, [r4, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d104      	bne.n	800c9be <quorem+0xfe>
 800c9b4:	3d01      	subs	r5, #1
 800c9b6:	9b01      	ldr	r3, [sp, #4]
 800c9b8:	3c04      	subs	r4, #4
 800c9ba:	42a3      	cmp	r3, r4
 800c9bc:	d3f7      	bcc.n	800c9ae <quorem+0xee>
 800c9be:	6135      	str	r5, [r6, #16]
 800c9c0:	e7ca      	b.n	800c958 <quorem+0x98>
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	2a00      	cmp	r2, #0
 800c9c6:	d104      	bne.n	800c9d2 <quorem+0x112>
 800c9c8:	3d01      	subs	r5, #1
 800c9ca:	9a01      	ldr	r2, [sp, #4]
 800c9cc:	3b04      	subs	r3, #4
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d3f7      	bcc.n	800c9c2 <quorem+0x102>
 800c9d2:	6135      	str	r5, [r6, #16]
 800c9d4:	e7e8      	b.n	800c9a8 <quorem+0xe8>
	...

0800c9d8 <_dtoa_r>:
 800c9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9da:	b09d      	sub	sp, #116	; 0x74
 800c9dc:	9202      	str	r2, [sp, #8]
 800c9de:	9303      	str	r3, [sp, #12]
 800c9e0:	9b02      	ldr	r3, [sp, #8]
 800c9e2:	9c03      	ldr	r4, [sp, #12]
 800c9e4:	930a      	str	r3, [sp, #40]	; 0x28
 800c9e6:	940b      	str	r4, [sp, #44]	; 0x2c
 800c9e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c9ea:	0007      	movs	r7, r0
 800c9ec:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800c9ee:	2c00      	cmp	r4, #0
 800c9f0:	d10e      	bne.n	800ca10 <_dtoa_r+0x38>
 800c9f2:	2010      	movs	r0, #16
 800c9f4:	f7ff f9d6 	bl	800bda4 <malloc>
 800c9f8:	1e02      	subs	r2, r0, #0
 800c9fa:	6278      	str	r0, [r7, #36]	; 0x24
 800c9fc:	d104      	bne.n	800ca08 <_dtoa_r+0x30>
 800c9fe:	21ea      	movs	r1, #234	; 0xea
 800ca00:	4bc0      	ldr	r3, [pc, #768]	; (800cd04 <_dtoa_r+0x32c>)
 800ca02:	48c1      	ldr	r0, [pc, #772]	; (800cd08 <_dtoa_r+0x330>)
 800ca04:	f7ff ff3e 	bl	800c884 <__assert_func>
 800ca08:	6044      	str	r4, [r0, #4]
 800ca0a:	6084      	str	r4, [r0, #8]
 800ca0c:	6004      	str	r4, [r0, #0]
 800ca0e:	60c4      	str	r4, [r0, #12]
 800ca10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca12:	6819      	ldr	r1, [r3, #0]
 800ca14:	2900      	cmp	r1, #0
 800ca16:	d00a      	beq.n	800ca2e <_dtoa_r+0x56>
 800ca18:	685a      	ldr	r2, [r3, #4]
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	4093      	lsls	r3, r2
 800ca1e:	604a      	str	r2, [r1, #4]
 800ca20:	608b      	str	r3, [r1, #8]
 800ca22:	0038      	movs	r0, r7
 800ca24:	f000 fe7c 	bl	800d720 <_Bfree>
 800ca28:	2200      	movs	r2, #0
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	9b03      	ldr	r3, [sp, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	da21      	bge.n	800ca78 <_dtoa_r+0xa0>
 800ca34:	2301      	movs	r3, #1
 800ca36:	602b      	str	r3, [r5, #0]
 800ca38:	9b03      	ldr	r3, [sp, #12]
 800ca3a:	005b      	lsls	r3, r3, #1
 800ca3c:	085b      	lsrs	r3, r3, #1
 800ca3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ca42:	4bb2      	ldr	r3, [pc, #712]	; (800cd0c <_dtoa_r+0x334>)
 800ca44:	002a      	movs	r2, r5
 800ca46:	9318      	str	r3, [sp, #96]	; 0x60
 800ca48:	401a      	ands	r2, r3
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d117      	bne.n	800ca7e <_dtoa_r+0xa6>
 800ca4e:	4bb0      	ldr	r3, [pc, #704]	; (800cd10 <_dtoa_r+0x338>)
 800ca50:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ca52:	0328      	lsls	r0, r5, #12
 800ca54:	6013      	str	r3, [r2, #0]
 800ca56:	9b02      	ldr	r3, [sp, #8]
 800ca58:	0b00      	lsrs	r0, r0, #12
 800ca5a:	4318      	orrs	r0, r3
 800ca5c:	d101      	bne.n	800ca62 <_dtoa_r+0x8a>
 800ca5e:	f000 fdc3 	bl	800d5e8 <_dtoa_r+0xc10>
 800ca62:	48ac      	ldr	r0, [pc, #688]	; (800cd14 <_dtoa_r+0x33c>)
 800ca64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ca66:	9005      	str	r0, [sp, #20]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <_dtoa_r+0x9a>
 800ca6c:	4baa      	ldr	r3, [pc, #680]	; (800cd18 <_dtoa_r+0x340>)
 800ca6e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ca70:	6013      	str	r3, [r2, #0]
 800ca72:	9805      	ldr	r0, [sp, #20]
 800ca74:	b01d      	add	sp, #116	; 0x74
 800ca76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca78:	2300      	movs	r3, #0
 800ca7a:	602b      	str	r3, [r5, #0]
 800ca7c:	e7e0      	b.n	800ca40 <_dtoa_r+0x68>
 800ca7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ca82:	9312      	str	r3, [sp, #72]	; 0x48
 800ca84:	9413      	str	r4, [sp, #76]	; 0x4c
 800ca86:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ca88:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	f7f3 fcdb 	bl	8000448 <__aeabi_dcmpeq>
 800ca92:	1e04      	subs	r4, r0, #0
 800ca94:	d00b      	beq.n	800caae <_dtoa_r+0xd6>
 800ca96:	2301      	movs	r3, #1
 800ca98:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ca9a:	6013      	str	r3, [r2, #0]
 800ca9c:	4b9f      	ldr	r3, [pc, #636]	; (800cd1c <_dtoa_r+0x344>)
 800ca9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800caa0:	9305      	str	r3, [sp, #20]
 800caa2:	2a00      	cmp	r2, #0
 800caa4:	d0e5      	beq.n	800ca72 <_dtoa_r+0x9a>
 800caa6:	4a9e      	ldr	r2, [pc, #632]	; (800cd20 <_dtoa_r+0x348>)
 800caa8:	9926      	ldr	r1, [sp, #152]	; 0x98
 800caaa:	600a      	str	r2, [r1, #0]
 800caac:	e7e1      	b.n	800ca72 <_dtoa_r+0x9a>
 800caae:	ab1a      	add	r3, sp, #104	; 0x68
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	ab1b      	add	r3, sp, #108	; 0x6c
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	0038      	movs	r0, r7
 800cab8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800caba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cabc:	f001 f926 	bl	800dd0c <__d2b>
 800cac0:	006e      	lsls	r6, r5, #1
 800cac2:	9004      	str	r0, [sp, #16]
 800cac4:	0d76      	lsrs	r6, r6, #21
 800cac6:	d100      	bne.n	800caca <_dtoa_r+0xf2>
 800cac8:	e07c      	b.n	800cbc4 <_dtoa_r+0x1ec>
 800caca:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cacc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cace:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cad0:	4a94      	ldr	r2, [pc, #592]	; (800cd24 <_dtoa_r+0x34c>)
 800cad2:	031b      	lsls	r3, r3, #12
 800cad4:	0b1b      	lsrs	r3, r3, #12
 800cad6:	431a      	orrs	r2, r3
 800cad8:	0011      	movs	r1, r2
 800cada:	4b93      	ldr	r3, [pc, #588]	; (800cd28 <_dtoa_r+0x350>)
 800cadc:	9416      	str	r4, [sp, #88]	; 0x58
 800cade:	18f6      	adds	r6, r6, r3
 800cae0:	2200      	movs	r2, #0
 800cae2:	4b92      	ldr	r3, [pc, #584]	; (800cd2c <_dtoa_r+0x354>)
 800cae4:	f7f4 ffa6 	bl	8001a34 <__aeabi_dsub>
 800cae8:	4a91      	ldr	r2, [pc, #580]	; (800cd30 <_dtoa_r+0x358>)
 800caea:	4b92      	ldr	r3, [pc, #584]	; (800cd34 <_dtoa_r+0x35c>)
 800caec:	f7f4 fd36 	bl	800155c <__aeabi_dmul>
 800caf0:	4a91      	ldr	r2, [pc, #580]	; (800cd38 <_dtoa_r+0x360>)
 800caf2:	4b92      	ldr	r3, [pc, #584]	; (800cd3c <_dtoa_r+0x364>)
 800caf4:	f7f3 fdc2 	bl	800067c <__aeabi_dadd>
 800caf8:	0004      	movs	r4, r0
 800cafa:	0030      	movs	r0, r6
 800cafc:	000d      	movs	r5, r1
 800cafe:	f7f5 fb7f 	bl	8002200 <__aeabi_i2d>
 800cb02:	4a8f      	ldr	r2, [pc, #572]	; (800cd40 <_dtoa_r+0x368>)
 800cb04:	4b8f      	ldr	r3, [pc, #572]	; (800cd44 <_dtoa_r+0x36c>)
 800cb06:	f7f4 fd29 	bl	800155c <__aeabi_dmul>
 800cb0a:	0002      	movs	r2, r0
 800cb0c:	000b      	movs	r3, r1
 800cb0e:	0020      	movs	r0, r4
 800cb10:	0029      	movs	r1, r5
 800cb12:	f7f3 fdb3 	bl	800067c <__aeabi_dadd>
 800cb16:	0004      	movs	r4, r0
 800cb18:	000d      	movs	r5, r1
 800cb1a:	f7f5 fb3b 	bl	8002194 <__aeabi_d2iz>
 800cb1e:	2200      	movs	r2, #0
 800cb20:	9002      	str	r0, [sp, #8]
 800cb22:	2300      	movs	r3, #0
 800cb24:	0020      	movs	r0, r4
 800cb26:	0029      	movs	r1, r5
 800cb28:	f7f3 fc94 	bl	8000454 <__aeabi_dcmplt>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d00b      	beq.n	800cb48 <_dtoa_r+0x170>
 800cb30:	9802      	ldr	r0, [sp, #8]
 800cb32:	f7f5 fb65 	bl	8002200 <__aeabi_i2d>
 800cb36:	002b      	movs	r3, r5
 800cb38:	0022      	movs	r2, r4
 800cb3a:	f7f3 fc85 	bl	8000448 <__aeabi_dcmpeq>
 800cb3e:	4243      	negs	r3, r0
 800cb40:	4158      	adcs	r0, r3
 800cb42:	9b02      	ldr	r3, [sp, #8]
 800cb44:	1a1b      	subs	r3, r3, r0
 800cb46:	9302      	str	r3, [sp, #8]
 800cb48:	2301      	movs	r3, #1
 800cb4a:	9315      	str	r3, [sp, #84]	; 0x54
 800cb4c:	9b02      	ldr	r3, [sp, #8]
 800cb4e:	2b16      	cmp	r3, #22
 800cb50:	d80f      	bhi.n	800cb72 <_dtoa_r+0x19a>
 800cb52:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cb54:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cb56:	00da      	lsls	r2, r3, #3
 800cb58:	4b7b      	ldr	r3, [pc, #492]	; (800cd48 <_dtoa_r+0x370>)
 800cb5a:	189b      	adds	r3, r3, r2
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	f7f3 fc78 	bl	8000454 <__aeabi_dcmplt>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d049      	beq.n	800cbfc <_dtoa_r+0x224>
 800cb68:	9b02      	ldr	r3, [sp, #8]
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	9302      	str	r3, [sp, #8]
 800cb6e:	2300      	movs	r3, #0
 800cb70:	9315      	str	r3, [sp, #84]	; 0x54
 800cb72:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cb74:	1b9e      	subs	r6, r3, r6
 800cb76:	2300      	movs	r3, #0
 800cb78:	9308      	str	r3, [sp, #32]
 800cb7a:	0033      	movs	r3, r6
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	930d      	str	r3, [sp, #52]	; 0x34
 800cb80:	d504      	bpl.n	800cb8c <_dtoa_r+0x1b4>
 800cb82:	2301      	movs	r3, #1
 800cb84:	1b9b      	subs	r3, r3, r6
 800cb86:	9308      	str	r3, [sp, #32]
 800cb88:	2300      	movs	r3, #0
 800cb8a:	930d      	str	r3, [sp, #52]	; 0x34
 800cb8c:	9b02      	ldr	r3, [sp, #8]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	db36      	blt.n	800cc00 <_dtoa_r+0x228>
 800cb92:	9a02      	ldr	r2, [sp, #8]
 800cb94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb96:	4694      	mov	ip, r2
 800cb98:	4463      	add	r3, ip
 800cb9a:	930d      	str	r3, [sp, #52]	; 0x34
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	9214      	str	r2, [sp, #80]	; 0x50
 800cba0:	930e      	str	r3, [sp, #56]	; 0x38
 800cba2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cba4:	2401      	movs	r4, #1
 800cba6:	2b09      	cmp	r3, #9
 800cba8:	d862      	bhi.n	800cc70 <_dtoa_r+0x298>
 800cbaa:	2b05      	cmp	r3, #5
 800cbac:	dd02      	ble.n	800cbb4 <_dtoa_r+0x1dc>
 800cbae:	2400      	movs	r4, #0
 800cbb0:	3b04      	subs	r3, #4
 800cbb2:	9322      	str	r3, [sp, #136]	; 0x88
 800cbb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cbb6:	1e98      	subs	r0, r3, #2
 800cbb8:	2803      	cmp	r0, #3
 800cbba:	d862      	bhi.n	800cc82 <_dtoa_r+0x2aa>
 800cbbc:	f7f3 faaa 	bl	8000114 <__gnu_thumb1_case_uqi>
 800cbc0:	56343629 	.word	0x56343629
 800cbc4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cbc6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cbc8:	189e      	adds	r6, r3, r2
 800cbca:	4b60      	ldr	r3, [pc, #384]	; (800cd4c <_dtoa_r+0x374>)
 800cbcc:	18f2      	adds	r2, r6, r3
 800cbce:	2a20      	cmp	r2, #32
 800cbd0:	dd0f      	ble.n	800cbf2 <_dtoa_r+0x21a>
 800cbd2:	2340      	movs	r3, #64	; 0x40
 800cbd4:	1a9b      	subs	r3, r3, r2
 800cbd6:	409d      	lsls	r5, r3
 800cbd8:	4b5d      	ldr	r3, [pc, #372]	; (800cd50 <_dtoa_r+0x378>)
 800cbda:	9802      	ldr	r0, [sp, #8]
 800cbdc:	18f3      	adds	r3, r6, r3
 800cbde:	40d8      	lsrs	r0, r3
 800cbe0:	4328      	orrs	r0, r5
 800cbe2:	f7f5 fb3d 	bl	8002260 <__aeabi_ui2d>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	4c5a      	ldr	r4, [pc, #360]	; (800cd54 <_dtoa_r+0x37c>)
 800cbea:	3e01      	subs	r6, #1
 800cbec:	1909      	adds	r1, r1, r4
 800cbee:	9316      	str	r3, [sp, #88]	; 0x58
 800cbf0:	e776      	b.n	800cae0 <_dtoa_r+0x108>
 800cbf2:	2320      	movs	r3, #32
 800cbf4:	9802      	ldr	r0, [sp, #8]
 800cbf6:	1a9b      	subs	r3, r3, r2
 800cbf8:	4098      	lsls	r0, r3
 800cbfa:	e7f2      	b.n	800cbe2 <_dtoa_r+0x20a>
 800cbfc:	9015      	str	r0, [sp, #84]	; 0x54
 800cbfe:	e7b8      	b.n	800cb72 <_dtoa_r+0x19a>
 800cc00:	9b08      	ldr	r3, [sp, #32]
 800cc02:	9a02      	ldr	r2, [sp, #8]
 800cc04:	1a9b      	subs	r3, r3, r2
 800cc06:	9308      	str	r3, [sp, #32]
 800cc08:	4253      	negs	r3, r2
 800cc0a:	930e      	str	r3, [sp, #56]	; 0x38
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	9314      	str	r3, [sp, #80]	; 0x50
 800cc10:	e7c7      	b.n	800cba2 <_dtoa_r+0x1ca>
 800cc12:	2300      	movs	r3, #0
 800cc14:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	dc36      	bgt.n	800cc8a <_dtoa_r+0x2b2>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	001a      	movs	r2, r3
 800cc20:	930c      	str	r3, [sp, #48]	; 0x30
 800cc22:	9306      	str	r3, [sp, #24]
 800cc24:	9223      	str	r2, [sp, #140]	; 0x8c
 800cc26:	e00d      	b.n	800cc44 <_dtoa_r+0x26c>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e7f3      	b.n	800cc14 <_dtoa_r+0x23c>
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800cc30:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc32:	4694      	mov	ip, r2
 800cc34:	9b02      	ldr	r3, [sp, #8]
 800cc36:	4463      	add	r3, ip
 800cc38:	930c      	str	r3, [sp, #48]	; 0x30
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	9306      	str	r3, [sp, #24]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	dc00      	bgt.n	800cc44 <_dtoa_r+0x26c>
 800cc42:	2301      	movs	r3, #1
 800cc44:	2200      	movs	r2, #0
 800cc46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc48:	6042      	str	r2, [r0, #4]
 800cc4a:	3204      	adds	r2, #4
 800cc4c:	0015      	movs	r5, r2
 800cc4e:	3514      	adds	r5, #20
 800cc50:	6841      	ldr	r1, [r0, #4]
 800cc52:	429d      	cmp	r5, r3
 800cc54:	d91d      	bls.n	800cc92 <_dtoa_r+0x2ba>
 800cc56:	0038      	movs	r0, r7
 800cc58:	f000 fd1e 	bl	800d698 <_Balloc>
 800cc5c:	9005      	str	r0, [sp, #20]
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	d11b      	bne.n	800cc9a <_dtoa_r+0x2c2>
 800cc62:	21d5      	movs	r1, #213	; 0xd5
 800cc64:	0002      	movs	r2, r0
 800cc66:	4b3c      	ldr	r3, [pc, #240]	; (800cd58 <_dtoa_r+0x380>)
 800cc68:	0049      	lsls	r1, r1, #1
 800cc6a:	e6ca      	b.n	800ca02 <_dtoa_r+0x2a>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e7de      	b.n	800cc2e <_dtoa_r+0x256>
 800cc70:	2300      	movs	r3, #0
 800cc72:	940f      	str	r4, [sp, #60]	; 0x3c
 800cc74:	9322      	str	r3, [sp, #136]	; 0x88
 800cc76:	3b01      	subs	r3, #1
 800cc78:	930c      	str	r3, [sp, #48]	; 0x30
 800cc7a:	9306      	str	r3, [sp, #24]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	3313      	adds	r3, #19
 800cc80:	e7d0      	b.n	800cc24 <_dtoa_r+0x24c>
 800cc82:	2301      	movs	r3, #1
 800cc84:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc86:	3b02      	subs	r3, #2
 800cc88:	e7f6      	b.n	800cc78 <_dtoa_r+0x2a0>
 800cc8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cc8c:	930c      	str	r3, [sp, #48]	; 0x30
 800cc8e:	9306      	str	r3, [sp, #24]
 800cc90:	e7d8      	b.n	800cc44 <_dtoa_r+0x26c>
 800cc92:	3101      	adds	r1, #1
 800cc94:	6041      	str	r1, [r0, #4]
 800cc96:	0052      	lsls	r2, r2, #1
 800cc98:	e7d8      	b.n	800cc4c <_dtoa_r+0x274>
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9c:	9a05      	ldr	r2, [sp, #20]
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	9b06      	ldr	r3, [sp, #24]
 800cca2:	2b0e      	cmp	r3, #14
 800cca4:	d900      	bls.n	800cca8 <_dtoa_r+0x2d0>
 800cca6:	e0eb      	b.n	800ce80 <_dtoa_r+0x4a8>
 800cca8:	2c00      	cmp	r4, #0
 800ccaa:	d100      	bne.n	800ccae <_dtoa_r+0x2d6>
 800ccac:	e0e8      	b.n	800ce80 <_dtoa_r+0x4a8>
 800ccae:	9b02      	ldr	r3, [sp, #8]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	dd68      	ble.n	800cd86 <_dtoa_r+0x3ae>
 800ccb4:	001a      	movs	r2, r3
 800ccb6:	210f      	movs	r1, #15
 800ccb8:	4b23      	ldr	r3, [pc, #140]	; (800cd48 <_dtoa_r+0x370>)
 800ccba:	400a      	ands	r2, r1
 800ccbc:	00d2      	lsls	r2, r2, #3
 800ccbe:	189b      	adds	r3, r3, r2
 800ccc0:	681d      	ldr	r5, [r3, #0]
 800ccc2:	685e      	ldr	r6, [r3, #4]
 800ccc4:	9b02      	ldr	r3, [sp, #8]
 800ccc6:	111c      	asrs	r4, r3, #4
 800ccc8:	2302      	movs	r3, #2
 800ccca:	9310      	str	r3, [sp, #64]	; 0x40
 800cccc:	9b02      	ldr	r3, [sp, #8]
 800ccce:	05db      	lsls	r3, r3, #23
 800ccd0:	d50b      	bpl.n	800ccea <_dtoa_r+0x312>
 800ccd2:	4b22      	ldr	r3, [pc, #136]	; (800cd5c <_dtoa_r+0x384>)
 800ccd4:	400c      	ands	r4, r1
 800ccd6:	6a1a      	ldr	r2, [r3, #32]
 800ccd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccda:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ccdc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ccde:	f7f4 f837 	bl	8000d50 <__aeabi_ddiv>
 800cce2:	2303      	movs	r3, #3
 800cce4:	900a      	str	r0, [sp, #40]	; 0x28
 800cce6:	910b      	str	r1, [sp, #44]	; 0x2c
 800cce8:	9310      	str	r3, [sp, #64]	; 0x40
 800ccea:	4b1c      	ldr	r3, [pc, #112]	; (800cd5c <_dtoa_r+0x384>)
 800ccec:	9307      	str	r3, [sp, #28]
 800ccee:	2c00      	cmp	r4, #0
 800ccf0:	d136      	bne.n	800cd60 <_dtoa_r+0x388>
 800ccf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ccf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccf6:	002a      	movs	r2, r5
 800ccf8:	0033      	movs	r3, r6
 800ccfa:	f7f4 f829 	bl	8000d50 <__aeabi_ddiv>
 800ccfe:	900a      	str	r0, [sp, #40]	; 0x28
 800cd00:	910b      	str	r1, [sp, #44]	; 0x2c
 800cd02:	e05c      	b.n	800cdbe <_dtoa_r+0x3e6>
 800cd04:	0800efc6 	.word	0x0800efc6
 800cd08:	0800efdd 	.word	0x0800efdd
 800cd0c:	7ff00000 	.word	0x7ff00000
 800cd10:	0000270f 	.word	0x0000270f
 800cd14:	0800efc2 	.word	0x0800efc2
 800cd18:	0800efc5 	.word	0x0800efc5
 800cd1c:	0800ee58 	.word	0x0800ee58
 800cd20:	0800ee59 	.word	0x0800ee59
 800cd24:	3ff00000 	.word	0x3ff00000
 800cd28:	fffffc01 	.word	0xfffffc01
 800cd2c:	3ff80000 	.word	0x3ff80000
 800cd30:	636f4361 	.word	0x636f4361
 800cd34:	3fd287a7 	.word	0x3fd287a7
 800cd38:	8b60c8b3 	.word	0x8b60c8b3
 800cd3c:	3fc68a28 	.word	0x3fc68a28
 800cd40:	509f79fb 	.word	0x509f79fb
 800cd44:	3fd34413 	.word	0x3fd34413
 800cd48:	0800f0e0 	.word	0x0800f0e0
 800cd4c:	00000432 	.word	0x00000432
 800cd50:	00000412 	.word	0x00000412
 800cd54:	fe100000 	.word	0xfe100000
 800cd58:	0800f03c 	.word	0x0800f03c
 800cd5c:	0800f0b8 	.word	0x0800f0b8
 800cd60:	2301      	movs	r3, #1
 800cd62:	421c      	tst	r4, r3
 800cd64:	d00b      	beq.n	800cd7e <_dtoa_r+0x3a6>
 800cd66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd68:	0028      	movs	r0, r5
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	9310      	str	r3, [sp, #64]	; 0x40
 800cd6e:	9b07      	ldr	r3, [sp, #28]
 800cd70:	0031      	movs	r1, r6
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	f7f4 fbf1 	bl	800155c <__aeabi_dmul>
 800cd7a:	0005      	movs	r5, r0
 800cd7c:	000e      	movs	r6, r1
 800cd7e:	9b07      	ldr	r3, [sp, #28]
 800cd80:	1064      	asrs	r4, r4, #1
 800cd82:	3308      	adds	r3, #8
 800cd84:	e7b2      	b.n	800ccec <_dtoa_r+0x314>
 800cd86:	2302      	movs	r3, #2
 800cd88:	9310      	str	r3, [sp, #64]	; 0x40
 800cd8a:	9b02      	ldr	r3, [sp, #8]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d016      	beq.n	800cdbe <_dtoa_r+0x3e6>
 800cd90:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cd92:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cd94:	425c      	negs	r4, r3
 800cd96:	230f      	movs	r3, #15
 800cd98:	4ab5      	ldr	r2, [pc, #724]	; (800d070 <_dtoa_r+0x698>)
 800cd9a:	4023      	ands	r3, r4
 800cd9c:	00db      	lsls	r3, r3, #3
 800cd9e:	18d3      	adds	r3, r2, r3
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	f7f4 fbda 	bl	800155c <__aeabi_dmul>
 800cda8:	2601      	movs	r6, #1
 800cdaa:	2300      	movs	r3, #0
 800cdac:	900a      	str	r0, [sp, #40]	; 0x28
 800cdae:	910b      	str	r1, [sp, #44]	; 0x2c
 800cdb0:	4db0      	ldr	r5, [pc, #704]	; (800d074 <_dtoa_r+0x69c>)
 800cdb2:	1124      	asrs	r4, r4, #4
 800cdb4:	2c00      	cmp	r4, #0
 800cdb6:	d000      	beq.n	800cdba <_dtoa_r+0x3e2>
 800cdb8:	e094      	b.n	800cee4 <_dtoa_r+0x50c>
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d19f      	bne.n	800ccfe <_dtoa_r+0x326>
 800cdbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d100      	bne.n	800cdc6 <_dtoa_r+0x3ee>
 800cdc4:	e09b      	b.n	800cefe <_dtoa_r+0x526>
 800cdc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cdc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800cdca:	2200      	movs	r2, #0
 800cdcc:	0020      	movs	r0, r4
 800cdce:	0029      	movs	r1, r5
 800cdd0:	4ba9      	ldr	r3, [pc, #676]	; (800d078 <_dtoa_r+0x6a0>)
 800cdd2:	f7f3 fb3f 	bl	8000454 <__aeabi_dcmplt>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d100      	bne.n	800cddc <_dtoa_r+0x404>
 800cdda:	e090      	b.n	800cefe <_dtoa_r+0x526>
 800cddc:	9b06      	ldr	r3, [sp, #24]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d100      	bne.n	800cde4 <_dtoa_r+0x40c>
 800cde2:	e08c      	b.n	800cefe <_dtoa_r+0x526>
 800cde4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	dd46      	ble.n	800ce78 <_dtoa_r+0x4a0>
 800cdea:	9b02      	ldr	r3, [sp, #8]
 800cdec:	2200      	movs	r2, #0
 800cdee:	0020      	movs	r0, r4
 800cdf0:	0029      	movs	r1, r5
 800cdf2:	1e5e      	subs	r6, r3, #1
 800cdf4:	4ba1      	ldr	r3, [pc, #644]	; (800d07c <_dtoa_r+0x6a4>)
 800cdf6:	f7f4 fbb1 	bl	800155c <__aeabi_dmul>
 800cdfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdfc:	900a      	str	r0, [sp, #40]	; 0x28
 800cdfe:	910b      	str	r1, [sp, #44]	; 0x2c
 800ce00:	3301      	adds	r3, #1
 800ce02:	9310      	str	r3, [sp, #64]	; 0x40
 800ce04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce06:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ce0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ce0c:	9307      	str	r3, [sp, #28]
 800ce0e:	f7f5 f9f7 	bl	8002200 <__aeabi_i2d>
 800ce12:	0022      	movs	r2, r4
 800ce14:	002b      	movs	r3, r5
 800ce16:	f7f4 fba1 	bl	800155c <__aeabi_dmul>
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	4b98      	ldr	r3, [pc, #608]	; (800d080 <_dtoa_r+0x6a8>)
 800ce1e:	f7f3 fc2d 	bl	800067c <__aeabi_dadd>
 800ce22:	9010      	str	r0, [sp, #64]	; 0x40
 800ce24:	9111      	str	r1, [sp, #68]	; 0x44
 800ce26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce2a:	920a      	str	r2, [sp, #40]	; 0x28
 800ce2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce2e:	4a95      	ldr	r2, [pc, #596]	; (800d084 <_dtoa_r+0x6ac>)
 800ce30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce32:	4694      	mov	ip, r2
 800ce34:	4463      	add	r3, ip
 800ce36:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce38:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce3a:	9b07      	ldr	r3, [sp, #28]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d161      	bne.n	800cf04 <_dtoa_r+0x52c>
 800ce40:	2200      	movs	r2, #0
 800ce42:	0020      	movs	r0, r4
 800ce44:	0029      	movs	r1, r5
 800ce46:	4b90      	ldr	r3, [pc, #576]	; (800d088 <_dtoa_r+0x6b0>)
 800ce48:	f7f4 fdf4 	bl	8001a34 <__aeabi_dsub>
 800ce4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce50:	0004      	movs	r4, r0
 800ce52:	000d      	movs	r5, r1
 800ce54:	f7f3 fb12 	bl	800047c <__aeabi_dcmpgt>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d000      	beq.n	800ce5e <_dtoa_r+0x486>
 800ce5c:	e2b5      	b.n	800d3ca <_dtoa_r+0x9f2>
 800ce5e:	488b      	ldr	r0, [pc, #556]	; (800d08c <_dtoa_r+0x6b4>)
 800ce60:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce62:	4684      	mov	ip, r0
 800ce64:	4461      	add	r1, ip
 800ce66:	000b      	movs	r3, r1
 800ce68:	0020      	movs	r0, r4
 800ce6a:	0029      	movs	r1, r5
 800ce6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce6e:	f7f3 faf1 	bl	8000454 <__aeabi_dcmplt>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d000      	beq.n	800ce78 <_dtoa_r+0x4a0>
 800ce76:	e2a5      	b.n	800d3c4 <_dtoa_r+0x9ec>
 800ce78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce7a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ce7c:	930a      	str	r3, [sp, #40]	; 0x28
 800ce7e:	940b      	str	r4, [sp, #44]	; 0x2c
 800ce80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	da00      	bge.n	800ce88 <_dtoa_r+0x4b0>
 800ce86:	e171      	b.n	800d16c <_dtoa_r+0x794>
 800ce88:	9a02      	ldr	r2, [sp, #8]
 800ce8a:	2a0e      	cmp	r2, #14
 800ce8c:	dd00      	ble.n	800ce90 <_dtoa_r+0x4b8>
 800ce8e:	e16d      	b.n	800d16c <_dtoa_r+0x794>
 800ce90:	4b77      	ldr	r3, [pc, #476]	; (800d070 <_dtoa_r+0x698>)
 800ce92:	00d2      	lsls	r2, r2, #3
 800ce94:	189b      	adds	r3, r3, r2
 800ce96:	685c      	ldr	r4, [r3, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	9308      	str	r3, [sp, #32]
 800ce9c:	9409      	str	r4, [sp, #36]	; 0x24
 800ce9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	db00      	blt.n	800cea6 <_dtoa_r+0x4ce>
 800cea4:	e0f6      	b.n	800d094 <_dtoa_r+0x6bc>
 800cea6:	9b06      	ldr	r3, [sp, #24]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	dd00      	ble.n	800ceae <_dtoa_r+0x4d6>
 800ceac:	e0f2      	b.n	800d094 <_dtoa_r+0x6bc>
 800ceae:	d000      	beq.n	800ceb2 <_dtoa_r+0x4da>
 800ceb0:	e288      	b.n	800d3c4 <_dtoa_r+0x9ec>
 800ceb2:	9808      	ldr	r0, [sp, #32]
 800ceb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	4b73      	ldr	r3, [pc, #460]	; (800d088 <_dtoa_r+0x6b0>)
 800ceba:	f7f4 fb4f 	bl	800155c <__aeabi_dmul>
 800cebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cec2:	f7f3 fae5 	bl	8000490 <__aeabi_dcmpge>
 800cec6:	9e06      	ldr	r6, [sp, #24]
 800cec8:	0035      	movs	r5, r6
 800ceca:	2800      	cmp	r0, #0
 800cecc:	d000      	beq.n	800ced0 <_dtoa_r+0x4f8>
 800cece:	e25f      	b.n	800d390 <_dtoa_r+0x9b8>
 800ced0:	9b05      	ldr	r3, [sp, #20]
 800ced2:	9a05      	ldr	r2, [sp, #20]
 800ced4:	3301      	adds	r3, #1
 800ced6:	9307      	str	r3, [sp, #28]
 800ced8:	2331      	movs	r3, #49	; 0x31
 800ceda:	7013      	strb	r3, [r2, #0]
 800cedc:	9b02      	ldr	r3, [sp, #8]
 800cede:	3301      	adds	r3, #1
 800cee0:	9302      	str	r3, [sp, #8]
 800cee2:	e25a      	b.n	800d39a <_dtoa_r+0x9c2>
 800cee4:	4234      	tst	r4, r6
 800cee6:	d007      	beq.n	800cef8 <_dtoa_r+0x520>
 800cee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ceea:	3301      	adds	r3, #1
 800ceec:	9310      	str	r3, [sp, #64]	; 0x40
 800ceee:	682a      	ldr	r2, [r5, #0]
 800cef0:	686b      	ldr	r3, [r5, #4]
 800cef2:	f7f4 fb33 	bl	800155c <__aeabi_dmul>
 800cef6:	0033      	movs	r3, r6
 800cef8:	1064      	asrs	r4, r4, #1
 800cefa:	3508      	adds	r5, #8
 800cefc:	e75a      	b.n	800cdb4 <_dtoa_r+0x3dc>
 800cefe:	9e02      	ldr	r6, [sp, #8]
 800cf00:	9b06      	ldr	r3, [sp, #24]
 800cf02:	e780      	b.n	800ce06 <_dtoa_r+0x42e>
 800cf04:	9b07      	ldr	r3, [sp, #28]
 800cf06:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cf08:	1e5a      	subs	r2, r3, #1
 800cf0a:	4b59      	ldr	r3, [pc, #356]	; (800d070 <_dtoa_r+0x698>)
 800cf0c:	00d2      	lsls	r2, r2, #3
 800cf0e:	189b      	adds	r3, r3, r2
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	2900      	cmp	r1, #0
 800cf16:	d051      	beq.n	800cfbc <_dtoa_r+0x5e4>
 800cf18:	2000      	movs	r0, #0
 800cf1a:	495d      	ldr	r1, [pc, #372]	; (800d090 <_dtoa_r+0x6b8>)
 800cf1c:	f7f3 ff18 	bl	8000d50 <__aeabi_ddiv>
 800cf20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf24:	f7f4 fd86 	bl	8001a34 <__aeabi_dsub>
 800cf28:	9a05      	ldr	r2, [sp, #20]
 800cf2a:	9b05      	ldr	r3, [sp, #20]
 800cf2c:	4694      	mov	ip, r2
 800cf2e:	9310      	str	r3, [sp, #64]	; 0x40
 800cf30:	9b07      	ldr	r3, [sp, #28]
 800cf32:	900a      	str	r0, [sp, #40]	; 0x28
 800cf34:	910b      	str	r1, [sp, #44]	; 0x2c
 800cf36:	4463      	add	r3, ip
 800cf38:	9319      	str	r3, [sp, #100]	; 0x64
 800cf3a:	0029      	movs	r1, r5
 800cf3c:	0020      	movs	r0, r4
 800cf3e:	f7f5 f929 	bl	8002194 <__aeabi_d2iz>
 800cf42:	9017      	str	r0, [sp, #92]	; 0x5c
 800cf44:	f7f5 f95c 	bl	8002200 <__aeabi_i2d>
 800cf48:	0002      	movs	r2, r0
 800cf4a:	000b      	movs	r3, r1
 800cf4c:	0020      	movs	r0, r4
 800cf4e:	0029      	movs	r1, r5
 800cf50:	f7f4 fd70 	bl	8001a34 <__aeabi_dsub>
 800cf54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cf58:	3301      	adds	r3, #1
 800cf5a:	9307      	str	r3, [sp, #28]
 800cf5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf5e:	0004      	movs	r4, r0
 800cf60:	3330      	adds	r3, #48	; 0x30
 800cf62:	7013      	strb	r3, [r2, #0]
 800cf64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf68:	000d      	movs	r5, r1
 800cf6a:	f7f3 fa73 	bl	8000454 <__aeabi_dcmplt>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	d175      	bne.n	800d05e <_dtoa_r+0x686>
 800cf72:	0022      	movs	r2, r4
 800cf74:	002b      	movs	r3, r5
 800cf76:	2000      	movs	r0, #0
 800cf78:	493f      	ldr	r1, [pc, #252]	; (800d078 <_dtoa_r+0x6a0>)
 800cf7a:	f7f4 fd5b 	bl	8001a34 <__aeabi_dsub>
 800cf7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf82:	f7f3 fa67 	bl	8000454 <__aeabi_dcmplt>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d000      	beq.n	800cf8c <_dtoa_r+0x5b4>
 800cf8a:	e0d1      	b.n	800d130 <_dtoa_r+0x758>
 800cf8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf8e:	9a07      	ldr	r2, [sp, #28]
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d100      	bne.n	800cf96 <_dtoa_r+0x5be>
 800cf94:	e770      	b.n	800ce78 <_dtoa_r+0x4a0>
 800cf96:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	4b37      	ldr	r3, [pc, #220]	; (800d07c <_dtoa_r+0x6a4>)
 800cf9e:	f7f4 fadd 	bl	800155c <__aeabi_dmul>
 800cfa2:	4b36      	ldr	r3, [pc, #216]	; (800d07c <_dtoa_r+0x6a4>)
 800cfa4:	900a      	str	r0, [sp, #40]	; 0x28
 800cfa6:	910b      	str	r1, [sp, #44]	; 0x2c
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	0020      	movs	r0, r4
 800cfac:	0029      	movs	r1, r5
 800cfae:	f7f4 fad5 	bl	800155c <__aeabi_dmul>
 800cfb2:	9b07      	ldr	r3, [sp, #28]
 800cfb4:	0004      	movs	r4, r0
 800cfb6:	000d      	movs	r5, r1
 800cfb8:	9310      	str	r3, [sp, #64]	; 0x40
 800cfba:	e7be      	b.n	800cf3a <_dtoa_r+0x562>
 800cfbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cfbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfc0:	f7f4 facc 	bl	800155c <__aeabi_dmul>
 800cfc4:	9a05      	ldr	r2, [sp, #20]
 800cfc6:	9b05      	ldr	r3, [sp, #20]
 800cfc8:	4694      	mov	ip, r2
 800cfca:	930a      	str	r3, [sp, #40]	; 0x28
 800cfcc:	9b07      	ldr	r3, [sp, #28]
 800cfce:	9010      	str	r0, [sp, #64]	; 0x40
 800cfd0:	9111      	str	r1, [sp, #68]	; 0x44
 800cfd2:	4463      	add	r3, ip
 800cfd4:	9319      	str	r3, [sp, #100]	; 0x64
 800cfd6:	0029      	movs	r1, r5
 800cfd8:	0020      	movs	r0, r4
 800cfda:	f7f5 f8db 	bl	8002194 <__aeabi_d2iz>
 800cfde:	9017      	str	r0, [sp, #92]	; 0x5c
 800cfe0:	f7f5 f90e 	bl	8002200 <__aeabi_i2d>
 800cfe4:	0002      	movs	r2, r0
 800cfe6:	000b      	movs	r3, r1
 800cfe8:	0020      	movs	r0, r4
 800cfea:	0029      	movs	r1, r5
 800cfec:	f7f4 fd22 	bl	8001a34 <__aeabi_dsub>
 800cff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cff4:	3330      	adds	r3, #48	; 0x30
 800cff6:	7013      	strb	r3, [r2, #0]
 800cff8:	0013      	movs	r3, r2
 800cffa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cffc:	3301      	adds	r3, #1
 800cffe:	0004      	movs	r4, r0
 800d000:	000d      	movs	r5, r1
 800d002:	930a      	str	r3, [sp, #40]	; 0x28
 800d004:	4293      	cmp	r3, r2
 800d006:	d12c      	bne.n	800d062 <_dtoa_r+0x68a>
 800d008:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d00a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d00c:	9a05      	ldr	r2, [sp, #20]
 800d00e:	9b07      	ldr	r3, [sp, #28]
 800d010:	4694      	mov	ip, r2
 800d012:	4463      	add	r3, ip
 800d014:	2200      	movs	r2, #0
 800d016:	9307      	str	r3, [sp, #28]
 800d018:	4b1d      	ldr	r3, [pc, #116]	; (800d090 <_dtoa_r+0x6b8>)
 800d01a:	f7f3 fb2f 	bl	800067c <__aeabi_dadd>
 800d01e:	0002      	movs	r2, r0
 800d020:	000b      	movs	r3, r1
 800d022:	0020      	movs	r0, r4
 800d024:	0029      	movs	r1, r5
 800d026:	f7f3 fa29 	bl	800047c <__aeabi_dcmpgt>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d000      	beq.n	800d030 <_dtoa_r+0x658>
 800d02e:	e07f      	b.n	800d130 <_dtoa_r+0x758>
 800d030:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d032:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d034:	2000      	movs	r0, #0
 800d036:	4916      	ldr	r1, [pc, #88]	; (800d090 <_dtoa_r+0x6b8>)
 800d038:	f7f4 fcfc 	bl	8001a34 <__aeabi_dsub>
 800d03c:	0002      	movs	r2, r0
 800d03e:	000b      	movs	r3, r1
 800d040:	0020      	movs	r0, r4
 800d042:	0029      	movs	r1, r5
 800d044:	f7f3 fa06 	bl	8000454 <__aeabi_dcmplt>
 800d048:	2800      	cmp	r0, #0
 800d04a:	d100      	bne.n	800d04e <_dtoa_r+0x676>
 800d04c:	e714      	b.n	800ce78 <_dtoa_r+0x4a0>
 800d04e:	9b07      	ldr	r3, [sp, #28]
 800d050:	001a      	movs	r2, r3
 800d052:	3a01      	subs	r2, #1
 800d054:	9207      	str	r2, [sp, #28]
 800d056:	7812      	ldrb	r2, [r2, #0]
 800d058:	2a30      	cmp	r2, #48	; 0x30
 800d05a:	d0f8      	beq.n	800d04e <_dtoa_r+0x676>
 800d05c:	9307      	str	r3, [sp, #28]
 800d05e:	9602      	str	r6, [sp, #8]
 800d060:	e054      	b.n	800d10c <_dtoa_r+0x734>
 800d062:	2200      	movs	r2, #0
 800d064:	4b05      	ldr	r3, [pc, #20]	; (800d07c <_dtoa_r+0x6a4>)
 800d066:	f7f4 fa79 	bl	800155c <__aeabi_dmul>
 800d06a:	0004      	movs	r4, r0
 800d06c:	000d      	movs	r5, r1
 800d06e:	e7b2      	b.n	800cfd6 <_dtoa_r+0x5fe>
 800d070:	0800f0e0 	.word	0x0800f0e0
 800d074:	0800f0b8 	.word	0x0800f0b8
 800d078:	3ff00000 	.word	0x3ff00000
 800d07c:	40240000 	.word	0x40240000
 800d080:	401c0000 	.word	0x401c0000
 800d084:	fcc00000 	.word	0xfcc00000
 800d088:	40140000 	.word	0x40140000
 800d08c:	7cc00000 	.word	0x7cc00000
 800d090:	3fe00000 	.word	0x3fe00000
 800d094:	9b06      	ldr	r3, [sp, #24]
 800d096:	9e05      	ldr	r6, [sp, #20]
 800d098:	3b01      	subs	r3, #1
 800d09a:	199b      	adds	r3, r3, r6
 800d09c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d09e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d0a0:	930a      	str	r3, [sp, #40]	; 0x28
 800d0a2:	9a08      	ldr	r2, [sp, #32]
 800d0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a6:	0020      	movs	r0, r4
 800d0a8:	0029      	movs	r1, r5
 800d0aa:	f7f3 fe51 	bl	8000d50 <__aeabi_ddiv>
 800d0ae:	f7f5 f871 	bl	8002194 <__aeabi_d2iz>
 800d0b2:	9006      	str	r0, [sp, #24]
 800d0b4:	f7f5 f8a4 	bl	8002200 <__aeabi_i2d>
 800d0b8:	9a08      	ldr	r2, [sp, #32]
 800d0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0bc:	f7f4 fa4e 	bl	800155c <__aeabi_dmul>
 800d0c0:	0002      	movs	r2, r0
 800d0c2:	000b      	movs	r3, r1
 800d0c4:	0020      	movs	r0, r4
 800d0c6:	0029      	movs	r1, r5
 800d0c8:	f7f4 fcb4 	bl	8001a34 <__aeabi_dsub>
 800d0cc:	0033      	movs	r3, r6
 800d0ce:	9a06      	ldr	r2, [sp, #24]
 800d0d0:	3601      	adds	r6, #1
 800d0d2:	3230      	adds	r2, #48	; 0x30
 800d0d4:	701a      	strb	r2, [r3, #0]
 800d0d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0d8:	9607      	str	r6, [sp, #28]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d139      	bne.n	800d152 <_dtoa_r+0x77a>
 800d0de:	0002      	movs	r2, r0
 800d0e0:	000b      	movs	r3, r1
 800d0e2:	f7f3 facb 	bl	800067c <__aeabi_dadd>
 800d0e6:	9a08      	ldr	r2, [sp, #32]
 800d0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ea:	0004      	movs	r4, r0
 800d0ec:	000d      	movs	r5, r1
 800d0ee:	f7f3 f9c5 	bl	800047c <__aeabi_dcmpgt>
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	d11b      	bne.n	800d12e <_dtoa_r+0x756>
 800d0f6:	9a08      	ldr	r2, [sp, #32]
 800d0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0fa:	0020      	movs	r0, r4
 800d0fc:	0029      	movs	r1, r5
 800d0fe:	f7f3 f9a3 	bl	8000448 <__aeabi_dcmpeq>
 800d102:	2800      	cmp	r0, #0
 800d104:	d002      	beq.n	800d10c <_dtoa_r+0x734>
 800d106:	9b06      	ldr	r3, [sp, #24]
 800d108:	07db      	lsls	r3, r3, #31
 800d10a:	d410      	bmi.n	800d12e <_dtoa_r+0x756>
 800d10c:	0038      	movs	r0, r7
 800d10e:	9904      	ldr	r1, [sp, #16]
 800d110:	f000 fb06 	bl	800d720 <_Bfree>
 800d114:	2300      	movs	r3, #0
 800d116:	9a07      	ldr	r2, [sp, #28]
 800d118:	9802      	ldr	r0, [sp, #8]
 800d11a:	7013      	strb	r3, [r2, #0]
 800d11c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d11e:	3001      	adds	r0, #1
 800d120:	6018      	str	r0, [r3, #0]
 800d122:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d124:	2b00      	cmp	r3, #0
 800d126:	d100      	bne.n	800d12a <_dtoa_r+0x752>
 800d128:	e4a3      	b.n	800ca72 <_dtoa_r+0x9a>
 800d12a:	601a      	str	r2, [r3, #0]
 800d12c:	e4a1      	b.n	800ca72 <_dtoa_r+0x9a>
 800d12e:	9e02      	ldr	r6, [sp, #8]
 800d130:	9b07      	ldr	r3, [sp, #28]
 800d132:	9307      	str	r3, [sp, #28]
 800d134:	3b01      	subs	r3, #1
 800d136:	781a      	ldrb	r2, [r3, #0]
 800d138:	2a39      	cmp	r2, #57	; 0x39
 800d13a:	d106      	bne.n	800d14a <_dtoa_r+0x772>
 800d13c:	9a05      	ldr	r2, [sp, #20]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d1f7      	bne.n	800d132 <_dtoa_r+0x75a>
 800d142:	2230      	movs	r2, #48	; 0x30
 800d144:	9905      	ldr	r1, [sp, #20]
 800d146:	3601      	adds	r6, #1
 800d148:	700a      	strb	r2, [r1, #0]
 800d14a:	781a      	ldrb	r2, [r3, #0]
 800d14c:	3201      	adds	r2, #1
 800d14e:	701a      	strb	r2, [r3, #0]
 800d150:	e785      	b.n	800d05e <_dtoa_r+0x686>
 800d152:	2200      	movs	r2, #0
 800d154:	4bad      	ldr	r3, [pc, #692]	; (800d40c <_dtoa_r+0xa34>)
 800d156:	f7f4 fa01 	bl	800155c <__aeabi_dmul>
 800d15a:	2200      	movs	r2, #0
 800d15c:	2300      	movs	r3, #0
 800d15e:	0004      	movs	r4, r0
 800d160:	000d      	movs	r5, r1
 800d162:	f7f3 f971 	bl	8000448 <__aeabi_dcmpeq>
 800d166:	2800      	cmp	r0, #0
 800d168:	d09b      	beq.n	800d0a2 <_dtoa_r+0x6ca>
 800d16a:	e7cf      	b.n	800d10c <_dtoa_r+0x734>
 800d16c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d16e:	2a00      	cmp	r2, #0
 800d170:	d100      	bne.n	800d174 <_dtoa_r+0x79c>
 800d172:	e082      	b.n	800d27a <_dtoa_r+0x8a2>
 800d174:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d176:	2a01      	cmp	r2, #1
 800d178:	dc66      	bgt.n	800d248 <_dtoa_r+0x870>
 800d17a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d17c:	2a00      	cmp	r2, #0
 800d17e:	d05f      	beq.n	800d240 <_dtoa_r+0x868>
 800d180:	4aa3      	ldr	r2, [pc, #652]	; (800d410 <_dtoa_r+0xa38>)
 800d182:	189b      	adds	r3, r3, r2
 800d184:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d186:	9c08      	ldr	r4, [sp, #32]
 800d188:	9a08      	ldr	r2, [sp, #32]
 800d18a:	2101      	movs	r1, #1
 800d18c:	18d2      	adds	r2, r2, r3
 800d18e:	9208      	str	r2, [sp, #32]
 800d190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d192:	0038      	movs	r0, r7
 800d194:	18d3      	adds	r3, r2, r3
 800d196:	930d      	str	r3, [sp, #52]	; 0x34
 800d198:	f000 fb72 	bl	800d880 <__i2b>
 800d19c:	0005      	movs	r5, r0
 800d19e:	2c00      	cmp	r4, #0
 800d1a0:	dd0e      	ble.n	800d1c0 <_dtoa_r+0x7e8>
 800d1a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	dd0b      	ble.n	800d1c0 <_dtoa_r+0x7e8>
 800d1a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1aa:	0023      	movs	r3, r4
 800d1ac:	4294      	cmp	r4, r2
 800d1ae:	dd00      	ble.n	800d1b2 <_dtoa_r+0x7da>
 800d1b0:	0013      	movs	r3, r2
 800d1b2:	9a08      	ldr	r2, [sp, #32]
 800d1b4:	1ae4      	subs	r4, r4, r3
 800d1b6:	1ad2      	subs	r2, r2, r3
 800d1b8:	9208      	str	r2, [sp, #32]
 800d1ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1bc:	1ad3      	subs	r3, r2, r3
 800d1be:	930d      	str	r3, [sp, #52]	; 0x34
 800d1c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d01f      	beq.n	800d206 <_dtoa_r+0x82e>
 800d1c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d05a      	beq.n	800d282 <_dtoa_r+0x8aa>
 800d1cc:	2e00      	cmp	r6, #0
 800d1ce:	dd11      	ble.n	800d1f4 <_dtoa_r+0x81c>
 800d1d0:	0029      	movs	r1, r5
 800d1d2:	0032      	movs	r2, r6
 800d1d4:	0038      	movs	r0, r7
 800d1d6:	f000 fc19 	bl	800da0c <__pow5mult>
 800d1da:	9a04      	ldr	r2, [sp, #16]
 800d1dc:	0001      	movs	r1, r0
 800d1de:	0005      	movs	r5, r0
 800d1e0:	0038      	movs	r0, r7
 800d1e2:	f000 fb63 	bl	800d8ac <__multiply>
 800d1e6:	9904      	ldr	r1, [sp, #16]
 800d1e8:	9007      	str	r0, [sp, #28]
 800d1ea:	0038      	movs	r0, r7
 800d1ec:	f000 fa98 	bl	800d720 <_Bfree>
 800d1f0:	9b07      	ldr	r3, [sp, #28]
 800d1f2:	9304      	str	r3, [sp, #16]
 800d1f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1f6:	1b9a      	subs	r2, r3, r6
 800d1f8:	42b3      	cmp	r3, r6
 800d1fa:	d004      	beq.n	800d206 <_dtoa_r+0x82e>
 800d1fc:	0038      	movs	r0, r7
 800d1fe:	9904      	ldr	r1, [sp, #16]
 800d200:	f000 fc04 	bl	800da0c <__pow5mult>
 800d204:	9004      	str	r0, [sp, #16]
 800d206:	2101      	movs	r1, #1
 800d208:	0038      	movs	r0, r7
 800d20a:	f000 fb39 	bl	800d880 <__i2b>
 800d20e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d210:	0006      	movs	r6, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	dd37      	ble.n	800d286 <_dtoa_r+0x8ae>
 800d216:	001a      	movs	r2, r3
 800d218:	0001      	movs	r1, r0
 800d21a:	0038      	movs	r0, r7
 800d21c:	f000 fbf6 	bl	800da0c <__pow5mult>
 800d220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d222:	0006      	movs	r6, r0
 800d224:	2b01      	cmp	r3, #1
 800d226:	dd33      	ble.n	800d290 <_dtoa_r+0x8b8>
 800d228:	2300      	movs	r3, #0
 800d22a:	9307      	str	r3, [sp, #28]
 800d22c:	6933      	ldr	r3, [r6, #16]
 800d22e:	3303      	adds	r3, #3
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	18f3      	adds	r3, r6, r3
 800d234:	6858      	ldr	r0, [r3, #4]
 800d236:	f000 fadb 	bl	800d7f0 <__hi0bits>
 800d23a:	2320      	movs	r3, #32
 800d23c:	1a18      	subs	r0, r3, r0
 800d23e:	e03f      	b.n	800d2c0 <_dtoa_r+0x8e8>
 800d240:	2336      	movs	r3, #54	; 0x36
 800d242:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d244:	1a9b      	subs	r3, r3, r2
 800d246:	e79d      	b.n	800d184 <_dtoa_r+0x7ac>
 800d248:	9b06      	ldr	r3, [sp, #24]
 800d24a:	1e5e      	subs	r6, r3, #1
 800d24c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d24e:	42b3      	cmp	r3, r6
 800d250:	db08      	blt.n	800d264 <_dtoa_r+0x88c>
 800d252:	1b9e      	subs	r6, r3, r6
 800d254:	9b06      	ldr	r3, [sp, #24]
 800d256:	2b00      	cmp	r3, #0
 800d258:	da0c      	bge.n	800d274 <_dtoa_r+0x89c>
 800d25a:	9b08      	ldr	r3, [sp, #32]
 800d25c:	9a06      	ldr	r2, [sp, #24]
 800d25e:	1a9c      	subs	r4, r3, r2
 800d260:	2300      	movs	r3, #0
 800d262:	e791      	b.n	800d188 <_dtoa_r+0x7b0>
 800d264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d266:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d268:	1af3      	subs	r3, r6, r3
 800d26a:	18d3      	adds	r3, r2, r3
 800d26c:	960e      	str	r6, [sp, #56]	; 0x38
 800d26e:	9314      	str	r3, [sp, #80]	; 0x50
 800d270:	2600      	movs	r6, #0
 800d272:	e7ef      	b.n	800d254 <_dtoa_r+0x87c>
 800d274:	9c08      	ldr	r4, [sp, #32]
 800d276:	9b06      	ldr	r3, [sp, #24]
 800d278:	e786      	b.n	800d188 <_dtoa_r+0x7b0>
 800d27a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d27c:	9c08      	ldr	r4, [sp, #32]
 800d27e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d280:	e78d      	b.n	800d19e <_dtoa_r+0x7c6>
 800d282:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d284:	e7ba      	b.n	800d1fc <_dtoa_r+0x824>
 800d286:	2300      	movs	r3, #0
 800d288:	9307      	str	r3, [sp, #28]
 800d28a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	dc13      	bgt.n	800d2b8 <_dtoa_r+0x8e0>
 800d290:	2300      	movs	r3, #0
 800d292:	9307      	str	r3, [sp, #28]
 800d294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d296:	2b00      	cmp	r3, #0
 800d298:	d10e      	bne.n	800d2b8 <_dtoa_r+0x8e0>
 800d29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d29c:	031b      	lsls	r3, r3, #12
 800d29e:	d10b      	bne.n	800d2b8 <_dtoa_r+0x8e0>
 800d2a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d2a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d2a4:	4213      	tst	r3, r2
 800d2a6:	d007      	beq.n	800d2b8 <_dtoa_r+0x8e0>
 800d2a8:	9b08      	ldr	r3, [sp, #32]
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	9308      	str	r3, [sp, #32]
 800d2ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	930d      	str	r3, [sp, #52]	; 0x34
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	9307      	str	r3, [sp, #28]
 800d2b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2ba:	2001      	movs	r0, #1
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1b5      	bne.n	800d22c <_dtoa_r+0x854>
 800d2c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2c2:	221f      	movs	r2, #31
 800d2c4:	1818      	adds	r0, r3, r0
 800d2c6:	0003      	movs	r3, r0
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	4210      	tst	r0, r2
 800d2cc:	d046      	beq.n	800d35c <_dtoa_r+0x984>
 800d2ce:	3201      	adds	r2, #1
 800d2d0:	1ad2      	subs	r2, r2, r3
 800d2d2:	2a04      	cmp	r2, #4
 800d2d4:	dd3f      	ble.n	800d356 <_dtoa_r+0x97e>
 800d2d6:	221c      	movs	r2, #28
 800d2d8:	1ad3      	subs	r3, r2, r3
 800d2da:	9a08      	ldr	r2, [sp, #32]
 800d2dc:	18e4      	adds	r4, r4, r3
 800d2de:	18d2      	adds	r2, r2, r3
 800d2e0:	9208      	str	r2, [sp, #32]
 800d2e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2e4:	18d3      	adds	r3, r2, r3
 800d2e6:	930d      	str	r3, [sp, #52]	; 0x34
 800d2e8:	9b08      	ldr	r3, [sp, #32]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	dd05      	ble.n	800d2fa <_dtoa_r+0x922>
 800d2ee:	001a      	movs	r2, r3
 800d2f0:	0038      	movs	r0, r7
 800d2f2:	9904      	ldr	r1, [sp, #16]
 800d2f4:	f000 fbe6 	bl	800dac4 <__lshift>
 800d2f8:	9004      	str	r0, [sp, #16]
 800d2fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	dd05      	ble.n	800d30c <_dtoa_r+0x934>
 800d300:	0031      	movs	r1, r6
 800d302:	001a      	movs	r2, r3
 800d304:	0038      	movs	r0, r7
 800d306:	f000 fbdd 	bl	800dac4 <__lshift>
 800d30a:	0006      	movs	r6, r0
 800d30c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d026      	beq.n	800d360 <_dtoa_r+0x988>
 800d312:	0031      	movs	r1, r6
 800d314:	9804      	ldr	r0, [sp, #16]
 800d316:	f000 fc45 	bl	800dba4 <__mcmp>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	da20      	bge.n	800d360 <_dtoa_r+0x988>
 800d31e:	9b02      	ldr	r3, [sp, #8]
 800d320:	220a      	movs	r2, #10
 800d322:	3b01      	subs	r3, #1
 800d324:	9302      	str	r3, [sp, #8]
 800d326:	0038      	movs	r0, r7
 800d328:	2300      	movs	r3, #0
 800d32a:	9904      	ldr	r1, [sp, #16]
 800d32c:	f000 fa1c 	bl	800d768 <__multadd>
 800d330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d332:	9004      	str	r0, [sp, #16]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d100      	bne.n	800d33a <_dtoa_r+0x962>
 800d338:	e160      	b.n	800d5fc <_dtoa_r+0xc24>
 800d33a:	2300      	movs	r3, #0
 800d33c:	0029      	movs	r1, r5
 800d33e:	220a      	movs	r2, #10
 800d340:	0038      	movs	r0, r7
 800d342:	f000 fa11 	bl	800d768 <__multadd>
 800d346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d348:	0005      	movs	r5, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	dc47      	bgt.n	800d3de <_dtoa_r+0xa06>
 800d34e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d350:	2b02      	cmp	r3, #2
 800d352:	dc0d      	bgt.n	800d370 <_dtoa_r+0x998>
 800d354:	e043      	b.n	800d3de <_dtoa_r+0xa06>
 800d356:	2a04      	cmp	r2, #4
 800d358:	d0c6      	beq.n	800d2e8 <_dtoa_r+0x910>
 800d35a:	0013      	movs	r3, r2
 800d35c:	331c      	adds	r3, #28
 800d35e:	e7bc      	b.n	800d2da <_dtoa_r+0x902>
 800d360:	9b06      	ldr	r3, [sp, #24]
 800d362:	2b00      	cmp	r3, #0
 800d364:	dc35      	bgt.n	800d3d2 <_dtoa_r+0x9fa>
 800d366:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d368:	2b02      	cmp	r3, #2
 800d36a:	dd32      	ble.n	800d3d2 <_dtoa_r+0x9fa>
 800d36c:	9b06      	ldr	r3, [sp, #24]
 800d36e:	930c      	str	r3, [sp, #48]	; 0x30
 800d370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10c      	bne.n	800d390 <_dtoa_r+0x9b8>
 800d376:	0031      	movs	r1, r6
 800d378:	2205      	movs	r2, #5
 800d37a:	0038      	movs	r0, r7
 800d37c:	f000 f9f4 	bl	800d768 <__multadd>
 800d380:	0006      	movs	r6, r0
 800d382:	0001      	movs	r1, r0
 800d384:	9804      	ldr	r0, [sp, #16]
 800d386:	f000 fc0d 	bl	800dba4 <__mcmp>
 800d38a:	2800      	cmp	r0, #0
 800d38c:	dd00      	ble.n	800d390 <_dtoa_r+0x9b8>
 800d38e:	e59f      	b.n	800ced0 <_dtoa_r+0x4f8>
 800d390:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d392:	43db      	mvns	r3, r3
 800d394:	9302      	str	r3, [sp, #8]
 800d396:	9b05      	ldr	r3, [sp, #20]
 800d398:	9307      	str	r3, [sp, #28]
 800d39a:	2400      	movs	r4, #0
 800d39c:	0031      	movs	r1, r6
 800d39e:	0038      	movs	r0, r7
 800d3a0:	f000 f9be 	bl	800d720 <_Bfree>
 800d3a4:	2d00      	cmp	r5, #0
 800d3a6:	d100      	bne.n	800d3aa <_dtoa_r+0x9d2>
 800d3a8:	e6b0      	b.n	800d10c <_dtoa_r+0x734>
 800d3aa:	2c00      	cmp	r4, #0
 800d3ac:	d005      	beq.n	800d3ba <_dtoa_r+0x9e2>
 800d3ae:	42ac      	cmp	r4, r5
 800d3b0:	d003      	beq.n	800d3ba <_dtoa_r+0x9e2>
 800d3b2:	0021      	movs	r1, r4
 800d3b4:	0038      	movs	r0, r7
 800d3b6:	f000 f9b3 	bl	800d720 <_Bfree>
 800d3ba:	0029      	movs	r1, r5
 800d3bc:	0038      	movs	r0, r7
 800d3be:	f000 f9af 	bl	800d720 <_Bfree>
 800d3c2:	e6a3      	b.n	800d10c <_dtoa_r+0x734>
 800d3c4:	2600      	movs	r6, #0
 800d3c6:	0035      	movs	r5, r6
 800d3c8:	e7e2      	b.n	800d390 <_dtoa_r+0x9b8>
 800d3ca:	9602      	str	r6, [sp, #8]
 800d3cc:	9e07      	ldr	r6, [sp, #28]
 800d3ce:	0035      	movs	r5, r6
 800d3d0:	e57e      	b.n	800ced0 <_dtoa_r+0x4f8>
 800d3d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d100      	bne.n	800d3da <_dtoa_r+0xa02>
 800d3d8:	e0c8      	b.n	800d56c <_dtoa_r+0xb94>
 800d3da:	9b06      	ldr	r3, [sp, #24]
 800d3dc:	930c      	str	r3, [sp, #48]	; 0x30
 800d3de:	2c00      	cmp	r4, #0
 800d3e0:	dd05      	ble.n	800d3ee <_dtoa_r+0xa16>
 800d3e2:	0029      	movs	r1, r5
 800d3e4:	0022      	movs	r2, r4
 800d3e6:	0038      	movs	r0, r7
 800d3e8:	f000 fb6c 	bl	800dac4 <__lshift>
 800d3ec:	0005      	movs	r5, r0
 800d3ee:	9b07      	ldr	r3, [sp, #28]
 800d3f0:	0028      	movs	r0, r5
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d01f      	beq.n	800d436 <_dtoa_r+0xa5e>
 800d3f6:	0038      	movs	r0, r7
 800d3f8:	6869      	ldr	r1, [r5, #4]
 800d3fa:	f000 f94d 	bl	800d698 <_Balloc>
 800d3fe:	1e04      	subs	r4, r0, #0
 800d400:	d10c      	bne.n	800d41c <_dtoa_r+0xa44>
 800d402:	0002      	movs	r2, r0
 800d404:	4b03      	ldr	r3, [pc, #12]	; (800d414 <_dtoa_r+0xa3c>)
 800d406:	4904      	ldr	r1, [pc, #16]	; (800d418 <_dtoa_r+0xa40>)
 800d408:	f7ff fafb 	bl	800ca02 <_dtoa_r+0x2a>
 800d40c:	40240000 	.word	0x40240000
 800d410:	00000433 	.word	0x00000433
 800d414:	0800f03c 	.word	0x0800f03c
 800d418:	000002ea 	.word	0x000002ea
 800d41c:	0029      	movs	r1, r5
 800d41e:	692b      	ldr	r3, [r5, #16]
 800d420:	310c      	adds	r1, #12
 800d422:	1c9a      	adds	r2, r3, #2
 800d424:	0092      	lsls	r2, r2, #2
 800d426:	300c      	adds	r0, #12
 800d428:	f7fe fcc6 	bl	800bdb8 <memcpy>
 800d42c:	2201      	movs	r2, #1
 800d42e:	0021      	movs	r1, r4
 800d430:	0038      	movs	r0, r7
 800d432:	f000 fb47 	bl	800dac4 <__lshift>
 800d436:	002c      	movs	r4, r5
 800d438:	0005      	movs	r5, r0
 800d43a:	9b05      	ldr	r3, [sp, #20]
 800d43c:	9308      	str	r3, [sp, #32]
 800d43e:	0031      	movs	r1, r6
 800d440:	9804      	ldr	r0, [sp, #16]
 800d442:	f7ff fa3d 	bl	800c8c0 <quorem>
 800d446:	0003      	movs	r3, r0
 800d448:	0021      	movs	r1, r4
 800d44a:	3330      	adds	r3, #48	; 0x30
 800d44c:	900e      	str	r0, [sp, #56]	; 0x38
 800d44e:	9804      	ldr	r0, [sp, #16]
 800d450:	9306      	str	r3, [sp, #24]
 800d452:	f000 fba7 	bl	800dba4 <__mcmp>
 800d456:	002a      	movs	r2, r5
 800d458:	900f      	str	r0, [sp, #60]	; 0x3c
 800d45a:	0031      	movs	r1, r6
 800d45c:	0038      	movs	r0, r7
 800d45e:	f000 fbbd 	bl	800dbdc <__mdiff>
 800d462:	68c3      	ldr	r3, [r0, #12]
 800d464:	9007      	str	r0, [sp, #28]
 800d466:	9310      	str	r3, [sp, #64]	; 0x40
 800d468:	2301      	movs	r3, #1
 800d46a:	930d      	str	r3, [sp, #52]	; 0x34
 800d46c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d104      	bne.n	800d47c <_dtoa_r+0xaa4>
 800d472:	0001      	movs	r1, r0
 800d474:	9804      	ldr	r0, [sp, #16]
 800d476:	f000 fb95 	bl	800dba4 <__mcmp>
 800d47a:	900d      	str	r0, [sp, #52]	; 0x34
 800d47c:	0038      	movs	r0, r7
 800d47e:	9907      	ldr	r1, [sp, #28]
 800d480:	f000 f94e 	bl	800d720 <_Bfree>
 800d484:	2301      	movs	r3, #1
 800d486:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d48a:	4018      	ands	r0, r3
 800d48c:	9b08      	ldr	r3, [sp, #32]
 800d48e:	3301      	adds	r3, #1
 800d490:	9307      	str	r3, [sp, #28]
 800d492:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d494:	4313      	orrs	r3, r2
 800d496:	4303      	orrs	r3, r0
 800d498:	d10c      	bne.n	800d4b4 <_dtoa_r+0xadc>
 800d49a:	9b06      	ldr	r3, [sp, #24]
 800d49c:	2b39      	cmp	r3, #57	; 0x39
 800d49e:	d025      	beq.n	800d4ec <_dtoa_r+0xb14>
 800d4a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	dd02      	ble.n	800d4ac <_dtoa_r+0xad4>
 800d4a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4a8:	3331      	adds	r3, #49	; 0x31
 800d4aa:	9306      	str	r3, [sp, #24]
 800d4ac:	9b08      	ldr	r3, [sp, #32]
 800d4ae:	9a06      	ldr	r2, [sp, #24]
 800d4b0:	701a      	strb	r2, [r3, #0]
 800d4b2:	e773      	b.n	800d39c <_dtoa_r+0x9c4>
 800d4b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	db03      	blt.n	800d4c2 <_dtoa_r+0xaea>
 800d4ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	4303      	orrs	r3, r0
 800d4c0:	d11f      	bne.n	800d502 <_dtoa_r+0xb2a>
 800d4c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	ddf1      	ble.n	800d4ac <_dtoa_r+0xad4>
 800d4c8:	9904      	ldr	r1, [sp, #16]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	0038      	movs	r0, r7
 800d4ce:	f000 faf9 	bl	800dac4 <__lshift>
 800d4d2:	0031      	movs	r1, r6
 800d4d4:	9004      	str	r0, [sp, #16]
 800d4d6:	f000 fb65 	bl	800dba4 <__mcmp>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	dc03      	bgt.n	800d4e6 <_dtoa_r+0xb0e>
 800d4de:	d1e5      	bne.n	800d4ac <_dtoa_r+0xad4>
 800d4e0:	9b06      	ldr	r3, [sp, #24]
 800d4e2:	07db      	lsls	r3, r3, #31
 800d4e4:	d5e2      	bpl.n	800d4ac <_dtoa_r+0xad4>
 800d4e6:	9b06      	ldr	r3, [sp, #24]
 800d4e8:	2b39      	cmp	r3, #57	; 0x39
 800d4ea:	d1dc      	bne.n	800d4a6 <_dtoa_r+0xace>
 800d4ec:	2339      	movs	r3, #57	; 0x39
 800d4ee:	9a08      	ldr	r2, [sp, #32]
 800d4f0:	7013      	strb	r3, [r2, #0]
 800d4f2:	9b07      	ldr	r3, [sp, #28]
 800d4f4:	9307      	str	r3, [sp, #28]
 800d4f6:	3b01      	subs	r3, #1
 800d4f8:	781a      	ldrb	r2, [r3, #0]
 800d4fa:	2a39      	cmp	r2, #57	; 0x39
 800d4fc:	d06c      	beq.n	800d5d8 <_dtoa_r+0xc00>
 800d4fe:	3201      	adds	r2, #1
 800d500:	e7d6      	b.n	800d4b0 <_dtoa_r+0xad8>
 800d502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d504:	2b00      	cmp	r3, #0
 800d506:	dd07      	ble.n	800d518 <_dtoa_r+0xb40>
 800d508:	9b06      	ldr	r3, [sp, #24]
 800d50a:	2b39      	cmp	r3, #57	; 0x39
 800d50c:	d0ee      	beq.n	800d4ec <_dtoa_r+0xb14>
 800d50e:	9b06      	ldr	r3, [sp, #24]
 800d510:	9a08      	ldr	r2, [sp, #32]
 800d512:	3301      	adds	r3, #1
 800d514:	7013      	strb	r3, [r2, #0]
 800d516:	e741      	b.n	800d39c <_dtoa_r+0x9c4>
 800d518:	9b08      	ldr	r3, [sp, #32]
 800d51a:	9a06      	ldr	r2, [sp, #24]
 800d51c:	701a      	strb	r2, [r3, #0]
 800d51e:	2301      	movs	r3, #1
 800d520:	9a05      	ldr	r2, [sp, #20]
 800d522:	1a9b      	subs	r3, r3, r2
 800d524:	9a08      	ldr	r2, [sp, #32]
 800d526:	189b      	adds	r3, r3, r2
 800d528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d03e      	beq.n	800d5ac <_dtoa_r+0xbd4>
 800d52e:	2300      	movs	r3, #0
 800d530:	220a      	movs	r2, #10
 800d532:	9904      	ldr	r1, [sp, #16]
 800d534:	0038      	movs	r0, r7
 800d536:	f000 f917 	bl	800d768 <__multadd>
 800d53a:	2300      	movs	r3, #0
 800d53c:	9004      	str	r0, [sp, #16]
 800d53e:	220a      	movs	r2, #10
 800d540:	0021      	movs	r1, r4
 800d542:	0038      	movs	r0, r7
 800d544:	42ac      	cmp	r4, r5
 800d546:	d106      	bne.n	800d556 <_dtoa_r+0xb7e>
 800d548:	f000 f90e 	bl	800d768 <__multadd>
 800d54c:	0004      	movs	r4, r0
 800d54e:	0005      	movs	r5, r0
 800d550:	9b07      	ldr	r3, [sp, #28]
 800d552:	9308      	str	r3, [sp, #32]
 800d554:	e773      	b.n	800d43e <_dtoa_r+0xa66>
 800d556:	f000 f907 	bl	800d768 <__multadd>
 800d55a:	0029      	movs	r1, r5
 800d55c:	0004      	movs	r4, r0
 800d55e:	2300      	movs	r3, #0
 800d560:	220a      	movs	r2, #10
 800d562:	0038      	movs	r0, r7
 800d564:	f000 f900 	bl	800d768 <__multadd>
 800d568:	0005      	movs	r5, r0
 800d56a:	e7f1      	b.n	800d550 <_dtoa_r+0xb78>
 800d56c:	9b06      	ldr	r3, [sp, #24]
 800d56e:	930c      	str	r3, [sp, #48]	; 0x30
 800d570:	2400      	movs	r4, #0
 800d572:	0031      	movs	r1, r6
 800d574:	9804      	ldr	r0, [sp, #16]
 800d576:	f7ff f9a3 	bl	800c8c0 <quorem>
 800d57a:	9b05      	ldr	r3, [sp, #20]
 800d57c:	3030      	adds	r0, #48	; 0x30
 800d57e:	5518      	strb	r0, [r3, r4]
 800d580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d582:	3401      	adds	r4, #1
 800d584:	9006      	str	r0, [sp, #24]
 800d586:	42a3      	cmp	r3, r4
 800d588:	dd07      	ble.n	800d59a <_dtoa_r+0xbc2>
 800d58a:	2300      	movs	r3, #0
 800d58c:	220a      	movs	r2, #10
 800d58e:	0038      	movs	r0, r7
 800d590:	9904      	ldr	r1, [sp, #16]
 800d592:	f000 f8e9 	bl	800d768 <__multadd>
 800d596:	9004      	str	r0, [sp, #16]
 800d598:	e7eb      	b.n	800d572 <_dtoa_r+0xb9a>
 800d59a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d59c:	2001      	movs	r0, #1
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	dd00      	ble.n	800d5a4 <_dtoa_r+0xbcc>
 800d5a2:	0018      	movs	r0, r3
 800d5a4:	2400      	movs	r4, #0
 800d5a6:	9b05      	ldr	r3, [sp, #20]
 800d5a8:	181b      	adds	r3, r3, r0
 800d5aa:	9307      	str	r3, [sp, #28]
 800d5ac:	9904      	ldr	r1, [sp, #16]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	0038      	movs	r0, r7
 800d5b2:	f000 fa87 	bl	800dac4 <__lshift>
 800d5b6:	0031      	movs	r1, r6
 800d5b8:	9004      	str	r0, [sp, #16]
 800d5ba:	f000 faf3 	bl	800dba4 <__mcmp>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	dc97      	bgt.n	800d4f2 <_dtoa_r+0xb1a>
 800d5c2:	d102      	bne.n	800d5ca <_dtoa_r+0xbf2>
 800d5c4:	9b06      	ldr	r3, [sp, #24]
 800d5c6:	07db      	lsls	r3, r3, #31
 800d5c8:	d493      	bmi.n	800d4f2 <_dtoa_r+0xb1a>
 800d5ca:	9b07      	ldr	r3, [sp, #28]
 800d5cc:	9307      	str	r3, [sp, #28]
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	781a      	ldrb	r2, [r3, #0]
 800d5d2:	2a30      	cmp	r2, #48	; 0x30
 800d5d4:	d0fa      	beq.n	800d5cc <_dtoa_r+0xbf4>
 800d5d6:	e6e1      	b.n	800d39c <_dtoa_r+0x9c4>
 800d5d8:	9a05      	ldr	r2, [sp, #20]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d18a      	bne.n	800d4f4 <_dtoa_r+0xb1c>
 800d5de:	9b02      	ldr	r3, [sp, #8]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	9302      	str	r3, [sp, #8]
 800d5e4:	2331      	movs	r3, #49	; 0x31
 800d5e6:	e795      	b.n	800d514 <_dtoa_r+0xb3c>
 800d5e8:	4b08      	ldr	r3, [pc, #32]	; (800d60c <_dtoa_r+0xc34>)
 800d5ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d5ec:	9305      	str	r3, [sp, #20]
 800d5ee:	4b08      	ldr	r3, [pc, #32]	; (800d610 <_dtoa_r+0xc38>)
 800d5f0:	2a00      	cmp	r2, #0
 800d5f2:	d001      	beq.n	800d5f8 <_dtoa_r+0xc20>
 800d5f4:	f7ff fa3b 	bl	800ca6e <_dtoa_r+0x96>
 800d5f8:	f7ff fa3b 	bl	800ca72 <_dtoa_r+0x9a>
 800d5fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	dcb6      	bgt.n	800d570 <_dtoa_r+0xb98>
 800d602:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d604:	2b02      	cmp	r3, #2
 800d606:	dd00      	ble.n	800d60a <_dtoa_r+0xc32>
 800d608:	e6b2      	b.n	800d370 <_dtoa_r+0x998>
 800d60a:	e7b1      	b.n	800d570 <_dtoa_r+0xb98>
 800d60c:	0800efb9 	.word	0x0800efb9
 800d610:	0800efc1 	.word	0x0800efc1

0800d614 <fiprintf>:
 800d614:	b40e      	push	{r1, r2, r3}
 800d616:	b503      	push	{r0, r1, lr}
 800d618:	0001      	movs	r1, r0
 800d61a:	ab03      	add	r3, sp, #12
 800d61c:	4804      	ldr	r0, [pc, #16]	; (800d630 <fiprintf+0x1c>)
 800d61e:	cb04      	ldmia	r3!, {r2}
 800d620:	6800      	ldr	r0, [r0, #0]
 800d622:	9301      	str	r3, [sp, #4]
 800d624:	f000 fd6e 	bl	800e104 <_vfiprintf_r>
 800d628:	b002      	add	sp, #8
 800d62a:	bc08      	pop	{r3}
 800d62c:	b003      	add	sp, #12
 800d62e:	4718      	bx	r3
 800d630:	20000038 	.word	0x20000038

0800d634 <_localeconv_r>:
 800d634:	4800      	ldr	r0, [pc, #0]	; (800d638 <_localeconv_r+0x4>)
 800d636:	4770      	bx	lr
 800d638:	2000018c 	.word	0x2000018c

0800d63c <__ascii_mbtowc>:
 800d63c:	b082      	sub	sp, #8
 800d63e:	2900      	cmp	r1, #0
 800d640:	d100      	bne.n	800d644 <__ascii_mbtowc+0x8>
 800d642:	a901      	add	r1, sp, #4
 800d644:	1e10      	subs	r0, r2, #0
 800d646:	d006      	beq.n	800d656 <__ascii_mbtowc+0x1a>
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d006      	beq.n	800d65a <__ascii_mbtowc+0x1e>
 800d64c:	7813      	ldrb	r3, [r2, #0]
 800d64e:	600b      	str	r3, [r1, #0]
 800d650:	7810      	ldrb	r0, [r2, #0]
 800d652:	1e43      	subs	r3, r0, #1
 800d654:	4198      	sbcs	r0, r3
 800d656:	b002      	add	sp, #8
 800d658:	4770      	bx	lr
 800d65a:	2002      	movs	r0, #2
 800d65c:	4240      	negs	r0, r0
 800d65e:	e7fa      	b.n	800d656 <__ascii_mbtowc+0x1a>

0800d660 <memchr>:
 800d660:	b2c9      	uxtb	r1, r1
 800d662:	1882      	adds	r2, r0, r2
 800d664:	4290      	cmp	r0, r2
 800d666:	d101      	bne.n	800d66c <memchr+0xc>
 800d668:	2000      	movs	r0, #0
 800d66a:	4770      	bx	lr
 800d66c:	7803      	ldrb	r3, [r0, #0]
 800d66e:	428b      	cmp	r3, r1
 800d670:	d0fb      	beq.n	800d66a <memchr+0xa>
 800d672:	3001      	adds	r0, #1
 800d674:	e7f6      	b.n	800d664 <memchr+0x4>
	...

0800d678 <__malloc_lock>:
 800d678:	b510      	push	{r4, lr}
 800d67a:	4802      	ldr	r0, [pc, #8]	; (800d684 <__malloc_lock+0xc>)
 800d67c:	f001 f92f 	bl	800e8de <__retarget_lock_acquire_recursive>
 800d680:	bd10      	pop	{r4, pc}
 800d682:	46c0      	nop			; (mov r8, r8)
 800d684:	20000614 	.word	0x20000614

0800d688 <__malloc_unlock>:
 800d688:	b510      	push	{r4, lr}
 800d68a:	4802      	ldr	r0, [pc, #8]	; (800d694 <__malloc_unlock+0xc>)
 800d68c:	f001 f928 	bl	800e8e0 <__retarget_lock_release_recursive>
 800d690:	bd10      	pop	{r4, pc}
 800d692:	46c0      	nop			; (mov r8, r8)
 800d694:	20000614 	.word	0x20000614

0800d698 <_Balloc>:
 800d698:	b570      	push	{r4, r5, r6, lr}
 800d69a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d69c:	0006      	movs	r6, r0
 800d69e:	000c      	movs	r4, r1
 800d6a0:	2d00      	cmp	r5, #0
 800d6a2:	d10e      	bne.n	800d6c2 <_Balloc+0x2a>
 800d6a4:	2010      	movs	r0, #16
 800d6a6:	f7fe fb7d 	bl	800bda4 <malloc>
 800d6aa:	1e02      	subs	r2, r0, #0
 800d6ac:	6270      	str	r0, [r6, #36]	; 0x24
 800d6ae:	d104      	bne.n	800d6ba <_Balloc+0x22>
 800d6b0:	2166      	movs	r1, #102	; 0x66
 800d6b2:	4b19      	ldr	r3, [pc, #100]	; (800d718 <_Balloc+0x80>)
 800d6b4:	4819      	ldr	r0, [pc, #100]	; (800d71c <_Balloc+0x84>)
 800d6b6:	f7ff f8e5 	bl	800c884 <__assert_func>
 800d6ba:	6045      	str	r5, [r0, #4]
 800d6bc:	6085      	str	r5, [r0, #8]
 800d6be:	6005      	str	r5, [r0, #0]
 800d6c0:	60c5      	str	r5, [r0, #12]
 800d6c2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800d6c4:	68eb      	ldr	r3, [r5, #12]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d013      	beq.n	800d6f2 <_Balloc+0x5a>
 800d6ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d6cc:	00a2      	lsls	r2, r4, #2
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	189b      	adds	r3, r3, r2
 800d6d2:	6818      	ldr	r0, [r3, #0]
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	d118      	bne.n	800d70a <_Balloc+0x72>
 800d6d8:	2101      	movs	r1, #1
 800d6da:	000d      	movs	r5, r1
 800d6dc:	40a5      	lsls	r5, r4
 800d6de:	1d6a      	adds	r2, r5, #5
 800d6e0:	0030      	movs	r0, r6
 800d6e2:	0092      	lsls	r2, r2, #2
 800d6e4:	f000 fb76 	bl	800ddd4 <_calloc_r>
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	d00c      	beq.n	800d706 <_Balloc+0x6e>
 800d6ec:	6044      	str	r4, [r0, #4]
 800d6ee:	6085      	str	r5, [r0, #8]
 800d6f0:	e00d      	b.n	800d70e <_Balloc+0x76>
 800d6f2:	2221      	movs	r2, #33	; 0x21
 800d6f4:	2104      	movs	r1, #4
 800d6f6:	0030      	movs	r0, r6
 800d6f8:	f000 fb6c 	bl	800ddd4 <_calloc_r>
 800d6fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d6fe:	60e8      	str	r0, [r5, #12]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1e1      	bne.n	800d6ca <_Balloc+0x32>
 800d706:	2000      	movs	r0, #0
 800d708:	bd70      	pop	{r4, r5, r6, pc}
 800d70a:	6802      	ldr	r2, [r0, #0]
 800d70c:	601a      	str	r2, [r3, #0]
 800d70e:	2300      	movs	r3, #0
 800d710:	6103      	str	r3, [r0, #16]
 800d712:	60c3      	str	r3, [r0, #12]
 800d714:	e7f8      	b.n	800d708 <_Balloc+0x70>
 800d716:	46c0      	nop			; (mov r8, r8)
 800d718:	0800efc6 	.word	0x0800efc6
 800d71c:	0800f057 	.word	0x0800f057

0800d720 <_Bfree>:
 800d720:	b570      	push	{r4, r5, r6, lr}
 800d722:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d724:	0005      	movs	r5, r0
 800d726:	000c      	movs	r4, r1
 800d728:	2e00      	cmp	r6, #0
 800d72a:	d10e      	bne.n	800d74a <_Bfree+0x2a>
 800d72c:	2010      	movs	r0, #16
 800d72e:	f7fe fb39 	bl	800bda4 <malloc>
 800d732:	1e02      	subs	r2, r0, #0
 800d734:	6268      	str	r0, [r5, #36]	; 0x24
 800d736:	d104      	bne.n	800d742 <_Bfree+0x22>
 800d738:	218a      	movs	r1, #138	; 0x8a
 800d73a:	4b09      	ldr	r3, [pc, #36]	; (800d760 <_Bfree+0x40>)
 800d73c:	4809      	ldr	r0, [pc, #36]	; (800d764 <_Bfree+0x44>)
 800d73e:	f7ff f8a1 	bl	800c884 <__assert_func>
 800d742:	6046      	str	r6, [r0, #4]
 800d744:	6086      	str	r6, [r0, #8]
 800d746:	6006      	str	r6, [r0, #0]
 800d748:	60c6      	str	r6, [r0, #12]
 800d74a:	2c00      	cmp	r4, #0
 800d74c:	d007      	beq.n	800d75e <_Bfree+0x3e>
 800d74e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d750:	6862      	ldr	r2, [r4, #4]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	0092      	lsls	r2, r2, #2
 800d756:	189b      	adds	r3, r3, r2
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	6022      	str	r2, [r4, #0]
 800d75c:	601c      	str	r4, [r3, #0]
 800d75e:	bd70      	pop	{r4, r5, r6, pc}
 800d760:	0800efc6 	.word	0x0800efc6
 800d764:	0800f057 	.word	0x0800f057

0800d768 <__multadd>:
 800d768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d76a:	000e      	movs	r6, r1
 800d76c:	9001      	str	r0, [sp, #4]
 800d76e:	000c      	movs	r4, r1
 800d770:	001d      	movs	r5, r3
 800d772:	2000      	movs	r0, #0
 800d774:	690f      	ldr	r7, [r1, #16]
 800d776:	3614      	adds	r6, #20
 800d778:	6833      	ldr	r3, [r6, #0]
 800d77a:	3001      	adds	r0, #1
 800d77c:	b299      	uxth	r1, r3
 800d77e:	4351      	muls	r1, r2
 800d780:	0c1b      	lsrs	r3, r3, #16
 800d782:	4353      	muls	r3, r2
 800d784:	1949      	adds	r1, r1, r5
 800d786:	0c0d      	lsrs	r5, r1, #16
 800d788:	195b      	adds	r3, r3, r5
 800d78a:	0c1d      	lsrs	r5, r3, #16
 800d78c:	b289      	uxth	r1, r1
 800d78e:	041b      	lsls	r3, r3, #16
 800d790:	185b      	adds	r3, r3, r1
 800d792:	c608      	stmia	r6!, {r3}
 800d794:	4287      	cmp	r7, r0
 800d796:	dcef      	bgt.n	800d778 <__multadd+0x10>
 800d798:	2d00      	cmp	r5, #0
 800d79a:	d022      	beq.n	800d7e2 <__multadd+0x7a>
 800d79c:	68a3      	ldr	r3, [r4, #8]
 800d79e:	42bb      	cmp	r3, r7
 800d7a0:	dc19      	bgt.n	800d7d6 <__multadd+0x6e>
 800d7a2:	6863      	ldr	r3, [r4, #4]
 800d7a4:	9801      	ldr	r0, [sp, #4]
 800d7a6:	1c59      	adds	r1, r3, #1
 800d7a8:	f7ff ff76 	bl	800d698 <_Balloc>
 800d7ac:	1e06      	subs	r6, r0, #0
 800d7ae:	d105      	bne.n	800d7bc <__multadd+0x54>
 800d7b0:	0002      	movs	r2, r0
 800d7b2:	21b5      	movs	r1, #181	; 0xb5
 800d7b4:	4b0c      	ldr	r3, [pc, #48]	; (800d7e8 <__multadd+0x80>)
 800d7b6:	480d      	ldr	r0, [pc, #52]	; (800d7ec <__multadd+0x84>)
 800d7b8:	f7ff f864 	bl	800c884 <__assert_func>
 800d7bc:	0021      	movs	r1, r4
 800d7be:	6923      	ldr	r3, [r4, #16]
 800d7c0:	310c      	adds	r1, #12
 800d7c2:	1c9a      	adds	r2, r3, #2
 800d7c4:	0092      	lsls	r2, r2, #2
 800d7c6:	300c      	adds	r0, #12
 800d7c8:	f7fe faf6 	bl	800bdb8 <memcpy>
 800d7cc:	0021      	movs	r1, r4
 800d7ce:	9801      	ldr	r0, [sp, #4]
 800d7d0:	f7ff ffa6 	bl	800d720 <_Bfree>
 800d7d4:	0034      	movs	r4, r6
 800d7d6:	1d3b      	adds	r3, r7, #4
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	18e3      	adds	r3, r4, r3
 800d7dc:	605d      	str	r5, [r3, #4]
 800d7de:	1c7b      	adds	r3, r7, #1
 800d7e0:	6123      	str	r3, [r4, #16]
 800d7e2:	0020      	movs	r0, r4
 800d7e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d7e6:	46c0      	nop			; (mov r8, r8)
 800d7e8:	0800f03c 	.word	0x0800f03c
 800d7ec:	0800f057 	.word	0x0800f057

0800d7f0 <__hi0bits>:
 800d7f0:	0003      	movs	r3, r0
 800d7f2:	0c02      	lsrs	r2, r0, #16
 800d7f4:	2000      	movs	r0, #0
 800d7f6:	4282      	cmp	r2, r0
 800d7f8:	d101      	bne.n	800d7fe <__hi0bits+0xe>
 800d7fa:	041b      	lsls	r3, r3, #16
 800d7fc:	3010      	adds	r0, #16
 800d7fe:	0e1a      	lsrs	r2, r3, #24
 800d800:	d101      	bne.n	800d806 <__hi0bits+0x16>
 800d802:	3008      	adds	r0, #8
 800d804:	021b      	lsls	r3, r3, #8
 800d806:	0f1a      	lsrs	r2, r3, #28
 800d808:	d101      	bne.n	800d80e <__hi0bits+0x1e>
 800d80a:	3004      	adds	r0, #4
 800d80c:	011b      	lsls	r3, r3, #4
 800d80e:	0f9a      	lsrs	r2, r3, #30
 800d810:	d101      	bne.n	800d816 <__hi0bits+0x26>
 800d812:	3002      	adds	r0, #2
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	2b00      	cmp	r3, #0
 800d818:	db03      	blt.n	800d822 <__hi0bits+0x32>
 800d81a:	3001      	adds	r0, #1
 800d81c:	005b      	lsls	r3, r3, #1
 800d81e:	d400      	bmi.n	800d822 <__hi0bits+0x32>
 800d820:	2020      	movs	r0, #32
 800d822:	4770      	bx	lr

0800d824 <__lo0bits>:
 800d824:	6803      	ldr	r3, [r0, #0]
 800d826:	0002      	movs	r2, r0
 800d828:	2107      	movs	r1, #7
 800d82a:	0018      	movs	r0, r3
 800d82c:	4008      	ands	r0, r1
 800d82e:	420b      	tst	r3, r1
 800d830:	d00d      	beq.n	800d84e <__lo0bits+0x2a>
 800d832:	3906      	subs	r1, #6
 800d834:	2000      	movs	r0, #0
 800d836:	420b      	tst	r3, r1
 800d838:	d105      	bne.n	800d846 <__lo0bits+0x22>
 800d83a:	3002      	adds	r0, #2
 800d83c:	4203      	tst	r3, r0
 800d83e:	d003      	beq.n	800d848 <__lo0bits+0x24>
 800d840:	40cb      	lsrs	r3, r1
 800d842:	0008      	movs	r0, r1
 800d844:	6013      	str	r3, [r2, #0]
 800d846:	4770      	bx	lr
 800d848:	089b      	lsrs	r3, r3, #2
 800d84a:	6013      	str	r3, [r2, #0]
 800d84c:	e7fb      	b.n	800d846 <__lo0bits+0x22>
 800d84e:	b299      	uxth	r1, r3
 800d850:	2900      	cmp	r1, #0
 800d852:	d101      	bne.n	800d858 <__lo0bits+0x34>
 800d854:	2010      	movs	r0, #16
 800d856:	0c1b      	lsrs	r3, r3, #16
 800d858:	b2d9      	uxtb	r1, r3
 800d85a:	2900      	cmp	r1, #0
 800d85c:	d101      	bne.n	800d862 <__lo0bits+0x3e>
 800d85e:	3008      	adds	r0, #8
 800d860:	0a1b      	lsrs	r3, r3, #8
 800d862:	0719      	lsls	r1, r3, #28
 800d864:	d101      	bne.n	800d86a <__lo0bits+0x46>
 800d866:	3004      	adds	r0, #4
 800d868:	091b      	lsrs	r3, r3, #4
 800d86a:	0799      	lsls	r1, r3, #30
 800d86c:	d101      	bne.n	800d872 <__lo0bits+0x4e>
 800d86e:	3002      	adds	r0, #2
 800d870:	089b      	lsrs	r3, r3, #2
 800d872:	07d9      	lsls	r1, r3, #31
 800d874:	d4e9      	bmi.n	800d84a <__lo0bits+0x26>
 800d876:	3001      	adds	r0, #1
 800d878:	085b      	lsrs	r3, r3, #1
 800d87a:	d1e6      	bne.n	800d84a <__lo0bits+0x26>
 800d87c:	2020      	movs	r0, #32
 800d87e:	e7e2      	b.n	800d846 <__lo0bits+0x22>

0800d880 <__i2b>:
 800d880:	b510      	push	{r4, lr}
 800d882:	000c      	movs	r4, r1
 800d884:	2101      	movs	r1, #1
 800d886:	f7ff ff07 	bl	800d698 <_Balloc>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d106      	bne.n	800d89c <__i2b+0x1c>
 800d88e:	21a0      	movs	r1, #160	; 0xa0
 800d890:	0002      	movs	r2, r0
 800d892:	4b04      	ldr	r3, [pc, #16]	; (800d8a4 <__i2b+0x24>)
 800d894:	4804      	ldr	r0, [pc, #16]	; (800d8a8 <__i2b+0x28>)
 800d896:	0049      	lsls	r1, r1, #1
 800d898:	f7fe fff4 	bl	800c884 <__assert_func>
 800d89c:	2301      	movs	r3, #1
 800d89e:	6144      	str	r4, [r0, #20]
 800d8a0:	6103      	str	r3, [r0, #16]
 800d8a2:	bd10      	pop	{r4, pc}
 800d8a4:	0800f03c 	.word	0x0800f03c
 800d8a8:	0800f057 	.word	0x0800f057

0800d8ac <__multiply>:
 800d8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ae:	690b      	ldr	r3, [r1, #16]
 800d8b0:	0014      	movs	r4, r2
 800d8b2:	6912      	ldr	r2, [r2, #16]
 800d8b4:	000d      	movs	r5, r1
 800d8b6:	b089      	sub	sp, #36	; 0x24
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	da01      	bge.n	800d8c0 <__multiply+0x14>
 800d8bc:	0025      	movs	r5, r4
 800d8be:	000c      	movs	r4, r1
 800d8c0:	692f      	ldr	r7, [r5, #16]
 800d8c2:	6926      	ldr	r6, [r4, #16]
 800d8c4:	6869      	ldr	r1, [r5, #4]
 800d8c6:	19bb      	adds	r3, r7, r6
 800d8c8:	9302      	str	r3, [sp, #8]
 800d8ca:	68ab      	ldr	r3, [r5, #8]
 800d8cc:	19ba      	adds	r2, r7, r6
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	da00      	bge.n	800d8d4 <__multiply+0x28>
 800d8d2:	3101      	adds	r1, #1
 800d8d4:	f7ff fee0 	bl	800d698 <_Balloc>
 800d8d8:	9001      	str	r0, [sp, #4]
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	d106      	bne.n	800d8ec <__multiply+0x40>
 800d8de:	215e      	movs	r1, #94	; 0x5e
 800d8e0:	0002      	movs	r2, r0
 800d8e2:	4b48      	ldr	r3, [pc, #288]	; (800da04 <__multiply+0x158>)
 800d8e4:	4848      	ldr	r0, [pc, #288]	; (800da08 <__multiply+0x15c>)
 800d8e6:	31ff      	adds	r1, #255	; 0xff
 800d8e8:	f7fe ffcc 	bl	800c884 <__assert_func>
 800d8ec:	9b01      	ldr	r3, [sp, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	3314      	adds	r3, #20
 800d8f2:	469c      	mov	ip, r3
 800d8f4:	19bb      	adds	r3, r7, r6
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4463      	add	r3, ip
 800d8fa:	9303      	str	r3, [sp, #12]
 800d8fc:	4663      	mov	r3, ip
 800d8fe:	9903      	ldr	r1, [sp, #12]
 800d900:	428b      	cmp	r3, r1
 800d902:	d32c      	bcc.n	800d95e <__multiply+0xb2>
 800d904:	002b      	movs	r3, r5
 800d906:	0022      	movs	r2, r4
 800d908:	3314      	adds	r3, #20
 800d90a:	00bf      	lsls	r7, r7, #2
 800d90c:	3214      	adds	r2, #20
 800d90e:	9306      	str	r3, [sp, #24]
 800d910:	00b6      	lsls	r6, r6, #2
 800d912:	19db      	adds	r3, r3, r7
 800d914:	9304      	str	r3, [sp, #16]
 800d916:	1993      	adds	r3, r2, r6
 800d918:	9307      	str	r3, [sp, #28]
 800d91a:	2304      	movs	r3, #4
 800d91c:	9305      	str	r3, [sp, #20]
 800d91e:	002b      	movs	r3, r5
 800d920:	9904      	ldr	r1, [sp, #16]
 800d922:	3315      	adds	r3, #21
 800d924:	9200      	str	r2, [sp, #0]
 800d926:	4299      	cmp	r1, r3
 800d928:	d305      	bcc.n	800d936 <__multiply+0x8a>
 800d92a:	1b4b      	subs	r3, r1, r5
 800d92c:	3b15      	subs	r3, #21
 800d92e:	089b      	lsrs	r3, r3, #2
 800d930:	3301      	adds	r3, #1
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	9305      	str	r3, [sp, #20]
 800d936:	9b07      	ldr	r3, [sp, #28]
 800d938:	9a00      	ldr	r2, [sp, #0]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d311      	bcc.n	800d962 <__multiply+0xb6>
 800d93e:	9b02      	ldr	r3, [sp, #8]
 800d940:	2b00      	cmp	r3, #0
 800d942:	dd06      	ble.n	800d952 <__multiply+0xa6>
 800d944:	9b03      	ldr	r3, [sp, #12]
 800d946:	3b04      	subs	r3, #4
 800d948:	9303      	str	r3, [sp, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	9300      	str	r3, [sp, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d054      	beq.n	800d9fc <__multiply+0x150>
 800d952:	9b01      	ldr	r3, [sp, #4]
 800d954:	9a02      	ldr	r2, [sp, #8]
 800d956:	0018      	movs	r0, r3
 800d958:	611a      	str	r2, [r3, #16]
 800d95a:	b009      	add	sp, #36	; 0x24
 800d95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d95e:	c304      	stmia	r3!, {r2}
 800d960:	e7cd      	b.n	800d8fe <__multiply+0x52>
 800d962:	9b00      	ldr	r3, [sp, #0]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	b298      	uxth	r0, r3
 800d968:	2800      	cmp	r0, #0
 800d96a:	d01c      	beq.n	800d9a6 <__multiply+0xfa>
 800d96c:	4667      	mov	r7, ip
 800d96e:	2400      	movs	r4, #0
 800d970:	9e06      	ldr	r6, [sp, #24]
 800d972:	ce02      	ldmia	r6!, {r1}
 800d974:	683a      	ldr	r2, [r7, #0]
 800d976:	b28b      	uxth	r3, r1
 800d978:	4343      	muls	r3, r0
 800d97a:	0c09      	lsrs	r1, r1, #16
 800d97c:	4341      	muls	r1, r0
 800d97e:	b292      	uxth	r2, r2
 800d980:	189b      	adds	r3, r3, r2
 800d982:	191b      	adds	r3, r3, r4
 800d984:	000c      	movs	r4, r1
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	0c11      	lsrs	r1, r2, #16
 800d98a:	1861      	adds	r1, r4, r1
 800d98c:	0c1c      	lsrs	r4, r3, #16
 800d98e:	1909      	adds	r1, r1, r4
 800d990:	0c0c      	lsrs	r4, r1, #16
 800d992:	b29b      	uxth	r3, r3
 800d994:	0409      	lsls	r1, r1, #16
 800d996:	430b      	orrs	r3, r1
 800d998:	c708      	stmia	r7!, {r3}
 800d99a:	9b04      	ldr	r3, [sp, #16]
 800d99c:	42b3      	cmp	r3, r6
 800d99e:	d8e8      	bhi.n	800d972 <__multiply+0xc6>
 800d9a0:	4663      	mov	r3, ip
 800d9a2:	9a05      	ldr	r2, [sp, #20]
 800d9a4:	509c      	str	r4, [r3, r2]
 800d9a6:	9b00      	ldr	r3, [sp, #0]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	0c1e      	lsrs	r6, r3, #16
 800d9ac:	d020      	beq.n	800d9f0 <__multiply+0x144>
 800d9ae:	4663      	mov	r3, ip
 800d9b0:	002c      	movs	r4, r5
 800d9b2:	4660      	mov	r0, ip
 800d9b4:	2700      	movs	r7, #0
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	3414      	adds	r4, #20
 800d9ba:	6822      	ldr	r2, [r4, #0]
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	b291      	uxth	r1, r2
 800d9c0:	4371      	muls	r1, r6
 800d9c2:	6802      	ldr	r2, [r0, #0]
 800d9c4:	0c12      	lsrs	r2, r2, #16
 800d9c6:	1889      	adds	r1, r1, r2
 800d9c8:	19cf      	adds	r7, r1, r7
 800d9ca:	0439      	lsls	r1, r7, #16
 800d9cc:	430b      	orrs	r3, r1
 800d9ce:	6003      	str	r3, [r0, #0]
 800d9d0:	cc02      	ldmia	r4!, {r1}
 800d9d2:	6843      	ldr	r3, [r0, #4]
 800d9d4:	0c09      	lsrs	r1, r1, #16
 800d9d6:	4371      	muls	r1, r6
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	0c3f      	lsrs	r7, r7, #16
 800d9dc:	18cb      	adds	r3, r1, r3
 800d9de:	9a04      	ldr	r2, [sp, #16]
 800d9e0:	19db      	adds	r3, r3, r7
 800d9e2:	0c1f      	lsrs	r7, r3, #16
 800d9e4:	3004      	adds	r0, #4
 800d9e6:	42a2      	cmp	r2, r4
 800d9e8:	d8e7      	bhi.n	800d9ba <__multiply+0x10e>
 800d9ea:	4662      	mov	r2, ip
 800d9ec:	9905      	ldr	r1, [sp, #20]
 800d9ee:	5053      	str	r3, [r2, r1]
 800d9f0:	9b00      	ldr	r3, [sp, #0]
 800d9f2:	3304      	adds	r3, #4
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	2304      	movs	r3, #4
 800d9f8:	449c      	add	ip, r3
 800d9fa:	e79c      	b.n	800d936 <__multiply+0x8a>
 800d9fc:	9b02      	ldr	r3, [sp, #8]
 800d9fe:	3b01      	subs	r3, #1
 800da00:	9302      	str	r3, [sp, #8]
 800da02:	e79c      	b.n	800d93e <__multiply+0x92>
 800da04:	0800f03c 	.word	0x0800f03c
 800da08:	0800f057 	.word	0x0800f057

0800da0c <__pow5mult>:
 800da0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da0e:	2303      	movs	r3, #3
 800da10:	0015      	movs	r5, r2
 800da12:	0007      	movs	r7, r0
 800da14:	000e      	movs	r6, r1
 800da16:	401a      	ands	r2, r3
 800da18:	421d      	tst	r5, r3
 800da1a:	d008      	beq.n	800da2e <__pow5mult+0x22>
 800da1c:	4925      	ldr	r1, [pc, #148]	; (800dab4 <__pow5mult+0xa8>)
 800da1e:	3a01      	subs	r2, #1
 800da20:	0092      	lsls	r2, r2, #2
 800da22:	5852      	ldr	r2, [r2, r1]
 800da24:	2300      	movs	r3, #0
 800da26:	0031      	movs	r1, r6
 800da28:	f7ff fe9e 	bl	800d768 <__multadd>
 800da2c:	0006      	movs	r6, r0
 800da2e:	10ad      	asrs	r5, r5, #2
 800da30:	d03d      	beq.n	800daae <__pow5mult+0xa2>
 800da32:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800da34:	2c00      	cmp	r4, #0
 800da36:	d10f      	bne.n	800da58 <__pow5mult+0x4c>
 800da38:	2010      	movs	r0, #16
 800da3a:	f7fe f9b3 	bl	800bda4 <malloc>
 800da3e:	1e02      	subs	r2, r0, #0
 800da40:	6278      	str	r0, [r7, #36]	; 0x24
 800da42:	d105      	bne.n	800da50 <__pow5mult+0x44>
 800da44:	21d7      	movs	r1, #215	; 0xd7
 800da46:	4b1c      	ldr	r3, [pc, #112]	; (800dab8 <__pow5mult+0xac>)
 800da48:	481c      	ldr	r0, [pc, #112]	; (800dabc <__pow5mult+0xb0>)
 800da4a:	0049      	lsls	r1, r1, #1
 800da4c:	f7fe ff1a 	bl	800c884 <__assert_func>
 800da50:	6044      	str	r4, [r0, #4]
 800da52:	6084      	str	r4, [r0, #8]
 800da54:	6004      	str	r4, [r0, #0]
 800da56:	60c4      	str	r4, [r0, #12]
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	689c      	ldr	r4, [r3, #8]
 800da5c:	9301      	str	r3, [sp, #4]
 800da5e:	2c00      	cmp	r4, #0
 800da60:	d108      	bne.n	800da74 <__pow5mult+0x68>
 800da62:	0038      	movs	r0, r7
 800da64:	4916      	ldr	r1, [pc, #88]	; (800dac0 <__pow5mult+0xb4>)
 800da66:	f7ff ff0b 	bl	800d880 <__i2b>
 800da6a:	9b01      	ldr	r3, [sp, #4]
 800da6c:	0004      	movs	r4, r0
 800da6e:	6098      	str	r0, [r3, #8]
 800da70:	2300      	movs	r3, #0
 800da72:	6003      	str	r3, [r0, #0]
 800da74:	2301      	movs	r3, #1
 800da76:	421d      	tst	r5, r3
 800da78:	d00a      	beq.n	800da90 <__pow5mult+0x84>
 800da7a:	0031      	movs	r1, r6
 800da7c:	0022      	movs	r2, r4
 800da7e:	0038      	movs	r0, r7
 800da80:	f7ff ff14 	bl	800d8ac <__multiply>
 800da84:	0031      	movs	r1, r6
 800da86:	9001      	str	r0, [sp, #4]
 800da88:	0038      	movs	r0, r7
 800da8a:	f7ff fe49 	bl	800d720 <_Bfree>
 800da8e:	9e01      	ldr	r6, [sp, #4]
 800da90:	106d      	asrs	r5, r5, #1
 800da92:	d00c      	beq.n	800daae <__pow5mult+0xa2>
 800da94:	6820      	ldr	r0, [r4, #0]
 800da96:	2800      	cmp	r0, #0
 800da98:	d107      	bne.n	800daaa <__pow5mult+0x9e>
 800da9a:	0022      	movs	r2, r4
 800da9c:	0021      	movs	r1, r4
 800da9e:	0038      	movs	r0, r7
 800daa0:	f7ff ff04 	bl	800d8ac <__multiply>
 800daa4:	2300      	movs	r3, #0
 800daa6:	6020      	str	r0, [r4, #0]
 800daa8:	6003      	str	r3, [r0, #0]
 800daaa:	0004      	movs	r4, r0
 800daac:	e7e2      	b.n	800da74 <__pow5mult+0x68>
 800daae:	0030      	movs	r0, r6
 800dab0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dab2:	46c0      	nop			; (mov r8, r8)
 800dab4:	0800f1a8 	.word	0x0800f1a8
 800dab8:	0800efc6 	.word	0x0800efc6
 800dabc:	0800f057 	.word	0x0800f057
 800dac0:	00000271 	.word	0x00000271

0800dac4 <__lshift>:
 800dac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dac6:	000c      	movs	r4, r1
 800dac8:	0017      	movs	r7, r2
 800daca:	6923      	ldr	r3, [r4, #16]
 800dacc:	1155      	asrs	r5, r2, #5
 800dace:	b087      	sub	sp, #28
 800dad0:	18eb      	adds	r3, r5, r3
 800dad2:	9302      	str	r3, [sp, #8]
 800dad4:	3301      	adds	r3, #1
 800dad6:	9301      	str	r3, [sp, #4]
 800dad8:	6849      	ldr	r1, [r1, #4]
 800dada:	68a3      	ldr	r3, [r4, #8]
 800dadc:	9004      	str	r0, [sp, #16]
 800dade:	9a01      	ldr	r2, [sp, #4]
 800dae0:	4293      	cmp	r3, r2
 800dae2:	db11      	blt.n	800db08 <__lshift+0x44>
 800dae4:	9804      	ldr	r0, [sp, #16]
 800dae6:	f7ff fdd7 	bl	800d698 <_Balloc>
 800daea:	0002      	movs	r2, r0
 800daec:	2300      	movs	r3, #0
 800daee:	3214      	adds	r2, #20
 800daf0:	0006      	movs	r6, r0
 800daf2:	0011      	movs	r1, r2
 800daf4:	9203      	str	r2, [sp, #12]
 800daf6:	4298      	cmp	r0, r3
 800daf8:	d10d      	bne.n	800db16 <__lshift+0x52>
 800dafa:	21da      	movs	r1, #218	; 0xda
 800dafc:	0002      	movs	r2, r0
 800dafe:	4b27      	ldr	r3, [pc, #156]	; (800db9c <__lshift+0xd8>)
 800db00:	4827      	ldr	r0, [pc, #156]	; (800dba0 <__lshift+0xdc>)
 800db02:	31ff      	adds	r1, #255	; 0xff
 800db04:	f7fe febe 	bl	800c884 <__assert_func>
 800db08:	3101      	adds	r1, #1
 800db0a:	005b      	lsls	r3, r3, #1
 800db0c:	e7e7      	b.n	800dade <__lshift+0x1a>
 800db0e:	2200      	movs	r2, #0
 800db10:	0098      	lsls	r0, r3, #2
 800db12:	500a      	str	r2, [r1, r0]
 800db14:	3301      	adds	r3, #1
 800db16:	42ab      	cmp	r3, r5
 800db18:	dbf9      	blt.n	800db0e <__lshift+0x4a>
 800db1a:	43eb      	mvns	r3, r5
 800db1c:	17db      	asrs	r3, r3, #31
 800db1e:	401d      	ands	r5, r3
 800db20:	9b03      	ldr	r3, [sp, #12]
 800db22:	00ad      	lsls	r5, r5, #2
 800db24:	211f      	movs	r1, #31
 800db26:	0038      	movs	r0, r7
 800db28:	195d      	adds	r5, r3, r5
 800db2a:	0023      	movs	r3, r4
 800db2c:	6922      	ldr	r2, [r4, #16]
 800db2e:	3314      	adds	r3, #20
 800db30:	0092      	lsls	r2, r2, #2
 800db32:	4008      	ands	r0, r1
 800db34:	4684      	mov	ip, r0
 800db36:	189a      	adds	r2, r3, r2
 800db38:	420f      	tst	r7, r1
 800db3a:	d02a      	beq.n	800db92 <__lshift+0xce>
 800db3c:	3101      	adds	r1, #1
 800db3e:	1a09      	subs	r1, r1, r0
 800db40:	9105      	str	r1, [sp, #20]
 800db42:	2100      	movs	r1, #0
 800db44:	9503      	str	r5, [sp, #12]
 800db46:	4667      	mov	r7, ip
 800db48:	6818      	ldr	r0, [r3, #0]
 800db4a:	40b8      	lsls	r0, r7
 800db4c:	4301      	orrs	r1, r0
 800db4e:	9803      	ldr	r0, [sp, #12]
 800db50:	c002      	stmia	r0!, {r1}
 800db52:	cb02      	ldmia	r3!, {r1}
 800db54:	9003      	str	r0, [sp, #12]
 800db56:	9805      	ldr	r0, [sp, #20]
 800db58:	40c1      	lsrs	r1, r0
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d8f3      	bhi.n	800db46 <__lshift+0x82>
 800db5e:	0020      	movs	r0, r4
 800db60:	3015      	adds	r0, #21
 800db62:	2304      	movs	r3, #4
 800db64:	4282      	cmp	r2, r0
 800db66:	d304      	bcc.n	800db72 <__lshift+0xae>
 800db68:	1b13      	subs	r3, r2, r4
 800db6a:	3b15      	subs	r3, #21
 800db6c:	089b      	lsrs	r3, r3, #2
 800db6e:	3301      	adds	r3, #1
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	50e9      	str	r1, [r5, r3]
 800db74:	2900      	cmp	r1, #0
 800db76:	d002      	beq.n	800db7e <__lshift+0xba>
 800db78:	9b02      	ldr	r3, [sp, #8]
 800db7a:	3302      	adds	r3, #2
 800db7c:	9301      	str	r3, [sp, #4]
 800db7e:	9b01      	ldr	r3, [sp, #4]
 800db80:	9804      	ldr	r0, [sp, #16]
 800db82:	3b01      	subs	r3, #1
 800db84:	0021      	movs	r1, r4
 800db86:	6133      	str	r3, [r6, #16]
 800db88:	f7ff fdca 	bl	800d720 <_Bfree>
 800db8c:	0030      	movs	r0, r6
 800db8e:	b007      	add	sp, #28
 800db90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db92:	cb02      	ldmia	r3!, {r1}
 800db94:	c502      	stmia	r5!, {r1}
 800db96:	429a      	cmp	r2, r3
 800db98:	d8fb      	bhi.n	800db92 <__lshift+0xce>
 800db9a:	e7f0      	b.n	800db7e <__lshift+0xba>
 800db9c:	0800f03c 	.word	0x0800f03c
 800dba0:	0800f057 	.word	0x0800f057

0800dba4 <__mcmp>:
 800dba4:	6902      	ldr	r2, [r0, #16]
 800dba6:	690b      	ldr	r3, [r1, #16]
 800dba8:	b530      	push	{r4, r5, lr}
 800dbaa:	0004      	movs	r4, r0
 800dbac:	1ad0      	subs	r0, r2, r3
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d10d      	bne.n	800dbce <__mcmp+0x2a>
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	3414      	adds	r4, #20
 800dbb6:	3114      	adds	r1, #20
 800dbb8:	18e2      	adds	r2, r4, r3
 800dbba:	18c9      	adds	r1, r1, r3
 800dbbc:	3a04      	subs	r2, #4
 800dbbe:	3904      	subs	r1, #4
 800dbc0:	6815      	ldr	r5, [r2, #0]
 800dbc2:	680b      	ldr	r3, [r1, #0]
 800dbc4:	429d      	cmp	r5, r3
 800dbc6:	d003      	beq.n	800dbd0 <__mcmp+0x2c>
 800dbc8:	2001      	movs	r0, #1
 800dbca:	429d      	cmp	r5, r3
 800dbcc:	d303      	bcc.n	800dbd6 <__mcmp+0x32>
 800dbce:	bd30      	pop	{r4, r5, pc}
 800dbd0:	4294      	cmp	r4, r2
 800dbd2:	d3f3      	bcc.n	800dbbc <__mcmp+0x18>
 800dbd4:	e7fb      	b.n	800dbce <__mcmp+0x2a>
 800dbd6:	4240      	negs	r0, r0
 800dbd8:	e7f9      	b.n	800dbce <__mcmp+0x2a>
	...

0800dbdc <__mdiff>:
 800dbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbde:	000e      	movs	r6, r1
 800dbe0:	0007      	movs	r7, r0
 800dbe2:	0011      	movs	r1, r2
 800dbe4:	0030      	movs	r0, r6
 800dbe6:	b087      	sub	sp, #28
 800dbe8:	0014      	movs	r4, r2
 800dbea:	f7ff ffdb 	bl	800dba4 <__mcmp>
 800dbee:	1e05      	subs	r5, r0, #0
 800dbf0:	d110      	bne.n	800dc14 <__mdiff+0x38>
 800dbf2:	0001      	movs	r1, r0
 800dbf4:	0038      	movs	r0, r7
 800dbf6:	f7ff fd4f 	bl	800d698 <_Balloc>
 800dbfa:	1e02      	subs	r2, r0, #0
 800dbfc:	d104      	bne.n	800dc08 <__mdiff+0x2c>
 800dbfe:	4b40      	ldr	r3, [pc, #256]	; (800dd00 <__mdiff+0x124>)
 800dc00:	4940      	ldr	r1, [pc, #256]	; (800dd04 <__mdiff+0x128>)
 800dc02:	4841      	ldr	r0, [pc, #260]	; (800dd08 <__mdiff+0x12c>)
 800dc04:	f7fe fe3e 	bl	800c884 <__assert_func>
 800dc08:	2301      	movs	r3, #1
 800dc0a:	6145      	str	r5, [r0, #20]
 800dc0c:	6103      	str	r3, [r0, #16]
 800dc0e:	0010      	movs	r0, r2
 800dc10:	b007      	add	sp, #28
 800dc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc14:	2301      	movs	r3, #1
 800dc16:	9301      	str	r3, [sp, #4]
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	db04      	blt.n	800dc26 <__mdiff+0x4a>
 800dc1c:	0023      	movs	r3, r4
 800dc1e:	0034      	movs	r4, r6
 800dc20:	001e      	movs	r6, r3
 800dc22:	2300      	movs	r3, #0
 800dc24:	9301      	str	r3, [sp, #4]
 800dc26:	0038      	movs	r0, r7
 800dc28:	6861      	ldr	r1, [r4, #4]
 800dc2a:	f7ff fd35 	bl	800d698 <_Balloc>
 800dc2e:	1e02      	subs	r2, r0, #0
 800dc30:	d103      	bne.n	800dc3a <__mdiff+0x5e>
 800dc32:	2190      	movs	r1, #144	; 0x90
 800dc34:	4b32      	ldr	r3, [pc, #200]	; (800dd00 <__mdiff+0x124>)
 800dc36:	0089      	lsls	r1, r1, #2
 800dc38:	e7e3      	b.n	800dc02 <__mdiff+0x26>
 800dc3a:	9b01      	ldr	r3, [sp, #4]
 800dc3c:	2700      	movs	r7, #0
 800dc3e:	60c3      	str	r3, [r0, #12]
 800dc40:	6920      	ldr	r0, [r4, #16]
 800dc42:	3414      	adds	r4, #20
 800dc44:	9401      	str	r4, [sp, #4]
 800dc46:	9b01      	ldr	r3, [sp, #4]
 800dc48:	0084      	lsls	r4, r0, #2
 800dc4a:	191b      	adds	r3, r3, r4
 800dc4c:	0034      	movs	r4, r6
 800dc4e:	9302      	str	r3, [sp, #8]
 800dc50:	6933      	ldr	r3, [r6, #16]
 800dc52:	3414      	adds	r4, #20
 800dc54:	0099      	lsls	r1, r3, #2
 800dc56:	1863      	adds	r3, r4, r1
 800dc58:	9303      	str	r3, [sp, #12]
 800dc5a:	0013      	movs	r3, r2
 800dc5c:	3314      	adds	r3, #20
 800dc5e:	469c      	mov	ip, r3
 800dc60:	9305      	str	r3, [sp, #20]
 800dc62:	9b01      	ldr	r3, [sp, #4]
 800dc64:	9304      	str	r3, [sp, #16]
 800dc66:	9b04      	ldr	r3, [sp, #16]
 800dc68:	cc02      	ldmia	r4!, {r1}
 800dc6a:	cb20      	ldmia	r3!, {r5}
 800dc6c:	9304      	str	r3, [sp, #16]
 800dc6e:	b2ab      	uxth	r3, r5
 800dc70:	19df      	adds	r7, r3, r7
 800dc72:	b28b      	uxth	r3, r1
 800dc74:	1afb      	subs	r3, r7, r3
 800dc76:	0c2d      	lsrs	r5, r5, #16
 800dc78:	0c09      	lsrs	r1, r1, #16
 800dc7a:	1a69      	subs	r1, r5, r1
 800dc7c:	141d      	asrs	r5, r3, #16
 800dc7e:	1949      	adds	r1, r1, r5
 800dc80:	140f      	asrs	r7, r1, #16
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	0409      	lsls	r1, r1, #16
 800dc86:	430b      	orrs	r3, r1
 800dc88:	4661      	mov	r1, ip
 800dc8a:	c108      	stmia	r1!, {r3}
 800dc8c:	9b03      	ldr	r3, [sp, #12]
 800dc8e:	468c      	mov	ip, r1
 800dc90:	42a3      	cmp	r3, r4
 800dc92:	d8e8      	bhi.n	800dc66 <__mdiff+0x8a>
 800dc94:	0031      	movs	r1, r6
 800dc96:	9c03      	ldr	r4, [sp, #12]
 800dc98:	3115      	adds	r1, #21
 800dc9a:	2304      	movs	r3, #4
 800dc9c:	428c      	cmp	r4, r1
 800dc9e:	d304      	bcc.n	800dcaa <__mdiff+0xce>
 800dca0:	1ba3      	subs	r3, r4, r6
 800dca2:	3b15      	subs	r3, #21
 800dca4:	089b      	lsrs	r3, r3, #2
 800dca6:	3301      	adds	r3, #1
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	9901      	ldr	r1, [sp, #4]
 800dcac:	18cc      	adds	r4, r1, r3
 800dcae:	9905      	ldr	r1, [sp, #20]
 800dcb0:	0026      	movs	r6, r4
 800dcb2:	18cb      	adds	r3, r1, r3
 800dcb4:	469c      	mov	ip, r3
 800dcb6:	9902      	ldr	r1, [sp, #8]
 800dcb8:	428e      	cmp	r6, r1
 800dcba:	d310      	bcc.n	800dcde <__mdiff+0x102>
 800dcbc:	9e02      	ldr	r6, [sp, #8]
 800dcbe:	1ee5      	subs	r5, r4, #3
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	42ae      	cmp	r6, r5
 800dcc4:	d304      	bcc.n	800dcd0 <__mdiff+0xf4>
 800dcc6:	0031      	movs	r1, r6
 800dcc8:	3103      	adds	r1, #3
 800dcca:	1b09      	subs	r1, r1, r4
 800dccc:	0889      	lsrs	r1, r1, #2
 800dcce:	0089      	lsls	r1, r1, #2
 800dcd0:	185b      	adds	r3, r3, r1
 800dcd2:	3b04      	subs	r3, #4
 800dcd4:	6819      	ldr	r1, [r3, #0]
 800dcd6:	2900      	cmp	r1, #0
 800dcd8:	d00f      	beq.n	800dcfa <__mdiff+0x11e>
 800dcda:	6110      	str	r0, [r2, #16]
 800dcdc:	e797      	b.n	800dc0e <__mdiff+0x32>
 800dcde:	ce02      	ldmia	r6!, {r1}
 800dce0:	b28d      	uxth	r5, r1
 800dce2:	19ed      	adds	r5, r5, r7
 800dce4:	0c0f      	lsrs	r7, r1, #16
 800dce6:	1429      	asrs	r1, r5, #16
 800dce8:	1879      	adds	r1, r7, r1
 800dcea:	140f      	asrs	r7, r1, #16
 800dcec:	b2ad      	uxth	r5, r5
 800dcee:	0409      	lsls	r1, r1, #16
 800dcf0:	430d      	orrs	r5, r1
 800dcf2:	4661      	mov	r1, ip
 800dcf4:	c120      	stmia	r1!, {r5}
 800dcf6:	468c      	mov	ip, r1
 800dcf8:	e7dd      	b.n	800dcb6 <__mdiff+0xda>
 800dcfa:	3801      	subs	r0, #1
 800dcfc:	e7e9      	b.n	800dcd2 <__mdiff+0xf6>
 800dcfe:	46c0      	nop			; (mov r8, r8)
 800dd00:	0800f03c 	.word	0x0800f03c
 800dd04:	00000232 	.word	0x00000232
 800dd08:	0800f057 	.word	0x0800f057

0800dd0c <__d2b>:
 800dd0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd0e:	2101      	movs	r1, #1
 800dd10:	0014      	movs	r4, r2
 800dd12:	001e      	movs	r6, r3
 800dd14:	9f08      	ldr	r7, [sp, #32]
 800dd16:	f7ff fcbf 	bl	800d698 <_Balloc>
 800dd1a:	1e05      	subs	r5, r0, #0
 800dd1c:	d105      	bne.n	800dd2a <__d2b+0x1e>
 800dd1e:	0002      	movs	r2, r0
 800dd20:	4b26      	ldr	r3, [pc, #152]	; (800ddbc <__d2b+0xb0>)
 800dd22:	4927      	ldr	r1, [pc, #156]	; (800ddc0 <__d2b+0xb4>)
 800dd24:	4827      	ldr	r0, [pc, #156]	; (800ddc4 <__d2b+0xb8>)
 800dd26:	f7fe fdad 	bl	800c884 <__assert_func>
 800dd2a:	0333      	lsls	r3, r6, #12
 800dd2c:	0076      	lsls	r6, r6, #1
 800dd2e:	0b1b      	lsrs	r3, r3, #12
 800dd30:	0d76      	lsrs	r6, r6, #21
 800dd32:	d124      	bne.n	800dd7e <__d2b+0x72>
 800dd34:	9301      	str	r3, [sp, #4]
 800dd36:	2c00      	cmp	r4, #0
 800dd38:	d027      	beq.n	800dd8a <__d2b+0x7e>
 800dd3a:	4668      	mov	r0, sp
 800dd3c:	9400      	str	r4, [sp, #0]
 800dd3e:	f7ff fd71 	bl	800d824 <__lo0bits>
 800dd42:	9c00      	ldr	r4, [sp, #0]
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d01e      	beq.n	800dd86 <__d2b+0x7a>
 800dd48:	9b01      	ldr	r3, [sp, #4]
 800dd4a:	2120      	movs	r1, #32
 800dd4c:	001a      	movs	r2, r3
 800dd4e:	1a09      	subs	r1, r1, r0
 800dd50:	408a      	lsls	r2, r1
 800dd52:	40c3      	lsrs	r3, r0
 800dd54:	4322      	orrs	r2, r4
 800dd56:	616a      	str	r2, [r5, #20]
 800dd58:	9301      	str	r3, [sp, #4]
 800dd5a:	9c01      	ldr	r4, [sp, #4]
 800dd5c:	61ac      	str	r4, [r5, #24]
 800dd5e:	1e63      	subs	r3, r4, #1
 800dd60:	419c      	sbcs	r4, r3
 800dd62:	3401      	adds	r4, #1
 800dd64:	612c      	str	r4, [r5, #16]
 800dd66:	2e00      	cmp	r6, #0
 800dd68:	d018      	beq.n	800dd9c <__d2b+0x90>
 800dd6a:	4b17      	ldr	r3, [pc, #92]	; (800ddc8 <__d2b+0xbc>)
 800dd6c:	18f6      	adds	r6, r6, r3
 800dd6e:	2335      	movs	r3, #53	; 0x35
 800dd70:	1836      	adds	r6, r6, r0
 800dd72:	1a18      	subs	r0, r3, r0
 800dd74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd76:	603e      	str	r6, [r7, #0]
 800dd78:	6018      	str	r0, [r3, #0]
 800dd7a:	0028      	movs	r0, r5
 800dd7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd7e:	2280      	movs	r2, #128	; 0x80
 800dd80:	0352      	lsls	r2, r2, #13
 800dd82:	4313      	orrs	r3, r2
 800dd84:	e7d6      	b.n	800dd34 <__d2b+0x28>
 800dd86:	616c      	str	r4, [r5, #20]
 800dd88:	e7e7      	b.n	800dd5a <__d2b+0x4e>
 800dd8a:	a801      	add	r0, sp, #4
 800dd8c:	f7ff fd4a 	bl	800d824 <__lo0bits>
 800dd90:	2401      	movs	r4, #1
 800dd92:	9b01      	ldr	r3, [sp, #4]
 800dd94:	612c      	str	r4, [r5, #16]
 800dd96:	616b      	str	r3, [r5, #20]
 800dd98:	3020      	adds	r0, #32
 800dd9a:	e7e4      	b.n	800dd66 <__d2b+0x5a>
 800dd9c:	4b0b      	ldr	r3, [pc, #44]	; (800ddcc <__d2b+0xc0>)
 800dd9e:	18c0      	adds	r0, r0, r3
 800dda0:	4b0b      	ldr	r3, [pc, #44]	; (800ddd0 <__d2b+0xc4>)
 800dda2:	6038      	str	r0, [r7, #0]
 800dda4:	18e3      	adds	r3, r4, r3
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	18eb      	adds	r3, r5, r3
 800ddaa:	6958      	ldr	r0, [r3, #20]
 800ddac:	f7ff fd20 	bl	800d7f0 <__hi0bits>
 800ddb0:	0164      	lsls	r4, r4, #5
 800ddb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddb4:	1a24      	subs	r4, r4, r0
 800ddb6:	601c      	str	r4, [r3, #0]
 800ddb8:	e7df      	b.n	800dd7a <__d2b+0x6e>
 800ddba:	46c0      	nop			; (mov r8, r8)
 800ddbc:	0800f03c 	.word	0x0800f03c
 800ddc0:	0000030a 	.word	0x0000030a
 800ddc4:	0800f057 	.word	0x0800f057
 800ddc8:	fffffbcd 	.word	0xfffffbcd
 800ddcc:	fffffbce 	.word	0xfffffbce
 800ddd0:	3fffffff 	.word	0x3fffffff

0800ddd4 <_calloc_r>:
 800ddd4:	434a      	muls	r2, r1
 800ddd6:	b570      	push	{r4, r5, r6, lr}
 800ddd8:	0011      	movs	r1, r2
 800ddda:	0015      	movs	r5, r2
 800dddc:	f7fe f848 	bl	800be70 <_malloc_r>
 800dde0:	1e04      	subs	r4, r0, #0
 800dde2:	d003      	beq.n	800ddec <_calloc_r+0x18>
 800dde4:	002a      	movs	r2, r5
 800dde6:	2100      	movs	r1, #0
 800dde8:	f7fd ffef 	bl	800bdca <memset>
 800ddec:	0020      	movs	r0, r4
 800ddee:	bd70      	pop	{r4, r5, r6, pc}

0800ddf0 <__ssputs_r>:
 800ddf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddf2:	688e      	ldr	r6, [r1, #8]
 800ddf4:	b085      	sub	sp, #20
 800ddf6:	0007      	movs	r7, r0
 800ddf8:	000c      	movs	r4, r1
 800ddfa:	9203      	str	r2, [sp, #12]
 800ddfc:	9301      	str	r3, [sp, #4]
 800ddfe:	429e      	cmp	r6, r3
 800de00:	d83c      	bhi.n	800de7c <__ssputs_r+0x8c>
 800de02:	2390      	movs	r3, #144	; 0x90
 800de04:	898a      	ldrh	r2, [r1, #12]
 800de06:	00db      	lsls	r3, r3, #3
 800de08:	421a      	tst	r2, r3
 800de0a:	d034      	beq.n	800de76 <__ssputs_r+0x86>
 800de0c:	2503      	movs	r5, #3
 800de0e:	6909      	ldr	r1, [r1, #16]
 800de10:	6823      	ldr	r3, [r4, #0]
 800de12:	1a5b      	subs	r3, r3, r1
 800de14:	9302      	str	r3, [sp, #8]
 800de16:	6963      	ldr	r3, [r4, #20]
 800de18:	9802      	ldr	r0, [sp, #8]
 800de1a:	435d      	muls	r5, r3
 800de1c:	0feb      	lsrs	r3, r5, #31
 800de1e:	195d      	adds	r5, r3, r5
 800de20:	9b01      	ldr	r3, [sp, #4]
 800de22:	106d      	asrs	r5, r5, #1
 800de24:	3301      	adds	r3, #1
 800de26:	181b      	adds	r3, r3, r0
 800de28:	42ab      	cmp	r3, r5
 800de2a:	d900      	bls.n	800de2e <__ssputs_r+0x3e>
 800de2c:	001d      	movs	r5, r3
 800de2e:	0553      	lsls	r3, r2, #21
 800de30:	d532      	bpl.n	800de98 <__ssputs_r+0xa8>
 800de32:	0029      	movs	r1, r5
 800de34:	0038      	movs	r0, r7
 800de36:	f7fe f81b 	bl	800be70 <_malloc_r>
 800de3a:	1e06      	subs	r6, r0, #0
 800de3c:	d109      	bne.n	800de52 <__ssputs_r+0x62>
 800de3e:	230c      	movs	r3, #12
 800de40:	603b      	str	r3, [r7, #0]
 800de42:	2340      	movs	r3, #64	; 0x40
 800de44:	2001      	movs	r0, #1
 800de46:	89a2      	ldrh	r2, [r4, #12]
 800de48:	4240      	negs	r0, r0
 800de4a:	4313      	orrs	r3, r2
 800de4c:	81a3      	strh	r3, [r4, #12]
 800de4e:	b005      	add	sp, #20
 800de50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de52:	9a02      	ldr	r2, [sp, #8]
 800de54:	6921      	ldr	r1, [r4, #16]
 800de56:	f7fd ffaf 	bl	800bdb8 <memcpy>
 800de5a:	89a3      	ldrh	r3, [r4, #12]
 800de5c:	4a14      	ldr	r2, [pc, #80]	; (800deb0 <__ssputs_r+0xc0>)
 800de5e:	401a      	ands	r2, r3
 800de60:	2380      	movs	r3, #128	; 0x80
 800de62:	4313      	orrs	r3, r2
 800de64:	81a3      	strh	r3, [r4, #12]
 800de66:	9b02      	ldr	r3, [sp, #8]
 800de68:	6126      	str	r6, [r4, #16]
 800de6a:	18f6      	adds	r6, r6, r3
 800de6c:	6026      	str	r6, [r4, #0]
 800de6e:	6165      	str	r5, [r4, #20]
 800de70:	9e01      	ldr	r6, [sp, #4]
 800de72:	1aed      	subs	r5, r5, r3
 800de74:	60a5      	str	r5, [r4, #8]
 800de76:	9b01      	ldr	r3, [sp, #4]
 800de78:	429e      	cmp	r6, r3
 800de7a:	d900      	bls.n	800de7e <__ssputs_r+0x8e>
 800de7c:	9e01      	ldr	r6, [sp, #4]
 800de7e:	0032      	movs	r2, r6
 800de80:	9903      	ldr	r1, [sp, #12]
 800de82:	6820      	ldr	r0, [r4, #0]
 800de84:	f000 fd9a 	bl	800e9bc <memmove>
 800de88:	68a3      	ldr	r3, [r4, #8]
 800de8a:	2000      	movs	r0, #0
 800de8c:	1b9b      	subs	r3, r3, r6
 800de8e:	60a3      	str	r3, [r4, #8]
 800de90:	6823      	ldr	r3, [r4, #0]
 800de92:	199e      	adds	r6, r3, r6
 800de94:	6026      	str	r6, [r4, #0]
 800de96:	e7da      	b.n	800de4e <__ssputs_r+0x5e>
 800de98:	002a      	movs	r2, r5
 800de9a:	0038      	movs	r0, r7
 800de9c:	f000 fda1 	bl	800e9e2 <_realloc_r>
 800dea0:	1e06      	subs	r6, r0, #0
 800dea2:	d1e0      	bne.n	800de66 <__ssputs_r+0x76>
 800dea4:	0038      	movs	r0, r7
 800dea6:	6921      	ldr	r1, [r4, #16]
 800dea8:	f7fd ff98 	bl	800bddc <_free_r>
 800deac:	e7c7      	b.n	800de3e <__ssputs_r+0x4e>
 800deae:	46c0      	nop			; (mov r8, r8)
 800deb0:	fffffb7f 	.word	0xfffffb7f

0800deb4 <_svfiprintf_r>:
 800deb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deb6:	b0a1      	sub	sp, #132	; 0x84
 800deb8:	9003      	str	r0, [sp, #12]
 800deba:	001d      	movs	r5, r3
 800debc:	898b      	ldrh	r3, [r1, #12]
 800debe:	000f      	movs	r7, r1
 800dec0:	0016      	movs	r6, r2
 800dec2:	061b      	lsls	r3, r3, #24
 800dec4:	d511      	bpl.n	800deea <_svfiprintf_r+0x36>
 800dec6:	690b      	ldr	r3, [r1, #16]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10e      	bne.n	800deea <_svfiprintf_r+0x36>
 800decc:	2140      	movs	r1, #64	; 0x40
 800dece:	f7fd ffcf 	bl	800be70 <_malloc_r>
 800ded2:	6038      	str	r0, [r7, #0]
 800ded4:	6138      	str	r0, [r7, #16]
 800ded6:	2800      	cmp	r0, #0
 800ded8:	d105      	bne.n	800dee6 <_svfiprintf_r+0x32>
 800deda:	230c      	movs	r3, #12
 800dedc:	9a03      	ldr	r2, [sp, #12]
 800dede:	3801      	subs	r0, #1
 800dee0:	6013      	str	r3, [r2, #0]
 800dee2:	b021      	add	sp, #132	; 0x84
 800dee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dee6:	2340      	movs	r3, #64	; 0x40
 800dee8:	617b      	str	r3, [r7, #20]
 800deea:	2300      	movs	r3, #0
 800deec:	ac08      	add	r4, sp, #32
 800deee:	6163      	str	r3, [r4, #20]
 800def0:	3320      	adds	r3, #32
 800def2:	7663      	strb	r3, [r4, #25]
 800def4:	3310      	adds	r3, #16
 800def6:	76a3      	strb	r3, [r4, #26]
 800def8:	9507      	str	r5, [sp, #28]
 800defa:	0035      	movs	r5, r6
 800defc:	782b      	ldrb	r3, [r5, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d001      	beq.n	800df06 <_svfiprintf_r+0x52>
 800df02:	2b25      	cmp	r3, #37	; 0x25
 800df04:	d147      	bne.n	800df96 <_svfiprintf_r+0xe2>
 800df06:	1bab      	subs	r3, r5, r6
 800df08:	9305      	str	r3, [sp, #20]
 800df0a:	42b5      	cmp	r5, r6
 800df0c:	d00c      	beq.n	800df28 <_svfiprintf_r+0x74>
 800df0e:	0032      	movs	r2, r6
 800df10:	0039      	movs	r1, r7
 800df12:	9803      	ldr	r0, [sp, #12]
 800df14:	f7ff ff6c 	bl	800ddf0 <__ssputs_r>
 800df18:	1c43      	adds	r3, r0, #1
 800df1a:	d100      	bne.n	800df1e <_svfiprintf_r+0x6a>
 800df1c:	e0ae      	b.n	800e07c <_svfiprintf_r+0x1c8>
 800df1e:	6962      	ldr	r2, [r4, #20]
 800df20:	9b05      	ldr	r3, [sp, #20]
 800df22:	4694      	mov	ip, r2
 800df24:	4463      	add	r3, ip
 800df26:	6163      	str	r3, [r4, #20]
 800df28:	782b      	ldrb	r3, [r5, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d100      	bne.n	800df30 <_svfiprintf_r+0x7c>
 800df2e:	e0a5      	b.n	800e07c <_svfiprintf_r+0x1c8>
 800df30:	2201      	movs	r2, #1
 800df32:	2300      	movs	r3, #0
 800df34:	4252      	negs	r2, r2
 800df36:	6062      	str	r2, [r4, #4]
 800df38:	a904      	add	r1, sp, #16
 800df3a:	3254      	adds	r2, #84	; 0x54
 800df3c:	1852      	adds	r2, r2, r1
 800df3e:	1c6e      	adds	r6, r5, #1
 800df40:	6023      	str	r3, [r4, #0]
 800df42:	60e3      	str	r3, [r4, #12]
 800df44:	60a3      	str	r3, [r4, #8]
 800df46:	7013      	strb	r3, [r2, #0]
 800df48:	65a3      	str	r3, [r4, #88]	; 0x58
 800df4a:	2205      	movs	r2, #5
 800df4c:	7831      	ldrb	r1, [r6, #0]
 800df4e:	4854      	ldr	r0, [pc, #336]	; (800e0a0 <_svfiprintf_r+0x1ec>)
 800df50:	f7ff fb86 	bl	800d660 <memchr>
 800df54:	1c75      	adds	r5, r6, #1
 800df56:	2800      	cmp	r0, #0
 800df58:	d11f      	bne.n	800df9a <_svfiprintf_r+0xe6>
 800df5a:	6822      	ldr	r2, [r4, #0]
 800df5c:	06d3      	lsls	r3, r2, #27
 800df5e:	d504      	bpl.n	800df6a <_svfiprintf_r+0xb6>
 800df60:	2353      	movs	r3, #83	; 0x53
 800df62:	a904      	add	r1, sp, #16
 800df64:	185b      	adds	r3, r3, r1
 800df66:	2120      	movs	r1, #32
 800df68:	7019      	strb	r1, [r3, #0]
 800df6a:	0713      	lsls	r3, r2, #28
 800df6c:	d504      	bpl.n	800df78 <_svfiprintf_r+0xc4>
 800df6e:	2353      	movs	r3, #83	; 0x53
 800df70:	a904      	add	r1, sp, #16
 800df72:	185b      	adds	r3, r3, r1
 800df74:	212b      	movs	r1, #43	; 0x2b
 800df76:	7019      	strb	r1, [r3, #0]
 800df78:	7833      	ldrb	r3, [r6, #0]
 800df7a:	2b2a      	cmp	r3, #42	; 0x2a
 800df7c:	d016      	beq.n	800dfac <_svfiprintf_r+0xf8>
 800df7e:	0035      	movs	r5, r6
 800df80:	2100      	movs	r1, #0
 800df82:	200a      	movs	r0, #10
 800df84:	68e3      	ldr	r3, [r4, #12]
 800df86:	782a      	ldrb	r2, [r5, #0]
 800df88:	1c6e      	adds	r6, r5, #1
 800df8a:	3a30      	subs	r2, #48	; 0x30
 800df8c:	2a09      	cmp	r2, #9
 800df8e:	d94e      	bls.n	800e02e <_svfiprintf_r+0x17a>
 800df90:	2900      	cmp	r1, #0
 800df92:	d111      	bne.n	800dfb8 <_svfiprintf_r+0x104>
 800df94:	e017      	b.n	800dfc6 <_svfiprintf_r+0x112>
 800df96:	3501      	adds	r5, #1
 800df98:	e7b0      	b.n	800defc <_svfiprintf_r+0x48>
 800df9a:	4b41      	ldr	r3, [pc, #260]	; (800e0a0 <_svfiprintf_r+0x1ec>)
 800df9c:	6822      	ldr	r2, [r4, #0]
 800df9e:	1ac0      	subs	r0, r0, r3
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	4083      	lsls	r3, r0
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	002e      	movs	r6, r5
 800dfa8:	6023      	str	r3, [r4, #0]
 800dfaa:	e7ce      	b.n	800df4a <_svfiprintf_r+0x96>
 800dfac:	9b07      	ldr	r3, [sp, #28]
 800dfae:	1d19      	adds	r1, r3, #4
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	9107      	str	r1, [sp, #28]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	db01      	blt.n	800dfbc <_svfiprintf_r+0x108>
 800dfb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800dfba:	e004      	b.n	800dfc6 <_svfiprintf_r+0x112>
 800dfbc:	425b      	negs	r3, r3
 800dfbe:	60e3      	str	r3, [r4, #12]
 800dfc0:	2302      	movs	r3, #2
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	6023      	str	r3, [r4, #0]
 800dfc6:	782b      	ldrb	r3, [r5, #0]
 800dfc8:	2b2e      	cmp	r3, #46	; 0x2e
 800dfca:	d10a      	bne.n	800dfe2 <_svfiprintf_r+0x12e>
 800dfcc:	786b      	ldrb	r3, [r5, #1]
 800dfce:	2b2a      	cmp	r3, #42	; 0x2a
 800dfd0:	d135      	bne.n	800e03e <_svfiprintf_r+0x18a>
 800dfd2:	9b07      	ldr	r3, [sp, #28]
 800dfd4:	3502      	adds	r5, #2
 800dfd6:	1d1a      	adds	r2, r3, #4
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	9207      	str	r2, [sp, #28]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	db2b      	blt.n	800e038 <_svfiprintf_r+0x184>
 800dfe0:	9309      	str	r3, [sp, #36]	; 0x24
 800dfe2:	4e30      	ldr	r6, [pc, #192]	; (800e0a4 <_svfiprintf_r+0x1f0>)
 800dfe4:	2203      	movs	r2, #3
 800dfe6:	0030      	movs	r0, r6
 800dfe8:	7829      	ldrb	r1, [r5, #0]
 800dfea:	f7ff fb39 	bl	800d660 <memchr>
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d006      	beq.n	800e000 <_svfiprintf_r+0x14c>
 800dff2:	2340      	movs	r3, #64	; 0x40
 800dff4:	1b80      	subs	r0, r0, r6
 800dff6:	4083      	lsls	r3, r0
 800dff8:	6822      	ldr	r2, [r4, #0]
 800dffa:	3501      	adds	r5, #1
 800dffc:	4313      	orrs	r3, r2
 800dffe:	6023      	str	r3, [r4, #0]
 800e000:	7829      	ldrb	r1, [r5, #0]
 800e002:	2206      	movs	r2, #6
 800e004:	4828      	ldr	r0, [pc, #160]	; (800e0a8 <_svfiprintf_r+0x1f4>)
 800e006:	1c6e      	adds	r6, r5, #1
 800e008:	7621      	strb	r1, [r4, #24]
 800e00a:	f7ff fb29 	bl	800d660 <memchr>
 800e00e:	2800      	cmp	r0, #0
 800e010:	d03c      	beq.n	800e08c <_svfiprintf_r+0x1d8>
 800e012:	4b26      	ldr	r3, [pc, #152]	; (800e0ac <_svfiprintf_r+0x1f8>)
 800e014:	2b00      	cmp	r3, #0
 800e016:	d125      	bne.n	800e064 <_svfiprintf_r+0x1b0>
 800e018:	2207      	movs	r2, #7
 800e01a:	9b07      	ldr	r3, [sp, #28]
 800e01c:	3307      	adds	r3, #7
 800e01e:	4393      	bics	r3, r2
 800e020:	3308      	adds	r3, #8
 800e022:	9307      	str	r3, [sp, #28]
 800e024:	6963      	ldr	r3, [r4, #20]
 800e026:	9a04      	ldr	r2, [sp, #16]
 800e028:	189b      	adds	r3, r3, r2
 800e02a:	6163      	str	r3, [r4, #20]
 800e02c:	e765      	b.n	800defa <_svfiprintf_r+0x46>
 800e02e:	4343      	muls	r3, r0
 800e030:	0035      	movs	r5, r6
 800e032:	2101      	movs	r1, #1
 800e034:	189b      	adds	r3, r3, r2
 800e036:	e7a6      	b.n	800df86 <_svfiprintf_r+0xd2>
 800e038:	2301      	movs	r3, #1
 800e03a:	425b      	negs	r3, r3
 800e03c:	e7d0      	b.n	800dfe0 <_svfiprintf_r+0x12c>
 800e03e:	2300      	movs	r3, #0
 800e040:	200a      	movs	r0, #10
 800e042:	001a      	movs	r2, r3
 800e044:	3501      	adds	r5, #1
 800e046:	6063      	str	r3, [r4, #4]
 800e048:	7829      	ldrb	r1, [r5, #0]
 800e04a:	1c6e      	adds	r6, r5, #1
 800e04c:	3930      	subs	r1, #48	; 0x30
 800e04e:	2909      	cmp	r1, #9
 800e050:	d903      	bls.n	800e05a <_svfiprintf_r+0x1a6>
 800e052:	2b00      	cmp	r3, #0
 800e054:	d0c5      	beq.n	800dfe2 <_svfiprintf_r+0x12e>
 800e056:	9209      	str	r2, [sp, #36]	; 0x24
 800e058:	e7c3      	b.n	800dfe2 <_svfiprintf_r+0x12e>
 800e05a:	4342      	muls	r2, r0
 800e05c:	0035      	movs	r5, r6
 800e05e:	2301      	movs	r3, #1
 800e060:	1852      	adds	r2, r2, r1
 800e062:	e7f1      	b.n	800e048 <_svfiprintf_r+0x194>
 800e064:	ab07      	add	r3, sp, #28
 800e066:	9300      	str	r3, [sp, #0]
 800e068:	003a      	movs	r2, r7
 800e06a:	0021      	movs	r1, r4
 800e06c:	4b10      	ldr	r3, [pc, #64]	; (800e0b0 <_svfiprintf_r+0x1fc>)
 800e06e:	9803      	ldr	r0, [sp, #12]
 800e070:	f7fe f806 	bl	800c080 <_printf_float>
 800e074:	9004      	str	r0, [sp, #16]
 800e076:	9b04      	ldr	r3, [sp, #16]
 800e078:	3301      	adds	r3, #1
 800e07a:	d1d3      	bne.n	800e024 <_svfiprintf_r+0x170>
 800e07c:	89bb      	ldrh	r3, [r7, #12]
 800e07e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e080:	065b      	lsls	r3, r3, #25
 800e082:	d400      	bmi.n	800e086 <_svfiprintf_r+0x1d2>
 800e084:	e72d      	b.n	800dee2 <_svfiprintf_r+0x2e>
 800e086:	2001      	movs	r0, #1
 800e088:	4240      	negs	r0, r0
 800e08a:	e72a      	b.n	800dee2 <_svfiprintf_r+0x2e>
 800e08c:	ab07      	add	r3, sp, #28
 800e08e:	9300      	str	r3, [sp, #0]
 800e090:	003a      	movs	r2, r7
 800e092:	0021      	movs	r1, r4
 800e094:	4b06      	ldr	r3, [pc, #24]	; (800e0b0 <_svfiprintf_r+0x1fc>)
 800e096:	9803      	ldr	r0, [sp, #12]
 800e098:	f7fe fab0 	bl	800c5fc <_printf_i>
 800e09c:	e7ea      	b.n	800e074 <_svfiprintf_r+0x1c0>
 800e09e:	46c0      	nop			; (mov r8, r8)
 800e0a0:	0800f1b4 	.word	0x0800f1b4
 800e0a4:	0800f1ba 	.word	0x0800f1ba
 800e0a8:	0800f1be 	.word	0x0800f1be
 800e0ac:	0800c081 	.word	0x0800c081
 800e0b0:	0800ddf1 	.word	0x0800ddf1

0800e0b4 <__sfputc_r>:
 800e0b4:	6893      	ldr	r3, [r2, #8]
 800e0b6:	b510      	push	{r4, lr}
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	6093      	str	r3, [r2, #8]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	da04      	bge.n	800e0ca <__sfputc_r+0x16>
 800e0c0:	6994      	ldr	r4, [r2, #24]
 800e0c2:	42a3      	cmp	r3, r4
 800e0c4:	db07      	blt.n	800e0d6 <__sfputc_r+0x22>
 800e0c6:	290a      	cmp	r1, #10
 800e0c8:	d005      	beq.n	800e0d6 <__sfputc_r+0x22>
 800e0ca:	6813      	ldr	r3, [r2, #0]
 800e0cc:	1c58      	adds	r0, r3, #1
 800e0ce:	6010      	str	r0, [r2, #0]
 800e0d0:	7019      	strb	r1, [r3, #0]
 800e0d2:	0008      	movs	r0, r1
 800e0d4:	bd10      	pop	{r4, pc}
 800e0d6:	f000 f94f 	bl	800e378 <__swbuf_r>
 800e0da:	0001      	movs	r1, r0
 800e0dc:	e7f9      	b.n	800e0d2 <__sfputc_r+0x1e>

0800e0de <__sfputs_r>:
 800e0de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0e0:	0006      	movs	r6, r0
 800e0e2:	000f      	movs	r7, r1
 800e0e4:	0014      	movs	r4, r2
 800e0e6:	18d5      	adds	r5, r2, r3
 800e0e8:	42ac      	cmp	r4, r5
 800e0ea:	d101      	bne.n	800e0f0 <__sfputs_r+0x12>
 800e0ec:	2000      	movs	r0, #0
 800e0ee:	e007      	b.n	800e100 <__sfputs_r+0x22>
 800e0f0:	7821      	ldrb	r1, [r4, #0]
 800e0f2:	003a      	movs	r2, r7
 800e0f4:	0030      	movs	r0, r6
 800e0f6:	f7ff ffdd 	bl	800e0b4 <__sfputc_r>
 800e0fa:	3401      	adds	r4, #1
 800e0fc:	1c43      	adds	r3, r0, #1
 800e0fe:	d1f3      	bne.n	800e0e8 <__sfputs_r+0xa>
 800e100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e104 <_vfiprintf_r>:
 800e104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e106:	b0a1      	sub	sp, #132	; 0x84
 800e108:	0006      	movs	r6, r0
 800e10a:	000c      	movs	r4, r1
 800e10c:	001f      	movs	r7, r3
 800e10e:	9203      	str	r2, [sp, #12]
 800e110:	2800      	cmp	r0, #0
 800e112:	d004      	beq.n	800e11e <_vfiprintf_r+0x1a>
 800e114:	6983      	ldr	r3, [r0, #24]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d101      	bne.n	800e11e <_vfiprintf_r+0x1a>
 800e11a:	f000 fb3f 	bl	800e79c <__sinit>
 800e11e:	4b8e      	ldr	r3, [pc, #568]	; (800e358 <_vfiprintf_r+0x254>)
 800e120:	429c      	cmp	r4, r3
 800e122:	d11c      	bne.n	800e15e <_vfiprintf_r+0x5a>
 800e124:	6874      	ldr	r4, [r6, #4]
 800e126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e128:	07db      	lsls	r3, r3, #31
 800e12a:	d405      	bmi.n	800e138 <_vfiprintf_r+0x34>
 800e12c:	89a3      	ldrh	r3, [r4, #12]
 800e12e:	059b      	lsls	r3, r3, #22
 800e130:	d402      	bmi.n	800e138 <_vfiprintf_r+0x34>
 800e132:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e134:	f000 fbd3 	bl	800e8de <__retarget_lock_acquire_recursive>
 800e138:	89a3      	ldrh	r3, [r4, #12]
 800e13a:	071b      	lsls	r3, r3, #28
 800e13c:	d502      	bpl.n	800e144 <_vfiprintf_r+0x40>
 800e13e:	6923      	ldr	r3, [r4, #16]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d11d      	bne.n	800e180 <_vfiprintf_r+0x7c>
 800e144:	0021      	movs	r1, r4
 800e146:	0030      	movs	r0, r6
 800e148:	f000 f97a 	bl	800e440 <__swsetup_r>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d017      	beq.n	800e180 <_vfiprintf_r+0x7c>
 800e150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e152:	07db      	lsls	r3, r3, #31
 800e154:	d50d      	bpl.n	800e172 <_vfiprintf_r+0x6e>
 800e156:	2001      	movs	r0, #1
 800e158:	4240      	negs	r0, r0
 800e15a:	b021      	add	sp, #132	; 0x84
 800e15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e15e:	4b7f      	ldr	r3, [pc, #508]	; (800e35c <_vfiprintf_r+0x258>)
 800e160:	429c      	cmp	r4, r3
 800e162:	d101      	bne.n	800e168 <_vfiprintf_r+0x64>
 800e164:	68b4      	ldr	r4, [r6, #8]
 800e166:	e7de      	b.n	800e126 <_vfiprintf_r+0x22>
 800e168:	4b7d      	ldr	r3, [pc, #500]	; (800e360 <_vfiprintf_r+0x25c>)
 800e16a:	429c      	cmp	r4, r3
 800e16c:	d1db      	bne.n	800e126 <_vfiprintf_r+0x22>
 800e16e:	68f4      	ldr	r4, [r6, #12]
 800e170:	e7d9      	b.n	800e126 <_vfiprintf_r+0x22>
 800e172:	89a3      	ldrh	r3, [r4, #12]
 800e174:	059b      	lsls	r3, r3, #22
 800e176:	d4ee      	bmi.n	800e156 <_vfiprintf_r+0x52>
 800e178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e17a:	f000 fbb1 	bl	800e8e0 <__retarget_lock_release_recursive>
 800e17e:	e7ea      	b.n	800e156 <_vfiprintf_r+0x52>
 800e180:	2300      	movs	r3, #0
 800e182:	ad08      	add	r5, sp, #32
 800e184:	616b      	str	r3, [r5, #20]
 800e186:	3320      	adds	r3, #32
 800e188:	766b      	strb	r3, [r5, #25]
 800e18a:	3310      	adds	r3, #16
 800e18c:	76ab      	strb	r3, [r5, #26]
 800e18e:	9707      	str	r7, [sp, #28]
 800e190:	9f03      	ldr	r7, [sp, #12]
 800e192:	783b      	ldrb	r3, [r7, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <_vfiprintf_r+0x98>
 800e198:	2b25      	cmp	r3, #37	; 0x25
 800e19a:	d14e      	bne.n	800e23a <_vfiprintf_r+0x136>
 800e19c:	9b03      	ldr	r3, [sp, #12]
 800e19e:	1afb      	subs	r3, r7, r3
 800e1a0:	9305      	str	r3, [sp, #20]
 800e1a2:	9b03      	ldr	r3, [sp, #12]
 800e1a4:	429f      	cmp	r7, r3
 800e1a6:	d00d      	beq.n	800e1c4 <_vfiprintf_r+0xc0>
 800e1a8:	9b05      	ldr	r3, [sp, #20]
 800e1aa:	0021      	movs	r1, r4
 800e1ac:	0030      	movs	r0, r6
 800e1ae:	9a03      	ldr	r2, [sp, #12]
 800e1b0:	f7ff ff95 	bl	800e0de <__sfputs_r>
 800e1b4:	1c43      	adds	r3, r0, #1
 800e1b6:	d100      	bne.n	800e1ba <_vfiprintf_r+0xb6>
 800e1b8:	e0b5      	b.n	800e326 <_vfiprintf_r+0x222>
 800e1ba:	696a      	ldr	r2, [r5, #20]
 800e1bc:	9b05      	ldr	r3, [sp, #20]
 800e1be:	4694      	mov	ip, r2
 800e1c0:	4463      	add	r3, ip
 800e1c2:	616b      	str	r3, [r5, #20]
 800e1c4:	783b      	ldrb	r3, [r7, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d100      	bne.n	800e1cc <_vfiprintf_r+0xc8>
 800e1ca:	e0ac      	b.n	800e326 <_vfiprintf_r+0x222>
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	1c7b      	adds	r3, r7, #1
 800e1d0:	9303      	str	r3, [sp, #12]
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	4252      	negs	r2, r2
 800e1d6:	606a      	str	r2, [r5, #4]
 800e1d8:	a904      	add	r1, sp, #16
 800e1da:	3254      	adds	r2, #84	; 0x54
 800e1dc:	1852      	adds	r2, r2, r1
 800e1de:	602b      	str	r3, [r5, #0]
 800e1e0:	60eb      	str	r3, [r5, #12]
 800e1e2:	60ab      	str	r3, [r5, #8]
 800e1e4:	7013      	strb	r3, [r2, #0]
 800e1e6:	65ab      	str	r3, [r5, #88]	; 0x58
 800e1e8:	9b03      	ldr	r3, [sp, #12]
 800e1ea:	2205      	movs	r2, #5
 800e1ec:	7819      	ldrb	r1, [r3, #0]
 800e1ee:	485d      	ldr	r0, [pc, #372]	; (800e364 <_vfiprintf_r+0x260>)
 800e1f0:	f7ff fa36 	bl	800d660 <memchr>
 800e1f4:	9b03      	ldr	r3, [sp, #12]
 800e1f6:	1c5f      	adds	r7, r3, #1
 800e1f8:	2800      	cmp	r0, #0
 800e1fa:	d120      	bne.n	800e23e <_vfiprintf_r+0x13a>
 800e1fc:	682a      	ldr	r2, [r5, #0]
 800e1fe:	06d3      	lsls	r3, r2, #27
 800e200:	d504      	bpl.n	800e20c <_vfiprintf_r+0x108>
 800e202:	2353      	movs	r3, #83	; 0x53
 800e204:	a904      	add	r1, sp, #16
 800e206:	185b      	adds	r3, r3, r1
 800e208:	2120      	movs	r1, #32
 800e20a:	7019      	strb	r1, [r3, #0]
 800e20c:	0713      	lsls	r3, r2, #28
 800e20e:	d504      	bpl.n	800e21a <_vfiprintf_r+0x116>
 800e210:	2353      	movs	r3, #83	; 0x53
 800e212:	a904      	add	r1, sp, #16
 800e214:	185b      	adds	r3, r3, r1
 800e216:	212b      	movs	r1, #43	; 0x2b
 800e218:	7019      	strb	r1, [r3, #0]
 800e21a:	9b03      	ldr	r3, [sp, #12]
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	2b2a      	cmp	r3, #42	; 0x2a
 800e220:	d016      	beq.n	800e250 <_vfiprintf_r+0x14c>
 800e222:	2100      	movs	r1, #0
 800e224:	68eb      	ldr	r3, [r5, #12]
 800e226:	9f03      	ldr	r7, [sp, #12]
 800e228:	783a      	ldrb	r2, [r7, #0]
 800e22a:	1c78      	adds	r0, r7, #1
 800e22c:	3a30      	subs	r2, #48	; 0x30
 800e22e:	4684      	mov	ip, r0
 800e230:	2a09      	cmp	r2, #9
 800e232:	d94f      	bls.n	800e2d4 <_vfiprintf_r+0x1d0>
 800e234:	2900      	cmp	r1, #0
 800e236:	d111      	bne.n	800e25c <_vfiprintf_r+0x158>
 800e238:	e017      	b.n	800e26a <_vfiprintf_r+0x166>
 800e23a:	3701      	adds	r7, #1
 800e23c:	e7a9      	b.n	800e192 <_vfiprintf_r+0x8e>
 800e23e:	4b49      	ldr	r3, [pc, #292]	; (800e364 <_vfiprintf_r+0x260>)
 800e240:	682a      	ldr	r2, [r5, #0]
 800e242:	1ac0      	subs	r0, r0, r3
 800e244:	2301      	movs	r3, #1
 800e246:	4083      	lsls	r3, r0
 800e248:	4313      	orrs	r3, r2
 800e24a:	602b      	str	r3, [r5, #0]
 800e24c:	9703      	str	r7, [sp, #12]
 800e24e:	e7cb      	b.n	800e1e8 <_vfiprintf_r+0xe4>
 800e250:	9b07      	ldr	r3, [sp, #28]
 800e252:	1d19      	adds	r1, r3, #4
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	9107      	str	r1, [sp, #28]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	db01      	blt.n	800e260 <_vfiprintf_r+0x15c>
 800e25c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e25e:	e004      	b.n	800e26a <_vfiprintf_r+0x166>
 800e260:	425b      	negs	r3, r3
 800e262:	60eb      	str	r3, [r5, #12]
 800e264:	2302      	movs	r3, #2
 800e266:	4313      	orrs	r3, r2
 800e268:	602b      	str	r3, [r5, #0]
 800e26a:	783b      	ldrb	r3, [r7, #0]
 800e26c:	2b2e      	cmp	r3, #46	; 0x2e
 800e26e:	d10a      	bne.n	800e286 <_vfiprintf_r+0x182>
 800e270:	787b      	ldrb	r3, [r7, #1]
 800e272:	2b2a      	cmp	r3, #42	; 0x2a
 800e274:	d137      	bne.n	800e2e6 <_vfiprintf_r+0x1e2>
 800e276:	9b07      	ldr	r3, [sp, #28]
 800e278:	3702      	adds	r7, #2
 800e27a:	1d1a      	adds	r2, r3, #4
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	9207      	str	r2, [sp, #28]
 800e280:	2b00      	cmp	r3, #0
 800e282:	db2d      	blt.n	800e2e0 <_vfiprintf_r+0x1dc>
 800e284:	9309      	str	r3, [sp, #36]	; 0x24
 800e286:	2203      	movs	r2, #3
 800e288:	7839      	ldrb	r1, [r7, #0]
 800e28a:	4837      	ldr	r0, [pc, #220]	; (800e368 <_vfiprintf_r+0x264>)
 800e28c:	f7ff f9e8 	bl	800d660 <memchr>
 800e290:	2800      	cmp	r0, #0
 800e292:	d007      	beq.n	800e2a4 <_vfiprintf_r+0x1a0>
 800e294:	4b34      	ldr	r3, [pc, #208]	; (800e368 <_vfiprintf_r+0x264>)
 800e296:	682a      	ldr	r2, [r5, #0]
 800e298:	1ac0      	subs	r0, r0, r3
 800e29a:	2340      	movs	r3, #64	; 0x40
 800e29c:	4083      	lsls	r3, r0
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	3701      	adds	r7, #1
 800e2a2:	602b      	str	r3, [r5, #0]
 800e2a4:	7839      	ldrb	r1, [r7, #0]
 800e2a6:	1c7b      	adds	r3, r7, #1
 800e2a8:	2206      	movs	r2, #6
 800e2aa:	4830      	ldr	r0, [pc, #192]	; (800e36c <_vfiprintf_r+0x268>)
 800e2ac:	9303      	str	r3, [sp, #12]
 800e2ae:	7629      	strb	r1, [r5, #24]
 800e2b0:	f7ff f9d6 	bl	800d660 <memchr>
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	d045      	beq.n	800e344 <_vfiprintf_r+0x240>
 800e2b8:	4b2d      	ldr	r3, [pc, #180]	; (800e370 <_vfiprintf_r+0x26c>)
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d127      	bne.n	800e30e <_vfiprintf_r+0x20a>
 800e2be:	2207      	movs	r2, #7
 800e2c0:	9b07      	ldr	r3, [sp, #28]
 800e2c2:	3307      	adds	r3, #7
 800e2c4:	4393      	bics	r3, r2
 800e2c6:	3308      	adds	r3, #8
 800e2c8:	9307      	str	r3, [sp, #28]
 800e2ca:	696b      	ldr	r3, [r5, #20]
 800e2cc:	9a04      	ldr	r2, [sp, #16]
 800e2ce:	189b      	adds	r3, r3, r2
 800e2d0:	616b      	str	r3, [r5, #20]
 800e2d2:	e75d      	b.n	800e190 <_vfiprintf_r+0x8c>
 800e2d4:	210a      	movs	r1, #10
 800e2d6:	434b      	muls	r3, r1
 800e2d8:	4667      	mov	r7, ip
 800e2da:	189b      	adds	r3, r3, r2
 800e2dc:	3909      	subs	r1, #9
 800e2de:	e7a3      	b.n	800e228 <_vfiprintf_r+0x124>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	425b      	negs	r3, r3
 800e2e4:	e7ce      	b.n	800e284 <_vfiprintf_r+0x180>
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	001a      	movs	r2, r3
 800e2ea:	3701      	adds	r7, #1
 800e2ec:	606b      	str	r3, [r5, #4]
 800e2ee:	7839      	ldrb	r1, [r7, #0]
 800e2f0:	1c78      	adds	r0, r7, #1
 800e2f2:	3930      	subs	r1, #48	; 0x30
 800e2f4:	4684      	mov	ip, r0
 800e2f6:	2909      	cmp	r1, #9
 800e2f8:	d903      	bls.n	800e302 <_vfiprintf_r+0x1fe>
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d0c3      	beq.n	800e286 <_vfiprintf_r+0x182>
 800e2fe:	9209      	str	r2, [sp, #36]	; 0x24
 800e300:	e7c1      	b.n	800e286 <_vfiprintf_r+0x182>
 800e302:	230a      	movs	r3, #10
 800e304:	435a      	muls	r2, r3
 800e306:	4667      	mov	r7, ip
 800e308:	1852      	adds	r2, r2, r1
 800e30a:	3b09      	subs	r3, #9
 800e30c:	e7ef      	b.n	800e2ee <_vfiprintf_r+0x1ea>
 800e30e:	ab07      	add	r3, sp, #28
 800e310:	9300      	str	r3, [sp, #0]
 800e312:	0022      	movs	r2, r4
 800e314:	0029      	movs	r1, r5
 800e316:	0030      	movs	r0, r6
 800e318:	4b16      	ldr	r3, [pc, #88]	; (800e374 <_vfiprintf_r+0x270>)
 800e31a:	f7fd feb1 	bl	800c080 <_printf_float>
 800e31e:	9004      	str	r0, [sp, #16]
 800e320:	9b04      	ldr	r3, [sp, #16]
 800e322:	3301      	adds	r3, #1
 800e324:	d1d1      	bne.n	800e2ca <_vfiprintf_r+0x1c6>
 800e326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e328:	07db      	lsls	r3, r3, #31
 800e32a:	d405      	bmi.n	800e338 <_vfiprintf_r+0x234>
 800e32c:	89a3      	ldrh	r3, [r4, #12]
 800e32e:	059b      	lsls	r3, r3, #22
 800e330:	d402      	bmi.n	800e338 <_vfiprintf_r+0x234>
 800e332:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e334:	f000 fad4 	bl	800e8e0 <__retarget_lock_release_recursive>
 800e338:	89a3      	ldrh	r3, [r4, #12]
 800e33a:	065b      	lsls	r3, r3, #25
 800e33c:	d500      	bpl.n	800e340 <_vfiprintf_r+0x23c>
 800e33e:	e70a      	b.n	800e156 <_vfiprintf_r+0x52>
 800e340:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e342:	e70a      	b.n	800e15a <_vfiprintf_r+0x56>
 800e344:	ab07      	add	r3, sp, #28
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	0022      	movs	r2, r4
 800e34a:	0029      	movs	r1, r5
 800e34c:	0030      	movs	r0, r6
 800e34e:	4b09      	ldr	r3, [pc, #36]	; (800e374 <_vfiprintf_r+0x270>)
 800e350:	f7fe f954 	bl	800c5fc <_printf_i>
 800e354:	e7e3      	b.n	800e31e <_vfiprintf_r+0x21a>
 800e356:	46c0      	nop			; (mov r8, r8)
 800e358:	0800f1e8 	.word	0x0800f1e8
 800e35c:	0800f208 	.word	0x0800f208
 800e360:	0800f1c8 	.word	0x0800f1c8
 800e364:	0800f1b4 	.word	0x0800f1b4
 800e368:	0800f1ba 	.word	0x0800f1ba
 800e36c:	0800f1be 	.word	0x0800f1be
 800e370:	0800c081 	.word	0x0800c081
 800e374:	0800e0df 	.word	0x0800e0df

0800e378 <__swbuf_r>:
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	0005      	movs	r5, r0
 800e37c:	000e      	movs	r6, r1
 800e37e:	0014      	movs	r4, r2
 800e380:	2800      	cmp	r0, #0
 800e382:	d004      	beq.n	800e38e <__swbuf_r+0x16>
 800e384:	6983      	ldr	r3, [r0, #24]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d101      	bne.n	800e38e <__swbuf_r+0x16>
 800e38a:	f000 fa07 	bl	800e79c <__sinit>
 800e38e:	4b22      	ldr	r3, [pc, #136]	; (800e418 <__swbuf_r+0xa0>)
 800e390:	429c      	cmp	r4, r3
 800e392:	d12e      	bne.n	800e3f2 <__swbuf_r+0x7a>
 800e394:	686c      	ldr	r4, [r5, #4]
 800e396:	69a3      	ldr	r3, [r4, #24]
 800e398:	60a3      	str	r3, [r4, #8]
 800e39a:	89a3      	ldrh	r3, [r4, #12]
 800e39c:	071b      	lsls	r3, r3, #28
 800e39e:	d532      	bpl.n	800e406 <__swbuf_r+0x8e>
 800e3a0:	6923      	ldr	r3, [r4, #16]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d02f      	beq.n	800e406 <__swbuf_r+0x8e>
 800e3a6:	6823      	ldr	r3, [r4, #0]
 800e3a8:	6922      	ldr	r2, [r4, #16]
 800e3aa:	b2f7      	uxtb	r7, r6
 800e3ac:	1a98      	subs	r0, r3, r2
 800e3ae:	6963      	ldr	r3, [r4, #20]
 800e3b0:	b2f6      	uxtb	r6, r6
 800e3b2:	4283      	cmp	r3, r0
 800e3b4:	dc05      	bgt.n	800e3c2 <__swbuf_r+0x4a>
 800e3b6:	0021      	movs	r1, r4
 800e3b8:	0028      	movs	r0, r5
 800e3ba:	f000 f94d 	bl	800e658 <_fflush_r>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d127      	bne.n	800e412 <__swbuf_r+0x9a>
 800e3c2:	68a3      	ldr	r3, [r4, #8]
 800e3c4:	3001      	adds	r0, #1
 800e3c6:	3b01      	subs	r3, #1
 800e3c8:	60a3      	str	r3, [r4, #8]
 800e3ca:	6823      	ldr	r3, [r4, #0]
 800e3cc:	1c5a      	adds	r2, r3, #1
 800e3ce:	6022      	str	r2, [r4, #0]
 800e3d0:	701f      	strb	r7, [r3, #0]
 800e3d2:	6963      	ldr	r3, [r4, #20]
 800e3d4:	4283      	cmp	r3, r0
 800e3d6:	d004      	beq.n	800e3e2 <__swbuf_r+0x6a>
 800e3d8:	89a3      	ldrh	r3, [r4, #12]
 800e3da:	07db      	lsls	r3, r3, #31
 800e3dc:	d507      	bpl.n	800e3ee <__swbuf_r+0x76>
 800e3de:	2e0a      	cmp	r6, #10
 800e3e0:	d105      	bne.n	800e3ee <__swbuf_r+0x76>
 800e3e2:	0021      	movs	r1, r4
 800e3e4:	0028      	movs	r0, r5
 800e3e6:	f000 f937 	bl	800e658 <_fflush_r>
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	d111      	bne.n	800e412 <__swbuf_r+0x9a>
 800e3ee:	0030      	movs	r0, r6
 800e3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3f2:	4b0a      	ldr	r3, [pc, #40]	; (800e41c <__swbuf_r+0xa4>)
 800e3f4:	429c      	cmp	r4, r3
 800e3f6:	d101      	bne.n	800e3fc <__swbuf_r+0x84>
 800e3f8:	68ac      	ldr	r4, [r5, #8]
 800e3fa:	e7cc      	b.n	800e396 <__swbuf_r+0x1e>
 800e3fc:	4b08      	ldr	r3, [pc, #32]	; (800e420 <__swbuf_r+0xa8>)
 800e3fe:	429c      	cmp	r4, r3
 800e400:	d1c9      	bne.n	800e396 <__swbuf_r+0x1e>
 800e402:	68ec      	ldr	r4, [r5, #12]
 800e404:	e7c7      	b.n	800e396 <__swbuf_r+0x1e>
 800e406:	0021      	movs	r1, r4
 800e408:	0028      	movs	r0, r5
 800e40a:	f000 f819 	bl	800e440 <__swsetup_r>
 800e40e:	2800      	cmp	r0, #0
 800e410:	d0c9      	beq.n	800e3a6 <__swbuf_r+0x2e>
 800e412:	2601      	movs	r6, #1
 800e414:	4276      	negs	r6, r6
 800e416:	e7ea      	b.n	800e3ee <__swbuf_r+0x76>
 800e418:	0800f1e8 	.word	0x0800f1e8
 800e41c:	0800f208 	.word	0x0800f208
 800e420:	0800f1c8 	.word	0x0800f1c8

0800e424 <__ascii_wctomb>:
 800e424:	0003      	movs	r3, r0
 800e426:	1e08      	subs	r0, r1, #0
 800e428:	d005      	beq.n	800e436 <__ascii_wctomb+0x12>
 800e42a:	2aff      	cmp	r2, #255	; 0xff
 800e42c:	d904      	bls.n	800e438 <__ascii_wctomb+0x14>
 800e42e:	228a      	movs	r2, #138	; 0x8a
 800e430:	2001      	movs	r0, #1
 800e432:	601a      	str	r2, [r3, #0]
 800e434:	4240      	negs	r0, r0
 800e436:	4770      	bx	lr
 800e438:	2001      	movs	r0, #1
 800e43a:	700a      	strb	r2, [r1, #0]
 800e43c:	e7fb      	b.n	800e436 <__ascii_wctomb+0x12>
	...

0800e440 <__swsetup_r>:
 800e440:	4b37      	ldr	r3, [pc, #220]	; (800e520 <__swsetup_r+0xe0>)
 800e442:	b570      	push	{r4, r5, r6, lr}
 800e444:	681d      	ldr	r5, [r3, #0]
 800e446:	0006      	movs	r6, r0
 800e448:	000c      	movs	r4, r1
 800e44a:	2d00      	cmp	r5, #0
 800e44c:	d005      	beq.n	800e45a <__swsetup_r+0x1a>
 800e44e:	69ab      	ldr	r3, [r5, #24]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d102      	bne.n	800e45a <__swsetup_r+0x1a>
 800e454:	0028      	movs	r0, r5
 800e456:	f000 f9a1 	bl	800e79c <__sinit>
 800e45a:	4b32      	ldr	r3, [pc, #200]	; (800e524 <__swsetup_r+0xe4>)
 800e45c:	429c      	cmp	r4, r3
 800e45e:	d10f      	bne.n	800e480 <__swsetup_r+0x40>
 800e460:	686c      	ldr	r4, [r5, #4]
 800e462:	230c      	movs	r3, #12
 800e464:	5ee2      	ldrsh	r2, [r4, r3]
 800e466:	b293      	uxth	r3, r2
 800e468:	0711      	lsls	r1, r2, #28
 800e46a:	d42d      	bmi.n	800e4c8 <__swsetup_r+0x88>
 800e46c:	06d9      	lsls	r1, r3, #27
 800e46e:	d411      	bmi.n	800e494 <__swsetup_r+0x54>
 800e470:	2309      	movs	r3, #9
 800e472:	2001      	movs	r0, #1
 800e474:	6033      	str	r3, [r6, #0]
 800e476:	3337      	adds	r3, #55	; 0x37
 800e478:	4313      	orrs	r3, r2
 800e47a:	81a3      	strh	r3, [r4, #12]
 800e47c:	4240      	negs	r0, r0
 800e47e:	bd70      	pop	{r4, r5, r6, pc}
 800e480:	4b29      	ldr	r3, [pc, #164]	; (800e528 <__swsetup_r+0xe8>)
 800e482:	429c      	cmp	r4, r3
 800e484:	d101      	bne.n	800e48a <__swsetup_r+0x4a>
 800e486:	68ac      	ldr	r4, [r5, #8]
 800e488:	e7eb      	b.n	800e462 <__swsetup_r+0x22>
 800e48a:	4b28      	ldr	r3, [pc, #160]	; (800e52c <__swsetup_r+0xec>)
 800e48c:	429c      	cmp	r4, r3
 800e48e:	d1e8      	bne.n	800e462 <__swsetup_r+0x22>
 800e490:	68ec      	ldr	r4, [r5, #12]
 800e492:	e7e6      	b.n	800e462 <__swsetup_r+0x22>
 800e494:	075b      	lsls	r3, r3, #29
 800e496:	d513      	bpl.n	800e4c0 <__swsetup_r+0x80>
 800e498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e49a:	2900      	cmp	r1, #0
 800e49c:	d008      	beq.n	800e4b0 <__swsetup_r+0x70>
 800e49e:	0023      	movs	r3, r4
 800e4a0:	3344      	adds	r3, #68	; 0x44
 800e4a2:	4299      	cmp	r1, r3
 800e4a4:	d002      	beq.n	800e4ac <__swsetup_r+0x6c>
 800e4a6:	0030      	movs	r0, r6
 800e4a8:	f7fd fc98 	bl	800bddc <_free_r>
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	6363      	str	r3, [r4, #52]	; 0x34
 800e4b0:	2224      	movs	r2, #36	; 0x24
 800e4b2:	89a3      	ldrh	r3, [r4, #12]
 800e4b4:	4393      	bics	r3, r2
 800e4b6:	81a3      	strh	r3, [r4, #12]
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	6063      	str	r3, [r4, #4]
 800e4bc:	6923      	ldr	r3, [r4, #16]
 800e4be:	6023      	str	r3, [r4, #0]
 800e4c0:	2308      	movs	r3, #8
 800e4c2:	89a2      	ldrh	r2, [r4, #12]
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	81a3      	strh	r3, [r4, #12]
 800e4c8:	6923      	ldr	r3, [r4, #16]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d10b      	bne.n	800e4e6 <__swsetup_r+0xa6>
 800e4ce:	21a0      	movs	r1, #160	; 0xa0
 800e4d0:	2280      	movs	r2, #128	; 0x80
 800e4d2:	89a3      	ldrh	r3, [r4, #12]
 800e4d4:	0089      	lsls	r1, r1, #2
 800e4d6:	0092      	lsls	r2, r2, #2
 800e4d8:	400b      	ands	r3, r1
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d003      	beq.n	800e4e6 <__swsetup_r+0xa6>
 800e4de:	0021      	movs	r1, r4
 800e4e0:	0030      	movs	r0, r6
 800e4e2:	f000 fa27 	bl	800e934 <__smakebuf_r>
 800e4e6:	220c      	movs	r2, #12
 800e4e8:	5ea3      	ldrsh	r3, [r4, r2]
 800e4ea:	2001      	movs	r0, #1
 800e4ec:	001a      	movs	r2, r3
 800e4ee:	b299      	uxth	r1, r3
 800e4f0:	4002      	ands	r2, r0
 800e4f2:	4203      	tst	r3, r0
 800e4f4:	d00f      	beq.n	800e516 <__swsetup_r+0xd6>
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	60a2      	str	r2, [r4, #8]
 800e4fa:	6962      	ldr	r2, [r4, #20]
 800e4fc:	4252      	negs	r2, r2
 800e4fe:	61a2      	str	r2, [r4, #24]
 800e500:	2000      	movs	r0, #0
 800e502:	6922      	ldr	r2, [r4, #16]
 800e504:	4282      	cmp	r2, r0
 800e506:	d1ba      	bne.n	800e47e <__swsetup_r+0x3e>
 800e508:	060a      	lsls	r2, r1, #24
 800e50a:	d5b8      	bpl.n	800e47e <__swsetup_r+0x3e>
 800e50c:	2240      	movs	r2, #64	; 0x40
 800e50e:	4313      	orrs	r3, r2
 800e510:	81a3      	strh	r3, [r4, #12]
 800e512:	3801      	subs	r0, #1
 800e514:	e7b3      	b.n	800e47e <__swsetup_r+0x3e>
 800e516:	0788      	lsls	r0, r1, #30
 800e518:	d400      	bmi.n	800e51c <__swsetup_r+0xdc>
 800e51a:	6962      	ldr	r2, [r4, #20]
 800e51c:	60a2      	str	r2, [r4, #8]
 800e51e:	e7ef      	b.n	800e500 <__swsetup_r+0xc0>
 800e520:	20000038 	.word	0x20000038
 800e524:	0800f1e8 	.word	0x0800f1e8
 800e528:	0800f208 	.word	0x0800f208
 800e52c:	0800f1c8 	.word	0x0800f1c8

0800e530 <abort>:
 800e530:	2006      	movs	r0, #6
 800e532:	b510      	push	{r4, lr}
 800e534:	f000 faa6 	bl	800ea84 <raise>
 800e538:	2001      	movs	r0, #1
 800e53a:	f7f5 f8e9 	bl	8003710 <_exit>
	...

0800e540 <__sflush_r>:
 800e540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e542:	898b      	ldrh	r3, [r1, #12]
 800e544:	0005      	movs	r5, r0
 800e546:	000c      	movs	r4, r1
 800e548:	071a      	lsls	r2, r3, #28
 800e54a:	d45f      	bmi.n	800e60c <__sflush_r+0xcc>
 800e54c:	684a      	ldr	r2, [r1, #4]
 800e54e:	2a00      	cmp	r2, #0
 800e550:	dc04      	bgt.n	800e55c <__sflush_r+0x1c>
 800e552:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800e554:	2a00      	cmp	r2, #0
 800e556:	dc01      	bgt.n	800e55c <__sflush_r+0x1c>
 800e558:	2000      	movs	r0, #0
 800e55a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e55c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e55e:	2f00      	cmp	r7, #0
 800e560:	d0fa      	beq.n	800e558 <__sflush_r+0x18>
 800e562:	2200      	movs	r2, #0
 800e564:	2180      	movs	r1, #128	; 0x80
 800e566:	682e      	ldr	r6, [r5, #0]
 800e568:	602a      	str	r2, [r5, #0]
 800e56a:	001a      	movs	r2, r3
 800e56c:	0149      	lsls	r1, r1, #5
 800e56e:	400a      	ands	r2, r1
 800e570:	420b      	tst	r3, r1
 800e572:	d034      	beq.n	800e5de <__sflush_r+0x9e>
 800e574:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e576:	89a3      	ldrh	r3, [r4, #12]
 800e578:	075b      	lsls	r3, r3, #29
 800e57a:	d506      	bpl.n	800e58a <__sflush_r+0x4a>
 800e57c:	6863      	ldr	r3, [r4, #4]
 800e57e:	1ac0      	subs	r0, r0, r3
 800e580:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e582:	2b00      	cmp	r3, #0
 800e584:	d001      	beq.n	800e58a <__sflush_r+0x4a>
 800e586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e588:	1ac0      	subs	r0, r0, r3
 800e58a:	0002      	movs	r2, r0
 800e58c:	6a21      	ldr	r1, [r4, #32]
 800e58e:	2300      	movs	r3, #0
 800e590:	0028      	movs	r0, r5
 800e592:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e594:	47b8      	blx	r7
 800e596:	89a1      	ldrh	r1, [r4, #12]
 800e598:	1c43      	adds	r3, r0, #1
 800e59a:	d106      	bne.n	800e5aa <__sflush_r+0x6a>
 800e59c:	682b      	ldr	r3, [r5, #0]
 800e59e:	2b1d      	cmp	r3, #29
 800e5a0:	d831      	bhi.n	800e606 <__sflush_r+0xc6>
 800e5a2:	4a2c      	ldr	r2, [pc, #176]	; (800e654 <__sflush_r+0x114>)
 800e5a4:	40da      	lsrs	r2, r3
 800e5a6:	07d3      	lsls	r3, r2, #31
 800e5a8:	d52d      	bpl.n	800e606 <__sflush_r+0xc6>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	6063      	str	r3, [r4, #4]
 800e5ae:	6923      	ldr	r3, [r4, #16]
 800e5b0:	6023      	str	r3, [r4, #0]
 800e5b2:	04cb      	lsls	r3, r1, #19
 800e5b4:	d505      	bpl.n	800e5c2 <__sflush_r+0x82>
 800e5b6:	1c43      	adds	r3, r0, #1
 800e5b8:	d102      	bne.n	800e5c0 <__sflush_r+0x80>
 800e5ba:	682b      	ldr	r3, [r5, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d100      	bne.n	800e5c2 <__sflush_r+0x82>
 800e5c0:	6560      	str	r0, [r4, #84]	; 0x54
 800e5c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5c4:	602e      	str	r6, [r5, #0]
 800e5c6:	2900      	cmp	r1, #0
 800e5c8:	d0c6      	beq.n	800e558 <__sflush_r+0x18>
 800e5ca:	0023      	movs	r3, r4
 800e5cc:	3344      	adds	r3, #68	; 0x44
 800e5ce:	4299      	cmp	r1, r3
 800e5d0:	d002      	beq.n	800e5d8 <__sflush_r+0x98>
 800e5d2:	0028      	movs	r0, r5
 800e5d4:	f7fd fc02 	bl	800bddc <_free_r>
 800e5d8:	2000      	movs	r0, #0
 800e5da:	6360      	str	r0, [r4, #52]	; 0x34
 800e5dc:	e7bd      	b.n	800e55a <__sflush_r+0x1a>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	0028      	movs	r0, r5
 800e5e2:	6a21      	ldr	r1, [r4, #32]
 800e5e4:	47b8      	blx	r7
 800e5e6:	1c43      	adds	r3, r0, #1
 800e5e8:	d1c5      	bne.n	800e576 <__sflush_r+0x36>
 800e5ea:	682b      	ldr	r3, [r5, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d0c2      	beq.n	800e576 <__sflush_r+0x36>
 800e5f0:	2b1d      	cmp	r3, #29
 800e5f2:	d001      	beq.n	800e5f8 <__sflush_r+0xb8>
 800e5f4:	2b16      	cmp	r3, #22
 800e5f6:	d101      	bne.n	800e5fc <__sflush_r+0xbc>
 800e5f8:	602e      	str	r6, [r5, #0]
 800e5fa:	e7ad      	b.n	800e558 <__sflush_r+0x18>
 800e5fc:	2340      	movs	r3, #64	; 0x40
 800e5fe:	89a2      	ldrh	r2, [r4, #12]
 800e600:	4313      	orrs	r3, r2
 800e602:	81a3      	strh	r3, [r4, #12]
 800e604:	e7a9      	b.n	800e55a <__sflush_r+0x1a>
 800e606:	2340      	movs	r3, #64	; 0x40
 800e608:	430b      	orrs	r3, r1
 800e60a:	e7fa      	b.n	800e602 <__sflush_r+0xc2>
 800e60c:	690f      	ldr	r7, [r1, #16]
 800e60e:	2f00      	cmp	r7, #0
 800e610:	d0a2      	beq.n	800e558 <__sflush_r+0x18>
 800e612:	680a      	ldr	r2, [r1, #0]
 800e614:	600f      	str	r7, [r1, #0]
 800e616:	1bd2      	subs	r2, r2, r7
 800e618:	9201      	str	r2, [sp, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	079b      	lsls	r3, r3, #30
 800e61e:	d100      	bne.n	800e622 <__sflush_r+0xe2>
 800e620:	694a      	ldr	r2, [r1, #20]
 800e622:	60a2      	str	r2, [r4, #8]
 800e624:	9b01      	ldr	r3, [sp, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	dc00      	bgt.n	800e62c <__sflush_r+0xec>
 800e62a:	e795      	b.n	800e558 <__sflush_r+0x18>
 800e62c:	003a      	movs	r2, r7
 800e62e:	0028      	movs	r0, r5
 800e630:	9b01      	ldr	r3, [sp, #4]
 800e632:	6a21      	ldr	r1, [r4, #32]
 800e634:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e636:	47b0      	blx	r6
 800e638:	2800      	cmp	r0, #0
 800e63a:	dc06      	bgt.n	800e64a <__sflush_r+0x10a>
 800e63c:	2340      	movs	r3, #64	; 0x40
 800e63e:	2001      	movs	r0, #1
 800e640:	89a2      	ldrh	r2, [r4, #12]
 800e642:	4240      	negs	r0, r0
 800e644:	4313      	orrs	r3, r2
 800e646:	81a3      	strh	r3, [r4, #12]
 800e648:	e787      	b.n	800e55a <__sflush_r+0x1a>
 800e64a:	9b01      	ldr	r3, [sp, #4]
 800e64c:	183f      	adds	r7, r7, r0
 800e64e:	1a1b      	subs	r3, r3, r0
 800e650:	9301      	str	r3, [sp, #4]
 800e652:	e7e7      	b.n	800e624 <__sflush_r+0xe4>
 800e654:	20400001 	.word	0x20400001

0800e658 <_fflush_r>:
 800e658:	690b      	ldr	r3, [r1, #16]
 800e65a:	b570      	push	{r4, r5, r6, lr}
 800e65c:	0005      	movs	r5, r0
 800e65e:	000c      	movs	r4, r1
 800e660:	2b00      	cmp	r3, #0
 800e662:	d102      	bne.n	800e66a <_fflush_r+0x12>
 800e664:	2500      	movs	r5, #0
 800e666:	0028      	movs	r0, r5
 800e668:	bd70      	pop	{r4, r5, r6, pc}
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d004      	beq.n	800e678 <_fflush_r+0x20>
 800e66e:	6983      	ldr	r3, [r0, #24]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d101      	bne.n	800e678 <_fflush_r+0x20>
 800e674:	f000 f892 	bl	800e79c <__sinit>
 800e678:	4b14      	ldr	r3, [pc, #80]	; (800e6cc <_fflush_r+0x74>)
 800e67a:	429c      	cmp	r4, r3
 800e67c:	d11b      	bne.n	800e6b6 <_fflush_r+0x5e>
 800e67e:	686c      	ldr	r4, [r5, #4]
 800e680:	220c      	movs	r2, #12
 800e682:	5ea3      	ldrsh	r3, [r4, r2]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d0ed      	beq.n	800e664 <_fflush_r+0xc>
 800e688:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e68a:	07d2      	lsls	r2, r2, #31
 800e68c:	d404      	bmi.n	800e698 <_fflush_r+0x40>
 800e68e:	059b      	lsls	r3, r3, #22
 800e690:	d402      	bmi.n	800e698 <_fflush_r+0x40>
 800e692:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e694:	f000 f923 	bl	800e8de <__retarget_lock_acquire_recursive>
 800e698:	0028      	movs	r0, r5
 800e69a:	0021      	movs	r1, r4
 800e69c:	f7ff ff50 	bl	800e540 <__sflush_r>
 800e6a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e6a2:	0005      	movs	r5, r0
 800e6a4:	07db      	lsls	r3, r3, #31
 800e6a6:	d4de      	bmi.n	800e666 <_fflush_r+0xe>
 800e6a8:	89a3      	ldrh	r3, [r4, #12]
 800e6aa:	059b      	lsls	r3, r3, #22
 800e6ac:	d4db      	bmi.n	800e666 <_fflush_r+0xe>
 800e6ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6b0:	f000 f916 	bl	800e8e0 <__retarget_lock_release_recursive>
 800e6b4:	e7d7      	b.n	800e666 <_fflush_r+0xe>
 800e6b6:	4b06      	ldr	r3, [pc, #24]	; (800e6d0 <_fflush_r+0x78>)
 800e6b8:	429c      	cmp	r4, r3
 800e6ba:	d101      	bne.n	800e6c0 <_fflush_r+0x68>
 800e6bc:	68ac      	ldr	r4, [r5, #8]
 800e6be:	e7df      	b.n	800e680 <_fflush_r+0x28>
 800e6c0:	4b04      	ldr	r3, [pc, #16]	; (800e6d4 <_fflush_r+0x7c>)
 800e6c2:	429c      	cmp	r4, r3
 800e6c4:	d1dc      	bne.n	800e680 <_fflush_r+0x28>
 800e6c6:	68ec      	ldr	r4, [r5, #12]
 800e6c8:	e7da      	b.n	800e680 <_fflush_r+0x28>
 800e6ca:	46c0      	nop			; (mov r8, r8)
 800e6cc:	0800f1e8 	.word	0x0800f1e8
 800e6d0:	0800f208 	.word	0x0800f208
 800e6d4:	0800f1c8 	.word	0x0800f1c8

0800e6d8 <std>:
 800e6d8:	2300      	movs	r3, #0
 800e6da:	b510      	push	{r4, lr}
 800e6dc:	0004      	movs	r4, r0
 800e6de:	6003      	str	r3, [r0, #0]
 800e6e0:	6043      	str	r3, [r0, #4]
 800e6e2:	6083      	str	r3, [r0, #8]
 800e6e4:	8181      	strh	r1, [r0, #12]
 800e6e6:	6643      	str	r3, [r0, #100]	; 0x64
 800e6e8:	0019      	movs	r1, r3
 800e6ea:	81c2      	strh	r2, [r0, #14]
 800e6ec:	6103      	str	r3, [r0, #16]
 800e6ee:	6143      	str	r3, [r0, #20]
 800e6f0:	6183      	str	r3, [r0, #24]
 800e6f2:	2208      	movs	r2, #8
 800e6f4:	305c      	adds	r0, #92	; 0x5c
 800e6f6:	f7fd fb68 	bl	800bdca <memset>
 800e6fa:	4b05      	ldr	r3, [pc, #20]	; (800e710 <std+0x38>)
 800e6fc:	6263      	str	r3, [r4, #36]	; 0x24
 800e6fe:	4b05      	ldr	r3, [pc, #20]	; (800e714 <std+0x3c>)
 800e700:	6224      	str	r4, [r4, #32]
 800e702:	62a3      	str	r3, [r4, #40]	; 0x28
 800e704:	4b04      	ldr	r3, [pc, #16]	; (800e718 <std+0x40>)
 800e706:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e708:	4b04      	ldr	r3, [pc, #16]	; (800e71c <std+0x44>)
 800e70a:	6323      	str	r3, [r4, #48]	; 0x30
 800e70c:	bd10      	pop	{r4, pc}
 800e70e:	46c0      	nop			; (mov r8, r8)
 800e710:	0800eac5 	.word	0x0800eac5
 800e714:	0800eaed 	.word	0x0800eaed
 800e718:	0800eb25 	.word	0x0800eb25
 800e71c:	0800eb51 	.word	0x0800eb51

0800e720 <_cleanup_r>:
 800e720:	b510      	push	{r4, lr}
 800e722:	4902      	ldr	r1, [pc, #8]	; (800e72c <_cleanup_r+0xc>)
 800e724:	f000 f8ba 	bl	800e89c <_fwalk_reent>
 800e728:	bd10      	pop	{r4, pc}
 800e72a:	46c0      	nop			; (mov r8, r8)
 800e72c:	0800e659 	.word	0x0800e659

0800e730 <__sfmoreglue>:
 800e730:	b570      	push	{r4, r5, r6, lr}
 800e732:	2568      	movs	r5, #104	; 0x68
 800e734:	1e4a      	subs	r2, r1, #1
 800e736:	4355      	muls	r5, r2
 800e738:	000e      	movs	r6, r1
 800e73a:	0029      	movs	r1, r5
 800e73c:	3174      	adds	r1, #116	; 0x74
 800e73e:	f7fd fb97 	bl	800be70 <_malloc_r>
 800e742:	1e04      	subs	r4, r0, #0
 800e744:	d008      	beq.n	800e758 <__sfmoreglue+0x28>
 800e746:	2100      	movs	r1, #0
 800e748:	002a      	movs	r2, r5
 800e74a:	6001      	str	r1, [r0, #0]
 800e74c:	6046      	str	r6, [r0, #4]
 800e74e:	300c      	adds	r0, #12
 800e750:	60a0      	str	r0, [r4, #8]
 800e752:	3268      	adds	r2, #104	; 0x68
 800e754:	f7fd fb39 	bl	800bdca <memset>
 800e758:	0020      	movs	r0, r4
 800e75a:	bd70      	pop	{r4, r5, r6, pc}

0800e75c <__sfp_lock_acquire>:
 800e75c:	b510      	push	{r4, lr}
 800e75e:	4802      	ldr	r0, [pc, #8]	; (800e768 <__sfp_lock_acquire+0xc>)
 800e760:	f000 f8bd 	bl	800e8de <__retarget_lock_acquire_recursive>
 800e764:	bd10      	pop	{r4, pc}
 800e766:	46c0      	nop			; (mov r8, r8)
 800e768:	20000618 	.word	0x20000618

0800e76c <__sfp_lock_release>:
 800e76c:	b510      	push	{r4, lr}
 800e76e:	4802      	ldr	r0, [pc, #8]	; (800e778 <__sfp_lock_release+0xc>)
 800e770:	f000 f8b6 	bl	800e8e0 <__retarget_lock_release_recursive>
 800e774:	bd10      	pop	{r4, pc}
 800e776:	46c0      	nop			; (mov r8, r8)
 800e778:	20000618 	.word	0x20000618

0800e77c <__sinit_lock_acquire>:
 800e77c:	b510      	push	{r4, lr}
 800e77e:	4802      	ldr	r0, [pc, #8]	; (800e788 <__sinit_lock_acquire+0xc>)
 800e780:	f000 f8ad 	bl	800e8de <__retarget_lock_acquire_recursive>
 800e784:	bd10      	pop	{r4, pc}
 800e786:	46c0      	nop			; (mov r8, r8)
 800e788:	20000613 	.word	0x20000613

0800e78c <__sinit_lock_release>:
 800e78c:	b510      	push	{r4, lr}
 800e78e:	4802      	ldr	r0, [pc, #8]	; (800e798 <__sinit_lock_release+0xc>)
 800e790:	f000 f8a6 	bl	800e8e0 <__retarget_lock_release_recursive>
 800e794:	bd10      	pop	{r4, pc}
 800e796:	46c0      	nop			; (mov r8, r8)
 800e798:	20000613 	.word	0x20000613

0800e79c <__sinit>:
 800e79c:	b513      	push	{r0, r1, r4, lr}
 800e79e:	0004      	movs	r4, r0
 800e7a0:	f7ff ffec 	bl	800e77c <__sinit_lock_acquire>
 800e7a4:	69a3      	ldr	r3, [r4, #24]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d002      	beq.n	800e7b0 <__sinit+0x14>
 800e7aa:	f7ff ffef 	bl	800e78c <__sinit_lock_release>
 800e7ae:	bd13      	pop	{r0, r1, r4, pc}
 800e7b0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e7b2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e7b4:	6523      	str	r3, [r4, #80]	; 0x50
 800e7b6:	4b13      	ldr	r3, [pc, #76]	; (800e804 <__sinit+0x68>)
 800e7b8:	4a13      	ldr	r2, [pc, #76]	; (800e808 <__sinit+0x6c>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e7be:	9301      	str	r3, [sp, #4]
 800e7c0:	42a3      	cmp	r3, r4
 800e7c2:	d101      	bne.n	800e7c8 <__sinit+0x2c>
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	61a3      	str	r3, [r4, #24]
 800e7c8:	0020      	movs	r0, r4
 800e7ca:	f000 f81f 	bl	800e80c <__sfp>
 800e7ce:	6060      	str	r0, [r4, #4]
 800e7d0:	0020      	movs	r0, r4
 800e7d2:	f000 f81b 	bl	800e80c <__sfp>
 800e7d6:	60a0      	str	r0, [r4, #8]
 800e7d8:	0020      	movs	r0, r4
 800e7da:	f000 f817 	bl	800e80c <__sfp>
 800e7de:	2200      	movs	r2, #0
 800e7e0:	2104      	movs	r1, #4
 800e7e2:	60e0      	str	r0, [r4, #12]
 800e7e4:	6860      	ldr	r0, [r4, #4]
 800e7e6:	f7ff ff77 	bl	800e6d8 <std>
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	2109      	movs	r1, #9
 800e7ee:	68a0      	ldr	r0, [r4, #8]
 800e7f0:	f7ff ff72 	bl	800e6d8 <std>
 800e7f4:	2202      	movs	r2, #2
 800e7f6:	2112      	movs	r1, #18
 800e7f8:	68e0      	ldr	r0, [r4, #12]
 800e7fa:	f7ff ff6d 	bl	800e6d8 <std>
 800e7fe:	2301      	movs	r3, #1
 800e800:	61a3      	str	r3, [r4, #24]
 800e802:	e7d2      	b.n	800e7aa <__sinit+0xe>
 800e804:	0800ee44 	.word	0x0800ee44
 800e808:	0800e721 	.word	0x0800e721

0800e80c <__sfp>:
 800e80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e80e:	0007      	movs	r7, r0
 800e810:	f7ff ffa4 	bl	800e75c <__sfp_lock_acquire>
 800e814:	4b1f      	ldr	r3, [pc, #124]	; (800e894 <__sfp+0x88>)
 800e816:	681e      	ldr	r6, [r3, #0]
 800e818:	69b3      	ldr	r3, [r6, #24]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d102      	bne.n	800e824 <__sfp+0x18>
 800e81e:	0030      	movs	r0, r6
 800e820:	f7ff ffbc 	bl	800e79c <__sinit>
 800e824:	3648      	adds	r6, #72	; 0x48
 800e826:	68b4      	ldr	r4, [r6, #8]
 800e828:	6873      	ldr	r3, [r6, #4]
 800e82a:	3b01      	subs	r3, #1
 800e82c:	d504      	bpl.n	800e838 <__sfp+0x2c>
 800e82e:	6833      	ldr	r3, [r6, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d022      	beq.n	800e87a <__sfp+0x6e>
 800e834:	6836      	ldr	r6, [r6, #0]
 800e836:	e7f6      	b.n	800e826 <__sfp+0x1a>
 800e838:	220c      	movs	r2, #12
 800e83a:	5ea5      	ldrsh	r5, [r4, r2]
 800e83c:	2d00      	cmp	r5, #0
 800e83e:	d11a      	bne.n	800e876 <__sfp+0x6a>
 800e840:	0020      	movs	r0, r4
 800e842:	4b15      	ldr	r3, [pc, #84]	; (800e898 <__sfp+0x8c>)
 800e844:	3058      	adds	r0, #88	; 0x58
 800e846:	60e3      	str	r3, [r4, #12]
 800e848:	6665      	str	r5, [r4, #100]	; 0x64
 800e84a:	f000 f847 	bl	800e8dc <__retarget_lock_init_recursive>
 800e84e:	f7ff ff8d 	bl	800e76c <__sfp_lock_release>
 800e852:	0020      	movs	r0, r4
 800e854:	2208      	movs	r2, #8
 800e856:	0029      	movs	r1, r5
 800e858:	6025      	str	r5, [r4, #0]
 800e85a:	60a5      	str	r5, [r4, #8]
 800e85c:	6065      	str	r5, [r4, #4]
 800e85e:	6125      	str	r5, [r4, #16]
 800e860:	6165      	str	r5, [r4, #20]
 800e862:	61a5      	str	r5, [r4, #24]
 800e864:	305c      	adds	r0, #92	; 0x5c
 800e866:	f7fd fab0 	bl	800bdca <memset>
 800e86a:	6365      	str	r5, [r4, #52]	; 0x34
 800e86c:	63a5      	str	r5, [r4, #56]	; 0x38
 800e86e:	64a5      	str	r5, [r4, #72]	; 0x48
 800e870:	64e5      	str	r5, [r4, #76]	; 0x4c
 800e872:	0020      	movs	r0, r4
 800e874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e876:	3468      	adds	r4, #104	; 0x68
 800e878:	e7d7      	b.n	800e82a <__sfp+0x1e>
 800e87a:	2104      	movs	r1, #4
 800e87c:	0038      	movs	r0, r7
 800e87e:	f7ff ff57 	bl	800e730 <__sfmoreglue>
 800e882:	1e04      	subs	r4, r0, #0
 800e884:	6030      	str	r0, [r6, #0]
 800e886:	d1d5      	bne.n	800e834 <__sfp+0x28>
 800e888:	f7ff ff70 	bl	800e76c <__sfp_lock_release>
 800e88c:	230c      	movs	r3, #12
 800e88e:	603b      	str	r3, [r7, #0]
 800e890:	e7ef      	b.n	800e872 <__sfp+0x66>
 800e892:	46c0      	nop			; (mov r8, r8)
 800e894:	0800ee44 	.word	0x0800ee44
 800e898:	ffff0001 	.word	0xffff0001

0800e89c <_fwalk_reent>:
 800e89c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e89e:	0004      	movs	r4, r0
 800e8a0:	0006      	movs	r6, r0
 800e8a2:	2700      	movs	r7, #0
 800e8a4:	9101      	str	r1, [sp, #4]
 800e8a6:	3448      	adds	r4, #72	; 0x48
 800e8a8:	6863      	ldr	r3, [r4, #4]
 800e8aa:	68a5      	ldr	r5, [r4, #8]
 800e8ac:	9300      	str	r3, [sp, #0]
 800e8ae:	9b00      	ldr	r3, [sp, #0]
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	9300      	str	r3, [sp, #0]
 800e8b4:	d504      	bpl.n	800e8c0 <_fwalk_reent+0x24>
 800e8b6:	6824      	ldr	r4, [r4, #0]
 800e8b8:	2c00      	cmp	r4, #0
 800e8ba:	d1f5      	bne.n	800e8a8 <_fwalk_reent+0xc>
 800e8bc:	0038      	movs	r0, r7
 800e8be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e8c0:	89ab      	ldrh	r3, [r5, #12]
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d908      	bls.n	800e8d8 <_fwalk_reent+0x3c>
 800e8c6:	220e      	movs	r2, #14
 800e8c8:	5eab      	ldrsh	r3, [r5, r2]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	d004      	beq.n	800e8d8 <_fwalk_reent+0x3c>
 800e8ce:	0029      	movs	r1, r5
 800e8d0:	0030      	movs	r0, r6
 800e8d2:	9b01      	ldr	r3, [sp, #4]
 800e8d4:	4798      	blx	r3
 800e8d6:	4307      	orrs	r7, r0
 800e8d8:	3568      	adds	r5, #104	; 0x68
 800e8da:	e7e8      	b.n	800e8ae <_fwalk_reent+0x12>

0800e8dc <__retarget_lock_init_recursive>:
 800e8dc:	4770      	bx	lr

0800e8de <__retarget_lock_acquire_recursive>:
 800e8de:	4770      	bx	lr

0800e8e0 <__retarget_lock_release_recursive>:
 800e8e0:	4770      	bx	lr
	...

0800e8e4 <__swhatbuf_r>:
 800e8e4:	b570      	push	{r4, r5, r6, lr}
 800e8e6:	000e      	movs	r6, r1
 800e8e8:	001d      	movs	r5, r3
 800e8ea:	230e      	movs	r3, #14
 800e8ec:	5ec9      	ldrsh	r1, [r1, r3]
 800e8ee:	0014      	movs	r4, r2
 800e8f0:	b096      	sub	sp, #88	; 0x58
 800e8f2:	2900      	cmp	r1, #0
 800e8f4:	da07      	bge.n	800e906 <__swhatbuf_r+0x22>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	602b      	str	r3, [r5, #0]
 800e8fa:	89b3      	ldrh	r3, [r6, #12]
 800e8fc:	061b      	lsls	r3, r3, #24
 800e8fe:	d411      	bmi.n	800e924 <__swhatbuf_r+0x40>
 800e900:	2380      	movs	r3, #128	; 0x80
 800e902:	00db      	lsls	r3, r3, #3
 800e904:	e00f      	b.n	800e926 <__swhatbuf_r+0x42>
 800e906:	466a      	mov	r2, sp
 800e908:	f000 f94e 	bl	800eba8 <_fstat_r>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	dbf2      	blt.n	800e8f6 <__swhatbuf_r+0x12>
 800e910:	23f0      	movs	r3, #240	; 0xf0
 800e912:	9901      	ldr	r1, [sp, #4]
 800e914:	021b      	lsls	r3, r3, #8
 800e916:	4019      	ands	r1, r3
 800e918:	4b05      	ldr	r3, [pc, #20]	; (800e930 <__swhatbuf_r+0x4c>)
 800e91a:	18c9      	adds	r1, r1, r3
 800e91c:	424b      	negs	r3, r1
 800e91e:	4159      	adcs	r1, r3
 800e920:	6029      	str	r1, [r5, #0]
 800e922:	e7ed      	b.n	800e900 <__swhatbuf_r+0x1c>
 800e924:	2340      	movs	r3, #64	; 0x40
 800e926:	2000      	movs	r0, #0
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	b016      	add	sp, #88	; 0x58
 800e92c:	bd70      	pop	{r4, r5, r6, pc}
 800e92e:	46c0      	nop			; (mov r8, r8)
 800e930:	ffffe000 	.word	0xffffe000

0800e934 <__smakebuf_r>:
 800e934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e936:	2602      	movs	r6, #2
 800e938:	898b      	ldrh	r3, [r1, #12]
 800e93a:	0005      	movs	r5, r0
 800e93c:	000c      	movs	r4, r1
 800e93e:	4233      	tst	r3, r6
 800e940:	d006      	beq.n	800e950 <__smakebuf_r+0x1c>
 800e942:	0023      	movs	r3, r4
 800e944:	3347      	adds	r3, #71	; 0x47
 800e946:	6023      	str	r3, [r4, #0]
 800e948:	6123      	str	r3, [r4, #16]
 800e94a:	2301      	movs	r3, #1
 800e94c:	6163      	str	r3, [r4, #20]
 800e94e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e950:	466a      	mov	r2, sp
 800e952:	ab01      	add	r3, sp, #4
 800e954:	f7ff ffc6 	bl	800e8e4 <__swhatbuf_r>
 800e958:	9900      	ldr	r1, [sp, #0]
 800e95a:	0007      	movs	r7, r0
 800e95c:	0028      	movs	r0, r5
 800e95e:	f7fd fa87 	bl	800be70 <_malloc_r>
 800e962:	2800      	cmp	r0, #0
 800e964:	d108      	bne.n	800e978 <__smakebuf_r+0x44>
 800e966:	220c      	movs	r2, #12
 800e968:	5ea3      	ldrsh	r3, [r4, r2]
 800e96a:	059a      	lsls	r2, r3, #22
 800e96c:	d4ef      	bmi.n	800e94e <__smakebuf_r+0x1a>
 800e96e:	2203      	movs	r2, #3
 800e970:	4393      	bics	r3, r2
 800e972:	431e      	orrs	r6, r3
 800e974:	81a6      	strh	r6, [r4, #12]
 800e976:	e7e4      	b.n	800e942 <__smakebuf_r+0xe>
 800e978:	4b0f      	ldr	r3, [pc, #60]	; (800e9b8 <__smakebuf_r+0x84>)
 800e97a:	62ab      	str	r3, [r5, #40]	; 0x28
 800e97c:	2380      	movs	r3, #128	; 0x80
 800e97e:	89a2      	ldrh	r2, [r4, #12]
 800e980:	6020      	str	r0, [r4, #0]
 800e982:	4313      	orrs	r3, r2
 800e984:	81a3      	strh	r3, [r4, #12]
 800e986:	9b00      	ldr	r3, [sp, #0]
 800e988:	6120      	str	r0, [r4, #16]
 800e98a:	6163      	str	r3, [r4, #20]
 800e98c:	9b01      	ldr	r3, [sp, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00d      	beq.n	800e9ae <__smakebuf_r+0x7a>
 800e992:	0028      	movs	r0, r5
 800e994:	230e      	movs	r3, #14
 800e996:	5ee1      	ldrsh	r1, [r4, r3]
 800e998:	f000 f918 	bl	800ebcc <_isatty_r>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	d006      	beq.n	800e9ae <__smakebuf_r+0x7a>
 800e9a0:	2203      	movs	r2, #3
 800e9a2:	89a3      	ldrh	r3, [r4, #12]
 800e9a4:	4393      	bics	r3, r2
 800e9a6:	001a      	movs	r2, r3
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	81a3      	strh	r3, [r4, #12]
 800e9ae:	89a0      	ldrh	r0, [r4, #12]
 800e9b0:	4307      	orrs	r7, r0
 800e9b2:	81a7      	strh	r7, [r4, #12]
 800e9b4:	e7cb      	b.n	800e94e <__smakebuf_r+0x1a>
 800e9b6:	46c0      	nop			; (mov r8, r8)
 800e9b8:	0800e721 	.word	0x0800e721

0800e9bc <memmove>:
 800e9bc:	b510      	push	{r4, lr}
 800e9be:	4288      	cmp	r0, r1
 800e9c0:	d902      	bls.n	800e9c8 <memmove+0xc>
 800e9c2:	188b      	adds	r3, r1, r2
 800e9c4:	4298      	cmp	r0, r3
 800e9c6:	d303      	bcc.n	800e9d0 <memmove+0x14>
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	e007      	b.n	800e9dc <memmove+0x20>
 800e9cc:	5c8b      	ldrb	r3, [r1, r2]
 800e9ce:	5483      	strb	r3, [r0, r2]
 800e9d0:	3a01      	subs	r2, #1
 800e9d2:	d2fb      	bcs.n	800e9cc <memmove+0x10>
 800e9d4:	bd10      	pop	{r4, pc}
 800e9d6:	5ccc      	ldrb	r4, [r1, r3]
 800e9d8:	54c4      	strb	r4, [r0, r3]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d1fa      	bne.n	800e9d6 <memmove+0x1a>
 800e9e0:	e7f8      	b.n	800e9d4 <memmove+0x18>

0800e9e2 <_realloc_r>:
 800e9e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e4:	0007      	movs	r7, r0
 800e9e6:	000d      	movs	r5, r1
 800e9e8:	0016      	movs	r6, r2
 800e9ea:	2900      	cmp	r1, #0
 800e9ec:	d105      	bne.n	800e9fa <_realloc_r+0x18>
 800e9ee:	0011      	movs	r1, r2
 800e9f0:	f7fd fa3e 	bl	800be70 <_malloc_r>
 800e9f4:	0004      	movs	r4, r0
 800e9f6:	0020      	movs	r0, r4
 800e9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9fa:	2a00      	cmp	r2, #0
 800e9fc:	d103      	bne.n	800ea06 <_realloc_r+0x24>
 800e9fe:	f7fd f9ed 	bl	800bddc <_free_r>
 800ea02:	0034      	movs	r4, r6
 800ea04:	e7f7      	b.n	800e9f6 <_realloc_r+0x14>
 800ea06:	f000 f907 	bl	800ec18 <_malloc_usable_size_r>
 800ea0a:	002c      	movs	r4, r5
 800ea0c:	42b0      	cmp	r0, r6
 800ea0e:	d2f2      	bcs.n	800e9f6 <_realloc_r+0x14>
 800ea10:	0031      	movs	r1, r6
 800ea12:	0038      	movs	r0, r7
 800ea14:	f7fd fa2c 	bl	800be70 <_malloc_r>
 800ea18:	1e04      	subs	r4, r0, #0
 800ea1a:	d0ec      	beq.n	800e9f6 <_realloc_r+0x14>
 800ea1c:	0029      	movs	r1, r5
 800ea1e:	0032      	movs	r2, r6
 800ea20:	f7fd f9ca 	bl	800bdb8 <memcpy>
 800ea24:	0029      	movs	r1, r5
 800ea26:	0038      	movs	r0, r7
 800ea28:	f7fd f9d8 	bl	800bddc <_free_r>
 800ea2c:	e7e3      	b.n	800e9f6 <_realloc_r+0x14>

0800ea2e <_raise_r>:
 800ea2e:	b570      	push	{r4, r5, r6, lr}
 800ea30:	0004      	movs	r4, r0
 800ea32:	000d      	movs	r5, r1
 800ea34:	291f      	cmp	r1, #31
 800ea36:	d904      	bls.n	800ea42 <_raise_r+0x14>
 800ea38:	2316      	movs	r3, #22
 800ea3a:	6003      	str	r3, [r0, #0]
 800ea3c:	2001      	movs	r0, #1
 800ea3e:	4240      	negs	r0, r0
 800ea40:	bd70      	pop	{r4, r5, r6, pc}
 800ea42:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d004      	beq.n	800ea52 <_raise_r+0x24>
 800ea48:	008a      	lsls	r2, r1, #2
 800ea4a:	189b      	adds	r3, r3, r2
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	2a00      	cmp	r2, #0
 800ea50:	d108      	bne.n	800ea64 <_raise_r+0x36>
 800ea52:	0020      	movs	r0, r4
 800ea54:	f000 f832 	bl	800eabc <_getpid_r>
 800ea58:	002a      	movs	r2, r5
 800ea5a:	0001      	movs	r1, r0
 800ea5c:	0020      	movs	r0, r4
 800ea5e:	f000 f81b 	bl	800ea98 <_kill_r>
 800ea62:	e7ed      	b.n	800ea40 <_raise_r+0x12>
 800ea64:	2000      	movs	r0, #0
 800ea66:	2a01      	cmp	r2, #1
 800ea68:	d0ea      	beq.n	800ea40 <_raise_r+0x12>
 800ea6a:	1c51      	adds	r1, r2, #1
 800ea6c:	d103      	bne.n	800ea76 <_raise_r+0x48>
 800ea6e:	2316      	movs	r3, #22
 800ea70:	3001      	adds	r0, #1
 800ea72:	6023      	str	r3, [r4, #0]
 800ea74:	e7e4      	b.n	800ea40 <_raise_r+0x12>
 800ea76:	2400      	movs	r4, #0
 800ea78:	0028      	movs	r0, r5
 800ea7a:	601c      	str	r4, [r3, #0]
 800ea7c:	4790      	blx	r2
 800ea7e:	0020      	movs	r0, r4
 800ea80:	e7de      	b.n	800ea40 <_raise_r+0x12>
	...

0800ea84 <raise>:
 800ea84:	b510      	push	{r4, lr}
 800ea86:	4b03      	ldr	r3, [pc, #12]	; (800ea94 <raise+0x10>)
 800ea88:	0001      	movs	r1, r0
 800ea8a:	6818      	ldr	r0, [r3, #0]
 800ea8c:	f7ff ffcf 	bl	800ea2e <_raise_r>
 800ea90:	bd10      	pop	{r4, pc}
 800ea92:	46c0      	nop			; (mov r8, r8)
 800ea94:	20000038 	.word	0x20000038

0800ea98 <_kill_r>:
 800ea98:	2300      	movs	r3, #0
 800ea9a:	b570      	push	{r4, r5, r6, lr}
 800ea9c:	4d06      	ldr	r5, [pc, #24]	; (800eab8 <_kill_r+0x20>)
 800ea9e:	0004      	movs	r4, r0
 800eaa0:	0008      	movs	r0, r1
 800eaa2:	0011      	movs	r1, r2
 800eaa4:	602b      	str	r3, [r5, #0]
 800eaa6:	f7f4 fe23 	bl	80036f0 <_kill>
 800eaaa:	1c43      	adds	r3, r0, #1
 800eaac:	d103      	bne.n	800eab6 <_kill_r+0x1e>
 800eaae:	682b      	ldr	r3, [r5, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d000      	beq.n	800eab6 <_kill_r+0x1e>
 800eab4:	6023      	str	r3, [r4, #0]
 800eab6:	bd70      	pop	{r4, r5, r6, pc}
 800eab8:	2000060c 	.word	0x2000060c

0800eabc <_getpid_r>:
 800eabc:	b510      	push	{r4, lr}
 800eabe:	f7f4 fe11 	bl	80036e4 <_getpid>
 800eac2:	bd10      	pop	{r4, pc}

0800eac4 <__sread>:
 800eac4:	b570      	push	{r4, r5, r6, lr}
 800eac6:	000c      	movs	r4, r1
 800eac8:	250e      	movs	r5, #14
 800eaca:	5f49      	ldrsh	r1, [r1, r5]
 800eacc:	f000 f8ac 	bl	800ec28 <_read_r>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	db03      	blt.n	800eadc <__sread+0x18>
 800ead4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ead6:	181b      	adds	r3, r3, r0
 800ead8:	6563      	str	r3, [r4, #84]	; 0x54
 800eada:	bd70      	pop	{r4, r5, r6, pc}
 800eadc:	89a3      	ldrh	r3, [r4, #12]
 800eade:	4a02      	ldr	r2, [pc, #8]	; (800eae8 <__sread+0x24>)
 800eae0:	4013      	ands	r3, r2
 800eae2:	81a3      	strh	r3, [r4, #12]
 800eae4:	e7f9      	b.n	800eada <__sread+0x16>
 800eae6:	46c0      	nop			; (mov r8, r8)
 800eae8:	ffffefff 	.word	0xffffefff

0800eaec <__swrite>:
 800eaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaee:	001f      	movs	r7, r3
 800eaf0:	898b      	ldrh	r3, [r1, #12]
 800eaf2:	0005      	movs	r5, r0
 800eaf4:	000c      	movs	r4, r1
 800eaf6:	0016      	movs	r6, r2
 800eaf8:	05db      	lsls	r3, r3, #23
 800eafa:	d505      	bpl.n	800eb08 <__swrite+0x1c>
 800eafc:	230e      	movs	r3, #14
 800eafe:	5ec9      	ldrsh	r1, [r1, r3]
 800eb00:	2200      	movs	r2, #0
 800eb02:	2302      	movs	r3, #2
 800eb04:	f000 f874 	bl	800ebf0 <_lseek_r>
 800eb08:	89a3      	ldrh	r3, [r4, #12]
 800eb0a:	4a05      	ldr	r2, [pc, #20]	; (800eb20 <__swrite+0x34>)
 800eb0c:	0028      	movs	r0, r5
 800eb0e:	4013      	ands	r3, r2
 800eb10:	81a3      	strh	r3, [r4, #12]
 800eb12:	0032      	movs	r2, r6
 800eb14:	230e      	movs	r3, #14
 800eb16:	5ee1      	ldrsh	r1, [r4, r3]
 800eb18:	003b      	movs	r3, r7
 800eb1a:	f000 f81f 	bl	800eb5c <_write_r>
 800eb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb20:	ffffefff 	.word	0xffffefff

0800eb24 <__sseek>:
 800eb24:	b570      	push	{r4, r5, r6, lr}
 800eb26:	000c      	movs	r4, r1
 800eb28:	250e      	movs	r5, #14
 800eb2a:	5f49      	ldrsh	r1, [r1, r5]
 800eb2c:	f000 f860 	bl	800ebf0 <_lseek_r>
 800eb30:	89a3      	ldrh	r3, [r4, #12]
 800eb32:	1c42      	adds	r2, r0, #1
 800eb34:	d103      	bne.n	800eb3e <__sseek+0x1a>
 800eb36:	4a05      	ldr	r2, [pc, #20]	; (800eb4c <__sseek+0x28>)
 800eb38:	4013      	ands	r3, r2
 800eb3a:	81a3      	strh	r3, [r4, #12]
 800eb3c:	bd70      	pop	{r4, r5, r6, pc}
 800eb3e:	2280      	movs	r2, #128	; 0x80
 800eb40:	0152      	lsls	r2, r2, #5
 800eb42:	4313      	orrs	r3, r2
 800eb44:	81a3      	strh	r3, [r4, #12]
 800eb46:	6560      	str	r0, [r4, #84]	; 0x54
 800eb48:	e7f8      	b.n	800eb3c <__sseek+0x18>
 800eb4a:	46c0      	nop			; (mov r8, r8)
 800eb4c:	ffffefff 	.word	0xffffefff

0800eb50 <__sclose>:
 800eb50:	b510      	push	{r4, lr}
 800eb52:	230e      	movs	r3, #14
 800eb54:	5ec9      	ldrsh	r1, [r1, r3]
 800eb56:	f000 f815 	bl	800eb84 <_close_r>
 800eb5a:	bd10      	pop	{r4, pc}

0800eb5c <_write_r>:
 800eb5c:	b570      	push	{r4, r5, r6, lr}
 800eb5e:	0004      	movs	r4, r0
 800eb60:	0008      	movs	r0, r1
 800eb62:	0011      	movs	r1, r2
 800eb64:	001a      	movs	r2, r3
 800eb66:	2300      	movs	r3, #0
 800eb68:	4d05      	ldr	r5, [pc, #20]	; (800eb80 <_write_r+0x24>)
 800eb6a:	602b      	str	r3, [r5, #0]
 800eb6c:	f7f4 fdf9 	bl	8003762 <_write>
 800eb70:	1c43      	adds	r3, r0, #1
 800eb72:	d103      	bne.n	800eb7c <_write_r+0x20>
 800eb74:	682b      	ldr	r3, [r5, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d000      	beq.n	800eb7c <_write_r+0x20>
 800eb7a:	6023      	str	r3, [r4, #0]
 800eb7c:	bd70      	pop	{r4, r5, r6, pc}
 800eb7e:	46c0      	nop			; (mov r8, r8)
 800eb80:	2000060c 	.word	0x2000060c

0800eb84 <_close_r>:
 800eb84:	2300      	movs	r3, #0
 800eb86:	b570      	push	{r4, r5, r6, lr}
 800eb88:	4d06      	ldr	r5, [pc, #24]	; (800eba4 <_close_r+0x20>)
 800eb8a:	0004      	movs	r4, r0
 800eb8c:	0008      	movs	r0, r1
 800eb8e:	602b      	str	r3, [r5, #0]
 800eb90:	f7f4 fe03 	bl	800379a <_close>
 800eb94:	1c43      	adds	r3, r0, #1
 800eb96:	d103      	bne.n	800eba0 <_close_r+0x1c>
 800eb98:	682b      	ldr	r3, [r5, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d000      	beq.n	800eba0 <_close_r+0x1c>
 800eb9e:	6023      	str	r3, [r4, #0]
 800eba0:	bd70      	pop	{r4, r5, r6, pc}
 800eba2:	46c0      	nop			; (mov r8, r8)
 800eba4:	2000060c 	.word	0x2000060c

0800eba8 <_fstat_r>:
 800eba8:	2300      	movs	r3, #0
 800ebaa:	b570      	push	{r4, r5, r6, lr}
 800ebac:	4d06      	ldr	r5, [pc, #24]	; (800ebc8 <_fstat_r+0x20>)
 800ebae:	0004      	movs	r4, r0
 800ebb0:	0008      	movs	r0, r1
 800ebb2:	0011      	movs	r1, r2
 800ebb4:	602b      	str	r3, [r5, #0]
 800ebb6:	f7f4 fdfa 	bl	80037ae <_fstat>
 800ebba:	1c43      	adds	r3, r0, #1
 800ebbc:	d103      	bne.n	800ebc6 <_fstat_r+0x1e>
 800ebbe:	682b      	ldr	r3, [r5, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d000      	beq.n	800ebc6 <_fstat_r+0x1e>
 800ebc4:	6023      	str	r3, [r4, #0]
 800ebc6:	bd70      	pop	{r4, r5, r6, pc}
 800ebc8:	2000060c 	.word	0x2000060c

0800ebcc <_isatty_r>:
 800ebcc:	2300      	movs	r3, #0
 800ebce:	b570      	push	{r4, r5, r6, lr}
 800ebd0:	4d06      	ldr	r5, [pc, #24]	; (800ebec <_isatty_r+0x20>)
 800ebd2:	0004      	movs	r4, r0
 800ebd4:	0008      	movs	r0, r1
 800ebd6:	602b      	str	r3, [r5, #0]
 800ebd8:	f7f4 fdf7 	bl	80037ca <_isatty>
 800ebdc:	1c43      	adds	r3, r0, #1
 800ebde:	d103      	bne.n	800ebe8 <_isatty_r+0x1c>
 800ebe0:	682b      	ldr	r3, [r5, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d000      	beq.n	800ebe8 <_isatty_r+0x1c>
 800ebe6:	6023      	str	r3, [r4, #0]
 800ebe8:	bd70      	pop	{r4, r5, r6, pc}
 800ebea:	46c0      	nop			; (mov r8, r8)
 800ebec:	2000060c 	.word	0x2000060c

0800ebf0 <_lseek_r>:
 800ebf0:	b570      	push	{r4, r5, r6, lr}
 800ebf2:	0004      	movs	r4, r0
 800ebf4:	0008      	movs	r0, r1
 800ebf6:	0011      	movs	r1, r2
 800ebf8:	001a      	movs	r2, r3
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	4d05      	ldr	r5, [pc, #20]	; (800ec14 <_lseek_r+0x24>)
 800ebfe:	602b      	str	r3, [r5, #0]
 800ec00:	f7f4 fdec 	bl	80037dc <_lseek>
 800ec04:	1c43      	adds	r3, r0, #1
 800ec06:	d103      	bne.n	800ec10 <_lseek_r+0x20>
 800ec08:	682b      	ldr	r3, [r5, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d000      	beq.n	800ec10 <_lseek_r+0x20>
 800ec0e:	6023      	str	r3, [r4, #0]
 800ec10:	bd70      	pop	{r4, r5, r6, pc}
 800ec12:	46c0      	nop			; (mov r8, r8)
 800ec14:	2000060c 	.word	0x2000060c

0800ec18 <_malloc_usable_size_r>:
 800ec18:	1f0b      	subs	r3, r1, #4
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	1f18      	subs	r0, r3, #4
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	da01      	bge.n	800ec26 <_malloc_usable_size_r+0xe>
 800ec22:	580b      	ldr	r3, [r1, r0]
 800ec24:	18c0      	adds	r0, r0, r3
 800ec26:	4770      	bx	lr

0800ec28 <_read_r>:
 800ec28:	b570      	push	{r4, r5, r6, lr}
 800ec2a:	0004      	movs	r4, r0
 800ec2c:	0008      	movs	r0, r1
 800ec2e:	0011      	movs	r1, r2
 800ec30:	001a      	movs	r2, r3
 800ec32:	2300      	movs	r3, #0
 800ec34:	4d05      	ldr	r5, [pc, #20]	; (800ec4c <_read_r+0x24>)
 800ec36:	602b      	str	r3, [r5, #0]
 800ec38:	f7f4 fd76 	bl	8003728 <_read>
 800ec3c:	1c43      	adds	r3, r0, #1
 800ec3e:	d103      	bne.n	800ec48 <_read_r+0x20>
 800ec40:	682b      	ldr	r3, [r5, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d000      	beq.n	800ec48 <_read_r+0x20>
 800ec46:	6023      	str	r3, [r4, #0]
 800ec48:	bd70      	pop	{r4, r5, r6, pc}
 800ec4a:	46c0      	nop			; (mov r8, r8)
 800ec4c:	2000060c 	.word	0x2000060c

0800ec50 <_init>:
 800ec50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec52:	46c0      	nop			; (mov r8, r8)
 800ec54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec56:	bc08      	pop	{r3}
 800ec58:	469e      	mov	lr, r3
 800ec5a:	4770      	bx	lr

0800ec5c <_fini>:
 800ec5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec5e:	46c0      	nop			; (mov r8, r8)
 800ec60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec62:	bc08      	pop	{r3}
 800ec64:	469e      	mov	lr, r3
 800ec66:	4770      	bx	lr
