
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d664  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800d720  0800d720  0001d720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc80  0800dc80  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc80  0800dc80  0001dc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc88  0800dc88  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc88  0800dc88  0001dc88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc8c  0800dc8c  0001dc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800dc90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200001dc  0800de6c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  0800de6c  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021252  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000374f  00000000  00000000  00041456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  00044ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001458  00000000  00000000  00046158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004936  00000000  00000000  000475b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3e6  00000000  00000000  0004bee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca53d  00000000  00000000  000672cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131809  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006078  00000000  00000000  0013185c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001dc 	.word	0x200001dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d708 	.word	0x0800d708

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e0 	.word	0x200001e0
 8000100:	0800d708 	.word	0x0800d708

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f85b 	bl	80014f4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffa5 	bl	8001398 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f84d 	bl	80014f4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f843 	bl	80014f4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffc7 	bl	8001410 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ffbd 	bl	8001410 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	1c08      	adds	r0, r1, #0
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 ff74 	bl	80023f0 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 ff6f 	bl	80023f0 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_ui2f>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	1e05      	subs	r5, r0, #0
 8000680:	d00e      	beq.n	80006a0 <__aeabi_ui2f+0x24>
 8000682:	f001 fe97 	bl	80023b4 <__clzsi2>
 8000686:	239e      	movs	r3, #158	; 0x9e
 8000688:	0004      	movs	r4, r0
 800068a:	1a1b      	subs	r3, r3, r0
 800068c:	2b96      	cmp	r3, #150	; 0x96
 800068e:	dc0c      	bgt.n	80006aa <__aeabi_ui2f+0x2e>
 8000690:	2808      	cmp	r0, #8
 8000692:	dd01      	ble.n	8000698 <__aeabi_ui2f+0x1c>
 8000694:	3c08      	subs	r4, #8
 8000696:	40a5      	lsls	r5, r4
 8000698:	026d      	lsls	r5, r5, #9
 800069a:	0a6d      	lsrs	r5, r5, #9
 800069c:	b2d8      	uxtb	r0, r3
 800069e:	e001      	b.n	80006a4 <__aeabi_ui2f+0x28>
 80006a0:	2000      	movs	r0, #0
 80006a2:	2500      	movs	r5, #0
 80006a4:	05c0      	lsls	r0, r0, #23
 80006a6:	4328      	orrs	r0, r5
 80006a8:	bd70      	pop	{r4, r5, r6, pc}
 80006aa:	2b99      	cmp	r3, #153	; 0x99
 80006ac:	dd09      	ble.n	80006c2 <__aeabi_ui2f+0x46>
 80006ae:	0002      	movs	r2, r0
 80006b0:	0029      	movs	r1, r5
 80006b2:	321b      	adds	r2, #27
 80006b4:	4091      	lsls	r1, r2
 80006b6:	1e4a      	subs	r2, r1, #1
 80006b8:	4191      	sbcs	r1, r2
 80006ba:	2205      	movs	r2, #5
 80006bc:	1a12      	subs	r2, r2, r0
 80006be:	40d5      	lsrs	r5, r2
 80006c0:	430d      	orrs	r5, r1
 80006c2:	2c05      	cmp	r4, #5
 80006c4:	dd01      	ble.n	80006ca <__aeabi_ui2f+0x4e>
 80006c6:	1f62      	subs	r2, r4, #5
 80006c8:	4095      	lsls	r5, r2
 80006ca:	0029      	movs	r1, r5
 80006cc:	4e08      	ldr	r6, [pc, #32]	; (80006f0 <__aeabi_ui2f+0x74>)
 80006ce:	4031      	ands	r1, r6
 80006d0:	076a      	lsls	r2, r5, #29
 80006d2:	d009      	beq.n	80006e8 <__aeabi_ui2f+0x6c>
 80006d4:	200f      	movs	r0, #15
 80006d6:	4028      	ands	r0, r5
 80006d8:	2804      	cmp	r0, #4
 80006da:	d005      	beq.n	80006e8 <__aeabi_ui2f+0x6c>
 80006dc:	3104      	adds	r1, #4
 80006de:	014a      	lsls	r2, r1, #5
 80006e0:	d502      	bpl.n	80006e8 <__aeabi_ui2f+0x6c>
 80006e2:	239f      	movs	r3, #159	; 0x9f
 80006e4:	4031      	ands	r1, r6
 80006e6:	1b1b      	subs	r3, r3, r4
 80006e8:	0189      	lsls	r1, r1, #6
 80006ea:	0a4d      	lsrs	r5, r1, #9
 80006ec:	b2d8      	uxtb	r0, r3
 80006ee:	e7d9      	b.n	80006a4 <__aeabi_ui2f+0x28>
 80006f0:	fbffffff 	.word	0xfbffffff

080006f4 <__aeabi_dadd>:
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	464f      	mov	r7, r9
 80006f8:	46d6      	mov	lr, sl
 80006fa:	4646      	mov	r6, r8
 80006fc:	000d      	movs	r5, r1
 80006fe:	0001      	movs	r1, r0
 8000700:	0018      	movs	r0, r3
 8000702:	b5c0      	push	{r6, r7, lr}
 8000704:	0017      	movs	r7, r2
 8000706:	032b      	lsls	r3, r5, #12
 8000708:	0a5a      	lsrs	r2, r3, #9
 800070a:	0f4b      	lsrs	r3, r1, #29
 800070c:	4313      	orrs	r3, r2
 800070e:	00ca      	lsls	r2, r1, #3
 8000710:	4691      	mov	r9, r2
 8000712:	0302      	lsls	r2, r0, #12
 8000714:	006e      	lsls	r6, r5, #1
 8000716:	0041      	lsls	r1, r0, #1
 8000718:	0a52      	lsrs	r2, r2, #9
 800071a:	0fec      	lsrs	r4, r5, #31
 800071c:	0f7d      	lsrs	r5, r7, #29
 800071e:	4315      	orrs	r5, r2
 8000720:	0d76      	lsrs	r6, r6, #21
 8000722:	0d49      	lsrs	r1, r1, #21
 8000724:	0fc0      	lsrs	r0, r0, #31
 8000726:	4682      	mov	sl, r0
 8000728:	46ac      	mov	ip, r5
 800072a:	00ff      	lsls	r7, r7, #3
 800072c:	1a72      	subs	r2, r6, r1
 800072e:	4284      	cmp	r4, r0
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0x40>
 8000732:	e098      	b.n	8000866 <__aeabi_dadd+0x172>
 8000734:	2a00      	cmp	r2, #0
 8000736:	dc00      	bgt.n	800073a <__aeabi_dadd+0x46>
 8000738:	e081      	b.n	800083e <__aeabi_dadd+0x14a>
 800073a:	2900      	cmp	r1, #0
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x4c>
 800073e:	e0b6      	b.n	80008ae <__aeabi_dadd+0x1ba>
 8000740:	49c9      	ldr	r1, [pc, #804]	; (8000a68 <__aeabi_dadd+0x374>)
 8000742:	428e      	cmp	r6, r1
 8000744:	d100      	bne.n	8000748 <__aeabi_dadd+0x54>
 8000746:	e172      	b.n	8000a2e <__aeabi_dadd+0x33a>
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	0028      	movs	r0, r5
 800074c:	0409      	lsls	r1, r1, #16
 800074e:	4308      	orrs	r0, r1
 8000750:	4684      	mov	ip, r0
 8000752:	2a38      	cmp	r2, #56	; 0x38
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0x64>
 8000756:	e15e      	b.n	8000a16 <__aeabi_dadd+0x322>
 8000758:	2a1f      	cmp	r2, #31
 800075a:	dd00      	ble.n	800075e <__aeabi_dadd+0x6a>
 800075c:	e1ee      	b.n	8000b3c <__aeabi_dadd+0x448>
 800075e:	2020      	movs	r0, #32
 8000760:	0039      	movs	r1, r7
 8000762:	4665      	mov	r5, ip
 8000764:	1a80      	subs	r0, r0, r2
 8000766:	4087      	lsls	r7, r0
 8000768:	40d1      	lsrs	r1, r2
 800076a:	4085      	lsls	r5, r0
 800076c:	430d      	orrs	r5, r1
 800076e:	0039      	movs	r1, r7
 8000770:	1e4f      	subs	r7, r1, #1
 8000772:	41b9      	sbcs	r1, r7
 8000774:	4667      	mov	r7, ip
 8000776:	40d7      	lsrs	r7, r2
 8000778:	4329      	orrs	r1, r5
 800077a:	1bdb      	subs	r3, r3, r7
 800077c:	464a      	mov	r2, r9
 800077e:	1a55      	subs	r5, r2, r1
 8000780:	45a9      	cmp	r9, r5
 8000782:	4189      	sbcs	r1, r1
 8000784:	4249      	negs	r1, r1
 8000786:	1a5b      	subs	r3, r3, r1
 8000788:	4698      	mov	r8, r3
 800078a:	4643      	mov	r3, r8
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	d400      	bmi.n	8000792 <__aeabi_dadd+0x9e>
 8000790:	e0cc      	b.n	800092c <__aeabi_dadd+0x238>
 8000792:	4643      	mov	r3, r8
 8000794:	025b      	lsls	r3, r3, #9
 8000796:	0a5b      	lsrs	r3, r3, #9
 8000798:	4698      	mov	r8, r3
 800079a:	4643      	mov	r3, r8
 800079c:	2b00      	cmp	r3, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0xae>
 80007a0:	e12c      	b.n	80009fc <__aeabi_dadd+0x308>
 80007a2:	4640      	mov	r0, r8
 80007a4:	f001 fe06 	bl	80023b4 <__clzsi2>
 80007a8:	0001      	movs	r1, r0
 80007aa:	3908      	subs	r1, #8
 80007ac:	2220      	movs	r2, #32
 80007ae:	0028      	movs	r0, r5
 80007b0:	4643      	mov	r3, r8
 80007b2:	1a52      	subs	r2, r2, r1
 80007b4:	408b      	lsls	r3, r1
 80007b6:	40d0      	lsrs	r0, r2
 80007b8:	408d      	lsls	r5, r1
 80007ba:	4303      	orrs	r3, r0
 80007bc:	428e      	cmp	r6, r1
 80007be:	dd00      	ble.n	80007c2 <__aeabi_dadd+0xce>
 80007c0:	e117      	b.n	80009f2 <__aeabi_dadd+0x2fe>
 80007c2:	1b8e      	subs	r6, r1, r6
 80007c4:	1c72      	adds	r2, r6, #1
 80007c6:	2a1f      	cmp	r2, #31
 80007c8:	dd00      	ble.n	80007cc <__aeabi_dadd+0xd8>
 80007ca:	e1a7      	b.n	8000b1c <__aeabi_dadd+0x428>
 80007cc:	2120      	movs	r1, #32
 80007ce:	0018      	movs	r0, r3
 80007d0:	002e      	movs	r6, r5
 80007d2:	1a89      	subs	r1, r1, r2
 80007d4:	408d      	lsls	r5, r1
 80007d6:	4088      	lsls	r0, r1
 80007d8:	40d6      	lsrs	r6, r2
 80007da:	40d3      	lsrs	r3, r2
 80007dc:	1e69      	subs	r1, r5, #1
 80007de:	418d      	sbcs	r5, r1
 80007e0:	4330      	orrs	r0, r6
 80007e2:	4698      	mov	r8, r3
 80007e4:	2600      	movs	r6, #0
 80007e6:	4305      	orrs	r5, r0
 80007e8:	076b      	lsls	r3, r5, #29
 80007ea:	d009      	beq.n	8000800 <__aeabi_dadd+0x10c>
 80007ec:	230f      	movs	r3, #15
 80007ee:	402b      	ands	r3, r5
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d005      	beq.n	8000800 <__aeabi_dadd+0x10c>
 80007f4:	1d2b      	adds	r3, r5, #4
 80007f6:	42ab      	cmp	r3, r5
 80007f8:	41ad      	sbcs	r5, r5
 80007fa:	426d      	negs	r5, r5
 80007fc:	44a8      	add	r8, r5
 80007fe:	001d      	movs	r5, r3
 8000800:	4643      	mov	r3, r8
 8000802:	021b      	lsls	r3, r3, #8
 8000804:	d400      	bmi.n	8000808 <__aeabi_dadd+0x114>
 8000806:	e094      	b.n	8000932 <__aeabi_dadd+0x23e>
 8000808:	4b97      	ldr	r3, [pc, #604]	; (8000a68 <__aeabi_dadd+0x374>)
 800080a:	1c72      	adds	r2, r6, #1
 800080c:	429a      	cmp	r2, r3
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x11e>
 8000810:	e09d      	b.n	800094e <__aeabi_dadd+0x25a>
 8000812:	4641      	mov	r1, r8
 8000814:	4b95      	ldr	r3, [pc, #596]	; (8000a6c <__aeabi_dadd+0x378>)
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	4019      	ands	r1, r3
 800081a:	000b      	movs	r3, r1
 800081c:	0552      	lsls	r2, r2, #21
 800081e:	0749      	lsls	r1, r1, #29
 8000820:	025b      	lsls	r3, r3, #9
 8000822:	4329      	orrs	r1, r5
 8000824:	0b1b      	lsrs	r3, r3, #12
 8000826:	0d52      	lsrs	r2, r2, #21
 8000828:	0512      	lsls	r2, r2, #20
 800082a:	4313      	orrs	r3, r2
 800082c:	07e4      	lsls	r4, r4, #31
 800082e:	4323      	orrs	r3, r4
 8000830:	0008      	movs	r0, r1
 8000832:	0019      	movs	r1, r3
 8000834:	bce0      	pop	{r5, r6, r7}
 8000836:	46ba      	mov	sl, r7
 8000838:	46b1      	mov	r9, r6
 800083a:	46a8      	mov	r8, r5
 800083c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083e:	2a00      	cmp	r2, #0
 8000840:	d043      	beq.n	80008ca <__aeabi_dadd+0x1d6>
 8000842:	1b8a      	subs	r2, r1, r6
 8000844:	2e00      	cmp	r6, #0
 8000846:	d000      	beq.n	800084a <__aeabi_dadd+0x156>
 8000848:	e12a      	b.n	8000aa0 <__aeabi_dadd+0x3ac>
 800084a:	464c      	mov	r4, r9
 800084c:	431c      	orrs	r4, r3
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x15e>
 8000850:	e1d1      	b.n	8000bf6 <__aeabi_dadd+0x502>
 8000852:	1e54      	subs	r4, r2, #1
 8000854:	2a01      	cmp	r2, #1
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x166>
 8000858:	e21f      	b.n	8000c9a <__aeabi_dadd+0x5a6>
 800085a:	4d83      	ldr	r5, [pc, #524]	; (8000a68 <__aeabi_dadd+0x374>)
 800085c:	42aa      	cmp	r2, r5
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x16e>
 8000860:	e272      	b.n	8000d48 <__aeabi_dadd+0x654>
 8000862:	0022      	movs	r2, r4
 8000864:	e123      	b.n	8000aae <__aeabi_dadd+0x3ba>
 8000866:	2a00      	cmp	r2, #0
 8000868:	dc00      	bgt.n	800086c <__aeabi_dadd+0x178>
 800086a:	e098      	b.n	800099e <__aeabi_dadd+0x2aa>
 800086c:	2900      	cmp	r1, #0
 800086e:	d042      	beq.n	80008f6 <__aeabi_dadd+0x202>
 8000870:	497d      	ldr	r1, [pc, #500]	; (8000a68 <__aeabi_dadd+0x374>)
 8000872:	428e      	cmp	r6, r1
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x184>
 8000876:	e0da      	b.n	8000a2e <__aeabi_dadd+0x33a>
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0028      	movs	r0, r5
 800087c:	0409      	lsls	r1, r1, #16
 800087e:	4308      	orrs	r0, r1
 8000880:	4684      	mov	ip, r0
 8000882:	2a38      	cmp	r2, #56	; 0x38
 8000884:	dd00      	ble.n	8000888 <__aeabi_dadd+0x194>
 8000886:	e129      	b.n	8000adc <__aeabi_dadd+0x3e8>
 8000888:	2a1f      	cmp	r2, #31
 800088a:	dc00      	bgt.n	800088e <__aeabi_dadd+0x19a>
 800088c:	e187      	b.n	8000b9e <__aeabi_dadd+0x4aa>
 800088e:	0011      	movs	r1, r2
 8000890:	4665      	mov	r5, ip
 8000892:	3920      	subs	r1, #32
 8000894:	40cd      	lsrs	r5, r1
 8000896:	2a20      	cmp	r2, #32
 8000898:	d004      	beq.n	80008a4 <__aeabi_dadd+0x1b0>
 800089a:	2040      	movs	r0, #64	; 0x40
 800089c:	4661      	mov	r1, ip
 800089e:	1a82      	subs	r2, r0, r2
 80008a0:	4091      	lsls	r1, r2
 80008a2:	430f      	orrs	r7, r1
 80008a4:	0039      	movs	r1, r7
 80008a6:	1e4f      	subs	r7, r1, #1
 80008a8:	41b9      	sbcs	r1, r7
 80008aa:	430d      	orrs	r5, r1
 80008ac:	e11b      	b.n	8000ae6 <__aeabi_dadd+0x3f2>
 80008ae:	0029      	movs	r1, r5
 80008b0:	4339      	orrs	r1, r7
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dadd+0x1c2>
 80008b4:	e0b5      	b.n	8000a22 <__aeabi_dadd+0x32e>
 80008b6:	1e51      	subs	r1, r2, #1
 80008b8:	2a01      	cmp	r2, #1
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x1ca>
 80008bc:	e1ab      	b.n	8000c16 <__aeabi_dadd+0x522>
 80008be:	486a      	ldr	r0, [pc, #424]	; (8000a68 <__aeabi_dadd+0x374>)
 80008c0:	4282      	cmp	r2, r0
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dadd+0x1d2>
 80008c4:	e1b2      	b.n	8000c2c <__aeabi_dadd+0x538>
 80008c6:	000a      	movs	r2, r1
 80008c8:	e743      	b.n	8000752 <__aeabi_dadd+0x5e>
 80008ca:	4969      	ldr	r1, [pc, #420]	; (8000a70 <__aeabi_dadd+0x37c>)
 80008cc:	1c75      	adds	r5, r6, #1
 80008ce:	420d      	tst	r5, r1
 80008d0:	d000      	beq.n	80008d4 <__aeabi_dadd+0x1e0>
 80008d2:	e0cf      	b.n	8000a74 <__aeabi_dadd+0x380>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x1e6>
 80008d8:	e193      	b.n	8000c02 <__aeabi_dadd+0x50e>
 80008da:	4649      	mov	r1, r9
 80008dc:	4319      	orrs	r1, r3
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x1ee>
 80008e0:	e1d1      	b.n	8000c86 <__aeabi_dadd+0x592>
 80008e2:	4661      	mov	r1, ip
 80008e4:	4339      	orrs	r1, r7
 80008e6:	d000      	beq.n	80008ea <__aeabi_dadd+0x1f6>
 80008e8:	e1e3      	b.n	8000cb2 <__aeabi_dadd+0x5be>
 80008ea:	4649      	mov	r1, r9
 80008ec:	0758      	lsls	r0, r3, #29
 80008ee:	08c9      	lsrs	r1, r1, #3
 80008f0:	4301      	orrs	r1, r0
 80008f2:	08db      	lsrs	r3, r3, #3
 80008f4:	e026      	b.n	8000944 <__aeabi_dadd+0x250>
 80008f6:	0029      	movs	r1, r5
 80008f8:	4339      	orrs	r1, r7
 80008fa:	d100      	bne.n	80008fe <__aeabi_dadd+0x20a>
 80008fc:	e091      	b.n	8000a22 <__aeabi_dadd+0x32e>
 80008fe:	1e51      	subs	r1, r2, #1
 8000900:	2a01      	cmp	r2, #1
 8000902:	d005      	beq.n	8000910 <__aeabi_dadd+0x21c>
 8000904:	4858      	ldr	r0, [pc, #352]	; (8000a68 <__aeabi_dadd+0x374>)
 8000906:	4282      	cmp	r2, r0
 8000908:	d100      	bne.n	800090c <__aeabi_dadd+0x218>
 800090a:	e18f      	b.n	8000c2c <__aeabi_dadd+0x538>
 800090c:	000a      	movs	r2, r1
 800090e:	e7b8      	b.n	8000882 <__aeabi_dadd+0x18e>
 8000910:	003d      	movs	r5, r7
 8000912:	444d      	add	r5, r9
 8000914:	454d      	cmp	r5, r9
 8000916:	4189      	sbcs	r1, r1
 8000918:	4463      	add	r3, ip
 800091a:	4698      	mov	r8, r3
 800091c:	4249      	negs	r1, r1
 800091e:	4488      	add	r8, r1
 8000920:	4643      	mov	r3, r8
 8000922:	2602      	movs	r6, #2
 8000924:	021b      	lsls	r3, r3, #8
 8000926:	d500      	bpl.n	800092a <__aeabi_dadd+0x236>
 8000928:	e0eb      	b.n	8000b02 <__aeabi_dadd+0x40e>
 800092a:	3e01      	subs	r6, #1
 800092c:	076b      	lsls	r3, r5, #29
 800092e:	d000      	beq.n	8000932 <__aeabi_dadd+0x23e>
 8000930:	e75c      	b.n	80007ec <__aeabi_dadd+0xf8>
 8000932:	4643      	mov	r3, r8
 8000934:	08e9      	lsrs	r1, r5, #3
 8000936:	075a      	lsls	r2, r3, #29
 8000938:	4311      	orrs	r1, r2
 800093a:	0032      	movs	r2, r6
 800093c:	08db      	lsrs	r3, r3, #3
 800093e:	484a      	ldr	r0, [pc, #296]	; (8000a68 <__aeabi_dadd+0x374>)
 8000940:	4282      	cmp	r2, r0
 8000942:	d021      	beq.n	8000988 <__aeabi_dadd+0x294>
 8000944:	031b      	lsls	r3, r3, #12
 8000946:	0552      	lsls	r2, r2, #21
 8000948:	0b1b      	lsrs	r3, r3, #12
 800094a:	0d52      	lsrs	r2, r2, #21
 800094c:	e76c      	b.n	8000828 <__aeabi_dadd+0x134>
 800094e:	2300      	movs	r3, #0
 8000950:	2100      	movs	r1, #0
 8000952:	e769      	b.n	8000828 <__aeabi_dadd+0x134>
 8000954:	002a      	movs	r2, r5
 8000956:	433a      	orrs	r2, r7
 8000958:	d069      	beq.n	8000a2e <__aeabi_dadd+0x33a>
 800095a:	464a      	mov	r2, r9
 800095c:	0758      	lsls	r0, r3, #29
 800095e:	08d1      	lsrs	r1, r2, #3
 8000960:	08da      	lsrs	r2, r3, #3
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	031b      	lsls	r3, r3, #12
 8000966:	4308      	orrs	r0, r1
 8000968:	421a      	tst	r2, r3
 800096a:	d007      	beq.n	800097c <__aeabi_dadd+0x288>
 800096c:	0029      	movs	r1, r5
 800096e:	08ed      	lsrs	r5, r5, #3
 8000970:	421d      	tst	r5, r3
 8000972:	d103      	bne.n	800097c <__aeabi_dadd+0x288>
 8000974:	002a      	movs	r2, r5
 8000976:	08ff      	lsrs	r7, r7, #3
 8000978:	0748      	lsls	r0, r1, #29
 800097a:	4338      	orrs	r0, r7
 800097c:	0f43      	lsrs	r3, r0, #29
 800097e:	00c1      	lsls	r1, r0, #3
 8000980:	075b      	lsls	r3, r3, #29
 8000982:	08c9      	lsrs	r1, r1, #3
 8000984:	4319      	orrs	r1, r3
 8000986:	0013      	movs	r3, r2
 8000988:	000a      	movs	r2, r1
 800098a:	431a      	orrs	r2, r3
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x29c>
 800098e:	e213      	b.n	8000db8 <__aeabi_dadd+0x6c4>
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	0312      	lsls	r2, r2, #12
 8000994:	4313      	orrs	r3, r2
 8000996:	031b      	lsls	r3, r3, #12
 8000998:	4a33      	ldr	r2, [pc, #204]	; (8000a68 <__aeabi_dadd+0x374>)
 800099a:	0b1b      	lsrs	r3, r3, #12
 800099c:	e744      	b.n	8000828 <__aeabi_dadd+0x134>
 800099e:	2a00      	cmp	r2, #0
 80009a0:	d04b      	beq.n	8000a3a <__aeabi_dadd+0x346>
 80009a2:	1b8a      	subs	r2, r1, r6
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_dadd+0x2b6>
 80009a8:	e0e7      	b.n	8000b7a <__aeabi_dadd+0x486>
 80009aa:	482f      	ldr	r0, [pc, #188]	; (8000a68 <__aeabi_dadd+0x374>)
 80009ac:	4281      	cmp	r1, r0
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x2be>
 80009b0:	e195      	b.n	8000cde <__aeabi_dadd+0x5ea>
 80009b2:	2080      	movs	r0, #128	; 0x80
 80009b4:	0400      	lsls	r0, r0, #16
 80009b6:	4303      	orrs	r3, r0
 80009b8:	2a38      	cmp	r2, #56	; 0x38
 80009ba:	dd00      	ble.n	80009be <__aeabi_dadd+0x2ca>
 80009bc:	e143      	b.n	8000c46 <__aeabi_dadd+0x552>
 80009be:	2a1f      	cmp	r2, #31
 80009c0:	dd00      	ble.n	80009c4 <__aeabi_dadd+0x2d0>
 80009c2:	e1db      	b.n	8000d7c <__aeabi_dadd+0x688>
 80009c4:	2020      	movs	r0, #32
 80009c6:	001d      	movs	r5, r3
 80009c8:	464e      	mov	r6, r9
 80009ca:	1a80      	subs	r0, r0, r2
 80009cc:	4085      	lsls	r5, r0
 80009ce:	40d6      	lsrs	r6, r2
 80009d0:	4335      	orrs	r5, r6
 80009d2:	464e      	mov	r6, r9
 80009d4:	4086      	lsls	r6, r0
 80009d6:	0030      	movs	r0, r6
 80009d8:	40d3      	lsrs	r3, r2
 80009da:	1e46      	subs	r6, r0, #1
 80009dc:	41b0      	sbcs	r0, r6
 80009de:	449c      	add	ip, r3
 80009e0:	4305      	orrs	r5, r0
 80009e2:	19ed      	adds	r5, r5, r7
 80009e4:	42bd      	cmp	r5, r7
 80009e6:	419b      	sbcs	r3, r3
 80009e8:	425b      	negs	r3, r3
 80009ea:	4463      	add	r3, ip
 80009ec:	4698      	mov	r8, r3
 80009ee:	000e      	movs	r6, r1
 80009f0:	e07f      	b.n	8000af2 <__aeabi_dadd+0x3fe>
 80009f2:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <__aeabi_dadd+0x378>)
 80009f4:	1a76      	subs	r6, r6, r1
 80009f6:	4013      	ands	r3, r2
 80009f8:	4698      	mov	r8, r3
 80009fa:	e6f5      	b.n	80007e8 <__aeabi_dadd+0xf4>
 80009fc:	0028      	movs	r0, r5
 80009fe:	f001 fcd9 	bl	80023b4 <__clzsi2>
 8000a02:	0001      	movs	r1, r0
 8000a04:	3118      	adds	r1, #24
 8000a06:	291f      	cmp	r1, #31
 8000a08:	dc00      	bgt.n	8000a0c <__aeabi_dadd+0x318>
 8000a0a:	e6cf      	b.n	80007ac <__aeabi_dadd+0xb8>
 8000a0c:	002b      	movs	r3, r5
 8000a0e:	3808      	subs	r0, #8
 8000a10:	4083      	lsls	r3, r0
 8000a12:	2500      	movs	r5, #0
 8000a14:	e6d2      	b.n	80007bc <__aeabi_dadd+0xc8>
 8000a16:	4662      	mov	r2, ip
 8000a18:	433a      	orrs	r2, r7
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	1e4f      	subs	r7, r1, #1
 8000a1e:	41b9      	sbcs	r1, r7
 8000a20:	e6ac      	b.n	800077c <__aeabi_dadd+0x88>
 8000a22:	4649      	mov	r1, r9
 8000a24:	0758      	lsls	r0, r3, #29
 8000a26:	08c9      	lsrs	r1, r1, #3
 8000a28:	4301      	orrs	r1, r0
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	e787      	b.n	800093e <__aeabi_dadd+0x24a>
 8000a2e:	4649      	mov	r1, r9
 8000a30:	075a      	lsls	r2, r3, #29
 8000a32:	08c9      	lsrs	r1, r1, #3
 8000a34:	4311      	orrs	r1, r2
 8000a36:	08db      	lsrs	r3, r3, #3
 8000a38:	e7a6      	b.n	8000988 <__aeabi_dadd+0x294>
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <__aeabi_dadd+0x37c>)
 8000a3c:	1c70      	adds	r0, r6, #1
 8000a3e:	4208      	tst	r0, r1
 8000a40:	d000      	beq.n	8000a44 <__aeabi_dadd+0x350>
 8000a42:	e0bb      	b.n	8000bbc <__aeabi_dadd+0x4c8>
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d000      	beq.n	8000a4a <__aeabi_dadd+0x356>
 8000a48:	e114      	b.n	8000c74 <__aeabi_dadd+0x580>
 8000a4a:	4649      	mov	r1, r9
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0x35e>
 8000a50:	e175      	b.n	8000d3e <__aeabi_dadd+0x64a>
 8000a52:	0029      	movs	r1, r5
 8000a54:	4339      	orrs	r1, r7
 8000a56:	d000      	beq.n	8000a5a <__aeabi_dadd+0x366>
 8000a58:	e17e      	b.n	8000d58 <__aeabi_dadd+0x664>
 8000a5a:	4649      	mov	r1, r9
 8000a5c:	0758      	lsls	r0, r3, #29
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	4301      	orrs	r1, r0
 8000a62:	08db      	lsrs	r3, r3, #3
 8000a64:	e76e      	b.n	8000944 <__aeabi_dadd+0x250>
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	000007ff 	.word	0x000007ff
 8000a6c:	ff7fffff 	.word	0xff7fffff
 8000a70:	000007fe 	.word	0x000007fe
 8000a74:	4649      	mov	r1, r9
 8000a76:	1bcd      	subs	r5, r1, r7
 8000a78:	4661      	mov	r1, ip
 8000a7a:	1a58      	subs	r0, r3, r1
 8000a7c:	45a9      	cmp	r9, r5
 8000a7e:	4189      	sbcs	r1, r1
 8000a80:	4249      	negs	r1, r1
 8000a82:	4688      	mov	r8, r1
 8000a84:	0001      	movs	r1, r0
 8000a86:	4640      	mov	r0, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	0209      	lsls	r1, r1, #8
 8000a8e:	d500      	bpl.n	8000a92 <__aeabi_dadd+0x39e>
 8000a90:	e0a6      	b.n	8000be0 <__aeabi_dadd+0x4ec>
 8000a92:	4641      	mov	r1, r8
 8000a94:	4329      	orrs	r1, r5
 8000a96:	d000      	beq.n	8000a9a <__aeabi_dadd+0x3a6>
 8000a98:	e67f      	b.n	800079a <__aeabi_dadd+0xa6>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	2400      	movs	r4, #0
 8000a9e:	e751      	b.n	8000944 <__aeabi_dadd+0x250>
 8000aa0:	4cc7      	ldr	r4, [pc, #796]	; (8000dc0 <__aeabi_dadd+0x6cc>)
 8000aa2:	42a1      	cmp	r1, r4
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dadd+0x3b4>
 8000aa6:	e0c7      	b.n	8000c38 <__aeabi_dadd+0x544>
 8000aa8:	2480      	movs	r4, #128	; 0x80
 8000aaa:	0424      	lsls	r4, r4, #16
 8000aac:	4323      	orrs	r3, r4
 8000aae:	2a38      	cmp	r2, #56	; 0x38
 8000ab0:	dc54      	bgt.n	8000b5c <__aeabi_dadd+0x468>
 8000ab2:	2a1f      	cmp	r2, #31
 8000ab4:	dd00      	ble.n	8000ab8 <__aeabi_dadd+0x3c4>
 8000ab6:	e0cc      	b.n	8000c52 <__aeabi_dadd+0x55e>
 8000ab8:	2420      	movs	r4, #32
 8000aba:	4648      	mov	r0, r9
 8000abc:	1aa4      	subs	r4, r4, r2
 8000abe:	001d      	movs	r5, r3
 8000ac0:	464e      	mov	r6, r9
 8000ac2:	40a0      	lsls	r0, r4
 8000ac4:	40d6      	lsrs	r6, r2
 8000ac6:	40a5      	lsls	r5, r4
 8000ac8:	0004      	movs	r4, r0
 8000aca:	40d3      	lsrs	r3, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	4335      	orrs	r5, r6
 8000ad0:	1e66      	subs	r6, r4, #1
 8000ad2:	41b4      	sbcs	r4, r6
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	469c      	mov	ip, r3
 8000ad8:	4325      	orrs	r5, r4
 8000ada:	e044      	b.n	8000b66 <__aeabi_dadd+0x472>
 8000adc:	4662      	mov	r2, ip
 8000ade:	433a      	orrs	r2, r7
 8000ae0:	0015      	movs	r5, r2
 8000ae2:	1e6f      	subs	r7, r5, #1
 8000ae4:	41bd      	sbcs	r5, r7
 8000ae6:	444d      	add	r5, r9
 8000ae8:	454d      	cmp	r5, r9
 8000aea:	4189      	sbcs	r1, r1
 8000aec:	4249      	negs	r1, r1
 8000aee:	4688      	mov	r8, r1
 8000af0:	4498      	add	r8, r3
 8000af2:	4643      	mov	r3, r8
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	d400      	bmi.n	8000afa <__aeabi_dadd+0x406>
 8000af8:	e718      	b.n	800092c <__aeabi_dadd+0x238>
 8000afa:	4bb1      	ldr	r3, [pc, #708]	; (8000dc0 <__aeabi_dadd+0x6cc>)
 8000afc:	3601      	adds	r6, #1
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d049      	beq.n	8000b96 <__aeabi_dadd+0x4a2>
 8000b02:	4642      	mov	r2, r8
 8000b04:	4baf      	ldr	r3, [pc, #700]	; (8000dc4 <__aeabi_dadd+0x6d0>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	401a      	ands	r2, r3
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	086a      	lsrs	r2, r5, #1
 8000b0e:	400d      	ands	r5, r1
 8000b10:	4315      	orrs	r5, r2
 8000b12:	07d9      	lsls	r1, r3, #31
 8000b14:	085b      	lsrs	r3, r3, #1
 8000b16:	4698      	mov	r8, r3
 8000b18:	430d      	orrs	r5, r1
 8000b1a:	e665      	b.n	80007e8 <__aeabi_dadd+0xf4>
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	3e1f      	subs	r6, #31
 8000b20:	40f0      	lsrs	r0, r6
 8000b22:	2a20      	cmp	r2, #32
 8000b24:	d003      	beq.n	8000b2e <__aeabi_dadd+0x43a>
 8000b26:	2140      	movs	r1, #64	; 0x40
 8000b28:	1a8a      	subs	r2, r1, r2
 8000b2a:	4093      	lsls	r3, r2
 8000b2c:	431d      	orrs	r5, r3
 8000b2e:	1e69      	subs	r1, r5, #1
 8000b30:	418d      	sbcs	r5, r1
 8000b32:	2300      	movs	r3, #0
 8000b34:	2600      	movs	r6, #0
 8000b36:	4698      	mov	r8, r3
 8000b38:	4305      	orrs	r5, r0
 8000b3a:	e6f7      	b.n	800092c <__aeabi_dadd+0x238>
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	4665      	mov	r5, ip
 8000b40:	3920      	subs	r1, #32
 8000b42:	40cd      	lsrs	r5, r1
 8000b44:	2a20      	cmp	r2, #32
 8000b46:	d004      	beq.n	8000b52 <__aeabi_dadd+0x45e>
 8000b48:	2040      	movs	r0, #64	; 0x40
 8000b4a:	4661      	mov	r1, ip
 8000b4c:	1a82      	subs	r2, r0, r2
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	430f      	orrs	r7, r1
 8000b52:	0039      	movs	r1, r7
 8000b54:	1e4f      	subs	r7, r1, #1
 8000b56:	41b9      	sbcs	r1, r7
 8000b58:	4329      	orrs	r1, r5
 8000b5a:	e60f      	b.n	800077c <__aeabi_dadd+0x88>
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	001d      	movs	r5, r3
 8000b62:	1e6b      	subs	r3, r5, #1
 8000b64:	419d      	sbcs	r5, r3
 8000b66:	1b7d      	subs	r5, r7, r5
 8000b68:	42af      	cmp	r7, r5
 8000b6a:	419b      	sbcs	r3, r3
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	425b      	negs	r3, r3
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	4698      	mov	r8, r3
 8000b74:	4654      	mov	r4, sl
 8000b76:	000e      	movs	r6, r1
 8000b78:	e607      	b.n	800078a <__aeabi_dadd+0x96>
 8000b7a:	4648      	mov	r0, r9
 8000b7c:	4318      	orrs	r0, r3
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dadd+0x48e>
 8000b80:	e0b3      	b.n	8000cea <__aeabi_dadd+0x5f6>
 8000b82:	1e50      	subs	r0, r2, #1
 8000b84:	2a01      	cmp	r2, #1
 8000b86:	d100      	bne.n	8000b8a <__aeabi_dadd+0x496>
 8000b88:	e10d      	b.n	8000da6 <__aeabi_dadd+0x6b2>
 8000b8a:	4d8d      	ldr	r5, [pc, #564]	; (8000dc0 <__aeabi_dadd+0x6cc>)
 8000b8c:	42aa      	cmp	r2, r5
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x49e>
 8000b90:	e0a5      	b.n	8000cde <__aeabi_dadd+0x5ea>
 8000b92:	0002      	movs	r2, r0
 8000b94:	e710      	b.n	80009b8 <__aeabi_dadd+0x2c4>
 8000b96:	0032      	movs	r2, r6
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	e644      	b.n	8000828 <__aeabi_dadd+0x134>
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	0038      	movs	r0, r7
 8000ba2:	1a89      	subs	r1, r1, r2
 8000ba4:	4665      	mov	r5, ip
 8000ba6:	408f      	lsls	r7, r1
 8000ba8:	408d      	lsls	r5, r1
 8000baa:	40d0      	lsrs	r0, r2
 8000bac:	1e79      	subs	r1, r7, #1
 8000bae:	418f      	sbcs	r7, r1
 8000bb0:	4305      	orrs	r5, r0
 8000bb2:	433d      	orrs	r5, r7
 8000bb4:	4667      	mov	r7, ip
 8000bb6:	40d7      	lsrs	r7, r2
 8000bb8:	19db      	adds	r3, r3, r7
 8000bba:	e794      	b.n	8000ae6 <__aeabi_dadd+0x3f2>
 8000bbc:	4a80      	ldr	r2, [pc, #512]	; (8000dc0 <__aeabi_dadd+0x6cc>)
 8000bbe:	4290      	cmp	r0, r2
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x4d0>
 8000bc2:	e0ec      	b.n	8000d9e <__aeabi_dadd+0x6aa>
 8000bc4:	0039      	movs	r1, r7
 8000bc6:	4449      	add	r1, r9
 8000bc8:	4549      	cmp	r1, r9
 8000bca:	4192      	sbcs	r2, r2
 8000bcc:	4463      	add	r3, ip
 8000bce:	4252      	negs	r2, r2
 8000bd0:	189b      	adds	r3, r3, r2
 8000bd2:	07dd      	lsls	r5, r3, #31
 8000bd4:	0849      	lsrs	r1, r1, #1
 8000bd6:	085b      	lsrs	r3, r3, #1
 8000bd8:	4698      	mov	r8, r3
 8000bda:	0006      	movs	r6, r0
 8000bdc:	430d      	orrs	r5, r1
 8000bde:	e6a5      	b.n	800092c <__aeabi_dadd+0x238>
 8000be0:	464a      	mov	r2, r9
 8000be2:	1abd      	subs	r5, r7, r2
 8000be4:	42af      	cmp	r7, r5
 8000be6:	4189      	sbcs	r1, r1
 8000be8:	4662      	mov	r2, ip
 8000bea:	4249      	negs	r1, r1
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	1a5b      	subs	r3, r3, r1
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	4654      	mov	r4, sl
 8000bf4:	e5d1      	b.n	800079a <__aeabi_dadd+0xa6>
 8000bf6:	076c      	lsls	r4, r5, #29
 8000bf8:	08f9      	lsrs	r1, r7, #3
 8000bfa:	4321      	orrs	r1, r4
 8000bfc:	08eb      	lsrs	r3, r5, #3
 8000bfe:	0004      	movs	r4, r0
 8000c00:	e69d      	b.n	800093e <__aeabi_dadd+0x24a>
 8000c02:	464a      	mov	r2, r9
 8000c04:	431a      	orrs	r2, r3
 8000c06:	d175      	bne.n	8000cf4 <__aeabi_dadd+0x600>
 8000c08:	4661      	mov	r1, ip
 8000c0a:	4339      	orrs	r1, r7
 8000c0c:	d114      	bne.n	8000c38 <__aeabi_dadd+0x544>
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	2400      	movs	r4, #0
 8000c12:	031b      	lsls	r3, r3, #12
 8000c14:	e6bc      	b.n	8000990 <__aeabi_dadd+0x29c>
 8000c16:	464a      	mov	r2, r9
 8000c18:	1bd5      	subs	r5, r2, r7
 8000c1a:	45a9      	cmp	r9, r5
 8000c1c:	4189      	sbcs	r1, r1
 8000c1e:	4662      	mov	r2, ip
 8000c20:	4249      	negs	r1, r1
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	4698      	mov	r8, r3
 8000c28:	2601      	movs	r6, #1
 8000c2a:	e5ae      	b.n	800078a <__aeabi_dadd+0x96>
 8000c2c:	464a      	mov	r2, r9
 8000c2e:	08d1      	lsrs	r1, r2, #3
 8000c30:	075a      	lsls	r2, r3, #29
 8000c32:	4311      	orrs	r1, r2
 8000c34:	08db      	lsrs	r3, r3, #3
 8000c36:	e6a7      	b.n	8000988 <__aeabi_dadd+0x294>
 8000c38:	4663      	mov	r3, ip
 8000c3a:	08f9      	lsrs	r1, r7, #3
 8000c3c:	075a      	lsls	r2, r3, #29
 8000c3e:	4654      	mov	r4, sl
 8000c40:	4311      	orrs	r1, r2
 8000c42:	08db      	lsrs	r3, r3, #3
 8000c44:	e6a0      	b.n	8000988 <__aeabi_dadd+0x294>
 8000c46:	464a      	mov	r2, r9
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	001d      	movs	r5, r3
 8000c4c:	1e6b      	subs	r3, r5, #1
 8000c4e:	419d      	sbcs	r5, r3
 8000c50:	e6c7      	b.n	80009e2 <__aeabi_dadd+0x2ee>
 8000c52:	0014      	movs	r4, r2
 8000c54:	001e      	movs	r6, r3
 8000c56:	3c20      	subs	r4, #32
 8000c58:	40e6      	lsrs	r6, r4
 8000c5a:	2a20      	cmp	r2, #32
 8000c5c:	d005      	beq.n	8000c6a <__aeabi_dadd+0x576>
 8000c5e:	2440      	movs	r4, #64	; 0x40
 8000c60:	1aa2      	subs	r2, r4, r2
 8000c62:	4093      	lsls	r3, r2
 8000c64:	464a      	mov	r2, r9
 8000c66:	431a      	orrs	r2, r3
 8000c68:	4691      	mov	r9, r2
 8000c6a:	464d      	mov	r5, r9
 8000c6c:	1e6b      	subs	r3, r5, #1
 8000c6e:	419d      	sbcs	r5, r3
 8000c70:	4335      	orrs	r5, r6
 8000c72:	e778      	b.n	8000b66 <__aeabi_dadd+0x472>
 8000c74:	464a      	mov	r2, r9
 8000c76:	431a      	orrs	r2, r3
 8000c78:	d000      	beq.n	8000c7c <__aeabi_dadd+0x588>
 8000c7a:	e66b      	b.n	8000954 <__aeabi_dadd+0x260>
 8000c7c:	076b      	lsls	r3, r5, #29
 8000c7e:	08f9      	lsrs	r1, r7, #3
 8000c80:	4319      	orrs	r1, r3
 8000c82:	08eb      	lsrs	r3, r5, #3
 8000c84:	e680      	b.n	8000988 <__aeabi_dadd+0x294>
 8000c86:	4661      	mov	r1, ip
 8000c88:	4339      	orrs	r1, r7
 8000c8a:	d054      	beq.n	8000d36 <__aeabi_dadd+0x642>
 8000c8c:	4663      	mov	r3, ip
 8000c8e:	08f9      	lsrs	r1, r7, #3
 8000c90:	075c      	lsls	r4, r3, #29
 8000c92:	4321      	orrs	r1, r4
 8000c94:	08db      	lsrs	r3, r3, #3
 8000c96:	0004      	movs	r4, r0
 8000c98:	e654      	b.n	8000944 <__aeabi_dadd+0x250>
 8000c9a:	464a      	mov	r2, r9
 8000c9c:	1abd      	subs	r5, r7, r2
 8000c9e:	42af      	cmp	r7, r5
 8000ca0:	4189      	sbcs	r1, r1
 8000ca2:	4662      	mov	r2, ip
 8000ca4:	4249      	negs	r1, r1
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	4698      	mov	r8, r3
 8000cac:	0004      	movs	r4, r0
 8000cae:	2601      	movs	r6, #1
 8000cb0:	e56b      	b.n	800078a <__aeabi_dadd+0x96>
 8000cb2:	464a      	mov	r2, r9
 8000cb4:	1bd5      	subs	r5, r2, r7
 8000cb6:	45a9      	cmp	r9, r5
 8000cb8:	4189      	sbcs	r1, r1
 8000cba:	4662      	mov	r2, ip
 8000cbc:	4249      	negs	r1, r1
 8000cbe:	1a9a      	subs	r2, r3, r2
 8000cc0:	1a52      	subs	r2, r2, r1
 8000cc2:	4690      	mov	r8, r2
 8000cc4:	0212      	lsls	r2, r2, #8
 8000cc6:	d532      	bpl.n	8000d2e <__aeabi_dadd+0x63a>
 8000cc8:	464a      	mov	r2, r9
 8000cca:	1abd      	subs	r5, r7, r2
 8000ccc:	42af      	cmp	r7, r5
 8000cce:	4189      	sbcs	r1, r1
 8000cd0:	4662      	mov	r2, ip
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	1a5b      	subs	r3, r3, r1
 8000cd8:	4698      	mov	r8, r3
 8000cda:	0004      	movs	r4, r0
 8000cdc:	e584      	b.n	80007e8 <__aeabi_dadd+0xf4>
 8000cde:	4663      	mov	r3, ip
 8000ce0:	08f9      	lsrs	r1, r7, #3
 8000ce2:	075a      	lsls	r2, r3, #29
 8000ce4:	4311      	orrs	r1, r2
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	e64e      	b.n	8000988 <__aeabi_dadd+0x294>
 8000cea:	08f9      	lsrs	r1, r7, #3
 8000cec:	0768      	lsls	r0, r5, #29
 8000cee:	4301      	orrs	r1, r0
 8000cf0:	08eb      	lsrs	r3, r5, #3
 8000cf2:	e624      	b.n	800093e <__aeabi_dadd+0x24a>
 8000cf4:	4662      	mov	r2, ip
 8000cf6:	433a      	orrs	r2, r7
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dadd+0x608>
 8000cfa:	e698      	b.n	8000a2e <__aeabi_dadd+0x33a>
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	08d1      	lsrs	r1, r2, #3
 8000d00:	075a      	lsls	r2, r3, #29
 8000d02:	4311      	orrs	r1, r2
 8000d04:	08da      	lsrs	r2, r3, #3
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	031b      	lsls	r3, r3, #12
 8000d0a:	421a      	tst	r2, r3
 8000d0c:	d008      	beq.n	8000d20 <__aeabi_dadd+0x62c>
 8000d0e:	4660      	mov	r0, ip
 8000d10:	08c5      	lsrs	r5, r0, #3
 8000d12:	421d      	tst	r5, r3
 8000d14:	d104      	bne.n	8000d20 <__aeabi_dadd+0x62c>
 8000d16:	4654      	mov	r4, sl
 8000d18:	002a      	movs	r2, r5
 8000d1a:	08f9      	lsrs	r1, r7, #3
 8000d1c:	0743      	lsls	r3, r0, #29
 8000d1e:	4319      	orrs	r1, r3
 8000d20:	0f4b      	lsrs	r3, r1, #29
 8000d22:	00c9      	lsls	r1, r1, #3
 8000d24:	075b      	lsls	r3, r3, #29
 8000d26:	08c9      	lsrs	r1, r1, #3
 8000d28:	4319      	orrs	r1, r3
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	e62c      	b.n	8000988 <__aeabi_dadd+0x294>
 8000d2e:	4641      	mov	r1, r8
 8000d30:	4329      	orrs	r1, r5
 8000d32:	d000      	beq.n	8000d36 <__aeabi_dadd+0x642>
 8000d34:	e5fa      	b.n	800092c <__aeabi_dadd+0x238>
 8000d36:	2300      	movs	r3, #0
 8000d38:	000a      	movs	r2, r1
 8000d3a:	2400      	movs	r4, #0
 8000d3c:	e602      	b.n	8000944 <__aeabi_dadd+0x250>
 8000d3e:	076b      	lsls	r3, r5, #29
 8000d40:	08f9      	lsrs	r1, r7, #3
 8000d42:	4319      	orrs	r1, r3
 8000d44:	08eb      	lsrs	r3, r5, #3
 8000d46:	e5fd      	b.n	8000944 <__aeabi_dadd+0x250>
 8000d48:	4663      	mov	r3, ip
 8000d4a:	08f9      	lsrs	r1, r7, #3
 8000d4c:	075b      	lsls	r3, r3, #29
 8000d4e:	4319      	orrs	r1, r3
 8000d50:	4663      	mov	r3, ip
 8000d52:	0004      	movs	r4, r0
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	e617      	b.n	8000988 <__aeabi_dadd+0x294>
 8000d58:	003d      	movs	r5, r7
 8000d5a:	444d      	add	r5, r9
 8000d5c:	4463      	add	r3, ip
 8000d5e:	454d      	cmp	r5, r9
 8000d60:	4189      	sbcs	r1, r1
 8000d62:	4698      	mov	r8, r3
 8000d64:	4249      	negs	r1, r1
 8000d66:	4488      	add	r8, r1
 8000d68:	4643      	mov	r3, r8
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	d400      	bmi.n	8000d70 <__aeabi_dadd+0x67c>
 8000d6e:	e5dd      	b.n	800092c <__aeabi_dadd+0x238>
 8000d70:	4642      	mov	r2, r8
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <__aeabi_dadd+0x6d0>)
 8000d74:	2601      	movs	r6, #1
 8000d76:	401a      	ands	r2, r3
 8000d78:	4690      	mov	r8, r2
 8000d7a:	e5d7      	b.n	800092c <__aeabi_dadd+0x238>
 8000d7c:	0010      	movs	r0, r2
 8000d7e:	001e      	movs	r6, r3
 8000d80:	3820      	subs	r0, #32
 8000d82:	40c6      	lsrs	r6, r0
 8000d84:	2a20      	cmp	r2, #32
 8000d86:	d005      	beq.n	8000d94 <__aeabi_dadd+0x6a0>
 8000d88:	2040      	movs	r0, #64	; 0x40
 8000d8a:	1a82      	subs	r2, r0, r2
 8000d8c:	4093      	lsls	r3, r2
 8000d8e:	464a      	mov	r2, r9
 8000d90:	431a      	orrs	r2, r3
 8000d92:	4691      	mov	r9, r2
 8000d94:	464d      	mov	r5, r9
 8000d96:	1e6b      	subs	r3, r5, #1
 8000d98:	419d      	sbcs	r5, r3
 8000d9a:	4335      	orrs	r5, r6
 8000d9c:	e621      	b.n	80009e2 <__aeabi_dadd+0x2ee>
 8000d9e:	0002      	movs	r2, r0
 8000da0:	2300      	movs	r3, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	e540      	b.n	8000828 <__aeabi_dadd+0x134>
 8000da6:	464a      	mov	r2, r9
 8000da8:	19d5      	adds	r5, r2, r7
 8000daa:	42bd      	cmp	r5, r7
 8000dac:	4189      	sbcs	r1, r1
 8000dae:	4463      	add	r3, ip
 8000db0:	4698      	mov	r8, r3
 8000db2:	4249      	negs	r1, r1
 8000db4:	4488      	add	r8, r1
 8000db6:	e5b3      	b.n	8000920 <__aeabi_dadd+0x22c>
 8000db8:	2100      	movs	r1, #0
 8000dba:	4a01      	ldr	r2, [pc, #4]	; (8000dc0 <__aeabi_dadd+0x6cc>)
 8000dbc:	000b      	movs	r3, r1
 8000dbe:	e533      	b.n	8000828 <__aeabi_dadd+0x134>
 8000dc0:	000007ff 	.word	0x000007ff
 8000dc4:	ff7fffff 	.word	0xff7fffff

08000dc8 <__aeabi_ddiv>:
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dca:	4657      	mov	r7, sl
 8000dcc:	464e      	mov	r6, r9
 8000dce:	4645      	mov	r5, r8
 8000dd0:	46de      	mov	lr, fp
 8000dd2:	b5e0      	push	{r5, r6, r7, lr}
 8000dd4:	4681      	mov	r9, r0
 8000dd6:	0005      	movs	r5, r0
 8000dd8:	030c      	lsls	r4, r1, #12
 8000dda:	0048      	lsls	r0, r1, #1
 8000ddc:	4692      	mov	sl, r2
 8000dde:	001f      	movs	r7, r3
 8000de0:	b085      	sub	sp, #20
 8000de2:	0b24      	lsrs	r4, r4, #12
 8000de4:	0d40      	lsrs	r0, r0, #21
 8000de6:	0fce      	lsrs	r6, r1, #31
 8000de8:	2800      	cmp	r0, #0
 8000dea:	d059      	beq.n	8000ea0 <__aeabi_ddiv+0xd8>
 8000dec:	4b87      	ldr	r3, [pc, #540]	; (800100c <__aeabi_ddiv+0x244>)
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d100      	bne.n	8000df4 <__aeabi_ddiv+0x2c>
 8000df2:	e098      	b.n	8000f26 <__aeabi_ddiv+0x15e>
 8000df4:	0f6b      	lsrs	r3, r5, #29
 8000df6:	00e4      	lsls	r4, r4, #3
 8000df8:	431c      	orrs	r4, r3
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	041b      	lsls	r3, r3, #16
 8000dfe:	4323      	orrs	r3, r4
 8000e00:	4698      	mov	r8, r3
 8000e02:	4b83      	ldr	r3, [pc, #524]	; (8001010 <__aeabi_ddiv+0x248>)
 8000e04:	00ed      	lsls	r5, r5, #3
 8000e06:	469b      	mov	fp, r3
 8000e08:	2300      	movs	r3, #0
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	4483      	add	fp, r0
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	033c      	lsls	r4, r7, #12
 8000e12:	007b      	lsls	r3, r7, #1
 8000e14:	4650      	mov	r0, sl
 8000e16:	0b24      	lsrs	r4, r4, #12
 8000e18:	0d5b      	lsrs	r3, r3, #21
 8000e1a:	0fff      	lsrs	r7, r7, #31
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d067      	beq.n	8000ef0 <__aeabi_ddiv+0x128>
 8000e20:	4a7a      	ldr	r2, [pc, #488]	; (800100c <__aeabi_ddiv+0x244>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d018      	beq.n	8000e58 <__aeabi_ddiv+0x90>
 8000e26:	497a      	ldr	r1, [pc, #488]	; (8001010 <__aeabi_ddiv+0x248>)
 8000e28:	0f42      	lsrs	r2, r0, #29
 8000e2a:	468c      	mov	ip, r1
 8000e2c:	00e4      	lsls	r4, r4, #3
 8000e2e:	4659      	mov	r1, fp
 8000e30:	4314      	orrs	r4, r2
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	4463      	add	r3, ip
 8000e36:	0412      	lsls	r2, r2, #16
 8000e38:	1acb      	subs	r3, r1, r3
 8000e3a:	4314      	orrs	r4, r2
 8000e3c:	469b      	mov	fp, r3
 8000e3e:	00c2      	lsls	r2, r0, #3
 8000e40:	2000      	movs	r0, #0
 8000e42:	0033      	movs	r3, r6
 8000e44:	407b      	eors	r3, r7
 8000e46:	469a      	mov	sl, r3
 8000e48:	464b      	mov	r3, r9
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	d900      	bls.n	8000e50 <__aeabi_ddiv+0x88>
 8000e4e:	e0ef      	b.n	8001030 <__aeabi_ddiv+0x268>
 8000e50:	4970      	ldr	r1, [pc, #448]	; (8001014 <__aeabi_ddiv+0x24c>)
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	58cb      	ldr	r3, [r1, r3]
 8000e56:	469f      	mov	pc, r3
 8000e58:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <__aeabi_ddiv+0x250>)
 8000e5a:	4652      	mov	r2, sl
 8000e5c:	469c      	mov	ip, r3
 8000e5e:	4322      	orrs	r2, r4
 8000e60:	44e3      	add	fp, ip
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d000      	beq.n	8000e68 <__aeabi_ddiv+0xa0>
 8000e66:	e095      	b.n	8000f94 <__aeabi_ddiv+0x1cc>
 8000e68:	4649      	mov	r1, r9
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	4689      	mov	r9, r1
 8000e70:	2400      	movs	r4, #0
 8000e72:	2002      	movs	r0, #2
 8000e74:	e7e5      	b.n	8000e42 <__aeabi_ddiv+0x7a>
 8000e76:	2300      	movs	r3, #0
 8000e78:	2400      	movs	r4, #0
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	4652      	mov	r2, sl
 8000e7e:	051b      	lsls	r3, r3, #20
 8000e80:	4323      	orrs	r3, r4
 8000e82:	07d2      	lsls	r2, r2, #31
 8000e84:	4313      	orrs	r3, r2
 8000e86:	0028      	movs	r0, r5
 8000e88:	0019      	movs	r1, r3
 8000e8a:	b005      	add	sp, #20
 8000e8c:	bcf0      	pop	{r4, r5, r6, r7}
 8000e8e:	46bb      	mov	fp, r7
 8000e90:	46b2      	mov	sl, r6
 8000e92:	46a9      	mov	r9, r5
 8000e94:	46a0      	mov	r8, r4
 8000e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e98:	2400      	movs	r4, #0
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	4b5b      	ldr	r3, [pc, #364]	; (800100c <__aeabi_ddiv+0x244>)
 8000e9e:	e7ed      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 8000ea0:	464b      	mov	r3, r9
 8000ea2:	4323      	orrs	r3, r4
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0xe2>
 8000ea8:	e089      	b.n	8000fbe <__aeabi_ddiv+0x1f6>
 8000eaa:	2c00      	cmp	r4, #0
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_ddiv+0xe8>
 8000eae:	e1e0      	b.n	8001272 <__aeabi_ddiv+0x4aa>
 8000eb0:	0020      	movs	r0, r4
 8000eb2:	f001 fa7f 	bl	80023b4 <__clzsi2>
 8000eb6:	0001      	movs	r1, r0
 8000eb8:	0002      	movs	r2, r0
 8000eba:	390b      	subs	r1, #11
 8000ebc:	231d      	movs	r3, #29
 8000ebe:	1a5b      	subs	r3, r3, r1
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	0010      	movs	r0, r2
 8000ec4:	40d9      	lsrs	r1, r3
 8000ec6:	3808      	subs	r0, #8
 8000ec8:	4084      	lsls	r4, r0
 8000eca:	000b      	movs	r3, r1
 8000ecc:	464d      	mov	r5, r9
 8000ece:	4323      	orrs	r3, r4
 8000ed0:	4698      	mov	r8, r3
 8000ed2:	4085      	lsls	r5, r0
 8000ed4:	4851      	ldr	r0, [pc, #324]	; (800101c <__aeabi_ddiv+0x254>)
 8000ed6:	033c      	lsls	r4, r7, #12
 8000ed8:	1a83      	subs	r3, r0, r2
 8000eda:	469b      	mov	fp, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	4699      	mov	r9, r3
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	007b      	lsls	r3, r7, #1
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	0b24      	lsrs	r4, r4, #12
 8000ee8:	0d5b      	lsrs	r3, r3, #21
 8000eea:	0fff      	lsrs	r7, r7, #31
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d197      	bne.n	8000e20 <__aeabi_ddiv+0x58>
 8000ef0:	4652      	mov	r2, sl
 8000ef2:	4322      	orrs	r2, r4
 8000ef4:	d055      	beq.n	8000fa2 <__aeabi_ddiv+0x1da>
 8000ef6:	2c00      	cmp	r4, #0
 8000ef8:	d100      	bne.n	8000efc <__aeabi_ddiv+0x134>
 8000efa:	e1ca      	b.n	8001292 <__aeabi_ddiv+0x4ca>
 8000efc:	0020      	movs	r0, r4
 8000efe:	f001 fa59 	bl	80023b4 <__clzsi2>
 8000f02:	0002      	movs	r2, r0
 8000f04:	3a0b      	subs	r2, #11
 8000f06:	231d      	movs	r3, #29
 8000f08:	0001      	movs	r1, r0
 8000f0a:	1a9b      	subs	r3, r3, r2
 8000f0c:	4652      	mov	r2, sl
 8000f0e:	3908      	subs	r1, #8
 8000f10:	40da      	lsrs	r2, r3
 8000f12:	408c      	lsls	r4, r1
 8000f14:	4314      	orrs	r4, r2
 8000f16:	4652      	mov	r2, sl
 8000f18:	408a      	lsls	r2, r1
 8000f1a:	4b41      	ldr	r3, [pc, #260]	; (8001020 <__aeabi_ddiv+0x258>)
 8000f1c:	4458      	add	r0, fp
 8000f1e:	469b      	mov	fp, r3
 8000f20:	4483      	add	fp, r0
 8000f22:	2000      	movs	r0, #0
 8000f24:	e78d      	b.n	8000e42 <__aeabi_ddiv+0x7a>
 8000f26:	464b      	mov	r3, r9
 8000f28:	4323      	orrs	r3, r4
 8000f2a:	4698      	mov	r8, r3
 8000f2c:	d140      	bne.n	8000fb0 <__aeabi_ddiv+0x1e8>
 8000f2e:	2308      	movs	r3, #8
 8000f30:	4699      	mov	r9, r3
 8000f32:	3b06      	subs	r3, #6
 8000f34:	2500      	movs	r5, #0
 8000f36:	4683      	mov	fp, r0
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	e769      	b.n	8000e10 <__aeabi_ddiv+0x48>
 8000f3c:	46b2      	mov	sl, r6
 8000f3e:	9b00      	ldr	r3, [sp, #0]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d0a9      	beq.n	8000e98 <__aeabi_ddiv+0xd0>
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d100      	bne.n	8000f4a <__aeabi_ddiv+0x182>
 8000f48:	e211      	b.n	800136e <__aeabi_ddiv+0x5a6>
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d093      	beq.n	8000e76 <__aeabi_ddiv+0xae>
 8000f4e:	4a35      	ldr	r2, [pc, #212]	; (8001024 <__aeabi_ddiv+0x25c>)
 8000f50:	445a      	add	r2, fp
 8000f52:	2a00      	cmp	r2, #0
 8000f54:	dc00      	bgt.n	8000f58 <__aeabi_ddiv+0x190>
 8000f56:	e13c      	b.n	80011d2 <__aeabi_ddiv+0x40a>
 8000f58:	076b      	lsls	r3, r5, #29
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_ddiv+0x196>
 8000f5c:	e1a7      	b.n	80012ae <__aeabi_ddiv+0x4e6>
 8000f5e:	08ed      	lsrs	r5, r5, #3
 8000f60:	4643      	mov	r3, r8
 8000f62:	01db      	lsls	r3, r3, #7
 8000f64:	d506      	bpl.n	8000f74 <__aeabi_ddiv+0x1ac>
 8000f66:	4642      	mov	r2, r8
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <__aeabi_ddiv+0x260>)
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	4690      	mov	r8, r2
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	00d2      	lsls	r2, r2, #3
 8000f72:	445a      	add	r2, fp
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <__aeabi_ddiv+0x264>)
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dc8e      	bgt.n	8000e98 <__aeabi_ddiv+0xd0>
 8000f7a:	4643      	mov	r3, r8
 8000f7c:	0552      	lsls	r2, r2, #21
 8000f7e:	0758      	lsls	r0, r3, #29
 8000f80:	025c      	lsls	r4, r3, #9
 8000f82:	4305      	orrs	r5, r0
 8000f84:	0b24      	lsrs	r4, r4, #12
 8000f86:	0d53      	lsrs	r3, r2, #21
 8000f88:	e778      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 8000f8a:	46ba      	mov	sl, r7
 8000f8c:	46a0      	mov	r8, r4
 8000f8e:	0015      	movs	r5, r2
 8000f90:	9000      	str	r0, [sp, #0]
 8000f92:	e7d4      	b.n	8000f3e <__aeabi_ddiv+0x176>
 8000f94:	464a      	mov	r2, r9
 8000f96:	2303      	movs	r3, #3
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	4691      	mov	r9, r2
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	4652      	mov	r2, sl
 8000fa0:	e74f      	b.n	8000e42 <__aeabi_ddiv+0x7a>
 8000fa2:	4649      	mov	r1, r9
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4319      	orrs	r1, r3
 8000fa8:	4689      	mov	r9, r1
 8000faa:	2400      	movs	r4, #0
 8000fac:	2001      	movs	r0, #1
 8000fae:	e748      	b.n	8000e42 <__aeabi_ddiv+0x7a>
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	4699      	mov	r9, r3
 8000fb4:	3b09      	subs	r3, #9
 8000fb6:	46a0      	mov	r8, r4
 8000fb8:	4683      	mov	fp, r0
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	e728      	b.n	8000e10 <__aeabi_ddiv+0x48>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	4699      	mov	r9, r3
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	469b      	mov	fp, r3
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	2500      	movs	r5, #0
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	e720      	b.n	8000e10 <__aeabi_ddiv+0x48>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	2480      	movs	r4, #128	; 0x80
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	2500      	movs	r5, #0
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <__aeabi_ddiv+0x244>)
 8000fd8:	0324      	lsls	r4, r4, #12
 8000fda:	e74f      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	4641      	mov	r1, r8
 8000fe0:	031b      	lsls	r3, r3, #12
 8000fe2:	4219      	tst	r1, r3
 8000fe4:	d008      	beq.n	8000ff8 <__aeabi_ddiv+0x230>
 8000fe6:	421c      	tst	r4, r3
 8000fe8:	d106      	bne.n	8000ff8 <__aeabi_ddiv+0x230>
 8000fea:	431c      	orrs	r4, r3
 8000fec:	0324      	lsls	r4, r4, #12
 8000fee:	46ba      	mov	sl, r7
 8000ff0:	0015      	movs	r5, r2
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <__aeabi_ddiv+0x244>)
 8000ff4:	0b24      	lsrs	r4, r4, #12
 8000ff6:	e741      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 8000ff8:	2480      	movs	r4, #128	; 0x80
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	0324      	lsls	r4, r4, #12
 8000ffe:	431c      	orrs	r4, r3
 8001000:	0324      	lsls	r4, r4, #12
 8001002:	46b2      	mov	sl, r6
 8001004:	4b01      	ldr	r3, [pc, #4]	; (800100c <__aeabi_ddiv+0x244>)
 8001006:	0b24      	lsrs	r4, r4, #12
 8001008:	e738      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	000007ff 	.word	0x000007ff
 8001010:	fffffc01 	.word	0xfffffc01
 8001014:	0800d73c 	.word	0x0800d73c
 8001018:	fffff801 	.word	0xfffff801
 800101c:	fffffc0d 	.word	0xfffffc0d
 8001020:	000003f3 	.word	0x000003f3
 8001024:	000003ff 	.word	0x000003ff
 8001028:	feffffff 	.word	0xfeffffff
 800102c:	000007fe 	.word	0x000007fe
 8001030:	4544      	cmp	r4, r8
 8001032:	d200      	bcs.n	8001036 <__aeabi_ddiv+0x26e>
 8001034:	e116      	b.n	8001264 <__aeabi_ddiv+0x49c>
 8001036:	d100      	bne.n	800103a <__aeabi_ddiv+0x272>
 8001038:	e111      	b.n	800125e <__aeabi_ddiv+0x496>
 800103a:	2301      	movs	r3, #1
 800103c:	425b      	negs	r3, r3
 800103e:	469c      	mov	ip, r3
 8001040:	002e      	movs	r6, r5
 8001042:	4640      	mov	r0, r8
 8001044:	2500      	movs	r5, #0
 8001046:	44e3      	add	fp, ip
 8001048:	0223      	lsls	r3, r4, #8
 800104a:	0e14      	lsrs	r4, r2, #24
 800104c:	431c      	orrs	r4, r3
 800104e:	0c1b      	lsrs	r3, r3, #16
 8001050:	4699      	mov	r9, r3
 8001052:	0423      	lsls	r3, r4, #16
 8001054:	0c1f      	lsrs	r7, r3, #16
 8001056:	0212      	lsls	r2, r2, #8
 8001058:	4649      	mov	r1, r9
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	9701      	str	r7, [sp, #4]
 800105e:	f7ff f8f3 	bl	8000248 <__aeabi_uidivmod>
 8001062:	0002      	movs	r2, r0
 8001064:	437a      	muls	r2, r7
 8001066:	040b      	lsls	r3, r1, #16
 8001068:	0c31      	lsrs	r1, r6, #16
 800106a:	4680      	mov	r8, r0
 800106c:	4319      	orrs	r1, r3
 800106e:	428a      	cmp	r2, r1
 8001070:	d90b      	bls.n	800108a <__aeabi_ddiv+0x2c2>
 8001072:	2301      	movs	r3, #1
 8001074:	425b      	negs	r3, r3
 8001076:	469c      	mov	ip, r3
 8001078:	1909      	adds	r1, r1, r4
 800107a:	44e0      	add	r8, ip
 800107c:	428c      	cmp	r4, r1
 800107e:	d804      	bhi.n	800108a <__aeabi_ddiv+0x2c2>
 8001080:	428a      	cmp	r2, r1
 8001082:	d902      	bls.n	800108a <__aeabi_ddiv+0x2c2>
 8001084:	1e83      	subs	r3, r0, #2
 8001086:	4698      	mov	r8, r3
 8001088:	1909      	adds	r1, r1, r4
 800108a:	1a88      	subs	r0, r1, r2
 800108c:	4649      	mov	r1, r9
 800108e:	f7ff f8db 	bl	8000248 <__aeabi_uidivmod>
 8001092:	0409      	lsls	r1, r1, #16
 8001094:	468c      	mov	ip, r1
 8001096:	0431      	lsls	r1, r6, #16
 8001098:	4666      	mov	r6, ip
 800109a:	9a01      	ldr	r2, [sp, #4]
 800109c:	0c09      	lsrs	r1, r1, #16
 800109e:	4342      	muls	r2, r0
 80010a0:	0003      	movs	r3, r0
 80010a2:	4331      	orrs	r1, r6
 80010a4:	428a      	cmp	r2, r1
 80010a6:	d904      	bls.n	80010b2 <__aeabi_ddiv+0x2ea>
 80010a8:	1909      	adds	r1, r1, r4
 80010aa:	3b01      	subs	r3, #1
 80010ac:	428c      	cmp	r4, r1
 80010ae:	d800      	bhi.n	80010b2 <__aeabi_ddiv+0x2ea>
 80010b0:	e111      	b.n	80012d6 <__aeabi_ddiv+0x50e>
 80010b2:	1a89      	subs	r1, r1, r2
 80010b4:	4642      	mov	r2, r8
 80010b6:	9e00      	ldr	r6, [sp, #0]
 80010b8:	0412      	lsls	r2, r2, #16
 80010ba:	431a      	orrs	r2, r3
 80010bc:	0c33      	lsrs	r3, r6, #16
 80010be:	001f      	movs	r7, r3
 80010c0:	0c10      	lsrs	r0, r2, #16
 80010c2:	4690      	mov	r8, r2
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	0413      	lsls	r3, r2, #16
 80010c8:	0432      	lsls	r2, r6, #16
 80010ca:	0c16      	lsrs	r6, r2, #16
 80010cc:	0032      	movs	r2, r6
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	435a      	muls	r2, r3
 80010d2:	9603      	str	r6, [sp, #12]
 80010d4:	437b      	muls	r3, r7
 80010d6:	4346      	muls	r6, r0
 80010d8:	4378      	muls	r0, r7
 80010da:	0c17      	lsrs	r7, r2, #16
 80010dc:	46bc      	mov	ip, r7
 80010de:	199b      	adds	r3, r3, r6
 80010e0:	4463      	add	r3, ip
 80010e2:	429e      	cmp	r6, r3
 80010e4:	d903      	bls.n	80010ee <__aeabi_ddiv+0x326>
 80010e6:	2680      	movs	r6, #128	; 0x80
 80010e8:	0276      	lsls	r6, r6, #9
 80010ea:	46b4      	mov	ip, r6
 80010ec:	4460      	add	r0, ip
 80010ee:	0c1e      	lsrs	r6, r3, #16
 80010f0:	1830      	adds	r0, r6, r0
 80010f2:	0416      	lsls	r6, r2, #16
 80010f4:	041b      	lsls	r3, r3, #16
 80010f6:	0c36      	lsrs	r6, r6, #16
 80010f8:	199e      	adds	r6, r3, r6
 80010fa:	4281      	cmp	r1, r0
 80010fc:	d200      	bcs.n	8001100 <__aeabi_ddiv+0x338>
 80010fe:	e09c      	b.n	800123a <__aeabi_ddiv+0x472>
 8001100:	d100      	bne.n	8001104 <__aeabi_ddiv+0x33c>
 8001102:	e097      	b.n	8001234 <__aeabi_ddiv+0x46c>
 8001104:	1bae      	subs	r6, r5, r6
 8001106:	1a09      	subs	r1, r1, r0
 8001108:	42b5      	cmp	r5, r6
 800110a:	4180      	sbcs	r0, r0
 800110c:	4240      	negs	r0, r0
 800110e:	1a08      	subs	r0, r1, r0
 8001110:	4284      	cmp	r4, r0
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0x34e>
 8001114:	e111      	b.n	800133a <__aeabi_ddiv+0x572>
 8001116:	4649      	mov	r1, r9
 8001118:	f7ff f896 	bl	8000248 <__aeabi_uidivmod>
 800111c:	9a01      	ldr	r2, [sp, #4]
 800111e:	040b      	lsls	r3, r1, #16
 8001120:	4342      	muls	r2, r0
 8001122:	0c31      	lsrs	r1, r6, #16
 8001124:	0005      	movs	r5, r0
 8001126:	4319      	orrs	r1, r3
 8001128:	428a      	cmp	r2, r1
 800112a:	d907      	bls.n	800113c <__aeabi_ddiv+0x374>
 800112c:	1909      	adds	r1, r1, r4
 800112e:	3d01      	subs	r5, #1
 8001130:	428c      	cmp	r4, r1
 8001132:	d803      	bhi.n	800113c <__aeabi_ddiv+0x374>
 8001134:	428a      	cmp	r2, r1
 8001136:	d901      	bls.n	800113c <__aeabi_ddiv+0x374>
 8001138:	1e85      	subs	r5, r0, #2
 800113a:	1909      	adds	r1, r1, r4
 800113c:	1a88      	subs	r0, r1, r2
 800113e:	4649      	mov	r1, r9
 8001140:	f7ff f882 	bl	8000248 <__aeabi_uidivmod>
 8001144:	0409      	lsls	r1, r1, #16
 8001146:	468c      	mov	ip, r1
 8001148:	0431      	lsls	r1, r6, #16
 800114a:	4666      	mov	r6, ip
 800114c:	9a01      	ldr	r2, [sp, #4]
 800114e:	0c09      	lsrs	r1, r1, #16
 8001150:	4342      	muls	r2, r0
 8001152:	0003      	movs	r3, r0
 8001154:	4331      	orrs	r1, r6
 8001156:	428a      	cmp	r2, r1
 8001158:	d907      	bls.n	800116a <__aeabi_ddiv+0x3a2>
 800115a:	1909      	adds	r1, r1, r4
 800115c:	3b01      	subs	r3, #1
 800115e:	428c      	cmp	r4, r1
 8001160:	d803      	bhi.n	800116a <__aeabi_ddiv+0x3a2>
 8001162:	428a      	cmp	r2, r1
 8001164:	d901      	bls.n	800116a <__aeabi_ddiv+0x3a2>
 8001166:	1e83      	subs	r3, r0, #2
 8001168:	1909      	adds	r1, r1, r4
 800116a:	9e03      	ldr	r6, [sp, #12]
 800116c:	1a89      	subs	r1, r1, r2
 800116e:	0032      	movs	r2, r6
 8001170:	042d      	lsls	r5, r5, #16
 8001172:	431d      	orrs	r5, r3
 8001174:	9f02      	ldr	r7, [sp, #8]
 8001176:	042b      	lsls	r3, r5, #16
 8001178:	0c1b      	lsrs	r3, r3, #16
 800117a:	435a      	muls	r2, r3
 800117c:	437b      	muls	r3, r7
 800117e:	469c      	mov	ip, r3
 8001180:	0c28      	lsrs	r0, r5, #16
 8001182:	4346      	muls	r6, r0
 8001184:	0c13      	lsrs	r3, r2, #16
 8001186:	44b4      	add	ip, r6
 8001188:	4463      	add	r3, ip
 800118a:	4378      	muls	r0, r7
 800118c:	429e      	cmp	r6, r3
 800118e:	d903      	bls.n	8001198 <__aeabi_ddiv+0x3d0>
 8001190:	2680      	movs	r6, #128	; 0x80
 8001192:	0276      	lsls	r6, r6, #9
 8001194:	46b4      	mov	ip, r6
 8001196:	4460      	add	r0, ip
 8001198:	0c1e      	lsrs	r6, r3, #16
 800119a:	0412      	lsls	r2, r2, #16
 800119c:	041b      	lsls	r3, r3, #16
 800119e:	0c12      	lsrs	r2, r2, #16
 80011a0:	1830      	adds	r0, r6, r0
 80011a2:	189b      	adds	r3, r3, r2
 80011a4:	4281      	cmp	r1, r0
 80011a6:	d306      	bcc.n	80011b6 <__aeabi_ddiv+0x3ee>
 80011a8:	d002      	beq.n	80011b0 <__aeabi_ddiv+0x3e8>
 80011aa:	2301      	movs	r3, #1
 80011ac:	431d      	orrs	r5, r3
 80011ae:	e6ce      	b.n	8000f4e <__aeabi_ddiv+0x186>
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d100      	bne.n	80011b6 <__aeabi_ddiv+0x3ee>
 80011b4:	e6cb      	b.n	8000f4e <__aeabi_ddiv+0x186>
 80011b6:	1861      	adds	r1, r4, r1
 80011b8:	1e6e      	subs	r6, r5, #1
 80011ba:	42a1      	cmp	r1, r4
 80011bc:	d200      	bcs.n	80011c0 <__aeabi_ddiv+0x3f8>
 80011be:	e0a4      	b.n	800130a <__aeabi_ddiv+0x542>
 80011c0:	4281      	cmp	r1, r0
 80011c2:	d200      	bcs.n	80011c6 <__aeabi_ddiv+0x3fe>
 80011c4:	e0c9      	b.n	800135a <__aeabi_ddiv+0x592>
 80011c6:	d100      	bne.n	80011ca <__aeabi_ddiv+0x402>
 80011c8:	e0d9      	b.n	800137e <__aeabi_ddiv+0x5b6>
 80011ca:	0035      	movs	r5, r6
 80011cc:	e7ed      	b.n	80011aa <__aeabi_ddiv+0x3e2>
 80011ce:	2501      	movs	r5, #1
 80011d0:	426d      	negs	r5, r5
 80011d2:	2101      	movs	r1, #1
 80011d4:	1a89      	subs	r1, r1, r2
 80011d6:	2938      	cmp	r1, #56	; 0x38
 80011d8:	dd00      	ble.n	80011dc <__aeabi_ddiv+0x414>
 80011da:	e64c      	b.n	8000e76 <__aeabi_ddiv+0xae>
 80011dc:	291f      	cmp	r1, #31
 80011de:	dc00      	bgt.n	80011e2 <__aeabi_ddiv+0x41a>
 80011e0:	e07f      	b.n	80012e2 <__aeabi_ddiv+0x51a>
 80011e2:	231f      	movs	r3, #31
 80011e4:	425b      	negs	r3, r3
 80011e6:	1a9a      	subs	r2, r3, r2
 80011e8:	4643      	mov	r3, r8
 80011ea:	40d3      	lsrs	r3, r2
 80011ec:	2920      	cmp	r1, #32
 80011ee:	d004      	beq.n	80011fa <__aeabi_ddiv+0x432>
 80011f0:	4644      	mov	r4, r8
 80011f2:	4a65      	ldr	r2, [pc, #404]	; (8001388 <__aeabi_ddiv+0x5c0>)
 80011f4:	445a      	add	r2, fp
 80011f6:	4094      	lsls	r4, r2
 80011f8:	4325      	orrs	r5, r4
 80011fa:	1e6a      	subs	r2, r5, #1
 80011fc:	4195      	sbcs	r5, r2
 80011fe:	2207      	movs	r2, #7
 8001200:	432b      	orrs	r3, r5
 8001202:	0015      	movs	r5, r2
 8001204:	2400      	movs	r4, #0
 8001206:	401d      	ands	r5, r3
 8001208:	421a      	tst	r2, r3
 800120a:	d100      	bne.n	800120e <__aeabi_ddiv+0x446>
 800120c:	e0a1      	b.n	8001352 <__aeabi_ddiv+0x58a>
 800120e:	220f      	movs	r2, #15
 8001210:	2400      	movs	r4, #0
 8001212:	401a      	ands	r2, r3
 8001214:	2a04      	cmp	r2, #4
 8001216:	d100      	bne.n	800121a <__aeabi_ddiv+0x452>
 8001218:	e098      	b.n	800134c <__aeabi_ddiv+0x584>
 800121a:	1d1a      	adds	r2, r3, #4
 800121c:	429a      	cmp	r2, r3
 800121e:	419b      	sbcs	r3, r3
 8001220:	425b      	negs	r3, r3
 8001222:	18e4      	adds	r4, r4, r3
 8001224:	0013      	movs	r3, r2
 8001226:	0222      	lsls	r2, r4, #8
 8001228:	d400      	bmi.n	800122c <__aeabi_ddiv+0x464>
 800122a:	e08f      	b.n	800134c <__aeabi_ddiv+0x584>
 800122c:	2301      	movs	r3, #1
 800122e:	2400      	movs	r4, #0
 8001230:	2500      	movs	r5, #0
 8001232:	e623      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 8001234:	42b5      	cmp	r5, r6
 8001236:	d300      	bcc.n	800123a <__aeabi_ddiv+0x472>
 8001238:	e764      	b.n	8001104 <__aeabi_ddiv+0x33c>
 800123a:	4643      	mov	r3, r8
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	9b00      	ldr	r3, [sp, #0]
 8001240:	469c      	mov	ip, r3
 8001242:	4465      	add	r5, ip
 8001244:	001f      	movs	r7, r3
 8001246:	429d      	cmp	r5, r3
 8001248:	419b      	sbcs	r3, r3
 800124a:	425b      	negs	r3, r3
 800124c:	191b      	adds	r3, r3, r4
 800124e:	18c9      	adds	r1, r1, r3
 8001250:	428c      	cmp	r4, r1
 8001252:	d23a      	bcs.n	80012ca <__aeabi_ddiv+0x502>
 8001254:	4288      	cmp	r0, r1
 8001256:	d863      	bhi.n	8001320 <__aeabi_ddiv+0x558>
 8001258:	d060      	beq.n	800131c <__aeabi_ddiv+0x554>
 800125a:	4690      	mov	r8, r2
 800125c:	e752      	b.n	8001104 <__aeabi_ddiv+0x33c>
 800125e:	42aa      	cmp	r2, r5
 8001260:	d900      	bls.n	8001264 <__aeabi_ddiv+0x49c>
 8001262:	e6ea      	b.n	800103a <__aeabi_ddiv+0x272>
 8001264:	4643      	mov	r3, r8
 8001266:	07de      	lsls	r6, r3, #31
 8001268:	0858      	lsrs	r0, r3, #1
 800126a:	086b      	lsrs	r3, r5, #1
 800126c:	431e      	orrs	r6, r3
 800126e:	07ed      	lsls	r5, r5, #31
 8001270:	e6ea      	b.n	8001048 <__aeabi_ddiv+0x280>
 8001272:	4648      	mov	r0, r9
 8001274:	f001 f89e 	bl	80023b4 <__clzsi2>
 8001278:	0001      	movs	r1, r0
 800127a:	0002      	movs	r2, r0
 800127c:	3115      	adds	r1, #21
 800127e:	3220      	adds	r2, #32
 8001280:	291c      	cmp	r1, #28
 8001282:	dc00      	bgt.n	8001286 <__aeabi_ddiv+0x4be>
 8001284:	e61a      	b.n	8000ebc <__aeabi_ddiv+0xf4>
 8001286:	464b      	mov	r3, r9
 8001288:	3808      	subs	r0, #8
 800128a:	4083      	lsls	r3, r0
 800128c:	2500      	movs	r5, #0
 800128e:	4698      	mov	r8, r3
 8001290:	e620      	b.n	8000ed4 <__aeabi_ddiv+0x10c>
 8001292:	f001 f88f 	bl	80023b4 <__clzsi2>
 8001296:	0003      	movs	r3, r0
 8001298:	001a      	movs	r2, r3
 800129a:	3215      	adds	r2, #21
 800129c:	3020      	adds	r0, #32
 800129e:	2a1c      	cmp	r2, #28
 80012a0:	dc00      	bgt.n	80012a4 <__aeabi_ddiv+0x4dc>
 80012a2:	e630      	b.n	8000f06 <__aeabi_ddiv+0x13e>
 80012a4:	4654      	mov	r4, sl
 80012a6:	3b08      	subs	r3, #8
 80012a8:	2200      	movs	r2, #0
 80012aa:	409c      	lsls	r4, r3
 80012ac:	e635      	b.n	8000f1a <__aeabi_ddiv+0x152>
 80012ae:	230f      	movs	r3, #15
 80012b0:	402b      	ands	r3, r5
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d100      	bne.n	80012b8 <__aeabi_ddiv+0x4f0>
 80012b6:	e652      	b.n	8000f5e <__aeabi_ddiv+0x196>
 80012b8:	2305      	movs	r3, #5
 80012ba:	425b      	negs	r3, r3
 80012bc:	42ab      	cmp	r3, r5
 80012be:	419b      	sbcs	r3, r3
 80012c0:	3504      	adds	r5, #4
 80012c2:	425b      	negs	r3, r3
 80012c4:	08ed      	lsrs	r5, r5, #3
 80012c6:	4498      	add	r8, r3
 80012c8:	e64a      	b.n	8000f60 <__aeabi_ddiv+0x198>
 80012ca:	428c      	cmp	r4, r1
 80012cc:	d1c5      	bne.n	800125a <__aeabi_ddiv+0x492>
 80012ce:	42af      	cmp	r7, r5
 80012d0:	d9c0      	bls.n	8001254 <__aeabi_ddiv+0x48c>
 80012d2:	4690      	mov	r8, r2
 80012d4:	e716      	b.n	8001104 <__aeabi_ddiv+0x33c>
 80012d6:	428a      	cmp	r2, r1
 80012d8:	d800      	bhi.n	80012dc <__aeabi_ddiv+0x514>
 80012da:	e6ea      	b.n	80010b2 <__aeabi_ddiv+0x2ea>
 80012dc:	1e83      	subs	r3, r0, #2
 80012de:	1909      	adds	r1, r1, r4
 80012e0:	e6e7      	b.n	80010b2 <__aeabi_ddiv+0x2ea>
 80012e2:	4a2a      	ldr	r2, [pc, #168]	; (800138c <__aeabi_ddiv+0x5c4>)
 80012e4:	0028      	movs	r0, r5
 80012e6:	445a      	add	r2, fp
 80012e8:	4643      	mov	r3, r8
 80012ea:	4095      	lsls	r5, r2
 80012ec:	4093      	lsls	r3, r2
 80012ee:	40c8      	lsrs	r0, r1
 80012f0:	1e6a      	subs	r2, r5, #1
 80012f2:	4195      	sbcs	r5, r2
 80012f4:	4644      	mov	r4, r8
 80012f6:	4303      	orrs	r3, r0
 80012f8:	432b      	orrs	r3, r5
 80012fa:	40cc      	lsrs	r4, r1
 80012fc:	075a      	lsls	r2, r3, #29
 80012fe:	d092      	beq.n	8001226 <__aeabi_ddiv+0x45e>
 8001300:	220f      	movs	r2, #15
 8001302:	401a      	ands	r2, r3
 8001304:	2a04      	cmp	r2, #4
 8001306:	d188      	bne.n	800121a <__aeabi_ddiv+0x452>
 8001308:	e78d      	b.n	8001226 <__aeabi_ddiv+0x45e>
 800130a:	0035      	movs	r5, r6
 800130c:	4281      	cmp	r1, r0
 800130e:	d000      	beq.n	8001312 <__aeabi_ddiv+0x54a>
 8001310:	e74b      	b.n	80011aa <__aeabi_ddiv+0x3e2>
 8001312:	9a00      	ldr	r2, [sp, #0]
 8001314:	4293      	cmp	r3, r2
 8001316:	d000      	beq.n	800131a <__aeabi_ddiv+0x552>
 8001318:	e747      	b.n	80011aa <__aeabi_ddiv+0x3e2>
 800131a:	e618      	b.n	8000f4e <__aeabi_ddiv+0x186>
 800131c:	42ae      	cmp	r6, r5
 800131e:	d99c      	bls.n	800125a <__aeabi_ddiv+0x492>
 8001320:	2302      	movs	r3, #2
 8001322:	425b      	negs	r3, r3
 8001324:	469c      	mov	ip, r3
 8001326:	9b00      	ldr	r3, [sp, #0]
 8001328:	44e0      	add	r8, ip
 800132a:	469c      	mov	ip, r3
 800132c:	4465      	add	r5, ip
 800132e:	429d      	cmp	r5, r3
 8001330:	419b      	sbcs	r3, r3
 8001332:	425b      	negs	r3, r3
 8001334:	191b      	adds	r3, r3, r4
 8001336:	18c9      	adds	r1, r1, r3
 8001338:	e6e4      	b.n	8001104 <__aeabi_ddiv+0x33c>
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <__aeabi_ddiv+0x5c8>)
 800133c:	445a      	add	r2, fp
 800133e:	2a00      	cmp	r2, #0
 8001340:	dc00      	bgt.n	8001344 <__aeabi_ddiv+0x57c>
 8001342:	e744      	b.n	80011ce <__aeabi_ddiv+0x406>
 8001344:	2301      	movs	r3, #1
 8001346:	2500      	movs	r5, #0
 8001348:	4498      	add	r8, r3
 800134a:	e609      	b.n	8000f60 <__aeabi_ddiv+0x198>
 800134c:	0765      	lsls	r5, r4, #29
 800134e:	0264      	lsls	r4, r4, #9
 8001350:	0b24      	lsrs	r4, r4, #12
 8001352:	08db      	lsrs	r3, r3, #3
 8001354:	431d      	orrs	r5, r3
 8001356:	2300      	movs	r3, #0
 8001358:	e590      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 800135a:	9e00      	ldr	r6, [sp, #0]
 800135c:	3d02      	subs	r5, #2
 800135e:	0072      	lsls	r2, r6, #1
 8001360:	42b2      	cmp	r2, r6
 8001362:	41bf      	sbcs	r7, r7
 8001364:	427f      	negs	r7, r7
 8001366:	193c      	adds	r4, r7, r4
 8001368:	1909      	adds	r1, r1, r4
 800136a:	9200      	str	r2, [sp, #0]
 800136c:	e7ce      	b.n	800130c <__aeabi_ddiv+0x544>
 800136e:	2480      	movs	r4, #128	; 0x80
 8001370:	4643      	mov	r3, r8
 8001372:	0324      	lsls	r4, r4, #12
 8001374:	431c      	orrs	r4, r3
 8001376:	0324      	lsls	r4, r4, #12
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <__aeabi_ddiv+0x5cc>)
 800137a:	0b24      	lsrs	r4, r4, #12
 800137c:	e57e      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 800137e:	9a00      	ldr	r2, [sp, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3ea      	bcc.n	800135a <__aeabi_ddiv+0x592>
 8001384:	0035      	movs	r5, r6
 8001386:	e7c4      	b.n	8001312 <__aeabi_ddiv+0x54a>
 8001388:	0000043e 	.word	0x0000043e
 800138c:	0000041e 	.word	0x0000041e
 8001390:	000003ff 	.word	0x000003ff
 8001394:	000007ff 	.word	0x000007ff

08001398 <__eqdf2>:
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	464f      	mov	r7, r9
 800139c:	4646      	mov	r6, r8
 800139e:	46d6      	mov	lr, sl
 80013a0:	4694      	mov	ip, r2
 80013a2:	4691      	mov	r9, r2
 80013a4:	031a      	lsls	r2, r3, #12
 80013a6:	0b12      	lsrs	r2, r2, #12
 80013a8:	4d18      	ldr	r5, [pc, #96]	; (800140c <__eqdf2+0x74>)
 80013aa:	b5c0      	push	{r6, r7, lr}
 80013ac:	004c      	lsls	r4, r1, #1
 80013ae:	030f      	lsls	r7, r1, #12
 80013b0:	4692      	mov	sl, r2
 80013b2:	005a      	lsls	r2, r3, #1
 80013b4:	0006      	movs	r6, r0
 80013b6:	4680      	mov	r8, r0
 80013b8:	0b3f      	lsrs	r7, r7, #12
 80013ba:	2001      	movs	r0, #1
 80013bc:	0d64      	lsrs	r4, r4, #21
 80013be:	0fc9      	lsrs	r1, r1, #31
 80013c0:	0d52      	lsrs	r2, r2, #21
 80013c2:	0fdb      	lsrs	r3, r3, #31
 80013c4:	42ac      	cmp	r4, r5
 80013c6:	d00a      	beq.n	80013de <__eqdf2+0x46>
 80013c8:	42aa      	cmp	r2, r5
 80013ca:	d003      	beq.n	80013d4 <__eqdf2+0x3c>
 80013cc:	4294      	cmp	r4, r2
 80013ce:	d101      	bne.n	80013d4 <__eqdf2+0x3c>
 80013d0:	4557      	cmp	r7, sl
 80013d2:	d00d      	beq.n	80013f0 <__eqdf2+0x58>
 80013d4:	bce0      	pop	{r5, r6, r7}
 80013d6:	46ba      	mov	sl, r7
 80013d8:	46b1      	mov	r9, r6
 80013da:	46a8      	mov	r8, r5
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	003d      	movs	r5, r7
 80013e0:	4335      	orrs	r5, r6
 80013e2:	d1f7      	bne.n	80013d4 <__eqdf2+0x3c>
 80013e4:	42a2      	cmp	r2, r4
 80013e6:	d1f5      	bne.n	80013d4 <__eqdf2+0x3c>
 80013e8:	4652      	mov	r2, sl
 80013ea:	4665      	mov	r5, ip
 80013ec:	432a      	orrs	r2, r5
 80013ee:	d1f1      	bne.n	80013d4 <__eqdf2+0x3c>
 80013f0:	2001      	movs	r0, #1
 80013f2:	45c8      	cmp	r8, r9
 80013f4:	d1ee      	bne.n	80013d4 <__eqdf2+0x3c>
 80013f6:	4299      	cmp	r1, r3
 80013f8:	d006      	beq.n	8001408 <__eqdf2+0x70>
 80013fa:	2c00      	cmp	r4, #0
 80013fc:	d1ea      	bne.n	80013d4 <__eqdf2+0x3c>
 80013fe:	433e      	orrs	r6, r7
 8001400:	0030      	movs	r0, r6
 8001402:	1e46      	subs	r6, r0, #1
 8001404:	41b0      	sbcs	r0, r6
 8001406:	e7e5      	b.n	80013d4 <__eqdf2+0x3c>
 8001408:	2000      	movs	r0, #0
 800140a:	e7e3      	b.n	80013d4 <__eqdf2+0x3c>
 800140c:	000007ff 	.word	0x000007ff

08001410 <__gedf2>:
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	464e      	mov	r6, r9
 8001414:	4645      	mov	r5, r8
 8001416:	4657      	mov	r7, sl
 8001418:	46de      	mov	lr, fp
 800141a:	0004      	movs	r4, r0
 800141c:	0018      	movs	r0, r3
 800141e:	b5e0      	push	{r5, r6, r7, lr}
 8001420:	0016      	movs	r6, r2
 8001422:	031b      	lsls	r3, r3, #12
 8001424:	0b1b      	lsrs	r3, r3, #12
 8001426:	4d32      	ldr	r5, [pc, #200]	; (80014f0 <__gedf2+0xe0>)
 8001428:	030f      	lsls	r7, r1, #12
 800142a:	004a      	lsls	r2, r1, #1
 800142c:	4699      	mov	r9, r3
 800142e:	0043      	lsls	r3, r0, #1
 8001430:	46a4      	mov	ip, r4
 8001432:	46b0      	mov	r8, r6
 8001434:	0b3f      	lsrs	r7, r7, #12
 8001436:	0d52      	lsrs	r2, r2, #21
 8001438:	0fc9      	lsrs	r1, r1, #31
 800143a:	0d5b      	lsrs	r3, r3, #21
 800143c:	0fc0      	lsrs	r0, r0, #31
 800143e:	42aa      	cmp	r2, r5
 8001440:	d029      	beq.n	8001496 <__gedf2+0x86>
 8001442:	42ab      	cmp	r3, r5
 8001444:	d018      	beq.n	8001478 <__gedf2+0x68>
 8001446:	2a00      	cmp	r2, #0
 8001448:	d12a      	bne.n	80014a0 <__gedf2+0x90>
 800144a:	433c      	orrs	r4, r7
 800144c:	46a3      	mov	fp, r4
 800144e:	4265      	negs	r5, r4
 8001450:	4165      	adcs	r5, r4
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <__gedf2+0x4c>
 8001456:	464c      	mov	r4, r9
 8001458:	4326      	orrs	r6, r4
 800145a:	d027      	beq.n	80014ac <__gedf2+0x9c>
 800145c:	2d00      	cmp	r5, #0
 800145e:	d115      	bne.n	800148c <__gedf2+0x7c>
 8001460:	4281      	cmp	r1, r0
 8001462:	d028      	beq.n	80014b6 <__gedf2+0xa6>
 8001464:	2002      	movs	r0, #2
 8001466:	3901      	subs	r1, #1
 8001468:	4008      	ands	r0, r1
 800146a:	3801      	subs	r0, #1
 800146c:	bcf0      	pop	{r4, r5, r6, r7}
 800146e:	46bb      	mov	fp, r7
 8001470:	46b2      	mov	sl, r6
 8001472:	46a9      	mov	r9, r5
 8001474:	46a0      	mov	r8, r4
 8001476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001478:	464d      	mov	r5, r9
 800147a:	432e      	orrs	r6, r5
 800147c:	d12f      	bne.n	80014de <__gedf2+0xce>
 800147e:	2a00      	cmp	r2, #0
 8001480:	d1ee      	bne.n	8001460 <__gedf2+0x50>
 8001482:	433c      	orrs	r4, r7
 8001484:	4265      	negs	r5, r4
 8001486:	4165      	adcs	r5, r4
 8001488:	2d00      	cmp	r5, #0
 800148a:	d0e9      	beq.n	8001460 <__gedf2+0x50>
 800148c:	2800      	cmp	r0, #0
 800148e:	d1ed      	bne.n	800146c <__gedf2+0x5c>
 8001490:	2001      	movs	r0, #1
 8001492:	4240      	negs	r0, r0
 8001494:	e7ea      	b.n	800146c <__gedf2+0x5c>
 8001496:	003d      	movs	r5, r7
 8001498:	4325      	orrs	r5, r4
 800149a:	d120      	bne.n	80014de <__gedf2+0xce>
 800149c:	4293      	cmp	r3, r2
 800149e:	d0eb      	beq.n	8001478 <__gedf2+0x68>
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1dd      	bne.n	8001460 <__gedf2+0x50>
 80014a4:	464c      	mov	r4, r9
 80014a6:	4326      	orrs	r6, r4
 80014a8:	d1da      	bne.n	8001460 <__gedf2+0x50>
 80014aa:	e7db      	b.n	8001464 <__gedf2+0x54>
 80014ac:	465b      	mov	r3, fp
 80014ae:	2000      	movs	r0, #0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0db      	beq.n	800146c <__gedf2+0x5c>
 80014b4:	e7d6      	b.n	8001464 <__gedf2+0x54>
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dc0a      	bgt.n	80014d0 <__gedf2+0xc0>
 80014ba:	dbe7      	blt.n	800148c <__gedf2+0x7c>
 80014bc:	454f      	cmp	r7, r9
 80014be:	d8d1      	bhi.n	8001464 <__gedf2+0x54>
 80014c0:	d010      	beq.n	80014e4 <__gedf2+0xd4>
 80014c2:	2000      	movs	r0, #0
 80014c4:	454f      	cmp	r7, r9
 80014c6:	d2d1      	bcs.n	800146c <__gedf2+0x5c>
 80014c8:	2900      	cmp	r1, #0
 80014ca:	d0e1      	beq.n	8001490 <__gedf2+0x80>
 80014cc:	0008      	movs	r0, r1
 80014ce:	e7cd      	b.n	800146c <__gedf2+0x5c>
 80014d0:	4243      	negs	r3, r0
 80014d2:	4158      	adcs	r0, r3
 80014d4:	2302      	movs	r3, #2
 80014d6:	4240      	negs	r0, r0
 80014d8:	4018      	ands	r0, r3
 80014da:	3801      	subs	r0, #1
 80014dc:	e7c6      	b.n	800146c <__gedf2+0x5c>
 80014de:	2002      	movs	r0, #2
 80014e0:	4240      	negs	r0, r0
 80014e2:	e7c3      	b.n	800146c <__gedf2+0x5c>
 80014e4:	45c4      	cmp	ip, r8
 80014e6:	d8bd      	bhi.n	8001464 <__gedf2+0x54>
 80014e8:	2000      	movs	r0, #0
 80014ea:	45c4      	cmp	ip, r8
 80014ec:	d2be      	bcs.n	800146c <__gedf2+0x5c>
 80014ee:	e7eb      	b.n	80014c8 <__gedf2+0xb8>
 80014f0:	000007ff 	.word	0x000007ff

080014f4 <__ledf2>:
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	464e      	mov	r6, r9
 80014f8:	4645      	mov	r5, r8
 80014fa:	4657      	mov	r7, sl
 80014fc:	46de      	mov	lr, fp
 80014fe:	0004      	movs	r4, r0
 8001500:	0018      	movs	r0, r3
 8001502:	b5e0      	push	{r5, r6, r7, lr}
 8001504:	0016      	movs	r6, r2
 8001506:	031b      	lsls	r3, r3, #12
 8001508:	0b1b      	lsrs	r3, r3, #12
 800150a:	4d31      	ldr	r5, [pc, #196]	; (80015d0 <__ledf2+0xdc>)
 800150c:	030f      	lsls	r7, r1, #12
 800150e:	004a      	lsls	r2, r1, #1
 8001510:	4699      	mov	r9, r3
 8001512:	0043      	lsls	r3, r0, #1
 8001514:	46a4      	mov	ip, r4
 8001516:	46b0      	mov	r8, r6
 8001518:	0b3f      	lsrs	r7, r7, #12
 800151a:	0d52      	lsrs	r2, r2, #21
 800151c:	0fc9      	lsrs	r1, r1, #31
 800151e:	0d5b      	lsrs	r3, r3, #21
 8001520:	0fc0      	lsrs	r0, r0, #31
 8001522:	42aa      	cmp	r2, r5
 8001524:	d011      	beq.n	800154a <__ledf2+0x56>
 8001526:	42ab      	cmp	r3, r5
 8001528:	d014      	beq.n	8001554 <__ledf2+0x60>
 800152a:	2a00      	cmp	r2, #0
 800152c:	d12f      	bne.n	800158e <__ledf2+0x9a>
 800152e:	433c      	orrs	r4, r7
 8001530:	46a3      	mov	fp, r4
 8001532:	4265      	negs	r5, r4
 8001534:	4165      	adcs	r5, r4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d114      	bne.n	8001564 <__ledf2+0x70>
 800153a:	464c      	mov	r4, r9
 800153c:	4326      	orrs	r6, r4
 800153e:	d111      	bne.n	8001564 <__ledf2+0x70>
 8001540:	465b      	mov	r3, fp
 8001542:	2000      	movs	r0, #0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d017      	beq.n	8001578 <__ledf2+0x84>
 8001548:	e010      	b.n	800156c <__ledf2+0x78>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d112      	bne.n	8001576 <__ledf2+0x82>
 8001550:	4293      	cmp	r3, r2
 8001552:	d11c      	bne.n	800158e <__ledf2+0x9a>
 8001554:	464d      	mov	r5, r9
 8001556:	432e      	orrs	r6, r5
 8001558:	d10d      	bne.n	8001576 <__ledf2+0x82>
 800155a:	2a00      	cmp	r2, #0
 800155c:	d104      	bne.n	8001568 <__ledf2+0x74>
 800155e:	433c      	orrs	r4, r7
 8001560:	4265      	negs	r5, r4
 8001562:	4165      	adcs	r5, r4
 8001564:	2d00      	cmp	r5, #0
 8001566:	d10d      	bne.n	8001584 <__ledf2+0x90>
 8001568:	4281      	cmp	r1, r0
 800156a:	d016      	beq.n	800159a <__ledf2+0xa6>
 800156c:	2002      	movs	r0, #2
 800156e:	3901      	subs	r1, #1
 8001570:	4008      	ands	r0, r1
 8001572:	3801      	subs	r0, #1
 8001574:	e000      	b.n	8001578 <__ledf2+0x84>
 8001576:	2002      	movs	r0, #2
 8001578:	bcf0      	pop	{r4, r5, r6, r7}
 800157a:	46bb      	mov	fp, r7
 800157c:	46b2      	mov	sl, r6
 800157e:	46a9      	mov	r9, r5
 8001580:	46a0      	mov	r8, r4
 8001582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001584:	2800      	cmp	r0, #0
 8001586:	d1f7      	bne.n	8001578 <__ledf2+0x84>
 8001588:	2001      	movs	r0, #1
 800158a:	4240      	negs	r0, r0
 800158c:	e7f4      	b.n	8001578 <__ledf2+0x84>
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1ea      	bne.n	8001568 <__ledf2+0x74>
 8001592:	464c      	mov	r4, r9
 8001594:	4326      	orrs	r6, r4
 8001596:	d1e7      	bne.n	8001568 <__ledf2+0x74>
 8001598:	e7e8      	b.n	800156c <__ledf2+0x78>
 800159a:	429a      	cmp	r2, r3
 800159c:	dd06      	ble.n	80015ac <__ledf2+0xb8>
 800159e:	4243      	negs	r3, r0
 80015a0:	4158      	adcs	r0, r3
 80015a2:	2302      	movs	r3, #2
 80015a4:	4240      	negs	r0, r0
 80015a6:	4018      	ands	r0, r3
 80015a8:	3801      	subs	r0, #1
 80015aa:	e7e5      	b.n	8001578 <__ledf2+0x84>
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbe9      	blt.n	8001584 <__ledf2+0x90>
 80015b0:	454f      	cmp	r7, r9
 80015b2:	d8db      	bhi.n	800156c <__ledf2+0x78>
 80015b4:	d006      	beq.n	80015c4 <__ledf2+0xd0>
 80015b6:	2000      	movs	r0, #0
 80015b8:	454f      	cmp	r7, r9
 80015ba:	d2dd      	bcs.n	8001578 <__ledf2+0x84>
 80015bc:	2900      	cmp	r1, #0
 80015be:	d0e3      	beq.n	8001588 <__ledf2+0x94>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7d9      	b.n	8001578 <__ledf2+0x84>
 80015c4:	45c4      	cmp	ip, r8
 80015c6:	d8d1      	bhi.n	800156c <__ledf2+0x78>
 80015c8:	2000      	movs	r0, #0
 80015ca:	45c4      	cmp	ip, r8
 80015cc:	d2d4      	bcs.n	8001578 <__ledf2+0x84>
 80015ce:	e7f5      	b.n	80015bc <__ledf2+0xc8>
 80015d0:	000007ff 	.word	0x000007ff

080015d4 <__aeabi_dmul>:
 80015d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d6:	4657      	mov	r7, sl
 80015d8:	464e      	mov	r6, r9
 80015da:	4645      	mov	r5, r8
 80015dc:	46de      	mov	lr, fp
 80015de:	b5e0      	push	{r5, r6, r7, lr}
 80015e0:	4698      	mov	r8, r3
 80015e2:	030c      	lsls	r4, r1, #12
 80015e4:	004b      	lsls	r3, r1, #1
 80015e6:	0006      	movs	r6, r0
 80015e8:	4692      	mov	sl, r2
 80015ea:	b087      	sub	sp, #28
 80015ec:	0b24      	lsrs	r4, r4, #12
 80015ee:	0d5b      	lsrs	r3, r3, #21
 80015f0:	0fcf      	lsrs	r7, r1, #31
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d06c      	beq.n	80016d0 <__aeabi_dmul+0xfc>
 80015f6:	4add      	ldr	r2, [pc, #884]	; (800196c <__aeabi_dmul+0x398>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d100      	bne.n	80015fe <__aeabi_dmul+0x2a>
 80015fc:	e086      	b.n	800170c <__aeabi_dmul+0x138>
 80015fe:	0f42      	lsrs	r2, r0, #29
 8001600:	00e4      	lsls	r4, r4, #3
 8001602:	4314      	orrs	r4, r2
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	0412      	lsls	r2, r2, #16
 8001608:	4314      	orrs	r4, r2
 800160a:	4ad9      	ldr	r2, [pc, #868]	; (8001970 <__aeabi_dmul+0x39c>)
 800160c:	00c5      	lsls	r5, r0, #3
 800160e:	4694      	mov	ip, r2
 8001610:	4463      	add	r3, ip
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2300      	movs	r3, #0
 8001616:	4699      	mov	r9, r3
 8001618:	469b      	mov	fp, r3
 800161a:	4643      	mov	r3, r8
 800161c:	4642      	mov	r2, r8
 800161e:	031e      	lsls	r6, r3, #12
 8001620:	0fd2      	lsrs	r2, r2, #31
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4650      	mov	r0, sl
 8001626:	4690      	mov	r8, r2
 8001628:	0b36      	lsrs	r6, r6, #12
 800162a:	0d5b      	lsrs	r3, r3, #21
 800162c:	d100      	bne.n	8001630 <__aeabi_dmul+0x5c>
 800162e:	e078      	b.n	8001722 <__aeabi_dmul+0x14e>
 8001630:	4ace      	ldr	r2, [pc, #824]	; (800196c <__aeabi_dmul+0x398>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01d      	beq.n	8001672 <__aeabi_dmul+0x9e>
 8001636:	49ce      	ldr	r1, [pc, #824]	; (8001970 <__aeabi_dmul+0x39c>)
 8001638:	0f42      	lsrs	r2, r0, #29
 800163a:	468c      	mov	ip, r1
 800163c:	9900      	ldr	r1, [sp, #0]
 800163e:	4463      	add	r3, ip
 8001640:	00f6      	lsls	r6, r6, #3
 8001642:	468c      	mov	ip, r1
 8001644:	4316      	orrs	r6, r2
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	449c      	add	ip, r3
 800164a:	0412      	lsls	r2, r2, #16
 800164c:	4663      	mov	r3, ip
 800164e:	4316      	orrs	r6, r2
 8001650:	00c2      	lsls	r2, r0, #3
 8001652:	2000      	movs	r0, #0
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	9900      	ldr	r1, [sp, #0]
 8001658:	4643      	mov	r3, r8
 800165a:	3101      	adds	r1, #1
 800165c:	468c      	mov	ip, r1
 800165e:	4649      	mov	r1, r9
 8001660:	407b      	eors	r3, r7
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	290f      	cmp	r1, #15
 8001666:	d900      	bls.n	800166a <__aeabi_dmul+0x96>
 8001668:	e07e      	b.n	8001768 <__aeabi_dmul+0x194>
 800166a:	4bc2      	ldr	r3, [pc, #776]	; (8001974 <__aeabi_dmul+0x3a0>)
 800166c:	0089      	lsls	r1, r1, #2
 800166e:	5859      	ldr	r1, [r3, r1]
 8001670:	468f      	mov	pc, r1
 8001672:	4652      	mov	r2, sl
 8001674:	9b00      	ldr	r3, [sp, #0]
 8001676:	4332      	orrs	r2, r6
 8001678:	d000      	beq.n	800167c <__aeabi_dmul+0xa8>
 800167a:	e156      	b.n	800192a <__aeabi_dmul+0x356>
 800167c:	49bb      	ldr	r1, [pc, #748]	; (800196c <__aeabi_dmul+0x398>)
 800167e:	2600      	movs	r6, #0
 8001680:	468c      	mov	ip, r1
 8001682:	4463      	add	r3, ip
 8001684:	4649      	mov	r1, r9
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2302      	movs	r3, #2
 800168a:	4319      	orrs	r1, r3
 800168c:	4689      	mov	r9, r1
 800168e:	2002      	movs	r0, #2
 8001690:	e7e1      	b.n	8001656 <__aeabi_dmul+0x82>
 8001692:	4643      	mov	r3, r8
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	0034      	movs	r4, r6
 8001698:	0015      	movs	r5, r2
 800169a:	4683      	mov	fp, r0
 800169c:	465b      	mov	r3, fp
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d05e      	beq.n	8001760 <__aeabi_dmul+0x18c>
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d100      	bne.n	80016a8 <__aeabi_dmul+0xd4>
 80016a6:	e1f3      	b.n	8001a90 <__aeabi_dmul+0x4bc>
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d000      	beq.n	80016ae <__aeabi_dmul+0xda>
 80016ac:	e118      	b.n	80018e0 <__aeabi_dmul+0x30c>
 80016ae:	2200      	movs	r2, #0
 80016b0:	2400      	movs	r4, #0
 80016b2:	2500      	movs	r5, #0
 80016b4:	9b01      	ldr	r3, [sp, #4]
 80016b6:	0512      	lsls	r2, r2, #20
 80016b8:	4322      	orrs	r2, r4
 80016ba:	07db      	lsls	r3, r3, #31
 80016bc:	431a      	orrs	r2, r3
 80016be:	0028      	movs	r0, r5
 80016c0:	0011      	movs	r1, r2
 80016c2:	b007      	add	sp, #28
 80016c4:	bcf0      	pop	{r4, r5, r6, r7}
 80016c6:	46bb      	mov	fp, r7
 80016c8:	46b2      	mov	sl, r6
 80016ca:	46a9      	mov	r9, r5
 80016cc:	46a0      	mov	r8, r4
 80016ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d0:	0025      	movs	r5, r4
 80016d2:	4305      	orrs	r5, r0
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dmul+0x104>
 80016d6:	e141      	b.n	800195c <__aeabi_dmul+0x388>
 80016d8:	2c00      	cmp	r4, #0
 80016da:	d100      	bne.n	80016de <__aeabi_dmul+0x10a>
 80016dc:	e1ad      	b.n	8001a3a <__aeabi_dmul+0x466>
 80016de:	0020      	movs	r0, r4
 80016e0:	f000 fe68 	bl	80023b4 <__clzsi2>
 80016e4:	0001      	movs	r1, r0
 80016e6:	0002      	movs	r2, r0
 80016e8:	390b      	subs	r1, #11
 80016ea:	231d      	movs	r3, #29
 80016ec:	0010      	movs	r0, r2
 80016ee:	1a5b      	subs	r3, r3, r1
 80016f0:	0031      	movs	r1, r6
 80016f2:	0035      	movs	r5, r6
 80016f4:	3808      	subs	r0, #8
 80016f6:	4084      	lsls	r4, r0
 80016f8:	40d9      	lsrs	r1, r3
 80016fa:	4085      	lsls	r5, r0
 80016fc:	430c      	orrs	r4, r1
 80016fe:	489e      	ldr	r0, [pc, #632]	; (8001978 <__aeabi_dmul+0x3a4>)
 8001700:	1a83      	subs	r3, r0, r2
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2300      	movs	r3, #0
 8001706:	4699      	mov	r9, r3
 8001708:	469b      	mov	fp, r3
 800170a:	e786      	b.n	800161a <__aeabi_dmul+0x46>
 800170c:	0005      	movs	r5, r0
 800170e:	4325      	orrs	r5, r4
 8001710:	d000      	beq.n	8001714 <__aeabi_dmul+0x140>
 8001712:	e11c      	b.n	800194e <__aeabi_dmul+0x37a>
 8001714:	2208      	movs	r2, #8
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2302      	movs	r3, #2
 800171a:	2400      	movs	r4, #0
 800171c:	4691      	mov	r9, r2
 800171e:	469b      	mov	fp, r3
 8001720:	e77b      	b.n	800161a <__aeabi_dmul+0x46>
 8001722:	4652      	mov	r2, sl
 8001724:	4332      	orrs	r2, r6
 8001726:	d100      	bne.n	800172a <__aeabi_dmul+0x156>
 8001728:	e10a      	b.n	8001940 <__aeabi_dmul+0x36c>
 800172a:	2e00      	cmp	r6, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_dmul+0x15c>
 800172e:	e176      	b.n	8001a1e <__aeabi_dmul+0x44a>
 8001730:	0030      	movs	r0, r6
 8001732:	f000 fe3f 	bl	80023b4 <__clzsi2>
 8001736:	0002      	movs	r2, r0
 8001738:	3a0b      	subs	r2, #11
 800173a:	231d      	movs	r3, #29
 800173c:	0001      	movs	r1, r0
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	4652      	mov	r2, sl
 8001742:	3908      	subs	r1, #8
 8001744:	40da      	lsrs	r2, r3
 8001746:	408e      	lsls	r6, r1
 8001748:	4316      	orrs	r6, r2
 800174a:	4652      	mov	r2, sl
 800174c:	408a      	lsls	r2, r1
 800174e:	9b00      	ldr	r3, [sp, #0]
 8001750:	4989      	ldr	r1, [pc, #548]	; (8001978 <__aeabi_dmul+0x3a4>)
 8001752:	1a18      	subs	r0, r3, r0
 8001754:	0003      	movs	r3, r0
 8001756:	468c      	mov	ip, r1
 8001758:	4463      	add	r3, ip
 800175a:	2000      	movs	r0, #0
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	e77a      	b.n	8001656 <__aeabi_dmul+0x82>
 8001760:	2400      	movs	r4, #0
 8001762:	2500      	movs	r5, #0
 8001764:	4a81      	ldr	r2, [pc, #516]	; (800196c <__aeabi_dmul+0x398>)
 8001766:	e7a5      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001768:	0c2f      	lsrs	r7, r5, #16
 800176a:	042d      	lsls	r5, r5, #16
 800176c:	0c2d      	lsrs	r5, r5, #16
 800176e:	002b      	movs	r3, r5
 8001770:	0c11      	lsrs	r1, r2, #16
 8001772:	0412      	lsls	r2, r2, #16
 8001774:	0c12      	lsrs	r2, r2, #16
 8001776:	4353      	muls	r3, r2
 8001778:	4698      	mov	r8, r3
 800177a:	0013      	movs	r3, r2
 800177c:	0028      	movs	r0, r5
 800177e:	437b      	muls	r3, r7
 8001780:	4699      	mov	r9, r3
 8001782:	4348      	muls	r0, r1
 8001784:	4448      	add	r0, r9
 8001786:	4683      	mov	fp, r0
 8001788:	4640      	mov	r0, r8
 800178a:	000b      	movs	r3, r1
 800178c:	0c00      	lsrs	r0, r0, #16
 800178e:	4682      	mov	sl, r0
 8001790:	4658      	mov	r0, fp
 8001792:	437b      	muls	r3, r7
 8001794:	4450      	add	r0, sl
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	4581      	cmp	r9, r0
 800179a:	d906      	bls.n	80017aa <__aeabi_dmul+0x1d6>
 800179c:	469a      	mov	sl, r3
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	025b      	lsls	r3, r3, #9
 80017a2:	4699      	mov	r9, r3
 80017a4:	44ca      	add	sl, r9
 80017a6:	4653      	mov	r3, sl
 80017a8:	9302      	str	r3, [sp, #8]
 80017aa:	0c03      	lsrs	r3, r0, #16
 80017ac:	469b      	mov	fp, r3
 80017ae:	4643      	mov	r3, r8
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	0400      	lsls	r0, r0, #16
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	4698      	mov	r8, r3
 80017b8:	0003      	movs	r3, r0
 80017ba:	4443      	add	r3, r8
 80017bc:	9304      	str	r3, [sp, #16]
 80017be:	0c33      	lsrs	r3, r6, #16
 80017c0:	4699      	mov	r9, r3
 80017c2:	002b      	movs	r3, r5
 80017c4:	0436      	lsls	r6, r6, #16
 80017c6:	0c36      	lsrs	r6, r6, #16
 80017c8:	4373      	muls	r3, r6
 80017ca:	4698      	mov	r8, r3
 80017cc:	0033      	movs	r3, r6
 80017ce:	437b      	muls	r3, r7
 80017d0:	469a      	mov	sl, r3
 80017d2:	464b      	mov	r3, r9
 80017d4:	435d      	muls	r5, r3
 80017d6:	435f      	muls	r7, r3
 80017d8:	4643      	mov	r3, r8
 80017da:	4455      	add	r5, sl
 80017dc:	0c18      	lsrs	r0, r3, #16
 80017de:	1940      	adds	r0, r0, r5
 80017e0:	4582      	cmp	sl, r0
 80017e2:	d903      	bls.n	80017ec <__aeabi_dmul+0x218>
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	025b      	lsls	r3, r3, #9
 80017e8:	469a      	mov	sl, r3
 80017ea:	4457      	add	r7, sl
 80017ec:	0c05      	lsrs	r5, r0, #16
 80017ee:	19eb      	adds	r3, r5, r7
 80017f0:	9305      	str	r3, [sp, #20]
 80017f2:	4643      	mov	r3, r8
 80017f4:	041d      	lsls	r5, r3, #16
 80017f6:	0c2d      	lsrs	r5, r5, #16
 80017f8:	0400      	lsls	r0, r0, #16
 80017fa:	1940      	adds	r0, r0, r5
 80017fc:	0c25      	lsrs	r5, r4, #16
 80017fe:	0424      	lsls	r4, r4, #16
 8001800:	0c24      	lsrs	r4, r4, #16
 8001802:	0027      	movs	r7, r4
 8001804:	4357      	muls	r7, r2
 8001806:	436a      	muls	r2, r5
 8001808:	4690      	mov	r8, r2
 800180a:	002a      	movs	r2, r5
 800180c:	0c3b      	lsrs	r3, r7, #16
 800180e:	469a      	mov	sl, r3
 8001810:	434a      	muls	r2, r1
 8001812:	4361      	muls	r1, r4
 8001814:	4441      	add	r1, r8
 8001816:	4451      	add	r1, sl
 8001818:	4483      	add	fp, r0
 800181a:	4588      	cmp	r8, r1
 800181c:	d903      	bls.n	8001826 <__aeabi_dmul+0x252>
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	4698      	mov	r8, r3
 8001824:	4442      	add	r2, r8
 8001826:	043f      	lsls	r7, r7, #16
 8001828:	0c0b      	lsrs	r3, r1, #16
 800182a:	0c3f      	lsrs	r7, r7, #16
 800182c:	0409      	lsls	r1, r1, #16
 800182e:	19c9      	adds	r1, r1, r7
 8001830:	0027      	movs	r7, r4
 8001832:	4698      	mov	r8, r3
 8001834:	464b      	mov	r3, r9
 8001836:	4377      	muls	r7, r6
 8001838:	435c      	muls	r4, r3
 800183a:	436e      	muls	r6, r5
 800183c:	435d      	muls	r5, r3
 800183e:	0c3b      	lsrs	r3, r7, #16
 8001840:	4699      	mov	r9, r3
 8001842:	19a4      	adds	r4, r4, r6
 8001844:	444c      	add	r4, r9
 8001846:	4442      	add	r2, r8
 8001848:	9503      	str	r5, [sp, #12]
 800184a:	42a6      	cmp	r6, r4
 800184c:	d904      	bls.n	8001858 <__aeabi_dmul+0x284>
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	025b      	lsls	r3, r3, #9
 8001852:	4698      	mov	r8, r3
 8001854:	4445      	add	r5, r8
 8001856:	9503      	str	r5, [sp, #12]
 8001858:	9b02      	ldr	r3, [sp, #8]
 800185a:	043f      	lsls	r7, r7, #16
 800185c:	445b      	add	r3, fp
 800185e:	001e      	movs	r6, r3
 8001860:	4283      	cmp	r3, r0
 8001862:	4180      	sbcs	r0, r0
 8001864:	0423      	lsls	r3, r4, #16
 8001866:	4698      	mov	r8, r3
 8001868:	9b05      	ldr	r3, [sp, #20]
 800186a:	0c3f      	lsrs	r7, r7, #16
 800186c:	4447      	add	r7, r8
 800186e:	4698      	mov	r8, r3
 8001870:	1876      	adds	r6, r6, r1
 8001872:	428e      	cmp	r6, r1
 8001874:	4189      	sbcs	r1, r1
 8001876:	4447      	add	r7, r8
 8001878:	4240      	negs	r0, r0
 800187a:	183d      	adds	r5, r7, r0
 800187c:	46a8      	mov	r8, r5
 800187e:	4693      	mov	fp, r2
 8001880:	4249      	negs	r1, r1
 8001882:	468a      	mov	sl, r1
 8001884:	44c3      	add	fp, r8
 8001886:	429f      	cmp	r7, r3
 8001888:	41bf      	sbcs	r7, r7
 800188a:	4580      	cmp	r8, r0
 800188c:	4180      	sbcs	r0, r0
 800188e:	9b03      	ldr	r3, [sp, #12]
 8001890:	44da      	add	sl, fp
 8001892:	4698      	mov	r8, r3
 8001894:	4653      	mov	r3, sl
 8001896:	4240      	negs	r0, r0
 8001898:	427f      	negs	r7, r7
 800189a:	4307      	orrs	r7, r0
 800189c:	0c24      	lsrs	r4, r4, #16
 800189e:	4593      	cmp	fp, r2
 80018a0:	4192      	sbcs	r2, r2
 80018a2:	458a      	cmp	sl, r1
 80018a4:	4189      	sbcs	r1, r1
 80018a6:	193f      	adds	r7, r7, r4
 80018a8:	0ddc      	lsrs	r4, r3, #23
 80018aa:	9b04      	ldr	r3, [sp, #16]
 80018ac:	0275      	lsls	r5, r6, #9
 80018ae:	431d      	orrs	r5, r3
 80018b0:	1e68      	subs	r0, r5, #1
 80018b2:	4185      	sbcs	r5, r0
 80018b4:	4653      	mov	r3, sl
 80018b6:	4252      	negs	r2, r2
 80018b8:	4249      	negs	r1, r1
 80018ba:	430a      	orrs	r2, r1
 80018bc:	18bf      	adds	r7, r7, r2
 80018be:	4447      	add	r7, r8
 80018c0:	0df6      	lsrs	r6, r6, #23
 80018c2:	027f      	lsls	r7, r7, #9
 80018c4:	4335      	orrs	r5, r6
 80018c6:	025a      	lsls	r2, r3, #9
 80018c8:	433c      	orrs	r4, r7
 80018ca:	4315      	orrs	r5, r2
 80018cc:	01fb      	lsls	r3, r7, #7
 80018ce:	d400      	bmi.n	80018d2 <__aeabi_dmul+0x2fe>
 80018d0:	e0c1      	b.n	8001a56 <__aeabi_dmul+0x482>
 80018d2:	2101      	movs	r1, #1
 80018d4:	086a      	lsrs	r2, r5, #1
 80018d6:	400d      	ands	r5, r1
 80018d8:	4315      	orrs	r5, r2
 80018da:	07e2      	lsls	r2, r4, #31
 80018dc:	4315      	orrs	r5, r2
 80018de:	0864      	lsrs	r4, r4, #1
 80018e0:	4926      	ldr	r1, [pc, #152]	; (800197c <__aeabi_dmul+0x3a8>)
 80018e2:	4461      	add	r1, ip
 80018e4:	2900      	cmp	r1, #0
 80018e6:	dd56      	ble.n	8001996 <__aeabi_dmul+0x3c2>
 80018e8:	076b      	lsls	r3, r5, #29
 80018ea:	d009      	beq.n	8001900 <__aeabi_dmul+0x32c>
 80018ec:	220f      	movs	r2, #15
 80018ee:	402a      	ands	r2, r5
 80018f0:	2a04      	cmp	r2, #4
 80018f2:	d005      	beq.n	8001900 <__aeabi_dmul+0x32c>
 80018f4:	1d2a      	adds	r2, r5, #4
 80018f6:	42aa      	cmp	r2, r5
 80018f8:	41ad      	sbcs	r5, r5
 80018fa:	426d      	negs	r5, r5
 80018fc:	1964      	adds	r4, r4, r5
 80018fe:	0015      	movs	r5, r2
 8001900:	01e3      	lsls	r3, r4, #7
 8001902:	d504      	bpl.n	800190e <__aeabi_dmul+0x33a>
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <__aeabi_dmul+0x3ac>)
 8001908:	00c9      	lsls	r1, r1, #3
 800190a:	4014      	ands	r4, r2
 800190c:	4461      	add	r1, ip
 800190e:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <__aeabi_dmul+0x3b0>)
 8001910:	4291      	cmp	r1, r2
 8001912:	dd00      	ble.n	8001916 <__aeabi_dmul+0x342>
 8001914:	e724      	b.n	8001760 <__aeabi_dmul+0x18c>
 8001916:	0762      	lsls	r2, r4, #29
 8001918:	08ed      	lsrs	r5, r5, #3
 800191a:	0264      	lsls	r4, r4, #9
 800191c:	0549      	lsls	r1, r1, #21
 800191e:	4315      	orrs	r5, r2
 8001920:	0b24      	lsrs	r4, r4, #12
 8001922:	0d4a      	lsrs	r2, r1, #21
 8001924:	e6c6      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001926:	9701      	str	r7, [sp, #4]
 8001928:	e6b8      	b.n	800169c <__aeabi_dmul+0xc8>
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <__aeabi_dmul+0x398>)
 800192c:	2003      	movs	r0, #3
 800192e:	4694      	mov	ip, r2
 8001930:	4463      	add	r3, ip
 8001932:	464a      	mov	r2, r9
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2303      	movs	r3, #3
 8001938:	431a      	orrs	r2, r3
 800193a:	4691      	mov	r9, r2
 800193c:	4652      	mov	r2, sl
 800193e:	e68a      	b.n	8001656 <__aeabi_dmul+0x82>
 8001940:	4649      	mov	r1, r9
 8001942:	2301      	movs	r3, #1
 8001944:	4319      	orrs	r1, r3
 8001946:	4689      	mov	r9, r1
 8001948:	2600      	movs	r6, #0
 800194a:	2001      	movs	r0, #1
 800194c:	e683      	b.n	8001656 <__aeabi_dmul+0x82>
 800194e:	220c      	movs	r2, #12
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2303      	movs	r3, #3
 8001954:	0005      	movs	r5, r0
 8001956:	4691      	mov	r9, r2
 8001958:	469b      	mov	fp, r3
 800195a:	e65e      	b.n	800161a <__aeabi_dmul+0x46>
 800195c:	2304      	movs	r3, #4
 800195e:	4699      	mov	r9, r3
 8001960:	2300      	movs	r3, #0
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	2400      	movs	r4, #0
 8001968:	469b      	mov	fp, r3
 800196a:	e656      	b.n	800161a <__aeabi_dmul+0x46>
 800196c:	000007ff 	.word	0x000007ff
 8001970:	fffffc01 	.word	0xfffffc01
 8001974:	0800d77c 	.word	0x0800d77c
 8001978:	fffffc0d 	.word	0xfffffc0d
 800197c:	000003ff 	.word	0x000003ff
 8001980:	feffffff 	.word	0xfeffffff
 8001984:	000007fe 	.word	0x000007fe
 8001988:	2300      	movs	r3, #0
 800198a:	2480      	movs	r4, #128	; 0x80
 800198c:	2500      	movs	r5, #0
 800198e:	4a44      	ldr	r2, [pc, #272]	; (8001aa0 <__aeabi_dmul+0x4cc>)
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	0324      	lsls	r4, r4, #12
 8001994:	e68e      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001996:	2001      	movs	r0, #1
 8001998:	1a40      	subs	r0, r0, r1
 800199a:	2838      	cmp	r0, #56	; 0x38
 800199c:	dd00      	ble.n	80019a0 <__aeabi_dmul+0x3cc>
 800199e:	e686      	b.n	80016ae <__aeabi_dmul+0xda>
 80019a0:	281f      	cmp	r0, #31
 80019a2:	dd5b      	ble.n	8001a5c <__aeabi_dmul+0x488>
 80019a4:	221f      	movs	r2, #31
 80019a6:	0023      	movs	r3, r4
 80019a8:	4252      	negs	r2, r2
 80019aa:	1a51      	subs	r1, r2, r1
 80019ac:	40cb      	lsrs	r3, r1
 80019ae:	0019      	movs	r1, r3
 80019b0:	2820      	cmp	r0, #32
 80019b2:	d003      	beq.n	80019bc <__aeabi_dmul+0x3e8>
 80019b4:	4a3b      	ldr	r2, [pc, #236]	; (8001aa4 <__aeabi_dmul+0x4d0>)
 80019b6:	4462      	add	r2, ip
 80019b8:	4094      	lsls	r4, r2
 80019ba:	4325      	orrs	r5, r4
 80019bc:	1e6a      	subs	r2, r5, #1
 80019be:	4195      	sbcs	r5, r2
 80019c0:	002a      	movs	r2, r5
 80019c2:	430a      	orrs	r2, r1
 80019c4:	2107      	movs	r1, #7
 80019c6:	000d      	movs	r5, r1
 80019c8:	2400      	movs	r4, #0
 80019ca:	4015      	ands	r5, r2
 80019cc:	4211      	tst	r1, r2
 80019ce:	d05b      	beq.n	8001a88 <__aeabi_dmul+0x4b4>
 80019d0:	210f      	movs	r1, #15
 80019d2:	2400      	movs	r4, #0
 80019d4:	4011      	ands	r1, r2
 80019d6:	2904      	cmp	r1, #4
 80019d8:	d053      	beq.n	8001a82 <__aeabi_dmul+0x4ae>
 80019da:	1d11      	adds	r1, r2, #4
 80019dc:	4291      	cmp	r1, r2
 80019de:	4192      	sbcs	r2, r2
 80019e0:	4252      	negs	r2, r2
 80019e2:	18a4      	adds	r4, r4, r2
 80019e4:	000a      	movs	r2, r1
 80019e6:	0223      	lsls	r3, r4, #8
 80019e8:	d54b      	bpl.n	8001a82 <__aeabi_dmul+0x4ae>
 80019ea:	2201      	movs	r2, #1
 80019ec:	2400      	movs	r4, #0
 80019ee:	2500      	movs	r5, #0
 80019f0:	e660      	b.n	80016b4 <__aeabi_dmul+0xe0>
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	031b      	lsls	r3, r3, #12
 80019f6:	421c      	tst	r4, r3
 80019f8:	d009      	beq.n	8001a0e <__aeabi_dmul+0x43a>
 80019fa:	421e      	tst	r6, r3
 80019fc:	d107      	bne.n	8001a0e <__aeabi_dmul+0x43a>
 80019fe:	4333      	orrs	r3, r6
 8001a00:	031c      	lsls	r4, r3, #12
 8001a02:	4643      	mov	r3, r8
 8001a04:	0015      	movs	r5, r2
 8001a06:	0b24      	lsrs	r4, r4, #12
 8001a08:	4a25      	ldr	r2, [pc, #148]	; (8001aa0 <__aeabi_dmul+0x4cc>)
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	e652      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	4314      	orrs	r4, r2
 8001a14:	0324      	lsls	r4, r4, #12
 8001a16:	4a22      	ldr	r2, [pc, #136]	; (8001aa0 <__aeabi_dmul+0x4cc>)
 8001a18:	0b24      	lsrs	r4, r4, #12
 8001a1a:	9701      	str	r7, [sp, #4]
 8001a1c:	e64a      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001a1e:	f000 fcc9 	bl	80023b4 <__clzsi2>
 8001a22:	0003      	movs	r3, r0
 8001a24:	001a      	movs	r2, r3
 8001a26:	3215      	adds	r2, #21
 8001a28:	3020      	adds	r0, #32
 8001a2a:	2a1c      	cmp	r2, #28
 8001a2c:	dc00      	bgt.n	8001a30 <__aeabi_dmul+0x45c>
 8001a2e:	e684      	b.n	800173a <__aeabi_dmul+0x166>
 8001a30:	4656      	mov	r6, sl
 8001a32:	3b08      	subs	r3, #8
 8001a34:	2200      	movs	r2, #0
 8001a36:	409e      	lsls	r6, r3
 8001a38:	e689      	b.n	800174e <__aeabi_dmul+0x17a>
 8001a3a:	f000 fcbb 	bl	80023b4 <__clzsi2>
 8001a3e:	0001      	movs	r1, r0
 8001a40:	0002      	movs	r2, r0
 8001a42:	3115      	adds	r1, #21
 8001a44:	3220      	adds	r2, #32
 8001a46:	291c      	cmp	r1, #28
 8001a48:	dc00      	bgt.n	8001a4c <__aeabi_dmul+0x478>
 8001a4a:	e64e      	b.n	80016ea <__aeabi_dmul+0x116>
 8001a4c:	0034      	movs	r4, r6
 8001a4e:	3808      	subs	r0, #8
 8001a50:	2500      	movs	r5, #0
 8001a52:	4084      	lsls	r4, r0
 8001a54:	e653      	b.n	80016fe <__aeabi_dmul+0x12a>
 8001a56:	9b00      	ldr	r3, [sp, #0]
 8001a58:	469c      	mov	ip, r3
 8001a5a:	e741      	b.n	80018e0 <__aeabi_dmul+0x30c>
 8001a5c:	4912      	ldr	r1, [pc, #72]	; (8001aa8 <__aeabi_dmul+0x4d4>)
 8001a5e:	0022      	movs	r2, r4
 8001a60:	4461      	add	r1, ip
 8001a62:	002e      	movs	r6, r5
 8001a64:	408d      	lsls	r5, r1
 8001a66:	408a      	lsls	r2, r1
 8001a68:	40c6      	lsrs	r6, r0
 8001a6a:	1e69      	subs	r1, r5, #1
 8001a6c:	418d      	sbcs	r5, r1
 8001a6e:	4332      	orrs	r2, r6
 8001a70:	432a      	orrs	r2, r5
 8001a72:	40c4      	lsrs	r4, r0
 8001a74:	0753      	lsls	r3, r2, #29
 8001a76:	d0b6      	beq.n	80019e6 <__aeabi_dmul+0x412>
 8001a78:	210f      	movs	r1, #15
 8001a7a:	4011      	ands	r1, r2
 8001a7c:	2904      	cmp	r1, #4
 8001a7e:	d1ac      	bne.n	80019da <__aeabi_dmul+0x406>
 8001a80:	e7b1      	b.n	80019e6 <__aeabi_dmul+0x412>
 8001a82:	0765      	lsls	r5, r4, #29
 8001a84:	0264      	lsls	r4, r4, #9
 8001a86:	0b24      	lsrs	r4, r4, #12
 8001a88:	08d2      	lsrs	r2, r2, #3
 8001a8a:	4315      	orrs	r5, r2
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	e611      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	0312      	lsls	r2, r2, #12
 8001a94:	4314      	orrs	r4, r2
 8001a96:	0324      	lsls	r4, r4, #12
 8001a98:	4a01      	ldr	r2, [pc, #4]	; (8001aa0 <__aeabi_dmul+0x4cc>)
 8001a9a:	0b24      	lsrs	r4, r4, #12
 8001a9c:	e60a      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	000007ff 	.word	0x000007ff
 8001aa4:	0000043e 	.word	0x0000043e
 8001aa8:	0000041e 	.word	0x0000041e

08001aac <__aeabi_dsub>:
 8001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aae:	4657      	mov	r7, sl
 8001ab0:	464e      	mov	r6, r9
 8001ab2:	4645      	mov	r5, r8
 8001ab4:	46de      	mov	lr, fp
 8001ab6:	0004      	movs	r4, r0
 8001ab8:	b5e0      	push	{r5, r6, r7, lr}
 8001aba:	001f      	movs	r7, r3
 8001abc:	0010      	movs	r0, r2
 8001abe:	030b      	lsls	r3, r1, #12
 8001ac0:	0f62      	lsrs	r2, r4, #29
 8001ac2:	004e      	lsls	r6, r1, #1
 8001ac4:	0fcd      	lsrs	r5, r1, #31
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	0339      	lsls	r1, r7, #12
 8001aca:	4313      	orrs	r3, r2
 8001acc:	0a49      	lsrs	r1, r1, #9
 8001ace:	00e2      	lsls	r2, r4, #3
 8001ad0:	0f44      	lsrs	r4, r0, #29
 8001ad2:	4321      	orrs	r1, r4
 8001ad4:	4cc2      	ldr	r4, [pc, #776]	; (8001de0 <__aeabi_dsub+0x334>)
 8001ad6:	4691      	mov	r9, r2
 8001ad8:	4692      	mov	sl, r2
 8001ada:	00c0      	lsls	r0, r0, #3
 8001adc:	007a      	lsls	r2, r7, #1
 8001ade:	4680      	mov	r8, r0
 8001ae0:	0d76      	lsrs	r6, r6, #21
 8001ae2:	0d52      	lsrs	r2, r2, #21
 8001ae4:	0fff      	lsrs	r7, r7, #31
 8001ae6:	42a2      	cmp	r2, r4
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dsub+0x40>
 8001aea:	e0b4      	b.n	8001c56 <__aeabi_dsub+0x1aa>
 8001aec:	2401      	movs	r4, #1
 8001aee:	4067      	eors	r7, r4
 8001af0:	46bb      	mov	fp, r7
 8001af2:	42bd      	cmp	r5, r7
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dsub+0x4c>
 8001af6:	e088      	b.n	8001c0a <__aeabi_dsub+0x15e>
 8001af8:	1ab4      	subs	r4, r6, r2
 8001afa:	46a4      	mov	ip, r4
 8001afc:	2c00      	cmp	r4, #0
 8001afe:	dc00      	bgt.n	8001b02 <__aeabi_dsub+0x56>
 8001b00:	e0b2      	b.n	8001c68 <__aeabi_dsub+0x1bc>
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	d100      	bne.n	8001b08 <__aeabi_dsub+0x5c>
 8001b06:	e0c5      	b.n	8001c94 <__aeabi_dsub+0x1e8>
 8001b08:	4ab5      	ldr	r2, [pc, #724]	; (8001de0 <__aeabi_dsub+0x334>)
 8001b0a:	4296      	cmp	r6, r2
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x64>
 8001b0e:	e28b      	b.n	8002028 <__aeabi_dsub+0x57c>
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	0412      	lsls	r2, r2, #16
 8001b14:	4311      	orrs	r1, r2
 8001b16:	4662      	mov	r2, ip
 8001b18:	2a38      	cmp	r2, #56	; 0x38
 8001b1a:	dd00      	ble.n	8001b1e <__aeabi_dsub+0x72>
 8001b1c:	e1a1      	b.n	8001e62 <__aeabi_dsub+0x3b6>
 8001b1e:	2a1f      	cmp	r2, #31
 8001b20:	dd00      	ble.n	8001b24 <__aeabi_dsub+0x78>
 8001b22:	e216      	b.n	8001f52 <__aeabi_dsub+0x4a6>
 8001b24:	2720      	movs	r7, #32
 8001b26:	000c      	movs	r4, r1
 8001b28:	1abf      	subs	r7, r7, r2
 8001b2a:	40bc      	lsls	r4, r7
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	46a0      	mov	r8, r4
 8001b30:	4664      	mov	r4, ip
 8001b32:	40b8      	lsls	r0, r7
 8001b34:	40e2      	lsrs	r2, r4
 8001b36:	4644      	mov	r4, r8
 8001b38:	4314      	orrs	r4, r2
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	1e50      	subs	r0, r2, #1
 8001b3e:	4182      	sbcs	r2, r0
 8001b40:	4660      	mov	r0, ip
 8001b42:	40c1      	lsrs	r1, r0
 8001b44:	4322      	orrs	r2, r4
 8001b46:	1a5b      	subs	r3, r3, r1
 8001b48:	4649      	mov	r1, r9
 8001b4a:	1a8c      	subs	r4, r1, r2
 8001b4c:	45a1      	cmp	r9, r4
 8001b4e:	4192      	sbcs	r2, r2
 8001b50:	4252      	negs	r2, r2
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	4698      	mov	r8, r3
 8001b56:	4643      	mov	r3, r8
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	d400      	bmi.n	8001b5e <__aeabi_dsub+0xb2>
 8001b5c:	e117      	b.n	8001d8e <__aeabi_dsub+0x2e2>
 8001b5e:	4643      	mov	r3, r8
 8001b60:	025b      	lsls	r3, r3, #9
 8001b62:	0a5b      	lsrs	r3, r3, #9
 8001b64:	4698      	mov	r8, r3
 8001b66:	4643      	mov	r3, r8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dsub+0xc2>
 8001b6c:	e16c      	b.n	8001e48 <__aeabi_dsub+0x39c>
 8001b6e:	4640      	mov	r0, r8
 8001b70:	f000 fc20 	bl	80023b4 <__clzsi2>
 8001b74:	0002      	movs	r2, r0
 8001b76:	3a08      	subs	r2, #8
 8001b78:	2120      	movs	r1, #32
 8001b7a:	0020      	movs	r0, r4
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	1a89      	subs	r1, r1, r2
 8001b80:	4093      	lsls	r3, r2
 8001b82:	40c8      	lsrs	r0, r1
 8001b84:	4094      	lsls	r4, r2
 8001b86:	4303      	orrs	r3, r0
 8001b88:	4296      	cmp	r6, r2
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dsub+0xe2>
 8001b8c:	e157      	b.n	8001e3e <__aeabi_dsub+0x392>
 8001b8e:	1b96      	subs	r6, r2, r6
 8001b90:	1c71      	adds	r1, r6, #1
 8001b92:	291f      	cmp	r1, #31
 8001b94:	dd00      	ble.n	8001b98 <__aeabi_dsub+0xec>
 8001b96:	e1cb      	b.n	8001f30 <__aeabi_dsub+0x484>
 8001b98:	2220      	movs	r2, #32
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	0026      	movs	r6, r4
 8001b9e:	1a52      	subs	r2, r2, r1
 8001ba0:	4094      	lsls	r4, r2
 8001ba2:	4090      	lsls	r0, r2
 8001ba4:	40ce      	lsrs	r6, r1
 8001ba6:	40cb      	lsrs	r3, r1
 8001ba8:	1e62      	subs	r2, r4, #1
 8001baa:	4194      	sbcs	r4, r2
 8001bac:	4330      	orrs	r0, r6
 8001bae:	4698      	mov	r8, r3
 8001bb0:	2600      	movs	r6, #0
 8001bb2:	4304      	orrs	r4, r0
 8001bb4:	0763      	lsls	r3, r4, #29
 8001bb6:	d009      	beq.n	8001bcc <__aeabi_dsub+0x120>
 8001bb8:	230f      	movs	r3, #15
 8001bba:	4023      	ands	r3, r4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d005      	beq.n	8001bcc <__aeabi_dsub+0x120>
 8001bc0:	1d23      	adds	r3, r4, #4
 8001bc2:	42a3      	cmp	r3, r4
 8001bc4:	41a4      	sbcs	r4, r4
 8001bc6:	4264      	negs	r4, r4
 8001bc8:	44a0      	add	r8, r4
 8001bca:	001c      	movs	r4, r3
 8001bcc:	4643      	mov	r3, r8
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	d400      	bmi.n	8001bd4 <__aeabi_dsub+0x128>
 8001bd2:	e0df      	b.n	8001d94 <__aeabi_dsub+0x2e8>
 8001bd4:	4b82      	ldr	r3, [pc, #520]	; (8001de0 <__aeabi_dsub+0x334>)
 8001bd6:	3601      	adds	r6, #1
 8001bd8:	429e      	cmp	r6, r3
 8001bda:	d100      	bne.n	8001bde <__aeabi_dsub+0x132>
 8001bdc:	e0fb      	b.n	8001dd6 <__aeabi_dsub+0x32a>
 8001bde:	4642      	mov	r2, r8
 8001be0:	4b80      	ldr	r3, [pc, #512]	; (8001de4 <__aeabi_dsub+0x338>)
 8001be2:	08e4      	lsrs	r4, r4, #3
 8001be4:	401a      	ands	r2, r3
 8001be6:	0013      	movs	r3, r2
 8001be8:	0571      	lsls	r1, r6, #21
 8001bea:	0752      	lsls	r2, r2, #29
 8001bec:	025b      	lsls	r3, r3, #9
 8001bee:	4322      	orrs	r2, r4
 8001bf0:	0b1b      	lsrs	r3, r3, #12
 8001bf2:	0d49      	lsrs	r1, r1, #21
 8001bf4:	0509      	lsls	r1, r1, #20
 8001bf6:	07ed      	lsls	r5, r5, #31
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	4329      	orrs	r1, r5
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	bcf0      	pop	{r4, r5, r6, r7}
 8001c00:	46bb      	mov	fp, r7
 8001c02:	46b2      	mov	sl, r6
 8001c04:	46a9      	mov	r9, r5
 8001c06:	46a0      	mov	r8, r4
 8001c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c0a:	1ab4      	subs	r4, r6, r2
 8001c0c:	46a4      	mov	ip, r4
 8001c0e:	2c00      	cmp	r4, #0
 8001c10:	dd58      	ble.n	8001cc4 <__aeabi_dsub+0x218>
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x16c>
 8001c16:	e09e      	b.n	8001d56 <__aeabi_dsub+0x2aa>
 8001c18:	4a71      	ldr	r2, [pc, #452]	; (8001de0 <__aeabi_dsub+0x334>)
 8001c1a:	4296      	cmp	r6, r2
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x174>
 8001c1e:	e13b      	b.n	8001e98 <__aeabi_dsub+0x3ec>
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	0412      	lsls	r2, r2, #16
 8001c24:	4311      	orrs	r1, r2
 8001c26:	4662      	mov	r2, ip
 8001c28:	2a38      	cmp	r2, #56	; 0x38
 8001c2a:	dd00      	ble.n	8001c2e <__aeabi_dsub+0x182>
 8001c2c:	e0c1      	b.n	8001db2 <__aeabi_dsub+0x306>
 8001c2e:	2a1f      	cmp	r2, #31
 8001c30:	dc00      	bgt.n	8001c34 <__aeabi_dsub+0x188>
 8001c32:	e1bb      	b.n	8001fac <__aeabi_dsub+0x500>
 8001c34:	000c      	movs	r4, r1
 8001c36:	3a20      	subs	r2, #32
 8001c38:	40d4      	lsrs	r4, r2
 8001c3a:	0022      	movs	r2, r4
 8001c3c:	4664      	mov	r4, ip
 8001c3e:	2c20      	cmp	r4, #32
 8001c40:	d004      	beq.n	8001c4c <__aeabi_dsub+0x1a0>
 8001c42:	2740      	movs	r7, #64	; 0x40
 8001c44:	1b3f      	subs	r7, r7, r4
 8001c46:	40b9      	lsls	r1, r7
 8001c48:	4308      	orrs	r0, r1
 8001c4a:	4680      	mov	r8, r0
 8001c4c:	4644      	mov	r4, r8
 8001c4e:	1e61      	subs	r1, r4, #1
 8001c50:	418c      	sbcs	r4, r1
 8001c52:	4314      	orrs	r4, r2
 8001c54:	e0b1      	b.n	8001dba <__aeabi_dsub+0x30e>
 8001c56:	000c      	movs	r4, r1
 8001c58:	4304      	orrs	r4, r0
 8001c5a:	d02a      	beq.n	8001cb2 <__aeabi_dsub+0x206>
 8001c5c:	46bb      	mov	fp, r7
 8001c5e:	42bd      	cmp	r5, r7
 8001c60:	d02d      	beq.n	8001cbe <__aeabi_dsub+0x212>
 8001c62:	4c61      	ldr	r4, [pc, #388]	; (8001de8 <__aeabi_dsub+0x33c>)
 8001c64:	46a4      	mov	ip, r4
 8001c66:	44b4      	add	ip, r6
 8001c68:	4664      	mov	r4, ip
 8001c6a:	2c00      	cmp	r4, #0
 8001c6c:	d05c      	beq.n	8001d28 <__aeabi_dsub+0x27c>
 8001c6e:	1b94      	subs	r4, r2, r6
 8001c70:	46a4      	mov	ip, r4
 8001c72:	2e00      	cmp	r6, #0
 8001c74:	d000      	beq.n	8001c78 <__aeabi_dsub+0x1cc>
 8001c76:	e115      	b.n	8001ea4 <__aeabi_dsub+0x3f8>
 8001c78:	464d      	mov	r5, r9
 8001c7a:	431d      	orrs	r5, r3
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_dsub+0x1d4>
 8001c7e:	e1c3      	b.n	8002008 <__aeabi_dsub+0x55c>
 8001c80:	1e65      	subs	r5, r4, #1
 8001c82:	2c01      	cmp	r4, #1
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dsub+0x1dc>
 8001c86:	e20c      	b.n	80020a2 <__aeabi_dsub+0x5f6>
 8001c88:	4e55      	ldr	r6, [pc, #340]	; (8001de0 <__aeabi_dsub+0x334>)
 8001c8a:	42b4      	cmp	r4, r6
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x1e4>
 8001c8e:	e1f8      	b.n	8002082 <__aeabi_dsub+0x5d6>
 8001c90:	46ac      	mov	ip, r5
 8001c92:	e10e      	b.n	8001eb2 <__aeabi_dsub+0x406>
 8001c94:	000a      	movs	r2, r1
 8001c96:	4302      	orrs	r2, r0
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x1f0>
 8001c9a:	e136      	b.n	8001f0a <__aeabi_dsub+0x45e>
 8001c9c:	0022      	movs	r2, r4
 8001c9e:	3a01      	subs	r2, #1
 8001ca0:	2c01      	cmp	r4, #1
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_dsub+0x1fa>
 8001ca4:	e1c6      	b.n	8002034 <__aeabi_dsub+0x588>
 8001ca6:	4c4e      	ldr	r4, [pc, #312]	; (8001de0 <__aeabi_dsub+0x334>)
 8001ca8:	45a4      	cmp	ip, r4
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0x202>
 8001cac:	e0f4      	b.n	8001e98 <__aeabi_dsub+0x3ec>
 8001cae:	4694      	mov	ip, r2
 8001cb0:	e731      	b.n	8001b16 <__aeabi_dsub+0x6a>
 8001cb2:	2401      	movs	r4, #1
 8001cb4:	4067      	eors	r7, r4
 8001cb6:	46bb      	mov	fp, r7
 8001cb8:	42bd      	cmp	r5, r7
 8001cba:	d000      	beq.n	8001cbe <__aeabi_dsub+0x212>
 8001cbc:	e71c      	b.n	8001af8 <__aeabi_dsub+0x4c>
 8001cbe:	4c4a      	ldr	r4, [pc, #296]	; (8001de8 <__aeabi_dsub+0x33c>)
 8001cc0:	46a4      	mov	ip, r4
 8001cc2:	44b4      	add	ip, r6
 8001cc4:	4664      	mov	r4, ip
 8001cc6:	2c00      	cmp	r4, #0
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x220>
 8001cca:	e0cf      	b.n	8001e6c <__aeabi_dsub+0x3c0>
 8001ccc:	1b94      	subs	r4, r2, r6
 8001cce:	46a4      	mov	ip, r4
 8001cd0:	2e00      	cmp	r6, #0
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dsub+0x22a>
 8001cd4:	e15c      	b.n	8001f90 <__aeabi_dsub+0x4e4>
 8001cd6:	4e42      	ldr	r6, [pc, #264]	; (8001de0 <__aeabi_dsub+0x334>)
 8001cd8:	42b2      	cmp	r2, r6
 8001cda:	d100      	bne.n	8001cde <__aeabi_dsub+0x232>
 8001cdc:	e1ec      	b.n	80020b8 <__aeabi_dsub+0x60c>
 8001cde:	2680      	movs	r6, #128	; 0x80
 8001ce0:	0436      	lsls	r6, r6, #16
 8001ce2:	4333      	orrs	r3, r6
 8001ce4:	4664      	mov	r4, ip
 8001ce6:	2c38      	cmp	r4, #56	; 0x38
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0x240>
 8001cea:	e1b3      	b.n	8002054 <__aeabi_dsub+0x5a8>
 8001cec:	2c1f      	cmp	r4, #31
 8001cee:	dd00      	ble.n	8001cf2 <__aeabi_dsub+0x246>
 8001cf0:	e238      	b.n	8002164 <__aeabi_dsub+0x6b8>
 8001cf2:	2620      	movs	r6, #32
 8001cf4:	1b36      	subs	r6, r6, r4
 8001cf6:	001c      	movs	r4, r3
 8001cf8:	40b4      	lsls	r4, r6
 8001cfa:	464f      	mov	r7, r9
 8001cfc:	46a0      	mov	r8, r4
 8001cfe:	4664      	mov	r4, ip
 8001d00:	40e7      	lsrs	r7, r4
 8001d02:	4644      	mov	r4, r8
 8001d04:	433c      	orrs	r4, r7
 8001d06:	464f      	mov	r7, r9
 8001d08:	40b7      	lsls	r7, r6
 8001d0a:	003e      	movs	r6, r7
 8001d0c:	1e77      	subs	r7, r6, #1
 8001d0e:	41be      	sbcs	r6, r7
 8001d10:	4334      	orrs	r4, r6
 8001d12:	4666      	mov	r6, ip
 8001d14:	40f3      	lsrs	r3, r6
 8001d16:	18c9      	adds	r1, r1, r3
 8001d18:	1824      	adds	r4, r4, r0
 8001d1a:	4284      	cmp	r4, r0
 8001d1c:	419b      	sbcs	r3, r3
 8001d1e:	425b      	negs	r3, r3
 8001d20:	4698      	mov	r8, r3
 8001d22:	0016      	movs	r6, r2
 8001d24:	4488      	add	r8, r1
 8001d26:	e04e      	b.n	8001dc6 <__aeabi_dsub+0x31a>
 8001d28:	4a30      	ldr	r2, [pc, #192]	; (8001dec <__aeabi_dsub+0x340>)
 8001d2a:	1c74      	adds	r4, r6, #1
 8001d2c:	4214      	tst	r4, r2
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_dsub+0x286>
 8001d30:	e0d6      	b.n	8001ee0 <__aeabi_dsub+0x434>
 8001d32:	464a      	mov	r2, r9
 8001d34:	431a      	orrs	r2, r3
 8001d36:	2e00      	cmp	r6, #0
 8001d38:	d000      	beq.n	8001d3c <__aeabi_dsub+0x290>
 8001d3a:	e15b      	b.n	8001ff4 <__aeabi_dsub+0x548>
 8001d3c:	2a00      	cmp	r2, #0
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x296>
 8001d40:	e1a5      	b.n	800208e <__aeabi_dsub+0x5e2>
 8001d42:	000a      	movs	r2, r1
 8001d44:	4302      	orrs	r2, r0
 8001d46:	d000      	beq.n	8001d4a <__aeabi_dsub+0x29e>
 8001d48:	e1bb      	b.n	80020c2 <__aeabi_dsub+0x616>
 8001d4a:	464a      	mov	r2, r9
 8001d4c:	0759      	lsls	r1, r3, #29
 8001d4e:	08d2      	lsrs	r2, r2, #3
 8001d50:	430a      	orrs	r2, r1
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	e027      	b.n	8001da6 <__aeabi_dsub+0x2fa>
 8001d56:	000a      	movs	r2, r1
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x2b2>
 8001d5c:	e174      	b.n	8002048 <__aeabi_dsub+0x59c>
 8001d5e:	0022      	movs	r2, r4
 8001d60:	3a01      	subs	r2, #1
 8001d62:	2c01      	cmp	r4, #1
 8001d64:	d005      	beq.n	8001d72 <__aeabi_dsub+0x2c6>
 8001d66:	4c1e      	ldr	r4, [pc, #120]	; (8001de0 <__aeabi_dsub+0x334>)
 8001d68:	45a4      	cmp	ip, r4
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x2c2>
 8001d6c:	e094      	b.n	8001e98 <__aeabi_dsub+0x3ec>
 8001d6e:	4694      	mov	ip, r2
 8001d70:	e759      	b.n	8001c26 <__aeabi_dsub+0x17a>
 8001d72:	4448      	add	r0, r9
 8001d74:	4548      	cmp	r0, r9
 8001d76:	4192      	sbcs	r2, r2
 8001d78:	185b      	adds	r3, r3, r1
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	0004      	movs	r4, r0
 8001d7e:	4252      	negs	r2, r2
 8001d80:	4490      	add	r8, r2
 8001d82:	4643      	mov	r3, r8
 8001d84:	2602      	movs	r6, #2
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	d500      	bpl.n	8001d8c <__aeabi_dsub+0x2e0>
 8001d8a:	e0c4      	b.n	8001f16 <__aeabi_dsub+0x46a>
 8001d8c:	3e01      	subs	r6, #1
 8001d8e:	0763      	lsls	r3, r4, #29
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x2e8>
 8001d92:	e711      	b.n	8001bb8 <__aeabi_dsub+0x10c>
 8001d94:	4643      	mov	r3, r8
 8001d96:	46b4      	mov	ip, r6
 8001d98:	0759      	lsls	r1, r3, #29
 8001d9a:	08e2      	lsrs	r2, r4, #3
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	08db      	lsrs	r3, r3, #3
 8001da0:	490f      	ldr	r1, [pc, #60]	; (8001de0 <__aeabi_dsub+0x334>)
 8001da2:	458c      	cmp	ip, r1
 8001da4:	d040      	beq.n	8001e28 <__aeabi_dsub+0x37c>
 8001da6:	4661      	mov	r1, ip
 8001da8:	031b      	lsls	r3, r3, #12
 8001daa:	0549      	lsls	r1, r1, #21
 8001dac:	0b1b      	lsrs	r3, r3, #12
 8001dae:	0d49      	lsrs	r1, r1, #21
 8001db0:	e720      	b.n	8001bf4 <__aeabi_dsub+0x148>
 8001db2:	4301      	orrs	r1, r0
 8001db4:	000c      	movs	r4, r1
 8001db6:	1e61      	subs	r1, r4, #1
 8001db8:	418c      	sbcs	r4, r1
 8001dba:	444c      	add	r4, r9
 8001dbc:	454c      	cmp	r4, r9
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4690      	mov	r8, r2
 8001dc4:	4498      	add	r8, r3
 8001dc6:	4643      	mov	r3, r8
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	d5e0      	bpl.n	8001d8e <__aeabi_dsub+0x2e2>
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <__aeabi_dsub+0x334>)
 8001dce:	3601      	adds	r6, #1
 8001dd0:	429e      	cmp	r6, r3
 8001dd2:	d000      	beq.n	8001dd6 <__aeabi_dsub+0x32a>
 8001dd4:	e09f      	b.n	8001f16 <__aeabi_dsub+0x46a>
 8001dd6:	0031      	movs	r1, r6
 8001dd8:	2300      	movs	r3, #0
 8001dda:	2200      	movs	r2, #0
 8001ddc:	e70a      	b.n	8001bf4 <__aeabi_dsub+0x148>
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	000007ff 	.word	0x000007ff
 8001de4:	ff7fffff 	.word	0xff7fffff
 8001de8:	fffff801 	.word	0xfffff801
 8001dec:	000007fe 	.word	0x000007fe
 8001df0:	2a00      	cmp	r2, #0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x34a>
 8001df4:	e160      	b.n	80020b8 <__aeabi_dsub+0x60c>
 8001df6:	000a      	movs	r2, r1
 8001df8:	4302      	orrs	r2, r0
 8001dfa:	d04d      	beq.n	8001e98 <__aeabi_dsub+0x3ec>
 8001dfc:	464a      	mov	r2, r9
 8001dfe:	075c      	lsls	r4, r3, #29
 8001e00:	08d2      	lsrs	r2, r2, #3
 8001e02:	4322      	orrs	r2, r4
 8001e04:	2480      	movs	r4, #128	; 0x80
 8001e06:	08db      	lsrs	r3, r3, #3
 8001e08:	0324      	lsls	r4, r4, #12
 8001e0a:	4223      	tst	r3, r4
 8001e0c:	d007      	beq.n	8001e1e <__aeabi_dsub+0x372>
 8001e0e:	08ce      	lsrs	r6, r1, #3
 8001e10:	4226      	tst	r6, r4
 8001e12:	d104      	bne.n	8001e1e <__aeabi_dsub+0x372>
 8001e14:	465d      	mov	r5, fp
 8001e16:	0033      	movs	r3, r6
 8001e18:	08c2      	lsrs	r2, r0, #3
 8001e1a:	0749      	lsls	r1, r1, #29
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	0f51      	lsrs	r1, r2, #29
 8001e20:	00d2      	lsls	r2, r2, #3
 8001e22:	08d2      	lsrs	r2, r2, #3
 8001e24:	0749      	lsls	r1, r1, #29
 8001e26:	430a      	orrs	r2, r1
 8001e28:	0011      	movs	r1, r2
 8001e2a:	4319      	orrs	r1, r3
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x384>
 8001e2e:	e1c8      	b.n	80021c2 <__aeabi_dsub+0x716>
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	0309      	lsls	r1, r1, #12
 8001e34:	430b      	orrs	r3, r1
 8001e36:	031b      	lsls	r3, r3, #12
 8001e38:	49d5      	ldr	r1, [pc, #852]	; (8002190 <__aeabi_dsub+0x6e4>)
 8001e3a:	0b1b      	lsrs	r3, r3, #12
 8001e3c:	e6da      	b.n	8001bf4 <__aeabi_dsub+0x148>
 8001e3e:	49d5      	ldr	r1, [pc, #852]	; (8002194 <__aeabi_dsub+0x6e8>)
 8001e40:	1ab6      	subs	r6, r6, r2
 8001e42:	400b      	ands	r3, r1
 8001e44:	4698      	mov	r8, r3
 8001e46:	e6b5      	b.n	8001bb4 <__aeabi_dsub+0x108>
 8001e48:	0020      	movs	r0, r4
 8001e4a:	f000 fab3 	bl	80023b4 <__clzsi2>
 8001e4e:	0002      	movs	r2, r0
 8001e50:	3218      	adds	r2, #24
 8001e52:	2a1f      	cmp	r2, #31
 8001e54:	dc00      	bgt.n	8001e58 <__aeabi_dsub+0x3ac>
 8001e56:	e68f      	b.n	8001b78 <__aeabi_dsub+0xcc>
 8001e58:	0023      	movs	r3, r4
 8001e5a:	3808      	subs	r0, #8
 8001e5c:	4083      	lsls	r3, r0
 8001e5e:	2400      	movs	r4, #0
 8001e60:	e692      	b.n	8001b88 <__aeabi_dsub+0xdc>
 8001e62:	4308      	orrs	r0, r1
 8001e64:	0002      	movs	r2, r0
 8001e66:	1e50      	subs	r0, r2, #1
 8001e68:	4182      	sbcs	r2, r0
 8001e6a:	e66d      	b.n	8001b48 <__aeabi_dsub+0x9c>
 8001e6c:	4cca      	ldr	r4, [pc, #808]	; (8002198 <__aeabi_dsub+0x6ec>)
 8001e6e:	1c72      	adds	r2, r6, #1
 8001e70:	4222      	tst	r2, r4
 8001e72:	d000      	beq.n	8001e76 <__aeabi_dsub+0x3ca>
 8001e74:	e0ad      	b.n	8001fd2 <__aeabi_dsub+0x526>
 8001e76:	464a      	mov	r2, r9
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	2e00      	cmp	r6, #0
 8001e7c:	d1b8      	bne.n	8001df0 <__aeabi_dsub+0x344>
 8001e7e:	2a00      	cmp	r2, #0
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x3d8>
 8001e82:	e158      	b.n	8002136 <__aeabi_dsub+0x68a>
 8001e84:	000a      	movs	r2, r1
 8001e86:	4302      	orrs	r2, r0
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x3e0>
 8001e8a:	e159      	b.n	8002140 <__aeabi_dsub+0x694>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	0759      	lsls	r1, r3, #29
 8001e90:	08d2      	lsrs	r2, r2, #3
 8001e92:	430a      	orrs	r2, r1
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	e786      	b.n	8001da6 <__aeabi_dsub+0x2fa>
 8001e98:	464a      	mov	r2, r9
 8001e9a:	0759      	lsls	r1, r3, #29
 8001e9c:	08d2      	lsrs	r2, r2, #3
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	e7c1      	b.n	8001e28 <__aeabi_dsub+0x37c>
 8001ea4:	4dba      	ldr	r5, [pc, #744]	; (8002190 <__aeabi_dsub+0x6e4>)
 8001ea6:	42aa      	cmp	r2, r5
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x400>
 8001eaa:	e11e      	b.n	80020ea <__aeabi_dsub+0x63e>
 8001eac:	2580      	movs	r5, #128	; 0x80
 8001eae:	042d      	lsls	r5, r5, #16
 8001eb0:	432b      	orrs	r3, r5
 8001eb2:	4664      	mov	r4, ip
 8001eb4:	2c38      	cmp	r4, #56	; 0x38
 8001eb6:	dc5d      	bgt.n	8001f74 <__aeabi_dsub+0x4c8>
 8001eb8:	2c1f      	cmp	r4, #31
 8001eba:	dd00      	ble.n	8001ebe <__aeabi_dsub+0x412>
 8001ebc:	e0d0      	b.n	8002060 <__aeabi_dsub+0x5b4>
 8001ebe:	2520      	movs	r5, #32
 8001ec0:	4667      	mov	r7, ip
 8001ec2:	1b2d      	subs	r5, r5, r4
 8001ec4:	464e      	mov	r6, r9
 8001ec6:	001c      	movs	r4, r3
 8001ec8:	40fe      	lsrs	r6, r7
 8001eca:	40ac      	lsls	r4, r5
 8001ecc:	4334      	orrs	r4, r6
 8001ece:	464e      	mov	r6, r9
 8001ed0:	40ae      	lsls	r6, r5
 8001ed2:	0035      	movs	r5, r6
 8001ed4:	40fb      	lsrs	r3, r7
 8001ed6:	1e6e      	subs	r6, r5, #1
 8001ed8:	41b5      	sbcs	r5, r6
 8001eda:	1ac9      	subs	r1, r1, r3
 8001edc:	432c      	orrs	r4, r5
 8001ede:	e04e      	b.n	8001f7e <__aeabi_dsub+0x4d2>
 8001ee0:	464a      	mov	r2, r9
 8001ee2:	1a14      	subs	r4, r2, r0
 8001ee4:	45a1      	cmp	r9, r4
 8001ee6:	4192      	sbcs	r2, r2
 8001ee8:	4252      	negs	r2, r2
 8001eea:	4690      	mov	r8, r2
 8001eec:	1a5f      	subs	r7, r3, r1
 8001eee:	003a      	movs	r2, r7
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	1bd2      	subs	r2, r2, r7
 8001ef4:	4690      	mov	r8, r2
 8001ef6:	0212      	lsls	r2, r2, #8
 8001ef8:	d500      	bpl.n	8001efc <__aeabi_dsub+0x450>
 8001efa:	e08b      	b.n	8002014 <__aeabi_dsub+0x568>
 8001efc:	4642      	mov	r2, r8
 8001efe:	4322      	orrs	r2, r4
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dsub+0x458>
 8001f02:	e630      	b.n	8001b66 <__aeabi_dsub+0xba>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2500      	movs	r5, #0
 8001f08:	e74d      	b.n	8001da6 <__aeabi_dsub+0x2fa>
 8001f0a:	464a      	mov	r2, r9
 8001f0c:	0759      	lsls	r1, r3, #29
 8001f0e:	08d2      	lsrs	r2, r2, #3
 8001f10:	430a      	orrs	r2, r1
 8001f12:	08db      	lsrs	r3, r3, #3
 8001f14:	e744      	b.n	8001da0 <__aeabi_dsub+0x2f4>
 8001f16:	4642      	mov	r2, r8
 8001f18:	4b9e      	ldr	r3, [pc, #632]	; (8002194 <__aeabi_dsub+0x6e8>)
 8001f1a:	0861      	lsrs	r1, r4, #1
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	0013      	movs	r3, r2
 8001f20:	2201      	movs	r2, #1
 8001f22:	4014      	ands	r4, r2
 8001f24:	430c      	orrs	r4, r1
 8001f26:	07da      	lsls	r2, r3, #31
 8001f28:	085b      	lsrs	r3, r3, #1
 8001f2a:	4698      	mov	r8, r3
 8001f2c:	4314      	orrs	r4, r2
 8001f2e:	e641      	b.n	8001bb4 <__aeabi_dsub+0x108>
 8001f30:	001a      	movs	r2, r3
 8001f32:	3e1f      	subs	r6, #31
 8001f34:	40f2      	lsrs	r2, r6
 8001f36:	0016      	movs	r6, r2
 8001f38:	2920      	cmp	r1, #32
 8001f3a:	d003      	beq.n	8001f44 <__aeabi_dsub+0x498>
 8001f3c:	2240      	movs	r2, #64	; 0x40
 8001f3e:	1a51      	subs	r1, r2, r1
 8001f40:	408b      	lsls	r3, r1
 8001f42:	431c      	orrs	r4, r3
 8001f44:	1e62      	subs	r2, r4, #1
 8001f46:	4194      	sbcs	r4, r2
 8001f48:	2300      	movs	r3, #0
 8001f4a:	4334      	orrs	r4, r6
 8001f4c:	4698      	mov	r8, r3
 8001f4e:	2600      	movs	r6, #0
 8001f50:	e71d      	b.n	8001d8e <__aeabi_dsub+0x2e2>
 8001f52:	000c      	movs	r4, r1
 8001f54:	3a20      	subs	r2, #32
 8001f56:	40d4      	lsrs	r4, r2
 8001f58:	0022      	movs	r2, r4
 8001f5a:	4664      	mov	r4, ip
 8001f5c:	2c20      	cmp	r4, #32
 8001f5e:	d004      	beq.n	8001f6a <__aeabi_dsub+0x4be>
 8001f60:	2740      	movs	r7, #64	; 0x40
 8001f62:	1b3f      	subs	r7, r7, r4
 8001f64:	40b9      	lsls	r1, r7
 8001f66:	4308      	orrs	r0, r1
 8001f68:	4680      	mov	r8, r0
 8001f6a:	4644      	mov	r4, r8
 8001f6c:	1e61      	subs	r1, r4, #1
 8001f6e:	418c      	sbcs	r4, r1
 8001f70:	4322      	orrs	r2, r4
 8001f72:	e5e9      	b.n	8001b48 <__aeabi_dsub+0x9c>
 8001f74:	464c      	mov	r4, r9
 8001f76:	4323      	orrs	r3, r4
 8001f78:	001c      	movs	r4, r3
 8001f7a:	1e63      	subs	r3, r4, #1
 8001f7c:	419c      	sbcs	r4, r3
 8001f7e:	1b04      	subs	r4, r0, r4
 8001f80:	42a0      	cmp	r0, r4
 8001f82:	419b      	sbcs	r3, r3
 8001f84:	425b      	negs	r3, r3
 8001f86:	1acb      	subs	r3, r1, r3
 8001f88:	4698      	mov	r8, r3
 8001f8a:	465d      	mov	r5, fp
 8001f8c:	0016      	movs	r6, r2
 8001f8e:	e5e2      	b.n	8001b56 <__aeabi_dsub+0xaa>
 8001f90:	464e      	mov	r6, r9
 8001f92:	431e      	orrs	r6, r3
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x4ec>
 8001f96:	e0ae      	b.n	80020f6 <__aeabi_dsub+0x64a>
 8001f98:	1e66      	subs	r6, r4, #1
 8001f9a:	2c01      	cmp	r4, #1
 8001f9c:	d100      	bne.n	8001fa0 <__aeabi_dsub+0x4f4>
 8001f9e:	e0fd      	b.n	800219c <__aeabi_dsub+0x6f0>
 8001fa0:	4f7b      	ldr	r7, [pc, #492]	; (8002190 <__aeabi_dsub+0x6e4>)
 8001fa2:	42bc      	cmp	r4, r7
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x4fc>
 8001fa6:	e107      	b.n	80021b8 <__aeabi_dsub+0x70c>
 8001fa8:	46b4      	mov	ip, r6
 8001faa:	e69b      	b.n	8001ce4 <__aeabi_dsub+0x238>
 8001fac:	4664      	mov	r4, ip
 8001fae:	2220      	movs	r2, #32
 8001fb0:	1b12      	subs	r2, r2, r4
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	4094      	lsls	r4, r2
 8001fb6:	0007      	movs	r7, r0
 8001fb8:	4090      	lsls	r0, r2
 8001fba:	46a0      	mov	r8, r4
 8001fbc:	4664      	mov	r4, ip
 8001fbe:	1e42      	subs	r2, r0, #1
 8001fc0:	4190      	sbcs	r0, r2
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	40e7      	lsrs	r7, r4
 8001fc6:	4644      	mov	r4, r8
 8001fc8:	40d1      	lsrs	r1, r2
 8001fca:	433c      	orrs	r4, r7
 8001fcc:	4304      	orrs	r4, r0
 8001fce:	185b      	adds	r3, r3, r1
 8001fd0:	e6f3      	b.n	8001dba <__aeabi_dsub+0x30e>
 8001fd2:	4c6f      	ldr	r4, [pc, #444]	; (8002190 <__aeabi_dsub+0x6e4>)
 8001fd4:	42a2      	cmp	r2, r4
 8001fd6:	d100      	bne.n	8001fda <__aeabi_dsub+0x52e>
 8001fd8:	e0d5      	b.n	8002186 <__aeabi_dsub+0x6da>
 8001fda:	4448      	add	r0, r9
 8001fdc:	185b      	adds	r3, r3, r1
 8001fde:	4548      	cmp	r0, r9
 8001fe0:	4189      	sbcs	r1, r1
 8001fe2:	4249      	negs	r1, r1
 8001fe4:	185b      	adds	r3, r3, r1
 8001fe6:	07dc      	lsls	r4, r3, #31
 8001fe8:	0840      	lsrs	r0, r0, #1
 8001fea:	085b      	lsrs	r3, r3, #1
 8001fec:	4698      	mov	r8, r3
 8001fee:	0016      	movs	r6, r2
 8001ff0:	4304      	orrs	r4, r0
 8001ff2:	e6cc      	b.n	8001d8e <__aeabi_dsub+0x2e2>
 8001ff4:	2a00      	cmp	r2, #0
 8001ff6:	d000      	beq.n	8001ffa <__aeabi_dsub+0x54e>
 8001ff8:	e082      	b.n	8002100 <__aeabi_dsub+0x654>
 8001ffa:	000a      	movs	r2, r1
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	d140      	bne.n	8002082 <__aeabi_dsub+0x5d6>
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	2500      	movs	r5, #0
 8002004:	031b      	lsls	r3, r3, #12
 8002006:	e713      	b.n	8001e30 <__aeabi_dsub+0x384>
 8002008:	074b      	lsls	r3, r1, #29
 800200a:	08c2      	lsrs	r2, r0, #3
 800200c:	431a      	orrs	r2, r3
 800200e:	465d      	mov	r5, fp
 8002010:	08cb      	lsrs	r3, r1, #3
 8002012:	e6c5      	b.n	8001da0 <__aeabi_dsub+0x2f4>
 8002014:	464a      	mov	r2, r9
 8002016:	1a84      	subs	r4, r0, r2
 8002018:	42a0      	cmp	r0, r4
 800201a:	4192      	sbcs	r2, r2
 800201c:	1acb      	subs	r3, r1, r3
 800201e:	4252      	negs	r2, r2
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	4698      	mov	r8, r3
 8002024:	465d      	mov	r5, fp
 8002026:	e59e      	b.n	8001b66 <__aeabi_dsub+0xba>
 8002028:	464a      	mov	r2, r9
 800202a:	0759      	lsls	r1, r3, #29
 800202c:	08d2      	lsrs	r2, r2, #3
 800202e:	430a      	orrs	r2, r1
 8002030:	08db      	lsrs	r3, r3, #3
 8002032:	e6f9      	b.n	8001e28 <__aeabi_dsub+0x37c>
 8002034:	464a      	mov	r2, r9
 8002036:	1a14      	subs	r4, r2, r0
 8002038:	45a1      	cmp	r9, r4
 800203a:	4192      	sbcs	r2, r2
 800203c:	1a5b      	subs	r3, r3, r1
 800203e:	4252      	negs	r2, r2
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	4698      	mov	r8, r3
 8002044:	2601      	movs	r6, #1
 8002046:	e586      	b.n	8001b56 <__aeabi_dsub+0xaa>
 8002048:	464a      	mov	r2, r9
 800204a:	0759      	lsls	r1, r3, #29
 800204c:	08d2      	lsrs	r2, r2, #3
 800204e:	430a      	orrs	r2, r1
 8002050:	08db      	lsrs	r3, r3, #3
 8002052:	e6a5      	b.n	8001da0 <__aeabi_dsub+0x2f4>
 8002054:	464c      	mov	r4, r9
 8002056:	4323      	orrs	r3, r4
 8002058:	001c      	movs	r4, r3
 800205a:	1e63      	subs	r3, r4, #1
 800205c:	419c      	sbcs	r4, r3
 800205e:	e65b      	b.n	8001d18 <__aeabi_dsub+0x26c>
 8002060:	4665      	mov	r5, ip
 8002062:	001e      	movs	r6, r3
 8002064:	3d20      	subs	r5, #32
 8002066:	40ee      	lsrs	r6, r5
 8002068:	2c20      	cmp	r4, #32
 800206a:	d005      	beq.n	8002078 <__aeabi_dsub+0x5cc>
 800206c:	2540      	movs	r5, #64	; 0x40
 800206e:	1b2d      	subs	r5, r5, r4
 8002070:	40ab      	lsls	r3, r5
 8002072:	464c      	mov	r4, r9
 8002074:	431c      	orrs	r4, r3
 8002076:	46a2      	mov	sl, r4
 8002078:	4654      	mov	r4, sl
 800207a:	1e63      	subs	r3, r4, #1
 800207c:	419c      	sbcs	r4, r3
 800207e:	4334      	orrs	r4, r6
 8002080:	e77d      	b.n	8001f7e <__aeabi_dsub+0x4d2>
 8002082:	074b      	lsls	r3, r1, #29
 8002084:	08c2      	lsrs	r2, r0, #3
 8002086:	431a      	orrs	r2, r3
 8002088:	465d      	mov	r5, fp
 800208a:	08cb      	lsrs	r3, r1, #3
 800208c:	e6cc      	b.n	8001e28 <__aeabi_dsub+0x37c>
 800208e:	000a      	movs	r2, r1
 8002090:	4302      	orrs	r2, r0
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x5ea>
 8002094:	e736      	b.n	8001f04 <__aeabi_dsub+0x458>
 8002096:	074b      	lsls	r3, r1, #29
 8002098:	08c2      	lsrs	r2, r0, #3
 800209a:	431a      	orrs	r2, r3
 800209c:	465d      	mov	r5, fp
 800209e:	08cb      	lsrs	r3, r1, #3
 80020a0:	e681      	b.n	8001da6 <__aeabi_dsub+0x2fa>
 80020a2:	464a      	mov	r2, r9
 80020a4:	1a84      	subs	r4, r0, r2
 80020a6:	42a0      	cmp	r0, r4
 80020a8:	4192      	sbcs	r2, r2
 80020aa:	1acb      	subs	r3, r1, r3
 80020ac:	4252      	negs	r2, r2
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	4698      	mov	r8, r3
 80020b2:	465d      	mov	r5, fp
 80020b4:	2601      	movs	r6, #1
 80020b6:	e54e      	b.n	8001b56 <__aeabi_dsub+0xaa>
 80020b8:	074b      	lsls	r3, r1, #29
 80020ba:	08c2      	lsrs	r2, r0, #3
 80020bc:	431a      	orrs	r2, r3
 80020be:	08cb      	lsrs	r3, r1, #3
 80020c0:	e6b2      	b.n	8001e28 <__aeabi_dsub+0x37c>
 80020c2:	464a      	mov	r2, r9
 80020c4:	1a14      	subs	r4, r2, r0
 80020c6:	45a1      	cmp	r9, r4
 80020c8:	4192      	sbcs	r2, r2
 80020ca:	1a5f      	subs	r7, r3, r1
 80020cc:	4252      	negs	r2, r2
 80020ce:	1aba      	subs	r2, r7, r2
 80020d0:	4690      	mov	r8, r2
 80020d2:	0212      	lsls	r2, r2, #8
 80020d4:	d56b      	bpl.n	80021ae <__aeabi_dsub+0x702>
 80020d6:	464a      	mov	r2, r9
 80020d8:	1a84      	subs	r4, r0, r2
 80020da:	42a0      	cmp	r0, r4
 80020dc:	4192      	sbcs	r2, r2
 80020de:	1acb      	subs	r3, r1, r3
 80020e0:	4252      	negs	r2, r2
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	4698      	mov	r8, r3
 80020e6:	465d      	mov	r5, fp
 80020e8:	e564      	b.n	8001bb4 <__aeabi_dsub+0x108>
 80020ea:	074b      	lsls	r3, r1, #29
 80020ec:	08c2      	lsrs	r2, r0, #3
 80020ee:	431a      	orrs	r2, r3
 80020f0:	465d      	mov	r5, fp
 80020f2:	08cb      	lsrs	r3, r1, #3
 80020f4:	e698      	b.n	8001e28 <__aeabi_dsub+0x37c>
 80020f6:	074b      	lsls	r3, r1, #29
 80020f8:	08c2      	lsrs	r2, r0, #3
 80020fa:	431a      	orrs	r2, r3
 80020fc:	08cb      	lsrs	r3, r1, #3
 80020fe:	e64f      	b.n	8001da0 <__aeabi_dsub+0x2f4>
 8002100:	000a      	movs	r2, r1
 8002102:	4302      	orrs	r2, r0
 8002104:	d090      	beq.n	8002028 <__aeabi_dsub+0x57c>
 8002106:	464a      	mov	r2, r9
 8002108:	075c      	lsls	r4, r3, #29
 800210a:	08d2      	lsrs	r2, r2, #3
 800210c:	4314      	orrs	r4, r2
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	08db      	lsrs	r3, r3, #3
 8002112:	0312      	lsls	r2, r2, #12
 8002114:	4213      	tst	r3, r2
 8002116:	d008      	beq.n	800212a <__aeabi_dsub+0x67e>
 8002118:	08ce      	lsrs	r6, r1, #3
 800211a:	4216      	tst	r6, r2
 800211c:	d105      	bne.n	800212a <__aeabi_dsub+0x67e>
 800211e:	08c0      	lsrs	r0, r0, #3
 8002120:	0749      	lsls	r1, r1, #29
 8002122:	4308      	orrs	r0, r1
 8002124:	0004      	movs	r4, r0
 8002126:	465d      	mov	r5, fp
 8002128:	0033      	movs	r3, r6
 800212a:	0f61      	lsrs	r1, r4, #29
 800212c:	00e2      	lsls	r2, r4, #3
 800212e:	0749      	lsls	r1, r1, #29
 8002130:	08d2      	lsrs	r2, r2, #3
 8002132:	430a      	orrs	r2, r1
 8002134:	e678      	b.n	8001e28 <__aeabi_dsub+0x37c>
 8002136:	074b      	lsls	r3, r1, #29
 8002138:	08c2      	lsrs	r2, r0, #3
 800213a:	431a      	orrs	r2, r3
 800213c:	08cb      	lsrs	r3, r1, #3
 800213e:	e632      	b.n	8001da6 <__aeabi_dsub+0x2fa>
 8002140:	4448      	add	r0, r9
 8002142:	185b      	adds	r3, r3, r1
 8002144:	4548      	cmp	r0, r9
 8002146:	4192      	sbcs	r2, r2
 8002148:	4698      	mov	r8, r3
 800214a:	4252      	negs	r2, r2
 800214c:	4490      	add	r8, r2
 800214e:	4643      	mov	r3, r8
 8002150:	0004      	movs	r4, r0
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	d400      	bmi.n	8002158 <__aeabi_dsub+0x6ac>
 8002156:	e61a      	b.n	8001d8e <__aeabi_dsub+0x2e2>
 8002158:	4642      	mov	r2, r8
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <__aeabi_dsub+0x6e8>)
 800215c:	2601      	movs	r6, #1
 800215e:	401a      	ands	r2, r3
 8002160:	4690      	mov	r8, r2
 8002162:	e614      	b.n	8001d8e <__aeabi_dsub+0x2e2>
 8002164:	4666      	mov	r6, ip
 8002166:	001f      	movs	r7, r3
 8002168:	3e20      	subs	r6, #32
 800216a:	40f7      	lsrs	r7, r6
 800216c:	2c20      	cmp	r4, #32
 800216e:	d005      	beq.n	800217c <__aeabi_dsub+0x6d0>
 8002170:	2640      	movs	r6, #64	; 0x40
 8002172:	1b36      	subs	r6, r6, r4
 8002174:	40b3      	lsls	r3, r6
 8002176:	464c      	mov	r4, r9
 8002178:	431c      	orrs	r4, r3
 800217a:	46a2      	mov	sl, r4
 800217c:	4654      	mov	r4, sl
 800217e:	1e63      	subs	r3, r4, #1
 8002180:	419c      	sbcs	r4, r3
 8002182:	433c      	orrs	r4, r7
 8002184:	e5c8      	b.n	8001d18 <__aeabi_dsub+0x26c>
 8002186:	0011      	movs	r1, r2
 8002188:	2300      	movs	r3, #0
 800218a:	2200      	movs	r2, #0
 800218c:	e532      	b.n	8001bf4 <__aeabi_dsub+0x148>
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	000007ff 	.word	0x000007ff
 8002194:	ff7fffff 	.word	0xff7fffff
 8002198:	000007fe 	.word	0x000007fe
 800219c:	464a      	mov	r2, r9
 800219e:	1814      	adds	r4, r2, r0
 80021a0:	4284      	cmp	r4, r0
 80021a2:	4192      	sbcs	r2, r2
 80021a4:	185b      	adds	r3, r3, r1
 80021a6:	4698      	mov	r8, r3
 80021a8:	4252      	negs	r2, r2
 80021aa:	4490      	add	r8, r2
 80021ac:	e5e9      	b.n	8001d82 <__aeabi_dsub+0x2d6>
 80021ae:	4642      	mov	r2, r8
 80021b0:	4322      	orrs	r2, r4
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0x70a>
 80021b4:	e6a6      	b.n	8001f04 <__aeabi_dsub+0x458>
 80021b6:	e5ea      	b.n	8001d8e <__aeabi_dsub+0x2e2>
 80021b8:	074b      	lsls	r3, r1, #29
 80021ba:	08c2      	lsrs	r2, r0, #3
 80021bc:	431a      	orrs	r2, r3
 80021be:	08cb      	lsrs	r3, r1, #3
 80021c0:	e632      	b.n	8001e28 <__aeabi_dsub+0x37c>
 80021c2:	2200      	movs	r2, #0
 80021c4:	4901      	ldr	r1, [pc, #4]	; (80021cc <__aeabi_dsub+0x720>)
 80021c6:	0013      	movs	r3, r2
 80021c8:	e514      	b.n	8001bf4 <__aeabi_dsub+0x148>
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	000007ff 	.word	0x000007ff

080021d0 <__aeabi_dcmpun>:
 80021d0:	b570      	push	{r4, r5, r6, lr}
 80021d2:	0005      	movs	r5, r0
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <__aeabi_dcmpun+0x38>)
 80021d6:	030c      	lsls	r4, r1, #12
 80021d8:	0016      	movs	r6, r2
 80021da:	0049      	lsls	r1, r1, #1
 80021dc:	031a      	lsls	r2, r3, #12
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	0b24      	lsrs	r4, r4, #12
 80021e2:	0d49      	lsrs	r1, r1, #21
 80021e4:	0b12      	lsrs	r2, r2, #12
 80021e6:	0d5b      	lsrs	r3, r3, #21
 80021e8:	4281      	cmp	r1, r0
 80021ea:	d008      	beq.n	80021fe <__aeabi_dcmpun+0x2e>
 80021ec:	4906      	ldr	r1, [pc, #24]	; (8002208 <__aeabi_dcmpun+0x38>)
 80021ee:	2000      	movs	r0, #0
 80021f0:	428b      	cmp	r3, r1
 80021f2:	d103      	bne.n	80021fc <__aeabi_dcmpun+0x2c>
 80021f4:	4332      	orrs	r2, r6
 80021f6:	0010      	movs	r0, r2
 80021f8:	1e42      	subs	r2, r0, #1
 80021fa:	4190      	sbcs	r0, r2
 80021fc:	bd70      	pop	{r4, r5, r6, pc}
 80021fe:	2001      	movs	r0, #1
 8002200:	432c      	orrs	r4, r5
 8002202:	d1fb      	bne.n	80021fc <__aeabi_dcmpun+0x2c>
 8002204:	e7f2      	b.n	80021ec <__aeabi_dcmpun+0x1c>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	000007ff 	.word	0x000007ff

0800220c <__aeabi_d2iz>:
 800220c:	000a      	movs	r2, r1
 800220e:	b530      	push	{r4, r5, lr}
 8002210:	4c13      	ldr	r4, [pc, #76]	; (8002260 <__aeabi_d2iz+0x54>)
 8002212:	0053      	lsls	r3, r2, #1
 8002214:	0309      	lsls	r1, r1, #12
 8002216:	0005      	movs	r5, r0
 8002218:	0b09      	lsrs	r1, r1, #12
 800221a:	2000      	movs	r0, #0
 800221c:	0d5b      	lsrs	r3, r3, #21
 800221e:	0fd2      	lsrs	r2, r2, #31
 8002220:	42a3      	cmp	r3, r4
 8002222:	dd04      	ble.n	800222e <__aeabi_d2iz+0x22>
 8002224:	480f      	ldr	r0, [pc, #60]	; (8002264 <__aeabi_d2iz+0x58>)
 8002226:	4283      	cmp	r3, r0
 8002228:	dd02      	ble.n	8002230 <__aeabi_d2iz+0x24>
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <__aeabi_d2iz+0x5c>)
 800222c:	18d0      	adds	r0, r2, r3
 800222e:	bd30      	pop	{r4, r5, pc}
 8002230:	2080      	movs	r0, #128	; 0x80
 8002232:	0340      	lsls	r0, r0, #13
 8002234:	4301      	orrs	r1, r0
 8002236:	480d      	ldr	r0, [pc, #52]	; (800226c <__aeabi_d2iz+0x60>)
 8002238:	1ac0      	subs	r0, r0, r3
 800223a:	281f      	cmp	r0, #31
 800223c:	dd08      	ble.n	8002250 <__aeabi_d2iz+0x44>
 800223e:	480c      	ldr	r0, [pc, #48]	; (8002270 <__aeabi_d2iz+0x64>)
 8002240:	1ac3      	subs	r3, r0, r3
 8002242:	40d9      	lsrs	r1, r3
 8002244:	000b      	movs	r3, r1
 8002246:	4258      	negs	r0, r3
 8002248:	2a00      	cmp	r2, #0
 800224a:	d1f0      	bne.n	800222e <__aeabi_d2iz+0x22>
 800224c:	0018      	movs	r0, r3
 800224e:	e7ee      	b.n	800222e <__aeabi_d2iz+0x22>
 8002250:	4c08      	ldr	r4, [pc, #32]	; (8002274 <__aeabi_d2iz+0x68>)
 8002252:	40c5      	lsrs	r5, r0
 8002254:	46a4      	mov	ip, r4
 8002256:	4463      	add	r3, ip
 8002258:	4099      	lsls	r1, r3
 800225a:	000b      	movs	r3, r1
 800225c:	432b      	orrs	r3, r5
 800225e:	e7f2      	b.n	8002246 <__aeabi_d2iz+0x3a>
 8002260:	000003fe 	.word	0x000003fe
 8002264:	0000041d 	.word	0x0000041d
 8002268:	7fffffff 	.word	0x7fffffff
 800226c:	00000433 	.word	0x00000433
 8002270:	00000413 	.word	0x00000413
 8002274:	fffffbed 	.word	0xfffffbed

08002278 <__aeabi_i2d>:
 8002278:	b570      	push	{r4, r5, r6, lr}
 800227a:	2800      	cmp	r0, #0
 800227c:	d016      	beq.n	80022ac <__aeabi_i2d+0x34>
 800227e:	17c3      	asrs	r3, r0, #31
 8002280:	18c5      	adds	r5, r0, r3
 8002282:	405d      	eors	r5, r3
 8002284:	0fc4      	lsrs	r4, r0, #31
 8002286:	0028      	movs	r0, r5
 8002288:	f000 f894 	bl	80023b4 <__clzsi2>
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <__aeabi_i2d+0x5c>)
 800228e:	1a12      	subs	r2, r2, r0
 8002290:	280a      	cmp	r0, #10
 8002292:	dc16      	bgt.n	80022c2 <__aeabi_i2d+0x4a>
 8002294:	0003      	movs	r3, r0
 8002296:	002e      	movs	r6, r5
 8002298:	3315      	adds	r3, #21
 800229a:	409e      	lsls	r6, r3
 800229c:	230b      	movs	r3, #11
 800229e:	1a18      	subs	r0, r3, r0
 80022a0:	40c5      	lsrs	r5, r0
 80022a2:	0553      	lsls	r3, r2, #21
 80022a4:	032d      	lsls	r5, r5, #12
 80022a6:	0b2d      	lsrs	r5, r5, #12
 80022a8:	0d5b      	lsrs	r3, r3, #21
 80022aa:	e003      	b.n	80022b4 <__aeabi_i2d+0x3c>
 80022ac:	2400      	movs	r4, #0
 80022ae:	2300      	movs	r3, #0
 80022b0:	2500      	movs	r5, #0
 80022b2:	2600      	movs	r6, #0
 80022b4:	051b      	lsls	r3, r3, #20
 80022b6:	432b      	orrs	r3, r5
 80022b8:	07e4      	lsls	r4, r4, #31
 80022ba:	4323      	orrs	r3, r4
 80022bc:	0030      	movs	r0, r6
 80022be:	0019      	movs	r1, r3
 80022c0:	bd70      	pop	{r4, r5, r6, pc}
 80022c2:	380b      	subs	r0, #11
 80022c4:	4085      	lsls	r5, r0
 80022c6:	0553      	lsls	r3, r2, #21
 80022c8:	032d      	lsls	r5, r5, #12
 80022ca:	2600      	movs	r6, #0
 80022cc:	0b2d      	lsrs	r5, r5, #12
 80022ce:	0d5b      	lsrs	r3, r3, #21
 80022d0:	e7f0      	b.n	80022b4 <__aeabi_i2d+0x3c>
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	0000041e 	.word	0x0000041e

080022d8 <__aeabi_ui2d>:
 80022d8:	b510      	push	{r4, lr}
 80022da:	1e04      	subs	r4, r0, #0
 80022dc:	d010      	beq.n	8002300 <__aeabi_ui2d+0x28>
 80022de:	f000 f869 	bl	80023b4 <__clzsi2>
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <__aeabi_ui2d+0x48>)
 80022e4:	1a1b      	subs	r3, r3, r0
 80022e6:	280a      	cmp	r0, #10
 80022e8:	dc11      	bgt.n	800230e <__aeabi_ui2d+0x36>
 80022ea:	220b      	movs	r2, #11
 80022ec:	0021      	movs	r1, r4
 80022ee:	1a12      	subs	r2, r2, r0
 80022f0:	40d1      	lsrs	r1, r2
 80022f2:	3015      	adds	r0, #21
 80022f4:	030a      	lsls	r2, r1, #12
 80022f6:	055b      	lsls	r3, r3, #21
 80022f8:	4084      	lsls	r4, r0
 80022fa:	0b12      	lsrs	r2, r2, #12
 80022fc:	0d5b      	lsrs	r3, r3, #21
 80022fe:	e001      	b.n	8002304 <__aeabi_ui2d+0x2c>
 8002300:	2300      	movs	r3, #0
 8002302:	2200      	movs	r2, #0
 8002304:	051b      	lsls	r3, r3, #20
 8002306:	4313      	orrs	r3, r2
 8002308:	0020      	movs	r0, r4
 800230a:	0019      	movs	r1, r3
 800230c:	bd10      	pop	{r4, pc}
 800230e:	0022      	movs	r2, r4
 8002310:	380b      	subs	r0, #11
 8002312:	4082      	lsls	r2, r0
 8002314:	055b      	lsls	r3, r3, #21
 8002316:	0312      	lsls	r2, r2, #12
 8002318:	2400      	movs	r4, #0
 800231a:	0b12      	lsrs	r2, r2, #12
 800231c:	0d5b      	lsrs	r3, r3, #21
 800231e:	e7f1      	b.n	8002304 <__aeabi_ui2d+0x2c>
 8002320:	0000041e 	.word	0x0000041e

08002324 <__aeabi_f2d>:
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	0043      	lsls	r3, r0, #1
 8002328:	0246      	lsls	r6, r0, #9
 800232a:	0fc4      	lsrs	r4, r0, #31
 800232c:	20fe      	movs	r0, #254	; 0xfe
 800232e:	0e1b      	lsrs	r3, r3, #24
 8002330:	1c59      	adds	r1, r3, #1
 8002332:	0a75      	lsrs	r5, r6, #9
 8002334:	4208      	tst	r0, r1
 8002336:	d00c      	beq.n	8002352 <__aeabi_f2d+0x2e>
 8002338:	22e0      	movs	r2, #224	; 0xe0
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	4694      	mov	ip, r2
 800233e:	076d      	lsls	r5, r5, #29
 8002340:	0b36      	lsrs	r6, r6, #12
 8002342:	4463      	add	r3, ip
 8002344:	051b      	lsls	r3, r3, #20
 8002346:	4333      	orrs	r3, r6
 8002348:	07e4      	lsls	r4, r4, #31
 800234a:	4323      	orrs	r3, r4
 800234c:	0028      	movs	r0, r5
 800234e:	0019      	movs	r1, r3
 8002350:	bd70      	pop	{r4, r5, r6, pc}
 8002352:	2b00      	cmp	r3, #0
 8002354:	d114      	bne.n	8002380 <__aeabi_f2d+0x5c>
 8002356:	2d00      	cmp	r5, #0
 8002358:	d01b      	beq.n	8002392 <__aeabi_f2d+0x6e>
 800235a:	0028      	movs	r0, r5
 800235c:	f000 f82a 	bl	80023b4 <__clzsi2>
 8002360:	280a      	cmp	r0, #10
 8002362:	dc1c      	bgt.n	800239e <__aeabi_f2d+0x7a>
 8002364:	230b      	movs	r3, #11
 8002366:	002a      	movs	r2, r5
 8002368:	1a1b      	subs	r3, r3, r0
 800236a:	40da      	lsrs	r2, r3
 800236c:	0003      	movs	r3, r0
 800236e:	3315      	adds	r3, #21
 8002370:	409d      	lsls	r5, r3
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <__aeabi_f2d+0x88>)
 8002374:	0312      	lsls	r2, r2, #12
 8002376:	1a1b      	subs	r3, r3, r0
 8002378:	055b      	lsls	r3, r3, #21
 800237a:	0b16      	lsrs	r6, r2, #12
 800237c:	0d5b      	lsrs	r3, r3, #21
 800237e:	e7e1      	b.n	8002344 <__aeabi_f2d+0x20>
 8002380:	2d00      	cmp	r5, #0
 8002382:	d009      	beq.n	8002398 <__aeabi_f2d+0x74>
 8002384:	0b32      	lsrs	r2, r6, #12
 8002386:	2680      	movs	r6, #128	; 0x80
 8002388:	0336      	lsls	r6, r6, #12
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <__aeabi_f2d+0x8c>)
 800238c:	076d      	lsls	r5, r5, #29
 800238e:	4316      	orrs	r6, r2
 8002390:	e7d8      	b.n	8002344 <__aeabi_f2d+0x20>
 8002392:	2300      	movs	r3, #0
 8002394:	2600      	movs	r6, #0
 8002396:	e7d5      	b.n	8002344 <__aeabi_f2d+0x20>
 8002398:	2600      	movs	r6, #0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <__aeabi_f2d+0x8c>)
 800239c:	e7d2      	b.n	8002344 <__aeabi_f2d+0x20>
 800239e:	0003      	movs	r3, r0
 80023a0:	002a      	movs	r2, r5
 80023a2:	3b0b      	subs	r3, #11
 80023a4:	409a      	lsls	r2, r3
 80023a6:	2500      	movs	r5, #0
 80023a8:	e7e3      	b.n	8002372 <__aeabi_f2d+0x4e>
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	00000389 	.word	0x00000389
 80023b0:	000007ff 	.word	0x000007ff

080023b4 <__clzsi2>:
 80023b4:	211c      	movs	r1, #28
 80023b6:	2301      	movs	r3, #1
 80023b8:	041b      	lsls	r3, r3, #16
 80023ba:	4298      	cmp	r0, r3
 80023bc:	d301      	bcc.n	80023c2 <__clzsi2+0xe>
 80023be:	0c00      	lsrs	r0, r0, #16
 80023c0:	3910      	subs	r1, #16
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	4298      	cmp	r0, r3
 80023c6:	d301      	bcc.n	80023cc <__clzsi2+0x18>
 80023c8:	0a00      	lsrs	r0, r0, #8
 80023ca:	3908      	subs	r1, #8
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	4298      	cmp	r0, r3
 80023d0:	d301      	bcc.n	80023d6 <__clzsi2+0x22>
 80023d2:	0900      	lsrs	r0, r0, #4
 80023d4:	3904      	subs	r1, #4
 80023d6:	a202      	add	r2, pc, #8	; (adr r2, 80023e0 <__clzsi2+0x2c>)
 80023d8:	5c10      	ldrb	r0, [r2, r0]
 80023da:	1840      	adds	r0, r0, r1
 80023dc:	4770      	bx	lr
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	02020304 	.word	0x02020304
 80023e4:	01010101 	.word	0x01010101
	...

080023f0 <__clzdi2>:
 80023f0:	b510      	push	{r4, lr}
 80023f2:	2900      	cmp	r1, #0
 80023f4:	d103      	bne.n	80023fe <__clzdi2+0xe>
 80023f6:	f7ff ffdd 	bl	80023b4 <__clzsi2>
 80023fa:	3020      	adds	r0, #32
 80023fc:	e002      	b.n	8002404 <__clzdi2+0x14>
 80023fe:	1c08      	adds	r0, r1, #0
 8002400:	f7ff ffd8 	bl	80023b4 <__clzsi2>
 8002404:	bd10      	pop	{r4, pc}
 8002406:	46c0      	nop			; (mov r8, r8)

08002408 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Callback to be called after HAL_UART_RECEIVE_IT finishes getting data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	// Disable Interrupts
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002410:	201b      	movs	r0, #27
 8002412:	f002 f9b6 	bl	8004782 <HAL_NVIC_DisableIRQ>
	// Set received flag
	cmd_received = 1;
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_UART_RxCpltCallback+0x84>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]
	// Copy the receive buffer into the command buffer.
	memcpy(cmd_data,Rx_data,20);
 800241c:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <HAL_UART_RxCpltCallback+0x88>)
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_UART_RxCpltCallback+0x8c>)
 8002420:	0010      	movs	r0, r2
 8002422:	0019      	movs	r1, r3
 8002424:	2314      	movs	r3, #20
 8002426:	001a      	movs	r2, r3
 8002428:	f008 fa22 	bl	800a870 <memcpy>
	// Save the last command
	// Enable Interrupts
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800242c:	201b      	movs	r0, #27
 800242e:	f002 f998 	bl	8004762 <HAL_NVIC_EnableIRQ>
	ret = HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 8002432:	4918      	ldr	r1, [pc, #96]	; (8002494 <HAL_UART_RxCpltCallback+0x8c>)
 8002434:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_UART_RxCpltCallback+0x90>)
 8002436:	2214      	movs	r2, #20
 8002438:	0018      	movs	r0, r3
 800243a:	f006 fefd 	bl	8009238 <HAL_UART_Receive_DMA>
 800243e:	0003      	movs	r3, r0
 8002440:	001a      	movs	r2, r3
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <HAL_UART_RxCpltCallback+0x94>)
 8002444:	701a      	strb	r2, [r3, #0]

	//__HAL_UART_CLEAR_FLAG(JETSON_UART, UART_CLEAR_OREF);
	//__HAL_UART_SEND_REQ(JETSON_UART, UART_RXDATA_FLUSH_REQUEST);

	if (ret != HAL_OK) {
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_UART_RxCpltCallback+0x94>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01a      	beq.n	8002484 <HAL_UART_RxCpltCallback+0x7c>
		Error_Handler();
 800244e:	f000 fc19 	bl	8002c84 <Error_Handler>
		HAL_UART_Abort_IT(&huart1);
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_UART_RxCpltCallback+0x98>)
 8002454:	0018      	movs	r0, r3
 8002456:	f006 ff5f 	bl	8009318 <HAL_UART_Abort_IT>
	    SET_BIT(huart1.Instance->CR3, USART_CR3_EIE);
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_UART_RxCpltCallback+0x98>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_UART_RxCpltCallback+0x98>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
	    //This flag no longer exists
	    //SET_BIT(huart1.Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
	    HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 800246a:	201b      	movs	r0, #27
 800246c:	f002 f9a6 	bl	80047bc <HAL_NVIC_ClearPendingIRQ>

	    ret = HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 8002470:	4908      	ldr	r1, [pc, #32]	; (8002494 <HAL_UART_RxCpltCallback+0x8c>)
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_UART_RxCpltCallback+0x90>)
 8002474:	2214      	movs	r2, #20
 8002476:	0018      	movs	r0, r3
 8002478:	f006 fede 	bl	8009238 <HAL_UART_Receive_DMA>
 800247c:	0003      	movs	r3, r0
 800247e:	001a      	movs	r2, r3
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_UART_RxCpltCallback+0x94>)
 8002482:	701a      	strb	r2, [r3, #0]
	}
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}
 800248c:	200001f8 	.word	0x200001f8
 8002490:	200003e4 	.word	0x200003e4
 8002494:	200002bc 	.word	0x200002bc
 8002498:	20000504 	.word	0x20000504
 800249c:	20000594 	.word	0x20000594
 80024a0:	20000418 	.word	0x20000418

080024a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a8:	f001 fafe 	bl	8003aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024ac:	f000 f816 	bl	80024dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024b0:	f000 fb14 	bl	8002adc <MX_GPIO_Init>
  MX_DMA_Init();
 80024b4:	f000 faec 	bl	8002a90 <MX_DMA_Init>
  MX_ADC1_Init();
 80024b8:	f000 f87e 	bl	80025b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80024bc:	f000 f8e8 	bl	8002690 <MX_I2C1_Init>
  MX_TIM1_Init();
 80024c0:	f000 f926 	bl	8002710 <MX_TIM1_Init>
  MX_TIM3_Init();
 80024c4:	f000 f9dc 	bl	8002880 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80024c8:	f000 fa46 	bl	8002958 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80024cc:	f000 fa92 	bl	80029f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  main_preloop();
 80024d0:	f000 fc92 	bl	8002df8 <main_preloop>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  main_loop();
 80024d4:	f000 fbdc 	bl	8002c90 <main_loop>
 80024d8:	e7fc      	b.n	80024d4 <main+0x30>
	...

080024dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b0a7      	sub	sp, #156	; 0x9c
 80024e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e2:	245c      	movs	r4, #92	; 0x5c
 80024e4:	193b      	adds	r3, r7, r4
 80024e6:	0018      	movs	r0, r3
 80024e8:	233c      	movs	r3, #60	; 0x3c
 80024ea:	001a      	movs	r2, r3
 80024ec:	2100      	movs	r1, #0
 80024ee:	f008 f9c8 	bl	800a882 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f2:	234c      	movs	r3, #76	; 0x4c
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	0018      	movs	r0, r3
 80024f8:	2310      	movs	r3, #16
 80024fa:	001a      	movs	r2, r3
 80024fc:	2100      	movs	r1, #0
 80024fe:	f008 f9c0 	bl	800a882 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002502:	003b      	movs	r3, r7
 8002504:	0018      	movs	r0, r3
 8002506:	234c      	movs	r3, #76	; 0x4c
 8002508:	001a      	movs	r2, r3
 800250a:	2100      	movs	r1, #0
 800250c:	f008 f9b9 	bl	800a882 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	0018      	movs	r0, r3
 8002516:	f005 f83d 	bl	8007594 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800251a:	193b      	adds	r3, r7, r4
 800251c:	2202      	movs	r2, #2
 800251e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002520:	193b      	adds	r3, r7, r4
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	0052      	lsls	r2, r2, #1
 8002526:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002528:	193b      	adds	r3, r7, r4
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800252e:	193b      	adds	r3, r7, r4
 8002530:	2240      	movs	r2, #64	; 0x40
 8002532:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002534:	193b      	adds	r3, r7, r4
 8002536:	2200      	movs	r2, #0
 8002538:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253a:	193b      	adds	r3, r7, r4
 800253c:	0018      	movs	r0, r3
 800253e:	f005 f875 	bl	800762c <HAL_RCC_OscConfig>
 8002542:	1e03      	subs	r3, r0, #0
 8002544:	d001      	beq.n	800254a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002546:	f000 fb9d 	bl	8002c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800254a:	214c      	movs	r1, #76	; 0x4c
 800254c:	187b      	adds	r3, r7, r1
 800254e:	2207      	movs	r2, #7
 8002550:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002552:	187b      	adds	r3, r7, r1
 8002554:	2200      	movs	r2, #0
 8002556:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002558:	187b      	adds	r3, r7, r1
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800255e:	187b      	adds	r3, r7, r1
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002564:	187b      	adds	r3, r7, r1
 8002566:	2100      	movs	r1, #0
 8002568:	0018      	movs	r0, r3
 800256a:	f005 fbc5 	bl	8007cf8 <HAL_RCC_ClockConfig>
 800256e:	1e03      	subs	r3, r0, #0
 8002570:	d001      	beq.n	8002576 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002572:	f000 fb87 	bl	8002c84 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002576:	003b      	movs	r3, r7
 8002578:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <SystemClock_Config+0xd8>)
 800257a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800257c:	003b      	movs	r3, r7
 800257e:	2200      	movs	r2, #0
 8002580:	605a      	str	r2, [r3, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002582:	003b      	movs	r3, r7
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002588:	003b      	movs	r3, r7
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800258e:	003b      	movs	r3, r7
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002594:	003b      	movs	r3, r7
 8002596:	2200      	movs	r2, #0
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800259a:	003b      	movs	r3, r7
 800259c:	0018      	movs	r0, r3
 800259e:	f005 fd55 	bl	800804c <HAL_RCCEx_PeriphCLKConfig>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d001      	beq.n	80025aa <SystemClock_Config+0xce>
  {
    Error_Handler();
 80025a6:	f000 fb6d 	bl	8002c84 <Error_Handler>
  }
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b027      	add	sp, #156	; 0x9c
 80025b0:	bd90      	pop	{r4, r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	00204023 	.word	0x00204023

080025b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	0018      	movs	r0, r3
 80025c2:	230c      	movs	r3, #12
 80025c4:	001a      	movs	r2, r3
 80025c6:	2100      	movs	r1, #0
 80025c8:	f008 f95b 	bl	800a882 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80025cc:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <MX_ADC1_Init+0xcc>)
 80025ce:	4a2e      	ldr	r2, [pc, #184]	; (8002688 <MX_ADC1_Init+0xd0>)
 80025d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80025d2:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <MX_ADC1_Init+0xcc>)
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	05d2      	lsls	r2, r2, #23
 80025d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <MX_ADC1_Init+0xcc>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <MX_ADC1_Init+0xcc>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025e6:	4b27      	ldr	r3, [pc, #156]	; (8002684 <MX_ADC1_Init+0xcc>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <MX_ADC1_Init+0xcc>)
 80025ee:	2204      	movs	r2, #4
 80025f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <MX_ADC1_Init+0xcc>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80025f8:	4b22      	ldr	r3, [pc, #136]	; (8002684 <MX_ADC1_Init+0xcc>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025fe:	4b21      	ldr	r3, [pc, #132]	; (8002684 <MX_ADC1_Init+0xcc>)
 8002600:	2200      	movs	r2, #0
 8002602:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002604:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <MX_ADC1_Init+0xcc>)
 8002606:	2201      	movs	r2, #1
 8002608:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800260a:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <MX_ADC1_Init+0xcc>)
 800260c:	2220      	movs	r2, #32
 800260e:	2100      	movs	r1, #0
 8002610:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002612:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <MX_ADC1_Init+0xcc>)
 8002614:	2200      	movs	r2, #0
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <MX_ADC1_Init+0xcc>)
 800261a:	2200      	movs	r2, #0
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800261e:	4b19      	ldr	r3, [pc, #100]	; (8002684 <MX_ADC1_Init+0xcc>)
 8002620:	222c      	movs	r2, #44	; 0x2c
 8002622:	2100      	movs	r1, #0
 8002624:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <MX_ADC1_Init+0xcc>)
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800262c:	4b15      	ldr	r3, [pc, #84]	; (8002684 <MX_ADC1_Init+0xcc>)
 800262e:	2200      	movs	r2, #0
 8002630:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <MX_ADC1_Init+0xcc>)
 8002634:	2200      	movs	r2, #0
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <MX_ADC1_Init+0xcc>)
 800263a:	223c      	movs	r2, #60	; 0x3c
 800263c:	2100      	movs	r1, #0
 800263e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <MX_ADC1_Init+0xcc>)
 8002642:	2200      	movs	r2, #0
 8002644:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <MX_ADC1_Init+0xcc>)
 8002648:	0018      	movs	r0, r3
 800264a:	f001 fbd5 	bl	8003df8 <HAL_ADC_Init>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d001      	beq.n	8002656 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002652:	f000 fb17 	bl	8002c84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	4a0c      	ldr	r2, [pc, #48]	; (800268c <MX_ADC1_Init+0xd4>)
 800265a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2200      	movs	r2, #0
 8002660:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002668:	1d3a      	adds	r2, r7, #4
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <MX_ADC1_Init+0xcc>)
 800266c:	0011      	movs	r1, r2
 800266e:	0018      	movs	r0, r3
 8002670:	f001 fda0 	bl	80041b4 <HAL_ADC_ConfigChannel>
 8002674:	1e03      	subs	r3, r0, #0
 8002676:	d001      	beq.n	800267c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002678:	f000 fb04 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b004      	add	sp, #16
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000320 	.word	0x20000320
 8002688:	40012400 	.word	0x40012400
 800268c:	0c000008 	.word	0x0c000008

08002690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <MX_I2C1_Init+0x74>)
 8002696:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <MX_I2C1_Init+0x78>)
 8002698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <MX_I2C1_Init+0x74>)
 800269c:	4a1b      	ldr	r2, [pc, #108]	; (800270c <MX_I2C1_Init+0x7c>)
 800269e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <MX_I2C1_Init+0x74>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <MX_I2C1_Init+0x74>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <MX_I2C1_Init+0x74>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <MX_I2C1_Init+0x74>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <MX_I2C1_Init+0x74>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <MX_I2C1_Init+0x74>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <MX_I2C1_Init+0x74>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <MX_I2C1_Init+0x74>)
 80026cc:	0018      	movs	r0, r3
 80026ce:	f002 fd23 	bl	8005118 <HAL_I2C_Init>
 80026d2:	1e03      	subs	r3, r0, #0
 80026d4:	d001      	beq.n	80026da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026d6:	f000 fad5 	bl	8002c84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <MX_I2C1_Init+0x74>)
 80026dc:	2100      	movs	r1, #0
 80026de:	0018      	movs	r0, r3
 80026e0:	f004 fec0 	bl	8007464 <HAL_I2CEx_ConfigAnalogFilter>
 80026e4:	1e03      	subs	r3, r0, #0
 80026e6:	d001      	beq.n	80026ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026e8:	f000 facc 	bl	8002c84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <MX_I2C1_Init+0x74>)
 80026ee:	2100      	movs	r1, #0
 80026f0:	0018      	movs	r0, r3
 80026f2:	f004 ff03 	bl	80074fc <HAL_I2CEx_ConfigDigitalFilter>
 80026f6:	1e03      	subs	r3, r0, #0
 80026f8:	d001      	beq.n	80026fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026fa:	f000 fac3 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000270 	.word	0x20000270
 8002708:	40005400 	.word	0x40005400
 800270c:	00303d5b 	.word	0x00303d5b

08002710 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b098      	sub	sp, #96	; 0x60
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002716:	2354      	movs	r3, #84	; 0x54
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	0018      	movs	r0, r3
 800271c:	230c      	movs	r3, #12
 800271e:	001a      	movs	r2, r3
 8002720:	2100      	movs	r1, #0
 8002722:	f008 f8ae 	bl	800a882 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002726:	2338      	movs	r3, #56	; 0x38
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	0018      	movs	r0, r3
 800272c:	231c      	movs	r3, #28
 800272e:	001a      	movs	r2, r3
 8002730:	2100      	movs	r1, #0
 8002732:	f008 f8a6 	bl	800a882 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	0018      	movs	r0, r3
 800273a:	2334      	movs	r3, #52	; 0x34
 800273c:	001a      	movs	r2, r3
 800273e:	2100      	movs	r1, #0
 8002740:	f008 f89f 	bl	800a882 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002744:	4b4b      	ldr	r3, [pc, #300]	; (8002874 <MX_TIM1_Init+0x164>)
 8002746:	4a4c      	ldr	r2, [pc, #304]	; (8002878 <MX_TIM1_Init+0x168>)
 8002748:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800274a:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <MX_TIM1_Init+0x164>)
 800274c:	2200      	movs	r2, #0
 800274e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002750:	4b48      	ldr	r3, [pc, #288]	; (8002874 <MX_TIM1_Init+0x164>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002756:	4b47      	ldr	r3, [pc, #284]	; (8002874 <MX_TIM1_Init+0x164>)
 8002758:	4a48      	ldr	r2, [pc, #288]	; (800287c <MX_TIM1_Init+0x16c>)
 800275a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275c:	4b45      	ldr	r3, [pc, #276]	; (8002874 <MX_TIM1_Init+0x164>)
 800275e:	2200      	movs	r2, #0
 8002760:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002762:	4b44      	ldr	r3, [pc, #272]	; (8002874 <MX_TIM1_Init+0x164>)
 8002764:	2200      	movs	r2, #0
 8002766:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002768:	4b42      	ldr	r3, [pc, #264]	; (8002874 <MX_TIM1_Init+0x164>)
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800276e:	4b41      	ldr	r3, [pc, #260]	; (8002874 <MX_TIM1_Init+0x164>)
 8002770:	0018      	movs	r0, r3
 8002772:	f005 fea7 	bl	80084c4 <HAL_TIM_PWM_Init>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d001      	beq.n	800277e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800277a:	f000 fa83 	bl	8002c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800277e:	2154      	movs	r1, #84	; 0x54
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2200      	movs	r2, #0
 800278a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002792:	187a      	adds	r2, r7, r1
 8002794:	4b37      	ldr	r3, [pc, #220]	; (8002874 <MX_TIM1_Init+0x164>)
 8002796:	0011      	movs	r1, r2
 8002798:	0018      	movs	r0, r3
 800279a:	f006 fb2f 	bl	8008dfc <HAL_TIMEx_MasterConfigSynchronization>
 800279e:	1e03      	subs	r3, r0, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80027a2:	f000 fa6f 	bl	8002c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027a6:	2138      	movs	r1, #56	; 0x38
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	2260      	movs	r2, #96	; 0x60
 80027ac:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2200      	movs	r2, #0
 80027b2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	2200      	movs	r2, #0
 80027be:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	2200      	movs	r2, #0
 80027ca:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	2200      	movs	r2, #0
 80027d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027d2:	1879      	adds	r1, r7, r1
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <MX_TIM1_Init+0x164>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	0018      	movs	r0, r3
 80027da:	f005 fecb 	bl	8008574 <HAL_TIM_PWM_ConfigChannel>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80027e2:	f000 fa4f 	bl	8002c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027e6:	2338      	movs	r3, #56	; 0x38
 80027e8:	18f9      	adds	r1, r7, r3
 80027ea:	4b22      	ldr	r3, [pc, #136]	; (8002874 <MX_TIM1_Init+0x164>)
 80027ec:	2204      	movs	r2, #4
 80027ee:	0018      	movs	r0, r3
 80027f0:	f005 fec0 	bl	8008574 <HAL_TIM_PWM_ConfigChannel>
 80027f4:	1e03      	subs	r3, r0, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80027f8:	f000 fa44 	bl	8002c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	2200      	movs	r2, #0
 8002806:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	2200      	movs	r2, #0
 8002812:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002814:	1d3b      	adds	r3, r7, #4
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2280      	movs	r2, #128	; 0x80
 800281e:	0192      	lsls	r2, r2, #6
 8002820:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	2200      	movs	r2, #0
 8002832:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	0492      	lsls	r2, r2, #18
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	2200      	movs	r2, #0
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	2200      	movs	r2, #0
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	2200      	movs	r2, #0
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800284e:	1d3a      	adds	r2, r7, #4
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <MX_TIM1_Init+0x164>)
 8002852:	0011      	movs	r1, r2
 8002854:	0018      	movs	r0, r3
 8002856:	f006 fb47 	bl	8008ee8 <HAL_TIMEx_ConfigBreakDeadTime>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 800285e:	f000 fa11 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <MX_TIM1_Init+0x164>)
 8002864:	0018      	movs	r0, r3
 8002866:	f000 fd1d 	bl	80032a4 <HAL_TIM_MspPostInit>

}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b018      	add	sp, #96	; 0x60
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	200004ac 	.word	0x200004ac
 8002878:	40012c00 	.word	0x40012c00
 800287c:	0000ffff 	.word	0x0000ffff

08002880 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002886:	231c      	movs	r3, #28
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	0018      	movs	r0, r3
 800288c:	230c      	movs	r3, #12
 800288e:	001a      	movs	r2, r3
 8002890:	2100      	movs	r1, #0
 8002892:	f007 fff6 	bl	800a882 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002896:	003b      	movs	r3, r7
 8002898:	0018      	movs	r0, r3
 800289a:	231c      	movs	r3, #28
 800289c:	001a      	movs	r2, r3
 800289e:	2100      	movs	r1, #0
 80028a0:	f007 ffef 	bl	800a882 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028a4:	4b29      	ldr	r3, [pc, #164]	; (800294c <MX_TIM3_Init+0xcc>)
 80028a6:	4a2a      	ldr	r2, [pc, #168]	; (8002950 <MX_TIM3_Init+0xd0>)
 80028a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80028aa:	4b28      	ldr	r3, [pc, #160]	; (800294c <MX_TIM3_Init+0xcc>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b0:	4b26      	ldr	r3, [pc, #152]	; (800294c <MX_TIM3_Init+0xcc>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80028b6:	4b25      	ldr	r3, [pc, #148]	; (800294c <MX_TIM3_Init+0xcc>)
 80028b8:	4a26      	ldr	r2, [pc, #152]	; (8002954 <MX_TIM3_Init+0xd4>)
 80028ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028bc:	4b23      	ldr	r3, [pc, #140]	; (800294c <MX_TIM3_Init+0xcc>)
 80028be:	2200      	movs	r2, #0
 80028c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <MX_TIM3_Init+0xcc>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028c8:	4b20      	ldr	r3, [pc, #128]	; (800294c <MX_TIM3_Init+0xcc>)
 80028ca:	0018      	movs	r0, r3
 80028cc:	f005 fdfa 	bl	80084c4 <HAL_TIM_PWM_Init>
 80028d0:	1e03      	subs	r3, r0, #0
 80028d2:	d001      	beq.n	80028d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80028d4:	f000 f9d6 	bl	8002c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d8:	211c      	movs	r1, #28
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028e6:	187a      	adds	r2, r7, r1
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <MX_TIM3_Init+0xcc>)
 80028ea:	0011      	movs	r1, r2
 80028ec:	0018      	movs	r0, r3
 80028ee:	f006 fa85 	bl	8008dfc <HAL_TIMEx_MasterConfigSynchronization>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80028f6:	f000 f9c5 	bl	8002c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028fa:	003b      	movs	r3, r7
 80028fc:	2260      	movs	r2, #96	; 0x60
 80028fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002900:	003b      	movs	r3, r7
 8002902:	2200      	movs	r2, #0
 8002904:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002906:	003b      	movs	r3, r7
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800290c:	003b      	movs	r3, r7
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002912:	0039      	movs	r1, r7
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <MX_TIM3_Init+0xcc>)
 8002916:	2200      	movs	r2, #0
 8002918:	0018      	movs	r0, r3
 800291a:	f005 fe2b 	bl	8008574 <HAL_TIM_PWM_ConfigChannel>
 800291e:	1e03      	subs	r3, r0, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8002922:	f000 f9af 	bl	8002c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002926:	0039      	movs	r1, r7
 8002928:	4b08      	ldr	r3, [pc, #32]	; (800294c <MX_TIM3_Init+0xcc>)
 800292a:	2204      	movs	r2, #4
 800292c:	0018      	movs	r0, r3
 800292e:	f005 fe21 	bl	8008574 <HAL_TIM_PWM_ConfigChannel>
 8002932:	1e03      	subs	r3, r0, #0
 8002934:	d001      	beq.n	800293a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8002936:	f000 f9a5 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <MX_TIM3_Init+0xcc>)
 800293c:	0018      	movs	r0, r3
 800293e:	f000 fcb1 	bl	80032a4 <HAL_TIM_MspPostInit>

}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	46bd      	mov	sp, r7
 8002946:	b00a      	add	sp, #40	; 0x28
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	200002d4 	.word	0x200002d4
 8002950:	40000400 	.word	0x40000400
 8002954:	0000ffff 	.word	0x0000ffff

08002958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <MX_USART1_UART_Init+0x94>)
 800295e:	4a24      	ldr	r2, [pc, #144]	; (80029f0 <MX_USART1_UART_Init+0x98>)
 8002960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002962:	4b22      	ldr	r3, [pc, #136]	; (80029ec <MX_USART1_UART_Init+0x94>)
 8002964:	2296      	movs	r2, #150	; 0x96
 8002966:	0212      	lsls	r2, r2, #8
 8002968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <MX_USART1_UART_Init+0x94>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <MX_USART1_UART_Init+0x94>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <MX_USART1_UART_Init+0x94>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <MX_USART1_UART_Init+0x94>)
 800297e:	220c      	movs	r2, #12
 8002980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_CTS;
 8002982:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <MX_USART1_UART_Init+0x94>)
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800298a:	4b18      	ldr	r3, [pc, #96]	; (80029ec <MX_USART1_UART_Init+0x94>)
 800298c:	2200      	movs	r2, #0
 800298e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002990:	4b16      	ldr	r3, [pc, #88]	; (80029ec <MX_USART1_UART_Init+0x94>)
 8002992:	2200      	movs	r2, #0
 8002994:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <MX_USART1_UART_Init+0x94>)
 8002998:	2200      	movs	r2, #0
 800299a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <MX_USART1_UART_Init+0x94>)
 800299e:	2200      	movs	r2, #0
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <MX_USART1_UART_Init+0x94>)
 80029a4:	0018      	movs	r0, r3
 80029a6:	f006 fb45 	bl	8009034 <HAL_UART_Init>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d001      	beq.n	80029b2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80029ae:	f000 f969 	bl	8002c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <MX_USART1_UART_Init+0x94>)
 80029b4:	2100      	movs	r1, #0
 80029b6:	0018      	movs	r0, r3
 80029b8:	f007 fe46 	bl	800a648 <HAL_UARTEx_SetTxFifoThreshold>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d001      	beq.n	80029c4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80029c0:	f000 f960 	bl	8002c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <MX_USART1_UART_Init+0x94>)
 80029c6:	2100      	movs	r1, #0
 80029c8:	0018      	movs	r0, r3
 80029ca:	f007 fe7d 	bl	800a6c8 <HAL_UARTEx_SetRxFifoThreshold>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d001      	beq.n	80029d6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80029d2:	f000 f957 	bl	8002c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <MX_USART1_UART_Init+0x94>)
 80029d8:	0018      	movs	r0, r3
 80029da:	f007 fdfb 	bl	800a5d4 <HAL_UARTEx_DisableFifoMode>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80029e2:	f000 f94f 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000418 	.word	0x20000418
 80029f0:	40013800 	.word	0x40013800

080029f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029f8:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 80029fa:	4a24      	ldr	r2, [pc, #144]	; (8002a8c <MX_USART2_UART_Init+0x98>)
 80029fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a00:	2296      	movs	r2, #150	; 0x96
 8002a02:	0212      	lsls	r2, r2, #8
 8002a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a30:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f006 faf8 	bl	8009034 <HAL_UART_Init>
 8002a44:	1e03      	subs	r3, r0, #0
 8002a46:	d001      	beq.n	8002a4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a48:	f000 f91c 	bl	8002c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a4e:	2100      	movs	r1, #0
 8002a50:	0018      	movs	r0, r3
 8002a52:	f007 fdf9 	bl	800a648 <HAL_UARTEx_SetTxFifoThreshold>
 8002a56:	1e03      	subs	r3, r0, #0
 8002a58:	d001      	beq.n	8002a5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a5a:	f000 f913 	bl	8002c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a60:	2100      	movs	r1, #0
 8002a62:	0018      	movs	r0, r3
 8002a64:	f007 fe30 	bl	800a6c8 <HAL_UARTEx_SetRxFifoThreshold>
 8002a68:	1e03      	subs	r3, r0, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a6c:	f000 f90a 	bl	8002c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <MX_USART2_UART_Init+0x94>)
 8002a72:	0018      	movs	r0, r3
 8002a74:	f007 fdae 	bl	800a5d4 <HAL_UARTEx_DisableFifoMode>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a7c:	f000 f902 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	20000504 	.word	0x20000504
 8002a8c:	40004400 	.word	0x40004400

08002a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <MX_DMA_Init+0x48>)
 8002a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_DMA_Init+0x48>)
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <MX_DMA_Init+0x48>)
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	2009      	movs	r0, #9
 8002ab4:	f001 fe40 	bl	8004738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ab8:	2009      	movs	r0, #9
 8002aba:	f001 fe52 	bl	8004762 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	200a      	movs	r0, #10
 8002ac4:	f001 fe38 	bl	8004738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002ac8:	200a      	movs	r0, #10
 8002aca:	f001 fe4a 	bl	8004762 <HAL_NVIC_EnableIRQ>

}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b002      	add	sp, #8
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	40021000 	.word	0x40021000

08002adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b08b      	sub	sp, #44	; 0x2c
 8002ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae2:	2414      	movs	r4, #20
 8002ae4:	193b      	adds	r3, r7, r4
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	2314      	movs	r3, #20
 8002aea:	001a      	movs	r2, r3
 8002aec:	2100      	movs	r1, #0
 8002aee:	f007 fec8 	bl	800a882 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af2:	4b5e      	ldr	r3, [pc, #376]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af6:	4b5d      	ldr	r3, [pc, #372]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002af8:	2104      	movs	r1, #4
 8002afa:	430a      	orrs	r2, r1
 8002afc:	635a      	str	r2, [r3, #52]	; 0x34
 8002afe:	4b5b      	ldr	r3, [pc, #364]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	2204      	movs	r2, #4
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b0a:	4b58      	ldr	r3, [pc, #352]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b0e:	4b57      	ldr	r3, [pc, #348]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b10:	2120      	movs	r1, #32
 8002b12:	430a      	orrs	r2, r1
 8002b14:	635a      	str	r2, [r3, #52]	; 0x34
 8002b16:	4b55      	ldr	r3, [pc, #340]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	4b52      	ldr	r3, [pc, #328]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b26:	4b51      	ldr	r3, [pc, #324]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b28:	2101      	movs	r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b2e:	4b4f      	ldr	r3, [pc, #316]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	2201      	movs	r2, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3a:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3e:	4b4b      	ldr	r3, [pc, #300]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b40:	2102      	movs	r1, #2
 8002b42:	430a      	orrs	r2, r1
 8002b44:	635a      	str	r2, [r3, #52]	; 0x34
 8002b46:	4b49      	ldr	r3, [pc, #292]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b52:	4b46      	ldr	r3, [pc, #280]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b56:	4b45      	ldr	r3, [pc, #276]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b58:	2108      	movs	r1, #8
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b5e:	4b43      	ldr	r3, [pc, #268]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	2208      	movs	r2, #8
 8002b64:	4013      	ands	r3, r2
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HBRIDGE_BWD_Pin|LIMIT_SWITCH_0_Pin, GPIO_PIN_RESET);
 8002b6a:	23c0      	movs	r3, #192	; 0xc0
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	4840      	ldr	r0, [pc, #256]	; (8002c70 <MX_GPIO_Init+0x194>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	0019      	movs	r1, r3
 8002b74:	f002 fab2 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, GPIO_PIN_RESET);
 8002b78:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <MX_GPIO_Init+0x198>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f002 faac 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIMIT_SWITCH_2_GPIO_Port, LIMIT_SWITCH_2_Pin, GPIO_PIN_RESET);
 8002b84:	23a0      	movs	r3, #160	; 0xa0
 8002b86:	05db      	lsls	r3, r3, #23
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f002 faa5 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WHITE_LED_Pin|UV_BULB_Pin|RAMAN_LASER_Pin|NICHROME_WIRE_0_Pin
 8002b92:	4939      	ldr	r1, [pc, #228]	; (8002c78 <MX_GPIO_Init+0x19c>)
 8002b94:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <MX_GPIO_Init+0x1a0>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f002 fa9f 	bl	80050dc <HAL_GPIO_WritePin>
                          |AUTON_LED_1_AND_LASER_Pin|AUTON_LED_0_Pin|SERVO_PWM_2_Pin|AUTON_LED_2_AND_UV_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NICHROME_WIRE_1_Pin|NICHROME_WIRE_2_Pin, GPIO_PIN_RESET);
 8002b9e:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <MX_GPIO_Init+0x1a4>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	210a      	movs	r1, #10
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f002 fa99 	bl	80050dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HBRIDGE_BWD_Pin LIMIT_SWITCH_0_Pin */
  GPIO_InitStruct.Pin = HBRIDGE_BWD_Pin|LIMIT_SWITCH_0_Pin;
 8002baa:	193b      	adds	r3, r7, r4
 8002bac:	22c0      	movs	r2, #192	; 0xc0
 8002bae:	0212      	lsls	r2, r2, #8
 8002bb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	193b      	adds	r3, r7, r4
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	193b      	adds	r3, r7, r4
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc4:	193b      	adds	r3, r7, r4
 8002bc6:	4a2a      	ldr	r2, [pc, #168]	; (8002c70 <MX_GPIO_Init+0x194>)
 8002bc8:	0019      	movs	r1, r3
 8002bca:	0010      	movs	r0, r2
 8002bcc:	f002 f91a 	bl	8004e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_SWITCH_1_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin;
 8002bd0:	193b      	adds	r3, r7, r4
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd6:	193b      	adds	r3, r7, r4
 8002bd8:	2201      	movs	r2, #1
 8002bda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	193b      	adds	r3, r7, r4
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	193b      	adds	r3, r7, r4
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIMIT_SWITCH_1_GPIO_Port, &GPIO_InitStruct);
 8002be8:	193b      	adds	r3, r7, r4
 8002bea:	4a22      	ldr	r2, [pc, #136]	; (8002c74 <MX_GPIO_Init+0x198>)
 8002bec:	0019      	movs	r1, r3
 8002bee:	0010      	movs	r0, r2
 8002bf0:	f002 f908 	bl	8004e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_2_Pin;
 8002bf4:	193b      	adds	r3, r7, r4
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	193b      	adds	r3, r7, r4
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	193b      	adds	r3, r7, r4
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIMIT_SWITCH_2_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	193a      	adds	r2, r7, r4
 8002c0e:	23a0      	movs	r3, #160	; 0xa0
 8002c10:	05db      	lsls	r3, r3, #23
 8002c12:	0011      	movs	r1, r2
 8002c14:	0018      	movs	r0, r3
 8002c16:	f002 f8f5 	bl	8004e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : WHITE_LED_Pin UV_BULB_Pin RAMAN_LASER_Pin NICHROME_WIRE_0_Pin
                           AUTON_LED_1_AND_LASER_Pin AUTON_LED_0_Pin SERVO_PWM_2_Pin AUTON_LED_2_AND_UV_LED_Pin */
  GPIO_InitStruct.Pin = WHITE_LED_Pin|UV_BULB_Pin|RAMAN_LASER_Pin|NICHROME_WIRE_0_Pin
 8002c1a:	193b      	adds	r3, r7, r4
 8002c1c:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <MX_GPIO_Init+0x19c>)
 8002c1e:	601a      	str	r2, [r3, #0]
                          |AUTON_LED_1_AND_LASER_Pin|AUTON_LED_0_Pin|SERVO_PWM_2_Pin|AUTON_LED_2_AND_UV_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	2201      	movs	r2, #1
 8002c24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	2200      	movs	r2, #0
 8002c30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <MX_GPIO_Init+0x1a0>)
 8002c36:	0019      	movs	r1, r3
 8002c38:	0010      	movs	r0, r2
 8002c3a:	f002 f8e3 	bl	8004e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : NICHROME_WIRE_1_Pin NICHROME_WIRE_2_Pin */
  GPIO_InitStruct.Pin = NICHROME_WIRE_1_Pin|NICHROME_WIRE_2_Pin;
 8002c3e:	0021      	movs	r1, r4
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	220a      	movs	r2, #10
 8002c44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	2201      	movs	r2, #1
 8002c4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	187b      	adds	r3, r7, r1
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	187b      	adds	r3, r7, r1
 8002c54:	2200      	movs	r2, #0
 8002c56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c58:	187b      	adds	r3, r7, r1
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <MX_GPIO_Init+0x1a4>)
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	0010      	movs	r0, r2
 8002c60:	f002 f8d0 	bl	8004e04 <HAL_GPIO_Init>

}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b00b      	add	sp, #44	; 0x2c
 8002c6a:	bd90      	pop	{r4, r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	50000800 	.word	0x50000800
 8002c74:	50001400 	.word	0x50001400
 8002c78:	00003e70 	.word	0x00003e70
 8002c7c:	50000400 	.word	0x50000400
 8002c80:	50000c00 	.word	0x50000c00

08002c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c88:	b672      	cpsid	i
}
 8002c8a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <Error_Handler+0x8>
	...

08002c90 <main_loop>:

// Extern Vars
extern char* mosfetcopy;
extern char* servocopy;

int main_loop(){
 8002c90:	b5b0      	push	{r4, r5, r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af02      	add	r7, sp, #8
	// Read and send all thermistor data over Jetson UART
	send_thermistor_data(thermistors, JETSON_UART);
#endif

	//Disable interrupts
	    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002c96:	201b      	movs	r0, #27
 8002c98:	f001 fd73 	bl	8004782 <HAL_NVIC_DisableIRQ>
	   	uint8_t message[20];
	   	for(int i = 0; i< 20; ++i){
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	e007      	b.n	8002cb2 <main_loop+0x22>
	   		message[i] = 0;
 8002ca2:	003a      	movs	r2, r7
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	18d3      	adds	r3, r2, r3
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
	   	for(int i = 0; i< 20; ++i){
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2b13      	cmp	r3, #19
 8002cb6:	ddf4      	ble.n	8002ca2 <main_loop+0x12>
	   	}
	   	if(cmd_received == 1){
 8002cb8:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <main_loop+0x150>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10a      	bne.n	8002cd6 <main_loop+0x46>
	   		cmd_received = 0;
 8002cc0:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <main_loop+0x150>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
	   		memcpy(message,cmd_data,20);
 8002cc6:	003a      	movs	r2, r7
 8002cc8:	4b46      	ldr	r3, [pc, #280]	; (8002de4 <main_loop+0x154>)
 8002cca:	0010      	movs	r0, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	2314      	movs	r3, #20
 8002cd0:	001a      	movs	r2, r3
 8002cd2:	f007 fdcd 	bl	800a870 <memcpy>
	   	}
	   	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cd6:	201b      	movs	r0, #27
 8002cd8:	f001 fd43 	bl	8004762 <HAL_NVIC_EnableIRQ>

#ifdef TRIAD_ENABLE
	// strcpy((char*)buf, "Hello!\r\n");
	// HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	// HAL_Delay(500);
	Channel *channel = new_channel(0, 0);
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f000 fe9a 	bl	8003a18 <new_channel>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < 3; ++i) {
 8002ce8:	231b      	movs	r3, #27
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	e066      	b.n	8002dc0 <main_loop+0x130>
	  virtual_write(DEV_SEL, triad[i]->dev_register);
 8002cf2:	231b      	movs	r3, #27
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <main_loop+0x158>)
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	58d3      	ldr	r3, [r2, r3]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	0019      	movs	r1, r3
 8002d02:	204f      	movs	r0, #79	; 0x4f
 8002d04:	f000 fe3a 	bl	800397c <virtual_write>
	  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8002d08:	231a      	movs	r3, #26
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	e04b      	b.n	8002daa <main_loop+0x11a>
		  channel = triad[i]->channels[j];
 8002d12:	251b      	movs	r5, #27
 8002d14:	197b      	adds	r3, r7, r5
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	4b33      	ldr	r3, [pc, #204]	; (8002de8 <main_loop+0x158>)
 8002d1a:	0092      	lsls	r2, r2, #2
 8002d1c:	58d2      	ldr	r2, [r2, r3]
 8002d1e:	241a      	movs	r4, #26
 8002d20:	193b      	adds	r3, r7, r4
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	18d3      	adds	r3, r2, r3
 8002d28:	3304      	adds	r3, #4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	617b      	str	r3, [r7, #20]
		  channel->color_data = get_decimal(channel->lsb_register, channel->msb_register);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	0019      	movs	r1, r3
 8002d38:	0010      	movs	r0, r2
 8002d3a:	f000 fd4e 	bl	80037da <get_decimal>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	001a      	movs	r2, r3
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	805a      	strh	r2, [r3, #2]

		  //complicated way to print "channel {x} : {data}"
		  sprintf((char*)buf_triad , "channel %u : %f \r\n", (unsigned int)((i*CHANNELS) + j), (float)channel->color_data);
 8002d46:	197b      	adds	r3, r7, r5
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	0013      	movs	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	189b      	adds	r3, r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	001a      	movs	r2, r3
 8002d54:	0025      	movs	r5, r4
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	18d3      	adds	r3, r2, r3
 8002d5c:	001c      	movs	r4, r3
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	885b      	ldrh	r3, [r3, #2]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7fd fc8a 	bl	800067c <__aeabi_ui2f>
 8002d68:	1c03      	adds	r3, r0, #0
 8002d6a:	1c18      	adds	r0, r3, #0
 8002d6c:	f7ff fada 	bl	8002324 <__aeabi_f2d>
 8002d70:	0002      	movs	r2, r0
 8002d72:	000b      	movs	r3, r1
 8002d74:	491d      	ldr	r1, [pc, #116]	; (8002dec <main_loop+0x15c>)
 8002d76:	481e      	ldr	r0, [pc, #120]	; (8002df0 <main_loop+0x160>)
 8002d78:	9200      	str	r2, [sp, #0]
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	0022      	movs	r2, r4
 8002d7e:	f008 fabd 	bl	800b2fc <siprintf>

		  HAL_UART_Transmit(&huart1, buf_triad, strlen((char*)buf_triad), HAL_MAX_DELAY);
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <main_loop+0x160>)
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7fd f9bd 	bl	8000104 <strlen>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	2301      	movs	r3, #1
 8002d90:	425b      	negs	r3, r3
 8002d92:	4917      	ldr	r1, [pc, #92]	; (8002df0 <main_loop+0x160>)
 8002d94:	4817      	ldr	r0, [pc, #92]	; (8002df4 <main_loop+0x164>)
 8002d96:	f006 f9a3 	bl	80090e0 <HAL_UART_Transmit>
		  HAL_Delay(10);
 8002d9a:	200a      	movs	r0, #10
 8002d9c:	f000 ff0a 	bl	8003bb4 <HAL_Delay>
	  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8002da0:	197b      	adds	r3, r7, r5
 8002da2:	197a      	adds	r2, r7, r5
 8002da4:	7812      	ldrb	r2, [r2, #0]
 8002da6:	3201      	adds	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	231a      	movs	r3, #26
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d9ae      	bls.n	8002d12 <main_loop+0x82>
	for (uint8_t i = 0; i < 3; ++i) {
 8002db4:	221b      	movs	r2, #27
 8002db6:	18bb      	adds	r3, r7, r2
 8002db8:	18ba      	adds	r2, r7, r2
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	3201      	adds	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	231b      	movs	r3, #27
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d993      	bls.n	8002cf2 <main_loop+0x62>
	  }
	}
	HAL_Delay(1000);
 8002dca:	23fa      	movs	r3, #250	; 0xfa
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 fef0 	bl	8003bb4 <HAL_Delay>
#endif
	return 0;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b008      	add	sp, #32
 8002ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	200001f8 	.word	0x200001f8
 8002de4:	200003e4 	.word	0x200003e4
 8002de8:	200004f8 	.word	0x200004f8
 8002dec:	0800d720 	.word	0x0800d720
 8002df0:	200003f8 	.word	0x200003f8
 8002df4:	20000418 	.word	0x20000418

08002df8 <main_preloop>:

// Extern Vars



int main_preloop(){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 8002dfe:	491f      	ldr	r1, [pc, #124]	; (8002e7c <main_preloop+0x84>)
 8002e00:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <main_preloop+0x88>)
 8002e02:	2214      	movs	r2, #20
 8002e04:	0018      	movs	r0, r3
 8002e06:	f006 fa17 	bl	8009238 <HAL_UART_Receive_DMA>

#endif

#ifdef TRIAD_ENABLE

	i2cBus = new_smbus(&hi2c1, &huart1);
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <main_preloop+0x8c>)
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <main_preloop+0x90>)
 8002e0e:	0011      	movs	r1, r2
 8002e10:	0018      	movs	r0, r3
 8002e12:	f000 f845 	bl	8002ea0 <new_smbus>
 8002e16:	0002      	movs	r2, r0
 8002e18:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <main_preloop+0x94>)
 8002e1a:	601a      	str	r2, [r3, #0]

	uint8_t buf[30];

	triad_dev_1 = new_device(0x00);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f000 fcff 	bl	8003820 <new_device>
 8002e22:	0002      	movs	r2, r0
 8002e24:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <main_preloop+0x98>)
 8002e26:	601a      	str	r2, [r3, #0]

	triad_dev_2 = new_device(0x01);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f000 fcf9 	bl	8003820 <new_device>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <main_preloop+0x9c>)
 8002e32:	601a      	str	r2, [r3, #0]

	triad_dev_3 = new_device(0x02);
 8002e34:	2002      	movs	r0, #2
 8002e36:	f000 fcf3 	bl	8003820 <new_device>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <main_preloop+0xa0>)
 8002e3e:	601a      	str	r2, [r3, #0]

	triad[0] = triad_dev_1;
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <main_preloop+0x98>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <main_preloop+0xa4>)
 8002e46:	601a      	str	r2, [r3, #0]
	triad[1] = triad_dev_2;
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <main_preloop+0x9c>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <main_preloop+0xa4>)
 8002e4e:	605a      	str	r2, [r3, #4]
	triad[2] = triad_dev_3;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <main_preloop+0xa0>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <main_preloop+0xa4>)
 8002e56:	609a      	str	r2, [r3, #8]

	virtual_write(0x04, 0x28);
 8002e58:	2128      	movs	r1, #40	; 0x28
 8002e5a:	2004      	movs	r0, #4
 8002e5c:	f000 fd8e 	bl	800397c <virtual_write>
	virtual_write(0x04, 0x28);
 8002e60:	2128      	movs	r1, #40	; 0x28
 8002e62:	2004      	movs	r0, #4
 8002e64:	f000 fd8a 	bl	800397c <virtual_write>
	virtual_write(0x05, 0xFF);
 8002e68:	21ff      	movs	r1, #255	; 0xff
 8002e6a:	2005      	movs	r0, #5
 8002e6c:	f000 fd86 	bl	800397c <virtual_write>

#endif
	return 0;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b008      	add	sp, #32
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	200002bc 	.word	0x200002bc
 8002e80:	20000504 	.word	0x20000504
 8002e84:	20000418 	.word	0x20000418
 8002e88:	20000270 	.word	0x20000270
 8002e8c:	200002d0 	.word	0x200002d0
 8002e90:	2000026c 	.word	0x2000026c
 8002e94:	200004a8 	.word	0x200004a8
 8002e98:	20000208 	.word	0x20000208
 8002e9c:	200004f8 	.word	0x200004f8

08002ea0 <new_smbus>:
#include "smbus.h"


SMBus *new_smbus(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
    SMBus *smbus = malloc(sizeof(SMBus));
 8002eaa:	2028      	movs	r0, #40	; 0x28
 8002eac:	f007 fcd6 	bl	800a85c <malloc>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	60fb      	str	r3, [r7, #12]
    smbus->i2c = hi2c;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
    smbus->uart = huart;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
    smbus->DMA = TRUE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2227      	movs	r2, #39	; 0x27
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	5499      	strb	r1, [r3, r2]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3309      	adds	r3, #9
 8002ecc:	221e      	movs	r2, #30
 8002ece:	2100      	movs	r1, #0
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f007 fcd6 	bl	800a882 <memset>

    return smbus;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b004      	add	sp, #16
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <read_byte_data>:
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
    }
    _check_error(smbus);
}

long read_byte_data(SMBus *smbus, uint8_t addr, char cmd) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	0008      	movs	r0, r1
 8002eea:	0011      	movs	r1, r2
 8002eec:	1cfb      	adds	r3, r7, #3
 8002eee:	1c02      	adds	r2, r0, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	1cbb      	adds	r3, r7, #2
 8002ef4:	1c0a      	adds	r2, r1, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
    //transmits the address to read from
    smbus->buf[0] = cmd;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	1cba      	adds	r2, r7, #2
 8002efc:	7812      	ldrb	r2, [r2, #0]
 8002efe:	725a      	strb	r2, [r3, #9]
    if (!smbus->DMA) {
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2227      	movs	r2, #39	; 0x27
 8002f04:	5c9b      	ldrb	r3, [r3, r2]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d114      	bne.n	8002f34 <read_byte_data+0x54>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, 1000);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	1cfb      	adds	r3, r7, #3
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	18db      	adds	r3, r3, r3
 8002f16:	b299      	uxth	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3309      	adds	r3, #9
 8002f1c:	001a      	movs	r2, r3
 8002f1e:	23fa      	movs	r3, #250	; 0xfa
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2301      	movs	r3, #1
 8002f26:	f002 f98d 	bl	8005244 <HAL_I2C_Master_Transmit>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	001a      	movs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	721a      	strb	r2, [r3, #8]
 8002f32:	e010      	b.n	8002f56 <read_byte_data+0x76>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	1cfb      	adds	r3, r7, #3
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	18db      	adds	r3, r3, r3
 8002f40:	b299      	uxth	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3309      	adds	r3, #9
 8002f46:	001a      	movs	r2, r3
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f002 fb8b 	bl	8005664 <HAL_I2C_Master_Transmit_DMA>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	001a      	movs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f000 f887 	bl	800306c <_check_error>
    
    //reads from address sent above
    if (!smbus->DMA) {
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2227      	movs	r2, #39	; 0x27
 8002f62:	5c9b      	ldrb	r3, [r3, r2]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d117      	bne.n	8002f98 <read_byte_data+0xb8>
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 1, 1000);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	1cfb      	adds	r3, r7, #3
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	b21b      	sxth	r3, r3
 8002f74:	2201      	movs	r2, #1
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b21b      	sxth	r3, r3
 8002f7a:	b299      	uxth	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3309      	adds	r3, #9
 8002f80:	001a      	movs	r2, r3
 8002f82:	23fa      	movs	r3, #250	; 0xfa
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f002 fa63 	bl	8005454 <HAL_I2C_Master_Receive>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	001a      	movs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	721a      	strb	r2, [r3, #8]
 8002f96:	e013      	b.n	8002fc0 <read_byte_data+0xe0>
    }
    else {
        smbus->ret = HAL_I2C_Master_Receive_DMA(smbus->i2c, (addr << 1) | 1, smbus->buf, 1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	1cfb      	adds	r3, r7, #3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	b21b      	sxth	r3, r3
 8002faa:	b299      	uxth	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3309      	adds	r3, #9
 8002fb0:	001a      	movs	r2, r3
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f002 fc5c 	bl	8005870 <HAL_I2C_Master_Receive_DMA>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	001a      	movs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f000 f852 	bl	800306c <_check_error>
    return smbus->buf[0];
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7a5b      	ldrb	r3, [r3, #9]
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <write_byte_data>:

void write_byte_data(SMBus *smbus, uint8_t addr, char cmd, uint8_t data) {
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	000c      	movs	r4, r1
 8002fde:	0010      	movs	r0, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	1cfb      	adds	r3, r7, #3
 8002fe4:	1c22      	adds	r2, r4, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	1cbb      	adds	r3, r7, #2
 8002fea:	1c02      	adds	r2, r0, #0
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	1c7b      	adds	r3, r7, #1
 8002ff0:	1c0a      	adds	r2, r1, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
    smbus->buf[0] = cmd;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1cba      	adds	r2, r7, #2
 8002ff8:	7812      	ldrb	r2, [r2, #0]
 8002ffa:	725a      	strb	r2, [r3, #9]
    smbus->buf[1] = data;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	1c7a      	adds	r2, r7, #1
 8003000:	7812      	ldrb	r2, [r2, #0]
 8003002:	729a      	strb	r2, [r3, #10]

    //SMBUS docs first byte is cmd to write, second is data
    if (!smbus->DMA) {
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2227      	movs	r2, #39	; 0x27
 8003008:	5c9b      	ldrb	r3, [r3, r2]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d114      	bne.n	8003038 <write_byte_data+0x64>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 2, 1000);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	1cfb      	adds	r3, r7, #3
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	18db      	adds	r3, r3, r3
 800301a:	b299      	uxth	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3309      	adds	r3, #9
 8003020:	001a      	movs	r2, r3
 8003022:	23fa      	movs	r3, #250	; 0xfa
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2302      	movs	r3, #2
 800302a:	f002 f90b 	bl	8005244 <HAL_I2C_Master_Transmit>
 800302e:	0003      	movs	r3, r0
 8003030:	001a      	movs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	721a      	strb	r2, [r3, #8]
 8003036:	e010      	b.n	800305a <write_byte_data+0x86>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	1cfb      	adds	r3, r7, #3
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	18db      	adds	r3, r3, r3
 8003044:	b299      	uxth	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3309      	adds	r3, #9
 800304a:	001a      	movs	r2, r3
 800304c:	2302      	movs	r3, #2
 800304e:	f002 fb09 	bl	8005664 <HAL_I2C_Master_Transmit_DMA>
 8003052:	0003      	movs	r3, r0
 8003054:	001a      	movs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0018      	movs	r0, r3
 800305e:	f000 f805 	bl	800306c <_check_error>
}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	b003      	add	sp, #12
 8003068:	bd90      	pop	{r4, r7, pc}
	...

0800306c <_check_error>:
    }
    
    _check_error(smbus);
}

int _check_error(SMBus *smbus) {
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
    if (smbus->ret != HAL_OK) {
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7a1b      	ldrb	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <_check_error+0x52>
        strcpy((char*)smbus->buf, "Err \r\n");
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3309      	adds	r3, #9
 8003080:	001a      	movs	r2, r3
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <_check_error+0x5c>)
 8003084:	0010      	movs	r0, r2
 8003086:	0019      	movs	r1, r3
 8003088:	2307      	movs	r3, #7
 800308a:	001a      	movs	r2, r3
 800308c:	f007 fbf0 	bl	800a870 <memcpy>

        HAL_UART_Transmit(smbus->uart, smbus->buf, strlen((char*)smbus->buf), 1000);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685c      	ldr	r4, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3309      	adds	r3, #9
 8003098:	001d      	movs	r5, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3309      	adds	r3, #9
 800309e:	0018      	movs	r0, r3
 80030a0:	f7fd f830 	bl	8000104 <strlen>
 80030a4:	0003      	movs	r3, r0
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	23fa      	movs	r3, #250	; 0xfa
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	0029      	movs	r1, r5
 80030ae:	0020      	movs	r0, r4
 80030b0:	f006 f816 	bl	80090e0 <HAL_UART_Transmit>
        HAL_Delay(10);
 80030b4:	200a      	movs	r0, #10
 80030b6:	f000 fd7d 	bl	8003bb4 <HAL_Delay>
        return FALSE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <_check_error+0x54>
    }
    return TRUE;
 80030be:	2301      	movs	r3, #1
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b002      	add	sp, #8
 80030c6:	bdb0      	pop	{r4, r5, r7, pc}
 80030c8:	0800d734 	.word	0x0800d734

080030cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_MspInit+0x4c>)
 80030d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_MspInit+0x4c>)
 80030d8:	2101      	movs	r1, #1
 80030da:	430a      	orrs	r2, r1
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <HAL_MspInit+0x4c>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	2201      	movs	r2, #1
 80030e4:	4013      	ands	r3, r2
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_MspInit+0x4c>)
 80030ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_MspInit+0x4c>)
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	0549      	lsls	r1, r1, #21
 80030f4:	430a      	orrs	r2, r1
 80030f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_MspInit+0x4c>)
 80030fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	055b      	lsls	r3, r3, #21
 8003100:	4013      	ands	r3, r2
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003106:	23c0      	movs	r3, #192	; 0xc0
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	0018      	movs	r0, r3
 800310c:	f000 fd76 	bl	8003bfc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000

0800311c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800311c:	b590      	push	{r4, r7, lr}
 800311e:	b08b      	sub	sp, #44	; 0x2c
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	2414      	movs	r4, #20
 8003126:	193b      	adds	r3, r7, r4
 8003128:	0018      	movs	r0, r3
 800312a:	2314      	movs	r3, #20
 800312c:	001a      	movs	r2, r3
 800312e:	2100      	movs	r1, #0
 8003130:	f007 fba7 	bl	800a882 <memset>
  if(hadc->Instance==ADC1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a18      	ldr	r2, [pc, #96]	; (800319c <HAL_ADC_MspInit+0x80>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d129      	bne.n	8003192 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800313e:	4b18      	ldr	r3, [pc, #96]	; (80031a0 <HAL_ADC_MspInit+0x84>)
 8003140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003142:	4b17      	ldr	r3, [pc, #92]	; (80031a0 <HAL_ADC_MspInit+0x84>)
 8003144:	2180      	movs	r1, #128	; 0x80
 8003146:	0349      	lsls	r1, r1, #13
 8003148:	430a      	orrs	r2, r1
 800314a:	641a      	str	r2, [r3, #64]	; 0x40
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <HAL_ADC_MspInit+0x84>)
 800314e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	035b      	lsls	r3, r3, #13
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_ADC_MspInit+0x84>)
 800315c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_ADC_MspInit+0x84>)
 8003160:	2101      	movs	r1, #1
 8003162:	430a      	orrs	r2, r1
 8003164:	635a      	str	r2, [r3, #52]	; 0x34
 8003166:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <HAL_ADC_MspInit+0x84>)
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	2201      	movs	r2, #1
 800316c:	4013      	ands	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = THERMISTOR_1_Pin|THERMISTOR_2_Pin|THERMISTOR_0_Pin;
 8003172:	193b      	adds	r3, r7, r4
 8003174:	2238      	movs	r2, #56	; 0x38
 8003176:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003178:	193b      	adds	r3, r7, r4
 800317a:	2203      	movs	r2, #3
 800317c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	193b      	adds	r3, r7, r4
 8003180:	2200      	movs	r2, #0
 8003182:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003184:	193a      	adds	r2, r7, r4
 8003186:	23a0      	movs	r3, #160	; 0xa0
 8003188:	05db      	lsls	r3, r3, #23
 800318a:	0011      	movs	r1, r2
 800318c:	0018      	movs	r0, r3
 800318e:	f001 fe39 	bl	8004e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b00b      	add	sp, #44	; 0x2c
 8003198:	bd90      	pop	{r4, r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	40012400 	.word	0x40012400
 80031a0:	40021000 	.word	0x40021000

080031a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b08b      	sub	sp, #44	; 0x2c
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	2414      	movs	r4, #20
 80031ae:	193b      	adds	r3, r7, r4
 80031b0:	0018      	movs	r0, r3
 80031b2:	2314      	movs	r3, #20
 80031b4:	001a      	movs	r2, r3
 80031b6:	2100      	movs	r1, #0
 80031b8:	f007 fb63 	bl	800a882 <memset>
  if(hi2c->Instance==I2C1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_I2C_MspInit+0x8c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d130      	bne.n	8003228 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_I2C_MspInit+0x90>)
 80031c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ca:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <HAL_I2C_MspInit+0x90>)
 80031cc:	2102      	movs	r1, #2
 80031ce:	430a      	orrs	r2, r1
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_I2C_MspInit+0x90>)
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	2202      	movs	r2, #2
 80031d8:	4013      	ands	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = MUX_SCL_Pin|MUX_SDA_Pin;
 80031de:	193b      	adds	r3, r7, r4
 80031e0:	22c0      	movs	r2, #192	; 0xc0
 80031e2:	0052      	lsls	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031e6:	0021      	movs	r1, r4
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	2212      	movs	r2, #18
 80031ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	187b      	adds	r3, r7, r1
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	2200      	movs	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80031fa:	187b      	adds	r3, r7, r1
 80031fc:	2206      	movs	r2, #6
 80031fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003200:	187b      	adds	r3, r7, r1
 8003202:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_I2C_MspInit+0x94>)
 8003204:	0019      	movs	r1, r3
 8003206:	0010      	movs	r0, r2
 8003208:	f001 fdfc 	bl	8004e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_I2C_MspInit+0x90>)
 800320e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_I2C_MspInit+0x90>)
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	0389      	lsls	r1, r1, #14
 8003216:	430a      	orrs	r2, r1
 8003218:	63da      	str	r2, [r3, #60]	; 0x3c
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_I2C_MspInit+0x90>)
 800321c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	039b      	lsls	r3, r3, #14
 8003222:	4013      	ands	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b00b      	add	sp, #44	; 0x2c
 800322e:	bd90      	pop	{r4, r7, pc}
 8003230:	40005400 	.word	0x40005400
 8003234:	40021000 	.word	0x40021000
 8003238:	50000400 	.word	0x50000400

0800323c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a13      	ldr	r2, [pc, #76]	; (8003298 <HAL_TIM_PWM_MspInit+0x5c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10e      	bne.n	800326c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <HAL_TIM_PWM_MspInit+0x60>)
 8003250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_TIM_PWM_MspInit+0x60>)
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	0109      	lsls	r1, r1, #4
 8003258:	430a      	orrs	r2, r1
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <HAL_TIM_PWM_MspInit+0x60>)
 800325e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800326a:	e010      	b.n	800328e <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM3)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <HAL_TIM_PWM_MspInit+0x64>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10b      	bne.n	800328e <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_TIM_PWM_MspInit+0x60>)
 8003278:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_TIM_PWM_MspInit+0x60>)
 800327c:	2102      	movs	r1, #2
 800327e:	430a      	orrs	r2, r1
 8003280:	63da      	str	r2, [r3, #60]	; 0x3c
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_TIM_PWM_MspInit+0x60>)
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	2202      	movs	r2, #2
 8003288:	4013      	ands	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	b004      	add	sp, #16
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	40012c00 	.word	0x40012c00
 800329c:	40021000 	.word	0x40021000
 80032a0:	40000400 	.word	0x40000400

080032a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b08d      	sub	sp, #52	; 0x34
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	241c      	movs	r4, #28
 80032ae:	193b      	adds	r3, r7, r4
 80032b0:	0018      	movs	r0, r3
 80032b2:	2314      	movs	r3, #20
 80032b4:	001a      	movs	r2, r3
 80032b6:	2100      	movs	r1, #0
 80032b8:	f007 fae3 	bl	800a882 <memset>
  if(htim->Instance==TIM1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a4b      	ldr	r2, [pc, #300]	; (80033f0 <HAL_TIM_MspPostInit+0x14c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d145      	bne.n	8003352 <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c6:	4b4b      	ldr	r3, [pc, #300]	; (80033f4 <HAL_TIM_MspPostInit+0x150>)
 80032c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ca:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <HAL_TIM_MspPostInit+0x150>)
 80032cc:	2101      	movs	r1, #1
 80032ce:	430a      	orrs	r2, r1
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34
 80032d2:	4b48      	ldr	r3, [pc, #288]	; (80033f4 <HAL_TIM_MspPostInit+0x150>)
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	2201      	movs	r2, #1
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032de:	4b45      	ldr	r3, [pc, #276]	; (80033f4 <HAL_TIM_MspPostInit+0x150>)
 80032e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e2:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <HAL_TIM_MspPostInit+0x150>)
 80032e4:	2102      	movs	r1, #2
 80032e6:	430a      	orrs	r2, r1
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ea:	4b42      	ldr	r3, [pc, #264]	; (80033f4 <HAL_TIM_MspPostInit+0x150>)
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	2202      	movs	r2, #2
 80032f0:	4013      	ands	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM___Pin;
 80032f6:	193b      	adds	r3, r7, r4
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	0052      	lsls	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	2202      	movs	r2, #2
 8003302:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	193b      	adds	r3, r7, r4
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	193b      	adds	r3, r7, r4
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003310:	193b      	adds	r3, r7, r4
 8003312:	2202      	movs	r2, #2
 8003314:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM___GPIO_Port, &GPIO_InitStruct);
 8003316:	193a      	adds	r2, r7, r4
 8003318:	23a0      	movs	r3, #160	; 0xa0
 800331a:	05db      	lsls	r3, r3, #23
 800331c:	0011      	movs	r1, r2
 800331e:	0018      	movs	r0, r3
 8003320:	f001 fd70 	bl	8004e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8003324:	0021      	movs	r1, r4
 8003326:	187b      	adds	r3, r7, r1
 8003328:	2208      	movs	r2, #8
 800332a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	187b      	adds	r3, r7, r1
 800332e:	2202      	movs	r2, #2
 8003330:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	187b      	adds	r3, r7, r1
 8003334:	2200      	movs	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003338:	187b      	adds	r3, r7, r1
 800333a:	2200      	movs	r2, #0
 800333c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800333e:	187b      	adds	r3, r7, r1
 8003340:	2201      	movs	r2, #1
 8003342:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8003344:	187b      	adds	r3, r7, r1
 8003346:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <HAL_TIM_MspPostInit+0x154>)
 8003348:	0019      	movs	r1, r3
 800334a:	0010      	movs	r0, r2
 800334c:	f001 fd5a 	bl	8004e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003350:	e049      	b.n	80033e6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a29      	ldr	r2, [pc, #164]	; (80033fc <HAL_TIM_MspPostInit+0x158>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d144      	bne.n	80033e6 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335c:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_TIM_MspPostInit+0x150>)
 800335e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003360:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <HAL_TIM_MspPostInit+0x150>)
 8003362:	2101      	movs	r1, #1
 8003364:	430a      	orrs	r2, r1
 8003366:	635a      	str	r2, [r3, #52]	; 0x34
 8003368:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <HAL_TIM_MspPostInit+0x150>)
 800336a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336c:	2201      	movs	r2, #1
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003374:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <HAL_TIM_MspPostInit+0x150>)
 8003376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <HAL_TIM_MspPostInit+0x150>)
 800337a:	2104      	movs	r1, #4
 800337c:	430a      	orrs	r2, r1
 800337e:	635a      	str	r2, [r3, #52]	; 0x34
 8003380:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <HAL_TIM_MspPostInit+0x150>)
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	2204      	movs	r2, #4
 8003386:	4013      	ands	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HBRIDGE_PWM_Pin;
 800338c:	241c      	movs	r4, #28
 800338e:	193b      	adds	r3, r7, r4
 8003390:	2240      	movs	r2, #64	; 0x40
 8003392:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	193b      	adds	r3, r7, r4
 8003396:	2202      	movs	r2, #2
 8003398:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	193b      	adds	r3, r7, r4
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	193b      	adds	r3, r7, r4
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80033a6:	193b      	adds	r3, r7, r4
 80033a8:	2201      	movs	r2, #1
 80033aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HBRIDGE_PWM_GPIO_Port, &GPIO_InitStruct);
 80033ac:	193a      	adds	r2, r7, r4
 80033ae:	23a0      	movs	r3, #160	; 0xa0
 80033b0:	05db      	lsls	r3, r3, #23
 80033b2:	0011      	movs	r1, r2
 80033b4:	0018      	movs	r0, r3
 80033b6:	f001 fd25 	bl	8004e04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HBRIDGE_FWD_Pin;
 80033ba:	0021      	movs	r1, r4
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	187b      	adds	r3, r7, r1
 80033c4:	2202      	movs	r2, #2
 80033c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	2200      	movs	r2, #0
 80033d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80033d4:	187b      	adds	r3, r7, r1
 80033d6:	2201      	movs	r2, #1
 80033d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HBRIDGE_FWD_GPIO_Port, &GPIO_InitStruct);
 80033da:	187b      	adds	r3, r7, r1
 80033dc:	4a08      	ldr	r2, [pc, #32]	; (8003400 <HAL_TIM_MspPostInit+0x15c>)
 80033de:	0019      	movs	r1, r3
 80033e0:	0010      	movs	r0, r2
 80033e2:	f001 fd0f 	bl	8004e04 <HAL_GPIO_Init>
}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b00d      	add	sp, #52	; 0x34
 80033ec:	bd90      	pop	{r4, r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40021000 	.word	0x40021000
 80033f8:	50000400 	.word	0x50000400
 80033fc:	40000400 	.word	0x40000400
 8003400:	50000800 	.word	0x50000800

08003404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b08d      	sub	sp, #52	; 0x34
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	241c      	movs	r4, #28
 800340e:	193b      	adds	r3, r7, r4
 8003410:	0018      	movs	r0, r3
 8003412:	2314      	movs	r3, #20
 8003414:	001a      	movs	r2, r3
 8003416:	2100      	movs	r1, #0
 8003418:	f007 fa33 	bl	800a882 <memset>
  if(huart->Instance==USART1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a6c      	ldr	r2, [pc, #432]	; (80035d4 <HAL_UART_MspInit+0x1d0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d172      	bne.n	800350c <HAL_UART_MspInit+0x108>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003426:	4b6c      	ldr	r3, [pc, #432]	; (80035d8 <HAL_UART_MspInit+0x1d4>)
 8003428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800342a:	4b6b      	ldr	r3, [pc, #428]	; (80035d8 <HAL_UART_MspInit+0x1d4>)
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	01c9      	lsls	r1, r1, #7
 8003430:	430a      	orrs	r2, r1
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
 8003434:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <HAL_UART_MspInit+0x1d4>)
 8003436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	01db      	lsls	r3, r3, #7
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003442:	4b65      	ldr	r3, [pc, #404]	; (80035d8 <HAL_UART_MspInit+0x1d4>)
 8003444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003446:	4b64      	ldr	r3, [pc, #400]	; (80035d8 <HAL_UART_MspInit+0x1d4>)
 8003448:	2101      	movs	r1, #1
 800344a:	430a      	orrs	r2, r1
 800344c:	635a      	str	r2, [r3, #52]	; 0x34
 800344e:	4b62      	ldr	r3, [pc, #392]	; (80035d8 <HAL_UART_MspInit+0x1d4>)
 8003450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003452:	2201      	movs	r2, #1
 8003454:	4013      	ands	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11 [PA9]     ------> USART1_CTS
    */
    GPIO_InitStruct.Pin = JETSON_UART_TX_Pin|JETSON_UART_RX_Pin;
 800345a:	193b      	adds	r3, r7, r4
 800345c:	22c0      	movs	r2, #192	; 0xc0
 800345e:	00d2      	lsls	r2, r2, #3
 8003460:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	193b      	adds	r3, r7, r4
 8003464:	2202      	movs	r2, #2
 8003466:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	193b      	adds	r3, r7, r4
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800346e:	193b      	adds	r3, r7, r4
 8003470:	2202      	movs	r2, #2
 8003472:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003474:	193b      	adds	r3, r7, r4
 8003476:	2201      	movs	r2, #1
 8003478:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347a:	193a      	adds	r2, r7, r4
 800347c:	23a0      	movs	r3, #160	; 0xa0
 800347e:	05db      	lsls	r3, r3, #23
 8003480:	0011      	movs	r1, r2
 8003482:	0018      	movs	r0, r3
 8003484:	f001 fcbe 	bl	8004e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JETSON_UART_CTS_Pin;
 8003488:	0021      	movs	r1, r4
 800348a:	187b      	adds	r3, r7, r1
 800348c:	2280      	movs	r2, #128	; 0x80
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	187b      	adds	r3, r7, r1
 8003494:	2202      	movs	r2, #2
 8003496:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	187b      	adds	r3, r7, r1
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	2200      	movs	r2, #0
 80034a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	2201      	movs	r2, #1
 80034a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(JETSON_UART_CTS_GPIO_Port, &GPIO_InitStruct);
 80034aa:	187a      	adds	r2, r7, r1
 80034ac:	23a0      	movs	r3, #160	; 0xa0
 80034ae:	05db      	lsls	r3, r3, #23
 80034b0:	0011      	movs	r1, r2
 80034b2:	0018      	movs	r0, r3
 80034b4:	f001 fca6 	bl	8004e04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80034b8:	4b48      	ldr	r3, [pc, #288]	; (80035dc <HAL_UART_MspInit+0x1d8>)
 80034ba:	4a49      	ldr	r2, [pc, #292]	; (80035e0 <HAL_UART_MspInit+0x1dc>)
 80034bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80034be:	4b47      	ldr	r3, [pc, #284]	; (80035dc <HAL_UART_MspInit+0x1d8>)
 80034c0:	2232      	movs	r2, #50	; 0x32
 80034c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034c4:	4b45      	ldr	r3, [pc, #276]	; (80035dc <HAL_UART_MspInit+0x1d8>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ca:	4b44      	ldr	r3, [pc, #272]	; (80035dc <HAL_UART_MspInit+0x1d8>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034d0:	4b42      	ldr	r3, [pc, #264]	; (80035dc <HAL_UART_MspInit+0x1d8>)
 80034d2:	2280      	movs	r2, #128	; 0x80
 80034d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d6:	4b41      	ldr	r3, [pc, #260]	; (80035dc <HAL_UART_MspInit+0x1d8>)
 80034d8:	2200      	movs	r2, #0
 80034da:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034dc:	4b3f      	ldr	r3, [pc, #252]	; (80035dc <HAL_UART_MspInit+0x1d8>)
 80034de:	2200      	movs	r2, #0
 80034e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80034e2:	4b3e      	ldr	r3, [pc, #248]	; (80035dc <HAL_UART_MspInit+0x1d8>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034e8:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <HAL_UART_MspInit+0x1d8>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034ee:	4b3b      	ldr	r3, [pc, #236]	; (80035dc <HAL_UART_MspInit+0x1d8>)
 80034f0:	0018      	movs	r0, r3
 80034f2:	f001 f973 	bl	80047dc <HAL_DMA_Init>
 80034f6:	1e03      	subs	r3, r0, #0
 80034f8:	d001      	beq.n	80034fe <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80034fa:	f7ff fbc3 	bl	8002c84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a36      	ldr	r2, [pc, #216]	; (80035dc <HAL_UART_MspInit+0x1d8>)
 8003502:	67da      	str	r2, [r3, #124]	; 0x7c
 8003504:	4b35      	ldr	r3, [pc, #212]	; (80035dc <HAL_UART_MspInit+0x1d8>)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800350a:	e05e      	b.n	80035ca <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a34      	ldr	r2, [pc, #208]	; (80035e4 <HAL_UART_MspInit+0x1e0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d159      	bne.n	80035ca <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003516:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <HAL_UART_MspInit+0x1d4>)
 8003518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800351a:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <HAL_UART_MspInit+0x1d4>)
 800351c:	2180      	movs	r1, #128	; 0x80
 800351e:	0289      	lsls	r1, r1, #10
 8003520:	430a      	orrs	r2, r1
 8003522:	63da      	str	r2, [r3, #60]	; 0x3c
 8003524:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <HAL_UART_MspInit+0x1d4>)
 8003526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	029b      	lsls	r3, r3, #10
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003532:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <HAL_UART_MspInit+0x1d4>)
 8003534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003536:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <HAL_UART_MspInit+0x1d4>)
 8003538:	2101      	movs	r1, #1
 800353a:	430a      	orrs	r2, r1
 800353c:	635a      	str	r2, [r3, #52]	; 0x34
 800353e:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <HAL_UART_MspInit+0x1d4>)
 8003540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003542:	2201      	movs	r2, #1
 8003544:	4013      	ands	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800354a:	211c      	movs	r1, #28
 800354c:	187b      	adds	r3, r7, r1
 800354e:	4a26      	ldr	r2, [pc, #152]	; (80035e8 <HAL_UART_MspInit+0x1e4>)
 8003550:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003552:	187b      	adds	r3, r7, r1
 8003554:	2202      	movs	r2, #2
 8003556:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	187b      	adds	r3, r7, r1
 800355a:	2200      	movs	r2, #0
 800355c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355e:	187b      	adds	r3, r7, r1
 8003560:	2200      	movs	r2, #0
 8003562:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003564:	187b      	adds	r3, r7, r1
 8003566:	2201      	movs	r2, #1
 8003568:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356a:	187a      	adds	r2, r7, r1
 800356c:	23a0      	movs	r3, #160	; 0xa0
 800356e:	05db      	lsls	r3, r3, #23
 8003570:	0011      	movs	r1, r2
 8003572:	0018      	movs	r0, r3
 8003574:	f001 fc46 	bl	8004e04 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003578:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HAL_UART_MspInit+0x1e8>)
 800357a:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <HAL_UART_MspInit+0x1ec>)
 800357c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800357e:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_UART_MspInit+0x1e8>)
 8003580:	2234      	movs	r2, #52	; 0x34
 8003582:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_UART_MspInit+0x1e8>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800358a:	4b18      	ldr	r3, [pc, #96]	; (80035ec <HAL_UART_MspInit+0x1e8>)
 800358c:	2200      	movs	r2, #0
 800358e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003590:	4b16      	ldr	r3, [pc, #88]	; (80035ec <HAL_UART_MspInit+0x1e8>)
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <HAL_UART_MspInit+0x1e8>)
 8003598:	2200      	movs	r2, #0
 800359a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_UART_MspInit+0x1e8>)
 800359e:	2200      	movs	r2, #0
 80035a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_UART_MspInit+0x1e8>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035a8:	4b10      	ldr	r3, [pc, #64]	; (80035ec <HAL_UART_MspInit+0x1e8>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_UART_MspInit+0x1e8>)
 80035b0:	0018      	movs	r0, r3
 80035b2:	f001 f913 	bl	80047dc <HAL_DMA_Init>
 80035b6:	1e03      	subs	r3, r0, #0
 80035b8:	d001      	beq.n	80035be <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 80035ba:	f7ff fb63 	bl	8002c84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <HAL_UART_MspInit+0x1e8>)
 80035c2:	67da      	str	r2, [r3, #124]	; 0x7c
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_UART_MspInit+0x1e8>)
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b00d      	add	sp, #52	; 0x34
 80035d0:	bd90      	pop	{r4, r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	40013800 	.word	0x40013800
 80035d8:	40021000 	.word	0x40021000
 80035dc:	20000384 	.word	0x20000384
 80035e0:	40020008 	.word	0x40020008
 80035e4:	40004400 	.word	0x40004400
 80035e8:	00008004 	.word	0x00008004
 80035ec:	2000020c 	.word	0x2000020c
 80035f0:	4002001c 	.word	0x4002001c

080035f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035f8:	e7fe      	b.n	80035f8 <NMI_Handler+0x4>

080035fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035fe:	e7fe      	b.n	80035fe <HardFault_Handler+0x4>

08003600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003618:	f000 fab0 	bl	8003b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <DMA1_Channel1_IRQHandler+0x14>)
 800362a:	0018      	movs	r0, r3
 800362c:	f001 fa70 	bl	8004b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	20000384 	.word	0x20000384

0800363c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003642:	0018      	movs	r0, r3
 8003644:	f001 fa64 	bl	8004b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	2000020c 	.word	0x2000020c

08003654 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
	return 1;
 8003658:	2301      	movs	r3, #1
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <_kill>:

int _kill(int pid, int sig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800366a:	f007 f8cd 	bl	800a808 <__errno>
 800366e:	0003      	movs	r3, r0
 8003670:	2216      	movs	r2, #22
 8003672:	601a      	str	r2, [r3, #0]
	return -1;
 8003674:	2301      	movs	r3, #1
 8003676:	425b      	negs	r3, r3
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <_exit>:

void _exit (int status)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003688:	2301      	movs	r3, #1
 800368a:	425a      	negs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	0011      	movs	r1, r2
 8003690:	0018      	movs	r0, r3
 8003692:	f7ff ffe5 	bl	8003660 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003696:	e7fe      	b.n	8003696 <_exit+0x16>

08003698 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	e00a      	b.n	80036c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036aa:	e000      	b.n	80036ae <_read+0x16>
 80036ac:	bf00      	nop
 80036ae:	0001      	movs	r1, r0
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	60ba      	str	r2, [r7, #8]
 80036b6:	b2ca      	uxtb	r2, r1
 80036b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	3301      	adds	r3, #1
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	dbf0      	blt.n	80036aa <_read+0x12>
	}

return len;
 80036c8:	687b      	ldr	r3, [r7, #4]
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b006      	add	sp, #24
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e009      	b.n	80036f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	60ba      	str	r2, [r7, #8]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	0018      	movs	r0, r3
 80036ee:	e000      	b.n	80036f2 <_write+0x20>
 80036f0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3301      	adds	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	dbf1      	blt.n	80036e4 <_write+0x12>
	}
	return len;
 8003700:	687b      	ldr	r3, [r7, #4]
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b006      	add	sp, #24
 8003708:	bd80      	pop	{r7, pc}

0800370a <_close>:

int _close(int file)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
	return -1;
 8003712:	2301      	movs	r3, #1
 8003714:	425b      	negs	r3, r3
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b002      	add	sp, #8
 800371c:	bd80      	pop	{r7, pc}

0800371e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	0192      	lsls	r2, r2, #6
 800372e:	605a      	str	r2, [r3, #4]
	return 0;
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b002      	add	sp, #8
 8003738:	bd80      	pop	{r7, pc}

0800373a <_isatty>:

int _isatty(int file)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
	return 1;
 8003742:	2301      	movs	r3, #1
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b002      	add	sp, #8
 800374a:	bd80      	pop	{r7, pc}

0800374c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
	return 0;
 8003758:	2300      	movs	r3, #0
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b004      	add	sp, #16
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800376c:	4a14      	ldr	r2, [pc, #80]	; (80037c0 <_sbrk+0x5c>)
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <_sbrk+0x60>)
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <_sbrk+0x64>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d102      	bne.n	8003786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <_sbrk+0x64>)
 8003782:	4a12      	ldr	r2, [pc, #72]	; (80037cc <_sbrk+0x68>)
 8003784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <_sbrk+0x64>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	18d3      	adds	r3, r2, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	429a      	cmp	r2, r3
 8003792:	d207      	bcs.n	80037a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003794:	f007 f838 	bl	800a808 <__errno>
 8003798:	0003      	movs	r3, r0
 800379a:	220c      	movs	r2, #12
 800379c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800379e:	2301      	movs	r3, #1
 80037a0:	425b      	negs	r3, r3
 80037a2:	e009      	b.n	80037b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <_sbrk+0x64>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <_sbrk+0x64>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	18d2      	adds	r2, r2, r3
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <_sbrk+0x64>)
 80037b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80037b6:	68fb      	ldr	r3, [r7, #12]
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b006      	add	sp, #24
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20024000 	.word	0x20024000
 80037c4:	00000400 	.word	0x00000400
 80037c8:	200001fc 	.word	0x200001fc
 80037cc:	200005b0 	.word	0x200005b0

080037d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <get_decimal>:
//#ifdef TRIAD_ENABLE

#include "triad.h"

uint16_t get_decimal(uint8_t virtual_reg_l, uint8_t virtual_reg_h) {
 80037da:	b590      	push	{r4, r7, lr}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	0002      	movs	r2, r0
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	1dbb      	adds	r3, r7, #6
 80037e8:	1c0a      	adds	r2, r1, #0
 80037ea:	701a      	strb	r2, [r3, #0]
	uint16_t high = virtual_read(virtual_reg_h) << 8;
 80037ec:	1dbb      	adds	r3, r7, #6
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 f85d 	bl	80038b0 <virtual_read>
 80037f6:	0003      	movs	r3, r0
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	240e      	movs	r4, #14
 80037fc:	193b      	adds	r3, r7, r4
 80037fe:	0212      	lsls	r2, r2, #8
 8003800:	801a      	strh	r2, [r3, #0]
	return high | (virtual_read(virtual_reg_l) & 0xFF);
 8003802:	1dfb      	adds	r3, r7, #7
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	0018      	movs	r0, r3
 8003808:	f000 f852 	bl	80038b0 <virtual_read>
 800380c:	0003      	movs	r3, r0
 800380e:	b29a      	uxth	r2, r3
 8003810:	193b      	adds	r3, r7, r4
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	4313      	orrs	r3, r2
 8003816:	b29b      	uxth	r3, r3
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	b005      	add	sp, #20
 800381e:	bd90      	pop	{r4, r7, pc}

08003820 <new_device>:

Device* new_device(uint8_t dev_register) {
 8003820:	b5b0      	push	{r4, r5, r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	0002      	movs	r2, r0
 8003828:	1dfb      	adds	r3, r7, #7
 800382a:	701a      	strb	r2, [r3, #0]
	Device* dev = malloc(sizeof(Device));
 800382c:	201c      	movs	r0, #28
 800382e:	f007 f815 	bl	800a85c <malloc>
 8003832:	0003      	movs	r3, r0
 8003834:	613b      	str	r3, [r7, #16]
	dev->dev_register = dev_register;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1dfa      	adds	r2, r7, #7
 800383a:	7812      	ldrb	r2, [r2, #0]
 800383c:	701a      	strb	r2, [r3, #0]

	uint8_t START_REG = 0x08; //RAW_VALUE_RGA_LOW;
 800383e:	230f      	movs	r3, #15
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	2208      	movs	r2, #8
 8003844:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < CHANNELS; ++i) {
 8003846:	2317      	movs	r3, #23
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	e024      	b.n	800389a <new_device+0x7a>
		dev->channels[i] = new_channel(START_REG + (2 * i), START_REG + (2 * i) + 1);
 8003850:	2117      	movs	r1, #23
 8003852:	187b      	adds	r3, r7, r1
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	18db      	adds	r3, r3, r3
 8003858:	b2da      	uxtb	r2, r3
 800385a:	240f      	movs	r4, #15
 800385c:	193b      	adds	r3, r7, r4
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	18d3      	adds	r3, r2, r3
 8003862:	b2d8      	uxtb	r0, r3
 8003864:	187b      	adds	r3, r7, r1
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	18db      	adds	r3, r3, r3
 800386a:	b2da      	uxtb	r2, r3
 800386c:	193b      	adds	r3, r7, r4
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	18d3      	adds	r3, r2, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	3301      	adds	r3, #1
 8003876:	b2da      	uxtb	r2, r3
 8003878:	000d      	movs	r5, r1
 800387a:	187b      	adds	r3, r7, r1
 800387c:	781c      	ldrb	r4, [r3, #0]
 800387e:	0011      	movs	r1, r2
 8003880:	f000 f8ca 	bl	8003a18 <new_channel>
 8003884:	0001      	movs	r1, r0
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	00a3      	lsls	r3, r4, #2
 800388a:	18d3      	adds	r3, r2, r3
 800388c:	3304      	adds	r3, #4
 800388e:	6019      	str	r1, [r3, #0]
	for (uint8_t i = 0; i < CHANNELS; ++i) {
 8003890:	197b      	adds	r3, r7, r5
 8003892:	197a      	adds	r2, r7, r5
 8003894:	7812      	ldrb	r2, [r2, #0]
 8003896:	3201      	adds	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	2317      	movs	r3, #23
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b05      	cmp	r3, #5
 80038a2:	d9d5      	bls.n	8003850 <new_device+0x30>
	}
	return dev;
 80038a4:	693b      	ldr	r3, [r7, #16]
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b006      	add	sp, #24
 80038ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080038b0 <virtual_read>:

uint8_t virtual_read(uint8_t v_reg) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	0002      	movs	r2, r0
 80038b8:	1dfb      	adds	r3, r7, #7
 80038ba:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t d;

	// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
	status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 80038bc:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <virtual_read+0xc8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2200      	movs	r2, #0
 80038c2:	2149      	movs	r1, #73	; 0x49
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7ff fb0b 	bl	8002ee0 <read_byte_data>
 80038ca:	0002      	movs	r2, r0
 80038cc:	210f      	movs	r1, #15
 80038ce:	187b      	adds	r3, r7, r1
 80038d0:	701a      	strb	r2, [r3, #0]

	if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 80038d2:	187b      	adds	r3, r7, r1
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2201      	movs	r2, #1
 80038d8:	4013      	ands	r3, r2
 80038da:	d00a      	beq.n	80038f2 <virtual_read+0x42>
		// d = nucleo_byte_read(I2C_AS72XX_SLAVE_READ_REG);
		d = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 80038dc:	4b26      	ldr	r3, [pc, #152]	; (8003978 <virtual_read+0xc8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2202      	movs	r2, #2
 80038e2:	2149      	movs	r1, #73	; 0x49
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7ff fafb 	bl	8002ee0 <read_byte_data>
 80038ea:	0002      	movs	r2, r0
 80038ec:	230e      	movs	r3, #14
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	701a      	strb	r2, [r3, #0]
	}

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 80038f2:	4b21      	ldr	r3, [pc, #132]	; (8003978 <virtual_read+0xc8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	2149      	movs	r1, #73	; 0x49
 80038fa:	0018      	movs	r0, r3
 80038fc:	f7ff faf0 	bl	8002ee0 <read_byte_data>
 8003900:	0002      	movs	r2, r0
 8003902:	210f      	movs	r1, #15
 8003904:	187b      	adds	r3, r7, r1
 8003906:	701a      	strb	r2, [r3, #0]

		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8003908:	187b      	adds	r3, r7, r1
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2202      	movs	r2, #2
 800390e:	4013      	ands	r3, r2
 8003910:	d003      	beq.n	800391a <virtual_read+0x6a>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 8003912:	2005      	movs	r0, #5
 8003914:	f000 f94e 	bl	8003bb4 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003918:	e7eb      	b.n	80038f2 <virtual_read+0x42>
			break;
 800391a:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <virtual_read+0xc8>)
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	1dfb      	adds	r3, r7, #7
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2201      	movs	r2, #1
 8003926:	2149      	movs	r1, #73	; 0x49
 8003928:	f7ff fb54 	bl	8002fd4 <write_byte_data>

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 800392c:	4b12      	ldr	r3, [pc, #72]	; (8003978 <virtual_read+0xc8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2200      	movs	r2, #0
 8003932:	2149      	movs	r1, #73	; 0x49
 8003934:	0018      	movs	r0, r3
 8003936:	f7ff fad3 	bl	8002ee0 <read_byte_data>
 800393a:	0002      	movs	r2, r0
 800393c:	210f      	movs	r1, #15
 800393e:	187b      	adds	r3, r7, r1
 8003940:	701a      	strb	r2, [r3, #0]

		if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8003942:	187b      	adds	r3, r7, r1
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2201      	movs	r2, #1
 8003948:	4013      	ands	r3, r2
 800394a:	d103      	bne.n	8003954 <virtual_read+0xa4>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 800394c:	2005      	movs	r0, #5
 800394e:	f000 f931 	bl	8003bb4 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003952:	e7eb      	b.n	800392c <virtual_read+0x7c>
			break;
 8003954:	46c0      	nop			; (mov r8, r8)
	}

	// d = nucleo_byte_read( I2C_AS72XX_SLAVE_READ_REG);

	d = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <virtual_read+0xc8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2202      	movs	r2, #2
 800395c:	2149      	movs	r1, #73	; 0x49
 800395e:	0018      	movs	r0, r3
 8003960:	f7ff fabe 	bl	8002ee0 <read_byte_data>
 8003964:	0002      	movs	r2, r0
 8003966:	210e      	movs	r1, #14
 8003968:	187b      	adds	r3, r7, r1
 800396a:	701a      	strb	r2, [r3, #0]

	return d;
 800396c:	187b      	adds	r3, r7, r1
 800396e:	781b      	ldrb	r3, [r3, #0]
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b004      	add	sp, #16
 8003976:	bd80      	pop	{r7, pc}
 8003978:	200002d0 	.word	0x200002d0

0800397c <virtual_write>:


void virtual_write(uint8_t v_reg, uint8_t data) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	0002      	movs	r2, r0
 8003984:	1dfb      	adds	r3, r7, #7
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	1dbb      	adds	r3, r7, #6
 800398a:	1c0a      	adds	r2, r1, #0
 800398c:	701a      	strb	r2, [r3, #0]
	uint8_t status;

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 800398e:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <virtual_write+0x98>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2200      	movs	r2, #0
 8003994:	2149      	movs	r1, #73	; 0x49
 8003996:	0018      	movs	r0, r3
 8003998:	f7ff faa2 	bl	8002ee0 <read_byte_data>
 800399c:	0002      	movs	r2, r0
 800399e:	210f      	movs	r1, #15
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	701a      	strb	r2, [r3, #0]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2202      	movs	r2, #2
 80039aa:	4013      	ands	r3, r2
 80039ac:	d003      	beq.n	80039b6 <virtual_write+0x3a>
			break;
		}
		HAL_Delay(5);
 80039ae:	2005      	movs	r0, #5
 80039b0:	f000 f900 	bl	8003bb4 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 80039b4:	e7eb      	b.n	800398e <virtual_write+0x12>
			break;
 80039b6:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
 80039b8:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <virtual_write+0x98>)
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	1dfb      	adds	r3, r7, #7
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	4252      	negs	r2, r2
 80039c4:	4313      	orrs	r3, r2
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2201      	movs	r2, #1
 80039ca:	2149      	movs	r1, #73	; 0x49
 80039cc:	f7ff fb02 	bl	8002fd4 <write_byte_data>

	while(1) {
//		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 80039d0:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <virtual_write+0x98>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2149      	movs	r1, #73	; 0x49
 80039d8:	0018      	movs	r0, r3
 80039da:	f7ff fa81 	bl	8002ee0 <read_byte_data>
 80039de:	0002      	movs	r2, r0
 80039e0:	210f      	movs	r1, #15
 80039e2:	187b      	adds	r3, r7, r1
 80039e4:	701a      	strb	r2, [r3, #0]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2202      	movs	r2, #2
 80039ec:	4013      	ands	r3, r2
 80039ee:	d003      	beq.n	80039f8 <virtual_write+0x7c>
			break;
		}
		HAL_Delay(5);
 80039f0:	2005      	movs	r0, #5
 80039f2:	f000 f8df 	bl	8003bb4 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 80039f6:	e7eb      	b.n	80039d0 <virtual_write+0x54>
			break;
 80039f8:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, data);
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, data);
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <virtual_write+0x98>)
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	1dbb      	adds	r3, r7, #6
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	2149      	movs	r1, #73	; 0x49
 8003a06:	f7ff fae5 	bl	8002fd4 <write_byte_data>
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b004      	add	sp, #16
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	200002d0 	.word	0x200002d0

08003a18 <new_channel>:

Channel* new_channel(uint8_t lsb_r, uint8_t msb_r) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	0002      	movs	r2, r0
 8003a20:	1dfb      	adds	r3, r7, #7
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	1dbb      	adds	r3, r7, #6
 8003a26:	1c0a      	adds	r2, r1, #0
 8003a28:	701a      	strb	r2, [r3, #0]
	Channel* ch = malloc(sizeof(Channel));
 8003a2a:	2004      	movs	r0, #4
 8003a2c:	f006 ff16 	bl	800a85c <malloc>
 8003a30:	0003      	movs	r3, r0
 8003a32:	60fb      	str	r3, [r7, #12]
	ch->color_data = 0;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	805a      	strh	r2, [r3, #2]
	ch->lsb_register = lsb_r;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1dfa      	adds	r2, r7, #7
 8003a3e:	7812      	ldrb	r2, [r2, #0]
 8003a40:	701a      	strb	r2, [r3, #0]
	ch->msb_register = msb_r;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1dba      	adds	r2, r7, #6
 8003a46:	7812      	ldrb	r2, [r2, #0]
 8003a48:	705a      	strb	r2, [r3, #1]
	return ch;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
}
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b004      	add	sp, #16
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a54:	480d      	ldr	r0, [pc, #52]	; (8003a8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a58:	f7ff feba 	bl	80037d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a5c:	480c      	ldr	r0, [pc, #48]	; (8003a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a5e:	490d      	ldr	r1, [pc, #52]	; (8003a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a60:	4a0d      	ldr	r2, [pc, #52]	; (8003a98 <LoopForever+0xe>)
  movs r3, #0
 8003a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a64:	e002      	b.n	8003a6c <LoopCopyDataInit>

08003a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a6a:	3304      	adds	r3, #4

08003a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a70:	d3f9      	bcc.n	8003a66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a72:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a74:	4c0a      	ldr	r4, [pc, #40]	; (8003aa0 <LoopForever+0x16>)
  movs r3, #0
 8003a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a78:	e001      	b.n	8003a7e <LoopFillZerobss>

08003a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a7c:	3204      	adds	r2, #4

08003a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a80:	d3fb      	bcc.n	8003a7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a82:	f006 fec7 	bl	800a814 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003a86:	f7fe fd0d 	bl	80024a4 <main>

08003a8a <LoopForever>:

LoopForever:
  b LoopForever
 8003a8a:	e7fe      	b.n	8003a8a <LoopForever>
  ldr   r0, =_estack
 8003a8c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a94:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003a98:	0800dc90 	.word	0x0800dc90
  ldr r2, =_sbss
 8003a9c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003aa0:	200005ac 	.word	0x200005ac

08003aa4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003aa4:	e7fe      	b.n	8003aa4 <ADC1_COMP_IRQHandler>
	...

08003aa8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_Init+0x3c>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_Init+0x3c>)
 8003aba:	2180      	movs	r1, #128	; 0x80
 8003abc:	0049      	lsls	r1, r1, #1
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	f000 f810 	bl	8003ae8 <HAL_InitTick>
 8003ac8:	1e03      	subs	r3, r0, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003acc:	1dfb      	adds	r3, r7, #7
 8003ace:	2201      	movs	r2, #1
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	e001      	b.n	8003ad8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003ad4:	f7ff fafa 	bl	80030cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ad8:	1dfb      	adds	r3, r7, #7
 8003ada:	781b      	ldrb	r3, [r3, #0]
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40022000 	.word	0x40022000

08003ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003af0:	230f      	movs	r3, #15
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_InitTick+0x88>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d02b      	beq.n	8003b58 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003b00:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <HAL_InitTick+0x8c>)
 8003b02:	681c      	ldr	r4, [r3, #0]
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_InitTick+0x88>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	0019      	movs	r1, r3
 8003b0a:	23fa      	movs	r3, #250	; 0xfa
 8003b0c:	0098      	lsls	r0, r3, #2
 8003b0e:	f7fc fb15 	bl	800013c <__udivsi3>
 8003b12:	0003      	movs	r3, r0
 8003b14:	0019      	movs	r1, r3
 8003b16:	0020      	movs	r0, r4
 8003b18:	f7fc fb10 	bl	800013c <__udivsi3>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f000 fe3f 	bl	80047a2 <HAL_SYSTICK_Config>
 8003b24:	1e03      	subs	r3, r0, #0
 8003b26:	d112      	bne.n	8003b4e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d80a      	bhi.n	8003b44 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	2301      	movs	r3, #1
 8003b32:	425b      	negs	r3, r3
 8003b34:	2200      	movs	r2, #0
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 fdfe 	bl	8004738 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <HAL_InitTick+0x90>)
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e00d      	b.n	8003b60 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003b44:	230f      	movs	r3, #15
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	e008      	b.n	8003b60 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b4e:	230f      	movs	r3, #15
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	e003      	b.n	8003b60 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b58:	230f      	movs	r3, #15
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003b60:	230f      	movs	r3, #15
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	781b      	ldrb	r3, [r3, #0]
}
 8003b66:	0018      	movs	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b005      	add	sp, #20
 8003b6c:	bd90      	pop	{r4, r7, pc}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	20000008 	.word	0x20000008
 8003b74:	20000000 	.word	0x20000000
 8003b78:	20000004 	.word	0x20000004

08003b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_IncTick+0x1c>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	001a      	movs	r2, r3
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_IncTick+0x20>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	18d2      	adds	r2, r2, r3
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_IncTick+0x20>)
 8003b8e:	601a      	str	r2, [r3, #0]
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	20000008 	.word	0x20000008
 8003b9c:	20000598 	.word	0x20000598

08003ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba4:	4b02      	ldr	r3, [pc, #8]	; (8003bb0 <HAL_GetTick+0x10>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	20000598 	.word	0x20000598

08003bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bbc:	f7ff fff0 	bl	8003ba0 <HAL_GetTick>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	d005      	beq.n	8003bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bce:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <HAL_Delay+0x44>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	001a      	movs	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	f7ff ffe0 	bl	8003ba0 <HAL_GetTick>
 8003be0:	0002      	movs	r2, r0
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d8f7      	bhi.n	8003bdc <HAL_Delay+0x28>
  {
  }
}
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	20000008 	.word	0x20000008

08003bfc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a06      	ldr	r2, [pc, #24]	; (8003c24 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b002      	add	sp, #8
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	40010000 	.word	0x40010000
 8003c24:	fffff9ff 	.word	0xfffff9ff

08003c28 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003c38:	401a      	ands	r2, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	601a      	str	r2, [r3, #0]
}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b002      	add	sp, #8
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	fe3fffff 	.word	0xfe3fffff

08003c50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	23e0      	movs	r3, #224	; 0xe0
 8003c5e:	045b      	lsls	r3, r3, #17
 8003c60:	4013      	ands	r3, r2
}
 8003c62:	0018      	movs	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b002      	add	sp, #8
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	2104      	movs	r1, #4
 8003c7e:	400a      	ands	r2, r1
 8003c80:	2107      	movs	r1, #7
 8003c82:	4091      	lsls	r1, r2
 8003c84:	000a      	movs	r2, r1
 8003c86:	43d2      	mvns	r2, r2
 8003c88:	401a      	ands	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2104      	movs	r1, #4
 8003c8e:	400b      	ands	r3, r1
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4099      	lsls	r1, r3
 8003c94:	000b      	movs	r3, r1
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b004      	add	sp, #16
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	211f      	movs	r1, #31
 8003cb8:	400a      	ands	r2, r1
 8003cba:	210f      	movs	r1, #15
 8003cbc:	4091      	lsls	r1, r2
 8003cbe:	000a      	movs	r2, r1
 8003cc0:	43d2      	mvns	r2, r2
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	0e9b      	lsrs	r3, r3, #26
 8003cc8:	210f      	movs	r1, #15
 8003cca:	4019      	ands	r1, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	201f      	movs	r0, #31
 8003cd0:	4003      	ands	r3, r0
 8003cd2:	4099      	lsls	r1, r3
 8003cd4:	000b      	movs	r3, r1
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	035b      	lsls	r3, r3, #13
 8003cf6:	0b5b      	lsrs	r3, r3, #13
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b002      	add	sp, #8
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	0352      	lsls	r2, r2, #13
 8003d18:	0b52      	lsrs	r2, r2, #13
 8003d1a:	43d2      	mvns	r2, r2
 8003d1c:	401a      	ands	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b002      	add	sp, #8
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	0212      	lsls	r2, r2, #8
 8003d40:	43d2      	mvns	r2, r2
 8003d42:	401a      	ands	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	400b      	ands	r3, r1
 8003d4c:	4904      	ldr	r1, [pc, #16]	; (8003d60 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003d4e:	400b      	ands	r3, r1
 8003d50:	431a      	orrs	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b004      	add	sp, #16
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	07ffff00 	.word	0x07ffff00

08003d64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4a05      	ldr	r2, [pc, #20]	; (8003d88 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	2280      	movs	r2, #128	; 0x80
 8003d76:	0552      	lsls	r2, r2, #21
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b002      	add	sp, #8
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	6fffffe8 	.word	0x6fffffe8

08003d8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	055b      	lsls	r3, r3, #21
 8003d9c:	401a      	ands	r2, r3
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	055b      	lsls	r3, r3, #21
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d101      	bne.n	8003daa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b002      	add	sp, #8
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <LL_ADC_IsEnabled+0x18>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <LL_ADC_IsEnabled+0x1a>
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b002      	add	sp, #8
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2204      	movs	r2, #4
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d101      	bne.n	8003dee <LL_ADC_REG_IsConversionOngoing+0x18>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	0018      	movs	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b002      	add	sp, #8
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e00:	231f      	movs	r3, #31
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e1b1      	b.n	8004182 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f7ff f977 	bl	800311c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2254      	movs	r2, #84	; 0x54
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7ff ffa3 	bl	8003d8c <LL_ADC_IsInternalRegulatorEnabled>
 8003e46:	1e03      	subs	r3, r0, #0
 8003e48:	d115      	bne.n	8003e76 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7ff ff88 	bl	8003d64 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e54:	4bcd      	ldr	r3, [pc, #820]	; (800418c <HAL_ADC_Init+0x394>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	49cd      	ldr	r1, [pc, #820]	; (8004190 <HAL_ADC_Init+0x398>)
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f7fc f96e 	bl	800013c <__udivsi3>
 8003e60:	0003      	movs	r3, r0
 8003e62:	3301      	adds	r3, #1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e68:	e002      	b.n	8003e70 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f9      	bne.n	8003e6a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f7ff ff86 	bl	8003d8c <LL_ADC_IsInternalRegulatorEnabled>
 8003e80:	1e03      	subs	r3, r0, #0
 8003e82:	d10f      	bne.n	8003ea4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	2210      	movs	r2, #16
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	2201      	movs	r2, #1
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e9c:	231f      	movs	r3, #31
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7ff ff94 	bl	8003dd6 <LL_ADC_REG_IsConversionOngoing>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	2210      	movs	r2, #16
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d000      	beq.n	8003ebe <HAL_ADC_Init+0xc6>
 8003ebc:	e154      	b.n	8004168 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d000      	beq.n	8003ec6 <HAL_ADC_Init+0xce>
 8003ec4:	e150      	b.n	8004168 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	4ab2      	ldr	r2, [pc, #712]	; (8004194 <HAL_ADC_Init+0x39c>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2202      	movs	r2, #2
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	0018      	movs	r0, r3
 8003edc:	f7ff ff6a 	bl	8003db4 <LL_ADC_IsEnabled>
 8003ee0:	1e03      	subs	r3, r0, #0
 8003ee2:	d156      	bne.n	8003f92 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2218      	movs	r2, #24
 8003eec:	4393      	bics	r3, r2
 8003eee:	0019      	movs	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	0f9b      	lsrs	r3, r3, #30
 8003f02:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	223c      	movs	r2, #60	; 0x3c
 8003f14:	5c9b      	ldrb	r3, [r3, r2]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d111      	bne.n	8003f3e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	0f9b      	lsrs	r3, r3, #30
 8003f20:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f26:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003f2c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003f32:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	2201      	movs	r2, #1
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	4a94      	ldr	r2, [pc, #592]	; (8004198 <HAL_ADC_Init+0x3a0>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	0019      	movs	r1, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	23c0      	movs	r3, #192	; 0xc0
 8003f5a:	061b      	lsls	r3, r3, #24
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d018      	beq.n	8003f92 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	05db      	lsls	r3, r3, #23
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d012      	beq.n	8003f92 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	061b      	lsls	r3, r3, #24
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d00c      	beq.n	8003f92 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003f78:	4b88      	ldr	r3, [pc, #544]	; (800419c <HAL_ADC_Init+0x3a4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a88      	ldr	r2, [pc, #544]	; (80041a0 <HAL_ADC_Init+0x3a8>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	0019      	movs	r1, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	23f0      	movs	r3, #240	; 0xf0
 8003f88:	039b      	lsls	r3, r3, #14
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	4b83      	ldr	r3, [pc, #524]	; (800419c <HAL_ADC_Init+0x3a4>)
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	7e1b      	ldrb	r3, [r3, #24]
 8003f96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	7e5b      	ldrb	r3, [r3, #25]
 8003f9c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7e9b      	ldrb	r3, [r3, #26]
 8003fa4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003fa6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_ADC_Init+0x1be>
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	015b      	lsls	r3, r3, #5
 8003fb4:	e000      	b.n	8003fb8 <HAL_ADC_Init+0x1c0>
 8003fb6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003fb8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003fbe:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	da04      	bge.n	8003fd2 <HAL_ADC_Init+0x1da>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	e001      	b.n	8003fd6 <HAL_ADC_Init+0x1de>
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003fd6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	212c      	movs	r1, #44	; 0x2c
 8003fdc:	5c5b      	ldrb	r3, [r3, r1]
 8003fde:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003fe0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	5c9b      	ldrb	r3, [r3, r2]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d115      	bne.n	800401e <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	7e9b      	ldrb	r3, [r3, #26]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d105      	bne.n	8004006 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2280      	movs	r2, #128	; 0x80
 8003ffe:	0252      	lsls	r2, r2, #9
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
 8004004:	e00b      	b.n	800401e <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	2220      	movs	r2, #32
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	2201      	movs	r2, #1
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800402a:	23e0      	movs	r3, #224	; 0xe0
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004034:	4313      	orrs	r3, r2
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	4a58      	ldr	r2, [pc, #352]	; (80041a4 <HAL_ADC_Init+0x3ac>)
 8004044:	4013      	ands	r3, r2
 8004046:	0019      	movs	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	430a      	orrs	r2, r1
 8004050:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	4a53      	ldr	r2, [pc, #332]	; (80041a8 <HAL_ADC_Init+0x3b0>)
 800405a:	4013      	ands	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	430a      	orrs	r2, r1
 8004066:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004070:	001a      	movs	r2, r3
 8004072:	2100      	movs	r1, #0
 8004074:	f7ff fdf9 	bl	8003c6a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	494a      	ldr	r1, [pc, #296]	; (80041ac <HAL_ADC_Init+0x3b4>)
 8004082:	001a      	movs	r2, r3
 8004084:	f7ff fdf1 	bl	8003c6a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2110      	movs	r1, #16
 800409c:	4249      	negs	r1, r1
 800409e:	430a      	orrs	r2, r1
 80040a0:	629a      	str	r2, [r3, #40]	; 0x28
 80040a2:	e03a      	b.n	800411a <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	039b      	lsls	r3, r3, #14
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d134      	bne.n	800411a <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	e00c      	b.n	80040d0 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	40da      	lsrs	r2, r3
 80040c0:	0013      	movs	r3, r2
 80040c2:	220f      	movs	r2, #15
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b0f      	cmp	r3, #15
 80040c8:	d006      	beq.n	80040d8 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	3301      	adds	r3, #1
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b07      	cmp	r3, #7
 80040d4:	d9ef      	bls.n	80040b6 <HAL_ADC_Init+0x2be>
 80040d6:	e000      	b.n	80040da <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 80040d8:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d109      	bne.n	80040f4 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2110      	movs	r1, #16
 80040ec:	4249      	negs	r1, r1
 80040ee:	430a      	orrs	r2, r1
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
 80040f2:	e012      	b.n	800411a <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	3b01      	subs	r3, #1
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	221c      	movs	r2, #28
 8004104:	4013      	ands	r3, r2
 8004106:	2210      	movs	r2, #16
 8004108:	4252      	negs	r2, r2
 800410a:	409a      	lsls	r2, r3
 800410c:	0011      	movs	r1, r2
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <HAL_ADC_Init+0x3b8>)
 8004122:	4013      	ands	r3, r2
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	429a      	cmp	r2, r3
 8004128:	d10b      	bne.n	8004142 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	2203      	movs	r2, #3
 8004136:	4393      	bics	r3, r2
 8004138:	2201      	movs	r2, #1
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004140:	e01c      	b.n	800417c <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	2212      	movs	r2, #18
 8004148:	4393      	bics	r3, r2
 800414a:	2210      	movs	r2, #16
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004156:	2201      	movs	r2, #1
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800415e:	231f      	movs	r3, #31
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004166:	e009      	b.n	800417c <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	2210      	movs	r2, #16
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004174:	231f      	movs	r3, #31
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800417c:	231f      	movs	r3, #31
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	781b      	ldrb	r3, [r3, #0]
}
 8004182:	0018      	movs	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	b008      	add	sp, #32
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	20000000 	.word	0x20000000
 8004190:	00030d40 	.word	0x00030d40
 8004194:	fffffefd 	.word	0xfffffefd
 8004198:	1ffffc02 	.word	0x1ffffc02
 800419c:	40012708 	.word	0x40012708
 80041a0:	ffc3ffff 	.word	0xffc3ffff
 80041a4:	fffe0219 	.word	0xfffe0219
 80041a8:	dffffc02 	.word	0xdffffc02
 80041ac:	07ffff04 	.word	0x07ffff04
 80041b0:	833fffe7 	.word	0x833fffe7

080041b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041be:	2317      	movs	r3, #23
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2254      	movs	r2, #84	; 0x54
 80041ce:	5c9b      	ldrb	r3, [r3, r2]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x24>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e1c0      	b.n	800455a <HAL_ADC_ConfigChannel+0x3a6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2254      	movs	r2, #84	; 0x54
 80041dc:	2101      	movs	r1, #1
 80041de:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	0018      	movs	r0, r3
 80041e6:	f7ff fdf6 	bl	8003dd6 <LL_ADC_REG_IsConversionOngoing>
 80041ea:	1e03      	subs	r3, r0, #0
 80041ec:	d000      	beq.n	80041f0 <HAL_ADC_ConfigChannel+0x3c>
 80041ee:	e1a3      	b.n	8004538 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d100      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x46>
 80041f8:	e143      	b.n	8004482 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	429a      	cmp	r2, r3
 8004204:	d004      	beq.n	8004210 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800420a:	4ac1      	ldr	r2, [pc, #772]	; (8004510 <HAL_ADC_ConfigChannel+0x35c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d108      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	0019      	movs	r1, r3
 800421a:	0010      	movs	r0, r2
 800421c:	f7ff fd62 	bl	8003ce4 <LL_ADC_REG_SetSequencerChAdd>
 8004220:	e0c9      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	211f      	movs	r1, #31
 800422c:	400b      	ands	r3, r1
 800422e:	210f      	movs	r1, #15
 8004230:	4099      	lsls	r1, r3
 8004232:	000b      	movs	r3, r1
 8004234:	43db      	mvns	r3, r3
 8004236:	4013      	ands	r3, r2
 8004238:	0019      	movs	r1, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	035b      	lsls	r3, r3, #13
 8004240:	0b5b      	lsrs	r3, r3, #13
 8004242:	d105      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x9c>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0e9b      	lsrs	r3, r3, #26
 800424a:	221f      	movs	r2, #31
 800424c:	4013      	ands	r3, r2
 800424e:	e098      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2201      	movs	r2, #1
 8004256:	4013      	ands	r3, r2
 8004258:	d000      	beq.n	800425c <HAL_ADC_ConfigChannel+0xa8>
 800425a:	e091      	b.n	8004380 <HAL_ADC_ConfigChannel+0x1cc>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2202      	movs	r2, #2
 8004262:	4013      	ands	r3, r2
 8004264:	d000      	beq.n	8004268 <HAL_ADC_ConfigChannel+0xb4>
 8004266:	e089      	b.n	800437c <HAL_ADC_ConfigChannel+0x1c8>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2204      	movs	r2, #4
 800426e:	4013      	ands	r3, r2
 8004270:	d000      	beq.n	8004274 <HAL_ADC_ConfigChannel+0xc0>
 8004272:	e081      	b.n	8004378 <HAL_ADC_ConfigChannel+0x1c4>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2208      	movs	r2, #8
 800427a:	4013      	ands	r3, r2
 800427c:	d000      	beq.n	8004280 <HAL_ADC_ConfigChannel+0xcc>
 800427e:	e079      	b.n	8004374 <HAL_ADC_ConfigChannel+0x1c0>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2210      	movs	r2, #16
 8004286:	4013      	ands	r3, r2
 8004288:	d000      	beq.n	800428c <HAL_ADC_ConfigChannel+0xd8>
 800428a:	e071      	b.n	8004370 <HAL_ADC_ConfigChannel+0x1bc>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2220      	movs	r2, #32
 8004292:	4013      	ands	r3, r2
 8004294:	d000      	beq.n	8004298 <HAL_ADC_ConfigChannel+0xe4>
 8004296:	e069      	b.n	800436c <HAL_ADC_ConfigChannel+0x1b8>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2240      	movs	r2, #64	; 0x40
 800429e:	4013      	ands	r3, r2
 80042a0:	d000      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0xf0>
 80042a2:	e061      	b.n	8004368 <HAL_ADC_ConfigChannel+0x1b4>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2280      	movs	r2, #128	; 0x80
 80042aa:	4013      	ands	r3, r2
 80042ac:	d000      	beq.n	80042b0 <HAL_ADC_ConfigChannel+0xfc>
 80042ae:	e059      	b.n	8004364 <HAL_ADC_ConfigChannel+0x1b0>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	4013      	ands	r3, r2
 80042ba:	d151      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x1ac>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4013      	ands	r3, r2
 80042c6:	d149      	bne.n	800435c <HAL_ADC_ConfigChannel+0x1a8>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4013      	ands	r3, r2
 80042d2:	d141      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x1a4>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	4013      	ands	r3, r2
 80042de:	d139      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x1a0>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	015b      	lsls	r3, r3, #5
 80042e8:	4013      	ands	r3, r2
 80042ea:	d131      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x19c>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	019b      	lsls	r3, r3, #6
 80042f4:	4013      	ands	r3, r2
 80042f6:	d129      	bne.n	800434c <HAL_ADC_ConfigChannel+0x198>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	01db      	lsls	r3, r3, #7
 8004300:	4013      	ands	r3, r2
 8004302:	d121      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x194>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	4013      	ands	r3, r2
 800430e:	d119      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x190>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	025b      	lsls	r3, r3, #9
 8004318:	4013      	ands	r3, r2
 800431a:	d111      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x18c>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	029b      	lsls	r3, r3, #10
 8004324:	4013      	ands	r3, r2
 8004326:	d109      	bne.n	800433c <HAL_ADC_ConfigChannel+0x188>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	02db      	lsls	r3, r3, #11
 8004330:	4013      	ands	r3, r2
 8004332:	d001      	beq.n	8004338 <HAL_ADC_ConfigChannel+0x184>
 8004334:	2312      	movs	r3, #18
 8004336:	e024      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004338:	2300      	movs	r3, #0
 800433a:	e022      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 800433c:	2311      	movs	r3, #17
 800433e:	e020      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004340:	2310      	movs	r3, #16
 8004342:	e01e      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004344:	230f      	movs	r3, #15
 8004346:	e01c      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004348:	230e      	movs	r3, #14
 800434a:	e01a      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 800434c:	230d      	movs	r3, #13
 800434e:	e018      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004350:	230c      	movs	r3, #12
 8004352:	e016      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004354:	230b      	movs	r3, #11
 8004356:	e014      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004358:	230a      	movs	r3, #10
 800435a:	e012      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 800435c:	2309      	movs	r3, #9
 800435e:	e010      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004360:	2308      	movs	r3, #8
 8004362:	e00e      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004364:	2307      	movs	r3, #7
 8004366:	e00c      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004368:	2306      	movs	r3, #6
 800436a:	e00a      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 800436c:	2305      	movs	r3, #5
 800436e:	e008      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004370:	2304      	movs	r3, #4
 8004372:	e006      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004374:	2303      	movs	r3, #3
 8004376:	e004      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004378:	2302      	movs	r3, #2
 800437a:	e002      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <HAL_ADC_ConfigChannel+0x1ce>
 8004380:	2300      	movs	r3, #0
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	6852      	ldr	r2, [r2, #4]
 8004386:	201f      	movs	r0, #31
 8004388:	4002      	ands	r2, r0
 800438a:	4093      	lsls	r3, r2
 800438c:	000a      	movs	r2, r1
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	089b      	lsrs	r3, r3, #2
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d808      	bhi.n	80043b6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	001a      	movs	r2, r3
 80043b2:	f7ff fc77 	bl	8003ca4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	001a      	movs	r2, r3
 80043c4:	f7ff fcb2 	bl	8003d2c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	db00      	blt.n	80043d2 <HAL_ADC_ConfigChannel+0x21e>
 80043d0:	e0bc      	b.n	800454c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043d2:	4b50      	ldr	r3, [pc, #320]	; (8004514 <HAL_ADC_ConfigChannel+0x360>)
 80043d4:	0018      	movs	r0, r3
 80043d6:	f7ff fc3b 	bl	8003c50 <LL_ADC_GetCommonPathInternalCh>
 80043da:	0003      	movs	r3, r0
 80043dc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a4d      	ldr	r2, [pc, #308]	; (8004518 <HAL_ADC_ConfigChannel+0x364>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d122      	bne.n	800442e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043f0:	d11d      	bne.n	800442e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2280      	movs	r2, #128	; 0x80
 80043f6:	0412      	lsls	r2, r2, #16
 80043f8:	4313      	orrs	r3, r2
 80043fa:	4a46      	ldr	r2, [pc, #280]	; (8004514 <HAL_ADC_ConfigChannel+0x360>)
 80043fc:	0019      	movs	r1, r3
 80043fe:	0010      	movs	r0, r2
 8004400:	f7ff fc12 	bl	8003c28 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004404:	4b45      	ldr	r3, [pc, #276]	; (800451c <HAL_ADC_ConfigChannel+0x368>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4945      	ldr	r1, [pc, #276]	; (8004520 <HAL_ADC_ConfigChannel+0x36c>)
 800440a:	0018      	movs	r0, r3
 800440c:	f7fb fe96 	bl	800013c <__udivsi3>
 8004410:	0003      	movs	r3, r0
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	0013      	movs	r3, r2
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	189b      	adds	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800441e:	e002      	b.n	8004426 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3b01      	subs	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f9      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800442c:	e08e      	b.n	800454c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a3c      	ldr	r2, [pc, #240]	; (8004524 <HAL_ADC_ConfigChannel+0x370>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d10e      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x2a2>
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	045b      	lsls	r3, r3, #17
 800443e:	4013      	ands	r3, r2
 8004440:	d109      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	0452      	lsls	r2, r2, #17
 8004448:	4313      	orrs	r3, r2
 800444a:	4a32      	ldr	r2, [pc, #200]	; (8004514 <HAL_ADC_ConfigChannel+0x360>)
 800444c:	0019      	movs	r1, r3
 800444e:	0010      	movs	r0, r2
 8004450:	f7ff fbea 	bl	8003c28 <LL_ADC_SetCommonPathInternalCh>
 8004454:	e07a      	b.n	800454c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a33      	ldr	r2, [pc, #204]	; (8004528 <HAL_ADC_ConfigChannel+0x374>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d000      	beq.n	8004462 <HAL_ADC_ConfigChannel+0x2ae>
 8004460:	e074      	b.n	800454c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	03db      	lsls	r3, r3, #15
 8004468:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800446a:	d000      	beq.n	800446e <HAL_ADC_ConfigChannel+0x2ba>
 800446c:	e06e      	b.n	800454c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2280      	movs	r2, #128	; 0x80
 8004472:	03d2      	lsls	r2, r2, #15
 8004474:	4313      	orrs	r3, r2
 8004476:	4a27      	ldr	r2, [pc, #156]	; (8004514 <HAL_ADC_ConfigChannel+0x360>)
 8004478:	0019      	movs	r1, r3
 800447a:	0010      	movs	r0, r2
 800447c:	f7ff fbd4 	bl	8003c28 <LL_ADC_SetCommonPathInternalCh>
 8004480:	e064      	b.n	800454c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	2380      	movs	r3, #128	; 0x80
 8004488:	061b      	lsls	r3, r3, #24
 800448a:	429a      	cmp	r2, r3
 800448c:	d004      	beq.n	8004498 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004492:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <HAL_ADC_ConfigChannel+0x35c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d107      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	0019      	movs	r1, r3
 80044a2:	0010      	movs	r0, r2
 80044a4:	f7ff fc2f 	bl	8003d06 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	da4d      	bge.n	800454c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044b0:	4b18      	ldr	r3, [pc, #96]	; (8004514 <HAL_ADC_ConfigChannel+0x360>)
 80044b2:	0018      	movs	r0, r3
 80044b4:	f7ff fbcc 	bl	8003c50 <LL_ADC_GetCommonPathInternalCh>
 80044b8:	0003      	movs	r3, r0
 80044ba:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a15      	ldr	r2, [pc, #84]	; (8004518 <HAL_ADC_ConfigChannel+0x364>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d108      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4a18      	ldr	r2, [pc, #96]	; (800452c <HAL_ADC_ConfigChannel+0x378>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	4a11      	ldr	r2, [pc, #68]	; (8004514 <HAL_ADC_ConfigChannel+0x360>)
 80044ce:	0019      	movs	r1, r3
 80044d0:	0010      	movs	r0, r2
 80044d2:	f7ff fba9 	bl	8003c28 <LL_ADC_SetCommonPathInternalCh>
 80044d6:	e039      	b.n	800454c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a11      	ldr	r2, [pc, #68]	; (8004524 <HAL_ADC_ConfigChannel+0x370>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d108      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4a12      	ldr	r2, [pc, #72]	; (8004530 <HAL_ADC_ConfigChannel+0x37c>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	4a0a      	ldr	r2, [pc, #40]	; (8004514 <HAL_ADC_ConfigChannel+0x360>)
 80044ea:	0019      	movs	r1, r3
 80044ec:	0010      	movs	r0, r2
 80044ee:	f7ff fb9b 	bl	8003c28 <LL_ADC_SetCommonPathInternalCh>
 80044f2:	e02b      	b.n	800454c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a0b      	ldr	r2, [pc, #44]	; (8004528 <HAL_ADC_ConfigChannel+0x374>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d126      	bne.n	800454c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4a0c      	ldr	r2, [pc, #48]	; (8004534 <HAL_ADC_ConfigChannel+0x380>)
 8004502:	4013      	ands	r3, r2
 8004504:	4a03      	ldr	r2, [pc, #12]	; (8004514 <HAL_ADC_ConfigChannel+0x360>)
 8004506:	0019      	movs	r1, r3
 8004508:	0010      	movs	r0, r2
 800450a:	f7ff fb8d 	bl	8003c28 <LL_ADC_SetCommonPathInternalCh>
 800450e:	e01d      	b.n	800454c <HAL_ADC_ConfigChannel+0x398>
 8004510:	80000004 	.word	0x80000004
 8004514:	40012708 	.word	0x40012708
 8004518:	b0001000 	.word	0xb0001000
 800451c:	20000000 	.word	0x20000000
 8004520:	00030d40 	.word	0x00030d40
 8004524:	b8004000 	.word	0xb8004000
 8004528:	b4002000 	.word	0xb4002000
 800452c:	ff7fffff 	.word	0xff7fffff
 8004530:	feffffff 	.word	0xfeffffff
 8004534:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	2220      	movs	r2, #32
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004544:	2317      	movs	r3, #23
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	2201      	movs	r2, #1
 800454a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2254      	movs	r2, #84	; 0x54
 8004550:	2100      	movs	r1, #0
 8004552:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004554:	2317      	movs	r3, #23
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	781b      	ldrb	r3, [r3, #0]
}
 800455a:	0018      	movs	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	b006      	add	sp, #24
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)

08004564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	0002      	movs	r2, r0
 800456c:	1dfb      	adds	r3, r7, #7
 800456e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004570:	1dfb      	adds	r3, r7, #7
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b7f      	cmp	r3, #127	; 0x7f
 8004576:	d809      	bhi.n	800458c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004578:	1dfb      	adds	r3, r7, #7
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	001a      	movs	r2, r3
 800457e:	231f      	movs	r3, #31
 8004580:	401a      	ands	r2, r3
 8004582:	4b04      	ldr	r3, [pc, #16]	; (8004594 <__NVIC_EnableIRQ+0x30>)
 8004584:	2101      	movs	r1, #1
 8004586:	4091      	lsls	r1, r2
 8004588:	000a      	movs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	b002      	add	sp, #8
 8004592:	bd80      	pop	{r7, pc}
 8004594:	e000e100 	.word	0xe000e100

08004598 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	0002      	movs	r2, r0
 80045a0:	1dfb      	adds	r3, r7, #7
 80045a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045a4:	1dfb      	adds	r3, r7, #7
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b7f      	cmp	r3, #127	; 0x7f
 80045aa:	d810      	bhi.n	80045ce <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ac:	1dfb      	adds	r3, r7, #7
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	001a      	movs	r2, r3
 80045b2:	231f      	movs	r3, #31
 80045b4:	4013      	ands	r3, r2
 80045b6:	4908      	ldr	r1, [pc, #32]	; (80045d8 <__NVIC_DisableIRQ+0x40>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	409a      	lsls	r2, r3
 80045bc:	0013      	movs	r3, r2
 80045be:	2280      	movs	r2, #128	; 0x80
 80045c0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045c2:	f3bf 8f4f 	dsb	sy
}
 80045c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80045c8:	f3bf 8f6f 	isb	sy
}
 80045cc:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b002      	add	sp, #8
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	e000e100 	.word	0xe000e100

080045dc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	0002      	movs	r2, r0
 80045e4:	1dfb      	adds	r3, r7, #7
 80045e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045e8:	1dfb      	adds	r3, r7, #7
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b7f      	cmp	r3, #127	; 0x7f
 80045ee:	d80a      	bhi.n	8004606 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045f0:	1dfb      	adds	r3, r7, #7
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	001a      	movs	r2, r3
 80045f6:	231f      	movs	r3, #31
 80045f8:	4013      	ands	r3, r2
 80045fa:	4905      	ldr	r1, [pc, #20]	; (8004610 <__NVIC_ClearPendingIRQ+0x34>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	409a      	lsls	r2, r3
 8004600:	23c0      	movs	r3, #192	; 0xc0
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	50ca      	str	r2, [r1, r3]
  }
}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	46bd      	mov	sp, r7
 800460a:	b002      	add	sp, #8
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	e000e100 	.word	0xe000e100

08004614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	0002      	movs	r2, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	1dfb      	adds	r3, r7, #7
 8004620:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004622:	1dfb      	adds	r3, r7, #7
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b7f      	cmp	r3, #127	; 0x7f
 8004628:	d828      	bhi.n	800467c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800462a:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <__NVIC_SetPriority+0xd4>)
 800462c:	1dfb      	adds	r3, r7, #7
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b25b      	sxtb	r3, r3
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	33c0      	adds	r3, #192	; 0xc0
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	589b      	ldr	r3, [r3, r2]
 800463a:	1dfa      	adds	r2, r7, #7
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	0011      	movs	r1, r2
 8004640:	2203      	movs	r2, #3
 8004642:	400a      	ands	r2, r1
 8004644:	00d2      	lsls	r2, r2, #3
 8004646:	21ff      	movs	r1, #255	; 0xff
 8004648:	4091      	lsls	r1, r2
 800464a:	000a      	movs	r2, r1
 800464c:	43d2      	mvns	r2, r2
 800464e:	401a      	ands	r2, r3
 8004650:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	22ff      	movs	r2, #255	; 0xff
 8004658:	401a      	ands	r2, r3
 800465a:	1dfb      	adds	r3, r7, #7
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	0018      	movs	r0, r3
 8004660:	2303      	movs	r3, #3
 8004662:	4003      	ands	r3, r0
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004668:	481f      	ldr	r0, [pc, #124]	; (80046e8 <__NVIC_SetPriority+0xd4>)
 800466a:	1dfb      	adds	r3, r7, #7
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b25b      	sxtb	r3, r3
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	430a      	orrs	r2, r1
 8004674:	33c0      	adds	r3, #192	; 0xc0
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800467a:	e031      	b.n	80046e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800467c:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <__NVIC_SetPriority+0xd8>)
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	0019      	movs	r1, r3
 8004684:	230f      	movs	r3, #15
 8004686:	400b      	ands	r3, r1
 8004688:	3b08      	subs	r3, #8
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	3306      	adds	r3, #6
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	18d3      	adds	r3, r2, r3
 8004692:	3304      	adds	r3, #4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	1dfa      	adds	r2, r7, #7
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	0011      	movs	r1, r2
 800469c:	2203      	movs	r2, #3
 800469e:	400a      	ands	r2, r1
 80046a0:	00d2      	lsls	r2, r2, #3
 80046a2:	21ff      	movs	r1, #255	; 0xff
 80046a4:	4091      	lsls	r1, r2
 80046a6:	000a      	movs	r2, r1
 80046a8:	43d2      	mvns	r2, r2
 80046aa:	401a      	ands	r2, r3
 80046ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	019b      	lsls	r3, r3, #6
 80046b2:	22ff      	movs	r2, #255	; 0xff
 80046b4:	401a      	ands	r2, r3
 80046b6:	1dfb      	adds	r3, r7, #7
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	0018      	movs	r0, r3
 80046bc:	2303      	movs	r3, #3
 80046be:	4003      	ands	r3, r0
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046c4:	4809      	ldr	r0, [pc, #36]	; (80046ec <__NVIC_SetPriority+0xd8>)
 80046c6:	1dfb      	adds	r3, r7, #7
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	001c      	movs	r4, r3
 80046cc:	230f      	movs	r3, #15
 80046ce:	4023      	ands	r3, r4
 80046d0:	3b08      	subs	r3, #8
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	430a      	orrs	r2, r1
 80046d6:	3306      	adds	r3, #6
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	18c3      	adds	r3, r0, r3
 80046dc:	3304      	adds	r3, #4
 80046de:	601a      	str	r2, [r3, #0]
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b003      	add	sp, #12
 80046e6:	bd90      	pop	{r4, r7, pc}
 80046e8:	e000e100 	.word	0xe000e100
 80046ec:	e000ed00 	.word	0xe000ed00

080046f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	1e5a      	subs	r2, r3, #1
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	045b      	lsls	r3, r3, #17
 8004700:	429a      	cmp	r2, r3
 8004702:	d301      	bcc.n	8004708 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004704:	2301      	movs	r3, #1
 8004706:	e010      	b.n	800472a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <SysTick_Config+0x44>)
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	3a01      	subs	r2, #1
 800470e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004710:	2301      	movs	r3, #1
 8004712:	425b      	negs	r3, r3
 8004714:	2103      	movs	r1, #3
 8004716:	0018      	movs	r0, r3
 8004718:	f7ff ff7c 	bl	8004614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <SysTick_Config+0x44>)
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004722:	4b04      	ldr	r3, [pc, #16]	; (8004734 <SysTick_Config+0x44>)
 8004724:	2207      	movs	r2, #7
 8004726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004728:	2300      	movs	r3, #0
}
 800472a:	0018      	movs	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	b002      	add	sp, #8
 8004730:	bd80      	pop	{r7, pc}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	e000e010 	.word	0xe000e010

08004738 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	210f      	movs	r1, #15
 8004744:	187b      	adds	r3, r7, r1
 8004746:	1c02      	adds	r2, r0, #0
 8004748:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	187b      	adds	r3, r7, r1
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	b25b      	sxtb	r3, r3
 8004752:	0011      	movs	r1, r2
 8004754:	0018      	movs	r0, r3
 8004756:	f7ff ff5d 	bl	8004614 <__NVIC_SetPriority>
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b004      	add	sp, #16
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	0002      	movs	r2, r0
 800476a:	1dfb      	adds	r3, r7, #7
 800476c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800476e:	1dfb      	adds	r3, r7, #7
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	b25b      	sxtb	r3, r3
 8004774:	0018      	movs	r0, r3
 8004776:	f7ff fef5 	bl	8004564 <__NVIC_EnableIRQ>
}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	46bd      	mov	sp, r7
 800477e:	b002      	add	sp, #8
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	0002      	movs	r2, r0
 800478a:	1dfb      	adds	r3, r7, #7
 800478c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800478e:	1dfb      	adds	r3, r7, #7
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	b25b      	sxtb	r3, r3
 8004794:	0018      	movs	r0, r3
 8004796:	f7ff feff 	bl	8004598 <__NVIC_DisableIRQ>
}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	b002      	add	sp, #8
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7ff ff9f 	bl	80046f0 <SysTick_Config>
 80047b2:	0003      	movs	r3, r0
}
 80047b4:	0018      	movs	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b002      	add	sp, #8
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	0002      	movs	r2, r0
 80047c4:	1dfb      	adds	r3, r7, #7
 80047c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80047c8:	1dfb      	adds	r3, r7, #7
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b25b      	sxtb	r3, r3
 80047ce:	0018      	movs	r0, r3
 80047d0:	f7ff ff04 	bl	80045dc <__NVIC_ClearPendingIRQ>
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b002      	add	sp, #8
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e091      	b.n	8004912 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	001a      	movs	r2, r3
 80047f4:	4b49      	ldr	r3, [pc, #292]	; (800491c <HAL_DMA_Init+0x140>)
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d810      	bhi.n	800481c <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a48      	ldr	r2, [pc, #288]	; (8004920 <HAL_DMA_Init+0x144>)
 8004800:	4694      	mov	ip, r2
 8004802:	4463      	add	r3, ip
 8004804:	2114      	movs	r1, #20
 8004806:	0018      	movs	r0, r3
 8004808:	f7fb fc98 	bl	800013c <__udivsi3>
 800480c:	0003      	movs	r3, r0
 800480e:	009a      	lsls	r2, r3, #2
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a43      	ldr	r2, [pc, #268]	; (8004924 <HAL_DMA_Init+0x148>)
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
 800481a:	e00f      	b.n	800483c <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a41      	ldr	r2, [pc, #260]	; (8004928 <HAL_DMA_Init+0x14c>)
 8004822:	4694      	mov	ip, r2
 8004824:	4463      	add	r3, ip
 8004826:	2114      	movs	r1, #20
 8004828:	0018      	movs	r0, r3
 800482a:	f7fb fc87 	bl	800013c <__udivsi3>
 800482e:	0003      	movs	r3, r0
 8004830:	009a      	lsls	r2, r3, #2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a3c      	ldr	r2, [pc, #240]	; (800492c <HAL_DMA_Init+0x150>)
 800483a:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2225      	movs	r2, #37	; 0x25
 8004840:	2102      	movs	r1, #2
 8004842:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4938      	ldr	r1, [pc, #224]	; (8004930 <HAL_DMA_Init+0x154>)
 8004850:	400a      	ands	r2, r1
 8004852:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6819      	ldr	r1, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0018      	movs	r0, r3
 800488e:	f000 fa4b 	bl	8004d28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	01db      	lsls	r3, r3, #7
 800489a:	429a      	cmp	r2, r3
 800489c:	d102      	bne.n	80048a4 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ac:	217f      	movs	r1, #127	; 0x7f
 80048ae:	400a      	ands	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d011      	beq.n	80048e8 <HAL_DMA_Init+0x10c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d80d      	bhi.n	80048e8 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 fa74 	bl	8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	e008      	b.n	80048fa <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2225      	movs	r2, #37	; 0x25
 8004904:	2101      	movs	r1, #1
 8004906:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2224      	movs	r2, #36	; 0x24
 800490c:	2100      	movs	r1, #0
 800490e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	0018      	movs	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	b002      	add	sp, #8
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	40020407 	.word	0x40020407
 8004920:	bffdfff8 	.word	0xbffdfff8
 8004924:	40020000 	.word	0x40020000
 8004928:	bffdfbf8 	.word	0xbffdfbf8
 800492c:	40020400 	.word	0x40020400
 8004930:	ffff800f 	.word	0xffff800f

08004934 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004942:	2317      	movs	r3, #23
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2224      	movs	r2, #36	; 0x24
 800494e:	5c9b      	ldrb	r3, [r3, r2]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_DMA_Start_IT+0x24>
 8004954:	2302      	movs	r3, #2
 8004956:	e06f      	b.n	8004a38 <HAL_DMA_Start_IT+0x104>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2224      	movs	r2, #36	; 0x24
 800495c:	2101      	movs	r1, #1
 800495e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2225      	movs	r2, #37	; 0x25
 8004964:	5c9b      	ldrb	r3, [r3, r2]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d157      	bne.n	8004a1c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2225      	movs	r2, #37	; 0x25
 8004970:	2102      	movs	r1, #2
 8004972:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2101      	movs	r1, #1
 8004986:	438a      	bics	r2, r1
 8004988:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f98d 	bl	8004cb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	210e      	movs	r1, #14
 80049aa:	430a      	orrs	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e00f      	b.n	80049d0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2104      	movs	r1, #4
 80049bc:	438a      	bics	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	210a      	movs	r1, #10
 80049cc:	430a      	orrs	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	2380      	movs	r3, #128	; 0x80
 80049d8:	025b      	lsls	r3, r3, #9
 80049da:	4013      	ands	r3, r2
 80049dc:	d008      	beq.n	80049f0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e8:	2180      	movs	r1, #128	; 0x80
 80049ea:	0049      	lsls	r1, r1, #1
 80049ec:	430a      	orrs	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a02:	2180      	movs	r1, #128	; 0x80
 8004a04:	0049      	lsls	r1, r1, #1
 8004a06:	430a      	orrs	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2101      	movs	r1, #1
 8004a16:	430a      	orrs	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e00a      	b.n	8004a32 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2224      	movs	r2, #36	; 0x24
 8004a26:	2100      	movs	r1, #0
 8004a28:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004a2a:	2317      	movs	r3, #23
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	2201      	movs	r2, #1
 8004a30:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004a32:	2317      	movs	r3, #23
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	781b      	ldrb	r3, [r3, #0]
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b006      	add	sp, #24
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a48:	210f      	movs	r1, #15
 8004a4a:	187b      	adds	r3, r7, r1
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2225      	movs	r2, #37	; 0x25
 8004a54:	5c9b      	ldrb	r3, [r3, r2]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d006      	beq.n	8004a6a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2204      	movs	r2, #4
 8004a60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004a62:	187b      	adds	r3, r7, r1
 8004a64:	2201      	movs	r2, #1
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e048      	b.n	8004afc <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	210e      	movs	r1, #14
 8004a76:	438a      	bics	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2101      	movs	r1, #1
 8004a86:	438a      	bics	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a94:	491d      	ldr	r1, [pc, #116]	; (8004b0c <HAL_DMA_Abort_IT+0xcc>)
 8004a96:	400a      	ands	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	221c      	movs	r2, #28
 8004aa0:	401a      	ands	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4091      	lsls	r1, r2
 8004aaa:	000a      	movs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ab6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00c      	beq.n	8004ada <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aca:	4910      	ldr	r1, [pc, #64]	; (8004b0c <HAL_DMA_Abort_IT+0xcc>)
 8004acc:	400a      	ands	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ad8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2225      	movs	r2, #37	; 0x25
 8004ade:	2101      	movs	r1, #1
 8004ae0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2224      	movs	r2, #36	; 0x24
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d004      	beq.n	8004afc <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	0010      	movs	r0, r2
 8004afa:	4798      	blx	r3
    }
  }
  return status;
 8004afc:	230f      	movs	r3, #15
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	781b      	ldrb	r3, [r3, #0]
}
 8004b02:	0018      	movs	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b004      	add	sp, #16
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	fffffeff 	.word	0xfffffeff

08004b10 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2c:	221c      	movs	r2, #28
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2204      	movs	r2, #4
 8004b32:	409a      	lsls	r2, r3
 8004b34:	0013      	movs	r3, r2
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d026      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x7a>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2204      	movs	r2, #4
 8004b40:	4013      	ands	r3, r2
 8004b42:	d022      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d107      	bne.n	8004b60 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2104      	movs	r1, #4
 8004b5c:	438a      	bics	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b64:	221c      	movs	r2, #28
 8004b66:	401a      	ands	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	2104      	movs	r1, #4
 8004b6e:	4091      	lsls	r1, r2
 8004b70:	000a      	movs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d100      	bne.n	8004b7e <HAL_DMA_IRQHandler+0x6e>
 8004b7c:	e080      	b.n	8004c80 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	0010      	movs	r0, r2
 8004b86:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004b88:	e07a      	b.n	8004c80 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	221c      	movs	r2, #28
 8004b90:	4013      	ands	r3, r2
 8004b92:	2202      	movs	r2, #2
 8004b94:	409a      	lsls	r2, r3
 8004b96:	0013      	movs	r3, r2
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d03c      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x108>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d038      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2220      	movs	r2, #32
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d10b      	bne.n	8004bca <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	210a      	movs	r1, #10
 8004bbe:	438a      	bics	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2225      	movs	r2, #37	; 0x25
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	001a      	movs	r2, r3
 8004bd0:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <HAL_DMA_IRQHandler+0x17c>)
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d909      	bls.n	8004bea <HAL_DMA_IRQHandler+0xda>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	221c      	movs	r2, #28
 8004bdc:	401a      	ands	r2, r3
 8004bde:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <HAL_DMA_IRQHandler+0x180>)
 8004be0:	2102      	movs	r1, #2
 8004be2:	4091      	lsls	r1, r2
 8004be4:	000a      	movs	r2, r1
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	e008      	b.n	8004bfc <HAL_DMA_IRQHandler+0xec>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	221c      	movs	r2, #28
 8004bf0:	401a      	ands	r2, r3
 8004bf2:	4b28      	ldr	r3, [pc, #160]	; (8004c94 <HAL_DMA_IRQHandler+0x184>)
 8004bf4:	2102      	movs	r1, #2
 8004bf6:	4091      	lsls	r1, r2
 8004bf8:	000a      	movs	r2, r1
 8004bfa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2224      	movs	r2, #36	; 0x24
 8004c00:	2100      	movs	r1, #0
 8004c02:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d039      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	0010      	movs	r0, r2
 8004c14:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004c16:	e033      	b.n	8004c80 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	221c      	movs	r2, #28
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2208      	movs	r2, #8
 8004c22:	409a      	lsls	r2, r3
 8004c24:	0013      	movs	r3, r2
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d02a      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x172>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2208      	movs	r2, #8
 8004c30:	4013      	ands	r3, r2
 8004c32:	d026      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	210e      	movs	r1, #14
 8004c40:	438a      	bics	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	221c      	movs	r2, #28
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	2101      	movs	r1, #1
 8004c52:	4091      	lsls	r1, r2
 8004c54:	000a      	movs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2225      	movs	r2, #37	; 0x25
 8004c62:	2101      	movs	r1, #1
 8004c64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2224      	movs	r2, #36	; 0x24
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	0010      	movs	r0, r2
 8004c7e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c80:	46c0      	nop			; (mov r8, r8)
 8004c82:	46c0      	nop			; (mov r8, r8)
}
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b004      	add	sp, #16
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	40020080 	.word	0x40020080
 8004c90:	40020400 	.word	0x40020400
 8004c94:	40020000 	.word	0x40020000

08004c98 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2225      	movs	r2, #37	; 0x25
 8004ca4:	5c9b      	ldrb	r3, [r3, r2]
 8004ca6:	b2db      	uxtb	r3, r3
}
 8004ca8:	0018      	movs	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b002      	add	sp, #8
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cc6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004cd8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cde:	221c      	movs	r2, #28
 8004ce0:	401a      	ands	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	4091      	lsls	r1, r2
 8004cea:	000a      	movs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d108      	bne.n	8004d10 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d0e:	e007      	b.n	8004d20 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	60da      	str	r2, [r3, #12]
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b004      	add	sp, #16
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	001a      	movs	r2, r3
 8004d36:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d814      	bhi.n	8004d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	089b      	lsrs	r3, r3, #2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4a1a      	ldr	r2, [pc, #104]	; (8004db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004d46:	189a      	adds	r2, r3, r2
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	001a      	movs	r2, r3
 8004d52:	23ff      	movs	r3, #255	; 0xff
 8004d54:	4013      	ands	r3, r2
 8004d56:	3b08      	subs	r3, #8
 8004d58:	2114      	movs	r1, #20
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7fb f9ee 	bl	800013c <__udivsi3>
 8004d60:	0003      	movs	r3, r0
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e014      	b.n	8004d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4a11      	ldr	r2, [pc, #68]	; (8004db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004d70:	189a      	adds	r2, r3, r2
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	001a      	movs	r2, r3
 8004d7c:	23ff      	movs	r3, #255	; 0xff
 8004d7e:	4013      	ands	r3, r2
 8004d80:	3b08      	subs	r3, #8
 8004d82:	2114      	movs	r1, #20
 8004d84:	0018      	movs	r0, r3
 8004d86:	f7fb f9d9 	bl	800013c <__udivsi3>
 8004d8a:	0003      	movs	r3, r0
 8004d8c:	3307      	adds	r3, #7
 8004d8e:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8004d94:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	221f      	movs	r2, #31
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b004      	add	sp, #16
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40020407 	.word	0x40020407
 8004db0:	40020800 	.word	0x40020800
 8004db4:	4002081c 	.word	0x4002081c
 8004db8:	40020880 	.word	0x40020880

08004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	227f      	movs	r2, #127	; 0x7f
 8004dca:	4013      	ands	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004dd2:	4694      	mov	ip, r2
 8004dd4:	4463      	add	r3, ip
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	001a      	movs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a07      	ldr	r2, [pc, #28]	; (8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004de2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	2203      	movs	r2, #3
 8004dea:	4013      	ands	r3, r2
 8004dec:	2201      	movs	r2, #1
 8004dee:	409a      	lsls	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b004      	add	sp, #16
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	1000823f 	.word	0x1000823f
 8004e00:	40020940 	.word	0x40020940

08004e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e12:	e14d      	b.n	80050b0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2101      	movs	r1, #1
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4091      	lsls	r1, r2
 8004e1e:	000a      	movs	r2, r1
 8004e20:	4013      	ands	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d100      	bne.n	8004e2c <HAL_GPIO_Init+0x28>
 8004e2a:	e13e      	b.n	80050aa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2203      	movs	r2, #3
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d005      	beq.n	8004e44 <HAL_GPIO_Init+0x40>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d130      	bne.n	8004ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	2203      	movs	r2, #3
 8004e50:	409a      	lsls	r2, r3
 8004e52:	0013      	movs	r3, r2
 8004e54:	43da      	mvns	r2, r3
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	409a      	lsls	r2, r3
 8004e66:	0013      	movs	r3, r2
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	0013      	movs	r3, r2
 8004e82:	43da      	mvns	r2, r3
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4013      	ands	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	2201      	movs	r2, #1
 8004e92:	401a      	ands	r2, r3
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	409a      	lsls	r2, r3
 8004e98:	0013      	movs	r3, r2
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d017      	beq.n	8004ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	0013      	movs	r3, r2
 8004ec2:	43da      	mvns	r2, r3
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	0013      	movs	r3, r2
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d123      	bne.n	8004f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	08da      	lsrs	r2, r3, #3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3208      	adds	r2, #8
 8004ef6:	0092      	lsls	r2, r2, #2
 8004ef8:	58d3      	ldr	r3, [r2, r3]
 8004efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2207      	movs	r2, #7
 8004f00:	4013      	ands	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	220f      	movs	r2, #15
 8004f06:	409a      	lsls	r2, r3
 8004f08:	0013      	movs	r3, r2
 8004f0a:	43da      	mvns	r2, r3
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2107      	movs	r1, #7
 8004f1a:	400b      	ands	r3, r1
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	0013      	movs	r3, r2
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	08da      	lsrs	r2, r3, #3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3208      	adds	r2, #8
 8004f30:	0092      	lsls	r2, r2, #2
 8004f32:	6939      	ldr	r1, [r7, #16]
 8004f34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	2203      	movs	r2, #3
 8004f42:	409a      	lsls	r2, r3
 8004f44:	0013      	movs	r3, r2
 8004f46:	43da      	mvns	r2, r3
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2203      	movs	r2, #3
 8004f54:	401a      	ands	r2, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	0013      	movs	r3, r2
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	23c0      	movs	r3, #192	; 0xc0
 8004f70:	029b      	lsls	r3, r3, #10
 8004f72:	4013      	ands	r3, r2
 8004f74:	d100      	bne.n	8004f78 <HAL_GPIO_Init+0x174>
 8004f76:	e098      	b.n	80050aa <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004f78:	4a53      	ldr	r2, [pc, #332]	; (80050c8 <HAL_GPIO_Init+0x2c4>)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	089b      	lsrs	r3, r3, #2
 8004f7e:	3318      	adds	r3, #24
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	589b      	ldr	r3, [r3, r2]
 8004f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2203      	movs	r2, #3
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	220f      	movs	r2, #15
 8004f90:	409a      	lsls	r2, r3
 8004f92:	0013      	movs	r3, r2
 8004f94:	43da      	mvns	r2, r3
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	23a0      	movs	r3, #160	; 0xa0
 8004fa0:	05db      	lsls	r3, r3, #23
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d019      	beq.n	8004fda <HAL_GPIO_Init+0x1d6>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a48      	ldr	r2, [pc, #288]	; (80050cc <HAL_GPIO_Init+0x2c8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <HAL_GPIO_Init+0x1d2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a47      	ldr	r2, [pc, #284]	; (80050d0 <HAL_GPIO_Init+0x2cc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00d      	beq.n	8004fd2 <HAL_GPIO_Init+0x1ce>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a46      	ldr	r2, [pc, #280]	; (80050d4 <HAL_GPIO_Init+0x2d0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <HAL_GPIO_Init+0x1ca>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a45      	ldr	r2, [pc, #276]	; (80050d8 <HAL_GPIO_Init+0x2d4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d101      	bne.n	8004fca <HAL_GPIO_Init+0x1c6>
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	e008      	b.n	8004fdc <HAL_GPIO_Init+0x1d8>
 8004fca:	2305      	movs	r3, #5
 8004fcc:	e006      	b.n	8004fdc <HAL_GPIO_Init+0x1d8>
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e004      	b.n	8004fdc <HAL_GPIO_Init+0x1d8>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e002      	b.n	8004fdc <HAL_GPIO_Init+0x1d8>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <HAL_GPIO_Init+0x1d8>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	2103      	movs	r1, #3
 8004fe0:	400a      	ands	r2, r1
 8004fe2:	00d2      	lsls	r2, r2, #3
 8004fe4:	4093      	lsls	r3, r2
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004fec:	4936      	ldr	r1, [pc, #216]	; (80050c8 <HAL_GPIO_Init+0x2c4>)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	089b      	lsrs	r3, r3, #2
 8004ff2:	3318      	adds	r3, #24
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ffa:	4a33      	ldr	r2, [pc, #204]	; (80050c8 <HAL_GPIO_Init+0x2c4>)
 8004ffc:	2380      	movs	r3, #128	; 0x80
 8004ffe:	58d3      	ldr	r3, [r2, r3]
 8005000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	43da      	mvns	r2, r3
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4013      	ands	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	025b      	lsls	r3, r3, #9
 8005014:	4013      	ands	r3, r2
 8005016:	d003      	beq.n	8005020 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005020:	4929      	ldr	r1, [pc, #164]	; (80050c8 <HAL_GPIO_Init+0x2c4>)
 8005022:	2280      	movs	r2, #128	; 0x80
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8005028:	4a27      	ldr	r2, [pc, #156]	; (80050c8 <HAL_GPIO_Init+0x2c4>)
 800502a:	2384      	movs	r3, #132	; 0x84
 800502c:	58d3      	ldr	r3, [r2, r3]
 800502e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	43da      	mvns	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4013      	ands	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	029b      	lsls	r3, r3, #10
 8005042:	4013      	ands	r3, r2
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800504e:	491e      	ldr	r1, [pc, #120]	; (80050c8 <HAL_GPIO_Init+0x2c4>)
 8005050:	2284      	movs	r2, #132	; 0x84
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005056:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <HAL_GPIO_Init+0x2c4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	43da      	mvns	r2, r3
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4013      	ands	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	2380      	movs	r3, #128	; 0x80
 800506c:	035b      	lsls	r3, r3, #13
 800506e:	4013      	ands	r3, r2
 8005070:	d003      	beq.n	800507a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800507a:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <HAL_GPIO_Init+0x2c4>)
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005080:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <HAL_GPIO_Init+0x2c4>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	43da      	mvns	r2, r3
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4013      	ands	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	039b      	lsls	r3, r3, #14
 8005098:	4013      	ands	r3, r2
 800509a:	d003      	beq.n	80050a4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <HAL_GPIO_Init+0x2c4>)
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	3301      	adds	r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	40da      	lsrs	r2, r3
 80050b8:	1e13      	subs	r3, r2, #0
 80050ba:	d000      	beq.n	80050be <HAL_GPIO_Init+0x2ba>
 80050bc:	e6aa      	b.n	8004e14 <HAL_GPIO_Init+0x10>
  }
}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b006      	add	sp, #24
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40021800 	.word	0x40021800
 80050cc:	50000400 	.word	0x50000400
 80050d0:	50000800 	.word	0x50000800
 80050d4:	50000c00 	.word	0x50000c00
 80050d8:	50001000 	.word	0x50001000

080050dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	0008      	movs	r0, r1
 80050e6:	0011      	movs	r1, r2
 80050e8:	1cbb      	adds	r3, r7, #2
 80050ea:	1c02      	adds	r2, r0, #0
 80050ec:	801a      	strh	r2, [r3, #0]
 80050ee:	1c7b      	adds	r3, r7, #1
 80050f0:	1c0a      	adds	r2, r1, #0
 80050f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050f4:	1c7b      	adds	r3, r7, #1
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050fc:	1cbb      	adds	r3, r7, #2
 80050fe:	881a      	ldrh	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005104:	e003      	b.n	800510e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005106:	1cbb      	adds	r3, r7, #2
 8005108:	881a      	ldrh	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b002      	add	sp, #8
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e082      	b.n	8005230 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2241      	movs	r2, #65	; 0x41
 800512e:	5c9b      	ldrb	r3, [r3, r2]
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d107      	bne.n	8005146 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2240      	movs	r2, #64	; 0x40
 800513a:	2100      	movs	r1, #0
 800513c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	0018      	movs	r0, r3
 8005142:	f7fe f82f 	bl	80031a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2241      	movs	r2, #65	; 0x41
 800514a:	2124      	movs	r1, #36	; 0x24
 800514c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2101      	movs	r1, #1
 800515a:	438a      	bics	r2, r1
 800515c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4934      	ldr	r1, [pc, #208]	; (8005238 <HAL_I2C_Init+0x120>)
 8005168:	400a      	ands	r2, r1
 800516a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4931      	ldr	r1, [pc, #196]	; (800523c <HAL_I2C_Init+0x124>)
 8005178:	400a      	ands	r2, r1
 800517a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d108      	bne.n	8005196 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2180      	movs	r1, #128	; 0x80
 800518e:	0209      	lsls	r1, r1, #8
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]
 8005194:	e007      	b.n	80051a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2184      	movs	r1, #132	; 0x84
 80051a0:	0209      	lsls	r1, r1, #8
 80051a2:	430a      	orrs	r2, r1
 80051a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d104      	bne.n	80051b8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2280      	movs	r2, #128	; 0x80
 80051b4:	0112      	lsls	r2, r2, #4
 80051b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	491f      	ldr	r1, [pc, #124]	; (8005240 <HAL_I2C_Init+0x128>)
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	491a      	ldr	r1, [pc, #104]	; (800523c <HAL_I2C_Init+0x124>)
 80051d4:	400a      	ands	r2, r1
 80051d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	431a      	orrs	r2, r3
 80051e2:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69d9      	ldr	r1, [r3, #28]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1a      	ldr	r2, [r3, #32]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2101      	movs	r1, #1
 800520e:	430a      	orrs	r2, r1
 8005210:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2241      	movs	r2, #65	; 0x41
 800521c:	2120      	movs	r1, #32
 800521e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2242      	movs	r2, #66	; 0x42
 800522a:	2100      	movs	r1, #0
 800522c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	b002      	add	sp, #8
 8005236:	bd80      	pop	{r7, pc}
 8005238:	f0ffffff 	.word	0xf0ffffff
 800523c:	ffff7fff 	.word	0xffff7fff
 8005240:	02008000 	.word	0x02008000

08005244 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b089      	sub	sp, #36	; 0x24
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	0008      	movs	r0, r1
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	0019      	movs	r1, r3
 8005252:	230a      	movs	r3, #10
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	1c02      	adds	r2, r0, #0
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	2308      	movs	r3, #8
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	1c0a      	adds	r2, r1, #0
 8005260:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2241      	movs	r2, #65	; 0x41
 8005266:	5c9b      	ldrb	r3, [r3, r2]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b20      	cmp	r3, #32
 800526c:	d000      	beq.n	8005270 <HAL_I2C_Master_Transmit+0x2c>
 800526e:	e0e7      	b.n	8005440 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2240      	movs	r2, #64	; 0x40
 8005274:	5c9b      	ldrb	r3, [r3, r2]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_I2C_Master_Transmit+0x3a>
 800527a:	2302      	movs	r3, #2
 800527c:	e0e1      	b.n	8005442 <HAL_I2C_Master_Transmit+0x1fe>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2240      	movs	r2, #64	; 0x40
 8005282:	2101      	movs	r1, #1
 8005284:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005286:	f7fe fc8b 	bl	8003ba0 <HAL_GetTick>
 800528a:	0003      	movs	r3, r0
 800528c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800528e:	2380      	movs	r3, #128	; 0x80
 8005290:	0219      	lsls	r1, r3, #8
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	2319      	movs	r3, #25
 800529a:	2201      	movs	r2, #1
 800529c:	f001 fe40 	bl	8006f20 <I2C_WaitOnFlagUntilTimeout>
 80052a0:	1e03      	subs	r3, r0, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0cc      	b.n	8005442 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2241      	movs	r2, #65	; 0x41
 80052ac:	2121      	movs	r1, #33	; 0x21
 80052ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2242      	movs	r2, #66	; 0x42
 80052b4:	2110      	movs	r1, #16
 80052b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2208      	movs	r2, #8
 80052c8:	18ba      	adds	r2, r7, r2
 80052ca:	8812      	ldrh	r2, [r2, #0]
 80052cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2bff      	cmp	r3, #255	; 0xff
 80052dc:	d911      	bls.n	8005302 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	22ff      	movs	r2, #255	; 0xff
 80052e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	045c      	lsls	r4, r3, #17
 80052ee:	230a      	movs	r3, #10
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	8819      	ldrh	r1, [r3, #0]
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	4b55      	ldr	r3, [pc, #340]	; (800544c <HAL_I2C_Master_Transmit+0x208>)
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	0023      	movs	r3, r4
 80052fc:	f001 ffb0 	bl	8007260 <I2C_TransferConfig>
 8005300:	e075      	b.n	80053ee <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005310:	b2da      	uxtb	r2, r3
 8005312:	2380      	movs	r3, #128	; 0x80
 8005314:	049c      	lsls	r4, r3, #18
 8005316:	230a      	movs	r3, #10
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	8819      	ldrh	r1, [r3, #0]
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	4b4b      	ldr	r3, [pc, #300]	; (800544c <HAL_I2C_Master_Transmit+0x208>)
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	0023      	movs	r3, r4
 8005324:	f001 ff9c 	bl	8007260 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005328:	e061      	b.n	80053ee <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	0018      	movs	r0, r3
 8005332:	f001 fe34 	bl	8006f9e <I2C_WaitOnTXISFlagUntilTimeout>
 8005336:	1e03      	subs	r3, r0, #0
 8005338:	d001      	beq.n	800533e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e081      	b.n	8005442 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	781a      	ldrb	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d03a      	beq.n	80053ee <HAL_I2C_Master_Transmit+0x1aa>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537c:	2b00      	cmp	r3, #0
 800537e:	d136      	bne.n	80053ee <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	0013      	movs	r3, r2
 800538a:	2200      	movs	r2, #0
 800538c:	2180      	movs	r1, #128	; 0x80
 800538e:	f001 fdc7 	bl	8006f20 <I2C_WaitOnFlagUntilTimeout>
 8005392:	1e03      	subs	r3, r0, #0
 8005394:	d001      	beq.n	800539a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e053      	b.n	8005442 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2bff      	cmp	r3, #255	; 0xff
 80053a2:	d911      	bls.n	80053c8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	22ff      	movs	r2, #255	; 0xff
 80053a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	2380      	movs	r3, #128	; 0x80
 80053b2:	045c      	lsls	r4, r3, #17
 80053b4:	230a      	movs	r3, #10
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	8819      	ldrh	r1, [r3, #0]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	2300      	movs	r3, #0
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	0023      	movs	r3, r4
 80053c2:	f001 ff4d 	bl	8007260 <I2C_TransferConfig>
 80053c6:	e012      	b.n	80053ee <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	2380      	movs	r3, #128	; 0x80
 80053da:	049c      	lsls	r4, r3, #18
 80053dc:	230a      	movs	r3, #10
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	8819      	ldrh	r1, [r3, #0]
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	2300      	movs	r3, #0
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	0023      	movs	r3, r4
 80053ea:	f001 ff39 	bl	8007260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d198      	bne.n	800532a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	0018      	movs	r0, r3
 8005400:	f001 fe0c 	bl	800701c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005404:	1e03      	subs	r3, r0, #0
 8005406:	d001      	beq.n	800540c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e01a      	b.n	8005442 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2220      	movs	r2, #32
 8005412:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	490c      	ldr	r1, [pc, #48]	; (8005450 <HAL_I2C_Master_Transmit+0x20c>)
 8005420:	400a      	ands	r2, r1
 8005422:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2241      	movs	r2, #65	; 0x41
 8005428:	2120      	movs	r1, #32
 800542a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2242      	movs	r2, #66	; 0x42
 8005430:	2100      	movs	r1, #0
 8005432:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2240      	movs	r2, #64	; 0x40
 8005438:	2100      	movs	r1, #0
 800543a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	e000      	b.n	8005442 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005440:	2302      	movs	r3, #2
  }
}
 8005442:	0018      	movs	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	b007      	add	sp, #28
 8005448:	bd90      	pop	{r4, r7, pc}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	80002000 	.word	0x80002000
 8005450:	fe00e800 	.word	0xfe00e800

08005454 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b089      	sub	sp, #36	; 0x24
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	0008      	movs	r0, r1
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	0019      	movs	r1, r3
 8005462:	230a      	movs	r3, #10
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	1c02      	adds	r2, r0, #0
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	2308      	movs	r3, #8
 800546c:	18fb      	adds	r3, r7, r3
 800546e:	1c0a      	adds	r2, r1, #0
 8005470:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2241      	movs	r2, #65	; 0x41
 8005476:	5c9b      	ldrb	r3, [r3, r2]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b20      	cmp	r3, #32
 800547c:	d000      	beq.n	8005480 <HAL_I2C_Master_Receive+0x2c>
 800547e:	e0e8      	b.n	8005652 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	5c9b      	ldrb	r3, [r3, r2]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_I2C_Master_Receive+0x3a>
 800548a:	2302      	movs	r3, #2
 800548c:	e0e2      	b.n	8005654 <HAL_I2C_Master_Receive+0x200>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2240      	movs	r2, #64	; 0x40
 8005492:	2101      	movs	r1, #1
 8005494:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005496:	f7fe fb83 	bl	8003ba0 <HAL_GetTick>
 800549a:	0003      	movs	r3, r0
 800549c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800549e:	2380      	movs	r3, #128	; 0x80
 80054a0:	0219      	lsls	r1, r3, #8
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	2319      	movs	r3, #25
 80054aa:	2201      	movs	r2, #1
 80054ac:	f001 fd38 	bl	8006f20 <I2C_WaitOnFlagUntilTimeout>
 80054b0:	1e03      	subs	r3, r0, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0cd      	b.n	8005654 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2241      	movs	r2, #65	; 0x41
 80054bc:	2122      	movs	r1, #34	; 0x22
 80054be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2242      	movs	r2, #66	; 0x42
 80054c4:	2110      	movs	r1, #16
 80054c6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2208      	movs	r2, #8
 80054d8:	18ba      	adds	r2, r7, r2
 80054da:	8812      	ldrh	r2, [r2, #0]
 80054dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2bff      	cmp	r3, #255	; 0xff
 80054ec:	d911      	bls.n	8005512 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	22ff      	movs	r2, #255	; 0xff
 80054f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	045c      	lsls	r4, r3, #17
 80054fe:	230a      	movs	r3, #10
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	8819      	ldrh	r1, [r3, #0]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	4b55      	ldr	r3, [pc, #340]	; (800565c <HAL_I2C_Master_Receive+0x208>)
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	0023      	movs	r3, r4
 800550c:	f001 fea8 	bl	8007260 <I2C_TransferConfig>
 8005510:	e076      	b.n	8005600 <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005520:	b2da      	uxtb	r2, r3
 8005522:	2380      	movs	r3, #128	; 0x80
 8005524:	049c      	lsls	r4, r3, #18
 8005526:	230a      	movs	r3, #10
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	8819      	ldrh	r1, [r3, #0]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	4b4b      	ldr	r3, [pc, #300]	; (800565c <HAL_I2C_Master_Receive+0x208>)
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	0023      	movs	r3, r4
 8005534:	f001 fe94 	bl	8007260 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005538:	e062      	b.n	8005600 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	0018      	movs	r0, r3
 8005542:	f001 fda7 	bl	8007094 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005546:	1e03      	subs	r3, r0, #0
 8005548:	d001      	beq.n	800554e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e082      	b.n	8005654 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d03a      	beq.n	8005600 <HAL_I2C_Master_Receive+0x1ac>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558e:	2b00      	cmp	r3, #0
 8005590:	d136      	bne.n	8005600 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	0013      	movs	r3, r2
 800559c:	2200      	movs	r2, #0
 800559e:	2180      	movs	r1, #128	; 0x80
 80055a0:	f001 fcbe 	bl	8006f20 <I2C_WaitOnFlagUntilTimeout>
 80055a4:	1e03      	subs	r3, r0, #0
 80055a6:	d001      	beq.n	80055ac <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e053      	b.n	8005654 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2bff      	cmp	r3, #255	; 0xff
 80055b4:	d911      	bls.n	80055da <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	22ff      	movs	r2, #255	; 0xff
 80055ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	045c      	lsls	r4, r3, #17
 80055c6:	230a      	movs	r3, #10
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	8819      	ldrh	r1, [r3, #0]
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	2300      	movs	r3, #0
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	0023      	movs	r3, r4
 80055d4:	f001 fe44 	bl	8007260 <I2C_TransferConfig>
 80055d8:	e012      	b.n	8005600 <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	2380      	movs	r3, #128	; 0x80
 80055ec:	049c      	lsls	r4, r3, #18
 80055ee:	230a      	movs	r3, #10
 80055f0:	18fb      	adds	r3, r7, r3
 80055f2:	8819      	ldrh	r1, [r3, #0]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	2300      	movs	r3, #0
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	0023      	movs	r3, r4
 80055fc:	f001 fe30 	bl	8007260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d197      	bne.n	800553a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	0018      	movs	r0, r3
 8005612:	f001 fd03 	bl	800701c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005616:	1e03      	subs	r3, r0, #0
 8005618:	d001      	beq.n	800561e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e01a      	b.n	8005654 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2220      	movs	r2, #32
 8005624:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	490b      	ldr	r1, [pc, #44]	; (8005660 <HAL_I2C_Master_Receive+0x20c>)
 8005632:	400a      	ands	r2, r1
 8005634:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2241      	movs	r2, #65	; 0x41
 800563a:	2120      	movs	r1, #32
 800563c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2242      	movs	r2, #66	; 0x42
 8005642:	2100      	movs	r1, #0
 8005644:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2240      	movs	r2, #64	; 0x40
 800564a:	2100      	movs	r1, #0
 800564c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	e000      	b.n	8005654 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005652:	2302      	movs	r3, #2
  }
}
 8005654:	0018      	movs	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	b007      	add	sp, #28
 800565a:	bd90      	pop	{r4, r7, pc}
 800565c:	80002400 	.word	0x80002400
 8005660:	fe00e800 	.word	0xfe00e800

08005664 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005664:	b5b0      	push	{r4, r5, r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	0008      	movs	r0, r1
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	0019      	movs	r1, r3
 8005672:	230a      	movs	r3, #10
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	1c02      	adds	r2, r0, #0
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	2308      	movs	r3, #8
 800567c:	18fb      	adds	r3, r7, r3
 800567e:	1c0a      	adds	r2, r1, #0
 8005680:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2241      	movs	r2, #65	; 0x41
 8005686:	5c9b      	ldrb	r3, [r3, r2]
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b20      	cmp	r3, #32
 800568c:	d000      	beq.n	8005690 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800568e:	e0dd      	b.n	800584c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	2380      	movs	r3, #128	; 0x80
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	401a      	ands	r2, r3
 800569c:	2380      	movs	r3, #128	; 0x80
 800569e:	021b      	lsls	r3, r3, #8
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d101      	bne.n	80056a8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
 80056a6:	e0d2      	b.n	800584e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2240      	movs	r2, #64	; 0x40
 80056ac:	5c9b      	ldrb	r3, [r3, r2]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_I2C_Master_Transmit_DMA+0x52>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e0cb      	b.n	800584e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2240      	movs	r2, #64	; 0x40
 80056ba:	2101      	movs	r1, #1
 80056bc:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2241      	movs	r2, #65	; 0x41
 80056c2:	2121      	movs	r1, #33	; 0x21
 80056c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2242      	movs	r2, #66	; 0x42
 80056ca:	2110      	movs	r1, #16
 80056cc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2208      	movs	r2, #8
 80056de:	18ba      	adds	r2, r7, r2
 80056e0:	8812      	ldrh	r2, [r2, #0]
 80056e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4a5c      	ldr	r2, [pc, #368]	; (8005858 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80056e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a5b      	ldr	r2, [pc, #364]	; (800585c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80056ee:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2bff      	cmp	r3, #255	; 0xff
 80056f8:	d906      	bls.n	8005708 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	22ff      	movs	r2, #255	; 0xff
 80056fe:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005700:	2380      	movs	r3, #128	; 0x80
 8005702:	045b      	lsls	r3, r3, #17
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	e007      	b.n	8005718 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005712:	2380      	movs	r3, #128	; 0x80
 8005714:	049b      	lsls	r3, r3, #18
 8005716:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571c:	2b00      	cmp	r3, #0
 800571e:	d100      	bne.n	8005722 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8005720:	e078      	b.n	8005814 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	2b00      	cmp	r3, #0
 8005728:	d023      	beq.n	8005772 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	4a4c      	ldr	r2, [pc, #304]	; (8005860 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8005730:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	4a4b      	ldr	r2, [pc, #300]	; (8005864 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8005738:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	2200      	movs	r2, #0
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	2200      	movs	r2, #0
 8005748:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3328      	adds	r3, #40	; 0x28
 8005756:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800575c:	2513      	movs	r5, #19
 800575e:	197c      	adds	r4, r7, r5
 8005760:	f7ff f8e8 	bl	8004934 <HAL_DMA_Start_IT>
 8005764:	0003      	movs	r3, r0
 8005766:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005768:	197b      	adds	r3, r7, r5
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d13d      	bne.n	80057ec <HAL_I2C_Master_Transmit_DMA+0x188>
 8005770:	e013      	b.n	800579a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2241      	movs	r2, #65	; 0x41
 8005776:	2120      	movs	r1, #32
 8005778:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2242      	movs	r2, #66	; 0x42
 800577e:	2100      	movs	r1, #0
 8005780:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005786:	2280      	movs	r2, #128	; 0x80
 8005788:	431a      	orrs	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2240      	movs	r2, #64	; 0x40
 8005792:	2100      	movs	r1, #0
 8005794:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e059      	b.n	800584e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	697c      	ldr	r4, [r7, #20]
 80057a2:	230a      	movs	r3, #10
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	8819      	ldrh	r1, [r3, #0]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	4b2f      	ldr	r3, [pc, #188]	; (8005868 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	0023      	movs	r3, r4
 80057b0:	f001 fd56 	bl	8007260 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2240      	movs	r2, #64	; 0x40
 80057ca:	2100      	movs	r1, #0
 80057cc:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2110      	movs	r1, #16
 80057d2:	0018      	movs	r0, r3
 80057d4:	f001 fd7a 	bl	80072cc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2180      	movs	r1, #128	; 0x80
 80057e4:	01c9      	lsls	r1, r1, #7
 80057e6:	430a      	orrs	r2, r1
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e02d      	b.n	8005848 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2241      	movs	r2, #65	; 0x41
 80057f0:	2120      	movs	r1, #32
 80057f2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2242      	movs	r2, #66	; 0x42
 80057f8:	2100      	movs	r1, #0
 80057fa:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005800:	2210      	movs	r2, #16
 8005802:	431a      	orrs	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2240      	movs	r2, #64	; 0x40
 800580c:	2100      	movs	r1, #0
 800580e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e01c      	b.n	800584e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4a15      	ldr	r2, [pc, #84]	; (800586c <HAL_I2C_Master_Transmit_DMA+0x208>)
 8005818:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581e:	b2da      	uxtb	r2, r3
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	049c      	lsls	r4, r3, #18
 8005824:	230a      	movs	r3, #10
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	8819      	ldrh	r1, [r3, #0]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	0023      	movs	r3, r4
 8005832:	f001 fd15 	bl	8007260 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2240      	movs	r2, #64	; 0x40
 800583a:	2100      	movs	r1, #0
 800583c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2101      	movs	r1, #1
 8005842:	0018      	movs	r0, r3
 8005844:	f001 fd42 	bl	80072cc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	e000      	b.n	800584e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800584c:	2302      	movs	r3, #2
  }
}
 800584e:	0018      	movs	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	b006      	add	sp, #24
 8005854:	bdb0      	pop	{r4, r5, r7, pc}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	ffff0000 	.word	0xffff0000
 800585c:	08005fd9 	.word	0x08005fd9
 8005860:	08006d71 	.word	0x08006d71
 8005864:	08006eb1 	.word	0x08006eb1
 8005868:	80002000 	.word	0x80002000
 800586c:	08005b2d 	.word	0x08005b2d

08005870 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005870:	b5b0      	push	{r4, r5, r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af02      	add	r7, sp, #8
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	0008      	movs	r0, r1
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	0019      	movs	r1, r3
 800587e:	230a      	movs	r3, #10
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	1c02      	adds	r2, r0, #0
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	2308      	movs	r3, #8
 8005888:	18fb      	adds	r3, r7, r3
 800588a:	1c0a      	adds	r2, r1, #0
 800588c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2241      	movs	r2, #65	; 0x41
 8005892:	5c9b      	ldrb	r3, [r3, r2]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b20      	cmp	r3, #32
 8005898:	d000      	beq.n	800589c <HAL_I2C_Master_Receive_DMA+0x2c>
 800589a:	e0dd      	b.n	8005a58 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	2380      	movs	r3, #128	; 0x80
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	401a      	ands	r2, r3
 80058a8:	2380      	movs	r3, #128	; 0x80
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d101      	bne.n	80058b4 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
 80058b2:	e0d2      	b.n	8005a5a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2240      	movs	r2, #64	; 0x40
 80058b8:	5c9b      	ldrb	r3, [r3, r2]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_I2C_Master_Receive_DMA+0x52>
 80058be:	2302      	movs	r3, #2
 80058c0:	e0cb      	b.n	8005a5a <HAL_I2C_Master_Receive_DMA+0x1ea>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2240      	movs	r2, #64	; 0x40
 80058c6:	2101      	movs	r1, #1
 80058c8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2241      	movs	r2, #65	; 0x41
 80058ce:	2122      	movs	r1, #34	; 0x22
 80058d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2242      	movs	r2, #66	; 0x42
 80058d6:	2110      	movs	r1, #16
 80058d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2208      	movs	r2, #8
 80058ea:	18ba      	adds	r2, r7, r2
 80058ec:	8812      	ldrh	r2, [r2, #0]
 80058ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a5c      	ldr	r2, [pc, #368]	; (8005a64 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80058f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4a5b      	ldr	r2, [pc, #364]	; (8005a68 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80058fa:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005900:	b29b      	uxth	r3, r3
 8005902:	2bff      	cmp	r3, #255	; 0xff
 8005904:	d906      	bls.n	8005914 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	22ff      	movs	r2, #255	; 0xff
 800590a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800590c:	2380      	movs	r3, #128	; 0x80
 800590e:	045b      	lsls	r3, r3, #17
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e007      	b.n	8005924 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800591e:	2380      	movs	r3, #128	; 0x80
 8005920:	049b      	lsls	r3, r3, #18
 8005922:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005928:	2b00      	cmp	r3, #0
 800592a:	d100      	bne.n	800592e <HAL_I2C_Master_Receive_DMA+0xbe>
 800592c:	e078      	b.n	8005a20 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d023      	beq.n	800597e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	4a4c      	ldr	r2, [pc, #304]	; (8005a6c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800593c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005942:	4a4b      	ldr	r2, [pc, #300]	; (8005a70 <HAL_I2C_Master_Receive_DMA+0x200>)
 8005944:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	2200      	movs	r2, #0
 800594c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	2200      	movs	r2, #0
 8005954:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3324      	adds	r3, #36	; 0x24
 8005960:	0019      	movs	r1, r3
 8005962:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005968:	2513      	movs	r5, #19
 800596a:	197c      	adds	r4, r7, r5
 800596c:	f7fe ffe2 	bl	8004934 <HAL_DMA_Start_IT>
 8005970:	0003      	movs	r3, r0
 8005972:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005974:	197b      	adds	r3, r7, r5
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d13d      	bne.n	80059f8 <HAL_I2C_Master_Receive_DMA+0x188>
 800597c:	e013      	b.n	80059a6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2241      	movs	r2, #65	; 0x41
 8005982:	2120      	movs	r1, #32
 8005984:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2242      	movs	r2, #66	; 0x42
 800598a:	2100      	movs	r1, #0
 800598c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	2280      	movs	r2, #128	; 0x80
 8005994:	431a      	orrs	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2240      	movs	r2, #64	; 0x40
 800599e:	2100      	movs	r1, #0
 80059a0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e059      	b.n	8005a5a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	697c      	ldr	r4, [r7, #20]
 80059ae:	230a      	movs	r3, #10
 80059b0:	18fb      	adds	r3, r7, r3
 80059b2:	8819      	ldrh	r1, [r3, #0]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	4b2f      	ldr	r3, [pc, #188]	; (8005a74 <HAL_I2C_Master_Receive_DMA+0x204>)
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	0023      	movs	r3, r4
 80059bc:	f001 fc50 	bl	8007260 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2240      	movs	r2, #64	; 0x40
 80059d6:	2100      	movs	r1, #0
 80059d8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2110      	movs	r1, #16
 80059de:	0018      	movs	r0, r3
 80059e0:	f001 fc74 	bl	80072cc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2180      	movs	r1, #128	; 0x80
 80059f0:	0209      	lsls	r1, r1, #8
 80059f2:	430a      	orrs	r2, r1
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e02d      	b.n	8005a54 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2241      	movs	r2, #65	; 0x41
 80059fc:	2120      	movs	r1, #32
 80059fe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2242      	movs	r2, #66	; 0x42
 8005a04:	2100      	movs	r1, #0
 8005a06:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2240      	movs	r2, #64	; 0x40
 8005a18:	2100      	movs	r1, #0
 8005a1a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e01c      	b.n	8005a5a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <HAL_I2C_Master_Receive_DMA+0x208>)
 8005a24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	2380      	movs	r3, #128	; 0x80
 8005a2e:	049c      	lsls	r4, r3, #18
 8005a30:	230a      	movs	r3, #10
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	8819      	ldrh	r1, [r3, #0]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	4b0e      	ldr	r3, [pc, #56]	; (8005a74 <HAL_I2C_Master_Receive_DMA+0x204>)
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	0023      	movs	r3, r4
 8005a3e:	f001 fc0f 	bl	8007260 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2240      	movs	r2, #64	; 0x40
 8005a46:	2100      	movs	r1, #0
 8005a48:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f001 fc3c 	bl	80072cc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e000      	b.n	8005a5a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a58:	2302      	movs	r3, #2
  }
}
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b006      	add	sp, #24
 8005a60:	bdb0      	pop	{r4, r5, r7, pc}
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	ffff0000 	.word	0xffff0000
 8005a68:	08005fd9 	.word	0x08005fd9
 8005a6c:	08006e11 	.word	0x08006e11
 8005a70:	08006eb1 	.word	0x08006eb1
 8005a74:	80002400 	.word	0x80002400
 8005a78:	08005b2d 	.word	0x08005b2d

08005a7c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005a84:	46c0      	nop			; (mov r8, r8)
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b002      	add	sp, #8
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005a94:	46c0      	nop			; (mov r8, r8)
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b002      	add	sp, #8
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005aa4:	46c0      	nop			; (mov r8, r8)
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	b002      	add	sp, #8
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ab4:	46c0      	nop			; (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b002      	add	sp, #8
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	0008      	movs	r0, r1
 8005ac6:	0011      	movs	r1, r2
 8005ac8:	1cfb      	adds	r3, r7, #3
 8005aca:	1c02      	adds	r2, r0, #0
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	003b      	movs	r3, r7
 8005ad0:	1c0a      	adds	r2, r1, #0
 8005ad2:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005ad4:	46c0      	nop			; (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b002      	add	sp, #8
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005ae4:	46c0      	nop			; (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b002      	add	sp, #8
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005af4:	46c0      	nop			; (mov r8, r8)
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b002      	add	sp, #8
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005b04:	46c0      	nop			; (mov r8, r8)
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b002      	add	sp, #8
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b14:	46c0      	nop			; (mov r8, r8)
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b002      	add	sp, #8
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b24:	46c0      	nop			; (mov r8, r8)
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b002      	add	sp, #8
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 8005b2c:	b590      	push	{r4, r7, lr}
 8005b2e:	b089      	sub	sp, #36	; 0x24
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2240      	movs	r2, #64	; 0x40
 8005b40:	5c9b      	ldrb	r3, [r3, r2]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <I2C_Master_ISR_IT+0x1e>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e12b      	b.n	8005da2 <I2C_Master_ISR_IT+0x276>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2240      	movs	r2, #64	; 0x40
 8005b4e:	2101      	movs	r1, #1
 8005b50:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	091b      	lsrs	r3, r3, #4
 8005b56:	001a      	movs	r2, r3
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d014      	beq.n	8005b88 <I2C_Master_ISR_IT+0x5c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	091b      	lsrs	r3, r3, #4
 8005b62:	001a      	movs	r2, r3
 8005b64:	2301      	movs	r3, #1
 8005b66:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b68:	d00e      	beq.n	8005b88 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2210      	movs	r2, #16
 8005b70:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b76:	2204      	movs	r2, #4
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f001 f8d2 	bl	8006d2a <I2C_Flush_TXDR>
 8005b86:	e0f5      	b.n	8005d74 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	089b      	lsrs	r3, r3, #2
 8005b8c:	001a      	movs	r2, r3
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4013      	ands	r3, r2
 8005b92:	d023      	beq.n	8005bdc <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	089b      	lsrs	r3, r3, #2
 8005b98:	001a      	movs	r2, r3
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005b9e:	d01d      	beq.n	8005bdc <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	4393      	bics	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bda:	e0cb      	b.n	8005d74 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	001a      	movs	r2, r3
 8005be2:	2301      	movs	r3, #1
 8005be4:	4013      	ands	r3, r2
 8005be6:	d01e      	beq.n	8005c26 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	001a      	movs	r2, r3
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005bf2:	d018      	beq.n	8005c26 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	781a      	ldrb	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c24:	e0a6      	b.n	8005d74 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	09db      	lsrs	r3, r3, #7
 8005c2a:	001a      	movs	r2, r3
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d100      	bne.n	8005c34 <I2C_Master_ISR_IT+0x108>
 8005c32:	e06b      	b.n	8005d0c <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	099b      	lsrs	r3, r3, #6
 8005c38:	001a      	movs	r2, r3
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c3e:	d065      	beq.n	8005d0c <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d04a      	beq.n	8005ce0 <I2C_Master_ISR_IT+0x1b4>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d146      	bne.n	8005ce0 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	2112      	movs	r1, #18
 8005c5c:	187b      	adds	r3, r7, r1
 8005c5e:	0592      	lsls	r2, r2, #22
 8005c60:	0d92      	lsrs	r2, r2, #22
 8005c62:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2bff      	cmp	r3, #255	; 0xff
 8005c6c:	d910      	bls.n	8005c90 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	22ff      	movs	r2, #255	; 0xff
 8005c72:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	2380      	movs	r3, #128	; 0x80
 8005c7c:	045c      	lsls	r4, r3, #17
 8005c7e:	187b      	adds	r3, r7, r1
 8005c80:	8819      	ldrh	r1, [r3, #0]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	2300      	movs	r3, #0
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	0023      	movs	r3, r4
 8005c8a:	f001 fae9 	bl	8007260 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c8e:	e03c      	b.n	8005d0a <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	4a43      	ldr	r2, [pc, #268]	; (8005dac <I2C_Master_ISR_IT+0x280>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005cae:	2312      	movs	r3, #18
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	8819      	ldrh	r1, [r3, #0]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	0023      	movs	r3, r4
 8005cbc:	f001 fad0 	bl	8007260 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cc0:	e023      	b.n	8005d0a <I2C_Master_ISR_IT+0x1de>
                                hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	2380      	movs	r3, #128	; 0x80
 8005cca:	049c      	lsls	r4, r3, #18
 8005ccc:	2312      	movs	r3, #18
 8005cce:	18fb      	adds	r3, r7, r3
 8005cd0:	8819      	ldrh	r1, [r3, #0]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	0023      	movs	r3, r4
 8005cda:	f001 fac1 	bl	8007260 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cde:	e014      	b.n	8005d0a <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	2380      	movs	r3, #128	; 0x80
 8005ce8:	049b      	lsls	r3, r3, #18
 8005cea:	401a      	ands	r2, r3
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	049b      	lsls	r3, r3, #18
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d004      	beq.n	8005cfe <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f000 fc14 	bl	8006524 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cfc:	e03a      	b.n	8005d74 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2140      	movs	r1, #64	; 0x40
 8005d02:	0018      	movs	r0, r3
 8005d04:	f000 ff06 	bl	8006b14 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d08:	e034      	b.n	8005d74 <I2C_Master_ISR_IT+0x248>
 8005d0a:	e033      	b.n	8005d74 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	099b      	lsrs	r3, r3, #6
 8005d10:	001a      	movs	r2, r3
 8005d12:	2301      	movs	r3, #1
 8005d14:	4013      	ands	r3, r2
 8005d16:	d02d      	beq.n	8005d74 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	099b      	lsrs	r3, r3, #6
 8005d1c:	001a      	movs	r2, r3
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005d22:	d027      	beq.n	8005d74 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d11d      	bne.n	8005d6a <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	2380      	movs	r3, #128	; 0x80
 8005d36:	049b      	lsls	r3, r3, #18
 8005d38:	401a      	ands	r2, r3
 8005d3a:	2380      	movs	r3, #128	; 0x80
 8005d3c:	049b      	lsls	r3, r3, #18
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d018      	beq.n	8005d74 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	4a19      	ldr	r2, [pc, #100]	; (8005dac <I2C_Master_ISR_IT+0x280>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d109      	bne.n	8005d60 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2180      	movs	r1, #128	; 0x80
 8005d58:	01c9      	lsls	r1, r1, #7
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
 8005d5e:	e009      	b.n	8005d74 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	0018      	movs	r0, r3
 8005d64:	f000 fbde 	bl	8006524 <I2C_ITMasterSeqCplt>
 8005d68:	e004      	b.n	8005d74 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2140      	movs	r1, #64	; 0x40
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f000 fed0 	bl	8006b14 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	001a      	movs	r2, r3
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d00b      	beq.n	8005d98 <I2C_Master_ISR_IT+0x26c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	095b      	lsrs	r3, r3, #5
 8005d84:	001a      	movs	r2, r3
 8005d86:	2301      	movs	r3, #1
 8005d88:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d8a:	d005      	beq.n	8005d98 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	0011      	movs	r1, r2
 8005d92:	0018      	movs	r0, r3
 8005d94:	f000 fc6e 	bl	8006674 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2240      	movs	r2, #64	; 0x40
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	0018      	movs	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b007      	add	sp, #28
 8005da8:	bd90      	pop	{r4, r7, pc}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	ffff0000 	.word	0xffff0000

08005db0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2240      	movs	r2, #64	; 0x40
 8005dca:	5c9b      	ldrb	r3, [r3, r2]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <I2C_Slave_ISR_IT+0x24>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e0fa      	b.n	8005fca <I2C_Slave_ISR_IT+0x21a>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2240      	movs	r2, #64	; 0x40
 8005dd8:	2101      	movs	r1, #1
 8005dda:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	001a      	movs	r2, r3
 8005de2:	2301      	movs	r3, #1
 8005de4:	4013      	ands	r3, r2
 8005de6:	d00b      	beq.n	8005e00 <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	001a      	movs	r2, r3
 8005dee:	2301      	movs	r3, #1
 8005df0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005df2:	d005      	beq.n	8005e00 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	0011      	movs	r1, r2
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f000 fd0c 	bl	8006818 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	001a      	movs	r2, r3
 8005e06:	2301      	movs	r3, #1
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d054      	beq.n	8005eb6 <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	091b      	lsrs	r3, r3, #4
 8005e10:	001a      	movs	r2, r3
 8005e12:	2301      	movs	r3, #1
 8005e14:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e16:	d04e      	beq.n	8005eb6 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d12d      	bne.n	8005e7e <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2241      	movs	r2, #65	; 0x41
 8005e26:	5c9b      	ldrb	r3, [r3, r2]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b28      	cmp	r3, #40	; 0x28
 8005e2c:	d10b      	bne.n	8005e46 <I2C_Slave_ISR_IT+0x96>
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	2380      	movs	r3, #128	; 0x80
 8005e32:	049b      	lsls	r3, r3, #18
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d106      	bne.n	8005e46 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	0011      	movs	r1, r2
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 fe0e 	bl	8006a60 <I2C_ITListenCplt>
 8005e44:	e036      	b.n	8005eb4 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2241      	movs	r2, #65	; 0x41
 8005e4a:	5c9b      	ldrb	r3, [r3, r2]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b29      	cmp	r3, #41	; 0x29
 8005e50:	d110      	bne.n	8005e74 <I2C_Slave_ISR_IT+0xc4>
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	4a5f      	ldr	r2, [pc, #380]	; (8005fd4 <I2C_Slave_ISR_IT+0x224>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00c      	beq.n	8005e74 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2210      	movs	r2, #16
 8005e60:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	0018      	movs	r0, r3
 8005e66:	f000 ff60 	bl	8006d2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f000 fb9b 	bl	80065a8 <I2C_ITSlaveSeqCplt>
 8005e72:	e01f      	b.n	8005eb4 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2210      	movs	r2, #16
 8005e7a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005e7c:	e09d      	b.n	8005fba <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2210      	movs	r2, #16
 8005e84:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	2204      	movs	r2, #4
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <I2C_Slave_ISR_IT+0xf4>
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	045b      	lsls	r3, r3, #17
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d000      	beq.n	8005ea4 <I2C_Slave_ISR_IT+0xf4>
 8005ea2:	e08a      	b.n	8005fba <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	0011      	movs	r1, r2
 8005eac:	0018      	movs	r0, r3
 8005eae:	f000 fe31 	bl	8006b14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005eb2:	e082      	b.n	8005fba <I2C_Slave_ISR_IT+0x20a>
 8005eb4:	e081      	b.n	8005fba <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	089b      	lsrs	r3, r3, #2
 8005eba:	001a      	movs	r2, r3
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d031      	beq.n	8005f26 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	089b      	lsrs	r3, r3, #2
 8005ec6:	001a      	movs	r2, r3
 8005ec8:	2301      	movs	r3, #1
 8005eca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ecc:	d02b      	beq.n	8005f26 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d018      	beq.n	8005f0a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d154      	bne.n	8005fbe <I2C_Slave_ISR_IT+0x20e>
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4a2f      	ldr	r2, [pc, #188]	; (8005fd4 <I2C_Slave_ISR_IT+0x224>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d050      	beq.n	8005fbe <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	0018      	movs	r0, r3
 8005f20:	f000 fb42 	bl	80065a8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005f24:	e04b      	b.n	8005fbe <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	08db      	lsrs	r3, r3, #3
 8005f2a:	001a      	movs	r2, r3
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d00c      	beq.n	8005f4c <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	08db      	lsrs	r3, r3, #3
 8005f36:	001a      	movs	r2, r3
 8005f38:	2301      	movs	r3, #1
 8005f3a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005f3c:	d006      	beq.n	8005f4c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	0011      	movs	r1, r2
 8005f44:	0018      	movs	r0, r3
 8005f46:	f000 fa49 	bl	80063dc <I2C_ITAddrCplt>
 8005f4a:	e039      	b.n	8005fc0 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	085b      	lsrs	r3, r3, #1
 8005f50:	001a      	movs	r2, r3
 8005f52:	2301      	movs	r3, #1
 8005f54:	4013      	ands	r3, r2
 8005f56:	d033      	beq.n	8005fc0 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	001a      	movs	r2, r3
 8005f5e:	2301      	movs	r3, #1
 8005f60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f62:	d02d      	beq.n	8005fc0 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d018      	beq.n	8005fa0 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	781a      	ldrb	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	851a      	strh	r2, [r3, #40]	; 0x28
 8005f9e:	e00f      	b.n	8005fc0 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	2380      	movs	r3, #128	; 0x80
 8005fa4:	045b      	lsls	r3, r3, #17
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d002      	beq.n	8005fb0 <I2C_Slave_ISR_IT+0x200>
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d107      	bne.n	8005fc0 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 faf8 	bl	80065a8 <I2C_ITSlaveSeqCplt>
 8005fb8:	e002      	b.n	8005fc0 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	e000      	b.n	8005fc0 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8005fbe:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	0018      	movs	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	b006      	add	sp, #24
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	ffff0000 	.word	0xffff0000

08005fd8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                               uint32_t ITSources)
{
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b089      	sub	sp, #36	; 0x24
 8005fdc:	af02      	add	r7, sp, #8
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2240      	movs	r2, #64	; 0x40
 8005fe8:	5c9b      	ldrb	r3, [r3, r2]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <I2C_Master_ISR_DMA+0x1a>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e0f7      	b.n	80061e2 <I2C_Master_ISR_DMA+0x20a>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2240      	movs	r2, #64	; 0x40
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	091b      	lsrs	r3, r3, #4
 8005ffe:	001a      	movs	r2, r3
 8006000:	2301      	movs	r3, #1
 8006002:	4013      	ands	r3, r2
 8006004:	d019      	beq.n	800603a <I2C_Master_ISR_DMA+0x62>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	091b      	lsrs	r3, r3, #4
 800600a:	001a      	movs	r2, r3
 800600c:	2301      	movs	r3, #1
 800600e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006010:	d013      	beq.n	800603a <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2210      	movs	r2, #16
 8006018:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601e:	2204      	movs	r2, #4
 8006020:	431a      	orrs	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2120      	movs	r1, #32
 800602a:	0018      	movs	r0, r3
 800602c:	f001 f94e 	bl	80072cc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	0018      	movs	r0, r3
 8006034:	f000 fe79 	bl	8006d2a <I2C_Flush_TXDR>
 8006038:	e0ce      	b.n	80061d8 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	09db      	lsrs	r3, r3, #7
 800603e:	001a      	movs	r2, r3
 8006040:	2301      	movs	r3, #1
 8006042:	4013      	ands	r3, r2
 8006044:	d100      	bne.n	8006048 <I2C_Master_ISR_DMA+0x70>
 8006046:	e07e      	b.n	8006146 <I2C_Master_ISR_DMA+0x16e>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	099b      	lsrs	r3, r3, #6
 800604c:	001a      	movs	r2, r3
 800604e:	2301      	movs	r3, #1
 8006050:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006052:	d100      	bne.n	8006056 <I2C_Master_ISR_DMA+0x7e>
 8006054:	e077      	b.n	8006146 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2140      	movs	r1, #64	; 0x40
 8006062:	438a      	bics	r2, r1
 8006064:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d055      	beq.n	800611c <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	b29a      	uxth	r2, r3
 8006078:	2312      	movs	r3, #18
 800607a:	18fb      	adds	r3, r7, r3
 800607c:	0592      	lsls	r2, r2, #22
 800607e:	0d92      	lsrs	r2, r2, #22
 8006080:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006086:	b29b      	uxth	r3, r3
 8006088:	2bff      	cmp	r3, #255	; 0xff
 800608a:	d906      	bls.n	800609a <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	22ff      	movs	r2, #255	; 0xff
 8006090:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006092:	2380      	movs	r3, #128	; 0x80
 8006094:	045b      	lsls	r3, r3, #17
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	e010      	b.n	80060bc <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a8:	4a50      	ldr	r2, [pc, #320]	; (80061ec <I2C_Master_ISR_DMA+0x214>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	e002      	b.n	80060bc <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80060b6:	2380      	movs	r3, #128	; 0x80
 80060b8:	049b      	lsls	r3, r3, #18
 80060ba:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	697c      	ldr	r4, [r7, #20]
 80060c4:	2312      	movs	r3, #18
 80060c6:	18fb      	adds	r3, r7, r3
 80060c8:	8819      	ldrh	r1, [r3, #0]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	2300      	movs	r3, #0
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	0023      	movs	r3, r4
 80060d2:	f001 f8c5 	bl	8007260 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2241      	movs	r2, #65	; 0x41
 80060ec:	5c9b      	ldrb	r3, [r3, r2]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b22      	cmp	r3, #34	; 0x22
 80060f2:	d109      	bne.n	8006108 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2180      	movs	r1, #128	; 0x80
 8006100:	0209      	lsls	r1, r1, #8
 8006102:	430a      	orrs	r2, r1
 8006104:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006106:	e067      	b.n	80061d8 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2180      	movs	r1, #128	; 0x80
 8006114:	01c9      	lsls	r1, r1, #7
 8006116:	430a      	orrs	r2, r1
 8006118:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800611a:	e05d      	b.n	80061d8 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	2380      	movs	r3, #128	; 0x80
 8006124:	049b      	lsls	r3, r3, #18
 8006126:	401a      	ands	r2, r3
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	049b      	lsls	r3, r3, #18
 800612c:	429a      	cmp	r2, r3
 800612e:	d004      	beq.n	800613a <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	0018      	movs	r0, r3
 8006134:	f000 f9f6 	bl	8006524 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006138:	e04e      	b.n	80061d8 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2140      	movs	r1, #64	; 0x40
 800613e:	0018      	movs	r0, r3
 8006140:	f000 fce8 	bl	8006b14 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006144:	e048      	b.n	80061d8 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	099b      	lsrs	r3, r3, #6
 800614a:	001a      	movs	r2, r3
 800614c:	2301      	movs	r3, #1
 800614e:	4013      	ands	r3, r2
 8006150:	d02e      	beq.n	80061b0 <I2C_Master_ISR_DMA+0x1d8>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	099b      	lsrs	r3, r3, #6
 8006156:	001a      	movs	r2, r3
 8006158:	2301      	movs	r3, #1
 800615a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800615c:	d028      	beq.n	80061b0 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d11d      	bne.n	80061a4 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	049b      	lsls	r3, r3, #18
 8006172:	401a      	ands	r2, r3
 8006174:	2380      	movs	r3, #128	; 0x80
 8006176:	049b      	lsls	r3, r3, #18
 8006178:	429a      	cmp	r2, r3
 800617a:	d02c      	beq.n	80061d6 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	4a1a      	ldr	r2, [pc, #104]	; (80061ec <I2C_Master_ISR_DMA+0x214>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d109      	bne.n	800619a <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2180      	movs	r1, #128	; 0x80
 8006192:	01c9      	lsls	r1, r1, #7
 8006194:	430a      	orrs	r2, r1
 8006196:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006198:	e01d      	b.n	80061d6 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	0018      	movs	r0, r3
 800619e:	f000 f9c1 	bl	8006524 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80061a2:	e018      	b.n	80061d6 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2140      	movs	r1, #64	; 0x40
 80061a8:	0018      	movs	r0, r3
 80061aa:	f000 fcb3 	bl	8006b14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80061ae:	e012      	b.n	80061d6 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	001a      	movs	r2, r3
 80061b6:	2301      	movs	r3, #1
 80061b8:	4013      	ands	r3, r2
 80061ba:	d00d      	beq.n	80061d8 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	095b      	lsrs	r3, r3, #5
 80061c0:	001a      	movs	r2, r3
 80061c2:	2301      	movs	r3, #1
 80061c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061c6:	d007      	beq.n	80061d8 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	0011      	movs	r1, r2
 80061ce:	0018      	movs	r0, r3
 80061d0:	f000 fa50 	bl	8006674 <I2C_ITMasterCplt>
 80061d4:	e000      	b.n	80061d8 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80061d6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2240      	movs	r2, #64	; 0x40
 80061dc:	2100      	movs	r1, #0
 80061de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	0018      	movs	r0, r3
 80061e4:	46bd      	mov	sp, r7
 80061e6:	b007      	add	sp, #28
 80061e8:	bd90      	pop	{r4, r7, pc}
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	ffff0000 	.word	0xffff0000

080061f0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2240      	movs	r2, #64	; 0x40
 800620a:	5c9b      	ldrb	r3, [r3, r2]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <I2C_Slave_ISR_DMA+0x24>
 8006210:	2302      	movs	r3, #2
 8006212:	e0dd      	b.n	80063d0 <I2C_Slave_ISR_DMA+0x1e0>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2240      	movs	r2, #64	; 0x40
 8006218:	2101      	movs	r1, #1
 800621a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	001a      	movs	r2, r3
 8006222:	2301      	movs	r3, #1
 8006224:	4013      	ands	r3, r2
 8006226:	d00b      	beq.n	8006240 <I2C_Slave_ISR_DMA+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	001a      	movs	r2, r3
 800622e:	2301      	movs	r3, #1
 8006230:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006232:	d005      	beq.n	8006240 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	0011      	movs	r1, r2
 800623a:	0018      	movs	r0, r3
 800623c:	f000 faec 	bl	8006818 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	091b      	lsrs	r3, r3, #4
 8006244:	001a      	movs	r2, r3
 8006246:	2301      	movs	r3, #1
 8006248:	4013      	ands	r3, r2
 800624a:	d100      	bne.n	800624e <I2C_Slave_ISR_DMA+0x5e>
 800624c:	e0a9      	b.n	80063a2 <I2C_Slave_ISR_DMA+0x1b2>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	091b      	lsrs	r3, r3, #4
 8006252:	001a      	movs	r2, r3
 8006254:	2301      	movs	r3, #1
 8006256:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006258:	d100      	bne.n	800625c <I2C_Slave_ISR_DMA+0x6c>
 800625a:	e0a2      	b.n	80063a2 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	0b9b      	lsrs	r3, r3, #14
 8006260:	001a      	movs	r2, r3
 8006262:	2301      	movs	r3, #1
 8006264:	4013      	ands	r3, r2
 8006266:	d106      	bne.n	8006276 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	0bdb      	lsrs	r3, r3, #15
 800626c:	001a      	movs	r2, r3
 800626e:	2301      	movs	r3, #1
 8006270:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006272:	d100      	bne.n	8006276 <I2C_Slave_ISR_DMA+0x86>
 8006274:	e08e      	b.n	8006394 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00d      	beq.n	800629a <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	0bdb      	lsrs	r3, r3, #15
 8006282:	001a      	movs	r2, r3
 8006284:	2301      	movs	r3, #1
 8006286:	4013      	ands	r3, r2
 8006288:	d007      	beq.n	800629a <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8006296:	2301      	movs	r3, #1
 8006298:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00d      	beq.n	80062be <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0b9b      	lsrs	r3, r3, #14
 80062a6:	001a      	movs	r2, r3
 80062a8:	2301      	movs	r3, #1
 80062aa:	4013      	ands	r3, r2
 80062ac:	d007      	beq.n	80062be <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 80062ba:	2301      	movs	r3, #1
 80062bc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d12d      	bne.n	8006320 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2241      	movs	r2, #65	; 0x41
 80062c8:	5c9b      	ldrb	r3, [r3, r2]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b28      	cmp	r3, #40	; 0x28
 80062ce:	d10b      	bne.n	80062e8 <I2C_Slave_ISR_DMA+0xf8>
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	2380      	movs	r3, #128	; 0x80
 80062d4:	049b      	lsls	r3, r3, #18
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d106      	bne.n	80062e8 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	0011      	movs	r1, r2
 80062e0:	0018      	movs	r0, r3
 80062e2:	f000 fbbd 	bl	8006a60 <I2C_ITListenCplt>
 80062e6:	e054      	b.n	8006392 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2241      	movs	r2, #65	; 0x41
 80062ec:	5c9b      	ldrb	r3, [r3, r2]
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b29      	cmp	r3, #41	; 0x29
 80062f2:	d110      	bne.n	8006316 <I2C_Slave_ISR_DMA+0x126>
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	4a38      	ldr	r2, [pc, #224]	; (80063d8 <I2C_Slave_ISR_DMA+0x1e8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00c      	beq.n	8006316 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2210      	movs	r2, #16
 8006302:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	0018      	movs	r0, r3
 8006308:	f000 fd0f 	bl	8006d2a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	0018      	movs	r0, r3
 8006310:	f000 f94a 	bl	80065a8 <I2C_ITSlaveSeqCplt>
 8006314:	e03d      	b.n	8006392 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2210      	movs	r2, #16
 800631c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800631e:	e03e      	b.n	800639e <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2210      	movs	r2, #16
 8006326:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632c:	2204      	movs	r2, #4
 800632e:	431a      	orrs	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006334:	2317      	movs	r3, #23
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	2141      	movs	r1, #65	; 0x41
 800633c:	5c52      	ldrb	r2, [r2, r1]
 800633e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d004      	beq.n	8006350 <I2C_Slave_ISR_DMA+0x160>
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	2380      	movs	r3, #128	; 0x80
 800634a:	045b      	lsls	r3, r3, #17
 800634c:	429a      	cmp	r2, r3
 800634e:	d126      	bne.n	800639e <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006350:	2217      	movs	r2, #23
 8006352:	18bb      	adds	r3, r7, r2
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b21      	cmp	r3, #33	; 0x21
 8006358:	d003      	beq.n	8006362 <I2C_Slave_ISR_DMA+0x172>
 800635a:	18bb      	adds	r3, r7, r2
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b29      	cmp	r3, #41	; 0x29
 8006360:	d103      	bne.n	800636a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2221      	movs	r2, #33	; 0x21
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
 8006368:	e00b      	b.n	8006382 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800636a:	2217      	movs	r2, #23
 800636c:	18bb      	adds	r3, r7, r2
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b22      	cmp	r3, #34	; 0x22
 8006372:	d003      	beq.n	800637c <I2C_Slave_ISR_DMA+0x18c>
 8006374:	18bb      	adds	r3, r7, r2
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b2a      	cmp	r3, #42	; 0x2a
 800637a:	d102      	bne.n	8006382 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2222      	movs	r2, #34	; 0x22
 8006380:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	0011      	movs	r1, r2
 800638a:	0018      	movs	r0, r3
 800638c:	f000 fbc2 	bl	8006b14 <I2C_ITError>
      if (treatdmanack == 1U)
 8006390:	e005      	b.n	800639e <I2C_Slave_ISR_DMA+0x1ae>
 8006392:	e004      	b.n	800639e <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2210      	movs	r2, #16
 800639a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800639c:	e013      	b.n	80063c6 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 800639e:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80063a0:	e011      	b.n	80063c6 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	08db      	lsrs	r3, r3, #3
 80063a6:	001a      	movs	r2, r3
 80063a8:	2301      	movs	r3, #1
 80063aa:	4013      	ands	r3, r2
 80063ac:	d00b      	beq.n	80063c6 <I2C_Slave_ISR_DMA+0x1d6>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	08db      	lsrs	r3, r3, #3
 80063b2:	001a      	movs	r2, r3
 80063b4:	2301      	movs	r3, #1
 80063b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80063b8:	d005      	beq.n	80063c6 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	0011      	movs	r1, r2
 80063c0:	0018      	movs	r0, r3
 80063c2:	f000 f80b 	bl	80063dc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2240      	movs	r2, #64	; 0x40
 80063ca:	2100      	movs	r1, #0
 80063cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	0018      	movs	r0, r3
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b008      	add	sp, #32
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	ffff0000 	.word	0xffff0000

080063dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80063dc:	b5b0      	push	{r4, r5, r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2241      	movs	r2, #65	; 0x41
 80063ea:	5c9b      	ldrb	r3, [r3, r2]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	001a      	movs	r2, r3
 80063f0:	2328      	movs	r3, #40	; 0x28
 80063f2:	4013      	ands	r3, r2
 80063f4:	2b28      	cmp	r3, #40	; 0x28
 80063f6:	d000      	beq.n	80063fa <I2C_ITAddrCplt+0x1e>
 80063f8:	e088      	b.n	800650c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	0c1b      	lsrs	r3, r3, #16
 8006402:	b2da      	uxtb	r2, r3
 8006404:	250f      	movs	r5, #15
 8006406:	197b      	adds	r3, r7, r5
 8006408:	2101      	movs	r1, #1
 800640a:	400a      	ands	r2, r1
 800640c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	0c1b      	lsrs	r3, r3, #16
 8006416:	b29a      	uxth	r2, r3
 8006418:	200c      	movs	r0, #12
 800641a:	183b      	adds	r3, r7, r0
 800641c:	21fe      	movs	r1, #254	; 0xfe
 800641e:	400a      	ands	r2, r1
 8006420:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	b29a      	uxth	r2, r3
 800642a:	240a      	movs	r4, #10
 800642c:	193b      	adds	r3, r7, r4
 800642e:	0592      	lsls	r2, r2, #22
 8006430:	0d92      	lsrs	r2, r2, #22
 8006432:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	b29a      	uxth	r2, r3
 800643c:	2308      	movs	r3, #8
 800643e:	18fb      	adds	r3, r7, r3
 8006440:	21fe      	movs	r1, #254	; 0xfe
 8006442:	400a      	ands	r2, r1
 8006444:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d148      	bne.n	80064e0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800644e:	0021      	movs	r1, r4
 8006450:	187b      	adds	r3, r7, r1
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	09db      	lsrs	r3, r3, #7
 8006456:	b29a      	uxth	r2, r3
 8006458:	183b      	adds	r3, r7, r0
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	4053      	eors	r3, r2
 800645e:	b29b      	uxth	r3, r3
 8006460:	001a      	movs	r2, r3
 8006462:	2306      	movs	r3, #6
 8006464:	4013      	ands	r3, r2
 8006466:	d120      	bne.n	80064aa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006468:	183b      	adds	r3, r7, r0
 800646a:	187a      	adds	r2, r7, r1
 800646c:	8812      	ldrh	r2, [r2, #0]
 800646e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647e:	2b02      	cmp	r3, #2
 8006480:	d14c      	bne.n	800651c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2208      	movs	r2, #8
 800648e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2240      	movs	r2, #64	; 0x40
 8006494:	2100      	movs	r1, #0
 8006496:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006498:	183b      	adds	r3, r7, r0
 800649a:	881a      	ldrh	r2, [r3, #0]
 800649c:	197b      	adds	r3, r7, r5
 800649e:	7819      	ldrb	r1, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	0018      	movs	r0, r3
 80064a4:	f7ff fb0a 	bl	8005abc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80064a8:	e038      	b.n	800651c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80064aa:	240c      	movs	r4, #12
 80064ac:	193b      	adds	r3, r7, r4
 80064ae:	2208      	movs	r2, #8
 80064b0:	18ba      	adds	r2, r7, r2
 80064b2:	8812      	ldrh	r2, [r2, #0]
 80064b4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80064b6:	2380      	movs	r3, #128	; 0x80
 80064b8:	021a      	lsls	r2, r3, #8
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	0011      	movs	r1, r2
 80064be:	0018      	movs	r0, r3
 80064c0:	f000 ff6c 	bl	800739c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2240      	movs	r2, #64	; 0x40
 80064c8:	2100      	movs	r1, #0
 80064ca:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80064cc:	193b      	adds	r3, r7, r4
 80064ce:	881a      	ldrh	r2, [r3, #0]
 80064d0:	230f      	movs	r3, #15
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	7819      	ldrb	r1, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	0018      	movs	r0, r3
 80064da:	f7ff faef 	bl	8005abc <HAL_I2C_AddrCallback>
}
 80064de:	e01d      	b.n	800651c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80064e0:	2380      	movs	r3, #128	; 0x80
 80064e2:	021a      	lsls	r2, r3, #8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	0011      	movs	r1, r2
 80064e8:	0018      	movs	r0, r3
 80064ea:	f000 ff57 	bl	800739c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2240      	movs	r2, #64	; 0x40
 80064f2:	2100      	movs	r1, #0
 80064f4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80064f6:	230c      	movs	r3, #12
 80064f8:	18fb      	adds	r3, r7, r3
 80064fa:	881a      	ldrh	r2, [r3, #0]
 80064fc:	230f      	movs	r3, #15
 80064fe:	18fb      	adds	r3, r7, r3
 8006500:	7819      	ldrb	r1, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	0018      	movs	r0, r3
 8006506:	f7ff fad9 	bl	8005abc <HAL_I2C_AddrCallback>
}
 800650a:	e007      	b.n	800651c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2208      	movs	r2, #8
 8006512:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2240      	movs	r2, #64	; 0x40
 8006518:	2100      	movs	r1, #0
 800651a:	5499      	strb	r1, [r3, r2]
}
 800651c:	46c0      	nop			; (mov r8, r8)
 800651e:	46bd      	mov	sp, r7
 8006520:	b004      	add	sp, #16
 8006522:	bdb0      	pop	{r4, r5, r7, pc}

08006524 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2242      	movs	r2, #66	; 0x42
 8006530:	2100      	movs	r1, #0
 8006532:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2241      	movs	r2, #65	; 0x41
 8006538:	5c9b      	ldrb	r3, [r3, r2]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b21      	cmp	r3, #33	; 0x21
 800653e:	d117      	bne.n	8006570 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2241      	movs	r2, #65	; 0x41
 8006544:	2120      	movs	r1, #32
 8006546:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2211      	movs	r2, #17
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2101      	movs	r1, #1
 8006558:	0018      	movs	r0, r3
 800655a:	f000 ff1f 	bl	800739c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2240      	movs	r2, #64	; 0x40
 8006562:	2100      	movs	r1, #0
 8006564:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	0018      	movs	r0, r3
 800656a:	f7ff fa87 	bl	8005a7c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800656e:	e016      	b.n	800659e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2241      	movs	r2, #65	; 0x41
 8006574:	2120      	movs	r1, #32
 8006576:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2212      	movs	r2, #18
 800657c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2102      	movs	r1, #2
 8006588:	0018      	movs	r0, r3
 800658a:	f000 ff07 	bl	800739c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2240      	movs	r2, #64	; 0x40
 8006592:	2100      	movs	r1, #0
 8006594:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	0018      	movs	r0, r3
 800659a:	f7ff fa77 	bl	8005a8c <HAL_I2C_MasterRxCpltCallback>
}
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b002      	add	sp, #8
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2242      	movs	r2, #66	; 0x42
 80065bc:	2100      	movs	r1, #0
 80065be:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	0b9b      	lsrs	r3, r3, #14
 80065c4:	001a      	movs	r2, r3
 80065c6:	2301      	movs	r3, #1
 80065c8:	4013      	ands	r3, r2
 80065ca:	d008      	beq.n	80065de <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4925      	ldr	r1, [pc, #148]	; (800666c <I2C_ITSlaveSeqCplt+0xc4>)
 80065d8:	400a      	ands	r2, r1
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	e00d      	b.n	80065fa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	0bdb      	lsrs	r3, r3, #15
 80065e2:	001a      	movs	r2, r3
 80065e4:	2301      	movs	r3, #1
 80065e6:	4013      	ands	r3, r2
 80065e8:	d007      	beq.n	80065fa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	491e      	ldr	r1, [pc, #120]	; (8006670 <I2C_ITSlaveSeqCplt+0xc8>)
 80065f6:	400a      	ands	r2, r1
 80065f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2241      	movs	r2, #65	; 0x41
 80065fe:	5c9b      	ldrb	r3, [r3, r2]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b29      	cmp	r3, #41	; 0x29
 8006604:	d114      	bne.n	8006630 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2241      	movs	r2, #65	; 0x41
 800660a:	2128      	movs	r1, #40	; 0x28
 800660c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2221      	movs	r2, #33	; 0x21
 8006612:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2101      	movs	r1, #1
 8006618:	0018      	movs	r0, r3
 800661a:	f000 febf 	bl	800739c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2240      	movs	r2, #64	; 0x40
 8006622:	2100      	movs	r1, #0
 8006624:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	0018      	movs	r0, r3
 800662a:	f7ff fa37 	bl	8005a9c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800662e:	e019      	b.n	8006664 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2241      	movs	r2, #65	; 0x41
 8006634:	5c9b      	ldrb	r3, [r3, r2]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b2a      	cmp	r3, #42	; 0x2a
 800663a:	d113      	bne.n	8006664 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2241      	movs	r2, #65	; 0x41
 8006640:	2128      	movs	r1, #40	; 0x28
 8006642:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2222      	movs	r2, #34	; 0x22
 8006648:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2102      	movs	r1, #2
 800664e:	0018      	movs	r0, r3
 8006650:	f000 fea4 	bl	800739c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2240      	movs	r2, #64	; 0x40
 8006658:	2100      	movs	r1, #0
 800665a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	0018      	movs	r0, r3
 8006660:	f7ff fa24 	bl	8005aac <HAL_I2C_SlaveRxCpltCallback>
}
 8006664:	46c0      	nop			; (mov r8, r8)
 8006666:	46bd      	mov	sp, r7
 8006668:	b004      	add	sp, #16
 800666a:	bd80      	pop	{r7, pc}
 800666c:	ffffbfff 	.word	0xffffbfff
 8006670:	ffff7fff 	.word	0xffff7fff

08006674 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2220      	movs	r2, #32
 8006688:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2241      	movs	r2, #65	; 0x41
 800668e:	5c9b      	ldrb	r3, [r3, r2]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b21      	cmp	r3, #33	; 0x21
 8006694:	d108      	bne.n	80066a8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2101      	movs	r1, #1
 800669a:	0018      	movs	r0, r3
 800669c:	f000 fe7e 	bl	800739c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2211      	movs	r2, #17
 80066a4:	631a      	str	r2, [r3, #48]	; 0x30
 80066a6:	e00d      	b.n	80066c4 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2241      	movs	r2, #65	; 0x41
 80066ac:	5c9b      	ldrb	r3, [r3, r2]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b22      	cmp	r3, #34	; 0x22
 80066b2:	d107      	bne.n	80066c4 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2102      	movs	r1, #2
 80066b8:	0018      	movs	r0, r3
 80066ba:	f000 fe6f 	bl	800739c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2212      	movs	r2, #18
 80066c2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4950      	ldr	r1, [pc, #320]	; (8006810 <I2C_ITMasterCplt+0x19c>)
 80066d0:	400a      	ands	r2, r1
 80066d2:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a4d      	ldr	r2, [pc, #308]	; (8006814 <I2C_ITMasterCplt+0x1a0>)
 80066de:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	091b      	lsrs	r3, r3, #4
 80066e4:	001a      	movs	r2, r3
 80066e6:	2301      	movs	r3, #1
 80066e8:	4013      	ands	r3, r2
 80066ea:	d009      	beq.n	8006700 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2210      	movs	r2, #16
 80066f2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f8:	2204      	movs	r2, #4
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2241      	movs	r2, #65	; 0x41
 8006704:	5c9b      	ldrb	r3, [r3, r2]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b60      	cmp	r3, #96	; 0x60
 800670a:	d10b      	bne.n	8006724 <I2C_ITMasterCplt+0xb0>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	089b      	lsrs	r3, r3, #2
 8006710:	001a      	movs	r2, r3
 8006712:	2301      	movs	r3, #1
 8006714:	4013      	ands	r3, r2
 8006716:	d005      	beq.n	8006724 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	b2db      	uxtb	r3, r3
 8006720:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006722:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	0018      	movs	r0, r3
 8006728:	f000 faff 	bl	8006d2a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006730:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2241      	movs	r2, #65	; 0x41
 8006736:	5c9b      	ldrb	r3, [r3, r2]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b60      	cmp	r3, #96	; 0x60
 800673c:	d002      	beq.n	8006744 <I2C_ITMasterCplt+0xd0>
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	0011      	movs	r1, r2
 800674c:	0018      	movs	r0, r3
 800674e:	f000 f9e1 	bl	8006b14 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006752:	e058      	b.n	8006806 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2241      	movs	r2, #65	; 0x41
 8006758:	5c9b      	ldrb	r3, [r3, r2]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b21      	cmp	r3, #33	; 0x21
 800675e:	d126      	bne.n	80067ae <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2241      	movs	r2, #65	; 0x41
 8006764:	2120      	movs	r1, #32
 8006766:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2242      	movs	r2, #66	; 0x42
 8006772:	5c9b      	ldrb	r3, [r3, r2]
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d10c      	bne.n	8006794 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2242      	movs	r2, #66	; 0x42
 800677e:	2100      	movs	r1, #0
 8006780:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2240      	movs	r2, #64	; 0x40
 8006786:	2100      	movs	r1, #0
 8006788:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	0018      	movs	r0, r3
 800678e:	f7ff f9ad 	bl	8005aec <HAL_I2C_MemTxCpltCallback>
}
 8006792:	e038      	b.n	8006806 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2242      	movs	r2, #66	; 0x42
 8006798:	2100      	movs	r1, #0
 800679a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2240      	movs	r2, #64	; 0x40
 80067a0:	2100      	movs	r1, #0
 80067a2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	0018      	movs	r0, r3
 80067a8:	f7ff f968 	bl	8005a7c <HAL_I2C_MasterTxCpltCallback>
}
 80067ac:	e02b      	b.n	8006806 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2241      	movs	r2, #65	; 0x41
 80067b2:	5c9b      	ldrb	r3, [r3, r2]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b22      	cmp	r3, #34	; 0x22
 80067b8:	d125      	bne.n	8006806 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2241      	movs	r2, #65	; 0x41
 80067be:	2120      	movs	r1, #32
 80067c0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2242      	movs	r2, #66	; 0x42
 80067cc:	5c9b      	ldrb	r3, [r3, r2]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b40      	cmp	r3, #64	; 0x40
 80067d2:	d10c      	bne.n	80067ee <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2242      	movs	r2, #66	; 0x42
 80067d8:	2100      	movs	r1, #0
 80067da:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2240      	movs	r2, #64	; 0x40
 80067e0:	2100      	movs	r1, #0
 80067e2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	0018      	movs	r0, r3
 80067e8:	f7ff f988 	bl	8005afc <HAL_I2C_MemRxCpltCallback>
}
 80067ec:	e00b      	b.n	8006806 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2242      	movs	r2, #66	; 0x42
 80067f2:	2100      	movs	r1, #0
 80067f4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2240      	movs	r2, #64	; 0x40
 80067fa:	2100      	movs	r1, #0
 80067fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	0018      	movs	r0, r3
 8006802:	f7ff f943 	bl	8005a8c <HAL_I2C_MasterRxCpltCallback>
}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	46bd      	mov	sp, r7
 800680a:	b006      	add	sp, #24
 800680c:	bd80      	pop	{r7, pc}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	fe00e800 	.word	0xfe00e800
 8006814:	ffff0000 	.word	0xffff0000

08006818 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800682e:	200f      	movs	r0, #15
 8006830:	183b      	adds	r3, r7, r0
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	2141      	movs	r1, #65	; 0x41
 8006836:	5c52      	ldrb	r2, [r2, r1]
 8006838:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2220      	movs	r2, #32
 8006840:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006842:	183b      	adds	r3, r7, r0
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b21      	cmp	r3, #33	; 0x21
 8006848:	d003      	beq.n	8006852 <I2C_ITSlaveCplt+0x3a>
 800684a:	183b      	adds	r3, r7, r0
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b29      	cmp	r3, #41	; 0x29
 8006850:	d109      	bne.n	8006866 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006852:	4a7d      	ldr	r2, [pc, #500]	; (8006a48 <I2C_ITSlaveCplt+0x230>)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	0011      	movs	r1, r2
 8006858:	0018      	movs	r0, r3
 800685a:	f000 fd9f 	bl	800739c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2221      	movs	r2, #33	; 0x21
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
 8006864:	e011      	b.n	800688a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006866:	220f      	movs	r2, #15
 8006868:	18bb      	adds	r3, r7, r2
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b22      	cmp	r3, #34	; 0x22
 800686e:	d003      	beq.n	8006878 <I2C_ITSlaveCplt+0x60>
 8006870:	18bb      	adds	r3, r7, r2
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b2a      	cmp	r3, #42	; 0x2a
 8006876:	d108      	bne.n	800688a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006878:	4a74      	ldr	r2, [pc, #464]	; (8006a4c <I2C_ITSlaveCplt+0x234>)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	0011      	movs	r1, r2
 800687e:	0018      	movs	r0, r3
 8006880:	f000 fd8c 	bl	800739c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2222      	movs	r2, #34	; 0x22
 8006888:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2180      	movs	r1, #128	; 0x80
 8006896:	0209      	lsls	r1, r1, #8
 8006898:	430a      	orrs	r2, r1
 800689a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	496a      	ldr	r1, [pc, #424]	; (8006a50 <I2C_ITSlaveCplt+0x238>)
 80068a8:	400a      	ands	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	0018      	movs	r0, r3
 80068b0:	f000 fa3b 	bl	8006d2a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	0b9b      	lsrs	r3, r3, #14
 80068b8:	001a      	movs	r2, r3
 80068ba:	2301      	movs	r3, #1
 80068bc:	4013      	ands	r3, r2
 80068be:	d013      	beq.n	80068e8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4962      	ldr	r1, [pc, #392]	; (8006a54 <I2C_ITSlaveCplt+0x23c>)
 80068cc:	400a      	ands	r2, r1
 80068ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d020      	beq.n	800691a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068e6:	e018      	b.n	800691a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	0bdb      	lsrs	r3, r3, #15
 80068ec:	001a      	movs	r2, r3
 80068ee:	2301      	movs	r3, #1
 80068f0:	4013      	ands	r3, r2
 80068f2:	d012      	beq.n	800691a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4956      	ldr	r1, [pc, #344]	; (8006a58 <I2C_ITSlaveCplt+0x240>)
 8006900:	400a      	ands	r2, r1
 8006902:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d006      	beq.n	800691a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	b29a      	uxth	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	089b      	lsrs	r3, r3, #2
 800691e:	001a      	movs	r2, r3
 8006920:	2301      	movs	r3, #1
 8006922:	4013      	ands	r3, r2
 8006924:	d020      	beq.n	8006968 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2204      	movs	r2, #4
 800692a:	4393      	bics	r3, r2
 800692c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006976:	2204      	movs	r2, #4
 8006978:	431a      	orrs	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2242      	movs	r2, #66	; 0x42
 8006982:	2100      	movs	r1, #0
 8006984:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006990:	2b00      	cmp	r3, #0
 8006992:	d013      	beq.n	80069bc <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	0011      	movs	r1, r2
 800699c:	0018      	movs	r0, r3
 800699e:	f000 f8b9 	bl	8006b14 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2241      	movs	r2, #65	; 0x41
 80069a6:	5c9b      	ldrb	r3, [r3, r2]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b28      	cmp	r3, #40	; 0x28
 80069ac:	d147      	bne.n	8006a3e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	0011      	movs	r1, r2
 80069b4:	0018      	movs	r0, r3
 80069b6:	f000 f853 	bl	8006a60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069ba:	e040      	b.n	8006a3e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	4a26      	ldr	r2, [pc, #152]	; (8006a5c <I2C_ITSlaveCplt+0x244>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d016      	beq.n	80069f4 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	0018      	movs	r0, r3
 80069ca:	f7ff fded 	bl	80065a8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a22      	ldr	r2, [pc, #136]	; (8006a5c <I2C_ITSlaveCplt+0x244>)
 80069d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2241      	movs	r2, #65	; 0x41
 80069d8:	2120      	movs	r1, #32
 80069da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2240      	movs	r2, #64	; 0x40
 80069e6:	2100      	movs	r1, #0
 80069e8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	0018      	movs	r0, r3
 80069ee:	f7ff f875 	bl	8005adc <HAL_I2C_ListenCpltCallback>
}
 80069f2:	e024      	b.n	8006a3e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2241      	movs	r2, #65	; 0x41
 80069f8:	5c9b      	ldrb	r3, [r3, r2]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b22      	cmp	r3, #34	; 0x22
 80069fe:	d10f      	bne.n	8006a20 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2241      	movs	r2, #65	; 0x41
 8006a04:	2120      	movs	r1, #32
 8006a06:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2240      	movs	r2, #64	; 0x40
 8006a12:	2100      	movs	r1, #0
 8006a14:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f7ff f847 	bl	8005aac <HAL_I2C_SlaveRxCpltCallback>
}
 8006a1e:	e00e      	b.n	8006a3e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2241      	movs	r2, #65	; 0x41
 8006a24:	2120      	movs	r1, #32
 8006a26:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2240      	movs	r2, #64	; 0x40
 8006a32:	2100      	movs	r1, #0
 8006a34:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f7ff f82f 	bl	8005a9c <HAL_I2C_SlaveTxCpltCallback>
}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b006      	add	sp, #24
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	00008001 	.word	0x00008001
 8006a4c:	00008002 	.word	0x00008002
 8006a50:	fe00e800 	.word	0xfe00e800
 8006a54:	ffffbfff 	.word	0xffffbfff
 8006a58:	ffff7fff 	.word	0xffff7fff
 8006a5c:	ffff0000 	.word	0xffff0000

08006a60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a27      	ldr	r2, [pc, #156]	; (8006b0c <I2C_ITListenCplt+0xac>)
 8006a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2241      	movs	r2, #65	; 0x41
 8006a7a:	2120      	movs	r1, #32
 8006a7c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2242      	movs	r2, #66	; 0x42
 8006a82:	2100      	movs	r1, #0
 8006a84:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	089b      	lsrs	r3, r3, #2
 8006a90:	001a      	movs	r2, r3
 8006a92:	2301      	movs	r3, #1
 8006a94:	4013      	ands	r3, r2
 8006a96:	d022      	beq.n	8006ade <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d012      	beq.n	8006ade <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006abc:	3b01      	subs	r3, #1
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	2204      	movs	r2, #4
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ade:	4a0c      	ldr	r2, [pc, #48]	; (8006b10 <I2C_ITListenCplt+0xb0>)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	0011      	movs	r1, r2
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f000 fc59 	bl	800739c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2210      	movs	r2, #16
 8006af0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2240      	movs	r2, #64	; 0x40
 8006af6:	2100      	movs	r1, #0
 8006af8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	0018      	movs	r0, r3
 8006afe:	f7fe ffed 	bl	8005adc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	46bd      	mov	sp, r7
 8006b06:	b002      	add	sp, #8
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	46c0      	nop			; (mov r8, r8)
 8006b0c:	ffff0000 	.word	0xffff0000
 8006b10:	00008003 	.word	0x00008003

08006b14 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006b1e:	200f      	movs	r0, #15
 8006b20:	183b      	adds	r3, r7, r0
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	2141      	movs	r1, #65	; 0x41
 8006b26:	5c52      	ldrb	r2, [r2, r1]
 8006b28:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2242      	movs	r2, #66	; 0x42
 8006b2e:	2100      	movs	r1, #0
 8006b30:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a62      	ldr	r2, [pc, #392]	; (8006cc0 <I2C_ITError+0x1ac>)
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006b4a:	183b      	adds	r3, r7, r0
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b28      	cmp	r3, #40	; 0x28
 8006b50:	d007      	beq.n	8006b62 <I2C_ITError+0x4e>
 8006b52:	183b      	adds	r3, r7, r0
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b29      	cmp	r3, #41	; 0x29
 8006b58:	d003      	beq.n	8006b62 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006b5a:	183b      	adds	r3, r7, r0
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b60:	d10c      	bne.n	8006b7c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2103      	movs	r1, #3
 8006b66:	0018      	movs	r0, r3
 8006b68:	f000 fc18 	bl	800739c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2241      	movs	r2, #65	; 0x41
 8006b70:	2128      	movs	r1, #40	; 0x28
 8006b72:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a53      	ldr	r2, [pc, #332]	; (8006cc4 <I2C_ITError+0x1b0>)
 8006b78:	635a      	str	r2, [r3, #52]	; 0x34
 8006b7a:	e012      	b.n	8006ba2 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006b7c:	4a52      	ldr	r2, [pc, #328]	; (8006cc8 <I2C_ITError+0x1b4>)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	0011      	movs	r1, r2
 8006b82:	0018      	movs	r0, r3
 8006b84:	f000 fc0a 	bl	800739c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2241      	movs	r2, #65	; 0x41
 8006b8c:	5c9b      	ldrb	r3, [r3, r2]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b60      	cmp	r3, #96	; 0x60
 8006b92:	d003      	beq.n	8006b9c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2241      	movs	r2, #65	; 0x41
 8006b98:	2120      	movs	r1, #32
 8006b9a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d03b      	beq.n	8006c28 <I2C_ITError+0x114>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b11      	cmp	r3, #17
 8006bb4:	d002      	beq.n	8006bbc <I2C_ITError+0xa8>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b21      	cmp	r3, #33	; 0x21
 8006bba:	d135      	bne.n	8006c28 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	2380      	movs	r3, #128	; 0x80
 8006bc4:	01db      	lsls	r3, r3, #7
 8006bc6:	401a      	ands	r2, r3
 8006bc8:	2380      	movs	r3, #128	; 0x80
 8006bca:	01db      	lsls	r3, r3, #7
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d107      	bne.n	8006be0 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	493c      	ldr	r1, [pc, #240]	; (8006ccc <I2C_ITError+0x1b8>)
 8006bdc:	400a      	ands	r2, r1
 8006bde:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	0018      	movs	r0, r3
 8006be6:	f7fe f857 	bl	8004c98 <HAL_DMA_GetState>
 8006bea:	0003      	movs	r3, r0
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d016      	beq.n	8006c1e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	4a36      	ldr	r2, [pc, #216]	; (8006cd0 <I2C_ITError+0x1bc>)
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2240      	movs	r2, #64	; 0x40
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	0018      	movs	r0, r3
 8006c06:	f7fd ff1b 	bl	8004a40 <HAL_DMA_Abort_IT>
 8006c0a:	1e03      	subs	r3, r0, #0
 8006c0c:	d051      	beq.n	8006cb2 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	0018      	movs	r0, r3
 8006c1a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c1c:	e049      	b.n	8006cb2 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	0018      	movs	r0, r3
 8006c22:	f000 f859 	bl	8006cd8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c26:	e044      	b.n	8006cb2 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d03b      	beq.n	8006ca8 <I2C_ITError+0x194>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b12      	cmp	r3, #18
 8006c34:	d002      	beq.n	8006c3c <I2C_ITError+0x128>
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b22      	cmp	r3, #34	; 0x22
 8006c3a:	d135      	bne.n	8006ca8 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	2380      	movs	r3, #128	; 0x80
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	401a      	ands	r2, r3
 8006c48:	2380      	movs	r3, #128	; 0x80
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d107      	bne.n	8006c60 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	491e      	ldr	r1, [pc, #120]	; (8006cd4 <I2C_ITError+0x1c0>)
 8006c5c:	400a      	ands	r2, r1
 8006c5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c64:	0018      	movs	r0, r3
 8006c66:	f7fe f817 	bl	8004c98 <HAL_DMA_GetState>
 8006c6a:	0003      	movs	r3, r0
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d016      	beq.n	8006c9e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c74:	4a16      	ldr	r2, [pc, #88]	; (8006cd0 <I2C_ITError+0x1bc>)
 8006c76:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2240      	movs	r2, #64	; 0x40
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c84:	0018      	movs	r0, r3
 8006c86:	f7fd fedb 	bl	8004a40 <HAL_DMA_Abort_IT>
 8006c8a:	1e03      	subs	r3, r0, #0
 8006c8c:	d013      	beq.n	8006cb6 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c98:	0018      	movs	r0, r3
 8006c9a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c9c:	e00b      	b.n	8006cb6 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	f000 f819 	bl	8006cd8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ca6:	e006      	b.n	8006cb6 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	0018      	movs	r0, r3
 8006cac:	f000 f814 	bl	8006cd8 <I2C_TreatErrorCallback>
  }
}
 8006cb0:	e002      	b.n	8006cb8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cb2:	46c0      	nop			; (mov r8, r8)
 8006cb4:	e000      	b.n	8006cb8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cb6:	46c0      	nop			; (mov r8, r8)
}
 8006cb8:	46c0      	nop			; (mov r8, r8)
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b004      	add	sp, #16
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	ffff0000 	.word	0xffff0000
 8006cc4:	08005db1 	.word	0x08005db1
 8006cc8:	00008003 	.word	0x00008003
 8006ccc:	ffffbfff 	.word	0xffffbfff
 8006cd0:	08006ee3 	.word	0x08006ee3
 8006cd4:	ffff7fff 	.word	0xffff7fff

08006cd8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2241      	movs	r2, #65	; 0x41
 8006ce4:	5c9b      	ldrb	r3, [r3, r2]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b60      	cmp	r3, #96	; 0x60
 8006cea:	d10f      	bne.n	8006d0c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2241      	movs	r2, #65	; 0x41
 8006cf0:	2120      	movs	r1, #32
 8006cf2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2240      	movs	r2, #64	; 0x40
 8006cfe:	2100      	movs	r1, #0
 8006d00:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	0018      	movs	r0, r3
 8006d06:	f7fe ff09 	bl	8005b1c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d0a:	e00a      	b.n	8006d22 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2240      	movs	r2, #64	; 0x40
 8006d16:	2100      	movs	r1, #0
 8006d18:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f7fe fef5 	bl	8005b0c <HAL_I2C_ErrorCallback>
}
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	46bd      	mov	sp, r7
 8006d26:	b002      	add	sp, #8
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d103      	bne.n	8006d48 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2200      	movs	r2, #0
 8006d46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	4013      	ands	r3, r2
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d007      	beq.n	8006d66 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699a      	ldr	r2, [r3, #24]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2101      	movs	r1, #1
 8006d62:	430a      	orrs	r2, r1
 8006d64:	619a      	str	r2, [r3, #24]
  }
}
 8006d66:	46c0      	nop			; (mov r8, r8)
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	b002      	add	sp, #8
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4920      	ldr	r1, [pc, #128]	; (8006e0c <I2C_DMAMasterTransmitCplt+0x9c>)
 8006d8a:	400a      	ands	r2, r1
 8006d8c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d105      	bne.n	8006da4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2120      	movs	r1, #32
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f000 fa95 	bl	80072cc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006da2:	e02e      	b.n	8006e02 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006dac:	189a      	adds	r2, r3, r2
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	2bff      	cmp	r3, #255	; 0xff
 8006dba:	d903      	bls.n	8006dc4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	22ff      	movs	r2, #255	; 0xff
 8006dc0:	851a      	strh	r2, [r3, #40]	; 0x28
 8006dc2:	e004      	b.n	8006dce <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	0019      	movs	r1, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3328      	adds	r3, #40	; 0x28
 8006dde:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006de4:	f7fd fda6 	bl	8004934 <HAL_DMA_Start_IT>
 8006de8:	1e03      	subs	r3, r0, #0
 8006dea:	d005      	beq.n	8006df8 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2110      	movs	r1, #16
 8006df0:	0018      	movs	r0, r3
 8006df2:	f7ff fe8f 	bl	8006b14 <I2C_ITError>
}
 8006df6:	e004      	b.n	8006e02 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2140      	movs	r1, #64	; 0x40
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f000 fa65 	bl	80072cc <I2C_Enable_IRQ>
}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	46bd      	mov	sp, r7
 8006e06:	b004      	add	sp, #16
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	46c0      	nop			; (mov r8, r8)
 8006e0c:	ffffbfff 	.word	0xffffbfff

08006e10 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4920      	ldr	r1, [pc, #128]	; (8006eac <I2C_DMAMasterReceiveCplt+0x9c>)
 8006e2a:	400a      	ands	r2, r1
 8006e2c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d105      	bne.n	8006e44 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2120      	movs	r1, #32
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f000 fa45 	bl	80072cc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006e42:	e02e      	b.n	8006ea2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006e4c:	189a      	adds	r2, r3, r2
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2bff      	cmp	r3, #255	; 0xff
 8006e5a:	d903      	bls.n	8006e64 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	22ff      	movs	r2, #255	; 0xff
 8006e60:	851a      	strh	r2, [r3, #40]	; 0x28
 8006e62:	e004      	b.n	8006e6e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3324      	adds	r3, #36	; 0x24
 8006e78:	0019      	movs	r1, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006e84:	f7fd fd56 	bl	8004934 <HAL_DMA_Start_IT>
 8006e88:	1e03      	subs	r3, r0, #0
 8006e8a:	d005      	beq.n	8006e98 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2110      	movs	r1, #16
 8006e90:	0018      	movs	r0, r3
 8006e92:	f7ff fe3f 	bl	8006b14 <I2C_ITError>
}
 8006e96:	e004      	b.n	8006ea2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2140      	movs	r1, #64	; 0x40
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f000 fa15 	bl	80072cc <I2C_Enable_IRQ>
}
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	b004      	add	sp, #16
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	ffff7fff 	.word	0xffff7fff

08006eb0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2180      	movs	r1, #128	; 0x80
 8006eca:	0209      	lsls	r1, r1, #8
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2110      	movs	r1, #16
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f7ff fe1d 	bl	8006b14 <I2C_ITError>
}
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	46bd      	mov	sp, r7
 8006ede:	b004      	add	sp, #16
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	2200      	movs	r2, #0
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	0018      	movs	r0, r3
 8006f14:	f7ff fee0 	bl	8006cd8 <I2C_TreatErrorCallback>
}
 8006f18:	46c0      	nop			; (mov r8, r8)
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	b004      	add	sp, #16
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	1dfb      	adds	r3, r7, #7
 8006f2e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f30:	e021      	b.n	8006f76 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	d01e      	beq.n	8006f76 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f38:	f7fc fe32 	bl	8003ba0 <HAL_GetTick>
 8006f3c:	0002      	movs	r2, r0
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d302      	bcc.n	8006f4e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d113      	bne.n	8006f76 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f52:	2220      	movs	r2, #32
 8006f54:	431a      	orrs	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2241      	movs	r2, #65	; 0x41
 8006f5e:	2120      	movs	r1, #32
 8006f60:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2242      	movs	r2, #66	; 0x42
 8006f66:	2100      	movs	r1, #0
 8006f68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2240      	movs	r2, #64	; 0x40
 8006f6e:	2100      	movs	r1, #0
 8006f70:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e00f      	b.n	8006f96 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	425a      	negs	r2, r3
 8006f86:	4153      	adcs	r3, r2
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	001a      	movs	r2, r3
 8006f8c:	1dfb      	adds	r3, r7, #7
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d0ce      	beq.n	8006f32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	0018      	movs	r0, r3
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	b004      	add	sp, #16
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006faa:	e02b      	b.n	8007004 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	f000 f8da 	bl	800716c <I2C_IsAcknowledgeFailed>
 8006fb8:	1e03      	subs	r3, r0, #0
 8006fba:	d001      	beq.n	8006fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e029      	b.n	8007014 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	d01e      	beq.n	8007004 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc6:	f7fc fdeb 	bl	8003ba0 <HAL_GetTick>
 8006fca:	0002      	movs	r2, r0
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d302      	bcc.n	8006fdc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d113      	bne.n	8007004 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2241      	movs	r2, #65	; 0x41
 8006fec:	2120      	movs	r1, #32
 8006fee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2242      	movs	r2, #66	; 0x42
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2240      	movs	r2, #64	; 0x40
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e007      	b.n	8007014 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	2202      	movs	r2, #2
 800700c:	4013      	ands	r3, r2
 800700e:	2b02      	cmp	r3, #2
 8007010:	d1cc      	bne.n	8006fac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	0018      	movs	r0, r3
 8007016:	46bd      	mov	sp, r7
 8007018:	b004      	add	sp, #16
 800701a:	bd80      	pop	{r7, pc}

0800701c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007028:	e028      	b.n	800707c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	0018      	movs	r0, r3
 8007032:	f000 f89b 	bl	800716c <I2C_IsAcknowledgeFailed>
 8007036:	1e03      	subs	r3, r0, #0
 8007038:	d001      	beq.n	800703e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e026      	b.n	800708c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800703e:	f7fc fdaf 	bl	8003ba0 <HAL_GetTick>
 8007042:	0002      	movs	r2, r0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	429a      	cmp	r2, r3
 800704c:	d302      	bcc.n	8007054 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d113      	bne.n	800707c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007058:	2220      	movs	r2, #32
 800705a:	431a      	orrs	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2241      	movs	r2, #65	; 0x41
 8007064:	2120      	movs	r1, #32
 8007066:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2242      	movs	r2, #66	; 0x42
 800706c:	2100      	movs	r1, #0
 800706e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2240      	movs	r2, #64	; 0x40
 8007074:	2100      	movs	r1, #0
 8007076:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e007      	b.n	800708c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	2220      	movs	r2, #32
 8007084:	4013      	ands	r3, r2
 8007086:	2b20      	cmp	r3, #32
 8007088:	d1cf      	bne.n	800702a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	0018      	movs	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	b004      	add	sp, #16
 8007092:	bd80      	pop	{r7, pc}

08007094 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070a0:	e055      	b.n	800714e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	68b9      	ldr	r1, [r7, #8]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	0018      	movs	r0, r3
 80070aa:	f000 f85f 	bl	800716c <I2C_IsAcknowledgeFailed>
 80070ae:	1e03      	subs	r3, r0, #0
 80070b0:	d001      	beq.n	80070b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e053      	b.n	800715e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	2220      	movs	r2, #32
 80070be:	4013      	ands	r3, r2
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d129      	bne.n	8007118 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	2204      	movs	r2, #4
 80070cc:	4013      	ands	r3, r2
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d105      	bne.n	80070de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	e03f      	b.n	800715e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2220      	movs	r2, #32
 80070e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	491d      	ldr	r1, [pc, #116]	; (8007168 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80070f2:	400a      	ands	r2, r1
 80070f4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2241      	movs	r2, #65	; 0x41
 8007100:	2120      	movs	r1, #32
 8007102:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2242      	movs	r2, #66	; 0x42
 8007108:	2100      	movs	r1, #0
 800710a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2240      	movs	r2, #64	; 0x40
 8007110:	2100      	movs	r1, #0
 8007112:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e022      	b.n	800715e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007118:	f7fc fd42 	bl	8003ba0 <HAL_GetTick>
 800711c:	0002      	movs	r2, r0
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	429a      	cmp	r2, r3
 8007126:	d302      	bcc.n	800712e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10f      	bne.n	800714e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	2220      	movs	r2, #32
 8007134:	431a      	orrs	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2241      	movs	r2, #65	; 0x41
 800713e:	2120      	movs	r1, #32
 8007140:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2240      	movs	r2, #64	; 0x40
 8007146:	2100      	movs	r1, #0
 8007148:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e007      	b.n	800715e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	2204      	movs	r2, #4
 8007156:	4013      	ands	r3, r2
 8007158:	2b04      	cmp	r3, #4
 800715a:	d1a2      	bne.n	80070a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	0018      	movs	r0, r3
 8007160:	46bd      	mov	sp, r7
 8007162:	b004      	add	sp, #16
 8007164:	bd80      	pop	{r7, pc}
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	fe00e800 	.word	0xfe00e800

0800716c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	2210      	movs	r2, #16
 8007180:	4013      	ands	r3, r2
 8007182:	2b10      	cmp	r3, #16
 8007184:	d164      	bne.n	8007250 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	2380      	movs	r3, #128	; 0x80
 800718e:	049b      	lsls	r3, r3, #18
 8007190:	401a      	ands	r2, r3
 8007192:	2380      	movs	r3, #128	; 0x80
 8007194:	049b      	lsls	r3, r3, #18
 8007196:	429a      	cmp	r2, r3
 8007198:	d02b      	beq.n	80071f2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2180      	movs	r1, #128	; 0x80
 80071a6:	01c9      	lsls	r1, r1, #7
 80071a8:	430a      	orrs	r2, r1
 80071aa:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071ac:	e021      	b.n	80071f2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	3301      	adds	r3, #1
 80071b2:	d01e      	beq.n	80071f2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b4:	f7fc fcf4 	bl	8003ba0 <HAL_GetTick>
 80071b8:	0002      	movs	r2, r0
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d302      	bcc.n	80071ca <I2C_IsAcknowledgeFailed+0x5e>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d113      	bne.n	80071f2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ce:	2220      	movs	r2, #32
 80071d0:	431a      	orrs	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2241      	movs	r2, #65	; 0x41
 80071da:	2120      	movs	r1, #32
 80071dc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2242      	movs	r2, #66	; 0x42
 80071e2:	2100      	movs	r1, #0
 80071e4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2240      	movs	r2, #64	; 0x40
 80071ea:	2100      	movs	r1, #0
 80071ec:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e02f      	b.n	8007252 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	2220      	movs	r2, #32
 80071fa:	4013      	ands	r3, r2
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d1d6      	bne.n	80071ae <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2210      	movs	r2, #16
 8007206:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2220      	movs	r2, #32
 800720e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	0018      	movs	r0, r3
 8007214:	f7ff fd89 	bl	8006d2a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	490e      	ldr	r1, [pc, #56]	; (800725c <I2C_IsAcknowledgeFailed+0xf0>)
 8007224:	400a      	ands	r2, r1
 8007226:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722c:	2204      	movs	r2, #4
 800722e:	431a      	orrs	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2241      	movs	r2, #65	; 0x41
 8007238:	2120      	movs	r1, #32
 800723a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2242      	movs	r2, #66	; 0x42
 8007240:	2100      	movs	r1, #0
 8007242:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2240      	movs	r2, #64	; 0x40
 8007248:	2100      	movs	r1, #0
 800724a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e000      	b.n	8007252 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	0018      	movs	r0, r3
 8007254:	46bd      	mov	sp, r7
 8007256:	b004      	add	sp, #16
 8007258:	bd80      	pop	{r7, pc}
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	fe00e800 	.word	0xfe00e800

08007260 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007260:	b590      	push	{r4, r7, lr}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	0008      	movs	r0, r1
 800726a:	0011      	movs	r1, r2
 800726c:	607b      	str	r3, [r7, #4]
 800726e:	240a      	movs	r4, #10
 8007270:	193b      	adds	r3, r7, r4
 8007272:	1c02      	adds	r2, r0, #0
 8007274:	801a      	strh	r2, [r3, #0]
 8007276:	2009      	movs	r0, #9
 8007278:	183b      	adds	r3, r7, r0
 800727a:	1c0a      	adds	r2, r1, #0
 800727c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	6a3a      	ldr	r2, [r7, #32]
 8007286:	0d51      	lsrs	r1, r2, #21
 8007288:	2280      	movs	r2, #128	; 0x80
 800728a:	00d2      	lsls	r2, r2, #3
 800728c:	400a      	ands	r2, r1
 800728e:	490e      	ldr	r1, [pc, #56]	; (80072c8 <I2C_TransferConfig+0x68>)
 8007290:	430a      	orrs	r2, r1
 8007292:	43d2      	mvns	r2, r2
 8007294:	401a      	ands	r2, r3
 8007296:	0011      	movs	r1, r2
 8007298:	193b      	adds	r3, r7, r4
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	059b      	lsls	r3, r3, #22
 800729e:	0d9a      	lsrs	r2, r3, #22
 80072a0:	183b      	adds	r3, r7, r0
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	0418      	lsls	r0, r3, #16
 80072a6:	23ff      	movs	r3, #255	; 0xff
 80072a8:	041b      	lsls	r3, r3, #16
 80072aa:	4003      	ands	r3, r0
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	431a      	orrs	r2, r3
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	431a      	orrs	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80072be:	46c0      	nop			; (mov r8, r8)
 80072c0:	46bd      	mov	sp, r7
 80072c2:	b005      	add	sp, #20
 80072c4:	bd90      	pop	{r4, r7, pc}
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	03ff63ff 	.word	0x03ff63ff

080072cc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	000a      	movs	r2, r1
 80072d6:	1cbb      	adds	r3, r7, #2
 80072d8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e2:	4b2c      	ldr	r3, [pc, #176]	; (8007394 <I2C_Enable_IRQ+0xc8>)
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d004      	beq.n	80072f2 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80072ec:	4b2a      	ldr	r3, [pc, #168]	; (8007398 <I2C_Enable_IRQ+0xcc>)
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d121      	bne.n	8007336 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80072f2:	1cbb      	adds	r3, r7, #2
 80072f4:	2200      	movs	r2, #0
 80072f6:	5e9b      	ldrsh	r3, [r3, r2]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	da03      	bge.n	8007304 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	22b8      	movs	r2, #184	; 0xb8
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007304:	1cbb      	adds	r3, r7, #2
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	2b10      	cmp	r3, #16
 800730a:	d103      	bne.n	8007314 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2290      	movs	r2, #144	; 0x90
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007314:	1cbb      	adds	r3, r7, #2
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	2b20      	cmp	r3, #32
 800731a:	d103      	bne.n	8007324 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2260      	movs	r2, #96	; 0x60
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007324:	1cbb      	adds	r3, r7, #2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	2b40      	cmp	r3, #64	; 0x40
 800732a:	d127      	bne.n	800737c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2240      	movs	r2, #64	; 0x40
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007334:	e022      	b.n	800737c <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007336:	1cbb      	adds	r3, r7, #2
 8007338:	2200      	movs	r2, #0
 800733a:	5e9b      	ldrsh	r3, [r3, r2]
 800733c:	2b00      	cmp	r3, #0
 800733e:	da03      	bge.n	8007348 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	22b8      	movs	r2, #184	; 0xb8
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007348:	1cbb      	adds	r3, r7, #2
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	2201      	movs	r2, #1
 800734e:	4013      	ands	r3, r2
 8007350:	d003      	beq.n	800735a <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	22f2      	movs	r2, #242	; 0xf2
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800735a:	1cbb      	adds	r3, r7, #2
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	2202      	movs	r2, #2
 8007360:	4013      	ands	r3, r2
 8007362:	d003      	beq.n	800736c <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	22f4      	movs	r2, #244	; 0xf4
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800736c:	1cbb      	adds	r3, r7, #2
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	2b20      	cmp	r3, #32
 8007372:	d103      	bne.n	800737c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2220      	movs	r2, #32
 8007378:	4313      	orrs	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6819      	ldr	r1, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	430a      	orrs	r2, r1
 800738a:	601a      	str	r2, [r3, #0]
}
 800738c:	46c0      	nop			; (mov r8, r8)
 800738e:	46bd      	mov	sp, r7
 8007390:	b004      	add	sp, #16
 8007392:	bd80      	pop	{r7, pc}
 8007394:	08005fd9 	.word	0x08005fd9
 8007398:	080061f1 	.word	0x080061f1

0800739c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	000a      	movs	r2, r1
 80073a6:	1cbb      	adds	r3, r7, #2
 80073a8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80073ae:	1cbb      	adds	r3, r7, #2
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	2201      	movs	r2, #1
 80073b4:	4013      	ands	r3, r2
 80073b6:	d010      	beq.n	80073da <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2242      	movs	r2, #66	; 0x42
 80073bc:	4313      	orrs	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2241      	movs	r2, #65	; 0x41
 80073c4:	5c9b      	ldrb	r3, [r3, r2]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	001a      	movs	r2, r3
 80073ca:	2328      	movs	r3, #40	; 0x28
 80073cc:	4013      	ands	r3, r2
 80073ce:	2b28      	cmp	r3, #40	; 0x28
 80073d0:	d003      	beq.n	80073da <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	22b0      	movs	r2, #176	; 0xb0
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80073da:	1cbb      	adds	r3, r7, #2
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	2202      	movs	r2, #2
 80073e0:	4013      	ands	r3, r2
 80073e2:	d010      	beq.n	8007406 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2244      	movs	r2, #68	; 0x44
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2241      	movs	r2, #65	; 0x41
 80073f0:	5c9b      	ldrb	r3, [r3, r2]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	001a      	movs	r2, r3
 80073f6:	2328      	movs	r3, #40	; 0x28
 80073f8:	4013      	ands	r3, r2
 80073fa:	2b28      	cmp	r3, #40	; 0x28
 80073fc:	d003      	beq.n	8007406 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	22b0      	movs	r2, #176	; 0xb0
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007406:	1cbb      	adds	r3, r7, #2
 8007408:	2200      	movs	r2, #0
 800740a:	5e9b      	ldrsh	r3, [r3, r2]
 800740c:	2b00      	cmp	r3, #0
 800740e:	da03      	bge.n	8007418 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	22b8      	movs	r2, #184	; 0xb8
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007418:	1cbb      	adds	r3, r7, #2
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	2b10      	cmp	r3, #16
 800741e:	d103      	bne.n	8007428 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2290      	movs	r2, #144	; 0x90
 8007424:	4313      	orrs	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007428:	1cbb      	adds	r3, r7, #2
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	2b20      	cmp	r3, #32
 800742e:	d103      	bne.n	8007438 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2220      	movs	r2, #32
 8007434:	4313      	orrs	r3, r2
 8007436:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007438:	1cbb      	adds	r3, r7, #2
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	d103      	bne.n	8007448 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2240      	movs	r2, #64	; 0x40
 8007444:	4313      	orrs	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	43d9      	mvns	r1, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	400a      	ands	r2, r1
 8007458:	601a      	str	r2, [r3, #0]
}
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	46bd      	mov	sp, r7
 800745e:	b004      	add	sp, #16
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2241      	movs	r2, #65	; 0x41
 8007472:	5c9b      	ldrb	r3, [r3, r2]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b20      	cmp	r3, #32
 8007478:	d138      	bne.n	80074ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2240      	movs	r2, #64	; 0x40
 800747e:	5c9b      	ldrb	r3, [r3, r2]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007484:	2302      	movs	r3, #2
 8007486:	e032      	b.n	80074ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2240      	movs	r2, #64	; 0x40
 800748c:	2101      	movs	r1, #1
 800748e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2241      	movs	r2, #65	; 0x41
 8007494:	2124      	movs	r1, #36	; 0x24
 8007496:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2101      	movs	r1, #1
 80074a4:	438a      	bics	r2, r1
 80074a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4911      	ldr	r1, [pc, #68]	; (80074f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80074b4:	400a      	ands	r2, r1
 80074b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6819      	ldr	r1, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2101      	movs	r1, #1
 80074d4:	430a      	orrs	r2, r1
 80074d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2241      	movs	r2, #65	; 0x41
 80074dc:	2120      	movs	r1, #32
 80074de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2240      	movs	r2, #64	; 0x40
 80074e4:	2100      	movs	r1, #0
 80074e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	e000      	b.n	80074ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074ec:	2302      	movs	r3, #2
  }
}
 80074ee:	0018      	movs	r0, r3
 80074f0:	46bd      	mov	sp, r7
 80074f2:	b002      	add	sp, #8
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	ffffefff 	.word	0xffffefff

080074fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2241      	movs	r2, #65	; 0x41
 800750a:	5c9b      	ldrb	r3, [r3, r2]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b20      	cmp	r3, #32
 8007510:	d139      	bne.n	8007586 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2240      	movs	r2, #64	; 0x40
 8007516:	5c9b      	ldrb	r3, [r3, r2]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d101      	bne.n	8007520 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800751c:	2302      	movs	r3, #2
 800751e:	e033      	b.n	8007588 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2240      	movs	r2, #64	; 0x40
 8007524:	2101      	movs	r1, #1
 8007526:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2241      	movs	r2, #65	; 0x41
 800752c:	2124      	movs	r1, #36	; 0x24
 800752e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2101      	movs	r1, #1
 800753c:	438a      	bics	r2, r1
 800753e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4a11      	ldr	r2, [pc, #68]	; (8007590 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800754c:	4013      	ands	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	021b      	lsls	r3, r3, #8
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2101      	movs	r1, #1
 800756e:	430a      	orrs	r2, r1
 8007570:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2241      	movs	r2, #65	; 0x41
 8007576:	2120      	movs	r1, #32
 8007578:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2240      	movs	r2, #64	; 0x40
 800757e:	2100      	movs	r1, #0
 8007580:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	e000      	b.n	8007588 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007586:	2302      	movs	r3, #2
  }
}
 8007588:	0018      	movs	r0, r3
 800758a:	46bd      	mov	sp, r7
 800758c:	b004      	add	sp, #16
 800758e:	bd80      	pop	{r7, pc}
 8007590:	fffff0ff 	.word	0xfffff0ff

08007594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800759c:	4b19      	ldr	r3, [pc, #100]	; (8007604 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a19      	ldr	r2, [pc, #100]	; (8007608 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80075a2:	4013      	ands	r3, r2
 80075a4:	0019      	movs	r1, r3
 80075a6:	4b17      	ldr	r3, [pc, #92]	; (8007604 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	2380      	movs	r3, #128	; 0x80
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d11f      	bne.n	80075f8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80075b8:	4b14      	ldr	r3, [pc, #80]	; (800760c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	0013      	movs	r3, r2
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	189b      	adds	r3, r3, r2
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	4912      	ldr	r1, [pc, #72]	; (8007610 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80075c6:	0018      	movs	r0, r3
 80075c8:	f7f8 fdb8 	bl	800013c <__udivsi3>
 80075cc:	0003      	movs	r3, r0
 80075ce:	3301      	adds	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075d2:	e008      	b.n	80075e6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3b01      	subs	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	e001      	b.n	80075e6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e009      	b.n	80075fa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075e6:	4b07      	ldr	r3, [pc, #28]	; (8007604 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80075e8:	695a      	ldr	r2, [r3, #20]
 80075ea:	2380      	movs	r3, #128	; 0x80
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	401a      	ands	r2, r3
 80075f0:	2380      	movs	r3, #128	; 0x80
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d0ed      	beq.n	80075d4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	0018      	movs	r0, r3
 80075fc:	46bd      	mov	sp, r7
 80075fe:	b004      	add	sp, #16
 8007600:	bd80      	pop	{r7, pc}
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	40007000 	.word	0x40007000
 8007608:	fffff9ff 	.word	0xfffff9ff
 800760c:	20000000 	.word	0x20000000
 8007610:	000f4240 	.word	0x000f4240

08007614 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007618:	4b03      	ldr	r3, [pc, #12]	; (8007628 <LL_RCC_GetAPB1Prescaler+0x14>)
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	23e0      	movs	r3, #224	; 0xe0
 800761e:	01db      	lsls	r3, r3, #7
 8007620:	4013      	ands	r3, r2
}
 8007622:	0018      	movs	r0, r3
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40021000 	.word	0x40021000

0800762c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d102      	bne.n	8007640 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	f000 fb56 	bl	8007cec <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2201      	movs	r2, #1
 8007646:	4013      	ands	r3, r2
 8007648:	d100      	bne.n	800764c <HAL_RCC_OscConfig+0x20>
 800764a:	e07d      	b.n	8007748 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800764c:	4bc3      	ldr	r3, [pc, #780]	; (800795c <HAL_RCC_OscConfig+0x330>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2238      	movs	r2, #56	; 0x38
 8007652:	4013      	ands	r3, r2
 8007654:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007656:	4bc1      	ldr	r3, [pc, #772]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	2203      	movs	r2, #3
 800765c:	4013      	ands	r3, r2
 800765e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2b10      	cmp	r3, #16
 8007664:	d102      	bne.n	800766c <HAL_RCC_OscConfig+0x40>
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b03      	cmp	r3, #3
 800766a:	d002      	beq.n	8007672 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	2b08      	cmp	r3, #8
 8007670:	d10c      	bne.n	800768c <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007672:	4bba      	ldr	r3, [pc, #744]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	2380      	movs	r3, #128	; 0x80
 8007678:	029b      	lsls	r3, r3, #10
 800767a:	4013      	ands	r3, r2
 800767c:	d063      	beq.n	8007746 <HAL_RCC_OscConfig+0x11a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d15f      	bne.n	8007746 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	f000 fb30 	bl	8007cec <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	2380      	movs	r3, #128	; 0x80
 8007692:	025b      	lsls	r3, r3, #9
 8007694:	429a      	cmp	r2, r3
 8007696:	d107      	bne.n	80076a8 <HAL_RCC_OscConfig+0x7c>
 8007698:	4bb0      	ldr	r3, [pc, #704]	; (800795c <HAL_RCC_OscConfig+0x330>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	4baf      	ldr	r3, [pc, #700]	; (800795c <HAL_RCC_OscConfig+0x330>)
 800769e:	2180      	movs	r1, #128	; 0x80
 80076a0:	0249      	lsls	r1, r1, #9
 80076a2:	430a      	orrs	r2, r1
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	e020      	b.n	80076ea <HAL_RCC_OscConfig+0xbe>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	23a0      	movs	r3, #160	; 0xa0
 80076ae:	02db      	lsls	r3, r3, #11
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d10e      	bne.n	80076d2 <HAL_RCC_OscConfig+0xa6>
 80076b4:	4ba9      	ldr	r3, [pc, #676]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	4ba8      	ldr	r3, [pc, #672]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80076ba:	2180      	movs	r1, #128	; 0x80
 80076bc:	02c9      	lsls	r1, r1, #11
 80076be:	430a      	orrs	r2, r1
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	4ba6      	ldr	r3, [pc, #664]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	4ba5      	ldr	r3, [pc, #660]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80076c8:	2180      	movs	r1, #128	; 0x80
 80076ca:	0249      	lsls	r1, r1, #9
 80076cc:	430a      	orrs	r2, r1
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	e00b      	b.n	80076ea <HAL_RCC_OscConfig+0xbe>
 80076d2:	4ba2      	ldr	r3, [pc, #648]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	4ba1      	ldr	r3, [pc, #644]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80076d8:	49a1      	ldr	r1, [pc, #644]	; (8007960 <HAL_RCC_OscConfig+0x334>)
 80076da:	400a      	ands	r2, r1
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	4b9f      	ldr	r3, [pc, #636]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	4b9e      	ldr	r3, [pc, #632]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80076e4:	499f      	ldr	r1, [pc, #636]	; (8007964 <HAL_RCC_OscConfig+0x338>)
 80076e6:	400a      	ands	r2, r1
 80076e8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d014      	beq.n	800771c <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f2:	f7fc fa55 	bl	8003ba0 <HAL_GetTick>
 80076f6:	0003      	movs	r3, r0
 80076f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076fa:	e008      	b.n	800770e <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076fc:	f7fc fa50 	bl	8003ba0 <HAL_GetTick>
 8007700:	0002      	movs	r2, r0
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b64      	cmp	r3, #100	; 0x64
 8007708:	d901      	bls.n	800770e <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e2ee      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800770e:	4b93      	ldr	r3, [pc, #588]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	2380      	movs	r3, #128	; 0x80
 8007714:	029b      	lsls	r3, r3, #10
 8007716:	4013      	ands	r3, r2
 8007718:	d0f0      	beq.n	80076fc <HAL_RCC_OscConfig+0xd0>
 800771a:	e015      	b.n	8007748 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771c:	f7fc fa40 	bl	8003ba0 <HAL_GetTick>
 8007720:	0003      	movs	r3, r0
 8007722:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007724:	e008      	b.n	8007738 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007726:	f7fc fa3b 	bl	8003ba0 <HAL_GetTick>
 800772a:	0002      	movs	r2, r0
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b64      	cmp	r3, #100	; 0x64
 8007732:	d901      	bls.n	8007738 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e2d9      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007738:	4b88      	ldr	r3, [pc, #544]	; (800795c <HAL_RCC_OscConfig+0x330>)
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	2380      	movs	r3, #128	; 0x80
 800773e:	029b      	lsls	r3, r3, #10
 8007740:	4013      	ands	r3, r2
 8007742:	d1f0      	bne.n	8007726 <HAL_RCC_OscConfig+0xfa>
 8007744:	e000      	b.n	8007748 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007746:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2202      	movs	r2, #2
 800774e:	4013      	ands	r3, r2
 8007750:	d100      	bne.n	8007754 <HAL_RCC_OscConfig+0x128>
 8007752:	e099      	b.n	8007888 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007754:	4b81      	ldr	r3, [pc, #516]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	2238      	movs	r2, #56	; 0x38
 800775a:	4013      	ands	r3, r2
 800775c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800775e:	4b7f      	ldr	r3, [pc, #508]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	2203      	movs	r2, #3
 8007764:	4013      	ands	r3, r2
 8007766:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	2b10      	cmp	r3, #16
 800776c:	d102      	bne.n	8007774 <HAL_RCC_OscConfig+0x148>
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2b02      	cmp	r3, #2
 8007772:	d002      	beq.n	800777a <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d135      	bne.n	80077e6 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800777a:	4b78      	ldr	r3, [pc, #480]	; (800795c <HAL_RCC_OscConfig+0x330>)
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	2380      	movs	r3, #128	; 0x80
 8007780:	00db      	lsls	r3, r3, #3
 8007782:	4013      	ands	r3, r2
 8007784:	d005      	beq.n	8007792 <HAL_RCC_OscConfig+0x166>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e2ac      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007792:	4b72      	ldr	r3, [pc, #456]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	4a74      	ldr	r2, [pc, #464]	; (8007968 <HAL_RCC_OscConfig+0x33c>)
 8007798:	4013      	ands	r3, r2
 800779a:	0019      	movs	r1, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	021a      	lsls	r2, r3, #8
 80077a2:	4b6e      	ldr	r3, [pc, #440]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80077a4:	430a      	orrs	r2, r1
 80077a6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d112      	bne.n	80077d4 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80077ae:	4b6b      	ldr	r3, [pc, #428]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a6e      	ldr	r2, [pc, #440]	; (800796c <HAL_RCC_OscConfig+0x340>)
 80077b4:	4013      	ands	r3, r2
 80077b6:	0019      	movs	r1, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	4b67      	ldr	r3, [pc, #412]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80077be:	430a      	orrs	r2, r1
 80077c0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80077c2:	4b66      	ldr	r3, [pc, #408]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	0adb      	lsrs	r3, r3, #11
 80077c8:	2207      	movs	r2, #7
 80077ca:	4013      	ands	r3, r2
 80077cc:	4a68      	ldr	r2, [pc, #416]	; (8007970 <HAL_RCC_OscConfig+0x344>)
 80077ce:	40da      	lsrs	r2, r3
 80077d0:	4b68      	ldr	r3, [pc, #416]	; (8007974 <HAL_RCC_OscConfig+0x348>)
 80077d2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80077d4:	4b68      	ldr	r3, [pc, #416]	; (8007978 <HAL_RCC_OscConfig+0x34c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	0018      	movs	r0, r3
 80077da:	f7fc f985 	bl	8003ae8 <HAL_InitTick>
 80077de:	1e03      	subs	r3, r0, #0
 80077e0:	d051      	beq.n	8007886 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e282      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d030      	beq.n	8007850 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80077ee:	4b5b      	ldr	r3, [pc, #364]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a5e      	ldr	r2, [pc, #376]	; (800796c <HAL_RCC_OscConfig+0x340>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	0019      	movs	r1, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691a      	ldr	r2, [r3, #16]
 80077fc:	4b57      	ldr	r3, [pc, #348]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80077fe:	430a      	orrs	r2, r1
 8007800:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007802:	4b56      	ldr	r3, [pc, #344]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	4b55      	ldr	r3, [pc, #340]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007808:	2180      	movs	r1, #128	; 0x80
 800780a:	0049      	lsls	r1, r1, #1
 800780c:	430a      	orrs	r2, r1
 800780e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007810:	f7fc f9c6 	bl	8003ba0 <HAL_GetTick>
 8007814:	0003      	movs	r3, r0
 8007816:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007818:	e008      	b.n	800782c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800781a:	f7fc f9c1 	bl	8003ba0 <HAL_GetTick>
 800781e:	0002      	movs	r2, r0
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	2b02      	cmp	r3, #2
 8007826:	d901      	bls.n	800782c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e25f      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800782c:	4b4b      	ldr	r3, [pc, #300]	; (800795c <HAL_RCC_OscConfig+0x330>)
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	2380      	movs	r3, #128	; 0x80
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4013      	ands	r3, r2
 8007836:	d0f0      	beq.n	800781a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007838:	4b48      	ldr	r3, [pc, #288]	; (800795c <HAL_RCC_OscConfig+0x330>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4a4a      	ldr	r2, [pc, #296]	; (8007968 <HAL_RCC_OscConfig+0x33c>)
 800783e:	4013      	ands	r3, r2
 8007840:	0019      	movs	r1, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	021a      	lsls	r2, r3, #8
 8007848:	4b44      	ldr	r3, [pc, #272]	; (800795c <HAL_RCC_OscConfig+0x330>)
 800784a:	430a      	orrs	r2, r1
 800784c:	605a      	str	r2, [r3, #4]
 800784e:	e01b      	b.n	8007888 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007850:	4b42      	ldr	r3, [pc, #264]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	4b41      	ldr	r3, [pc, #260]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007856:	4949      	ldr	r1, [pc, #292]	; (800797c <HAL_RCC_OscConfig+0x350>)
 8007858:	400a      	ands	r2, r1
 800785a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800785c:	f7fc f9a0 	bl	8003ba0 <HAL_GetTick>
 8007860:	0003      	movs	r3, r0
 8007862:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007864:	e008      	b.n	8007878 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007866:	f7fc f99b 	bl	8003ba0 <HAL_GetTick>
 800786a:	0002      	movs	r2, r0
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	2b02      	cmp	r3, #2
 8007872:	d901      	bls.n	8007878 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e239      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007878:	4b38      	ldr	r3, [pc, #224]	; (800795c <HAL_RCC_OscConfig+0x330>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	2380      	movs	r3, #128	; 0x80
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	4013      	ands	r3, r2
 8007882:	d1f0      	bne.n	8007866 <HAL_RCC_OscConfig+0x23a>
 8007884:	e000      	b.n	8007888 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007886:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2208      	movs	r2, #8
 800788e:	4013      	ands	r3, r2
 8007890:	d047      	beq.n	8007922 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007892:	4b32      	ldr	r3, [pc, #200]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	2238      	movs	r2, #56	; 0x38
 8007898:	4013      	ands	r3, r2
 800789a:	2b18      	cmp	r3, #24
 800789c:	d10a      	bne.n	80078b4 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800789e:	4b2f      	ldr	r3, [pc, #188]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80078a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a2:	2202      	movs	r2, #2
 80078a4:	4013      	ands	r3, r2
 80078a6:	d03c      	beq.n	8007922 <HAL_RCC_OscConfig+0x2f6>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d138      	bne.n	8007922 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e21b      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d019      	beq.n	80078f0 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80078bc:	4b27      	ldr	r3, [pc, #156]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80078be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80078c0:	4b26      	ldr	r3, [pc, #152]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80078c2:	2101      	movs	r1, #1
 80078c4:	430a      	orrs	r2, r1
 80078c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c8:	f7fc f96a 	bl	8003ba0 <HAL_GetTick>
 80078cc:	0003      	movs	r3, r0
 80078ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078d2:	f7fc f965 	bl	8003ba0 <HAL_GetTick>
 80078d6:	0002      	movs	r2, r0
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e203      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078e4:	4b1d      	ldr	r3, [pc, #116]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80078e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e8:	2202      	movs	r2, #2
 80078ea:	4013      	ands	r3, r2
 80078ec:	d0f1      	beq.n	80078d2 <HAL_RCC_OscConfig+0x2a6>
 80078ee:	e018      	b.n	8007922 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80078f0:	4b1a      	ldr	r3, [pc, #104]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80078f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80078f4:	4b19      	ldr	r3, [pc, #100]	; (800795c <HAL_RCC_OscConfig+0x330>)
 80078f6:	2101      	movs	r1, #1
 80078f8:	438a      	bics	r2, r1
 80078fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fc:	f7fc f950 	bl	8003ba0 <HAL_GetTick>
 8007900:	0003      	movs	r3, r0
 8007902:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007904:	e008      	b.n	8007918 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007906:	f7fc f94b 	bl	8003ba0 <HAL_GetTick>
 800790a:	0002      	movs	r2, r0
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e1e9      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007918:	4b10      	ldr	r3, [pc, #64]	; (800795c <HAL_RCC_OscConfig+0x330>)
 800791a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800791c:	2202      	movs	r2, #2
 800791e:	4013      	ands	r3, r2
 8007920:	d1f1      	bne.n	8007906 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2204      	movs	r2, #4
 8007928:	4013      	ands	r3, r2
 800792a:	d100      	bne.n	800792e <HAL_RCC_OscConfig+0x302>
 800792c:	e0c6      	b.n	8007abc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800792e:	231f      	movs	r3, #31
 8007930:	18fb      	adds	r3, r7, r3
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007936:	4b09      	ldr	r3, [pc, #36]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2238      	movs	r2, #56	; 0x38
 800793c:	4013      	ands	r3, r2
 800793e:	2b20      	cmp	r3, #32
 8007940:	d11e      	bne.n	8007980 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007942:	4b06      	ldr	r3, [pc, #24]	; (800795c <HAL_RCC_OscConfig+0x330>)
 8007944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007946:	2202      	movs	r2, #2
 8007948:	4013      	ands	r3, r2
 800794a:	d100      	bne.n	800794e <HAL_RCC_OscConfig+0x322>
 800794c:	e0b6      	b.n	8007abc <HAL_RCC_OscConfig+0x490>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d000      	beq.n	8007958 <HAL_RCC_OscConfig+0x32c>
 8007956:	e0b1      	b.n	8007abc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e1c7      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
 800795c:	40021000 	.word	0x40021000
 8007960:	fffeffff 	.word	0xfffeffff
 8007964:	fffbffff 	.word	0xfffbffff
 8007968:	ffff80ff 	.word	0xffff80ff
 800796c:	ffffc7ff 	.word	0xffffc7ff
 8007970:	00f42400 	.word	0x00f42400
 8007974:	20000000 	.word	0x20000000
 8007978:	20000004 	.word	0x20000004
 800797c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007980:	4bb8      	ldr	r3, [pc, #736]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007984:	2380      	movs	r3, #128	; 0x80
 8007986:	055b      	lsls	r3, r3, #21
 8007988:	4013      	ands	r3, r2
 800798a:	d101      	bne.n	8007990 <HAL_RCC_OscConfig+0x364>
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <HAL_RCC_OscConfig+0x366>
 8007990:	2300      	movs	r3, #0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d011      	beq.n	80079ba <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007996:	4bb3      	ldr	r3, [pc, #716]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800799a:	4bb2      	ldr	r3, [pc, #712]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 800799c:	2180      	movs	r1, #128	; 0x80
 800799e:	0549      	lsls	r1, r1, #21
 80079a0:	430a      	orrs	r2, r1
 80079a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80079a4:	4baf      	ldr	r3, [pc, #700]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 80079a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079a8:	2380      	movs	r3, #128	; 0x80
 80079aa:	055b      	lsls	r3, r3, #21
 80079ac:	4013      	ands	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80079b2:	231f      	movs	r3, #31
 80079b4:	18fb      	adds	r3, r7, r3
 80079b6:	2201      	movs	r2, #1
 80079b8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079ba:	4bab      	ldr	r3, [pc, #684]	; (8007c68 <HAL_RCC_OscConfig+0x63c>)
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	2380      	movs	r3, #128	; 0x80
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	4013      	ands	r3, r2
 80079c4:	d11a      	bne.n	80079fc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079c6:	4ba8      	ldr	r3, [pc, #672]	; (8007c68 <HAL_RCC_OscConfig+0x63c>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	4ba7      	ldr	r3, [pc, #668]	; (8007c68 <HAL_RCC_OscConfig+0x63c>)
 80079cc:	2180      	movs	r1, #128	; 0x80
 80079ce:	0049      	lsls	r1, r1, #1
 80079d0:	430a      	orrs	r2, r1
 80079d2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80079d4:	f7fc f8e4 	bl	8003ba0 <HAL_GetTick>
 80079d8:	0003      	movs	r3, r0
 80079da:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079dc:	e008      	b.n	80079f0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079de:	f7fc f8df 	bl	8003ba0 <HAL_GetTick>
 80079e2:	0002      	movs	r2, r0
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e17d      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079f0:	4b9d      	ldr	r3, [pc, #628]	; (8007c68 <HAL_RCC_OscConfig+0x63c>)
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	2380      	movs	r3, #128	; 0x80
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	4013      	ands	r3, r2
 80079fa:	d0f0      	beq.n	80079de <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d106      	bne.n	8007a12 <HAL_RCC_OscConfig+0x3e6>
 8007a04:	4b97      	ldr	r3, [pc, #604]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007a06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a08:	4b96      	ldr	r3, [pc, #600]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a10:	e01c      	b.n	8007a4c <HAL_RCC_OscConfig+0x420>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b05      	cmp	r3, #5
 8007a18:	d10c      	bne.n	8007a34 <HAL_RCC_OscConfig+0x408>
 8007a1a:	4b92      	ldr	r3, [pc, #584]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007a1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a1e:	4b91      	ldr	r3, [pc, #580]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007a20:	2104      	movs	r1, #4
 8007a22:	430a      	orrs	r2, r1
 8007a24:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a26:	4b8f      	ldr	r3, [pc, #572]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007a28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a2a:	4b8e      	ldr	r3, [pc, #568]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a32:	e00b      	b.n	8007a4c <HAL_RCC_OscConfig+0x420>
 8007a34:	4b8b      	ldr	r3, [pc, #556]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007a36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a38:	4b8a      	ldr	r3, [pc, #552]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	438a      	bics	r2, r1
 8007a3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a40:	4b88      	ldr	r3, [pc, #544]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007a42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a44:	4b87      	ldr	r3, [pc, #540]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007a46:	2104      	movs	r1, #4
 8007a48:	438a      	bics	r2, r1
 8007a4a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d014      	beq.n	8007a7e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a54:	f7fc f8a4 	bl	8003ba0 <HAL_GetTick>
 8007a58:	0003      	movs	r3, r0
 8007a5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a5c:	e009      	b.n	8007a72 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a5e:	f7fc f89f 	bl	8003ba0 <HAL_GetTick>
 8007a62:	0002      	movs	r2, r0
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	4a80      	ldr	r2, [pc, #512]	; (8007c6c <HAL_RCC_OscConfig+0x640>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e13c      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a72:	4b7c      	ldr	r3, [pc, #496]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a76:	2202      	movs	r2, #2
 8007a78:	4013      	ands	r3, r2
 8007a7a:	d0f0      	beq.n	8007a5e <HAL_RCC_OscConfig+0x432>
 8007a7c:	e013      	b.n	8007aa6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7e:	f7fc f88f 	bl	8003ba0 <HAL_GetTick>
 8007a82:	0003      	movs	r3, r0
 8007a84:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a86:	e009      	b.n	8007a9c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a88:	f7fc f88a 	bl	8003ba0 <HAL_GetTick>
 8007a8c:	0002      	movs	r2, r0
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	4a76      	ldr	r2, [pc, #472]	; (8007c6c <HAL_RCC_OscConfig+0x640>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d901      	bls.n	8007a9c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e127      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a9c:	4b71      	ldr	r3, [pc, #452]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	d1f0      	bne.n	8007a88 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007aa6:	231f      	movs	r3, #31
 8007aa8:	18fb      	adds	r3, r7, r3
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d105      	bne.n	8007abc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007ab0:	4b6c      	ldr	r3, [pc, #432]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ab4:	4b6b      	ldr	r3, [pc, #428]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007ab6:	496e      	ldr	r1, [pc, #440]	; (8007c70 <HAL_RCC_OscConfig+0x644>)
 8007ab8:	400a      	ands	r2, r1
 8007aba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	d039      	beq.n	8007b3a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d01b      	beq.n	8007b06 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ace:	4b65      	ldr	r3, [pc, #404]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	4b64      	ldr	r3, [pc, #400]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007ad4:	2180      	movs	r1, #128	; 0x80
 8007ad6:	03c9      	lsls	r1, r1, #15
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007adc:	f7fc f860 	bl	8003ba0 <HAL_GetTick>
 8007ae0:	0003      	movs	r3, r0
 8007ae2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007ae4:	e008      	b.n	8007af8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ae6:	f7fc f85b 	bl	8003ba0 <HAL_GetTick>
 8007aea:	0002      	movs	r2, r0
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e0f9      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007af8:	4b5a      	ldr	r3, [pc, #360]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	2380      	movs	r3, #128	; 0x80
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	4013      	ands	r3, r2
 8007b02:	d0f0      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x4ba>
 8007b04:	e019      	b.n	8007b3a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b06:	4b57      	ldr	r3, [pc, #348]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	4b56      	ldr	r3, [pc, #344]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007b0c:	4959      	ldr	r1, [pc, #356]	; (8007c74 <HAL_RCC_OscConfig+0x648>)
 8007b0e:	400a      	ands	r2, r1
 8007b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b12:	f7fc f845 	bl	8003ba0 <HAL_GetTick>
 8007b16:	0003      	movs	r3, r0
 8007b18:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007b1a:	e008      	b.n	8007b2e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b1c:	f7fc f840 	bl	8003ba0 <HAL_GetTick>
 8007b20:	0002      	movs	r2, r0
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d901      	bls.n	8007b2e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e0de      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007b2e:	4b4d      	ldr	r3, [pc, #308]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	2380      	movs	r3, #128	; 0x80
 8007b34:	041b      	lsls	r3, r3, #16
 8007b36:	4013      	ands	r3, r2
 8007b38:	d1f0      	bne.n	8007b1c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d100      	bne.n	8007b44 <HAL_RCC_OscConfig+0x518>
 8007b42:	e0d2      	b.n	8007cea <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b44:	4b47      	ldr	r3, [pc, #284]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2238      	movs	r2, #56	; 0x38
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b10      	cmp	r3, #16
 8007b4e:	d100      	bne.n	8007b52 <HAL_RCC_OscConfig+0x526>
 8007b50:	e081      	b.n	8007c56 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d156      	bne.n	8007c08 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b5a:	4b42      	ldr	r3, [pc, #264]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4b41      	ldr	r3, [pc, #260]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007b60:	4945      	ldr	r1, [pc, #276]	; (8007c78 <HAL_RCC_OscConfig+0x64c>)
 8007b62:	400a      	ands	r2, r1
 8007b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b66:	f7fc f81b 	bl	8003ba0 <HAL_GetTick>
 8007b6a:	0003      	movs	r3, r0
 8007b6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b70:	f7fc f816 	bl	8003ba0 <HAL_GetTick>
 8007b74:	0002      	movs	r2, r0
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e0b4      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b82:	4b38      	ldr	r3, [pc, #224]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	2380      	movs	r3, #128	; 0x80
 8007b88:	049b      	lsls	r3, r3, #18
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	d1f0      	bne.n	8007b70 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b8e:	4b35      	ldr	r3, [pc, #212]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	4a3a      	ldr	r2, [pc, #232]	; (8007c7c <HAL_RCC_OscConfig+0x650>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	0019      	movs	r1, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	021b      	lsls	r3, r3, #8
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	4b29      	ldr	r3, [pc, #164]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bc2:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	4b27      	ldr	r3, [pc, #156]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007bc8:	2180      	movs	r1, #128	; 0x80
 8007bca:	0449      	lsls	r1, r1, #17
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007bd0:	4b24      	ldr	r3, [pc, #144]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	4b23      	ldr	r3, [pc, #140]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007bd6:	2180      	movs	r1, #128	; 0x80
 8007bd8:	0549      	lsls	r1, r1, #21
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bde:	f7fb ffdf 	bl	8003ba0 <HAL_GetTick>
 8007be2:	0003      	movs	r3, r0
 8007be4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007be8:	f7fb ffda 	bl	8003ba0 <HAL_GetTick>
 8007bec:	0002      	movs	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e078      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bfa:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	2380      	movs	r3, #128	; 0x80
 8007c00:	049b      	lsls	r3, r3, #18
 8007c02:	4013      	ands	r3, r2
 8007c04:	d0f0      	beq.n	8007be8 <HAL_RCC_OscConfig+0x5bc>
 8007c06:	e070      	b.n	8007cea <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c08:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	4b15      	ldr	r3, [pc, #84]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007c0e:	491a      	ldr	r1, [pc, #104]	; (8007c78 <HAL_RCC_OscConfig+0x64c>)
 8007c10:	400a      	ands	r2, r1
 8007c12:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007c14:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007c16:	68da      	ldr	r2, [r3, #12]
 8007c18:	4b12      	ldr	r3, [pc, #72]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007c1a:	2103      	movs	r1, #3
 8007c1c:	438a      	bics	r2, r1
 8007c1e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8007c20:	4b10      	ldr	r3, [pc, #64]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007c22:	68da      	ldr	r2, [r3, #12]
 8007c24:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007c26:	4916      	ldr	r1, [pc, #88]	; (8007c80 <HAL_RCC_OscConfig+0x654>)
 8007c28:	400a      	ands	r2, r1
 8007c2a:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c2c:	f7fb ffb8 	bl	8003ba0 <HAL_GetTick>
 8007c30:	0003      	movs	r3, r0
 8007c32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c34:	e008      	b.n	8007c48 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c36:	f7fb ffb3 	bl	8003ba0 <HAL_GetTick>
 8007c3a:	0002      	movs	r2, r0
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d901      	bls.n	8007c48 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e051      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c48:	4b06      	ldr	r3, [pc, #24]	; (8007c64 <HAL_RCC_OscConfig+0x638>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	2380      	movs	r3, #128	; 0x80
 8007c4e:	049b      	lsls	r3, r3, #18
 8007c50:	4013      	ands	r3, r2
 8007c52:	d1f0      	bne.n	8007c36 <HAL_RCC_OscConfig+0x60a>
 8007c54:	e049      	b.n	8007cea <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d112      	bne.n	8007c84 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e044      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	40021000 	.word	0x40021000
 8007c68:	40007000 	.word	0x40007000
 8007c6c:	00001388 	.word	0x00001388
 8007c70:	efffffff 	.word	0xefffffff
 8007c74:	ffbfffff 	.word	0xffbfffff
 8007c78:	feffffff 	.word	0xfeffffff
 8007c7c:	11c1808c 	.word	0x11c1808c
 8007c80:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007c84:	4b1b      	ldr	r3, [pc, #108]	; (8007cf4 <HAL_RCC_OscConfig+0x6c8>)
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	401a      	ands	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d126      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2270      	movs	r2, #112	; 0x70
 8007c9c:	401a      	ands	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d11f      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	23fe      	movs	r3, #254	; 0xfe
 8007caa:	01db      	lsls	r3, r3, #7
 8007cac:	401a      	ands	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d116      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	23f8      	movs	r3, #248	; 0xf8
 8007cbc:	039b      	lsls	r3, r3, #14
 8007cbe:	401a      	ands	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d10e      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	23e0      	movs	r3, #224	; 0xe0
 8007ccc:	051b      	lsls	r3, r3, #20
 8007cce:	401a      	ands	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d106      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	0f5b      	lsrs	r3, r3, #29
 8007cdc:	075a      	lsls	r2, r3, #29
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d001      	beq.n	8007cea <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e000      	b.n	8007cec <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	0018      	movs	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	b008      	add	sp, #32
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40021000 	.word	0x40021000

08007cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e0e9      	b.n	8007ee0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d0c:	4b76      	ldr	r3, [pc, #472]	; (8007ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2207      	movs	r2, #7
 8007d12:	4013      	ands	r3, r2
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d91e      	bls.n	8007d58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d1a:	4b73      	ldr	r3, [pc, #460]	; (8007ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2207      	movs	r2, #7
 8007d20:	4393      	bics	r3, r2
 8007d22:	0019      	movs	r1, r3
 8007d24:	4b70      	ldr	r3, [pc, #448]	; (8007ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007d2c:	f7fb ff38 	bl	8003ba0 <HAL_GetTick>
 8007d30:	0003      	movs	r3, r0
 8007d32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007d34:	e009      	b.n	8007d4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d36:	f7fb ff33 	bl	8003ba0 <HAL_GetTick>
 8007d3a:	0002      	movs	r2, r0
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	4a6a      	ldr	r2, [pc, #424]	; (8007eec <HAL_RCC_ClockConfig+0x1f4>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d901      	bls.n	8007d4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e0ca      	b.n	8007ee0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007d4a:	4b67      	ldr	r3, [pc, #412]	; (8007ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2207      	movs	r2, #7
 8007d50:	4013      	ands	r3, r2
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d1ee      	bne.n	8007d36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	4013      	ands	r3, r2
 8007d60:	d015      	beq.n	8007d8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2204      	movs	r2, #4
 8007d68:	4013      	ands	r3, r2
 8007d6a:	d006      	beq.n	8007d7a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007d6c:	4b60      	ldr	r3, [pc, #384]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	4b5f      	ldr	r3, [pc, #380]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007d72:	21e0      	movs	r1, #224	; 0xe0
 8007d74:	01c9      	lsls	r1, r1, #7
 8007d76:	430a      	orrs	r2, r1
 8007d78:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d7a:	4b5d      	ldr	r3, [pc, #372]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	4a5d      	ldr	r2, [pc, #372]	; (8007ef4 <HAL_RCC_ClockConfig+0x1fc>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	0019      	movs	r1, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	4b59      	ldr	r3, [pc, #356]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2201      	movs	r2, #1
 8007d94:	4013      	ands	r3, r2
 8007d96:	d057      	beq.n	8007e48 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d107      	bne.n	8007db0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007da0:	4b53      	ldr	r3, [pc, #332]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	2380      	movs	r3, #128	; 0x80
 8007da6:	029b      	lsls	r3, r3, #10
 8007da8:	4013      	ands	r3, r2
 8007daa:	d12b      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e097      	b.n	8007ee0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d107      	bne.n	8007dc8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007db8:	4b4d      	ldr	r3, [pc, #308]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	2380      	movs	r3, #128	; 0x80
 8007dbe:	049b      	lsls	r3, r3, #18
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	d11f      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e08b      	b.n	8007ee0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d107      	bne.n	8007de0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007dd0:	4b47      	ldr	r3, [pc, #284]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	2380      	movs	r3, #128	; 0x80
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	4013      	ands	r3, r2
 8007dda:	d113      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e07f      	b.n	8007ee0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d106      	bne.n	8007df6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007de8:	4b41      	ldr	r3, [pc, #260]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dec:	2202      	movs	r2, #2
 8007dee:	4013      	ands	r3, r2
 8007df0:	d108      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e074      	b.n	8007ee0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007df6:	4b3e      	ldr	r3, [pc, #248]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	d101      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e06d      	b.n	8007ee0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e04:	4b3a      	ldr	r3, [pc, #232]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	2207      	movs	r2, #7
 8007e0a:	4393      	bics	r3, r2
 8007e0c:	0019      	movs	r1, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	4b37      	ldr	r3, [pc, #220]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007e14:	430a      	orrs	r2, r1
 8007e16:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e18:	f7fb fec2 	bl	8003ba0 <HAL_GetTick>
 8007e1c:	0003      	movs	r3, r0
 8007e1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e20:	e009      	b.n	8007e36 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e22:	f7fb febd 	bl	8003ba0 <HAL_GetTick>
 8007e26:	0002      	movs	r2, r0
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	4a2f      	ldr	r2, [pc, #188]	; (8007eec <HAL_RCC_ClockConfig+0x1f4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e054      	b.n	8007ee0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e36:	4b2e      	ldr	r3, [pc, #184]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2238      	movs	r2, #56	; 0x38
 8007e3c:	401a      	ands	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d1ec      	bne.n	8007e22 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e48:	4b27      	ldr	r3, [pc, #156]	; (8007ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2207      	movs	r2, #7
 8007e4e:	4013      	ands	r3, r2
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d21e      	bcs.n	8007e94 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e56:	4b24      	ldr	r3, [pc, #144]	; (8007ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2207      	movs	r2, #7
 8007e5c:	4393      	bics	r3, r2
 8007e5e:	0019      	movs	r1, r3
 8007e60:	4b21      	ldr	r3, [pc, #132]	; (8007ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007e68:	f7fb fe9a 	bl	8003ba0 <HAL_GetTick>
 8007e6c:	0003      	movs	r3, r0
 8007e6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007e70:	e009      	b.n	8007e86 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e72:	f7fb fe95 	bl	8003ba0 <HAL_GetTick>
 8007e76:	0002      	movs	r2, r0
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	4a1b      	ldr	r2, [pc, #108]	; (8007eec <HAL_RCC_ClockConfig+0x1f4>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e02c      	b.n	8007ee0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007e86:	4b18      	ldr	r3, [pc, #96]	; (8007ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2207      	movs	r2, #7
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d1ee      	bne.n	8007e72 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2204      	movs	r2, #4
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	d009      	beq.n	8007eb2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007e9e:	4b14      	ldr	r3, [pc, #80]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	4a15      	ldr	r2, [pc, #84]	; (8007ef8 <HAL_RCC_ClockConfig+0x200>)
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	0019      	movs	r1, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007eb2:	f000 f829 	bl	8007f08 <HAL_RCC_GetSysClockFreq>
 8007eb6:	0001      	movs	r1, r0
 8007eb8:	4b0d      	ldr	r3, [pc, #52]	; (8007ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	0a1b      	lsrs	r3, r3, #8
 8007ebe:	220f      	movs	r2, #15
 8007ec0:	401a      	ands	r2, r3
 8007ec2:	4b0e      	ldr	r3, [pc, #56]	; (8007efc <HAL_RCC_ClockConfig+0x204>)
 8007ec4:	0092      	lsls	r2, r2, #2
 8007ec6:	58d3      	ldr	r3, [r2, r3]
 8007ec8:	221f      	movs	r2, #31
 8007eca:	4013      	ands	r3, r2
 8007ecc:	000a      	movs	r2, r1
 8007ece:	40da      	lsrs	r2, r3
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <HAL_RCC_ClockConfig+0x208>)
 8007ed2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007ed4:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <HAL_RCC_ClockConfig+0x20c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f7fb fe05 	bl	8003ae8 <HAL_InitTick>
 8007ede:	0003      	movs	r3, r0
}
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	b004      	add	sp, #16
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	40022000 	.word	0x40022000
 8007eec:	00001388 	.word	0x00001388
 8007ef0:	40021000 	.word	0x40021000
 8007ef4:	fffff0ff 	.word	0xfffff0ff
 8007ef8:	ffff8fff 	.word	0xffff8fff
 8007efc:	0800d7bc 	.word	0x0800d7bc
 8007f00:	20000000 	.word	0x20000000
 8007f04:	20000004 	.word	0x20000004

08007f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f0e:	4b3c      	ldr	r3, [pc, #240]	; (8008000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	2238      	movs	r2, #56	; 0x38
 8007f14:	4013      	ands	r3, r2
 8007f16:	d10f      	bne.n	8007f38 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007f18:	4b39      	ldr	r3, [pc, #228]	; (8008000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	0adb      	lsrs	r3, r3, #11
 8007f1e:	2207      	movs	r2, #7
 8007f20:	4013      	ands	r3, r2
 8007f22:	2201      	movs	r2, #1
 8007f24:	409a      	lsls	r2, r3
 8007f26:	0013      	movs	r3, r2
 8007f28:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	4835      	ldr	r0, [pc, #212]	; (8008004 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007f2e:	f7f8 f905 	bl	800013c <__udivsi3>
 8007f32:	0003      	movs	r3, r0
 8007f34:	613b      	str	r3, [r7, #16]
 8007f36:	e05d      	b.n	8007ff4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f38:	4b31      	ldr	r3, [pc, #196]	; (8008000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	2238      	movs	r2, #56	; 0x38
 8007f3e:	4013      	ands	r3, r2
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d102      	bne.n	8007f4a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f44:	4b30      	ldr	r3, [pc, #192]	; (8008008 <HAL_RCC_GetSysClockFreq+0x100>)
 8007f46:	613b      	str	r3, [r7, #16]
 8007f48:	e054      	b.n	8007ff4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f4a:	4b2d      	ldr	r3, [pc, #180]	; (8008000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	2238      	movs	r2, #56	; 0x38
 8007f50:	4013      	ands	r3, r2
 8007f52:	2b10      	cmp	r3, #16
 8007f54:	d138      	bne.n	8007fc8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007f56:	4b2a      	ldr	r3, [pc, #168]	; (8008000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	2203      	movs	r2, #3
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f60:	4b27      	ldr	r3, [pc, #156]	; (8008000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	091b      	lsrs	r3, r3, #4
 8007f66:	2207      	movs	r2, #7
 8007f68:	4013      	ands	r3, r2
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d10d      	bne.n	8007f90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	4824      	ldr	r0, [pc, #144]	; (8008008 <HAL_RCC_GetSysClockFreq+0x100>)
 8007f78:	f7f8 f8e0 	bl	800013c <__udivsi3>
 8007f7c:	0003      	movs	r3, r0
 8007f7e:	0019      	movs	r1, r3
 8007f80:	4b1f      	ldr	r3, [pc, #124]	; (8008000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	0a1b      	lsrs	r3, r3, #8
 8007f86:	227f      	movs	r2, #127	; 0x7f
 8007f88:	4013      	ands	r3, r2
 8007f8a:	434b      	muls	r3, r1
 8007f8c:	617b      	str	r3, [r7, #20]
        break;
 8007f8e:	e00d      	b.n	8007fac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	481c      	ldr	r0, [pc, #112]	; (8008004 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007f94:	f7f8 f8d2 	bl	800013c <__udivsi3>
 8007f98:	0003      	movs	r3, r0
 8007f9a:	0019      	movs	r1, r3
 8007f9c:	4b18      	ldr	r3, [pc, #96]	; (8008000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	0a1b      	lsrs	r3, r3, #8
 8007fa2:	227f      	movs	r2, #127	; 0x7f
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	434b      	muls	r3, r1
 8007fa8:	617b      	str	r3, [r7, #20]
        break;
 8007faa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007fac:	4b14      	ldr	r3, [pc, #80]	; (8008000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	0f5b      	lsrs	r3, r3, #29
 8007fb2:	2207      	movs	r2, #7
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	6978      	ldr	r0, [r7, #20]
 8007fbe:	f7f8 f8bd 	bl	800013c <__udivsi3>
 8007fc2:	0003      	movs	r3, r0
 8007fc4:	613b      	str	r3, [r7, #16]
 8007fc6:	e015      	b.n	8007ff4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	2238      	movs	r2, #56	; 0x38
 8007fce:	4013      	ands	r3, r2
 8007fd0:	2b20      	cmp	r3, #32
 8007fd2:	d103      	bne.n	8007fdc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007fd4:	2380      	movs	r3, #128	; 0x80
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	613b      	str	r3, [r7, #16]
 8007fda:	e00b      	b.n	8007ff4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007fdc:	4b08      	ldr	r3, [pc, #32]	; (8008000 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	2238      	movs	r2, #56	; 0x38
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	2b18      	cmp	r3, #24
 8007fe6:	d103      	bne.n	8007ff0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007fe8:	23fa      	movs	r3, #250	; 0xfa
 8007fea:	01db      	lsls	r3, r3, #7
 8007fec:	613b      	str	r3, [r7, #16]
 8007fee:	e001      	b.n	8007ff4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007ff4:	693b      	ldr	r3, [r7, #16]
}
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	b006      	add	sp, #24
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	46c0      	nop			; (mov r8, r8)
 8008000:	40021000 	.word	0x40021000
 8008004:	00f42400 	.word	0x00f42400
 8008008:	007a1200 	.word	0x007a1200

0800800c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008010:	4b02      	ldr	r3, [pc, #8]	; (800801c <HAL_RCC_GetHCLKFreq+0x10>)
 8008012:	681b      	ldr	r3, [r3, #0]
}
 8008014:	0018      	movs	r0, r3
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	46c0      	nop			; (mov r8, r8)
 800801c:	20000000 	.word	0x20000000

08008020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008020:	b5b0      	push	{r4, r5, r7, lr}
 8008022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008024:	f7ff fff2 	bl	800800c <HAL_RCC_GetHCLKFreq>
 8008028:	0004      	movs	r4, r0
 800802a:	f7ff faf3 	bl	8007614 <LL_RCC_GetAPB1Prescaler>
 800802e:	0003      	movs	r3, r0
 8008030:	0b1a      	lsrs	r2, r3, #12
 8008032:	4b05      	ldr	r3, [pc, #20]	; (8008048 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008034:	0092      	lsls	r2, r2, #2
 8008036:	58d3      	ldr	r3, [r2, r3]
 8008038:	221f      	movs	r2, #31
 800803a:	4013      	ands	r3, r2
 800803c:	40dc      	lsrs	r4, r3
 800803e:	0023      	movs	r3, r4
}
 8008040:	0018      	movs	r0, r3
 8008042:	46bd      	mov	sp, r7
 8008044:	bdb0      	pop	{r4, r5, r7, pc}
 8008046:	46c0      	nop			; (mov r8, r8)
 8008048:	0800d7fc 	.word	0x0800d7fc

0800804c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008054:	2313      	movs	r3, #19
 8008056:	18fb      	adds	r3, r7, r3
 8008058:	2200      	movs	r2, #0
 800805a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800805c:	2312      	movs	r3, #18
 800805e:	18fb      	adds	r3, r7, r3
 8008060:	2200      	movs	r2, #0
 8008062:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	2380      	movs	r3, #128	; 0x80
 800806a:	029b      	lsls	r3, r3, #10
 800806c:	4013      	ands	r3, r2
 800806e:	d100      	bne.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008070:	e0ad      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008072:	2011      	movs	r0, #17
 8008074:	183b      	adds	r3, r7, r0
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800807a:	4b47      	ldr	r3, [pc, #284]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800807c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800807e:	2380      	movs	r3, #128	; 0x80
 8008080:	055b      	lsls	r3, r3, #21
 8008082:	4013      	ands	r3, r2
 8008084:	d110      	bne.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008086:	4b44      	ldr	r3, [pc, #272]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800808a:	4b43      	ldr	r3, [pc, #268]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800808c:	2180      	movs	r1, #128	; 0x80
 800808e:	0549      	lsls	r1, r1, #21
 8008090:	430a      	orrs	r2, r1
 8008092:	63da      	str	r2, [r3, #60]	; 0x3c
 8008094:	4b40      	ldr	r3, [pc, #256]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008098:	2380      	movs	r3, #128	; 0x80
 800809a:	055b      	lsls	r3, r3, #21
 800809c:	4013      	ands	r3, r2
 800809e:	60bb      	str	r3, [r7, #8]
 80080a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080a2:	183b      	adds	r3, r7, r0
 80080a4:	2201      	movs	r2, #1
 80080a6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080a8:	4b3c      	ldr	r3, [pc, #240]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	4b3b      	ldr	r3, [pc, #236]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80080ae:	2180      	movs	r1, #128	; 0x80
 80080b0:	0049      	lsls	r1, r1, #1
 80080b2:	430a      	orrs	r2, r1
 80080b4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080b6:	f7fb fd73 	bl	8003ba0 <HAL_GetTick>
 80080ba:	0003      	movs	r3, r0
 80080bc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080be:	e00b      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080c0:	f7fb fd6e 	bl	8003ba0 <HAL_GetTick>
 80080c4:	0002      	movs	r2, r0
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d904      	bls.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80080ce:	2313      	movs	r3, #19
 80080d0:	18fb      	adds	r3, r7, r3
 80080d2:	2203      	movs	r2, #3
 80080d4:	701a      	strb	r2, [r3, #0]
        break;
 80080d6:	e005      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080d8:	4b30      	ldr	r3, [pc, #192]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	2380      	movs	r3, #128	; 0x80
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	4013      	ands	r3, r2
 80080e2:	d0ed      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80080e4:	2313      	movs	r3, #19
 80080e6:	18fb      	adds	r3, r7, r3
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d15e      	bne.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80080ee:	4b2a      	ldr	r3, [pc, #168]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80080f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080f2:	23c0      	movs	r3, #192	; 0xc0
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4013      	ands	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d019      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	429a      	cmp	r2, r3
 8008108:	d014      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800810a:	4b23      	ldr	r3, [pc, #140]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800810c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810e:	4a24      	ldr	r2, [pc, #144]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8008110:	4013      	ands	r3, r2
 8008112:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008114:	4b20      	ldr	r3, [pc, #128]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008116:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008118:	4b1f      	ldr	r3, [pc, #124]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800811a:	2180      	movs	r1, #128	; 0x80
 800811c:	0249      	lsls	r1, r1, #9
 800811e:	430a      	orrs	r2, r1
 8008120:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008122:	4b1d      	ldr	r3, [pc, #116]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008124:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008126:	4b1c      	ldr	r3, [pc, #112]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008128:	491e      	ldr	r1, [pc, #120]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800812a:	400a      	ands	r2, r1
 800812c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800812e:	4b1a      	ldr	r3, [pc, #104]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2201      	movs	r2, #1
 8008138:	4013      	ands	r3, r2
 800813a:	d016      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800813c:	f7fb fd30 	bl	8003ba0 <HAL_GetTick>
 8008140:	0003      	movs	r3, r0
 8008142:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008144:	e00c      	b.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008146:	f7fb fd2b 	bl	8003ba0 <HAL_GetTick>
 800814a:	0002      	movs	r2, r0
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	4a15      	ldr	r2, [pc, #84]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d904      	bls.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008156:	2313      	movs	r3, #19
 8008158:	18fb      	adds	r3, r7, r3
 800815a:	2203      	movs	r2, #3
 800815c:	701a      	strb	r2, [r3, #0]
            break;
 800815e:	e004      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008160:	4b0d      	ldr	r3, [pc, #52]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008164:	2202      	movs	r2, #2
 8008166:	4013      	ands	r3, r2
 8008168:	d0ed      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800816a:	2313      	movs	r3, #19
 800816c:	18fb      	adds	r3, r7, r3
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10a      	bne.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008174:	4b08      	ldr	r3, [pc, #32]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008178:	4a09      	ldr	r2, [pc, #36]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800817a:	4013      	ands	r3, r2
 800817c:	0019      	movs	r1, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008182:	4b05      	ldr	r3, [pc, #20]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008184:	430a      	orrs	r2, r1
 8008186:	65da      	str	r2, [r3, #92]	; 0x5c
 8008188:	e016      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800818a:	2312      	movs	r3, #18
 800818c:	18fb      	adds	r3, r7, r3
 800818e:	2213      	movs	r2, #19
 8008190:	18ba      	adds	r2, r7, r2
 8008192:	7812      	ldrb	r2, [r2, #0]
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e00f      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008198:	40021000 	.word	0x40021000
 800819c:	40007000 	.word	0x40007000
 80081a0:	fffffcff 	.word	0xfffffcff
 80081a4:	fffeffff 	.word	0xfffeffff
 80081a8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ac:	2312      	movs	r3, #18
 80081ae:	18fb      	adds	r3, r7, r3
 80081b0:	2213      	movs	r2, #19
 80081b2:	18ba      	adds	r2, r7, r2
 80081b4:	7812      	ldrb	r2, [r2, #0]
 80081b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80081b8:	2311      	movs	r3, #17
 80081ba:	18fb      	adds	r3, r7, r3
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d105      	bne.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081c2:	4bb6      	ldr	r3, [pc, #728]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80081c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c6:	4bb5      	ldr	r3, [pc, #724]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80081c8:	49b5      	ldr	r1, [pc, #724]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80081ca:	400a      	ands	r2, r1
 80081cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2201      	movs	r2, #1
 80081d4:	4013      	ands	r3, r2
 80081d6:	d009      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081d8:	4bb0      	ldr	r3, [pc, #704]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80081da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081dc:	2203      	movs	r2, #3
 80081de:	4393      	bics	r3, r2
 80081e0:	0019      	movs	r1, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	4bad      	ldr	r3, [pc, #692]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80081e8:	430a      	orrs	r2, r1
 80081ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2202      	movs	r2, #2
 80081f2:	4013      	ands	r3, r2
 80081f4:	d009      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081f6:	4ba9      	ldr	r3, [pc, #676]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80081f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fa:	220c      	movs	r2, #12
 80081fc:	4393      	bics	r3, r2
 80081fe:	0019      	movs	r1, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	4ba5      	ldr	r3, [pc, #660]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008206:	430a      	orrs	r2, r1
 8008208:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2204      	movs	r2, #4
 8008210:	4013      	ands	r3, r2
 8008212:	d009      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008214:	4ba1      	ldr	r3, [pc, #644]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008218:	2230      	movs	r2, #48	; 0x30
 800821a:	4393      	bics	r3, r2
 800821c:	0019      	movs	r1, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	4b9e      	ldr	r3, [pc, #632]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008224:	430a      	orrs	r2, r1
 8008226:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2210      	movs	r2, #16
 800822e:	4013      	ands	r3, r2
 8008230:	d009      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008232:	4b9a      	ldr	r3, [pc, #616]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008236:	4a9b      	ldr	r2, [pc, #620]	; (80084a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8008238:	4013      	ands	r3, r2
 800823a:	0019      	movs	r1, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	4b96      	ldr	r3, [pc, #600]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008242:	430a      	orrs	r2, r1
 8008244:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	2380      	movs	r3, #128	; 0x80
 800824c:	015b      	lsls	r3, r3, #5
 800824e:	4013      	ands	r3, r2
 8008250:	d009      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8008252:	4b92      	ldr	r3, [pc, #584]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008256:	4a94      	ldr	r2, [pc, #592]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008258:	4013      	ands	r3, r2
 800825a:	0019      	movs	r1, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	695a      	ldr	r2, [r3, #20]
 8008260:	4b8e      	ldr	r3, [pc, #568]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008262:	430a      	orrs	r2, r1
 8008264:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	2380      	movs	r3, #128	; 0x80
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4013      	ands	r3, r2
 8008270:	d009      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008272:	4b8a      	ldr	r3, [pc, #552]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008276:	4a8d      	ldr	r2, [pc, #564]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8008278:	4013      	ands	r3, r2
 800827a:	0019      	movs	r1, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008280:	4b86      	ldr	r3, [pc, #536]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008282:	430a      	orrs	r2, r1
 8008284:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	2380      	movs	r3, #128	; 0x80
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	4013      	ands	r3, r2
 8008290:	d009      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008292:	4b82      	ldr	r3, [pc, #520]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008296:	4a86      	ldr	r2, [pc, #536]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8008298:	4013      	ands	r3, r2
 800829a:	0019      	movs	r1, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a0:	4b7e      	ldr	r3, [pc, #504]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80082a2:	430a      	orrs	r2, r1
 80082a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2220      	movs	r2, #32
 80082ac:	4013      	ands	r3, r2
 80082ae:	d009      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80082b0:	4b7a      	ldr	r3, [pc, #488]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80082b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b4:	4a7f      	ldr	r2, [pc, #508]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80082b6:	4013      	ands	r3, r2
 80082b8:	0019      	movs	r1, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	4b77      	ldr	r3, [pc, #476]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80082c0:	430a      	orrs	r2, r1
 80082c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2240      	movs	r2, #64	; 0x40
 80082ca:	4013      	ands	r3, r2
 80082cc:	d009      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80082ce:	4b73      	ldr	r3, [pc, #460]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80082d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d2:	4a79      	ldr	r2, [pc, #484]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80082d4:	4013      	ands	r3, r2
 80082d6:	0019      	movs	r1, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	69da      	ldr	r2, [r3, #28]
 80082dc:	4b6f      	ldr	r3, [pc, #444]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80082de:	430a      	orrs	r2, r1
 80082e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	2380      	movs	r3, #128	; 0x80
 80082e8:	01db      	lsls	r3, r3, #7
 80082ea:	4013      	ands	r3, r2
 80082ec:	d015      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082ee:	4b6b      	ldr	r3, [pc, #428]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80082f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	0899      	lsrs	r1, r3, #2
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082fa:	4b68      	ldr	r3, [pc, #416]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80082fc:	430a      	orrs	r2, r1
 80082fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008304:	2380      	movs	r3, #128	; 0x80
 8008306:	05db      	lsls	r3, r3, #23
 8008308:	429a      	cmp	r2, r3
 800830a:	d106      	bne.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800830c:	4b63      	ldr	r3, [pc, #396]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	4b62      	ldr	r3, [pc, #392]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008312:	2180      	movs	r1, #128	; 0x80
 8008314:	0249      	lsls	r1, r1, #9
 8008316:	430a      	orrs	r2, r1
 8008318:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	2380      	movs	r3, #128	; 0x80
 8008320:	031b      	lsls	r3, r3, #12
 8008322:	4013      	ands	r3, r2
 8008324:	d009      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008326:	4b5d      	ldr	r3, [pc, #372]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832a:	2240      	movs	r2, #64	; 0x40
 800832c:	4393      	bics	r3, r2
 800832e:	0019      	movs	r1, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008334:	4b59      	ldr	r3, [pc, #356]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008336:	430a      	orrs	r2, r1
 8008338:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	2380      	movs	r3, #128	; 0x80
 8008340:	039b      	lsls	r3, r3, #14
 8008342:	4013      	ands	r3, r2
 8008344:	d016      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008346:	4b55      	ldr	r3, [pc, #340]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834a:	4a5c      	ldr	r2, [pc, #368]	; (80084bc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800834c:	4013      	ands	r3, r2
 800834e:	0019      	movs	r1, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008354:	4b51      	ldr	r3, [pc, #324]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008356:	430a      	orrs	r2, r1
 8008358:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800835e:	2380      	movs	r3, #128	; 0x80
 8008360:	03db      	lsls	r3, r3, #15
 8008362:	429a      	cmp	r2, r3
 8008364:	d106      	bne.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008366:	4b4d      	ldr	r3, [pc, #308]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	4b4c      	ldr	r3, [pc, #304]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800836c:	2180      	movs	r1, #128	; 0x80
 800836e:	0449      	lsls	r1, r1, #17
 8008370:	430a      	orrs	r2, r1
 8008372:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	2380      	movs	r3, #128	; 0x80
 800837a:	03db      	lsls	r3, r3, #15
 800837c:	4013      	ands	r3, r2
 800837e:	d016      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008380:	4b46      	ldr	r3, [pc, #280]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008384:	4a4e      	ldr	r2, [pc, #312]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008386:	4013      	ands	r3, r2
 8008388:	0019      	movs	r1, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800838e:	4b43      	ldr	r3, [pc, #268]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008390:	430a      	orrs	r2, r1
 8008392:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008398:	2380      	movs	r3, #128	; 0x80
 800839a:	045b      	lsls	r3, r3, #17
 800839c:	429a      	cmp	r2, r3
 800839e:	d106      	bne.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80083a0:	4b3e      	ldr	r3, [pc, #248]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	4b3d      	ldr	r3, [pc, #244]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80083a6:	2180      	movs	r1, #128	; 0x80
 80083a8:	0449      	lsls	r1, r1, #17
 80083aa:	430a      	orrs	r2, r1
 80083ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	2380      	movs	r3, #128	; 0x80
 80083b4:	011b      	lsls	r3, r3, #4
 80083b6:	4013      	ands	r3, r2
 80083b8:	d014      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80083ba:	4b38      	ldr	r3, [pc, #224]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80083bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083be:	2203      	movs	r2, #3
 80083c0:	4393      	bics	r3, r2
 80083c2:	0019      	movs	r1, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1a      	ldr	r2, [r3, #32]
 80083c8:	4b34      	ldr	r3, [pc, #208]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80083ca:	430a      	orrs	r2, r1
 80083cc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d106      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80083d6:	4b31      	ldr	r3, [pc, #196]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	4b30      	ldr	r3, [pc, #192]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80083dc:	2180      	movs	r1, #128	; 0x80
 80083de:	0249      	lsls	r1, r1, #9
 80083e0:	430a      	orrs	r2, r1
 80083e2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	2380      	movs	r3, #128	; 0x80
 80083ea:	019b      	lsls	r3, r3, #6
 80083ec:	4013      	ands	r3, r2
 80083ee:	d014      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80083f0:	4b2a      	ldr	r3, [pc, #168]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80083f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f4:	220c      	movs	r2, #12
 80083f6:	4393      	bics	r3, r2
 80083f8:	0019      	movs	r1, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083fe:	4b27      	ldr	r3, [pc, #156]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008400:	430a      	orrs	r2, r1
 8008402:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	2b04      	cmp	r3, #4
 800840a:	d106      	bne.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800840c:	4b23      	ldr	r3, [pc, #140]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	4b22      	ldr	r3, [pc, #136]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008412:	2180      	movs	r1, #128	; 0x80
 8008414:	0249      	lsls	r1, r1, #9
 8008416:	430a      	orrs	r2, r1
 8008418:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	2380      	movs	r3, #128	; 0x80
 8008420:	045b      	lsls	r3, r3, #17
 8008422:	4013      	ands	r3, r2
 8008424:	d016      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008426:	4b1d      	ldr	r3, [pc, #116]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842a:	4a22      	ldr	r2, [pc, #136]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800842c:	4013      	ands	r3, r2
 800842e:	0019      	movs	r1, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008434:	4b19      	ldr	r3, [pc, #100]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008436:	430a      	orrs	r2, r1
 8008438:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800843e:	2380      	movs	r3, #128	; 0x80
 8008440:	019b      	lsls	r3, r3, #6
 8008442:	429a      	cmp	r2, r3
 8008444:	d106      	bne.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008446:	4b15      	ldr	r3, [pc, #84]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008448:	68da      	ldr	r2, [r3, #12]
 800844a:	4b14      	ldr	r3, [pc, #80]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800844c:	2180      	movs	r1, #128	; 0x80
 800844e:	0449      	lsls	r1, r1, #17
 8008450:	430a      	orrs	r2, r1
 8008452:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	2380      	movs	r3, #128	; 0x80
 800845a:	049b      	lsls	r3, r3, #18
 800845c:	4013      	ands	r3, r2
 800845e:	d016      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008460:	4b0e      	ldr	r3, [pc, #56]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008464:	4a10      	ldr	r2, [pc, #64]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008466:	4013      	ands	r3, r2
 8008468:	0019      	movs	r1, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800846e:	4b0b      	ldr	r3, [pc, #44]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008470:	430a      	orrs	r2, r1
 8008472:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008478:	2380      	movs	r3, #128	; 0x80
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	429a      	cmp	r2, r3
 800847e:	d106      	bne.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008480:	4b06      	ldr	r3, [pc, #24]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	4b05      	ldr	r3, [pc, #20]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008486:	2180      	movs	r1, #128	; 0x80
 8008488:	0449      	lsls	r1, r1, #17
 800848a:	430a      	orrs	r2, r1
 800848c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800848e:	2312      	movs	r3, #18
 8008490:	18fb      	adds	r3, r7, r3
 8008492:	781b      	ldrb	r3, [r3, #0]
}
 8008494:	0018      	movs	r0, r3
 8008496:	46bd      	mov	sp, r7
 8008498:	b006      	add	sp, #24
 800849a:	bd80      	pop	{r7, pc}
 800849c:	40021000 	.word	0x40021000
 80084a0:	efffffff 	.word	0xefffffff
 80084a4:	fffff3ff 	.word	0xfffff3ff
 80084a8:	fffffcff 	.word	0xfffffcff
 80084ac:	fff3ffff 	.word	0xfff3ffff
 80084b0:	ffcfffff 	.word	0xffcfffff
 80084b4:	ffffcfff 	.word	0xffffcfff
 80084b8:	ffff3fff 	.word	0xffff3fff
 80084bc:	ffbfffff 	.word	0xffbfffff
 80084c0:	feffffff 	.word	0xfeffffff

080084c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e04a      	b.n	800856c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	223d      	movs	r2, #61	; 0x3d
 80084da:	5c9b      	ldrb	r3, [r3, r2]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d107      	bne.n	80084f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	223c      	movs	r2, #60	; 0x3c
 80084e6:	2100      	movs	r1, #0
 80084e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	0018      	movs	r0, r3
 80084ee:	f7fa fea5 	bl	800323c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	223d      	movs	r2, #61	; 0x3d
 80084f6:	2102      	movs	r1, #2
 80084f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3304      	adds	r3, #4
 8008502:	0019      	movs	r1, r3
 8008504:	0010      	movs	r0, r2
 8008506:	f000 f92b 	bl	8008760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2248      	movs	r2, #72	; 0x48
 800850e:	2101      	movs	r1, #1
 8008510:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	223e      	movs	r2, #62	; 0x3e
 8008516:	2101      	movs	r1, #1
 8008518:	5499      	strb	r1, [r3, r2]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	223f      	movs	r2, #63	; 0x3f
 800851e:	2101      	movs	r1, #1
 8008520:	5499      	strb	r1, [r3, r2]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2240      	movs	r2, #64	; 0x40
 8008526:	2101      	movs	r1, #1
 8008528:	5499      	strb	r1, [r3, r2]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2241      	movs	r2, #65	; 0x41
 800852e:	2101      	movs	r1, #1
 8008530:	5499      	strb	r1, [r3, r2]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2242      	movs	r2, #66	; 0x42
 8008536:	2101      	movs	r1, #1
 8008538:	5499      	strb	r1, [r3, r2]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2243      	movs	r2, #67	; 0x43
 800853e:	2101      	movs	r1, #1
 8008540:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2244      	movs	r2, #68	; 0x44
 8008546:	2101      	movs	r1, #1
 8008548:	5499      	strb	r1, [r3, r2]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2245      	movs	r2, #69	; 0x45
 800854e:	2101      	movs	r1, #1
 8008550:	5499      	strb	r1, [r3, r2]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2246      	movs	r2, #70	; 0x46
 8008556:	2101      	movs	r1, #1
 8008558:	5499      	strb	r1, [r3, r2]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2247      	movs	r2, #71	; 0x47
 800855e:	2101      	movs	r1, #1
 8008560:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	223d      	movs	r2, #61	; 0x3d
 8008566:	2101      	movs	r1, #1
 8008568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	0018      	movs	r0, r3
 800856e:	46bd      	mov	sp, r7
 8008570:	b002      	add	sp, #8
 8008572:	bd80      	pop	{r7, pc}

08008574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	223c      	movs	r2, #60	; 0x3c
 8008584:	5c9b      	ldrb	r3, [r3, r2]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d101      	bne.n	800858e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800858a:	2302      	movs	r3, #2
 800858c:	e0df      	b.n	800874e <HAL_TIM_PWM_ConfigChannel+0x1da>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	223c      	movs	r2, #60	; 0x3c
 8008592:	2101      	movs	r1, #1
 8008594:	5499      	strb	r1, [r3, r2]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b14      	cmp	r3, #20
 800859a:	d900      	bls.n	800859e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800859c:	e0d1      	b.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	009a      	lsls	r2, r3, #2
 80085a2:	4b6d      	ldr	r3, [pc, #436]	; (8008758 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80085a4:	18d3      	adds	r3, r2, r3
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	0011      	movs	r1, r2
 80085b2:	0018      	movs	r0, r3
 80085b4:	f000 f95e 	bl	8008874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	699a      	ldr	r2, [r3, #24]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2108      	movs	r1, #8
 80085c4:	430a      	orrs	r2, r1
 80085c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2104      	movs	r1, #4
 80085d4:	438a      	bics	r2, r1
 80085d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6999      	ldr	r1, [r3, #24]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	691a      	ldr	r2, [r3, #16]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	619a      	str	r2, [r3, #24]
      break;
 80085ea:	e0ab      	b.n	8008744 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	0011      	movs	r1, r2
 80085f4:	0018      	movs	r0, r3
 80085f6:	f000 f9c7 	bl	8008988 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	699a      	ldr	r2, [r3, #24]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2180      	movs	r1, #128	; 0x80
 8008606:	0109      	lsls	r1, r1, #4
 8008608:	430a      	orrs	r2, r1
 800860a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699a      	ldr	r2, [r3, #24]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4951      	ldr	r1, [pc, #324]	; (800875c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008618:	400a      	ands	r2, r1
 800861a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6999      	ldr	r1, [r3, #24]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	021a      	lsls	r2, r3, #8
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	619a      	str	r2, [r3, #24]
      break;
 8008630:	e088      	b.n	8008744 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	0011      	movs	r1, r2
 800863a:	0018      	movs	r0, r3
 800863c:	f000 fa28 	bl	8008a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	69da      	ldr	r2, [r3, #28]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2108      	movs	r1, #8
 800864c:	430a      	orrs	r2, r1
 800864e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	69da      	ldr	r2, [r3, #28]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2104      	movs	r1, #4
 800865c:	438a      	bics	r2, r1
 800865e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	69d9      	ldr	r1, [r3, #28]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	691a      	ldr	r2, [r3, #16]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	61da      	str	r2, [r3, #28]
      break;
 8008672:	e067      	b.n	8008744 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	0011      	movs	r1, r2
 800867c:	0018      	movs	r0, r3
 800867e:	f000 fa8f 	bl	8008ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69da      	ldr	r2, [r3, #28]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2180      	movs	r1, #128	; 0x80
 800868e:	0109      	lsls	r1, r1, #4
 8008690:	430a      	orrs	r2, r1
 8008692:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69da      	ldr	r2, [r3, #28]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	492f      	ldr	r1, [pc, #188]	; (800875c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80086a0:	400a      	ands	r2, r1
 80086a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	69d9      	ldr	r1, [r3, #28]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	021a      	lsls	r2, r3, #8
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	430a      	orrs	r2, r1
 80086b6:	61da      	str	r2, [r3, #28]
      break;
 80086b8:	e044      	b.n	8008744 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	0011      	movs	r1, r2
 80086c2:	0018      	movs	r0, r3
 80086c4:	f000 fad6 	bl	8008c74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2108      	movs	r1, #8
 80086d4:	430a      	orrs	r2, r1
 80086d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2104      	movs	r1, #4
 80086e4:	438a      	bics	r2, r1
 80086e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	691a      	ldr	r2, [r3, #16]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086fa:	e023      	b.n	8008744 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	0011      	movs	r1, r2
 8008704:	0018      	movs	r0, r3
 8008706:	f000 fb15 	bl	8008d34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2180      	movs	r1, #128	; 0x80
 8008716:	0109      	lsls	r1, r1, #4
 8008718:	430a      	orrs	r2, r1
 800871a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	490d      	ldr	r1, [pc, #52]	; (800875c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008728:	400a      	ands	r2, r1
 800872a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	021a      	lsls	r2, r3, #8
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008740:	e000      	b.n	8008744 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8008742:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	223c      	movs	r2, #60	; 0x3c
 8008748:	2100      	movs	r1, #0
 800874a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	0018      	movs	r0, r3
 8008750:	46bd      	mov	sp, r7
 8008752:	b004      	add	sp, #16
 8008754:	bd80      	pop	{r7, pc}
 8008756:	46c0      	nop			; (mov r8, r8)
 8008758:	0800d81c 	.word	0x0800d81c
 800875c:	fffffbff 	.word	0xfffffbff

08008760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a38      	ldr	r2, [pc, #224]	; (8008854 <TIM_Base_SetConfig+0xf4>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d00c      	beq.n	8008792 <TIM_Base_SetConfig+0x32>
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	2380      	movs	r3, #128	; 0x80
 800877c:	05db      	lsls	r3, r3, #23
 800877e:	429a      	cmp	r2, r3
 8008780:	d007      	beq.n	8008792 <TIM_Base_SetConfig+0x32>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a34      	ldr	r2, [pc, #208]	; (8008858 <TIM_Base_SetConfig+0xf8>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d003      	beq.n	8008792 <TIM_Base_SetConfig+0x32>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a33      	ldr	r2, [pc, #204]	; (800885c <TIM_Base_SetConfig+0xfc>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d108      	bne.n	80087a4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2270      	movs	r2, #112	; 0x70
 8008796:	4393      	bics	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a2b      	ldr	r2, [pc, #172]	; (8008854 <TIM_Base_SetConfig+0xf4>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d01c      	beq.n	80087e6 <TIM_Base_SetConfig+0x86>
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	2380      	movs	r3, #128	; 0x80
 80087b0:	05db      	lsls	r3, r3, #23
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d017      	beq.n	80087e6 <TIM_Base_SetConfig+0x86>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a27      	ldr	r2, [pc, #156]	; (8008858 <TIM_Base_SetConfig+0xf8>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d013      	beq.n	80087e6 <TIM_Base_SetConfig+0x86>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a26      	ldr	r2, [pc, #152]	; (800885c <TIM_Base_SetConfig+0xfc>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d00f      	beq.n	80087e6 <TIM_Base_SetConfig+0x86>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a25      	ldr	r2, [pc, #148]	; (8008860 <TIM_Base_SetConfig+0x100>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d00b      	beq.n	80087e6 <TIM_Base_SetConfig+0x86>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a24      	ldr	r2, [pc, #144]	; (8008864 <TIM_Base_SetConfig+0x104>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d007      	beq.n	80087e6 <TIM_Base_SetConfig+0x86>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a23      	ldr	r2, [pc, #140]	; (8008868 <TIM_Base_SetConfig+0x108>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d003      	beq.n	80087e6 <TIM_Base_SetConfig+0x86>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a22      	ldr	r2, [pc, #136]	; (800886c <TIM_Base_SetConfig+0x10c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d108      	bne.n	80087f8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4a21      	ldr	r2, [pc, #132]	; (8008870 <TIM_Base_SetConfig+0x110>)
 80087ea:	4013      	ands	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2280      	movs	r2, #128	; 0x80
 80087fc:	4393      	bics	r3, r2
 80087fe:	001a      	movs	r2, r3
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a0c      	ldr	r2, [pc, #48]	; (8008854 <TIM_Base_SetConfig+0xf4>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d00b      	beq.n	800883e <TIM_Base_SetConfig+0xde>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a0e      	ldr	r2, [pc, #56]	; (8008864 <TIM_Base_SetConfig+0x104>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d007      	beq.n	800883e <TIM_Base_SetConfig+0xde>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a0d      	ldr	r2, [pc, #52]	; (8008868 <TIM_Base_SetConfig+0x108>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d003      	beq.n	800883e <TIM_Base_SetConfig+0xde>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a0c      	ldr	r2, [pc, #48]	; (800886c <TIM_Base_SetConfig+0x10c>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d103      	bne.n	8008846 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	691a      	ldr	r2, [r3, #16]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	615a      	str	r2, [r3, #20]
}
 800884c:	46c0      	nop			; (mov r8, r8)
 800884e:	46bd      	mov	sp, r7
 8008850:	b004      	add	sp, #16
 8008852:	bd80      	pop	{r7, pc}
 8008854:	40012c00 	.word	0x40012c00
 8008858:	40000400 	.word	0x40000400
 800885c:	40000800 	.word	0x40000800
 8008860:	40002000 	.word	0x40002000
 8008864:	40014000 	.word	0x40014000
 8008868:	40014400 	.word	0x40014400
 800886c:	40014800 	.word	0x40014800
 8008870:	fffffcff 	.word	0xfffffcff

08008874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	2201      	movs	r2, #1
 8008884:	4393      	bics	r3, r2
 8008886:	001a      	movs	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a1b      	ldr	r3, [r3, #32]
 8008890:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	4a32      	ldr	r2, [pc, #200]	; (800896c <TIM_OC1_SetConfig+0xf8>)
 80088a2:	4013      	ands	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2203      	movs	r2, #3
 80088aa:	4393      	bics	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2202      	movs	r2, #2
 80088bc:	4393      	bics	r3, r2
 80088be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a28      	ldr	r2, [pc, #160]	; (8008970 <TIM_OC1_SetConfig+0xfc>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d00b      	beq.n	80088ea <TIM_OC1_SetConfig+0x76>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a27      	ldr	r2, [pc, #156]	; (8008974 <TIM_OC1_SetConfig+0x100>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d007      	beq.n	80088ea <TIM_OC1_SetConfig+0x76>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a26      	ldr	r2, [pc, #152]	; (8008978 <TIM_OC1_SetConfig+0x104>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d003      	beq.n	80088ea <TIM_OC1_SetConfig+0x76>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a25      	ldr	r2, [pc, #148]	; (800897c <TIM_OC1_SetConfig+0x108>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d10c      	bne.n	8008904 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2208      	movs	r2, #8
 80088ee:	4393      	bics	r3, r2
 80088f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2204      	movs	r2, #4
 8008900:	4393      	bics	r3, r2
 8008902:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a1a      	ldr	r2, [pc, #104]	; (8008970 <TIM_OC1_SetConfig+0xfc>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00b      	beq.n	8008924 <TIM_OC1_SetConfig+0xb0>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a19      	ldr	r2, [pc, #100]	; (8008974 <TIM_OC1_SetConfig+0x100>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d007      	beq.n	8008924 <TIM_OC1_SetConfig+0xb0>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a18      	ldr	r2, [pc, #96]	; (8008978 <TIM_OC1_SetConfig+0x104>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d003      	beq.n	8008924 <TIM_OC1_SetConfig+0xb0>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a17      	ldr	r2, [pc, #92]	; (800897c <TIM_OC1_SetConfig+0x108>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d111      	bne.n	8008948 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	4a16      	ldr	r2, [pc, #88]	; (8008980 <TIM_OC1_SetConfig+0x10c>)
 8008928:	4013      	ands	r3, r2
 800892a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	4a15      	ldr	r2, [pc, #84]	; (8008984 <TIM_OC1_SetConfig+0x110>)
 8008930:	4013      	ands	r3, r2
 8008932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	4313      	orrs	r3, r2
 800893c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	621a      	str	r2, [r3, #32]
}
 8008962:	46c0      	nop			; (mov r8, r8)
 8008964:	46bd      	mov	sp, r7
 8008966:	b006      	add	sp, #24
 8008968:	bd80      	pop	{r7, pc}
 800896a:	46c0      	nop			; (mov r8, r8)
 800896c:	fffeff8f 	.word	0xfffeff8f
 8008970:	40012c00 	.word	0x40012c00
 8008974:	40014000 	.word	0x40014000
 8008978:	40014400 	.word	0x40014400
 800897c:	40014800 	.word	0x40014800
 8008980:	fffffeff 	.word	0xfffffeff
 8008984:	fffffdff 	.word	0xfffffdff

08008988 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	2210      	movs	r2, #16
 8008998:	4393      	bics	r3, r2
 800899a:	001a      	movs	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4a2e      	ldr	r2, [pc, #184]	; (8008a70 <TIM_OC2_SetConfig+0xe8>)
 80089b6:	4013      	ands	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	4a2d      	ldr	r2, [pc, #180]	; (8008a74 <TIM_OC2_SetConfig+0xec>)
 80089be:	4013      	ands	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	021b      	lsls	r3, r3, #8
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2220      	movs	r2, #32
 80089d2:	4393      	bics	r3, r2
 80089d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a24      	ldr	r2, [pc, #144]	; (8008a78 <TIM_OC2_SetConfig+0xf0>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d10d      	bne.n	8008a06 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2280      	movs	r2, #128	; 0x80
 80089ee:	4393      	bics	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	011b      	lsls	r3, r3, #4
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2240      	movs	r2, #64	; 0x40
 8008a02:	4393      	bics	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a1b      	ldr	r2, [pc, #108]	; (8008a78 <TIM_OC2_SetConfig+0xf0>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d00b      	beq.n	8008a26 <TIM_OC2_SetConfig+0x9e>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a1a      	ldr	r2, [pc, #104]	; (8008a7c <TIM_OC2_SetConfig+0xf4>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d007      	beq.n	8008a26 <TIM_OC2_SetConfig+0x9e>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a19      	ldr	r2, [pc, #100]	; (8008a80 <TIM_OC2_SetConfig+0xf8>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d003      	beq.n	8008a26 <TIM_OC2_SetConfig+0x9e>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a18      	ldr	r2, [pc, #96]	; (8008a84 <TIM_OC2_SetConfig+0xfc>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d113      	bne.n	8008a4e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	4a17      	ldr	r2, [pc, #92]	; (8008a88 <TIM_OC2_SetConfig+0x100>)
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	4a16      	ldr	r2, [pc, #88]	; (8008a8c <TIM_OC2_SetConfig+0x104>)
 8008a32:	4013      	ands	r3, r2
 8008a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	621a      	str	r2, [r3, #32]
}
 8008a68:	46c0      	nop			; (mov r8, r8)
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	b006      	add	sp, #24
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	feff8fff 	.word	0xfeff8fff
 8008a74:	fffffcff 	.word	0xfffffcff
 8008a78:	40012c00 	.word	0x40012c00
 8008a7c:	40014000 	.word	0x40014000
 8008a80:	40014400 	.word	0x40014400
 8008a84:	40014800 	.word	0x40014800
 8008a88:	fffffbff 	.word	0xfffffbff
 8008a8c:	fffff7ff 	.word	0xfffff7ff

08008a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	4a35      	ldr	r2, [pc, #212]	; (8008b74 <TIM_OC3_SetConfig+0xe4>)
 8008aa0:	401a      	ands	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4a2f      	ldr	r2, [pc, #188]	; (8008b78 <TIM_OC3_SetConfig+0xe8>)
 8008abc:	4013      	ands	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2203      	movs	r2, #3
 8008ac4:	4393      	bics	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	4a29      	ldr	r2, [pc, #164]	; (8008b7c <TIM_OC3_SetConfig+0xec>)
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	021b      	lsls	r3, r3, #8
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a25      	ldr	r2, [pc, #148]	; (8008b80 <TIM_OC3_SetConfig+0xf0>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d10d      	bne.n	8008b0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	4a24      	ldr	r2, [pc, #144]	; (8008b84 <TIM_OC3_SetConfig+0xf4>)
 8008af2:	4013      	ands	r3, r2
 8008af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	021b      	lsls	r3, r3, #8
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	4a20      	ldr	r2, [pc, #128]	; (8008b88 <TIM_OC3_SetConfig+0xf8>)
 8008b06:	4013      	ands	r3, r2
 8008b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a1c      	ldr	r2, [pc, #112]	; (8008b80 <TIM_OC3_SetConfig+0xf0>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d00b      	beq.n	8008b2a <TIM_OC3_SetConfig+0x9a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a1d      	ldr	r2, [pc, #116]	; (8008b8c <TIM_OC3_SetConfig+0xfc>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d007      	beq.n	8008b2a <TIM_OC3_SetConfig+0x9a>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a1c      	ldr	r2, [pc, #112]	; (8008b90 <TIM_OC3_SetConfig+0x100>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d003      	beq.n	8008b2a <TIM_OC3_SetConfig+0x9a>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a1b      	ldr	r2, [pc, #108]	; (8008b94 <TIM_OC3_SetConfig+0x104>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d113      	bne.n	8008b52 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	4a1a      	ldr	r2, [pc, #104]	; (8008b98 <TIM_OC3_SetConfig+0x108>)
 8008b2e:	4013      	ands	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	4a19      	ldr	r2, [pc, #100]	; (8008b9c <TIM_OC3_SetConfig+0x10c>)
 8008b36:	4013      	ands	r3, r2
 8008b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	621a      	str	r2, [r3, #32]
}
 8008b6c:	46c0      	nop			; (mov r8, r8)
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	b006      	add	sp, #24
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	fffffeff 	.word	0xfffffeff
 8008b78:	fffeff8f 	.word	0xfffeff8f
 8008b7c:	fffffdff 	.word	0xfffffdff
 8008b80:	40012c00 	.word	0x40012c00
 8008b84:	fffff7ff 	.word	0xfffff7ff
 8008b88:	fffffbff 	.word	0xfffffbff
 8008b8c:	40014000 	.word	0x40014000
 8008b90:	40014400 	.word	0x40014400
 8008b94:	40014800 	.word	0x40014800
 8008b98:	ffffefff 	.word	0xffffefff
 8008b9c:	ffffdfff 	.word	0xffffdfff

08008ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a1b      	ldr	r3, [r3, #32]
 8008bae:	4a28      	ldr	r2, [pc, #160]	; (8008c50 <TIM_OC4_SetConfig+0xb0>)
 8008bb0:	401a      	ands	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	69db      	ldr	r3, [r3, #28]
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4a22      	ldr	r2, [pc, #136]	; (8008c54 <TIM_OC4_SetConfig+0xb4>)
 8008bcc:	4013      	ands	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4a21      	ldr	r2, [pc, #132]	; (8008c58 <TIM_OC4_SetConfig+0xb8>)
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	021b      	lsls	r3, r3, #8
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	4a1d      	ldr	r2, [pc, #116]	; (8008c5c <TIM_OC4_SetConfig+0xbc>)
 8008be8:	4013      	ands	r3, r2
 8008bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	031b      	lsls	r3, r3, #12
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a19      	ldr	r2, [pc, #100]	; (8008c60 <TIM_OC4_SetConfig+0xc0>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d00b      	beq.n	8008c18 <TIM_OC4_SetConfig+0x78>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a18      	ldr	r2, [pc, #96]	; (8008c64 <TIM_OC4_SetConfig+0xc4>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d007      	beq.n	8008c18 <TIM_OC4_SetConfig+0x78>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <TIM_OC4_SetConfig+0xc8>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d003      	beq.n	8008c18 <TIM_OC4_SetConfig+0x78>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a16      	ldr	r2, [pc, #88]	; (8008c6c <TIM_OC4_SetConfig+0xcc>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d109      	bne.n	8008c2c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	4a15      	ldr	r2, [pc, #84]	; (8008c70 <TIM_OC4_SetConfig+0xd0>)
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	019b      	lsls	r3, r3, #6
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	621a      	str	r2, [r3, #32]
}
 8008c46:	46c0      	nop			; (mov r8, r8)
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	b006      	add	sp, #24
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	46c0      	nop			; (mov r8, r8)
 8008c50:	ffffefff 	.word	0xffffefff
 8008c54:	feff8fff 	.word	0xfeff8fff
 8008c58:	fffffcff 	.word	0xfffffcff
 8008c5c:	ffffdfff 	.word	0xffffdfff
 8008c60:	40012c00 	.word	0x40012c00
 8008c64:	40014000 	.word	0x40014000
 8008c68:	40014400 	.word	0x40014400
 8008c6c:	40014800 	.word	0x40014800
 8008c70:	ffffbfff 	.word	0xffffbfff

08008c74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	4a25      	ldr	r2, [pc, #148]	; (8008d18 <TIM_OC5_SetConfig+0xa4>)
 8008c84:	401a      	ands	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4a1f      	ldr	r2, [pc, #124]	; (8008d1c <TIM_OC5_SetConfig+0xa8>)
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	4a1b      	ldr	r2, [pc, #108]	; (8008d20 <TIM_OC5_SetConfig+0xac>)
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	041b      	lsls	r3, r3, #16
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a17      	ldr	r2, [pc, #92]	; (8008d24 <TIM_OC5_SetConfig+0xb0>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00b      	beq.n	8008ce2 <TIM_OC5_SetConfig+0x6e>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a16      	ldr	r2, [pc, #88]	; (8008d28 <TIM_OC5_SetConfig+0xb4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d007      	beq.n	8008ce2 <TIM_OC5_SetConfig+0x6e>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a15      	ldr	r2, [pc, #84]	; (8008d2c <TIM_OC5_SetConfig+0xb8>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d003      	beq.n	8008ce2 <TIM_OC5_SetConfig+0x6e>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a14      	ldr	r2, [pc, #80]	; (8008d30 <TIM_OC5_SetConfig+0xbc>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d109      	bne.n	8008cf6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	4a0c      	ldr	r2, [pc, #48]	; (8008d18 <TIM_OC5_SetConfig+0xa4>)
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	021b      	lsls	r3, r3, #8
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	621a      	str	r2, [r3, #32]
}
 8008d10:	46c0      	nop			; (mov r8, r8)
 8008d12:	46bd      	mov	sp, r7
 8008d14:	b006      	add	sp, #24
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	fffeffff 	.word	0xfffeffff
 8008d1c:	fffeff8f 	.word	0xfffeff8f
 8008d20:	fffdffff 	.word	0xfffdffff
 8008d24:	40012c00 	.word	0x40012c00
 8008d28:	40014000 	.word	0x40014000
 8008d2c:	40014400 	.word	0x40014400
 8008d30:	40014800 	.word	0x40014800

08008d34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	4a26      	ldr	r2, [pc, #152]	; (8008ddc <TIM_OC6_SetConfig+0xa8>)
 8008d44:	401a      	ands	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4a20      	ldr	r2, [pc, #128]	; (8008de0 <TIM_OC6_SetConfig+0xac>)
 8008d60:	4013      	ands	r3, r2
 8008d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	4a1c      	ldr	r2, [pc, #112]	; (8008de4 <TIM_OC6_SetConfig+0xb0>)
 8008d74:	4013      	ands	r3, r2
 8008d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	051b      	lsls	r3, r3, #20
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a18      	ldr	r2, [pc, #96]	; (8008de8 <TIM_OC6_SetConfig+0xb4>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d00b      	beq.n	8008da4 <TIM_OC6_SetConfig+0x70>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a17      	ldr	r2, [pc, #92]	; (8008dec <TIM_OC6_SetConfig+0xb8>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d007      	beq.n	8008da4 <TIM_OC6_SetConfig+0x70>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a16      	ldr	r2, [pc, #88]	; (8008df0 <TIM_OC6_SetConfig+0xbc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d003      	beq.n	8008da4 <TIM_OC6_SetConfig+0x70>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a15      	ldr	r2, [pc, #84]	; (8008df4 <TIM_OC6_SetConfig+0xc0>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d109      	bne.n	8008db8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	4a14      	ldr	r2, [pc, #80]	; (8008df8 <TIM_OC6_SetConfig+0xc4>)
 8008da8:	4013      	ands	r3, r2
 8008daa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	029b      	lsls	r3, r3, #10
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	621a      	str	r2, [r3, #32]
}
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	b006      	add	sp, #24
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	46c0      	nop			; (mov r8, r8)
 8008ddc:	ffefffff 	.word	0xffefffff
 8008de0:	feff8fff 	.word	0xfeff8fff
 8008de4:	ffdfffff 	.word	0xffdfffff
 8008de8:	40012c00 	.word	0x40012c00
 8008dec:	40014000 	.word	0x40014000
 8008df0:	40014400 	.word	0x40014400
 8008df4:	40014800 	.word	0x40014800
 8008df8:	fffbffff 	.word	0xfffbffff

08008dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	223c      	movs	r2, #60	; 0x3c
 8008e0a:	5c9b      	ldrb	r3, [r3, r2]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d101      	bne.n	8008e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e05a      	b.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	223c      	movs	r2, #60	; 0x3c
 8008e18:	2101      	movs	r1, #1
 8008e1a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	223d      	movs	r2, #61	; 0x3d
 8008e20:	2102      	movs	r1, #2
 8008e22:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a26      	ldr	r2, [pc, #152]	; (8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d108      	bne.n	8008e50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4a25      	ldr	r2, [pc, #148]	; (8008ed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e42:	4013      	ands	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2270      	movs	r2, #112	; 0x70
 8008e54:	4393      	bics	r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a19      	ldr	r2, [pc, #100]	; (8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d014      	beq.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	2380      	movs	r3, #128	; 0x80
 8008e7a:	05db      	lsls	r3, r3, #23
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d00e      	beq.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a15      	ldr	r2, [pc, #84]	; (8008edc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d009      	beq.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a14      	ldr	r2, [pc, #80]	; (8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d004      	beq.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a12      	ldr	r2, [pc, #72]	; (8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d10c      	bne.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	2280      	movs	r2, #128	; 0x80
 8008ea2:	4393      	bics	r3, r2
 8008ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	223d      	movs	r2, #61	; 0x3d
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	223c      	movs	r2, #60	; 0x3c
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	0018      	movs	r0, r3
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	b004      	add	sp, #16
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	46c0      	nop			; (mov r8, r8)
 8008ed4:	40012c00 	.word	0x40012c00
 8008ed8:	ff0fffff 	.word	0xff0fffff
 8008edc:	40000400 	.word	0x40000400
 8008ee0:	40000800 	.word	0x40000800
 8008ee4:	40014000 	.word	0x40014000

08008ee8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	223c      	movs	r2, #60	; 0x3c
 8008efa:	5c9b      	ldrb	r3, [r3, r2]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d101      	bne.n	8008f04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f00:	2302      	movs	r3, #2
 8008f02:	e079      	b.n	8008ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	223c      	movs	r2, #60	; 0x3c
 8008f08:	2101      	movs	r1, #1
 8008f0a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	22ff      	movs	r2, #255	; 0xff
 8008f10:	4393      	bics	r3, r2
 8008f12:	001a      	movs	r2, r3
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4a38      	ldr	r2, [pc, #224]	; (8009000 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008f20:	401a      	ands	r2, r3
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4a35      	ldr	r2, [pc, #212]	; (8009004 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008f2e:	401a      	ands	r2, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4a33      	ldr	r2, [pc, #204]	; (8009008 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008f3c:	401a      	ands	r2, r3
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4a30      	ldr	r2, [pc, #192]	; (800900c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008f4a:	401a      	ands	r2, r3
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4a2e      	ldr	r2, [pc, #184]	; (8009010 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008f58:	401a      	ands	r2, r3
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4a2b      	ldr	r2, [pc, #172]	; (8009014 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008f66:	401a      	ands	r2, r3
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4a29      	ldr	r2, [pc, #164]	; (8009018 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008f74:	401a      	ands	r2, r3
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	041b      	lsls	r3, r3, #16
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a25      	ldr	r2, [pc, #148]	; (800901c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d106      	bne.n	8008f98 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	4a24      	ldr	r2, [pc, #144]	; (8009020 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008f8e:	401a      	ands	r2, r3
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a1f      	ldr	r2, [pc, #124]	; (800901c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d121      	bne.n	8008fe6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	4a1f      	ldr	r2, [pc, #124]	; (8009024 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008fa6:	401a      	ands	r2, r3
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	051b      	lsls	r3, r3, #20
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4a1c      	ldr	r2, [pc, #112]	; (8009028 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008fb6:	401a      	ands	r2, r3
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	6a1b      	ldr	r3, [r3, #32]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4a1a      	ldr	r2, [pc, #104]	; (800902c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008fc4:	401a      	ands	r2, r3
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a12      	ldr	r2, [pc, #72]	; (800901c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d106      	bne.n	8008fe6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4a15      	ldr	r2, [pc, #84]	; (8009030 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008fdc:	401a      	ands	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	223c      	movs	r2, #60	; 0x3c
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	b004      	add	sp, #16
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	fffffcff 	.word	0xfffffcff
 8009004:	fffffbff 	.word	0xfffffbff
 8009008:	fffff7ff 	.word	0xfffff7ff
 800900c:	ffffefff 	.word	0xffffefff
 8009010:	ffffdfff 	.word	0xffffdfff
 8009014:	ffffbfff 	.word	0xffffbfff
 8009018:	fff0ffff 	.word	0xfff0ffff
 800901c:	40012c00 	.word	0x40012c00
 8009020:	efffffff 	.word	0xefffffff
 8009024:	ff0fffff 	.word	0xff0fffff
 8009028:	feffffff 	.word	0xfeffffff
 800902c:	fdffffff 	.word	0xfdffffff
 8009030:	dfffffff 	.word	0xdfffffff

08009034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e046      	b.n	80090d4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2284      	movs	r2, #132	; 0x84
 800904a:	589b      	ldr	r3, [r3, r2]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d107      	bne.n	8009060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2280      	movs	r2, #128	; 0x80
 8009054:	2100      	movs	r1, #0
 8009056:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	0018      	movs	r0, r3
 800905c:	f7fa f9d2 	bl	8003404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2284      	movs	r2, #132	; 0x84
 8009064:	2124      	movs	r1, #36	; 0x24
 8009066:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2101      	movs	r1, #1
 8009074:	438a      	bics	r2, r1
 8009076:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	0018      	movs	r0, r3
 800907c:	f000 fa9e 	bl	80095bc <UART_SetConfig>
 8009080:	0003      	movs	r3, r0
 8009082:	2b01      	cmp	r3, #1
 8009084:	d101      	bne.n	800908a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e024      	b.n	80090d4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	0018      	movs	r0, r3
 8009096:	f000 fe11 	bl	8009cbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	490d      	ldr	r1, [pc, #52]	; (80090dc <HAL_UART_Init+0xa8>)
 80090a6:	400a      	ands	r2, r1
 80090a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	689a      	ldr	r2, [r3, #8]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	212a      	movs	r1, #42	; 0x2a
 80090b6:	438a      	bics	r2, r1
 80090b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2101      	movs	r1, #1
 80090c6:	430a      	orrs	r2, r1
 80090c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	0018      	movs	r0, r3
 80090ce:	f000 fea9 	bl	8009e24 <UART_CheckIdleState>
 80090d2:	0003      	movs	r3, r0
}
 80090d4:	0018      	movs	r0, r3
 80090d6:	46bd      	mov	sp, r7
 80090d8:	b002      	add	sp, #8
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	ffffb7ff 	.word	0xffffb7ff

080090e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b08a      	sub	sp, #40	; 0x28
 80090e4:	af02      	add	r7, sp, #8
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	603b      	str	r3, [r7, #0]
 80090ec:	1dbb      	adds	r3, r7, #6
 80090ee:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2284      	movs	r2, #132	; 0x84
 80090f4:	589b      	ldr	r3, [r3, r2]
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	d000      	beq.n	80090fc <HAL_UART_Transmit+0x1c>
 80090fa:	e097      	b.n	800922c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <HAL_UART_Transmit+0x2a>
 8009102:	1dbb      	adds	r3, r7, #6
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e08f      	b.n	800922e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	689a      	ldr	r2, [r3, #8]
 8009112:	2380      	movs	r3, #128	; 0x80
 8009114:	015b      	lsls	r3, r3, #5
 8009116:	429a      	cmp	r2, r3
 8009118:	d109      	bne.n	800912e <HAL_UART_Transmit+0x4e>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d105      	bne.n	800912e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2201      	movs	r2, #1
 8009126:	4013      	ands	r3, r2
 8009128:	d001      	beq.n	800912e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e07f      	b.n	800922e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2280      	movs	r2, #128	; 0x80
 8009132:	5c9b      	ldrb	r3, [r3, r2]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d101      	bne.n	800913c <HAL_UART_Transmit+0x5c>
 8009138:	2302      	movs	r3, #2
 800913a:	e078      	b.n	800922e <HAL_UART_Transmit+0x14e>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2280      	movs	r2, #128	; 0x80
 8009140:	2101      	movs	r1, #1
 8009142:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	228c      	movs	r2, #140	; 0x8c
 8009148:	2100      	movs	r1, #0
 800914a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2284      	movs	r2, #132	; 0x84
 8009150:	2121      	movs	r1, #33	; 0x21
 8009152:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009154:	f7fa fd24 	bl	8003ba0 <HAL_GetTick>
 8009158:	0003      	movs	r3, r0
 800915a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	1dba      	adds	r2, r7, #6
 8009160:	2154      	movs	r1, #84	; 0x54
 8009162:	8812      	ldrh	r2, [r2, #0]
 8009164:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	1dba      	adds	r2, r7, #6
 800916a:	2156      	movs	r1, #86	; 0x56
 800916c:	8812      	ldrh	r2, [r2, #0]
 800916e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	2380      	movs	r3, #128	; 0x80
 8009176:	015b      	lsls	r3, r3, #5
 8009178:	429a      	cmp	r2, r3
 800917a:	d108      	bne.n	800918e <HAL_UART_Transmit+0xae>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d104      	bne.n	800918e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8009184:	2300      	movs	r3, #0
 8009186:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	61bb      	str	r3, [r7, #24]
 800918c:	e003      	b.n	8009196 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009192:	2300      	movs	r3, #0
 8009194:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2280      	movs	r2, #128	; 0x80
 800919a:	2100      	movs	r1, #0
 800919c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800919e:	e02c      	b.n	80091fa <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	0013      	movs	r3, r2
 80091aa:	2200      	movs	r2, #0
 80091ac:	2180      	movs	r1, #128	; 0x80
 80091ae:	f000 fe83 	bl	8009eb8 <UART_WaitOnFlagUntilTimeout>
 80091b2:	1e03      	subs	r3, r0, #0
 80091b4:	d001      	beq.n	80091ba <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e039      	b.n	800922e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10b      	bne.n	80091d8 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	001a      	movs	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	05d2      	lsls	r2, r2, #23
 80091cc:	0dd2      	lsrs	r2, r2, #23
 80091ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	3302      	adds	r3, #2
 80091d4:	61bb      	str	r3, [r7, #24]
 80091d6:	e007      	b.n	80091e8 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	3301      	adds	r3, #1
 80091e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2256      	movs	r2, #86	; 0x56
 80091ec:	5a9b      	ldrh	r3, [r3, r2]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	3b01      	subs	r3, #1
 80091f2:	b299      	uxth	r1, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2256      	movs	r2, #86	; 0x56
 80091f8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2256      	movs	r2, #86	; 0x56
 80091fe:	5a9b      	ldrh	r3, [r3, r2]
 8009200:	b29b      	uxth	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1cc      	bne.n	80091a0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	0013      	movs	r3, r2
 8009210:	2200      	movs	r2, #0
 8009212:	2140      	movs	r1, #64	; 0x40
 8009214:	f000 fe50 	bl	8009eb8 <UART_WaitOnFlagUntilTimeout>
 8009218:	1e03      	subs	r3, r0, #0
 800921a:	d001      	beq.n	8009220 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e006      	b.n	800922e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2284      	movs	r2, #132	; 0x84
 8009224:	2120      	movs	r1, #32
 8009226:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	e000      	b.n	800922e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800922c:	2302      	movs	r3, #2
  }
}
 800922e:	0018      	movs	r0, r3
 8009230:	46bd      	mov	sp, r7
 8009232:	b008      	add	sp, #32
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	1dbb      	adds	r3, r7, #6
 8009244:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2288      	movs	r2, #136	; 0x88
 800924a:	589b      	ldr	r3, [r3, r2]
 800924c:	2b20      	cmp	r3, #32
 800924e:	d15a      	bne.n	8009306 <HAL_UART_Receive_DMA+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <HAL_UART_Receive_DMA+0x26>
 8009256:	1dbb      	adds	r3, r7, #6
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e052      	b.n	8009308 <HAL_UART_Receive_DMA+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	689a      	ldr	r2, [r3, #8]
 8009266:	2380      	movs	r3, #128	; 0x80
 8009268:	015b      	lsls	r3, r3, #5
 800926a:	429a      	cmp	r2, r3
 800926c:	d109      	bne.n	8009282 <HAL_UART_Receive_DMA+0x4a>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d105      	bne.n	8009282 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2201      	movs	r2, #1
 800927a:	4013      	ands	r3, r2
 800927c:	d001      	beq.n	8009282 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e042      	b.n	8009308 <HAL_UART_Receive_DMA+0xd0>
      }
    }

    __HAL_LOCK(huart);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2280      	movs	r2, #128	; 0x80
 8009286:	5c9b      	ldrb	r3, [r3, r2]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_UART_Receive_DMA+0x58>
 800928c:	2302      	movs	r3, #2
 800928e:	e03b      	b.n	8009308 <HAL_UART_Receive_DMA+0xd0>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2280      	movs	r2, #128	; 0x80
 8009294:	2101      	movs	r1, #1
 8009296:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a1b      	ldr	r2, [pc, #108]	; (8009310 <HAL_UART_Receive_DMA+0xd8>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d025      	beq.n	80092f4 <HAL_UART_Receive_DMA+0xbc>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a19      	ldr	r2, [pc, #100]	; (8009314 <HAL_UART_Receive_DMA+0xdc>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d020      	beq.n	80092f4 <HAL_UART_Receive_DMA+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	2380      	movs	r3, #128	; 0x80
 80092ba:	041b      	lsls	r3, r3, #16
 80092bc:	4013      	ands	r3, r2
 80092be:	d019      	beq.n	80092f4 <HAL_UART_Receive_DMA+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092c0:	f3ef 8310 	mrs	r3, PRIMASK
 80092c4:	613b      	str	r3, [r7, #16]
  return(result);
 80092c6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	2301      	movs	r3, #1
 80092cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f383 8810 	msr	PRIMASK, r3
}
 80092d4:	46c0      	nop			; (mov r8, r8)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2180      	movs	r1, #128	; 0x80
 80092e2:	04c9      	lsls	r1, r1, #19
 80092e4:	430a      	orrs	r2, r1
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	f383 8810 	msr	PRIMASK, r3
}
 80092f2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80092f4:	1dbb      	adds	r3, r7, #6
 80092f6:	881a      	ldrh	r2, [r3, #0]
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	0018      	movs	r0, r3
 80092fe:	f000 fea3 	bl	800a048 <UART_Start_Receive_DMA>
 8009302:	0003      	movs	r3, r0
 8009304:	e000      	b.n	8009308 <HAL_UART_Receive_DMA+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8009306:	2302      	movs	r3, #2
  }
}
 8009308:	0018      	movs	r0, r3
 800930a:	46bd      	mov	sp, r7
 800930c:	b008      	add	sp, #32
 800930e:	bd80      	pop	{r7, pc}
 8009310:	40008000 	.word	0x40008000
 8009314:	40008400 	.word	0x40008400

08009318 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b098      	sub	sp, #96	; 0x60
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8009320:	2301      	movs	r3, #1
 8009322:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009324:	f3ef 8310 	mrs	r3, PRIMASK
 8009328:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800932c:	65bb      	str	r3, [r7, #88]	; 0x58
 800932e:	2301      	movs	r3, #1
 8009330:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009334:	f383 8810 	msr	PRIMASK, r3
}
 8009338:	46c0      	nop			; (mov r8, r8)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4987      	ldr	r1, [pc, #540]	; (8009564 <HAL_UART_Abort_IT+0x24c>)
 8009346:	400a      	ands	r2, r1
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800934c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	f383 8810 	msr	PRIMASK, r3
}
 8009354:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009356:	f3ef 8310 	mrs	r3, PRIMASK
 800935a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800935c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800935e:	657b      	str	r3, [r7, #84]	; 0x54
 8009360:	2301      	movs	r3, #1
 8009362:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009366:	f383 8810 	msr	PRIMASK, r3
}
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689a      	ldr	r2, [r3, #8]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	497c      	ldr	r1, [pc, #496]	; (8009568 <HAL_UART_Abort_IT+0x250>)
 8009378:	400a      	ands	r2, r1
 800937a:	609a      	str	r2, [r3, #8]
 800937c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800937e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009382:	f383 8810 	msr	PRIMASK, r3
}
 8009386:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800938c:	2b01      	cmp	r3, #1
 800938e:	d118      	bne.n	80093c2 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009390:	f3ef 8310 	mrs	r3, PRIMASK
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009398:	653b      	str	r3, [r7, #80]	; 0x50
 800939a:	2301      	movs	r3, #1
 800939c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800939e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a0:	f383 8810 	msr	PRIMASK, r3
}
 80093a4:	46c0      	nop			; (mov r8, r8)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2110      	movs	r1, #16
 80093b2:	438a      	bics	r2, r1
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093bc:	f383 8810 	msr	PRIMASK, r3
}
 80093c0:	46c0      	nop			; (mov r8, r8)
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00f      	beq.n	80093ea <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	2280      	movs	r2, #128	; 0x80
 80093d2:	4013      	ands	r3, r2
 80093d4:	2b80      	cmp	r3, #128	; 0x80
 80093d6:	d104      	bne.n	80093e2 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093dc:	4a63      	ldr	r2, [pc, #396]	; (800956c <HAL_UART_Abort_IT+0x254>)
 80093de:	639a      	str	r2, [r3, #56]	; 0x38
 80093e0:	e003      	b.n	80093ea <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093e6:	2200      	movs	r2, #0
 80093e8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00f      	beq.n	8009412 <HAL_UART_Abort_IT+0xfa>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	2240      	movs	r2, #64	; 0x40
 80093fa:	4013      	ands	r3, r2
 80093fc:	2b40      	cmp	r3, #64	; 0x40
 80093fe:	d104      	bne.n	800940a <HAL_UART_Abort_IT+0xf2>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009404:	4a5a      	ldr	r2, [pc, #360]	; (8009570 <HAL_UART_Abort_IT+0x258>)
 8009406:	639a      	str	r2, [r3, #56]	; 0x38
 8009408:	e003      	b.n	8009412 <HAL_UART_Abort_IT+0xfa>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800940e:	2200      	movs	r2, #0
 8009410:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	2280      	movs	r2, #128	; 0x80
 800941a:	4013      	ands	r3, r2
 800941c:	2b80      	cmp	r3, #128	; 0x80
 800941e:	d12a      	bne.n	8009476 <HAL_UART_Abort_IT+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009420:	f3ef 8310 	mrs	r3, PRIMASK
 8009424:	61bb      	str	r3, [r7, #24]
  return(result);
 8009426:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800942a:	2301      	movs	r3, #1
 800942c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	f383 8810 	msr	PRIMASK, r3
}
 8009434:	46c0      	nop			; (mov r8, r8)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689a      	ldr	r2, [r3, #8]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2180      	movs	r1, #128	; 0x80
 8009442:	438a      	bics	r2, r1
 8009444:	609a      	str	r2, [r3, #8]
 8009446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009448:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	f383 8810 	msr	PRIMASK, r3
}
 8009450:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00d      	beq.n	8009476 <HAL_UART_Abort_IT+0x15e>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800945e:	0018      	movs	r0, r3
 8009460:	f7fb faee 	bl	8004a40 <HAL_DMA_Abort_IT>
 8009464:	1e03      	subs	r3, r0, #0
 8009466:	d004      	beq.n	8009472 <HAL_UART_Abort_IT+0x15a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800946c:	2200      	movs	r2, #0
 800946e:	639a      	str	r2, [r3, #56]	; 0x38
 8009470:	e001      	b.n	8009476 <HAL_UART_Abort_IT+0x15e>
      }
      else
      {
        abortcplt = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	2240      	movs	r2, #64	; 0x40
 800947e:	4013      	ands	r3, r2
 8009480:	2b40      	cmp	r3, #64	; 0x40
 8009482:	d12c      	bne.n	80094de <HAL_UART_Abort_IT+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009484:	f3ef 8310 	mrs	r3, PRIMASK
 8009488:	60fb      	str	r3, [r7, #12]
  return(result);
 800948a:	68fb      	ldr	r3, [r7, #12]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800948c:	64bb      	str	r3, [r7, #72]	; 0x48
 800948e:	2301      	movs	r3, #1
 8009490:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f383 8810 	msr	PRIMASK, r3
}
 8009498:	46c0      	nop			; (mov r8, r8)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	689a      	ldr	r2, [r3, #8]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2140      	movs	r1, #64	; 0x40
 80094a6:	438a      	bics	r2, r1
 80094a8:	609a      	str	r2, [r3, #8]
 80094aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f383 8810 	msr	PRIMASK, r3
}
 80094b4:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00f      	beq.n	80094de <HAL_UART_Abort_IT+0x1c6>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094c2:	0018      	movs	r0, r3
 80094c4:	f7fb fabc 	bl	8004a40 <HAL_DMA_Abort_IT>
 80094c8:	1e03      	subs	r3, r0, #0
 80094ca:	d006      	beq.n	80094da <HAL_UART_Abort_IT+0x1c2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094d0:	2200      	movs	r2, #0
 80094d2:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 80094d4:	2301      	movs	r3, #1
 80094d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094d8:	e001      	b.n	80094de <HAL_UART_Abort_IT+0x1c6>
      }
      else
      {
        abortcplt = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 80094de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d13a      	bne.n	800955a <HAL_UART_Abort_IT+0x242>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2256      	movs	r2, #86	; 0x56
 80094e8:	2100      	movs	r1, #0
 80094ea:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	225e      	movs	r2, #94	; 0x5e
 80094f0:	2100      	movs	r1, #0
 80094f2:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	228c      	movs	r2, #140	; 0x8c
 8009504:	2100      	movs	r1, #0
 8009506:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	220f      	movs	r2, #15
 800950e:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009514:	2380      	movs	r3, #128	; 0x80
 8009516:	059b      	lsls	r3, r3, #22
 8009518:	429a      	cmp	r2, r3
 800951a:	d107      	bne.n	800952c <HAL_UART_Abort_IT+0x214>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	699a      	ldr	r2, [r3, #24]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2110      	movs	r1, #16
 8009528:	430a      	orrs	r2, r1
 800952a:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	699a      	ldr	r2, [r3, #24]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2108      	movs	r1, #8
 8009538:	430a      	orrs	r2, r1
 800953a:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2284      	movs	r2, #132	; 0x84
 8009540:	2120      	movs	r1, #32
 8009542:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2288      	movs	r2, #136	; 0x88
 8009548:	2120      	movs	r1, #32
 800954a:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	0018      	movs	r0, r3
 8009556:	f000 f81d 	bl	8009594 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	0018      	movs	r0, r3
 800955e:	46bd      	mov	sp, r7
 8009560:	b018      	add	sp, #96	; 0x60
 8009562:	bd80      	pop	{r7, pc}
 8009564:	fffffe1f 	.word	0xfffffe1f
 8009568:	ef7ffffe 	.word	0xef7ffffe
 800956c:	0800a4c7 	.word	0x0800a4c7
 8009570:	0800a553 	.word	0x0800a553

08009574 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800957c:	46c0      	nop			; (mov r8, r8)
 800957e:	46bd      	mov	sp, r7
 8009580:	b002      	add	sp, #8
 8009582:	bd80      	pop	{r7, pc}

08009584 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800958c:	46c0      	nop			; (mov r8, r8)
 800958e:	46bd      	mov	sp, r7
 8009590:	b002      	add	sp, #8
 8009592:	bd80      	pop	{r7, pc}

08009594 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800959c:	46c0      	nop			; (mov r8, r8)
 800959e:	46bd      	mov	sp, r7
 80095a0:	b002      	add	sp, #8
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	000a      	movs	r2, r1
 80095ae:	1cbb      	adds	r3, r7, #2
 80095b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095b2:	46c0      	nop			; (mov r8, r8)
 80095b4:	46bd      	mov	sp, r7
 80095b6:	b002      	add	sp, #8
 80095b8:	bd80      	pop	{r7, pc}
	...

080095bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095bc:	b5b0      	push	{r4, r5, r7, lr}
 80095be:	b090      	sub	sp, #64	; 0x40
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095c4:	231a      	movs	r3, #26
 80095c6:	2220      	movs	r2, #32
 80095c8:	4694      	mov	ip, r2
 80095ca:	44bc      	add	ip, r7
 80095cc:	4463      	add	r3, ip
 80095ce:	2200      	movs	r2, #0
 80095d0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d4:	689a      	ldr	r2, [r3, #8]
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	431a      	orrs	r2, r3
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	431a      	orrs	r2, r3
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4ac1      	ldr	r2, [pc, #772]	; (80098f8 <UART_SetConfig+0x33c>)
 80095f2:	4013      	ands	r3, r2
 80095f4:	0019      	movs	r1, r3
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095fc:	430b      	orrs	r3, r1
 80095fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	4abd      	ldr	r2, [pc, #756]	; (80098fc <UART_SetConfig+0x340>)
 8009608:	4013      	ands	r3, r2
 800960a:	0018      	movs	r0, r3
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960e:	68d9      	ldr	r1, [r3, #12]
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	0003      	movs	r3, r0
 8009616:	430b      	orrs	r3, r1
 8009618:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4ab6      	ldr	r2, [pc, #728]	; (8009900 <UART_SetConfig+0x344>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d009      	beq.n	800963e <UART_SetConfig+0x82>
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4ab5      	ldr	r2, [pc, #724]	; (8009904 <UART_SetConfig+0x348>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d004      	beq.n	800963e <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800963a:	4313      	orrs	r3, r2
 800963c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	4ab0      	ldr	r2, [pc, #704]	; (8009908 <UART_SetConfig+0x34c>)
 8009646:	4013      	ands	r3, r2
 8009648:	0019      	movs	r1, r3
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009650:	430b      	orrs	r3, r1
 8009652:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965a:	220f      	movs	r2, #15
 800965c:	4393      	bics	r3, r2
 800965e:	0018      	movs	r0, r3
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	0003      	movs	r3, r0
 800966a:	430b      	orrs	r3, r1
 800966c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4aa6      	ldr	r2, [pc, #664]	; (800990c <UART_SetConfig+0x350>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d136      	bne.n	80096e6 <UART_SetConfig+0x12a>
 8009678:	4ba5      	ldr	r3, [pc, #660]	; (8009910 <UART_SetConfig+0x354>)
 800967a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967c:	2203      	movs	r2, #3
 800967e:	4013      	ands	r3, r2
 8009680:	2b03      	cmp	r3, #3
 8009682:	d020      	beq.n	80096c6 <UART_SetConfig+0x10a>
 8009684:	d827      	bhi.n	80096d6 <UART_SetConfig+0x11a>
 8009686:	2b02      	cmp	r3, #2
 8009688:	d00d      	beq.n	80096a6 <UART_SetConfig+0xea>
 800968a:	d824      	bhi.n	80096d6 <UART_SetConfig+0x11a>
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <UART_SetConfig+0xda>
 8009690:	2b01      	cmp	r3, #1
 8009692:	d010      	beq.n	80096b6 <UART_SetConfig+0xfa>
 8009694:	e01f      	b.n	80096d6 <UART_SetConfig+0x11a>
 8009696:	231b      	movs	r3, #27
 8009698:	2220      	movs	r2, #32
 800969a:	4694      	mov	ip, r2
 800969c:	44bc      	add	ip, r7
 800969e:	4463      	add	r3, ip
 80096a0:	2200      	movs	r2, #0
 80096a2:	701a      	strb	r2, [r3, #0]
 80096a4:	e16f      	b.n	8009986 <UART_SetConfig+0x3ca>
 80096a6:	231b      	movs	r3, #27
 80096a8:	2220      	movs	r2, #32
 80096aa:	4694      	mov	ip, r2
 80096ac:	44bc      	add	ip, r7
 80096ae:	4463      	add	r3, ip
 80096b0:	2202      	movs	r2, #2
 80096b2:	701a      	strb	r2, [r3, #0]
 80096b4:	e167      	b.n	8009986 <UART_SetConfig+0x3ca>
 80096b6:	231b      	movs	r3, #27
 80096b8:	2220      	movs	r2, #32
 80096ba:	4694      	mov	ip, r2
 80096bc:	44bc      	add	ip, r7
 80096be:	4463      	add	r3, ip
 80096c0:	2204      	movs	r2, #4
 80096c2:	701a      	strb	r2, [r3, #0]
 80096c4:	e15f      	b.n	8009986 <UART_SetConfig+0x3ca>
 80096c6:	231b      	movs	r3, #27
 80096c8:	2220      	movs	r2, #32
 80096ca:	4694      	mov	ip, r2
 80096cc:	44bc      	add	ip, r7
 80096ce:	4463      	add	r3, ip
 80096d0:	2208      	movs	r2, #8
 80096d2:	701a      	strb	r2, [r3, #0]
 80096d4:	e157      	b.n	8009986 <UART_SetConfig+0x3ca>
 80096d6:	231b      	movs	r3, #27
 80096d8:	2220      	movs	r2, #32
 80096da:	4694      	mov	ip, r2
 80096dc:	44bc      	add	ip, r7
 80096de:	4463      	add	r3, ip
 80096e0:	2210      	movs	r2, #16
 80096e2:	701a      	strb	r2, [r3, #0]
 80096e4:	e14f      	b.n	8009986 <UART_SetConfig+0x3ca>
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a8a      	ldr	r2, [pc, #552]	; (8009914 <UART_SetConfig+0x358>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d136      	bne.n	800975e <UART_SetConfig+0x1a2>
 80096f0:	4b87      	ldr	r3, [pc, #540]	; (8009910 <UART_SetConfig+0x354>)
 80096f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f4:	220c      	movs	r2, #12
 80096f6:	4013      	ands	r3, r2
 80096f8:	2b0c      	cmp	r3, #12
 80096fa:	d020      	beq.n	800973e <UART_SetConfig+0x182>
 80096fc:	d827      	bhi.n	800974e <UART_SetConfig+0x192>
 80096fe:	2b08      	cmp	r3, #8
 8009700:	d00d      	beq.n	800971e <UART_SetConfig+0x162>
 8009702:	d824      	bhi.n	800974e <UART_SetConfig+0x192>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <UART_SetConfig+0x152>
 8009708:	2b04      	cmp	r3, #4
 800970a:	d010      	beq.n	800972e <UART_SetConfig+0x172>
 800970c:	e01f      	b.n	800974e <UART_SetConfig+0x192>
 800970e:	231b      	movs	r3, #27
 8009710:	2220      	movs	r2, #32
 8009712:	4694      	mov	ip, r2
 8009714:	44bc      	add	ip, r7
 8009716:	4463      	add	r3, ip
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
 800971c:	e133      	b.n	8009986 <UART_SetConfig+0x3ca>
 800971e:	231b      	movs	r3, #27
 8009720:	2220      	movs	r2, #32
 8009722:	4694      	mov	ip, r2
 8009724:	44bc      	add	ip, r7
 8009726:	4463      	add	r3, ip
 8009728:	2202      	movs	r2, #2
 800972a:	701a      	strb	r2, [r3, #0]
 800972c:	e12b      	b.n	8009986 <UART_SetConfig+0x3ca>
 800972e:	231b      	movs	r3, #27
 8009730:	2220      	movs	r2, #32
 8009732:	4694      	mov	ip, r2
 8009734:	44bc      	add	ip, r7
 8009736:	4463      	add	r3, ip
 8009738:	2204      	movs	r2, #4
 800973a:	701a      	strb	r2, [r3, #0]
 800973c:	e123      	b.n	8009986 <UART_SetConfig+0x3ca>
 800973e:	231b      	movs	r3, #27
 8009740:	2220      	movs	r2, #32
 8009742:	4694      	mov	ip, r2
 8009744:	44bc      	add	ip, r7
 8009746:	4463      	add	r3, ip
 8009748:	2208      	movs	r2, #8
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	e11b      	b.n	8009986 <UART_SetConfig+0x3ca>
 800974e:	231b      	movs	r3, #27
 8009750:	2220      	movs	r2, #32
 8009752:	4694      	mov	ip, r2
 8009754:	44bc      	add	ip, r7
 8009756:	4463      	add	r3, ip
 8009758:	2210      	movs	r2, #16
 800975a:	701a      	strb	r2, [r3, #0]
 800975c:	e113      	b.n	8009986 <UART_SetConfig+0x3ca>
 800975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a6d      	ldr	r2, [pc, #436]	; (8009918 <UART_SetConfig+0x35c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d136      	bne.n	80097d6 <UART_SetConfig+0x21a>
 8009768:	4b69      	ldr	r3, [pc, #420]	; (8009910 <UART_SetConfig+0x354>)
 800976a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976c:	2230      	movs	r2, #48	; 0x30
 800976e:	4013      	ands	r3, r2
 8009770:	2b30      	cmp	r3, #48	; 0x30
 8009772:	d020      	beq.n	80097b6 <UART_SetConfig+0x1fa>
 8009774:	d827      	bhi.n	80097c6 <UART_SetConfig+0x20a>
 8009776:	2b20      	cmp	r3, #32
 8009778:	d00d      	beq.n	8009796 <UART_SetConfig+0x1da>
 800977a:	d824      	bhi.n	80097c6 <UART_SetConfig+0x20a>
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <UART_SetConfig+0x1ca>
 8009780:	2b10      	cmp	r3, #16
 8009782:	d010      	beq.n	80097a6 <UART_SetConfig+0x1ea>
 8009784:	e01f      	b.n	80097c6 <UART_SetConfig+0x20a>
 8009786:	231b      	movs	r3, #27
 8009788:	2220      	movs	r2, #32
 800978a:	4694      	mov	ip, r2
 800978c:	44bc      	add	ip, r7
 800978e:	4463      	add	r3, ip
 8009790:	2200      	movs	r2, #0
 8009792:	701a      	strb	r2, [r3, #0]
 8009794:	e0f7      	b.n	8009986 <UART_SetConfig+0x3ca>
 8009796:	231b      	movs	r3, #27
 8009798:	2220      	movs	r2, #32
 800979a:	4694      	mov	ip, r2
 800979c:	44bc      	add	ip, r7
 800979e:	4463      	add	r3, ip
 80097a0:	2202      	movs	r2, #2
 80097a2:	701a      	strb	r2, [r3, #0]
 80097a4:	e0ef      	b.n	8009986 <UART_SetConfig+0x3ca>
 80097a6:	231b      	movs	r3, #27
 80097a8:	2220      	movs	r2, #32
 80097aa:	4694      	mov	ip, r2
 80097ac:	44bc      	add	ip, r7
 80097ae:	4463      	add	r3, ip
 80097b0:	2204      	movs	r2, #4
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	e0e7      	b.n	8009986 <UART_SetConfig+0x3ca>
 80097b6:	231b      	movs	r3, #27
 80097b8:	2220      	movs	r2, #32
 80097ba:	4694      	mov	ip, r2
 80097bc:	44bc      	add	ip, r7
 80097be:	4463      	add	r3, ip
 80097c0:	2208      	movs	r2, #8
 80097c2:	701a      	strb	r2, [r3, #0]
 80097c4:	e0df      	b.n	8009986 <UART_SetConfig+0x3ca>
 80097c6:	231b      	movs	r3, #27
 80097c8:	2220      	movs	r2, #32
 80097ca:	4694      	mov	ip, r2
 80097cc:	44bc      	add	ip, r7
 80097ce:	4463      	add	r3, ip
 80097d0:	2210      	movs	r2, #16
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	e0d7      	b.n	8009986 <UART_SetConfig+0x3ca>
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a50      	ldr	r2, [pc, #320]	; (800991c <UART_SetConfig+0x360>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d107      	bne.n	80097f0 <UART_SetConfig+0x234>
 80097e0:	231b      	movs	r3, #27
 80097e2:	2220      	movs	r2, #32
 80097e4:	4694      	mov	ip, r2
 80097e6:	44bc      	add	ip, r7
 80097e8:	4463      	add	r3, ip
 80097ea:	2200      	movs	r2, #0
 80097ec:	701a      	strb	r2, [r3, #0]
 80097ee:	e0ca      	b.n	8009986 <UART_SetConfig+0x3ca>
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a4a      	ldr	r2, [pc, #296]	; (8009920 <UART_SetConfig+0x364>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d107      	bne.n	800980a <UART_SetConfig+0x24e>
 80097fa:	231b      	movs	r3, #27
 80097fc:	2220      	movs	r2, #32
 80097fe:	4694      	mov	ip, r2
 8009800:	44bc      	add	ip, r7
 8009802:	4463      	add	r3, ip
 8009804:	2200      	movs	r2, #0
 8009806:	701a      	strb	r2, [r3, #0]
 8009808:	e0bd      	b.n	8009986 <UART_SetConfig+0x3ca>
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a45      	ldr	r2, [pc, #276]	; (8009924 <UART_SetConfig+0x368>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d107      	bne.n	8009824 <UART_SetConfig+0x268>
 8009814:	231b      	movs	r3, #27
 8009816:	2220      	movs	r2, #32
 8009818:	4694      	mov	ip, r2
 800981a:	44bc      	add	ip, r7
 800981c:	4463      	add	r3, ip
 800981e:	2200      	movs	r2, #0
 8009820:	701a      	strb	r2, [r3, #0]
 8009822:	e0b0      	b.n	8009986 <UART_SetConfig+0x3ca>
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a35      	ldr	r2, [pc, #212]	; (8009900 <UART_SetConfig+0x344>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d143      	bne.n	80098b6 <UART_SetConfig+0x2fa>
 800982e:	4b38      	ldr	r3, [pc, #224]	; (8009910 <UART_SetConfig+0x354>)
 8009830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009832:	23c0      	movs	r3, #192	; 0xc0
 8009834:	011b      	lsls	r3, r3, #4
 8009836:	4013      	ands	r3, r2
 8009838:	22c0      	movs	r2, #192	; 0xc0
 800983a:	0112      	lsls	r2, r2, #4
 800983c:	4293      	cmp	r3, r2
 800983e:	d02a      	beq.n	8009896 <UART_SetConfig+0x2da>
 8009840:	22c0      	movs	r2, #192	; 0xc0
 8009842:	0112      	lsls	r2, r2, #4
 8009844:	4293      	cmp	r3, r2
 8009846:	d82e      	bhi.n	80098a6 <UART_SetConfig+0x2ea>
 8009848:	2280      	movs	r2, #128	; 0x80
 800984a:	0112      	lsls	r2, r2, #4
 800984c:	4293      	cmp	r3, r2
 800984e:	d012      	beq.n	8009876 <UART_SetConfig+0x2ba>
 8009850:	2280      	movs	r2, #128	; 0x80
 8009852:	0112      	lsls	r2, r2, #4
 8009854:	4293      	cmp	r3, r2
 8009856:	d826      	bhi.n	80098a6 <UART_SetConfig+0x2ea>
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <UART_SetConfig+0x2aa>
 800985c:	2280      	movs	r2, #128	; 0x80
 800985e:	00d2      	lsls	r2, r2, #3
 8009860:	4293      	cmp	r3, r2
 8009862:	d010      	beq.n	8009886 <UART_SetConfig+0x2ca>
 8009864:	e01f      	b.n	80098a6 <UART_SetConfig+0x2ea>
 8009866:	231b      	movs	r3, #27
 8009868:	2220      	movs	r2, #32
 800986a:	4694      	mov	ip, r2
 800986c:	44bc      	add	ip, r7
 800986e:	4463      	add	r3, ip
 8009870:	2200      	movs	r2, #0
 8009872:	701a      	strb	r2, [r3, #0]
 8009874:	e087      	b.n	8009986 <UART_SetConfig+0x3ca>
 8009876:	231b      	movs	r3, #27
 8009878:	2220      	movs	r2, #32
 800987a:	4694      	mov	ip, r2
 800987c:	44bc      	add	ip, r7
 800987e:	4463      	add	r3, ip
 8009880:	2202      	movs	r2, #2
 8009882:	701a      	strb	r2, [r3, #0]
 8009884:	e07f      	b.n	8009986 <UART_SetConfig+0x3ca>
 8009886:	231b      	movs	r3, #27
 8009888:	2220      	movs	r2, #32
 800988a:	4694      	mov	ip, r2
 800988c:	44bc      	add	ip, r7
 800988e:	4463      	add	r3, ip
 8009890:	2204      	movs	r2, #4
 8009892:	701a      	strb	r2, [r3, #0]
 8009894:	e077      	b.n	8009986 <UART_SetConfig+0x3ca>
 8009896:	231b      	movs	r3, #27
 8009898:	2220      	movs	r2, #32
 800989a:	4694      	mov	ip, r2
 800989c:	44bc      	add	ip, r7
 800989e:	4463      	add	r3, ip
 80098a0:	2208      	movs	r2, #8
 80098a2:	701a      	strb	r2, [r3, #0]
 80098a4:	e06f      	b.n	8009986 <UART_SetConfig+0x3ca>
 80098a6:	231b      	movs	r3, #27
 80098a8:	2220      	movs	r2, #32
 80098aa:	4694      	mov	ip, r2
 80098ac:	44bc      	add	ip, r7
 80098ae:	4463      	add	r3, ip
 80098b0:	2210      	movs	r2, #16
 80098b2:	701a      	strb	r2, [r3, #0]
 80098b4:	e067      	b.n	8009986 <UART_SetConfig+0x3ca>
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a12      	ldr	r2, [pc, #72]	; (8009904 <UART_SetConfig+0x348>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d15b      	bne.n	8009978 <UART_SetConfig+0x3bc>
 80098c0:	4b13      	ldr	r3, [pc, #76]	; (8009910 <UART_SetConfig+0x354>)
 80098c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098c4:	23c0      	movs	r3, #192	; 0xc0
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4013      	ands	r3, r2
 80098ca:	22c0      	movs	r2, #192	; 0xc0
 80098cc:	0092      	lsls	r2, r2, #2
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d042      	beq.n	8009958 <UART_SetConfig+0x39c>
 80098d2:	22c0      	movs	r2, #192	; 0xc0
 80098d4:	0092      	lsls	r2, r2, #2
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d846      	bhi.n	8009968 <UART_SetConfig+0x3ac>
 80098da:	2280      	movs	r2, #128	; 0x80
 80098dc:	0092      	lsls	r2, r2, #2
 80098de:	4293      	cmp	r3, r2
 80098e0:	d02a      	beq.n	8009938 <UART_SetConfig+0x37c>
 80098e2:	2280      	movs	r2, #128	; 0x80
 80098e4:	0092      	lsls	r2, r2, #2
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d83e      	bhi.n	8009968 <UART_SetConfig+0x3ac>
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d01c      	beq.n	8009928 <UART_SetConfig+0x36c>
 80098ee:	2280      	movs	r2, #128	; 0x80
 80098f0:	0052      	lsls	r2, r2, #1
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d028      	beq.n	8009948 <UART_SetConfig+0x38c>
 80098f6:	e037      	b.n	8009968 <UART_SetConfig+0x3ac>
 80098f8:	cfff69f3 	.word	0xcfff69f3
 80098fc:	ffffcfff 	.word	0xffffcfff
 8009900:	40008000 	.word	0x40008000
 8009904:	40008400 	.word	0x40008400
 8009908:	11fff4ff 	.word	0x11fff4ff
 800990c:	40013800 	.word	0x40013800
 8009910:	40021000 	.word	0x40021000
 8009914:	40004400 	.word	0x40004400
 8009918:	40004800 	.word	0x40004800
 800991c:	40004c00 	.word	0x40004c00
 8009920:	40005000 	.word	0x40005000
 8009924:	40013c00 	.word	0x40013c00
 8009928:	231b      	movs	r3, #27
 800992a:	2220      	movs	r2, #32
 800992c:	4694      	mov	ip, r2
 800992e:	44bc      	add	ip, r7
 8009930:	4463      	add	r3, ip
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]
 8009936:	e026      	b.n	8009986 <UART_SetConfig+0x3ca>
 8009938:	231b      	movs	r3, #27
 800993a:	2220      	movs	r2, #32
 800993c:	4694      	mov	ip, r2
 800993e:	44bc      	add	ip, r7
 8009940:	4463      	add	r3, ip
 8009942:	2202      	movs	r2, #2
 8009944:	701a      	strb	r2, [r3, #0]
 8009946:	e01e      	b.n	8009986 <UART_SetConfig+0x3ca>
 8009948:	231b      	movs	r3, #27
 800994a:	2220      	movs	r2, #32
 800994c:	4694      	mov	ip, r2
 800994e:	44bc      	add	ip, r7
 8009950:	4463      	add	r3, ip
 8009952:	2204      	movs	r2, #4
 8009954:	701a      	strb	r2, [r3, #0]
 8009956:	e016      	b.n	8009986 <UART_SetConfig+0x3ca>
 8009958:	231b      	movs	r3, #27
 800995a:	2220      	movs	r2, #32
 800995c:	4694      	mov	ip, r2
 800995e:	44bc      	add	ip, r7
 8009960:	4463      	add	r3, ip
 8009962:	2208      	movs	r2, #8
 8009964:	701a      	strb	r2, [r3, #0]
 8009966:	e00e      	b.n	8009986 <UART_SetConfig+0x3ca>
 8009968:	231b      	movs	r3, #27
 800996a:	2220      	movs	r2, #32
 800996c:	4694      	mov	ip, r2
 800996e:	44bc      	add	ip, r7
 8009970:	4463      	add	r3, ip
 8009972:	2210      	movs	r2, #16
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	e006      	b.n	8009986 <UART_SetConfig+0x3ca>
 8009978:	231b      	movs	r3, #27
 800997a:	2220      	movs	r2, #32
 800997c:	4694      	mov	ip, r2
 800997e:	44bc      	add	ip, r7
 8009980:	4463      	add	r3, ip
 8009982:	2210      	movs	r2, #16
 8009984:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4ab8      	ldr	r2, [pc, #736]	; (8009c6c <UART_SetConfig+0x6b0>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d005      	beq.n	800999c <UART_SetConfig+0x3e0>
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4ab6      	ldr	r2, [pc, #728]	; (8009c70 <UART_SetConfig+0x6b4>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d000      	beq.n	800999c <UART_SetConfig+0x3e0>
 800999a:	e097      	b.n	8009acc <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800999c:	231b      	movs	r3, #27
 800999e:	2220      	movs	r2, #32
 80099a0:	4694      	mov	ip, r2
 80099a2:	44bc      	add	ip, r7
 80099a4:	4463      	add	r3, ip
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d015      	beq.n	80099d8 <UART_SetConfig+0x41c>
 80099ac:	dc18      	bgt.n	80099e0 <UART_SetConfig+0x424>
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d00d      	beq.n	80099ce <UART_SetConfig+0x412>
 80099b2:	dc15      	bgt.n	80099e0 <UART_SetConfig+0x424>
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <UART_SetConfig+0x402>
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d005      	beq.n	80099c8 <UART_SetConfig+0x40c>
 80099bc:	e010      	b.n	80099e0 <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099be:	f7fe fb2f 	bl	8008020 <HAL_RCC_GetPCLK1Freq>
 80099c2:	0003      	movs	r3, r0
 80099c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099c6:	e015      	b.n	80099f4 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099c8:	4baa      	ldr	r3, [pc, #680]	; (8009c74 <UART_SetConfig+0x6b8>)
 80099ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099cc:	e012      	b.n	80099f4 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ce:	f7fe fa9b 	bl	8007f08 <HAL_RCC_GetSysClockFreq>
 80099d2:	0003      	movs	r3, r0
 80099d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099d6:	e00d      	b.n	80099f4 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099d8:	2380      	movs	r3, #128	; 0x80
 80099da:	021b      	lsls	r3, r3, #8
 80099dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099de:	e009      	b.n	80099f4 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80099e4:	231a      	movs	r3, #26
 80099e6:	2220      	movs	r2, #32
 80099e8:	4694      	mov	ip, r2
 80099ea:	44bc      	add	ip, r7
 80099ec:	4463      	add	r3, ip
 80099ee:	2201      	movs	r2, #1
 80099f0:	701a      	strb	r2, [r3, #0]
        break;
 80099f2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d100      	bne.n	80099fc <UART_SetConfig+0x440>
 80099fa:	e146      	b.n	8009c8a <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a00:	4b9d      	ldr	r3, [pc, #628]	; (8009c78 <UART_SetConfig+0x6bc>)
 8009a02:	0052      	lsls	r2, r2, #1
 8009a04:	5ad3      	ldrh	r3, [r2, r3]
 8009a06:	0019      	movs	r1, r3
 8009a08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009a0a:	f7f6 fb97 	bl	800013c <__udivsi3>
 8009a0e:	0003      	movs	r3, r0
 8009a10:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	0013      	movs	r3, r2
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	189b      	adds	r3, r3, r2
 8009a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d305      	bcc.n	8009a2e <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d907      	bls.n	8009a3e <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 8009a2e:	231a      	movs	r3, #26
 8009a30:	2220      	movs	r2, #32
 8009a32:	4694      	mov	ip, r2
 8009a34:	44bc      	add	ip, r7
 8009a36:	4463      	add	r3, ip
 8009a38:	2201      	movs	r2, #1
 8009a3a:	701a      	strb	r2, [r3, #0]
 8009a3c:	e045      	b.n	8009aca <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a40:	61bb      	str	r3, [r7, #24]
 8009a42:	2300      	movs	r3, #0
 8009a44:	61fb      	str	r3, [r7, #28]
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a4a:	4b8b      	ldr	r3, [pc, #556]	; (8009c78 <UART_SetConfig+0x6bc>)
 8009a4c:	0052      	lsls	r2, r2, #1
 8009a4e:	5ad3      	ldrh	r3, [r2, r3]
 8009a50:	613b      	str	r3, [r7, #16]
 8009a52:	2300      	movs	r3, #0
 8009a54:	617b      	str	r3, [r7, #20]
 8009a56:	693a      	ldr	r2, [r7, #16]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	69b8      	ldr	r0, [r7, #24]
 8009a5c:	69f9      	ldr	r1, [r7, #28]
 8009a5e:	f7f6 fd21 	bl	80004a4 <__aeabi_uldivmod>
 8009a62:	0002      	movs	r2, r0
 8009a64:	000b      	movs	r3, r1
 8009a66:	0e11      	lsrs	r1, r2, #24
 8009a68:	021d      	lsls	r5, r3, #8
 8009a6a:	430d      	orrs	r5, r1
 8009a6c:	0214      	lsls	r4, r2, #8
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	085b      	lsrs	r3, r3, #1
 8009a74:	60bb      	str	r3, [r7, #8]
 8009a76:	2300      	movs	r3, #0
 8009a78:	60fb      	str	r3, [r7, #12]
 8009a7a:	68b8      	ldr	r0, [r7, #8]
 8009a7c:	68f9      	ldr	r1, [r7, #12]
 8009a7e:	1900      	adds	r0, r0, r4
 8009a80:	4169      	adcs	r1, r5
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	607b      	str	r3, [r7, #4]
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f7f6 fd08 	bl	80004a4 <__aeabi_uldivmod>
 8009a94:	0002      	movs	r2, r0
 8009a96:	000b      	movs	r3, r1
 8009a98:	0013      	movs	r3, r2
 8009a9a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a9e:	23c0      	movs	r3, #192	; 0xc0
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d309      	bcc.n	8009aba <UART_SetConfig+0x4fe>
 8009aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aa8:	2380      	movs	r3, #128	; 0x80
 8009aaa:	035b      	lsls	r3, r3, #13
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d204      	bcs.n	8009aba <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab6:	60da      	str	r2, [r3, #12]
 8009ab8:	e007      	b.n	8009aca <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 8009aba:	231a      	movs	r3, #26
 8009abc:	2220      	movs	r2, #32
 8009abe:	4694      	mov	ip, r2
 8009ac0:	44bc      	add	ip, r7
 8009ac2:	4463      	add	r3, ip
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8009ac8:	e0df      	b.n	8009c8a <UART_SetConfig+0x6ce>
 8009aca:	e0de      	b.n	8009c8a <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	69da      	ldr	r2, [r3, #28]
 8009ad0:	2380      	movs	r3, #128	; 0x80
 8009ad2:	021b      	lsls	r3, r3, #8
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d000      	beq.n	8009ada <UART_SetConfig+0x51e>
 8009ad8:	e074      	b.n	8009bc4 <UART_SetConfig+0x608>
  {
    switch (clocksource)
 8009ada:	231b      	movs	r3, #27
 8009adc:	2220      	movs	r2, #32
 8009ade:	4694      	mov	ip, r2
 8009ae0:	44bc      	add	ip, r7
 8009ae2:	4463      	add	r3, ip
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b08      	cmp	r3, #8
 8009ae8:	d015      	beq.n	8009b16 <UART_SetConfig+0x55a>
 8009aea:	dc18      	bgt.n	8009b1e <UART_SetConfig+0x562>
 8009aec:	2b04      	cmp	r3, #4
 8009aee:	d00d      	beq.n	8009b0c <UART_SetConfig+0x550>
 8009af0:	dc15      	bgt.n	8009b1e <UART_SetConfig+0x562>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <UART_SetConfig+0x540>
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d005      	beq.n	8009b06 <UART_SetConfig+0x54a>
 8009afa:	e010      	b.n	8009b1e <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009afc:	f7fe fa90 	bl	8008020 <HAL_RCC_GetPCLK1Freq>
 8009b00:	0003      	movs	r3, r0
 8009b02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b04:	e015      	b.n	8009b32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b06:	4b5b      	ldr	r3, [pc, #364]	; (8009c74 <UART_SetConfig+0x6b8>)
 8009b08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b0a:	e012      	b.n	8009b32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b0c:	f7fe f9fc 	bl	8007f08 <HAL_RCC_GetSysClockFreq>
 8009b10:	0003      	movs	r3, r0
 8009b12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b14:	e00d      	b.n	8009b32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b16:	2380      	movs	r3, #128	; 0x80
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b1c:	e009      	b.n	8009b32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8009b22:	231a      	movs	r3, #26
 8009b24:	2220      	movs	r2, #32
 8009b26:	4694      	mov	ip, r2
 8009b28:	44bc      	add	ip, r7
 8009b2a:	4463      	add	r3, ip
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	701a      	strb	r2, [r3, #0]
        break;
 8009b30:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d100      	bne.n	8009b3a <UART_SetConfig+0x57e>
 8009b38:	e0a7      	b.n	8009c8a <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b3e:	4b4e      	ldr	r3, [pc, #312]	; (8009c78 <UART_SetConfig+0x6bc>)
 8009b40:	0052      	lsls	r2, r2, #1
 8009b42:	5ad3      	ldrh	r3, [r2, r3]
 8009b44:	0019      	movs	r1, r3
 8009b46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009b48:	f7f6 faf8 	bl	800013c <__udivsi3>
 8009b4c:	0003      	movs	r3, r0
 8009b4e:	005a      	lsls	r2, r3, #1
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	085b      	lsrs	r3, r3, #1
 8009b56:	18d2      	adds	r2, r2, r3
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	0019      	movs	r1, r3
 8009b5e:	0010      	movs	r0, r2
 8009b60:	f7f6 faec 	bl	800013c <__udivsi3>
 8009b64:	0003      	movs	r3, r0
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	2b0f      	cmp	r3, #15
 8009b6e:	d921      	bls.n	8009bb4 <UART_SetConfig+0x5f8>
 8009b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b72:	2380      	movs	r3, #128	; 0x80
 8009b74:	025b      	lsls	r3, r3, #9
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d21c      	bcs.n	8009bb4 <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	200e      	movs	r0, #14
 8009b80:	2420      	movs	r4, #32
 8009b82:	193b      	adds	r3, r7, r4
 8009b84:	181b      	adds	r3, r3, r0
 8009b86:	210f      	movs	r1, #15
 8009b88:	438a      	bics	r2, r1
 8009b8a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8e:	085b      	lsrs	r3, r3, #1
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	2207      	movs	r2, #7
 8009b94:	4013      	ands	r3, r2
 8009b96:	b299      	uxth	r1, r3
 8009b98:	193b      	adds	r3, r7, r4
 8009b9a:	181b      	adds	r3, r3, r0
 8009b9c:	193a      	adds	r2, r7, r4
 8009b9e:	1812      	adds	r2, r2, r0
 8009ba0:	8812      	ldrh	r2, [r2, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	193a      	adds	r2, r7, r4
 8009bac:	1812      	adds	r2, r2, r0
 8009bae:	8812      	ldrh	r2, [r2, #0]
 8009bb0:	60da      	str	r2, [r3, #12]
 8009bb2:	e06a      	b.n	8009c8a <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009bb4:	231a      	movs	r3, #26
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	4694      	mov	ip, r2
 8009bba:	44bc      	add	ip, r7
 8009bbc:	4463      	add	r3, ip
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	701a      	strb	r2, [r3, #0]
 8009bc2:	e062      	b.n	8009c8a <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bc4:	231b      	movs	r3, #27
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	4694      	mov	ip, r2
 8009bca:	44bc      	add	ip, r7
 8009bcc:	4463      	add	r3, ip
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d015      	beq.n	8009c00 <UART_SetConfig+0x644>
 8009bd4:	dc18      	bgt.n	8009c08 <UART_SetConfig+0x64c>
 8009bd6:	2b04      	cmp	r3, #4
 8009bd8:	d00d      	beq.n	8009bf6 <UART_SetConfig+0x63a>
 8009bda:	dc15      	bgt.n	8009c08 <UART_SetConfig+0x64c>
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <UART_SetConfig+0x62a>
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d005      	beq.n	8009bf0 <UART_SetConfig+0x634>
 8009be4:	e010      	b.n	8009c08 <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009be6:	f7fe fa1b 	bl	8008020 <HAL_RCC_GetPCLK1Freq>
 8009bea:	0003      	movs	r3, r0
 8009bec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bee:	e015      	b.n	8009c1c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bf0:	4b20      	ldr	r3, [pc, #128]	; (8009c74 <UART_SetConfig+0x6b8>)
 8009bf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bf4:	e012      	b.n	8009c1c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bf6:	f7fe f987 	bl	8007f08 <HAL_RCC_GetSysClockFreq>
 8009bfa:	0003      	movs	r3, r0
 8009bfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bfe:	e00d      	b.n	8009c1c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c00:	2380      	movs	r3, #128	; 0x80
 8009c02:	021b      	lsls	r3, r3, #8
 8009c04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c06:	e009      	b.n	8009c1c <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8009c0c:	231a      	movs	r3, #26
 8009c0e:	2220      	movs	r2, #32
 8009c10:	4694      	mov	ip, r2
 8009c12:	44bc      	add	ip, r7
 8009c14:	4463      	add	r3, ip
 8009c16:	2201      	movs	r2, #1
 8009c18:	701a      	strb	r2, [r3, #0]
        break;
 8009c1a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d033      	beq.n	8009c8a <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c26:	4b14      	ldr	r3, [pc, #80]	; (8009c78 <UART_SetConfig+0x6bc>)
 8009c28:	0052      	lsls	r2, r2, #1
 8009c2a:	5ad3      	ldrh	r3, [r2, r3]
 8009c2c:	0019      	movs	r1, r3
 8009c2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c30:	f7f6 fa84 	bl	800013c <__udivsi3>
 8009c34:	0003      	movs	r3, r0
 8009c36:	001a      	movs	r2, r3
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	085b      	lsrs	r3, r3, #1
 8009c3e:	18d2      	adds	r2, r2, r3
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	0019      	movs	r1, r3
 8009c46:	0010      	movs	r0, r2
 8009c48:	f7f6 fa78 	bl	800013c <__udivsi3>
 8009c4c:	0003      	movs	r3, r0
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	2b0f      	cmp	r3, #15
 8009c56:	d911      	bls.n	8009c7c <UART_SetConfig+0x6c0>
 8009c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c5a:	2380      	movs	r3, #128	; 0x80
 8009c5c:	025b      	lsls	r3, r3, #9
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d20c      	bcs.n	8009c7c <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c68:	60da      	str	r2, [r3, #12]
 8009c6a:	e00e      	b.n	8009c8a <UART_SetConfig+0x6ce>
 8009c6c:	40008000 	.word	0x40008000
 8009c70:	40008400 	.word	0x40008400
 8009c74:	00f42400 	.word	0x00f42400
 8009c78:	0800d870 	.word	0x0800d870
      }
      else
      {
        ret = HAL_ERROR;
 8009c7c:	231a      	movs	r3, #26
 8009c7e:	2220      	movs	r2, #32
 8009c80:	4694      	mov	ip, r2
 8009c82:	44bc      	add	ip, r7
 8009c84:	4463      	add	r3, ip
 8009c86:	2201      	movs	r2, #1
 8009c88:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	226a      	movs	r2, #106	; 0x6a
 8009c8e:	2101      	movs	r1, #1
 8009c90:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	2268      	movs	r2, #104	; 0x68
 8009c96:	2101      	movs	r1, #1
 8009c98:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009ca6:	231a      	movs	r3, #26
 8009ca8:	2220      	movs	r2, #32
 8009caa:	4694      	mov	ip, r2
 8009cac:	44bc      	add	ip, r7
 8009cae:	4463      	add	r3, ip
 8009cb0:	781b      	ldrb	r3, [r3, #0]
}
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	b010      	add	sp, #64	; 0x40
 8009cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8009cba:	46c0      	nop			; (mov r8, r8)

08009cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc8:	2201      	movs	r2, #1
 8009cca:	4013      	ands	r3, r2
 8009ccc:	d00b      	beq.n	8009ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	4a4a      	ldr	r2, [pc, #296]	; (8009e00 <UART_AdvFeatureConfig+0x144>)
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	0019      	movs	r1, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cea:	2202      	movs	r2, #2
 8009cec:	4013      	ands	r3, r2
 8009cee:	d00b      	beq.n	8009d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	4a43      	ldr	r2, [pc, #268]	; (8009e04 <UART_AdvFeatureConfig+0x148>)
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	0019      	movs	r1, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0c:	2204      	movs	r2, #4
 8009d0e:	4013      	ands	r3, r2
 8009d10:	d00b      	beq.n	8009d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	4a3b      	ldr	r2, [pc, #236]	; (8009e08 <UART_AdvFeatureConfig+0x14c>)
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	0019      	movs	r1, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2e:	2208      	movs	r2, #8
 8009d30:	4013      	ands	r3, r2
 8009d32:	d00b      	beq.n	8009d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	4a34      	ldr	r2, [pc, #208]	; (8009e0c <UART_AdvFeatureConfig+0x150>)
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	0019      	movs	r1, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d50:	2210      	movs	r2, #16
 8009d52:	4013      	ands	r3, r2
 8009d54:	d00b      	beq.n	8009d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	4a2c      	ldr	r2, [pc, #176]	; (8009e10 <UART_AdvFeatureConfig+0x154>)
 8009d5e:	4013      	ands	r3, r2
 8009d60:	0019      	movs	r1, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d72:	2220      	movs	r2, #32
 8009d74:	4013      	ands	r3, r2
 8009d76:	d00b      	beq.n	8009d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	4a25      	ldr	r2, [pc, #148]	; (8009e14 <UART_AdvFeatureConfig+0x158>)
 8009d80:	4013      	ands	r3, r2
 8009d82:	0019      	movs	r1, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d94:	2240      	movs	r2, #64	; 0x40
 8009d96:	4013      	ands	r3, r2
 8009d98:	d01d      	beq.n	8009dd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	4a1d      	ldr	r2, [pc, #116]	; (8009e18 <UART_AdvFeatureConfig+0x15c>)
 8009da2:	4013      	ands	r3, r2
 8009da4:	0019      	movs	r1, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009db6:	2380      	movs	r3, #128	; 0x80
 8009db8:	035b      	lsls	r3, r3, #13
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d10b      	bne.n	8009dd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	4a15      	ldr	r2, [pc, #84]	; (8009e1c <UART_AdvFeatureConfig+0x160>)
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	0019      	movs	r1, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dda:	2280      	movs	r2, #128	; 0x80
 8009ddc:	4013      	ands	r3, r2
 8009dde:	d00b      	beq.n	8009df8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	4a0e      	ldr	r2, [pc, #56]	; (8009e20 <UART_AdvFeatureConfig+0x164>)
 8009de8:	4013      	ands	r3, r2
 8009dea:	0019      	movs	r1, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	430a      	orrs	r2, r1
 8009df6:	605a      	str	r2, [r3, #4]
  }
}
 8009df8:	46c0      	nop			; (mov r8, r8)
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	b002      	add	sp, #8
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	fffdffff 	.word	0xfffdffff
 8009e04:	fffeffff 	.word	0xfffeffff
 8009e08:	fffbffff 	.word	0xfffbffff
 8009e0c:	ffff7fff 	.word	0xffff7fff
 8009e10:	ffffefff 	.word	0xffffefff
 8009e14:	ffffdfff 	.word	0xffffdfff
 8009e18:	ffefffff 	.word	0xffefffff
 8009e1c:	ff9fffff 	.word	0xff9fffff
 8009e20:	fff7ffff 	.word	0xfff7ffff

08009e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af02      	add	r7, sp, #8
 8009e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	228c      	movs	r2, #140	; 0x8c
 8009e30:	2100      	movs	r1, #0
 8009e32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e34:	f7f9 feb4 	bl	8003ba0 <HAL_GetTick>
 8009e38:	0003      	movs	r3, r0
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2208      	movs	r2, #8
 8009e44:	4013      	ands	r3, r2
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d10c      	bne.n	8009e64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2280      	movs	r2, #128	; 0x80
 8009e4e:	0391      	lsls	r1, r2, #14
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	4a18      	ldr	r2, [pc, #96]	; (8009eb4 <UART_CheckIdleState+0x90>)
 8009e54:	9200      	str	r2, [sp, #0]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f000 f82e 	bl	8009eb8 <UART_WaitOnFlagUntilTimeout>
 8009e5c:	1e03      	subs	r3, r0, #0
 8009e5e:	d001      	beq.n	8009e64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e023      	b.n	8009eac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2204      	movs	r2, #4
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	2b04      	cmp	r3, #4
 8009e70:	d10c      	bne.n	8009e8c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2280      	movs	r2, #128	; 0x80
 8009e76:	03d1      	lsls	r1, r2, #15
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	4a0e      	ldr	r2, [pc, #56]	; (8009eb4 <UART_CheckIdleState+0x90>)
 8009e7c:	9200      	str	r2, [sp, #0]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f000 f81a 	bl	8009eb8 <UART_WaitOnFlagUntilTimeout>
 8009e84:	1e03      	subs	r3, r0, #0
 8009e86:	d001      	beq.n	8009e8c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e00f      	b.n	8009eac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2284      	movs	r2, #132	; 0x84
 8009e90:	2120      	movs	r1, #32
 8009e92:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2288      	movs	r2, #136	; 0x88
 8009e98:	2120      	movs	r1, #32
 8009e9a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2280      	movs	r2, #128	; 0x80
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	0018      	movs	r0, r3
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	b004      	add	sp, #16
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	01ffffff 	.word	0x01ffffff

08009eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b094      	sub	sp, #80	; 0x50
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	603b      	str	r3, [r7, #0]
 8009ec4:	1dfb      	adds	r3, r7, #7
 8009ec6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ec8:	e0a7      	b.n	800a01a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ecc:	3301      	adds	r3, #1
 8009ece:	d100      	bne.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8009ed0:	e0a3      	b.n	800a01a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ed2:	f7f9 fe65 	bl	8003ba0 <HAL_GetTick>
 8009ed6:	0002      	movs	r2, r0
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d302      	bcc.n	8009ee8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d13f      	bne.n	8009f68 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8009eec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef8:	f383 8810 	msr	PRIMASK, r3
}
 8009efc:	46c0      	nop			; (mov r8, r8)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	494e      	ldr	r1, [pc, #312]	; (800a044 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009f0a:	400a      	ands	r2, r1
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f14:	f383 8810 	msr	PRIMASK, r3
}
 8009f18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8009f1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f22:	643b      	str	r3, [r7, #64]	; 0x40
 8009f24:	2301      	movs	r3, #1
 8009f26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2a:	f383 8810 	msr	PRIMASK, r3
}
 8009f2e:	46c0      	nop			; (mov r8, r8)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	689a      	ldr	r2, [r3, #8]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	438a      	bics	r2, r1
 8009f3e:	609a      	str	r2, [r3, #8]
 8009f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f46:	f383 8810 	msr	PRIMASK, r3
}
 8009f4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2284      	movs	r2, #132	; 0x84
 8009f50:	2120      	movs	r1, #32
 8009f52:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2288      	movs	r2, #136	; 0x88
 8009f58:	2120      	movs	r1, #32
 8009f5a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2280      	movs	r2, #128	; 0x80
 8009f60:	2100      	movs	r1, #0
 8009f62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e069      	b.n	800a03c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2204      	movs	r2, #4
 8009f70:	4013      	ands	r3, r2
 8009f72:	d052      	beq.n	800a01a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69da      	ldr	r2, [r3, #28]
 8009f7a:	2380      	movs	r3, #128	; 0x80
 8009f7c:	011b      	lsls	r3, r3, #4
 8009f7e:	401a      	ands	r2, r3
 8009f80:	2380      	movs	r3, #128	; 0x80
 8009f82:	011b      	lsls	r3, r3, #4
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d148      	bne.n	800a01a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2280      	movs	r2, #128	; 0x80
 8009f8e:	0112      	lsls	r2, r2, #4
 8009f90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f92:	f3ef 8310 	mrs	r3, PRIMASK
 8009f96:	613b      	str	r3, [r7, #16]
  return(result);
 8009f98:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	f383 8810 	msr	PRIMASK, r3
}
 8009fa6:	46c0      	nop			; (mov r8, r8)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4924      	ldr	r1, [pc, #144]	; (800a044 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009fb4:	400a      	ands	r2, r1
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	f383 8810 	msr	PRIMASK, r3
}
 8009fc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8009fc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8009fca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fce:	2301      	movs	r3, #1
 8009fd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	f383 8810 	msr	PRIMASK, r3
}
 8009fd8:	46c0      	nop			; (mov r8, r8)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	438a      	bics	r2, r1
 8009fe8:	609a      	str	r2, [r3, #8]
 8009fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	f383 8810 	msr	PRIMASK, r3
}
 8009ff4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2284      	movs	r2, #132	; 0x84
 8009ffa:	2120      	movs	r1, #32
 8009ffc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2288      	movs	r2, #136	; 0x88
 800a002:	2120      	movs	r1, #32
 800a004:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	228c      	movs	r2, #140	; 0x8c
 800a00a:	2120      	movs	r1, #32
 800a00c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2280      	movs	r2, #128	; 0x80
 800a012:	2100      	movs	r1, #0
 800a014:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e010      	b.n	800a03c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	4013      	ands	r3, r2
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	425a      	negs	r2, r3
 800a02a:	4153      	adcs	r3, r2
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	001a      	movs	r2, r3
 800a030:	1dfb      	adds	r3, r7, #7
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	429a      	cmp	r2, r3
 800a036:	d100      	bne.n	800a03a <UART_WaitOnFlagUntilTimeout+0x182>
 800a038:	e747      	b.n	8009eca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	0018      	movs	r0, r3
 800a03e:	46bd      	mov	sp, r7
 800a040:	b014      	add	sp, #80	; 0x50
 800a042:	bd80      	pop	{r7, pc}
 800a044:	fffffe5f 	.word	0xfffffe5f

0800a048 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b090      	sub	sp, #64	; 0x40
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	1dbb      	adds	r3, r7, #6
 800a054:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	1dba      	adds	r2, r7, #6
 800a060:	215c      	movs	r1, #92	; 0x5c
 800a062:	8812      	ldrh	r2, [r2, #0]
 800a064:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	228c      	movs	r2, #140	; 0x8c
 800a06a:	2100      	movs	r1, #0
 800a06c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2288      	movs	r2, #136	; 0x88
 800a072:	2122      	movs	r1, #34	; 0x22
 800a074:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d02c      	beq.n	800a0d8 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a082:	4a40      	ldr	r2, [pc, #256]	; (800a184 <UART_Start_Receive_DMA+0x13c>)
 800a084:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a08a:	4a3f      	ldr	r2, [pc, #252]	; (800a188 <UART_Start_Receive_DMA+0x140>)
 800a08c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a092:	4a3e      	ldr	r2, [pc, #248]	; (800a18c <UART_Start_Receive_DMA+0x144>)
 800a094:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a09a:	2200      	movs	r2, #0
 800a09c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3324      	adds	r3, #36	; 0x24
 800a0a8:	0019      	movs	r1, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ae:	001a      	movs	r2, r3
 800a0b0:	1dbb      	adds	r3, r7, #6
 800a0b2:	881b      	ldrh	r3, [r3, #0]
 800a0b4:	f7fa fc3e 	bl	8004934 <HAL_DMA_Start_IT>
 800a0b8:	1e03      	subs	r3, r0, #0
 800a0ba:	d00d      	beq.n	800a0d8 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	228c      	movs	r2, #140	; 0x8c
 800a0c0:	2110      	movs	r1, #16
 800a0c2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2280      	movs	r2, #128	; 0x80
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2288      	movs	r2, #136	; 0x88
 800a0d0:	2120      	movs	r1, #32
 800a0d2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e050      	b.n	800a17a <UART_Start_Receive_DMA+0x132>
    }
  }
  __HAL_UNLOCK(huart);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2280      	movs	r2, #128	; 0x80
 800a0dc:	2100      	movs	r1, #0
 800a0de:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a0e4:	613b      	str	r3, [r7, #16]
  return(result);
 800a0e6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f383 8810 	msr	PRIMASK, r3
}
 800a0f4:	46c0      	nop			; (mov r8, r8)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2180      	movs	r1, #128	; 0x80
 800a102:	0049      	lsls	r1, r1, #1
 800a104:	430a      	orrs	r2, r1
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a10a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	f383 8810 	msr	PRIMASK, r3
}
 800a112:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a114:	f3ef 8310 	mrs	r3, PRIMASK
 800a118:	61fb      	str	r3, [r7, #28]
  return(result);
 800a11a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a11c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a11e:	2301      	movs	r3, #1
 800a120:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	f383 8810 	msr	PRIMASK, r3
}
 800a128:	46c0      	nop			; (mov r8, r8)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	689a      	ldr	r2, [r3, #8]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2101      	movs	r1, #1
 800a136:	430a      	orrs	r2, r1
 800a138:	609a      	str	r2, [r3, #8]
 800a13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	f383 8810 	msr	PRIMASK, r3
}
 800a144:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a146:	f3ef 8310 	mrs	r3, PRIMASK
 800a14a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a14e:	637b      	str	r3, [r7, #52]	; 0x34
 800a150:	2301      	movs	r3, #1
 800a152:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a156:	f383 8810 	msr	PRIMASK, r3
}
 800a15a:	46c0      	nop			; (mov r8, r8)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	689a      	ldr	r2, [r3, #8]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2140      	movs	r1, #64	; 0x40
 800a168:	430a      	orrs	r2, r1
 800a16a:	609a      	str	r2, [r3, #8]
 800a16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a16e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	f383 8810 	msr	PRIMASK, r3
}
 800a176:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	0018      	movs	r0, r3
 800a17c:	46bd      	mov	sp, r7
 800a17e:	b010      	add	sp, #64	; 0x40
 800a180:	bd80      	pop	{r7, pc}
 800a182:	46c0      	nop			; (mov r8, r8)
 800a184:	0800a2dd 	.word	0x0800a2dd
 800a188:	0800a405 	.word	0x0800a405
 800a18c:	0800a441 	.word	0x0800a441

0800a190 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b08a      	sub	sp, #40	; 0x28
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a198:	f3ef 8310 	mrs	r3, PRIMASK
 800a19c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a19e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f383 8810 	msr	PRIMASK, r3
}
 800a1ac:	46c0      	nop			; (mov r8, r8)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	21c0      	movs	r1, #192	; 0xc0
 800a1ba:	438a      	bics	r2, r1
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f383 8810 	msr	PRIMASK, r3
}
 800a1c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ce:	617b      	str	r3, [r7, #20]
  return(result);
 800a1d0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a1d2:	623b      	str	r3, [r7, #32]
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	f383 8810 	msr	PRIMASK, r3
}
 800a1de:	46c0      	nop			; (mov r8, r8)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	689a      	ldr	r2, [r3, #8]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4908      	ldr	r1, [pc, #32]	; (800a20c <UART_EndTxTransfer+0x7c>)
 800a1ec:	400a      	ands	r2, r1
 800a1ee:	609a      	str	r2, [r3, #8]
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	f383 8810 	msr	PRIMASK, r3
}
 800a1fa:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2284      	movs	r2, #132	; 0x84
 800a200:	2120      	movs	r1, #32
 800a202:	5099      	str	r1, [r3, r2]
}
 800a204:	46c0      	nop			; (mov r8, r8)
 800a206:	46bd      	mov	sp, r7
 800a208:	b00a      	add	sp, #40	; 0x28
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	ff7fffff 	.word	0xff7fffff

0800a210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08e      	sub	sp, #56	; 0x38
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a218:	f3ef 8310 	mrs	r3, PRIMASK
 800a21c:	617b      	str	r3, [r7, #20]
  return(result);
 800a21e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a220:	637b      	str	r3, [r7, #52]	; 0x34
 800a222:	2301      	movs	r3, #1
 800a224:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	f383 8810 	msr	PRIMASK, r3
}
 800a22c:	46c0      	nop			; (mov r8, r8)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4926      	ldr	r1, [pc, #152]	; (800a2d4 <UART_EndRxTransfer+0xc4>)
 800a23a:	400a      	ands	r2, r1
 800a23c:	601a      	str	r2, [r3, #0]
 800a23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a240:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	f383 8810 	msr	PRIMASK, r3
}
 800a248:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a24a:	f3ef 8310 	mrs	r3, PRIMASK
 800a24e:	623b      	str	r3, [r7, #32]
  return(result);
 800a250:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a252:	633b      	str	r3, [r7, #48]	; 0x30
 800a254:	2301      	movs	r3, #1
 800a256:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	f383 8810 	msr	PRIMASK, r3
}
 800a25e:	46c0      	nop			; (mov r8, r8)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	491b      	ldr	r1, [pc, #108]	; (800a2d8 <UART_EndRxTransfer+0xc8>)
 800a26c:	400a      	ands	r2, r1
 800a26e:	609a      	str	r2, [r3, #8]
 800a270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a272:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a276:	f383 8810 	msr	PRIMASK, r3
}
 800a27a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a280:	2b01      	cmp	r3, #1
 800a282:	d118      	bne.n	800a2b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a284:	f3ef 8310 	mrs	r3, PRIMASK
 800a288:	60bb      	str	r3, [r7, #8]
  return(result);
 800a28a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a28c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a28e:	2301      	movs	r3, #1
 800a290:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f383 8810 	msr	PRIMASK, r3
}
 800a298:	46c0      	nop			; (mov r8, r8)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2110      	movs	r1, #16
 800a2a6:	438a      	bics	r2, r1
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f383 8810 	msr	PRIMASK, r3
}
 800a2b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2288      	movs	r2, #136	; 0x88
 800a2ba:	2120      	movs	r1, #32
 800a2bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a2ca:	46c0      	nop			; (mov r8, r8)
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	b00e      	add	sp, #56	; 0x38
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	46c0      	nop			; (mov r8, r8)
 800a2d4:	fffffedf 	.word	0xfffffedf
 800a2d8:	effffffe 	.word	0xeffffffe

0800a2dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b094      	sub	sp, #80	; 0x50
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	d16f      	bne.n	800a3d6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800a2f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2f8:	225e      	movs	r2, #94	; 0x5e
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2fe:	f3ef 8310 	mrs	r3, PRIMASK
 800a302:	61bb      	str	r3, [r7, #24]
  return(result);
 800a304:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a306:	64bb      	str	r3, [r7, #72]	; 0x48
 800a308:	2301      	movs	r3, #1
 800a30a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	f383 8810 	msr	PRIMASK, r3
}
 800a312:	46c0      	nop			; (mov r8, r8)
 800a314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4938      	ldr	r1, [pc, #224]	; (800a400 <UART_DMAReceiveCplt+0x124>)
 800a320:	400a      	ands	r2, r1
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a326:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	f383 8810 	msr	PRIMASK, r3
}
 800a32e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a330:	f3ef 8310 	mrs	r3, PRIMASK
 800a334:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a338:	647b      	str	r3, [r7, #68]	; 0x44
 800a33a:	2301      	movs	r3, #1
 800a33c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a340:	f383 8810 	msr	PRIMASK, r3
}
 800a344:	46c0      	nop			; (mov r8, r8)
 800a346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689a      	ldr	r2, [r3, #8]
 800a34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2101      	movs	r1, #1
 800a352:	438a      	bics	r2, r1
 800a354:	609a      	str	r2, [r3, #8]
 800a356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a358:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	f383 8810 	msr	PRIMASK, r3
}
 800a360:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a362:	f3ef 8310 	mrs	r3, PRIMASK
 800a366:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a36a:	643b      	str	r3, [r7, #64]	; 0x40
 800a36c:	2301      	movs	r3, #1
 800a36e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a372:	f383 8810 	msr	PRIMASK, r3
}
 800a376:	46c0      	nop			; (mov r8, r8)
 800a378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	689a      	ldr	r2, [r3, #8]
 800a37e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2140      	movs	r1, #64	; 0x40
 800a384:	438a      	bics	r2, r1
 800a386:	609a      	str	r2, [r3, #8]
 800a388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a38a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38e:	f383 8810 	msr	PRIMASK, r3
}
 800a392:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a396:	2288      	movs	r2, #136	; 0x88
 800a398:	2120      	movs	r1, #32
 800a39a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a39e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d118      	bne.n	800a3d6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	f383 8810 	msr	PRIMASK, r3
}
 800a3b8:	46c0      	nop			; (mov r8, r8)
 800a3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2110      	movs	r1, #16
 800a3c6:	438a      	bics	r2, r1
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f383 8810 	msr	PRIMASK, r3
}
 800a3d4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d108      	bne.n	800a3f0 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3e0:	225c      	movs	r2, #92	; 0x5c
 800a3e2:	5a9a      	ldrh	r2, [r3, r2]
 800a3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3e6:	0011      	movs	r1, r2
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	f7ff f8db 	bl	80095a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3ee:	e003      	b.n	800a3f8 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800a3f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3f2:	0018      	movs	r0, r3
 800a3f4:	f7f8 f808 	bl	8002408 <HAL_UART_RxCpltCallback>
}
 800a3f8:	46c0      	nop			; (mov r8, r8)
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	b014      	add	sp, #80	; 0x50
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	fffffeff 	.word	0xfffffeff

0800a404 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a410:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a416:	2b01      	cmp	r3, #1
 800a418:	d10a      	bne.n	800a430 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	225c      	movs	r2, #92	; 0x5c
 800a41e:	5a9b      	ldrh	r3, [r3, r2]
 800a420:	085b      	lsrs	r3, r3, #1
 800a422:	b29a      	uxth	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	0011      	movs	r1, r2
 800a428:	0018      	movs	r0, r3
 800a42a:	f7ff f8bb 	bl	80095a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a42e:	e003      	b.n	800a438 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	0018      	movs	r0, r3
 800a434:	f7ff f89e 	bl	8009574 <HAL_UART_RxHalfCpltCallback>
}
 800a438:	46c0      	nop			; (mov r8, r8)
 800a43a:	46bd      	mov	sp, r7
 800a43c:	b004      	add	sp, #16
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	2284      	movs	r2, #132	; 0x84
 800a452:	589b      	ldr	r3, [r3, r2]
 800a454:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2288      	movs	r2, #136	; 0x88
 800a45a:	589b      	ldr	r3, [r3, r2]
 800a45c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	2280      	movs	r2, #128	; 0x80
 800a466:	4013      	ands	r3, r2
 800a468:	2b80      	cmp	r3, #128	; 0x80
 800a46a:	d10a      	bne.n	800a482 <UART_DMAError+0x42>
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	2b21      	cmp	r3, #33	; 0x21
 800a470:	d107      	bne.n	800a482 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2256      	movs	r2, #86	; 0x56
 800a476:	2100      	movs	r1, #0
 800a478:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	0018      	movs	r0, r3
 800a47e:	f7ff fe87 	bl	800a190 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	2240      	movs	r2, #64	; 0x40
 800a48a:	4013      	ands	r3, r2
 800a48c:	2b40      	cmp	r3, #64	; 0x40
 800a48e:	d10a      	bne.n	800a4a6 <UART_DMAError+0x66>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2b22      	cmp	r3, #34	; 0x22
 800a494:	d107      	bne.n	800a4a6 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	225e      	movs	r2, #94	; 0x5e
 800a49a:	2100      	movs	r1, #0
 800a49c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	0018      	movs	r0, r3
 800a4a2:	f7ff feb5 	bl	800a210 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	228c      	movs	r2, #140	; 0x8c
 800a4aa:	589b      	ldr	r3, [r3, r2]
 800a4ac:	2210      	movs	r2, #16
 800a4ae:	431a      	orrs	r2, r3
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	218c      	movs	r1, #140	; 0x8c
 800a4b4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	0018      	movs	r0, r3
 800a4ba:	f7ff f863 	bl	8009584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4be:	46c0      	nop			; (mov r8, r8)
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	b006      	add	sp, #24
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d2:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4d8:	2200      	movs	r2, #0
 800a4da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d004      	beq.n	800a4ee <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d12d      	bne.n	800a54a <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2256      	movs	r2, #86	; 0x56
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	225e      	movs	r2, #94	; 0x5e
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	228c      	movs	r2, #140	; 0x8c
 800a502:	2100      	movs	r1, #0
 800a504:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	220f      	movs	r2, #15
 800a50c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a512:	2380      	movs	r3, #128	; 0x80
 800a514:	059b      	lsls	r3, r3, #22
 800a516:	429a      	cmp	r2, r3
 800a518:	d107      	bne.n	800a52a <UART_DMATxAbortCallback+0x64>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	699a      	ldr	r2, [r3, #24]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2110      	movs	r1, #16
 800a526:	430a      	orrs	r2, r1
 800a528:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2284      	movs	r2, #132	; 0x84
 800a52e:	2120      	movs	r1, #32
 800a530:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2288      	movs	r2, #136	; 0x88
 800a536:	2120      	movs	r1, #32
 800a538:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	0018      	movs	r0, r3
 800a544:	f7ff f826 	bl	8009594 <HAL_UART_AbortCpltCallback>
 800a548:	e000      	b.n	800a54c <UART_DMATxAbortCallback+0x86>
      return;
 800a54a:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a54c:	46bd      	mov	sp, r7
 800a54e:	b004      	add	sp, #16
 800a550:	bd80      	pop	{r7, pc}

0800a552 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b084      	sub	sp, #16
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a564:	2200      	movs	r2, #0
 800a566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d004      	beq.n	800a57a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a576:	2b00      	cmp	r3, #0
 800a578:	d127      	bne.n	800a5ca <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2256      	movs	r2, #86	; 0x56
 800a57e:	2100      	movs	r1, #0
 800a580:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	225e      	movs	r2, #94	; 0x5e
 800a586:	2100      	movs	r1, #0
 800a588:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	228c      	movs	r2, #140	; 0x8c
 800a58e:	2100      	movs	r1, #0
 800a590:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	220f      	movs	r2, #15
 800a598:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	699a      	ldr	r2, [r3, #24]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2108      	movs	r1, #8
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2284      	movs	r2, #132	; 0x84
 800a5ae:	2120      	movs	r1, #32
 800a5b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2288      	movs	r2, #136	; 0x88
 800a5b6:	2120      	movs	r1, #32
 800a5b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	f7fe ffe6 	bl	8009594 <HAL_UART_AbortCpltCallback>
 800a5c8:	e000      	b.n	800a5cc <UART_DMARxAbortCallback+0x7a>
      return;
 800a5ca:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	b004      	add	sp, #16
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2280      	movs	r2, #128	; 0x80
 800a5e0:	5c9b      	ldrb	r3, [r3, r2]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d101      	bne.n	800a5ea <HAL_UARTEx_DisableFifoMode+0x16>
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	e027      	b.n	800a63a <HAL_UARTEx_DisableFifoMode+0x66>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2280      	movs	r2, #128	; 0x80
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2284      	movs	r2, #132	; 0x84
 800a5f6:	2124      	movs	r1, #36	; 0x24
 800a5f8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2101      	movs	r1, #1
 800a60e:	438a      	bics	r2, r1
 800a610:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	4a0b      	ldr	r2, [pc, #44]	; (800a644 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a616:	4013      	ands	r3, r2
 800a618:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2284      	movs	r2, #132	; 0x84
 800a62c:	2120      	movs	r1, #32
 800a62e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2280      	movs	r2, #128	; 0x80
 800a634:	2100      	movs	r1, #0
 800a636:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	0018      	movs	r0, r3
 800a63c:	46bd      	mov	sp, r7
 800a63e:	b004      	add	sp, #16
 800a640:	bd80      	pop	{r7, pc}
 800a642:	46c0      	nop			; (mov r8, r8)
 800a644:	dfffffff 	.word	0xdfffffff

0800a648 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2280      	movs	r2, #128	; 0x80
 800a656:	5c9b      	ldrb	r3, [r3, r2]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d101      	bne.n	800a660 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a65c:	2302      	movs	r3, #2
 800a65e:	e02e      	b.n	800a6be <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2280      	movs	r2, #128	; 0x80
 800a664:	2101      	movs	r1, #1
 800a666:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2284      	movs	r2, #132	; 0x84
 800a66c:	2124      	movs	r1, #36	; 0x24
 800a66e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2101      	movs	r1, #1
 800a684:	438a      	bics	r2, r1
 800a686:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	00db      	lsls	r3, r3, #3
 800a690:	08d9      	lsrs	r1, r3, #3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	430a      	orrs	r2, r1
 800a69a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	0018      	movs	r0, r3
 800a6a0:	f000 f854 	bl	800a74c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2284      	movs	r2, #132	; 0x84
 800a6b0:	2120      	movs	r1, #32
 800a6b2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2280      	movs	r2, #128	; 0x80
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	0018      	movs	r0, r3
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	b004      	add	sp, #16
 800a6c4:	bd80      	pop	{r7, pc}
	...

0800a6c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2280      	movs	r2, #128	; 0x80
 800a6d6:	5c9b      	ldrb	r3, [r3, r2]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d101      	bne.n	800a6e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a6dc:	2302      	movs	r3, #2
 800a6de:	e02f      	b.n	800a740 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2280      	movs	r2, #128	; 0x80
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2284      	movs	r2, #132	; 0x84
 800a6ec:	2124      	movs	r1, #36	; 0x24
 800a6ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2101      	movs	r1, #1
 800a704:	438a      	bics	r2, r1
 800a706:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	4a0e      	ldr	r2, [pc, #56]	; (800a748 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a710:	4013      	ands	r3, r2
 800a712:	0019      	movs	r1, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	0018      	movs	r0, r3
 800a722:	f000 f813 	bl	800a74c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2284      	movs	r2, #132	; 0x84
 800a732:	2120      	movs	r1, #32
 800a734:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2280      	movs	r2, #128	; 0x80
 800a73a:	2100      	movs	r1, #0
 800a73c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	0018      	movs	r0, r3
 800a742:	46bd      	mov	sp, r7
 800a744:	b004      	add	sp, #16
 800a746:	bd80      	pop	{r7, pc}
 800a748:	f1ffffff 	.word	0xf1ffffff

0800a74c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d108      	bne.n	800a76e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	226a      	movs	r2, #106	; 0x6a
 800a760:	2101      	movs	r1, #1
 800a762:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2268      	movs	r2, #104	; 0x68
 800a768:	2101      	movs	r1, #1
 800a76a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a76c:	e043      	b.n	800a7f6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a76e:	260f      	movs	r6, #15
 800a770:	19bb      	adds	r3, r7, r6
 800a772:	2208      	movs	r2, #8
 800a774:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a776:	200e      	movs	r0, #14
 800a778:	183b      	adds	r3, r7, r0
 800a77a:	2208      	movs	r2, #8
 800a77c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	0e5b      	lsrs	r3, r3, #25
 800a786:	b2da      	uxtb	r2, r3
 800a788:	240d      	movs	r4, #13
 800a78a:	193b      	adds	r3, r7, r4
 800a78c:	2107      	movs	r1, #7
 800a78e:	400a      	ands	r2, r1
 800a790:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	0f5b      	lsrs	r3, r3, #29
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	250c      	movs	r5, #12
 800a79e:	197b      	adds	r3, r7, r5
 800a7a0:	2107      	movs	r1, #7
 800a7a2:	400a      	ands	r2, r1
 800a7a4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7a6:	183b      	adds	r3, r7, r0
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	197a      	adds	r2, r7, r5
 800a7ac:	7812      	ldrb	r2, [r2, #0]
 800a7ae:	4914      	ldr	r1, [pc, #80]	; (800a800 <UARTEx_SetNbDataToProcess+0xb4>)
 800a7b0:	5c8a      	ldrb	r2, [r1, r2]
 800a7b2:	435a      	muls	r2, r3
 800a7b4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a7b6:	197b      	adds	r3, r7, r5
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	4a12      	ldr	r2, [pc, #72]	; (800a804 <UARTEx_SetNbDataToProcess+0xb8>)
 800a7bc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7be:	0019      	movs	r1, r3
 800a7c0:	f7f5 fd46 	bl	8000250 <__divsi3>
 800a7c4:	0003      	movs	r3, r0
 800a7c6:	b299      	uxth	r1, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	226a      	movs	r2, #106	; 0x6a
 800a7cc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7ce:	19bb      	adds	r3, r7, r6
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	193a      	adds	r2, r7, r4
 800a7d4:	7812      	ldrb	r2, [r2, #0]
 800a7d6:	490a      	ldr	r1, [pc, #40]	; (800a800 <UARTEx_SetNbDataToProcess+0xb4>)
 800a7d8:	5c8a      	ldrb	r2, [r1, r2]
 800a7da:	435a      	muls	r2, r3
 800a7dc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a7de:	193b      	adds	r3, r7, r4
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	4a08      	ldr	r2, [pc, #32]	; (800a804 <UARTEx_SetNbDataToProcess+0xb8>)
 800a7e4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7e6:	0019      	movs	r1, r3
 800a7e8:	f7f5 fd32 	bl	8000250 <__divsi3>
 800a7ec:	0003      	movs	r3, r0
 800a7ee:	b299      	uxth	r1, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2268      	movs	r2, #104	; 0x68
 800a7f4:	5299      	strh	r1, [r3, r2]
}
 800a7f6:	46c0      	nop			; (mov r8, r8)
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	b005      	add	sp, #20
 800a7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7fe:	46c0      	nop			; (mov r8, r8)
 800a800:	0800d888 	.word	0x0800d888
 800a804:	0800d890 	.word	0x0800d890

0800a808 <__errno>:
 800a808:	4b01      	ldr	r3, [pc, #4]	; (800a810 <__errno+0x8>)
 800a80a:	6818      	ldr	r0, [r3, #0]
 800a80c:	4770      	bx	lr
 800a80e:	46c0      	nop			; (mov r8, r8)
 800a810:	2000000c 	.word	0x2000000c

0800a814 <__libc_init_array>:
 800a814:	b570      	push	{r4, r5, r6, lr}
 800a816:	2600      	movs	r6, #0
 800a818:	4d0c      	ldr	r5, [pc, #48]	; (800a84c <__libc_init_array+0x38>)
 800a81a:	4c0d      	ldr	r4, [pc, #52]	; (800a850 <__libc_init_array+0x3c>)
 800a81c:	1b64      	subs	r4, r4, r5
 800a81e:	10a4      	asrs	r4, r4, #2
 800a820:	42a6      	cmp	r6, r4
 800a822:	d109      	bne.n	800a838 <__libc_init_array+0x24>
 800a824:	2600      	movs	r6, #0
 800a826:	f002 ff6f 	bl	800d708 <_init>
 800a82a:	4d0a      	ldr	r5, [pc, #40]	; (800a854 <__libc_init_array+0x40>)
 800a82c:	4c0a      	ldr	r4, [pc, #40]	; (800a858 <__libc_init_array+0x44>)
 800a82e:	1b64      	subs	r4, r4, r5
 800a830:	10a4      	asrs	r4, r4, #2
 800a832:	42a6      	cmp	r6, r4
 800a834:	d105      	bne.n	800a842 <__libc_init_array+0x2e>
 800a836:	bd70      	pop	{r4, r5, r6, pc}
 800a838:	00b3      	lsls	r3, r6, #2
 800a83a:	58eb      	ldr	r3, [r5, r3]
 800a83c:	4798      	blx	r3
 800a83e:	3601      	adds	r6, #1
 800a840:	e7ee      	b.n	800a820 <__libc_init_array+0xc>
 800a842:	00b3      	lsls	r3, r6, #2
 800a844:	58eb      	ldr	r3, [r5, r3]
 800a846:	4798      	blx	r3
 800a848:	3601      	adds	r6, #1
 800a84a:	e7f2      	b.n	800a832 <__libc_init_array+0x1e>
 800a84c:	0800dc88 	.word	0x0800dc88
 800a850:	0800dc88 	.word	0x0800dc88
 800a854:	0800dc88 	.word	0x0800dc88
 800a858:	0800dc8c 	.word	0x0800dc8c

0800a85c <malloc>:
 800a85c:	b510      	push	{r4, lr}
 800a85e:	4b03      	ldr	r3, [pc, #12]	; (800a86c <malloc+0x10>)
 800a860:	0001      	movs	r1, r0
 800a862:	6818      	ldr	r0, [r3, #0]
 800a864:	f000 f860 	bl	800a928 <_malloc_r>
 800a868:	bd10      	pop	{r4, pc}
 800a86a:	46c0      	nop			; (mov r8, r8)
 800a86c:	2000000c 	.word	0x2000000c

0800a870 <memcpy>:
 800a870:	2300      	movs	r3, #0
 800a872:	b510      	push	{r4, lr}
 800a874:	429a      	cmp	r2, r3
 800a876:	d100      	bne.n	800a87a <memcpy+0xa>
 800a878:	bd10      	pop	{r4, pc}
 800a87a:	5ccc      	ldrb	r4, [r1, r3]
 800a87c:	54c4      	strb	r4, [r0, r3]
 800a87e:	3301      	adds	r3, #1
 800a880:	e7f8      	b.n	800a874 <memcpy+0x4>

0800a882 <memset>:
 800a882:	0003      	movs	r3, r0
 800a884:	1882      	adds	r2, r0, r2
 800a886:	4293      	cmp	r3, r2
 800a888:	d100      	bne.n	800a88c <memset+0xa>
 800a88a:	4770      	bx	lr
 800a88c:	7019      	strb	r1, [r3, #0]
 800a88e:	3301      	adds	r3, #1
 800a890:	e7f9      	b.n	800a886 <memset+0x4>
	...

0800a894 <_free_r>:
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	0005      	movs	r5, r0
 800a898:	2900      	cmp	r1, #0
 800a89a:	d010      	beq.n	800a8be <_free_r+0x2a>
 800a89c:	1f0c      	subs	r4, r1, #4
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	da00      	bge.n	800a8a6 <_free_r+0x12>
 800a8a4:	18e4      	adds	r4, r4, r3
 800a8a6:	0028      	movs	r0, r5
 800a8a8:	f001 fc42 	bl	800c130 <__malloc_lock>
 800a8ac:	4a1d      	ldr	r2, [pc, #116]	; (800a924 <_free_r+0x90>)
 800a8ae:	6813      	ldr	r3, [r2, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d105      	bne.n	800a8c0 <_free_r+0x2c>
 800a8b4:	6063      	str	r3, [r4, #4]
 800a8b6:	6014      	str	r4, [r2, #0]
 800a8b8:	0028      	movs	r0, r5
 800a8ba:	f001 fc41 	bl	800c140 <__malloc_unlock>
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	42a3      	cmp	r3, r4
 800a8c2:	d908      	bls.n	800a8d6 <_free_r+0x42>
 800a8c4:	6821      	ldr	r1, [r4, #0]
 800a8c6:	1860      	adds	r0, r4, r1
 800a8c8:	4283      	cmp	r3, r0
 800a8ca:	d1f3      	bne.n	800a8b4 <_free_r+0x20>
 800a8cc:	6818      	ldr	r0, [r3, #0]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	1841      	adds	r1, r0, r1
 800a8d2:	6021      	str	r1, [r4, #0]
 800a8d4:	e7ee      	b.n	800a8b4 <_free_r+0x20>
 800a8d6:	001a      	movs	r2, r3
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <_free_r+0x4e>
 800a8de:	42a3      	cmp	r3, r4
 800a8e0:	d9f9      	bls.n	800a8d6 <_free_r+0x42>
 800a8e2:	6811      	ldr	r1, [r2, #0]
 800a8e4:	1850      	adds	r0, r2, r1
 800a8e6:	42a0      	cmp	r0, r4
 800a8e8:	d10b      	bne.n	800a902 <_free_r+0x6e>
 800a8ea:	6820      	ldr	r0, [r4, #0]
 800a8ec:	1809      	adds	r1, r1, r0
 800a8ee:	1850      	adds	r0, r2, r1
 800a8f0:	6011      	str	r1, [r2, #0]
 800a8f2:	4283      	cmp	r3, r0
 800a8f4:	d1e0      	bne.n	800a8b8 <_free_r+0x24>
 800a8f6:	6818      	ldr	r0, [r3, #0]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	1841      	adds	r1, r0, r1
 800a8fc:	6011      	str	r1, [r2, #0]
 800a8fe:	6053      	str	r3, [r2, #4]
 800a900:	e7da      	b.n	800a8b8 <_free_r+0x24>
 800a902:	42a0      	cmp	r0, r4
 800a904:	d902      	bls.n	800a90c <_free_r+0x78>
 800a906:	230c      	movs	r3, #12
 800a908:	602b      	str	r3, [r5, #0]
 800a90a:	e7d5      	b.n	800a8b8 <_free_r+0x24>
 800a90c:	6821      	ldr	r1, [r4, #0]
 800a90e:	1860      	adds	r0, r4, r1
 800a910:	4283      	cmp	r3, r0
 800a912:	d103      	bne.n	800a91c <_free_r+0x88>
 800a914:	6818      	ldr	r0, [r3, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	1841      	adds	r1, r0, r1
 800a91a:	6021      	str	r1, [r4, #0]
 800a91c:	6063      	str	r3, [r4, #4]
 800a91e:	6054      	str	r4, [r2, #4]
 800a920:	e7ca      	b.n	800a8b8 <_free_r+0x24>
 800a922:	46c0      	nop			; (mov r8, r8)
 800a924:	20000200 	.word	0x20000200

0800a928 <_malloc_r>:
 800a928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92a:	2303      	movs	r3, #3
 800a92c:	1ccd      	adds	r5, r1, #3
 800a92e:	439d      	bics	r5, r3
 800a930:	3508      	adds	r5, #8
 800a932:	0006      	movs	r6, r0
 800a934:	2d0c      	cmp	r5, #12
 800a936:	d21f      	bcs.n	800a978 <_malloc_r+0x50>
 800a938:	250c      	movs	r5, #12
 800a93a:	42a9      	cmp	r1, r5
 800a93c:	d81e      	bhi.n	800a97c <_malloc_r+0x54>
 800a93e:	0030      	movs	r0, r6
 800a940:	f001 fbf6 	bl	800c130 <__malloc_lock>
 800a944:	4925      	ldr	r1, [pc, #148]	; (800a9dc <_malloc_r+0xb4>)
 800a946:	680a      	ldr	r2, [r1, #0]
 800a948:	0014      	movs	r4, r2
 800a94a:	2c00      	cmp	r4, #0
 800a94c:	d11a      	bne.n	800a984 <_malloc_r+0x5c>
 800a94e:	4f24      	ldr	r7, [pc, #144]	; (800a9e0 <_malloc_r+0xb8>)
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d104      	bne.n	800a960 <_malloc_r+0x38>
 800a956:	0021      	movs	r1, r4
 800a958:	0030      	movs	r0, r6
 800a95a:	f000 fcbd 	bl	800b2d8 <_sbrk_r>
 800a95e:	6038      	str	r0, [r7, #0]
 800a960:	0029      	movs	r1, r5
 800a962:	0030      	movs	r0, r6
 800a964:	f000 fcb8 	bl	800b2d8 <_sbrk_r>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d12b      	bne.n	800a9c4 <_malloc_r+0x9c>
 800a96c:	230c      	movs	r3, #12
 800a96e:	0030      	movs	r0, r6
 800a970:	6033      	str	r3, [r6, #0]
 800a972:	f001 fbe5 	bl	800c140 <__malloc_unlock>
 800a976:	e003      	b.n	800a980 <_malloc_r+0x58>
 800a978:	2d00      	cmp	r5, #0
 800a97a:	dade      	bge.n	800a93a <_malloc_r+0x12>
 800a97c:	230c      	movs	r3, #12
 800a97e:	6033      	str	r3, [r6, #0]
 800a980:	2000      	movs	r0, #0
 800a982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	1b5b      	subs	r3, r3, r5
 800a988:	d419      	bmi.n	800a9be <_malloc_r+0x96>
 800a98a:	2b0b      	cmp	r3, #11
 800a98c:	d903      	bls.n	800a996 <_malloc_r+0x6e>
 800a98e:	6023      	str	r3, [r4, #0]
 800a990:	18e4      	adds	r4, r4, r3
 800a992:	6025      	str	r5, [r4, #0]
 800a994:	e003      	b.n	800a99e <_malloc_r+0x76>
 800a996:	6863      	ldr	r3, [r4, #4]
 800a998:	42a2      	cmp	r2, r4
 800a99a:	d10e      	bne.n	800a9ba <_malloc_r+0x92>
 800a99c:	600b      	str	r3, [r1, #0]
 800a99e:	0030      	movs	r0, r6
 800a9a0:	f001 fbce 	bl	800c140 <__malloc_unlock>
 800a9a4:	0020      	movs	r0, r4
 800a9a6:	2207      	movs	r2, #7
 800a9a8:	300b      	adds	r0, #11
 800a9aa:	1d23      	adds	r3, r4, #4
 800a9ac:	4390      	bics	r0, r2
 800a9ae:	1ac2      	subs	r2, r0, r3
 800a9b0:	4298      	cmp	r0, r3
 800a9b2:	d0e6      	beq.n	800a982 <_malloc_r+0x5a>
 800a9b4:	1a1b      	subs	r3, r3, r0
 800a9b6:	50a3      	str	r3, [r4, r2]
 800a9b8:	e7e3      	b.n	800a982 <_malloc_r+0x5a>
 800a9ba:	6053      	str	r3, [r2, #4]
 800a9bc:	e7ef      	b.n	800a99e <_malloc_r+0x76>
 800a9be:	0022      	movs	r2, r4
 800a9c0:	6864      	ldr	r4, [r4, #4]
 800a9c2:	e7c2      	b.n	800a94a <_malloc_r+0x22>
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	1cc4      	adds	r4, r0, #3
 800a9c8:	439c      	bics	r4, r3
 800a9ca:	42a0      	cmp	r0, r4
 800a9cc:	d0e1      	beq.n	800a992 <_malloc_r+0x6a>
 800a9ce:	1a21      	subs	r1, r4, r0
 800a9d0:	0030      	movs	r0, r6
 800a9d2:	f000 fc81 	bl	800b2d8 <_sbrk_r>
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	d1db      	bne.n	800a992 <_malloc_r+0x6a>
 800a9da:	e7c7      	b.n	800a96c <_malloc_r+0x44>
 800a9dc:	20000200 	.word	0x20000200
 800a9e0:	20000204 	.word	0x20000204

0800a9e4 <__cvt>:
 800a9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9e6:	001e      	movs	r6, r3
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	0014      	movs	r4, r2
 800a9ec:	b08b      	sub	sp, #44	; 0x2c
 800a9ee:	429e      	cmp	r6, r3
 800a9f0:	da04      	bge.n	800a9fc <__cvt+0x18>
 800a9f2:	2180      	movs	r1, #128	; 0x80
 800a9f4:	0609      	lsls	r1, r1, #24
 800a9f6:	1873      	adds	r3, r6, r1
 800a9f8:	001e      	movs	r6, r3
 800a9fa:	232d      	movs	r3, #45	; 0x2d
 800a9fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9fe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aa00:	7013      	strb	r3, [r2, #0]
 800aa02:	2320      	movs	r3, #32
 800aa04:	2203      	movs	r2, #3
 800aa06:	439f      	bics	r7, r3
 800aa08:	2f46      	cmp	r7, #70	; 0x46
 800aa0a:	d007      	beq.n	800aa1c <__cvt+0x38>
 800aa0c:	003b      	movs	r3, r7
 800aa0e:	3b45      	subs	r3, #69	; 0x45
 800aa10:	4259      	negs	r1, r3
 800aa12:	414b      	adcs	r3, r1
 800aa14:	9910      	ldr	r1, [sp, #64]	; 0x40
 800aa16:	3a01      	subs	r2, #1
 800aa18:	18cb      	adds	r3, r1, r3
 800aa1a:	9310      	str	r3, [sp, #64]	; 0x40
 800aa1c:	ab09      	add	r3, sp, #36	; 0x24
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	ab08      	add	r3, sp, #32
 800aa22:	9303      	str	r3, [sp, #12]
 800aa24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa26:	9200      	str	r2, [sp, #0]
 800aa28:	9302      	str	r3, [sp, #8]
 800aa2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa2c:	0022      	movs	r2, r4
 800aa2e:	9301      	str	r3, [sp, #4]
 800aa30:	0033      	movs	r3, r6
 800aa32:	f000 fd2d 	bl	800b490 <_dtoa_r>
 800aa36:	0005      	movs	r5, r0
 800aa38:	2f47      	cmp	r7, #71	; 0x47
 800aa3a:	d102      	bne.n	800aa42 <__cvt+0x5e>
 800aa3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa3e:	07db      	lsls	r3, r3, #31
 800aa40:	d528      	bpl.n	800aa94 <__cvt+0xb0>
 800aa42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa44:	18eb      	adds	r3, r5, r3
 800aa46:	9307      	str	r3, [sp, #28]
 800aa48:	2f46      	cmp	r7, #70	; 0x46
 800aa4a:	d114      	bne.n	800aa76 <__cvt+0x92>
 800aa4c:	782b      	ldrb	r3, [r5, #0]
 800aa4e:	2b30      	cmp	r3, #48	; 0x30
 800aa50:	d10c      	bne.n	800aa6c <__cvt+0x88>
 800aa52:	2200      	movs	r2, #0
 800aa54:	2300      	movs	r3, #0
 800aa56:	0020      	movs	r0, r4
 800aa58:	0031      	movs	r1, r6
 800aa5a:	f7f5 fcf5 	bl	8000448 <__aeabi_dcmpeq>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d104      	bne.n	800aa6c <__cvt+0x88>
 800aa62:	2301      	movs	r3, #1
 800aa64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa66:	1a9b      	subs	r3, r3, r2
 800aa68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa6a:	6013      	str	r3, [r2, #0]
 800aa6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa6e:	9a07      	ldr	r2, [sp, #28]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	18d3      	adds	r3, r2, r3
 800aa74:	9307      	str	r3, [sp, #28]
 800aa76:	2200      	movs	r2, #0
 800aa78:	2300      	movs	r3, #0
 800aa7a:	0020      	movs	r0, r4
 800aa7c:	0031      	movs	r1, r6
 800aa7e:	f7f5 fce3 	bl	8000448 <__aeabi_dcmpeq>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d001      	beq.n	800aa8a <__cvt+0xa6>
 800aa86:	9b07      	ldr	r3, [sp, #28]
 800aa88:	9309      	str	r3, [sp, #36]	; 0x24
 800aa8a:	2230      	movs	r2, #48	; 0x30
 800aa8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa8e:	9907      	ldr	r1, [sp, #28]
 800aa90:	428b      	cmp	r3, r1
 800aa92:	d306      	bcc.n	800aaa2 <__cvt+0xbe>
 800aa94:	0028      	movs	r0, r5
 800aa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa9a:	1b5b      	subs	r3, r3, r5
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	b00b      	add	sp, #44	; 0x2c
 800aaa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaa2:	1c59      	adds	r1, r3, #1
 800aaa4:	9109      	str	r1, [sp, #36]	; 0x24
 800aaa6:	701a      	strb	r2, [r3, #0]
 800aaa8:	e7f0      	b.n	800aa8c <__cvt+0xa8>

0800aaaa <__exponent>:
 800aaaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaac:	1c83      	adds	r3, r0, #2
 800aaae:	b087      	sub	sp, #28
 800aab0:	9303      	str	r3, [sp, #12]
 800aab2:	0005      	movs	r5, r0
 800aab4:	000c      	movs	r4, r1
 800aab6:	232b      	movs	r3, #43	; 0x2b
 800aab8:	7002      	strb	r2, [r0, #0]
 800aaba:	2900      	cmp	r1, #0
 800aabc:	da01      	bge.n	800aac2 <__exponent+0x18>
 800aabe:	424c      	negs	r4, r1
 800aac0:	3302      	adds	r3, #2
 800aac2:	706b      	strb	r3, [r5, #1]
 800aac4:	2c09      	cmp	r4, #9
 800aac6:	dd31      	ble.n	800ab2c <__exponent+0x82>
 800aac8:	270a      	movs	r7, #10
 800aaca:	ab04      	add	r3, sp, #16
 800aacc:	1dde      	adds	r6, r3, #7
 800aace:	0020      	movs	r0, r4
 800aad0:	0039      	movs	r1, r7
 800aad2:	9601      	str	r6, [sp, #4]
 800aad4:	f7f5 fca2 	bl	800041c <__aeabi_idivmod>
 800aad8:	3e01      	subs	r6, #1
 800aada:	3130      	adds	r1, #48	; 0x30
 800aadc:	0020      	movs	r0, r4
 800aade:	7031      	strb	r1, [r6, #0]
 800aae0:	0039      	movs	r1, r7
 800aae2:	9402      	str	r4, [sp, #8]
 800aae4:	f7f5 fbb4 	bl	8000250 <__divsi3>
 800aae8:	9b02      	ldr	r3, [sp, #8]
 800aaea:	0004      	movs	r4, r0
 800aaec:	2b63      	cmp	r3, #99	; 0x63
 800aaee:	dcee      	bgt.n	800aace <__exponent+0x24>
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	3430      	adds	r4, #48	; 0x30
 800aaf4:	1e9a      	subs	r2, r3, #2
 800aaf6:	0013      	movs	r3, r2
 800aaf8:	9903      	ldr	r1, [sp, #12]
 800aafa:	7014      	strb	r4, [r2, #0]
 800aafc:	a804      	add	r0, sp, #16
 800aafe:	3007      	adds	r0, #7
 800ab00:	4298      	cmp	r0, r3
 800ab02:	d80e      	bhi.n	800ab22 <__exponent+0x78>
 800ab04:	ab04      	add	r3, sp, #16
 800ab06:	3307      	adds	r3, #7
 800ab08:	2000      	movs	r0, #0
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d804      	bhi.n	800ab18 <__exponent+0x6e>
 800ab0e:	ab04      	add	r3, sp, #16
 800ab10:	3009      	adds	r0, #9
 800ab12:	18c0      	adds	r0, r0, r3
 800ab14:	9b01      	ldr	r3, [sp, #4]
 800ab16:	1ac0      	subs	r0, r0, r3
 800ab18:	9b03      	ldr	r3, [sp, #12]
 800ab1a:	1818      	adds	r0, r3, r0
 800ab1c:	1b40      	subs	r0, r0, r5
 800ab1e:	b007      	add	sp, #28
 800ab20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab22:	7818      	ldrb	r0, [r3, #0]
 800ab24:	3301      	adds	r3, #1
 800ab26:	7008      	strb	r0, [r1, #0]
 800ab28:	3101      	adds	r1, #1
 800ab2a:	e7e7      	b.n	800aafc <__exponent+0x52>
 800ab2c:	2330      	movs	r3, #48	; 0x30
 800ab2e:	18e4      	adds	r4, r4, r3
 800ab30:	70ab      	strb	r3, [r5, #2]
 800ab32:	1d28      	adds	r0, r5, #4
 800ab34:	70ec      	strb	r4, [r5, #3]
 800ab36:	e7f1      	b.n	800ab1c <__exponent+0x72>

0800ab38 <_printf_float>:
 800ab38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab3a:	b095      	sub	sp, #84	; 0x54
 800ab3c:	000c      	movs	r4, r1
 800ab3e:	9208      	str	r2, [sp, #32]
 800ab40:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ab42:	9309      	str	r3, [sp, #36]	; 0x24
 800ab44:	0007      	movs	r7, r0
 800ab46:	f001 fad1 	bl	800c0ec <_localeconv_r>
 800ab4a:	6803      	ldr	r3, [r0, #0]
 800ab4c:	0018      	movs	r0, r3
 800ab4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab50:	f7f5 fad8 	bl	8000104 <strlen>
 800ab54:	2300      	movs	r3, #0
 800ab56:	9312      	str	r3, [sp, #72]	; 0x48
 800ab58:	7e23      	ldrb	r3, [r4, #24]
 800ab5a:	2207      	movs	r2, #7
 800ab5c:	001e      	movs	r6, r3
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	900d      	str	r0, [sp, #52]	; 0x34
 800ab62:	930c      	str	r3, [sp, #48]	; 0x30
 800ab64:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab66:	682b      	ldr	r3, [r5, #0]
 800ab68:	05c9      	lsls	r1, r1, #23
 800ab6a:	d547      	bpl.n	800abfc <_printf_float+0xc4>
 800ab6c:	189b      	adds	r3, r3, r2
 800ab6e:	4393      	bics	r3, r2
 800ab70:	001a      	movs	r2, r3
 800ab72:	3208      	adds	r2, #8
 800ab74:	602a      	str	r2, [r5, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	64a2      	str	r2, [r4, #72]	; 0x48
 800ab7c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ab7e:	2201      	movs	r2, #1
 800ab80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ab82:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800ab84:	930a      	str	r3, [sp, #40]	; 0x28
 800ab86:	006b      	lsls	r3, r5, #1
 800ab88:	085b      	lsrs	r3, r3, #1
 800ab8a:	930e      	str	r3, [sp, #56]	; 0x38
 800ab8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab8e:	4ba8      	ldr	r3, [pc, #672]	; (800ae30 <_printf_float+0x2f8>)
 800ab90:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ab92:	4252      	negs	r2, r2
 800ab94:	f7f7 fb1c 	bl	80021d0 <__aeabi_dcmpun>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d131      	bne.n	800ac00 <_printf_float+0xc8>
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	4ba4      	ldr	r3, [pc, #656]	; (800ae30 <_printf_float+0x2f8>)
 800aba0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aba2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aba4:	4252      	negs	r2, r2
 800aba6:	f7f5 fc5f 	bl	8000468 <__aeabi_dcmple>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d128      	bne.n	800ac00 <_printf_float+0xc8>
 800abae:	2200      	movs	r2, #0
 800abb0:	2300      	movs	r3, #0
 800abb2:	0029      	movs	r1, r5
 800abb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abb6:	f7f5 fc4d 	bl	8000454 <__aeabi_dcmplt>
 800abba:	2800      	cmp	r0, #0
 800abbc:	d003      	beq.n	800abc6 <_printf_float+0x8e>
 800abbe:	0023      	movs	r3, r4
 800abc0:	222d      	movs	r2, #45	; 0x2d
 800abc2:	3343      	adds	r3, #67	; 0x43
 800abc4:	701a      	strb	r2, [r3, #0]
 800abc6:	4d9b      	ldr	r5, [pc, #620]	; (800ae34 <_printf_float+0x2fc>)
 800abc8:	2e47      	cmp	r6, #71	; 0x47
 800abca:	d900      	bls.n	800abce <_printf_float+0x96>
 800abcc:	4d9a      	ldr	r5, [pc, #616]	; (800ae38 <_printf_float+0x300>)
 800abce:	2303      	movs	r3, #3
 800abd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abd2:	6123      	str	r3, [r4, #16]
 800abd4:	3301      	adds	r3, #1
 800abd6:	439a      	bics	r2, r3
 800abd8:	2300      	movs	r3, #0
 800abda:	6022      	str	r2, [r4, #0]
 800abdc:	930a      	str	r3, [sp, #40]	; 0x28
 800abde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe0:	0021      	movs	r1, r4
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	0038      	movs	r0, r7
 800abe6:	9b08      	ldr	r3, [sp, #32]
 800abe8:	aa13      	add	r2, sp, #76	; 0x4c
 800abea:	f000 f9f3 	bl	800afd4 <_printf_common>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d000      	beq.n	800abf4 <_printf_float+0xbc>
 800abf2:	e09e      	b.n	800ad32 <_printf_float+0x1fa>
 800abf4:	2001      	movs	r0, #1
 800abf6:	4240      	negs	r0, r0
 800abf8:	b015      	add	sp, #84	; 0x54
 800abfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abfc:	3307      	adds	r3, #7
 800abfe:	e7b6      	b.n	800ab6e <_printf_float+0x36>
 800ac00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac02:	002b      	movs	r3, r5
 800ac04:	0010      	movs	r0, r2
 800ac06:	0029      	movs	r1, r5
 800ac08:	f7f7 fae2 	bl	80021d0 <__aeabi_dcmpun>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d00a      	beq.n	800ac26 <_printf_float+0xee>
 800ac10:	2d00      	cmp	r5, #0
 800ac12:	da03      	bge.n	800ac1c <_printf_float+0xe4>
 800ac14:	0023      	movs	r3, r4
 800ac16:	222d      	movs	r2, #45	; 0x2d
 800ac18:	3343      	adds	r3, #67	; 0x43
 800ac1a:	701a      	strb	r2, [r3, #0]
 800ac1c:	4d87      	ldr	r5, [pc, #540]	; (800ae3c <_printf_float+0x304>)
 800ac1e:	2e47      	cmp	r6, #71	; 0x47
 800ac20:	d9d5      	bls.n	800abce <_printf_float+0x96>
 800ac22:	4d87      	ldr	r5, [pc, #540]	; (800ae40 <_printf_float+0x308>)
 800ac24:	e7d3      	b.n	800abce <_printf_float+0x96>
 800ac26:	2220      	movs	r2, #32
 800ac28:	0031      	movs	r1, r6
 800ac2a:	6863      	ldr	r3, [r4, #4]
 800ac2c:	4391      	bics	r1, r2
 800ac2e:	910e      	str	r1, [sp, #56]	; 0x38
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	d147      	bne.n	800acc4 <_printf_float+0x18c>
 800ac34:	3307      	adds	r3, #7
 800ac36:	6063      	str	r3, [r4, #4]
 800ac38:	2380      	movs	r3, #128	; 0x80
 800ac3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac3c:	00db      	lsls	r3, r3, #3
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	2200      	movs	r2, #0
 800ac42:	9206      	str	r2, [sp, #24]
 800ac44:	aa12      	add	r2, sp, #72	; 0x48
 800ac46:	9205      	str	r2, [sp, #20]
 800ac48:	aa11      	add	r2, sp, #68	; 0x44
 800ac4a:	9203      	str	r2, [sp, #12]
 800ac4c:	2223      	movs	r2, #35	; 0x23
 800ac4e:	a908      	add	r1, sp, #32
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	9301      	str	r3, [sp, #4]
 800ac54:	6863      	ldr	r3, [r4, #4]
 800ac56:	1852      	adds	r2, r2, r1
 800ac58:	9202      	str	r2, [sp, #8]
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	0038      	movs	r0, r7
 800ac5e:	002b      	movs	r3, r5
 800ac60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac62:	9604      	str	r6, [sp, #16]
 800ac64:	f7ff febe 	bl	800a9e4 <__cvt>
 800ac68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac6a:	0005      	movs	r5, r0
 800ac6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac6e:	2b47      	cmp	r3, #71	; 0x47
 800ac70:	d108      	bne.n	800ac84 <_printf_float+0x14c>
 800ac72:	1ccb      	adds	r3, r1, #3
 800ac74:	db02      	blt.n	800ac7c <_printf_float+0x144>
 800ac76:	6863      	ldr	r3, [r4, #4]
 800ac78:	4299      	cmp	r1, r3
 800ac7a:	dd46      	ble.n	800ad0a <_printf_float+0x1d2>
 800ac7c:	0033      	movs	r3, r6
 800ac7e:	3b02      	subs	r3, #2
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	001e      	movs	r6, r3
 800ac84:	2e65      	cmp	r6, #101	; 0x65
 800ac86:	d824      	bhi.n	800acd2 <_printf_float+0x19a>
 800ac88:	0020      	movs	r0, r4
 800ac8a:	0032      	movs	r2, r6
 800ac8c:	3901      	subs	r1, #1
 800ac8e:	3050      	adds	r0, #80	; 0x50
 800ac90:	9111      	str	r1, [sp, #68]	; 0x44
 800ac92:	f7ff ff0a 	bl	800aaaa <__exponent>
 800ac96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac98:	900a      	str	r0, [sp, #40]	; 0x28
 800ac9a:	1813      	adds	r3, r2, r0
 800ac9c:	6123      	str	r3, [r4, #16]
 800ac9e:	2a01      	cmp	r2, #1
 800aca0:	dc02      	bgt.n	800aca8 <_printf_float+0x170>
 800aca2:	6822      	ldr	r2, [r4, #0]
 800aca4:	07d2      	lsls	r2, r2, #31
 800aca6:	d501      	bpl.n	800acac <_printf_float+0x174>
 800aca8:	3301      	adds	r3, #1
 800acaa:	6123      	str	r3, [r4, #16]
 800acac:	2323      	movs	r3, #35	; 0x23
 800acae:	aa08      	add	r2, sp, #32
 800acb0:	189b      	adds	r3, r3, r2
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d100      	bne.n	800acba <_printf_float+0x182>
 800acb8:	e791      	b.n	800abde <_printf_float+0xa6>
 800acba:	0023      	movs	r3, r4
 800acbc:	222d      	movs	r2, #45	; 0x2d
 800acbe:	3343      	adds	r3, #67	; 0x43
 800acc0:	701a      	strb	r2, [r3, #0]
 800acc2:	e78c      	b.n	800abde <_printf_float+0xa6>
 800acc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acc6:	2a47      	cmp	r2, #71	; 0x47
 800acc8:	d1b6      	bne.n	800ac38 <_printf_float+0x100>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1b4      	bne.n	800ac38 <_printf_float+0x100>
 800acce:	3301      	adds	r3, #1
 800acd0:	e7b1      	b.n	800ac36 <_printf_float+0xfe>
 800acd2:	2e66      	cmp	r6, #102	; 0x66
 800acd4:	d11b      	bne.n	800ad0e <_printf_float+0x1d6>
 800acd6:	6863      	ldr	r3, [r4, #4]
 800acd8:	2900      	cmp	r1, #0
 800acda:	dd0d      	ble.n	800acf8 <_printf_float+0x1c0>
 800acdc:	6121      	str	r1, [r4, #16]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d102      	bne.n	800ace8 <_printf_float+0x1b0>
 800ace2:	6822      	ldr	r2, [r4, #0]
 800ace4:	07d2      	lsls	r2, r2, #31
 800ace6:	d502      	bpl.n	800acee <_printf_float+0x1b6>
 800ace8:	3301      	adds	r3, #1
 800acea:	1859      	adds	r1, r3, r1
 800acec:	6121      	str	r1, [r4, #16]
 800acee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acf0:	65a3      	str	r3, [r4, #88]	; 0x58
 800acf2:	2300      	movs	r3, #0
 800acf4:	930a      	str	r3, [sp, #40]	; 0x28
 800acf6:	e7d9      	b.n	800acac <_printf_float+0x174>
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d103      	bne.n	800ad04 <_printf_float+0x1cc>
 800acfc:	2201      	movs	r2, #1
 800acfe:	6821      	ldr	r1, [r4, #0]
 800ad00:	4211      	tst	r1, r2
 800ad02:	d000      	beq.n	800ad06 <_printf_float+0x1ce>
 800ad04:	1c9a      	adds	r2, r3, #2
 800ad06:	6122      	str	r2, [r4, #16]
 800ad08:	e7f1      	b.n	800acee <_printf_float+0x1b6>
 800ad0a:	2367      	movs	r3, #103	; 0x67
 800ad0c:	001e      	movs	r6, r3
 800ad0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad12:	4293      	cmp	r3, r2
 800ad14:	db06      	blt.n	800ad24 <_printf_float+0x1ec>
 800ad16:	6822      	ldr	r2, [r4, #0]
 800ad18:	6123      	str	r3, [r4, #16]
 800ad1a:	07d2      	lsls	r2, r2, #31
 800ad1c:	d5e7      	bpl.n	800acee <_printf_float+0x1b6>
 800ad1e:	3301      	adds	r3, #1
 800ad20:	6123      	str	r3, [r4, #16]
 800ad22:	e7e4      	b.n	800acee <_printf_float+0x1b6>
 800ad24:	2101      	movs	r1, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	dc01      	bgt.n	800ad2e <_printf_float+0x1f6>
 800ad2a:	1849      	adds	r1, r1, r1
 800ad2c:	1ac9      	subs	r1, r1, r3
 800ad2e:	1852      	adds	r2, r2, r1
 800ad30:	e7e9      	b.n	800ad06 <_printf_float+0x1ce>
 800ad32:	6822      	ldr	r2, [r4, #0]
 800ad34:	0553      	lsls	r3, r2, #21
 800ad36:	d408      	bmi.n	800ad4a <_printf_float+0x212>
 800ad38:	6923      	ldr	r3, [r4, #16]
 800ad3a:	002a      	movs	r2, r5
 800ad3c:	0038      	movs	r0, r7
 800ad3e:	9908      	ldr	r1, [sp, #32]
 800ad40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ad42:	47a8      	blx	r5
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	d129      	bne.n	800ad9c <_printf_float+0x264>
 800ad48:	e754      	b.n	800abf4 <_printf_float+0xbc>
 800ad4a:	2e65      	cmp	r6, #101	; 0x65
 800ad4c:	d800      	bhi.n	800ad50 <_printf_float+0x218>
 800ad4e:	e0ec      	b.n	800af2a <_printf_float+0x3f2>
 800ad50:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ad52:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ad54:	2200      	movs	r2, #0
 800ad56:	2300      	movs	r3, #0
 800ad58:	f7f5 fb76 	bl	8000448 <__aeabi_dcmpeq>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d034      	beq.n	800adca <_printf_float+0x292>
 800ad60:	2301      	movs	r3, #1
 800ad62:	0038      	movs	r0, r7
 800ad64:	4a37      	ldr	r2, [pc, #220]	; (800ae44 <_printf_float+0x30c>)
 800ad66:	9908      	ldr	r1, [sp, #32]
 800ad68:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ad6a:	47a8      	blx	r5
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	d100      	bne.n	800ad72 <_printf_float+0x23a>
 800ad70:	e740      	b.n	800abf4 <_printf_float+0xbc>
 800ad72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad76:	4293      	cmp	r3, r2
 800ad78:	db02      	blt.n	800ad80 <_printf_float+0x248>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	07db      	lsls	r3, r3, #31
 800ad7e:	d50d      	bpl.n	800ad9c <_printf_float+0x264>
 800ad80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ad82:	0038      	movs	r0, r7
 800ad84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad88:	9908      	ldr	r1, [sp, #32]
 800ad8a:	47a8      	blx	r5
 800ad8c:	2500      	movs	r5, #0
 800ad8e:	1c43      	adds	r3, r0, #1
 800ad90:	d100      	bne.n	800ad94 <_printf_float+0x25c>
 800ad92:	e72f      	b.n	800abf4 <_printf_float+0xbc>
 800ad94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad96:	3b01      	subs	r3, #1
 800ad98:	42ab      	cmp	r3, r5
 800ad9a:	dc0a      	bgt.n	800adb2 <_printf_float+0x27a>
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	079b      	lsls	r3, r3, #30
 800ada0:	d500      	bpl.n	800ada4 <_printf_float+0x26c>
 800ada2:	e114      	b.n	800afce <_printf_float+0x496>
 800ada4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ada6:	68e0      	ldr	r0, [r4, #12]
 800ada8:	4298      	cmp	r0, r3
 800adaa:	db00      	blt.n	800adae <_printf_float+0x276>
 800adac:	e724      	b.n	800abf8 <_printf_float+0xc0>
 800adae:	0018      	movs	r0, r3
 800adb0:	e722      	b.n	800abf8 <_printf_float+0xc0>
 800adb2:	0022      	movs	r2, r4
 800adb4:	2301      	movs	r3, #1
 800adb6:	0038      	movs	r0, r7
 800adb8:	9908      	ldr	r1, [sp, #32]
 800adba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800adbc:	321a      	adds	r2, #26
 800adbe:	47b0      	blx	r6
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	d100      	bne.n	800adc6 <_printf_float+0x28e>
 800adc4:	e716      	b.n	800abf4 <_printf_float+0xbc>
 800adc6:	3501      	adds	r5, #1
 800adc8:	e7e4      	b.n	800ad94 <_printf_float+0x25c>
 800adca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adcc:	2b00      	cmp	r3, #0
 800adce:	dc3b      	bgt.n	800ae48 <_printf_float+0x310>
 800add0:	2301      	movs	r3, #1
 800add2:	0038      	movs	r0, r7
 800add4:	4a1b      	ldr	r2, [pc, #108]	; (800ae44 <_printf_float+0x30c>)
 800add6:	9908      	ldr	r1, [sp, #32]
 800add8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800adda:	47b0      	blx	r6
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d100      	bne.n	800ade2 <_printf_float+0x2aa>
 800ade0:	e708      	b.n	800abf4 <_printf_float+0xbc>
 800ade2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ade4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ade6:	4313      	orrs	r3, r2
 800ade8:	d102      	bne.n	800adf0 <_printf_float+0x2b8>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	07db      	lsls	r3, r3, #31
 800adee:	d5d5      	bpl.n	800ad9c <_printf_float+0x264>
 800adf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adf2:	0038      	movs	r0, r7
 800adf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adf6:	9908      	ldr	r1, [sp, #32]
 800adf8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800adfa:	47b0      	blx	r6
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d100      	bne.n	800ae02 <_printf_float+0x2ca>
 800ae00:	e6f8      	b.n	800abf4 <_printf_float+0xbc>
 800ae02:	2300      	movs	r3, #0
 800ae04:	930a      	str	r3, [sp, #40]	; 0x28
 800ae06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae0a:	425b      	negs	r3, r3
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	dc01      	bgt.n	800ae14 <_printf_float+0x2dc>
 800ae10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae12:	e792      	b.n	800ad3a <_printf_float+0x202>
 800ae14:	0022      	movs	r2, r4
 800ae16:	2301      	movs	r3, #1
 800ae18:	0038      	movs	r0, r7
 800ae1a:	9908      	ldr	r1, [sp, #32]
 800ae1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ae1e:	321a      	adds	r2, #26
 800ae20:	47b0      	blx	r6
 800ae22:	1c43      	adds	r3, r0, #1
 800ae24:	d100      	bne.n	800ae28 <_printf_float+0x2f0>
 800ae26:	e6e5      	b.n	800abf4 <_printf_float+0xbc>
 800ae28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	e7ea      	b.n	800ae04 <_printf_float+0x2cc>
 800ae2e:	46c0      	nop			; (mov r8, r8)
 800ae30:	7fefffff 	.word	0x7fefffff
 800ae34:	0800d89c 	.word	0x0800d89c
 800ae38:	0800d8a0 	.word	0x0800d8a0
 800ae3c:	0800d8a4 	.word	0x0800d8a4
 800ae40:	0800d8a8 	.word	0x0800d8a8
 800ae44:	0800d8ac 	.word	0x0800d8ac
 800ae48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae4c:	920a      	str	r2, [sp, #40]	; 0x28
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	dd00      	ble.n	800ae54 <_printf_float+0x31c>
 800ae52:	930a      	str	r3, [sp, #40]	; 0x28
 800ae54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	dc3d      	bgt.n	800aed6 <_printf_float+0x39e>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	930e      	str	r3, [sp, #56]	; 0x38
 800ae5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae60:	43db      	mvns	r3, r3
 800ae62:	17db      	asrs	r3, r3, #31
 800ae64:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae6a:	930c      	str	r3, [sp, #48]	; 0x30
 800ae6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae6e:	4013      	ands	r3, r2
 800ae70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae76:	4293      	cmp	r3, r2
 800ae78:	dc36      	bgt.n	800aee8 <_printf_float+0x3b0>
 800ae7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	db40      	blt.n	800af04 <_printf_float+0x3cc>
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	07db      	lsls	r3, r3, #31
 800ae86:	d43d      	bmi.n	800af04 <_printf_float+0x3cc>
 800ae88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ae8e:	1ad3      	subs	r3, r2, r3
 800ae90:	1a52      	subs	r2, r2, r1
 800ae92:	920a      	str	r2, [sp, #40]	; 0x28
 800ae94:	429a      	cmp	r2, r3
 800ae96:	dd00      	ble.n	800ae9a <_printf_float+0x362>
 800ae98:	930a      	str	r3, [sp, #40]	; 0x28
 800ae9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	dc3a      	bgt.n	800af16 <_printf_float+0x3de>
 800aea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea2:	2500      	movs	r5, #0
 800aea4:	43db      	mvns	r3, r3
 800aea6:	17db      	asrs	r3, r3, #31
 800aea8:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aeac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aeae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aeb0:	1a9b      	subs	r3, r3, r2
 800aeb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeb4:	400a      	ands	r2, r1
 800aeb6:	1a9b      	subs	r3, r3, r2
 800aeb8:	42ab      	cmp	r3, r5
 800aeba:	dc00      	bgt.n	800aebe <_printf_float+0x386>
 800aebc:	e76e      	b.n	800ad9c <_printf_float+0x264>
 800aebe:	0022      	movs	r2, r4
 800aec0:	2301      	movs	r3, #1
 800aec2:	0038      	movs	r0, r7
 800aec4:	9908      	ldr	r1, [sp, #32]
 800aec6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800aec8:	321a      	adds	r2, #26
 800aeca:	47b0      	blx	r6
 800aecc:	1c43      	adds	r3, r0, #1
 800aece:	d100      	bne.n	800aed2 <_printf_float+0x39a>
 800aed0:	e690      	b.n	800abf4 <_printf_float+0xbc>
 800aed2:	3501      	adds	r5, #1
 800aed4:	e7e9      	b.n	800aeaa <_printf_float+0x372>
 800aed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed8:	002a      	movs	r2, r5
 800aeda:	0038      	movs	r0, r7
 800aedc:	9908      	ldr	r1, [sp, #32]
 800aede:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800aee0:	47b0      	blx	r6
 800aee2:	1c43      	adds	r3, r0, #1
 800aee4:	d1b9      	bne.n	800ae5a <_printf_float+0x322>
 800aee6:	e685      	b.n	800abf4 <_printf_float+0xbc>
 800aee8:	0022      	movs	r2, r4
 800aeea:	2301      	movs	r3, #1
 800aeec:	0038      	movs	r0, r7
 800aeee:	9908      	ldr	r1, [sp, #32]
 800aef0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800aef2:	321a      	adds	r2, #26
 800aef4:	47b0      	blx	r6
 800aef6:	1c43      	adds	r3, r0, #1
 800aef8:	d100      	bne.n	800aefc <_printf_float+0x3c4>
 800aefa:	e67b      	b.n	800abf4 <_printf_float+0xbc>
 800aefc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aefe:	3301      	adds	r3, #1
 800af00:	930e      	str	r3, [sp, #56]	; 0x38
 800af02:	e7b0      	b.n	800ae66 <_printf_float+0x32e>
 800af04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af06:	0038      	movs	r0, r7
 800af08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af0a:	9908      	ldr	r1, [sp, #32]
 800af0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800af0e:	47b0      	blx	r6
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d1b9      	bne.n	800ae88 <_printf_float+0x350>
 800af14:	e66e      	b.n	800abf4 <_printf_float+0xbc>
 800af16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af18:	0038      	movs	r0, r7
 800af1a:	18ea      	adds	r2, r5, r3
 800af1c:	9908      	ldr	r1, [sp, #32]
 800af1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800af22:	47a8      	blx	r5
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d1bb      	bne.n	800aea0 <_printf_float+0x368>
 800af28:	e664      	b.n	800abf4 <_printf_float+0xbc>
 800af2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	dc02      	bgt.n	800af36 <_printf_float+0x3fe>
 800af30:	2301      	movs	r3, #1
 800af32:	421a      	tst	r2, r3
 800af34:	d038      	beq.n	800afa8 <_printf_float+0x470>
 800af36:	2301      	movs	r3, #1
 800af38:	002a      	movs	r2, r5
 800af3a:	0038      	movs	r0, r7
 800af3c:	9908      	ldr	r1, [sp, #32]
 800af3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800af40:	47b0      	blx	r6
 800af42:	1c43      	adds	r3, r0, #1
 800af44:	d100      	bne.n	800af48 <_printf_float+0x410>
 800af46:	e655      	b.n	800abf4 <_printf_float+0xbc>
 800af48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af4a:	0038      	movs	r0, r7
 800af4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af4e:	9908      	ldr	r1, [sp, #32]
 800af50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800af52:	47b0      	blx	r6
 800af54:	1c43      	adds	r3, r0, #1
 800af56:	d100      	bne.n	800af5a <_printf_float+0x422>
 800af58:	e64c      	b.n	800abf4 <_printf_float+0xbc>
 800af5a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800af5c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800af5e:	2200      	movs	r2, #0
 800af60:	2300      	movs	r3, #0
 800af62:	f7f5 fa71 	bl	8000448 <__aeabi_dcmpeq>
 800af66:	2800      	cmp	r0, #0
 800af68:	d11c      	bne.n	800afa4 <_printf_float+0x46c>
 800af6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af6c:	1c6a      	adds	r2, r5, #1
 800af6e:	3b01      	subs	r3, #1
 800af70:	0038      	movs	r0, r7
 800af72:	9908      	ldr	r1, [sp, #32]
 800af74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800af76:	47a8      	blx	r5
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d10f      	bne.n	800af9c <_printf_float+0x464>
 800af7c:	e63a      	b.n	800abf4 <_printf_float+0xbc>
 800af7e:	0022      	movs	r2, r4
 800af80:	2301      	movs	r3, #1
 800af82:	0038      	movs	r0, r7
 800af84:	9908      	ldr	r1, [sp, #32]
 800af86:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800af88:	321a      	adds	r2, #26
 800af8a:	47b0      	blx	r6
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d100      	bne.n	800af92 <_printf_float+0x45a>
 800af90:	e630      	b.n	800abf4 <_printf_float+0xbc>
 800af92:	3501      	adds	r5, #1
 800af94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af96:	3b01      	subs	r3, #1
 800af98:	42ab      	cmp	r3, r5
 800af9a:	dcf0      	bgt.n	800af7e <_printf_float+0x446>
 800af9c:	0022      	movs	r2, r4
 800af9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afa0:	3250      	adds	r2, #80	; 0x50
 800afa2:	e6cb      	b.n	800ad3c <_printf_float+0x204>
 800afa4:	2500      	movs	r5, #0
 800afa6:	e7f5      	b.n	800af94 <_printf_float+0x45c>
 800afa8:	002a      	movs	r2, r5
 800afaa:	e7e1      	b.n	800af70 <_printf_float+0x438>
 800afac:	0022      	movs	r2, r4
 800afae:	2301      	movs	r3, #1
 800afb0:	0038      	movs	r0, r7
 800afb2:	9908      	ldr	r1, [sp, #32]
 800afb4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800afb6:	3219      	adds	r2, #25
 800afb8:	47b0      	blx	r6
 800afba:	1c43      	adds	r3, r0, #1
 800afbc:	d100      	bne.n	800afc0 <_printf_float+0x488>
 800afbe:	e619      	b.n	800abf4 <_printf_float+0xbc>
 800afc0:	3501      	adds	r5, #1
 800afc2:	68e3      	ldr	r3, [r4, #12]
 800afc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800afc6:	1a9b      	subs	r3, r3, r2
 800afc8:	42ab      	cmp	r3, r5
 800afca:	dcef      	bgt.n	800afac <_printf_float+0x474>
 800afcc:	e6ea      	b.n	800ada4 <_printf_float+0x26c>
 800afce:	2500      	movs	r5, #0
 800afd0:	e7f7      	b.n	800afc2 <_printf_float+0x48a>
 800afd2:	46c0      	nop			; (mov r8, r8)

0800afd4 <_printf_common>:
 800afd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afd6:	0015      	movs	r5, r2
 800afd8:	9301      	str	r3, [sp, #4]
 800afda:	688a      	ldr	r2, [r1, #8]
 800afdc:	690b      	ldr	r3, [r1, #16]
 800afde:	000c      	movs	r4, r1
 800afe0:	9000      	str	r0, [sp, #0]
 800afe2:	4293      	cmp	r3, r2
 800afe4:	da00      	bge.n	800afe8 <_printf_common+0x14>
 800afe6:	0013      	movs	r3, r2
 800afe8:	0022      	movs	r2, r4
 800afea:	602b      	str	r3, [r5, #0]
 800afec:	3243      	adds	r2, #67	; 0x43
 800afee:	7812      	ldrb	r2, [r2, #0]
 800aff0:	2a00      	cmp	r2, #0
 800aff2:	d001      	beq.n	800aff8 <_printf_common+0x24>
 800aff4:	3301      	adds	r3, #1
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	6823      	ldr	r3, [r4, #0]
 800affa:	069b      	lsls	r3, r3, #26
 800affc:	d502      	bpl.n	800b004 <_printf_common+0x30>
 800affe:	682b      	ldr	r3, [r5, #0]
 800b000:	3302      	adds	r3, #2
 800b002:	602b      	str	r3, [r5, #0]
 800b004:	6822      	ldr	r2, [r4, #0]
 800b006:	2306      	movs	r3, #6
 800b008:	0017      	movs	r7, r2
 800b00a:	401f      	ands	r7, r3
 800b00c:	421a      	tst	r2, r3
 800b00e:	d027      	beq.n	800b060 <_printf_common+0x8c>
 800b010:	0023      	movs	r3, r4
 800b012:	3343      	adds	r3, #67	; 0x43
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	1e5a      	subs	r2, r3, #1
 800b018:	4193      	sbcs	r3, r2
 800b01a:	6822      	ldr	r2, [r4, #0]
 800b01c:	0692      	lsls	r2, r2, #26
 800b01e:	d430      	bmi.n	800b082 <_printf_common+0xae>
 800b020:	0022      	movs	r2, r4
 800b022:	9901      	ldr	r1, [sp, #4]
 800b024:	9800      	ldr	r0, [sp, #0]
 800b026:	9e08      	ldr	r6, [sp, #32]
 800b028:	3243      	adds	r2, #67	; 0x43
 800b02a:	47b0      	blx	r6
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d025      	beq.n	800b07c <_printf_common+0xa8>
 800b030:	2306      	movs	r3, #6
 800b032:	6820      	ldr	r0, [r4, #0]
 800b034:	682a      	ldr	r2, [r5, #0]
 800b036:	68e1      	ldr	r1, [r4, #12]
 800b038:	2500      	movs	r5, #0
 800b03a:	4003      	ands	r3, r0
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	d103      	bne.n	800b048 <_printf_common+0x74>
 800b040:	1a8d      	subs	r5, r1, r2
 800b042:	43eb      	mvns	r3, r5
 800b044:	17db      	asrs	r3, r3, #31
 800b046:	401d      	ands	r5, r3
 800b048:	68a3      	ldr	r3, [r4, #8]
 800b04a:	6922      	ldr	r2, [r4, #16]
 800b04c:	4293      	cmp	r3, r2
 800b04e:	dd01      	ble.n	800b054 <_printf_common+0x80>
 800b050:	1a9b      	subs	r3, r3, r2
 800b052:	18ed      	adds	r5, r5, r3
 800b054:	2700      	movs	r7, #0
 800b056:	42bd      	cmp	r5, r7
 800b058:	d120      	bne.n	800b09c <_printf_common+0xc8>
 800b05a:	2000      	movs	r0, #0
 800b05c:	e010      	b.n	800b080 <_printf_common+0xac>
 800b05e:	3701      	adds	r7, #1
 800b060:	68e3      	ldr	r3, [r4, #12]
 800b062:	682a      	ldr	r2, [r5, #0]
 800b064:	1a9b      	subs	r3, r3, r2
 800b066:	42bb      	cmp	r3, r7
 800b068:	ddd2      	ble.n	800b010 <_printf_common+0x3c>
 800b06a:	0022      	movs	r2, r4
 800b06c:	2301      	movs	r3, #1
 800b06e:	9901      	ldr	r1, [sp, #4]
 800b070:	9800      	ldr	r0, [sp, #0]
 800b072:	9e08      	ldr	r6, [sp, #32]
 800b074:	3219      	adds	r2, #25
 800b076:	47b0      	blx	r6
 800b078:	1c43      	adds	r3, r0, #1
 800b07a:	d1f0      	bne.n	800b05e <_printf_common+0x8a>
 800b07c:	2001      	movs	r0, #1
 800b07e:	4240      	negs	r0, r0
 800b080:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b082:	2030      	movs	r0, #48	; 0x30
 800b084:	18e1      	adds	r1, r4, r3
 800b086:	3143      	adds	r1, #67	; 0x43
 800b088:	7008      	strb	r0, [r1, #0]
 800b08a:	0021      	movs	r1, r4
 800b08c:	1c5a      	adds	r2, r3, #1
 800b08e:	3145      	adds	r1, #69	; 0x45
 800b090:	7809      	ldrb	r1, [r1, #0]
 800b092:	18a2      	adds	r2, r4, r2
 800b094:	3243      	adds	r2, #67	; 0x43
 800b096:	3302      	adds	r3, #2
 800b098:	7011      	strb	r1, [r2, #0]
 800b09a:	e7c1      	b.n	800b020 <_printf_common+0x4c>
 800b09c:	0022      	movs	r2, r4
 800b09e:	2301      	movs	r3, #1
 800b0a0:	9901      	ldr	r1, [sp, #4]
 800b0a2:	9800      	ldr	r0, [sp, #0]
 800b0a4:	9e08      	ldr	r6, [sp, #32]
 800b0a6:	321a      	adds	r2, #26
 800b0a8:	47b0      	blx	r6
 800b0aa:	1c43      	adds	r3, r0, #1
 800b0ac:	d0e6      	beq.n	800b07c <_printf_common+0xa8>
 800b0ae:	3701      	adds	r7, #1
 800b0b0:	e7d1      	b.n	800b056 <_printf_common+0x82>
	...

0800b0b4 <_printf_i>:
 800b0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0b6:	b08b      	sub	sp, #44	; 0x2c
 800b0b8:	9206      	str	r2, [sp, #24]
 800b0ba:	000a      	movs	r2, r1
 800b0bc:	3243      	adds	r2, #67	; 0x43
 800b0be:	9307      	str	r3, [sp, #28]
 800b0c0:	9005      	str	r0, [sp, #20]
 800b0c2:	9204      	str	r2, [sp, #16]
 800b0c4:	7e0a      	ldrb	r2, [r1, #24]
 800b0c6:	000c      	movs	r4, r1
 800b0c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0ca:	2a78      	cmp	r2, #120	; 0x78
 800b0cc:	d806      	bhi.n	800b0dc <_printf_i+0x28>
 800b0ce:	2a62      	cmp	r2, #98	; 0x62
 800b0d0:	d808      	bhi.n	800b0e4 <_printf_i+0x30>
 800b0d2:	2a00      	cmp	r2, #0
 800b0d4:	d100      	bne.n	800b0d8 <_printf_i+0x24>
 800b0d6:	e0c0      	b.n	800b25a <_printf_i+0x1a6>
 800b0d8:	2a58      	cmp	r2, #88	; 0x58
 800b0da:	d052      	beq.n	800b182 <_printf_i+0xce>
 800b0dc:	0026      	movs	r6, r4
 800b0de:	3642      	adds	r6, #66	; 0x42
 800b0e0:	7032      	strb	r2, [r6, #0]
 800b0e2:	e022      	b.n	800b12a <_printf_i+0x76>
 800b0e4:	0010      	movs	r0, r2
 800b0e6:	3863      	subs	r0, #99	; 0x63
 800b0e8:	2815      	cmp	r0, #21
 800b0ea:	d8f7      	bhi.n	800b0dc <_printf_i+0x28>
 800b0ec:	f7f5 f81c 	bl	8000128 <__gnu_thumb1_case_shi>
 800b0f0:	001f0016 	.word	0x001f0016
 800b0f4:	fff6fff6 	.word	0xfff6fff6
 800b0f8:	fff6fff6 	.word	0xfff6fff6
 800b0fc:	fff6001f 	.word	0xfff6001f
 800b100:	fff6fff6 	.word	0xfff6fff6
 800b104:	00a8fff6 	.word	0x00a8fff6
 800b108:	009a0036 	.word	0x009a0036
 800b10c:	fff6fff6 	.word	0xfff6fff6
 800b110:	fff600b9 	.word	0xfff600b9
 800b114:	fff60036 	.word	0xfff60036
 800b118:	009efff6 	.word	0x009efff6
 800b11c:	0026      	movs	r6, r4
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	3642      	adds	r6, #66	; 0x42
 800b122:	1d11      	adds	r1, r2, #4
 800b124:	6019      	str	r1, [r3, #0]
 800b126:	6813      	ldr	r3, [r2, #0]
 800b128:	7033      	strb	r3, [r6, #0]
 800b12a:	2301      	movs	r3, #1
 800b12c:	e0a7      	b.n	800b27e <_printf_i+0x1ca>
 800b12e:	6808      	ldr	r0, [r1, #0]
 800b130:	6819      	ldr	r1, [r3, #0]
 800b132:	1d0a      	adds	r2, r1, #4
 800b134:	0605      	lsls	r5, r0, #24
 800b136:	d50b      	bpl.n	800b150 <_printf_i+0x9c>
 800b138:	680d      	ldr	r5, [r1, #0]
 800b13a:	601a      	str	r2, [r3, #0]
 800b13c:	2d00      	cmp	r5, #0
 800b13e:	da03      	bge.n	800b148 <_printf_i+0x94>
 800b140:	232d      	movs	r3, #45	; 0x2d
 800b142:	9a04      	ldr	r2, [sp, #16]
 800b144:	426d      	negs	r5, r5
 800b146:	7013      	strb	r3, [r2, #0]
 800b148:	4b61      	ldr	r3, [pc, #388]	; (800b2d0 <_printf_i+0x21c>)
 800b14a:	270a      	movs	r7, #10
 800b14c:	9303      	str	r3, [sp, #12]
 800b14e:	e032      	b.n	800b1b6 <_printf_i+0x102>
 800b150:	680d      	ldr	r5, [r1, #0]
 800b152:	601a      	str	r2, [r3, #0]
 800b154:	0641      	lsls	r1, r0, #25
 800b156:	d5f1      	bpl.n	800b13c <_printf_i+0x88>
 800b158:	b22d      	sxth	r5, r5
 800b15a:	e7ef      	b.n	800b13c <_printf_i+0x88>
 800b15c:	680d      	ldr	r5, [r1, #0]
 800b15e:	6819      	ldr	r1, [r3, #0]
 800b160:	1d08      	adds	r0, r1, #4
 800b162:	6018      	str	r0, [r3, #0]
 800b164:	062e      	lsls	r6, r5, #24
 800b166:	d501      	bpl.n	800b16c <_printf_i+0xb8>
 800b168:	680d      	ldr	r5, [r1, #0]
 800b16a:	e003      	b.n	800b174 <_printf_i+0xc0>
 800b16c:	066d      	lsls	r5, r5, #25
 800b16e:	d5fb      	bpl.n	800b168 <_printf_i+0xb4>
 800b170:	680d      	ldr	r5, [r1, #0]
 800b172:	b2ad      	uxth	r5, r5
 800b174:	4b56      	ldr	r3, [pc, #344]	; (800b2d0 <_printf_i+0x21c>)
 800b176:	270a      	movs	r7, #10
 800b178:	9303      	str	r3, [sp, #12]
 800b17a:	2a6f      	cmp	r2, #111	; 0x6f
 800b17c:	d117      	bne.n	800b1ae <_printf_i+0xfa>
 800b17e:	2708      	movs	r7, #8
 800b180:	e015      	b.n	800b1ae <_printf_i+0xfa>
 800b182:	3145      	adds	r1, #69	; 0x45
 800b184:	700a      	strb	r2, [r1, #0]
 800b186:	4a52      	ldr	r2, [pc, #328]	; (800b2d0 <_printf_i+0x21c>)
 800b188:	9203      	str	r2, [sp, #12]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	6821      	ldr	r1, [r4, #0]
 800b18e:	ca20      	ldmia	r2!, {r5}
 800b190:	601a      	str	r2, [r3, #0]
 800b192:	0608      	lsls	r0, r1, #24
 800b194:	d550      	bpl.n	800b238 <_printf_i+0x184>
 800b196:	07cb      	lsls	r3, r1, #31
 800b198:	d502      	bpl.n	800b1a0 <_printf_i+0xec>
 800b19a:	2320      	movs	r3, #32
 800b19c:	4319      	orrs	r1, r3
 800b19e:	6021      	str	r1, [r4, #0]
 800b1a0:	2710      	movs	r7, #16
 800b1a2:	2d00      	cmp	r5, #0
 800b1a4:	d103      	bne.n	800b1ae <_printf_i+0xfa>
 800b1a6:	2320      	movs	r3, #32
 800b1a8:	6822      	ldr	r2, [r4, #0]
 800b1aa:	439a      	bics	r2, r3
 800b1ac:	6022      	str	r2, [r4, #0]
 800b1ae:	0023      	movs	r3, r4
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	3343      	adds	r3, #67	; 0x43
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	6863      	ldr	r3, [r4, #4]
 800b1b8:	60a3      	str	r3, [r4, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	db03      	blt.n	800b1c6 <_printf_i+0x112>
 800b1be:	2204      	movs	r2, #4
 800b1c0:	6821      	ldr	r1, [r4, #0]
 800b1c2:	4391      	bics	r1, r2
 800b1c4:	6021      	str	r1, [r4, #0]
 800b1c6:	2d00      	cmp	r5, #0
 800b1c8:	d102      	bne.n	800b1d0 <_printf_i+0x11c>
 800b1ca:	9e04      	ldr	r6, [sp, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00c      	beq.n	800b1ea <_printf_i+0x136>
 800b1d0:	9e04      	ldr	r6, [sp, #16]
 800b1d2:	0028      	movs	r0, r5
 800b1d4:	0039      	movs	r1, r7
 800b1d6:	f7f5 f837 	bl	8000248 <__aeabi_uidivmod>
 800b1da:	9b03      	ldr	r3, [sp, #12]
 800b1dc:	3e01      	subs	r6, #1
 800b1de:	5c5b      	ldrb	r3, [r3, r1]
 800b1e0:	7033      	strb	r3, [r6, #0]
 800b1e2:	002b      	movs	r3, r5
 800b1e4:	0005      	movs	r5, r0
 800b1e6:	429f      	cmp	r7, r3
 800b1e8:	d9f3      	bls.n	800b1d2 <_printf_i+0x11e>
 800b1ea:	2f08      	cmp	r7, #8
 800b1ec:	d109      	bne.n	800b202 <_printf_i+0x14e>
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	07db      	lsls	r3, r3, #31
 800b1f2:	d506      	bpl.n	800b202 <_printf_i+0x14e>
 800b1f4:	6863      	ldr	r3, [r4, #4]
 800b1f6:	6922      	ldr	r2, [r4, #16]
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	dc02      	bgt.n	800b202 <_printf_i+0x14e>
 800b1fc:	2330      	movs	r3, #48	; 0x30
 800b1fe:	3e01      	subs	r6, #1
 800b200:	7033      	strb	r3, [r6, #0]
 800b202:	9b04      	ldr	r3, [sp, #16]
 800b204:	1b9b      	subs	r3, r3, r6
 800b206:	6123      	str	r3, [r4, #16]
 800b208:	9b07      	ldr	r3, [sp, #28]
 800b20a:	0021      	movs	r1, r4
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	9805      	ldr	r0, [sp, #20]
 800b210:	9b06      	ldr	r3, [sp, #24]
 800b212:	aa09      	add	r2, sp, #36	; 0x24
 800b214:	f7ff fede 	bl	800afd4 <_printf_common>
 800b218:	1c43      	adds	r3, r0, #1
 800b21a:	d135      	bne.n	800b288 <_printf_i+0x1d4>
 800b21c:	2001      	movs	r0, #1
 800b21e:	4240      	negs	r0, r0
 800b220:	b00b      	add	sp, #44	; 0x2c
 800b222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b224:	2220      	movs	r2, #32
 800b226:	6809      	ldr	r1, [r1, #0]
 800b228:	430a      	orrs	r2, r1
 800b22a:	6022      	str	r2, [r4, #0]
 800b22c:	0022      	movs	r2, r4
 800b22e:	2178      	movs	r1, #120	; 0x78
 800b230:	3245      	adds	r2, #69	; 0x45
 800b232:	7011      	strb	r1, [r2, #0]
 800b234:	4a27      	ldr	r2, [pc, #156]	; (800b2d4 <_printf_i+0x220>)
 800b236:	e7a7      	b.n	800b188 <_printf_i+0xd4>
 800b238:	0648      	lsls	r0, r1, #25
 800b23a:	d5ac      	bpl.n	800b196 <_printf_i+0xe2>
 800b23c:	b2ad      	uxth	r5, r5
 800b23e:	e7aa      	b.n	800b196 <_printf_i+0xe2>
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	680d      	ldr	r5, [r1, #0]
 800b244:	1d10      	adds	r0, r2, #4
 800b246:	6949      	ldr	r1, [r1, #20]
 800b248:	6018      	str	r0, [r3, #0]
 800b24a:	6813      	ldr	r3, [r2, #0]
 800b24c:	062e      	lsls	r6, r5, #24
 800b24e:	d501      	bpl.n	800b254 <_printf_i+0x1a0>
 800b250:	6019      	str	r1, [r3, #0]
 800b252:	e002      	b.n	800b25a <_printf_i+0x1a6>
 800b254:	066d      	lsls	r5, r5, #25
 800b256:	d5fb      	bpl.n	800b250 <_printf_i+0x19c>
 800b258:	8019      	strh	r1, [r3, #0]
 800b25a:	2300      	movs	r3, #0
 800b25c:	9e04      	ldr	r6, [sp, #16]
 800b25e:	6123      	str	r3, [r4, #16]
 800b260:	e7d2      	b.n	800b208 <_printf_i+0x154>
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	1d11      	adds	r1, r2, #4
 800b266:	6019      	str	r1, [r3, #0]
 800b268:	6816      	ldr	r6, [r2, #0]
 800b26a:	2100      	movs	r1, #0
 800b26c:	0030      	movs	r0, r6
 800b26e:	6862      	ldr	r2, [r4, #4]
 800b270:	f000 ff52 	bl	800c118 <memchr>
 800b274:	2800      	cmp	r0, #0
 800b276:	d001      	beq.n	800b27c <_printf_i+0x1c8>
 800b278:	1b80      	subs	r0, r0, r6
 800b27a:	6060      	str	r0, [r4, #4]
 800b27c:	6863      	ldr	r3, [r4, #4]
 800b27e:	6123      	str	r3, [r4, #16]
 800b280:	2300      	movs	r3, #0
 800b282:	9a04      	ldr	r2, [sp, #16]
 800b284:	7013      	strb	r3, [r2, #0]
 800b286:	e7bf      	b.n	800b208 <_printf_i+0x154>
 800b288:	6923      	ldr	r3, [r4, #16]
 800b28a:	0032      	movs	r2, r6
 800b28c:	9906      	ldr	r1, [sp, #24]
 800b28e:	9805      	ldr	r0, [sp, #20]
 800b290:	9d07      	ldr	r5, [sp, #28]
 800b292:	47a8      	blx	r5
 800b294:	1c43      	adds	r3, r0, #1
 800b296:	d0c1      	beq.n	800b21c <_printf_i+0x168>
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	079b      	lsls	r3, r3, #30
 800b29c:	d415      	bmi.n	800b2ca <_printf_i+0x216>
 800b29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a0:	68e0      	ldr	r0, [r4, #12]
 800b2a2:	4298      	cmp	r0, r3
 800b2a4:	dabc      	bge.n	800b220 <_printf_i+0x16c>
 800b2a6:	0018      	movs	r0, r3
 800b2a8:	e7ba      	b.n	800b220 <_printf_i+0x16c>
 800b2aa:	0022      	movs	r2, r4
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	9906      	ldr	r1, [sp, #24]
 800b2b0:	9805      	ldr	r0, [sp, #20]
 800b2b2:	9e07      	ldr	r6, [sp, #28]
 800b2b4:	3219      	adds	r2, #25
 800b2b6:	47b0      	blx	r6
 800b2b8:	1c43      	adds	r3, r0, #1
 800b2ba:	d0af      	beq.n	800b21c <_printf_i+0x168>
 800b2bc:	3501      	adds	r5, #1
 800b2be:	68e3      	ldr	r3, [r4, #12]
 800b2c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c2:	1a9b      	subs	r3, r3, r2
 800b2c4:	42ab      	cmp	r3, r5
 800b2c6:	dcf0      	bgt.n	800b2aa <_printf_i+0x1f6>
 800b2c8:	e7e9      	b.n	800b29e <_printf_i+0x1ea>
 800b2ca:	2500      	movs	r5, #0
 800b2cc:	e7f7      	b.n	800b2be <_printf_i+0x20a>
 800b2ce:	46c0      	nop			; (mov r8, r8)
 800b2d0:	0800d8ae 	.word	0x0800d8ae
 800b2d4:	0800d8bf 	.word	0x0800d8bf

0800b2d8 <_sbrk_r>:
 800b2d8:	2300      	movs	r3, #0
 800b2da:	b570      	push	{r4, r5, r6, lr}
 800b2dc:	4d06      	ldr	r5, [pc, #24]	; (800b2f8 <_sbrk_r+0x20>)
 800b2de:	0004      	movs	r4, r0
 800b2e0:	0008      	movs	r0, r1
 800b2e2:	602b      	str	r3, [r5, #0]
 800b2e4:	f7f8 fa3e 	bl	8003764 <_sbrk>
 800b2e8:	1c43      	adds	r3, r0, #1
 800b2ea:	d103      	bne.n	800b2f4 <_sbrk_r+0x1c>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d000      	beq.n	800b2f4 <_sbrk_r+0x1c>
 800b2f2:	6023      	str	r3, [r4, #0]
 800b2f4:	bd70      	pop	{r4, r5, r6, pc}
 800b2f6:	46c0      	nop			; (mov r8, r8)
 800b2f8:	2000059c 	.word	0x2000059c

0800b2fc <siprintf>:
 800b2fc:	b40e      	push	{r1, r2, r3}
 800b2fe:	b500      	push	{lr}
 800b300:	490b      	ldr	r1, [pc, #44]	; (800b330 <siprintf+0x34>)
 800b302:	b09c      	sub	sp, #112	; 0x70
 800b304:	ab1d      	add	r3, sp, #116	; 0x74
 800b306:	9002      	str	r0, [sp, #8]
 800b308:	9006      	str	r0, [sp, #24]
 800b30a:	9107      	str	r1, [sp, #28]
 800b30c:	9104      	str	r1, [sp, #16]
 800b30e:	4809      	ldr	r0, [pc, #36]	; (800b334 <siprintf+0x38>)
 800b310:	4909      	ldr	r1, [pc, #36]	; (800b338 <siprintf+0x3c>)
 800b312:	cb04      	ldmia	r3!, {r2}
 800b314:	9105      	str	r1, [sp, #20]
 800b316:	6800      	ldr	r0, [r0, #0]
 800b318:	a902      	add	r1, sp, #8
 800b31a:	9301      	str	r3, [sp, #4]
 800b31c:	f001 fb26 	bl	800c96c <_svfiprintf_r>
 800b320:	2300      	movs	r3, #0
 800b322:	9a02      	ldr	r2, [sp, #8]
 800b324:	7013      	strb	r3, [r2, #0]
 800b326:	b01c      	add	sp, #112	; 0x70
 800b328:	bc08      	pop	{r3}
 800b32a:	b003      	add	sp, #12
 800b32c:	4718      	bx	r3
 800b32e:	46c0      	nop			; (mov r8, r8)
 800b330:	7fffffff 	.word	0x7fffffff
 800b334:	2000000c 	.word	0x2000000c
 800b338:	ffff0208 	.word	0xffff0208

0800b33c <__assert_func>:
 800b33c:	b530      	push	{r4, r5, lr}
 800b33e:	0014      	movs	r4, r2
 800b340:	001a      	movs	r2, r3
 800b342:	4b09      	ldr	r3, [pc, #36]	; (800b368 <__assert_func+0x2c>)
 800b344:	0005      	movs	r5, r0
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	b085      	sub	sp, #20
 800b34a:	68d8      	ldr	r0, [r3, #12]
 800b34c:	4b07      	ldr	r3, [pc, #28]	; (800b36c <__assert_func+0x30>)
 800b34e:	2c00      	cmp	r4, #0
 800b350:	d101      	bne.n	800b356 <__assert_func+0x1a>
 800b352:	4b07      	ldr	r3, [pc, #28]	; (800b370 <__assert_func+0x34>)
 800b354:	001c      	movs	r4, r3
 800b356:	9301      	str	r3, [sp, #4]
 800b358:	9100      	str	r1, [sp, #0]
 800b35a:	002b      	movs	r3, r5
 800b35c:	4905      	ldr	r1, [pc, #20]	; (800b374 <__assert_func+0x38>)
 800b35e:	9402      	str	r4, [sp, #8]
 800b360:	f000 feb4 	bl	800c0cc <fiprintf>
 800b364:	f001 fe40 	bl	800cfe8 <abort>
 800b368:	2000000c 	.word	0x2000000c
 800b36c:	0800d8d0 	.word	0x0800d8d0
 800b370:	0800d90b 	.word	0x0800d90b
 800b374:	0800d8dd 	.word	0x0800d8dd

0800b378 <quorem>:
 800b378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b37a:	0006      	movs	r6, r0
 800b37c:	690d      	ldr	r5, [r1, #16]
 800b37e:	6933      	ldr	r3, [r6, #16]
 800b380:	b087      	sub	sp, #28
 800b382:	2000      	movs	r0, #0
 800b384:	9102      	str	r1, [sp, #8]
 800b386:	42ab      	cmp	r3, r5
 800b388:	db6b      	blt.n	800b462 <quorem+0xea>
 800b38a:	000b      	movs	r3, r1
 800b38c:	3d01      	subs	r5, #1
 800b38e:	00ac      	lsls	r4, r5, #2
 800b390:	3314      	adds	r3, #20
 800b392:	9305      	str	r3, [sp, #20]
 800b394:	191b      	adds	r3, r3, r4
 800b396:	9303      	str	r3, [sp, #12]
 800b398:	0033      	movs	r3, r6
 800b39a:	3314      	adds	r3, #20
 800b39c:	9301      	str	r3, [sp, #4]
 800b39e:	191c      	adds	r4, r3, r4
 800b3a0:	9b03      	ldr	r3, [sp, #12]
 800b3a2:	6827      	ldr	r7, [r4, #0]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	0038      	movs	r0, r7
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	0019      	movs	r1, r3
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	f7f4 fec4 	bl	800013c <__udivsi3>
 800b3b4:	9b04      	ldr	r3, [sp, #16]
 800b3b6:	9000      	str	r0, [sp, #0]
 800b3b8:	429f      	cmp	r7, r3
 800b3ba:	d329      	bcc.n	800b410 <quorem+0x98>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	469c      	mov	ip, r3
 800b3c0:	9801      	ldr	r0, [sp, #4]
 800b3c2:	9f05      	ldr	r7, [sp, #20]
 800b3c4:	9304      	str	r3, [sp, #16]
 800b3c6:	cf08      	ldmia	r7!, {r3}
 800b3c8:	9a00      	ldr	r2, [sp, #0]
 800b3ca:	b299      	uxth	r1, r3
 800b3cc:	4351      	muls	r1, r2
 800b3ce:	0c1b      	lsrs	r3, r3, #16
 800b3d0:	4353      	muls	r3, r2
 800b3d2:	4461      	add	r1, ip
 800b3d4:	0c0a      	lsrs	r2, r1, #16
 800b3d6:	189b      	adds	r3, r3, r2
 800b3d8:	0c1a      	lsrs	r2, r3, #16
 800b3da:	9305      	str	r3, [sp, #20]
 800b3dc:	6803      	ldr	r3, [r0, #0]
 800b3de:	4694      	mov	ip, r2
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	9b04      	ldr	r3, [sp, #16]
 800b3e4:	b289      	uxth	r1, r1
 800b3e6:	18d2      	adds	r2, r2, r3
 800b3e8:	6803      	ldr	r3, [r0, #0]
 800b3ea:	1a52      	subs	r2, r2, r1
 800b3ec:	0c19      	lsrs	r1, r3, #16
 800b3ee:	466b      	mov	r3, sp
 800b3f0:	8a9b      	ldrh	r3, [r3, #20]
 800b3f2:	1acb      	subs	r3, r1, r3
 800b3f4:	1411      	asrs	r1, r2, #16
 800b3f6:	185b      	adds	r3, r3, r1
 800b3f8:	1419      	asrs	r1, r3, #16
 800b3fa:	b292      	uxth	r2, r2
 800b3fc:	041b      	lsls	r3, r3, #16
 800b3fe:	431a      	orrs	r2, r3
 800b400:	9b03      	ldr	r3, [sp, #12]
 800b402:	9104      	str	r1, [sp, #16]
 800b404:	c004      	stmia	r0!, {r2}
 800b406:	42bb      	cmp	r3, r7
 800b408:	d2dd      	bcs.n	800b3c6 <quorem+0x4e>
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d02e      	beq.n	800b46e <quorem+0xf6>
 800b410:	0030      	movs	r0, r6
 800b412:	9902      	ldr	r1, [sp, #8]
 800b414:	f001 f922 	bl	800c65c <__mcmp>
 800b418:	2800      	cmp	r0, #0
 800b41a:	db21      	blt.n	800b460 <quorem+0xe8>
 800b41c:	0030      	movs	r0, r6
 800b41e:	2400      	movs	r4, #0
 800b420:	9b00      	ldr	r3, [sp, #0]
 800b422:	9902      	ldr	r1, [sp, #8]
 800b424:	3301      	adds	r3, #1
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	3014      	adds	r0, #20
 800b42a:	3114      	adds	r1, #20
 800b42c:	6802      	ldr	r2, [r0, #0]
 800b42e:	c908      	ldmia	r1!, {r3}
 800b430:	b292      	uxth	r2, r2
 800b432:	1914      	adds	r4, r2, r4
 800b434:	b29a      	uxth	r2, r3
 800b436:	1aa2      	subs	r2, r4, r2
 800b438:	6804      	ldr	r4, [r0, #0]
 800b43a:	0c1b      	lsrs	r3, r3, #16
 800b43c:	0c24      	lsrs	r4, r4, #16
 800b43e:	1ae3      	subs	r3, r4, r3
 800b440:	1414      	asrs	r4, r2, #16
 800b442:	191b      	adds	r3, r3, r4
 800b444:	141c      	asrs	r4, r3, #16
 800b446:	b292      	uxth	r2, r2
 800b448:	041b      	lsls	r3, r3, #16
 800b44a:	4313      	orrs	r3, r2
 800b44c:	c008      	stmia	r0!, {r3}
 800b44e:	9b03      	ldr	r3, [sp, #12]
 800b450:	428b      	cmp	r3, r1
 800b452:	d2eb      	bcs.n	800b42c <quorem+0xb4>
 800b454:	9a01      	ldr	r2, [sp, #4]
 800b456:	00ab      	lsls	r3, r5, #2
 800b458:	18d3      	adds	r3, r2, r3
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	2a00      	cmp	r2, #0
 800b45e:	d010      	beq.n	800b482 <quorem+0x10a>
 800b460:	9800      	ldr	r0, [sp, #0]
 800b462:	b007      	add	sp, #28
 800b464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d104      	bne.n	800b476 <quorem+0xfe>
 800b46c:	3d01      	subs	r5, #1
 800b46e:	9b01      	ldr	r3, [sp, #4]
 800b470:	3c04      	subs	r4, #4
 800b472:	42a3      	cmp	r3, r4
 800b474:	d3f7      	bcc.n	800b466 <quorem+0xee>
 800b476:	6135      	str	r5, [r6, #16]
 800b478:	e7ca      	b.n	800b410 <quorem+0x98>
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	2a00      	cmp	r2, #0
 800b47e:	d104      	bne.n	800b48a <quorem+0x112>
 800b480:	3d01      	subs	r5, #1
 800b482:	9a01      	ldr	r2, [sp, #4]
 800b484:	3b04      	subs	r3, #4
 800b486:	429a      	cmp	r2, r3
 800b488:	d3f7      	bcc.n	800b47a <quorem+0x102>
 800b48a:	6135      	str	r5, [r6, #16]
 800b48c:	e7e8      	b.n	800b460 <quorem+0xe8>
	...

0800b490 <_dtoa_r>:
 800b490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b492:	b09d      	sub	sp, #116	; 0x74
 800b494:	9202      	str	r2, [sp, #8]
 800b496:	9303      	str	r3, [sp, #12]
 800b498:	9b02      	ldr	r3, [sp, #8]
 800b49a:	9c03      	ldr	r4, [sp, #12]
 800b49c:	930a      	str	r3, [sp, #40]	; 0x28
 800b49e:	940b      	str	r4, [sp, #44]	; 0x2c
 800b4a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b4a2:	0007      	movs	r7, r0
 800b4a4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800b4a6:	2c00      	cmp	r4, #0
 800b4a8:	d10e      	bne.n	800b4c8 <_dtoa_r+0x38>
 800b4aa:	2010      	movs	r0, #16
 800b4ac:	f7ff f9d6 	bl	800a85c <malloc>
 800b4b0:	1e02      	subs	r2, r0, #0
 800b4b2:	6278      	str	r0, [r7, #36]	; 0x24
 800b4b4:	d104      	bne.n	800b4c0 <_dtoa_r+0x30>
 800b4b6:	21ea      	movs	r1, #234	; 0xea
 800b4b8:	4bc0      	ldr	r3, [pc, #768]	; (800b7bc <_dtoa_r+0x32c>)
 800b4ba:	48c1      	ldr	r0, [pc, #772]	; (800b7c0 <_dtoa_r+0x330>)
 800b4bc:	f7ff ff3e 	bl	800b33c <__assert_func>
 800b4c0:	6044      	str	r4, [r0, #4]
 800b4c2:	6084      	str	r4, [r0, #8]
 800b4c4:	6004      	str	r4, [r0, #0]
 800b4c6:	60c4      	str	r4, [r0, #12]
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	6819      	ldr	r1, [r3, #0]
 800b4cc:	2900      	cmp	r1, #0
 800b4ce:	d00a      	beq.n	800b4e6 <_dtoa_r+0x56>
 800b4d0:	685a      	ldr	r2, [r3, #4]
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	4093      	lsls	r3, r2
 800b4d6:	604a      	str	r2, [r1, #4]
 800b4d8:	608b      	str	r3, [r1, #8]
 800b4da:	0038      	movs	r0, r7
 800b4dc:	f000 fe7c 	bl	800c1d8 <_Bfree>
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e4:	601a      	str	r2, [r3, #0]
 800b4e6:	9b03      	ldr	r3, [sp, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	da21      	bge.n	800b530 <_dtoa_r+0xa0>
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	602b      	str	r3, [r5, #0]
 800b4f0:	9b03      	ldr	r3, [sp, #12]
 800b4f2:	005b      	lsls	r3, r3, #1
 800b4f4:	085b      	lsrs	r3, r3, #1
 800b4f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b4fa:	4bb2      	ldr	r3, [pc, #712]	; (800b7c4 <_dtoa_r+0x334>)
 800b4fc:	002a      	movs	r2, r5
 800b4fe:	9318      	str	r3, [sp, #96]	; 0x60
 800b500:	401a      	ands	r2, r3
 800b502:	429a      	cmp	r2, r3
 800b504:	d117      	bne.n	800b536 <_dtoa_r+0xa6>
 800b506:	4bb0      	ldr	r3, [pc, #704]	; (800b7c8 <_dtoa_r+0x338>)
 800b508:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b50a:	0328      	lsls	r0, r5, #12
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	9b02      	ldr	r3, [sp, #8]
 800b510:	0b00      	lsrs	r0, r0, #12
 800b512:	4318      	orrs	r0, r3
 800b514:	d101      	bne.n	800b51a <_dtoa_r+0x8a>
 800b516:	f000 fdc3 	bl	800c0a0 <_dtoa_r+0xc10>
 800b51a:	48ac      	ldr	r0, [pc, #688]	; (800b7cc <_dtoa_r+0x33c>)
 800b51c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b51e:	9005      	str	r0, [sp, #20]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d002      	beq.n	800b52a <_dtoa_r+0x9a>
 800b524:	4baa      	ldr	r3, [pc, #680]	; (800b7d0 <_dtoa_r+0x340>)
 800b526:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b528:	6013      	str	r3, [r2, #0]
 800b52a:	9805      	ldr	r0, [sp, #20]
 800b52c:	b01d      	add	sp, #116	; 0x74
 800b52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b530:	2300      	movs	r3, #0
 800b532:	602b      	str	r3, [r5, #0]
 800b534:	e7e0      	b.n	800b4f8 <_dtoa_r+0x68>
 800b536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b538:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b53a:	9312      	str	r3, [sp, #72]	; 0x48
 800b53c:	9413      	str	r4, [sp, #76]	; 0x4c
 800b53e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b540:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b542:	2200      	movs	r2, #0
 800b544:	2300      	movs	r3, #0
 800b546:	f7f4 ff7f 	bl	8000448 <__aeabi_dcmpeq>
 800b54a:	1e04      	subs	r4, r0, #0
 800b54c:	d00b      	beq.n	800b566 <_dtoa_r+0xd6>
 800b54e:	2301      	movs	r3, #1
 800b550:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b552:	6013      	str	r3, [r2, #0]
 800b554:	4b9f      	ldr	r3, [pc, #636]	; (800b7d4 <_dtoa_r+0x344>)
 800b556:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b558:	9305      	str	r3, [sp, #20]
 800b55a:	2a00      	cmp	r2, #0
 800b55c:	d0e5      	beq.n	800b52a <_dtoa_r+0x9a>
 800b55e:	4a9e      	ldr	r2, [pc, #632]	; (800b7d8 <_dtoa_r+0x348>)
 800b560:	9926      	ldr	r1, [sp, #152]	; 0x98
 800b562:	600a      	str	r2, [r1, #0]
 800b564:	e7e1      	b.n	800b52a <_dtoa_r+0x9a>
 800b566:	ab1a      	add	r3, sp, #104	; 0x68
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	ab1b      	add	r3, sp, #108	; 0x6c
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	0038      	movs	r0, r7
 800b570:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b572:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b574:	f001 f926 	bl	800c7c4 <__d2b>
 800b578:	006e      	lsls	r6, r5, #1
 800b57a:	9004      	str	r0, [sp, #16]
 800b57c:	0d76      	lsrs	r6, r6, #21
 800b57e:	d100      	bne.n	800b582 <_dtoa_r+0xf2>
 800b580:	e07c      	b.n	800b67c <_dtoa_r+0x1ec>
 800b582:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b584:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b586:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b588:	4a94      	ldr	r2, [pc, #592]	; (800b7dc <_dtoa_r+0x34c>)
 800b58a:	031b      	lsls	r3, r3, #12
 800b58c:	0b1b      	lsrs	r3, r3, #12
 800b58e:	431a      	orrs	r2, r3
 800b590:	0011      	movs	r1, r2
 800b592:	4b93      	ldr	r3, [pc, #588]	; (800b7e0 <_dtoa_r+0x350>)
 800b594:	9416      	str	r4, [sp, #88]	; 0x58
 800b596:	18f6      	adds	r6, r6, r3
 800b598:	2200      	movs	r2, #0
 800b59a:	4b92      	ldr	r3, [pc, #584]	; (800b7e4 <_dtoa_r+0x354>)
 800b59c:	f7f6 fa86 	bl	8001aac <__aeabi_dsub>
 800b5a0:	4a91      	ldr	r2, [pc, #580]	; (800b7e8 <_dtoa_r+0x358>)
 800b5a2:	4b92      	ldr	r3, [pc, #584]	; (800b7ec <_dtoa_r+0x35c>)
 800b5a4:	f7f6 f816 	bl	80015d4 <__aeabi_dmul>
 800b5a8:	4a91      	ldr	r2, [pc, #580]	; (800b7f0 <_dtoa_r+0x360>)
 800b5aa:	4b92      	ldr	r3, [pc, #584]	; (800b7f4 <_dtoa_r+0x364>)
 800b5ac:	f7f5 f8a2 	bl	80006f4 <__aeabi_dadd>
 800b5b0:	0004      	movs	r4, r0
 800b5b2:	0030      	movs	r0, r6
 800b5b4:	000d      	movs	r5, r1
 800b5b6:	f7f6 fe5f 	bl	8002278 <__aeabi_i2d>
 800b5ba:	4a8f      	ldr	r2, [pc, #572]	; (800b7f8 <_dtoa_r+0x368>)
 800b5bc:	4b8f      	ldr	r3, [pc, #572]	; (800b7fc <_dtoa_r+0x36c>)
 800b5be:	f7f6 f809 	bl	80015d4 <__aeabi_dmul>
 800b5c2:	0002      	movs	r2, r0
 800b5c4:	000b      	movs	r3, r1
 800b5c6:	0020      	movs	r0, r4
 800b5c8:	0029      	movs	r1, r5
 800b5ca:	f7f5 f893 	bl	80006f4 <__aeabi_dadd>
 800b5ce:	0004      	movs	r4, r0
 800b5d0:	000d      	movs	r5, r1
 800b5d2:	f7f6 fe1b 	bl	800220c <__aeabi_d2iz>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	9002      	str	r0, [sp, #8]
 800b5da:	2300      	movs	r3, #0
 800b5dc:	0020      	movs	r0, r4
 800b5de:	0029      	movs	r1, r5
 800b5e0:	f7f4 ff38 	bl	8000454 <__aeabi_dcmplt>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d00b      	beq.n	800b600 <_dtoa_r+0x170>
 800b5e8:	9802      	ldr	r0, [sp, #8]
 800b5ea:	f7f6 fe45 	bl	8002278 <__aeabi_i2d>
 800b5ee:	002b      	movs	r3, r5
 800b5f0:	0022      	movs	r2, r4
 800b5f2:	f7f4 ff29 	bl	8000448 <__aeabi_dcmpeq>
 800b5f6:	4243      	negs	r3, r0
 800b5f8:	4158      	adcs	r0, r3
 800b5fa:	9b02      	ldr	r3, [sp, #8]
 800b5fc:	1a1b      	subs	r3, r3, r0
 800b5fe:	9302      	str	r3, [sp, #8]
 800b600:	2301      	movs	r3, #1
 800b602:	9315      	str	r3, [sp, #84]	; 0x54
 800b604:	9b02      	ldr	r3, [sp, #8]
 800b606:	2b16      	cmp	r3, #22
 800b608:	d80f      	bhi.n	800b62a <_dtoa_r+0x19a>
 800b60a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b60c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b60e:	00da      	lsls	r2, r3, #3
 800b610:	4b7b      	ldr	r3, [pc, #492]	; (800b800 <_dtoa_r+0x370>)
 800b612:	189b      	adds	r3, r3, r2
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	f7f4 ff1c 	bl	8000454 <__aeabi_dcmplt>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d049      	beq.n	800b6b4 <_dtoa_r+0x224>
 800b620:	9b02      	ldr	r3, [sp, #8]
 800b622:	3b01      	subs	r3, #1
 800b624:	9302      	str	r3, [sp, #8]
 800b626:	2300      	movs	r3, #0
 800b628:	9315      	str	r3, [sp, #84]	; 0x54
 800b62a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b62c:	1b9e      	subs	r6, r3, r6
 800b62e:	2300      	movs	r3, #0
 800b630:	9308      	str	r3, [sp, #32]
 800b632:	0033      	movs	r3, r6
 800b634:	3b01      	subs	r3, #1
 800b636:	930d      	str	r3, [sp, #52]	; 0x34
 800b638:	d504      	bpl.n	800b644 <_dtoa_r+0x1b4>
 800b63a:	2301      	movs	r3, #1
 800b63c:	1b9b      	subs	r3, r3, r6
 800b63e:	9308      	str	r3, [sp, #32]
 800b640:	2300      	movs	r3, #0
 800b642:	930d      	str	r3, [sp, #52]	; 0x34
 800b644:	9b02      	ldr	r3, [sp, #8]
 800b646:	2b00      	cmp	r3, #0
 800b648:	db36      	blt.n	800b6b8 <_dtoa_r+0x228>
 800b64a:	9a02      	ldr	r2, [sp, #8]
 800b64c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b64e:	4694      	mov	ip, r2
 800b650:	4463      	add	r3, ip
 800b652:	930d      	str	r3, [sp, #52]	; 0x34
 800b654:	2300      	movs	r3, #0
 800b656:	9214      	str	r2, [sp, #80]	; 0x50
 800b658:	930e      	str	r3, [sp, #56]	; 0x38
 800b65a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b65c:	2401      	movs	r4, #1
 800b65e:	2b09      	cmp	r3, #9
 800b660:	d862      	bhi.n	800b728 <_dtoa_r+0x298>
 800b662:	2b05      	cmp	r3, #5
 800b664:	dd02      	ble.n	800b66c <_dtoa_r+0x1dc>
 800b666:	2400      	movs	r4, #0
 800b668:	3b04      	subs	r3, #4
 800b66a:	9322      	str	r3, [sp, #136]	; 0x88
 800b66c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b66e:	1e98      	subs	r0, r3, #2
 800b670:	2803      	cmp	r0, #3
 800b672:	d862      	bhi.n	800b73a <_dtoa_r+0x2aa>
 800b674:	f7f4 fd4e 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b678:	56343629 	.word	0x56343629
 800b67c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b67e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b680:	189e      	adds	r6, r3, r2
 800b682:	4b60      	ldr	r3, [pc, #384]	; (800b804 <_dtoa_r+0x374>)
 800b684:	18f2      	adds	r2, r6, r3
 800b686:	2a20      	cmp	r2, #32
 800b688:	dd0f      	ble.n	800b6aa <_dtoa_r+0x21a>
 800b68a:	2340      	movs	r3, #64	; 0x40
 800b68c:	1a9b      	subs	r3, r3, r2
 800b68e:	409d      	lsls	r5, r3
 800b690:	4b5d      	ldr	r3, [pc, #372]	; (800b808 <_dtoa_r+0x378>)
 800b692:	9802      	ldr	r0, [sp, #8]
 800b694:	18f3      	adds	r3, r6, r3
 800b696:	40d8      	lsrs	r0, r3
 800b698:	4328      	orrs	r0, r5
 800b69a:	f7f6 fe1d 	bl	80022d8 <__aeabi_ui2d>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	4c5a      	ldr	r4, [pc, #360]	; (800b80c <_dtoa_r+0x37c>)
 800b6a2:	3e01      	subs	r6, #1
 800b6a4:	1909      	adds	r1, r1, r4
 800b6a6:	9316      	str	r3, [sp, #88]	; 0x58
 800b6a8:	e776      	b.n	800b598 <_dtoa_r+0x108>
 800b6aa:	2320      	movs	r3, #32
 800b6ac:	9802      	ldr	r0, [sp, #8]
 800b6ae:	1a9b      	subs	r3, r3, r2
 800b6b0:	4098      	lsls	r0, r3
 800b6b2:	e7f2      	b.n	800b69a <_dtoa_r+0x20a>
 800b6b4:	9015      	str	r0, [sp, #84]	; 0x54
 800b6b6:	e7b8      	b.n	800b62a <_dtoa_r+0x19a>
 800b6b8:	9b08      	ldr	r3, [sp, #32]
 800b6ba:	9a02      	ldr	r2, [sp, #8]
 800b6bc:	1a9b      	subs	r3, r3, r2
 800b6be:	9308      	str	r3, [sp, #32]
 800b6c0:	4253      	negs	r3, r2
 800b6c2:	930e      	str	r3, [sp, #56]	; 0x38
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	9314      	str	r3, [sp, #80]	; 0x50
 800b6c8:	e7c7      	b.n	800b65a <_dtoa_r+0x1ca>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	dc36      	bgt.n	800b742 <_dtoa_r+0x2b2>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	001a      	movs	r2, r3
 800b6d8:	930c      	str	r3, [sp, #48]	; 0x30
 800b6da:	9306      	str	r3, [sp, #24]
 800b6dc:	9223      	str	r2, [sp, #140]	; 0x8c
 800b6de:	e00d      	b.n	800b6fc <_dtoa_r+0x26c>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e7f3      	b.n	800b6cc <_dtoa_r+0x23c>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b6e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6ea:	4694      	mov	ip, r2
 800b6ec:	9b02      	ldr	r3, [sp, #8]
 800b6ee:	4463      	add	r3, ip
 800b6f0:	930c      	str	r3, [sp, #48]	; 0x30
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	9306      	str	r3, [sp, #24]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	dc00      	bgt.n	800b6fc <_dtoa_r+0x26c>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b700:	6042      	str	r2, [r0, #4]
 800b702:	3204      	adds	r2, #4
 800b704:	0015      	movs	r5, r2
 800b706:	3514      	adds	r5, #20
 800b708:	6841      	ldr	r1, [r0, #4]
 800b70a:	429d      	cmp	r5, r3
 800b70c:	d91d      	bls.n	800b74a <_dtoa_r+0x2ba>
 800b70e:	0038      	movs	r0, r7
 800b710:	f000 fd1e 	bl	800c150 <_Balloc>
 800b714:	9005      	str	r0, [sp, #20]
 800b716:	2800      	cmp	r0, #0
 800b718:	d11b      	bne.n	800b752 <_dtoa_r+0x2c2>
 800b71a:	21d5      	movs	r1, #213	; 0xd5
 800b71c:	0002      	movs	r2, r0
 800b71e:	4b3c      	ldr	r3, [pc, #240]	; (800b810 <_dtoa_r+0x380>)
 800b720:	0049      	lsls	r1, r1, #1
 800b722:	e6ca      	b.n	800b4ba <_dtoa_r+0x2a>
 800b724:	2301      	movs	r3, #1
 800b726:	e7de      	b.n	800b6e6 <_dtoa_r+0x256>
 800b728:	2300      	movs	r3, #0
 800b72a:	940f      	str	r4, [sp, #60]	; 0x3c
 800b72c:	9322      	str	r3, [sp, #136]	; 0x88
 800b72e:	3b01      	subs	r3, #1
 800b730:	930c      	str	r3, [sp, #48]	; 0x30
 800b732:	9306      	str	r3, [sp, #24]
 800b734:	2200      	movs	r2, #0
 800b736:	3313      	adds	r3, #19
 800b738:	e7d0      	b.n	800b6dc <_dtoa_r+0x24c>
 800b73a:	2301      	movs	r3, #1
 800b73c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b73e:	3b02      	subs	r3, #2
 800b740:	e7f6      	b.n	800b730 <_dtoa_r+0x2a0>
 800b742:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b744:	930c      	str	r3, [sp, #48]	; 0x30
 800b746:	9306      	str	r3, [sp, #24]
 800b748:	e7d8      	b.n	800b6fc <_dtoa_r+0x26c>
 800b74a:	3101      	adds	r1, #1
 800b74c:	6041      	str	r1, [r0, #4]
 800b74e:	0052      	lsls	r2, r2, #1
 800b750:	e7d8      	b.n	800b704 <_dtoa_r+0x274>
 800b752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b754:	9a05      	ldr	r2, [sp, #20]
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	9b06      	ldr	r3, [sp, #24]
 800b75a:	2b0e      	cmp	r3, #14
 800b75c:	d900      	bls.n	800b760 <_dtoa_r+0x2d0>
 800b75e:	e0eb      	b.n	800b938 <_dtoa_r+0x4a8>
 800b760:	2c00      	cmp	r4, #0
 800b762:	d100      	bne.n	800b766 <_dtoa_r+0x2d6>
 800b764:	e0e8      	b.n	800b938 <_dtoa_r+0x4a8>
 800b766:	9b02      	ldr	r3, [sp, #8]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	dd68      	ble.n	800b83e <_dtoa_r+0x3ae>
 800b76c:	001a      	movs	r2, r3
 800b76e:	210f      	movs	r1, #15
 800b770:	4b23      	ldr	r3, [pc, #140]	; (800b800 <_dtoa_r+0x370>)
 800b772:	400a      	ands	r2, r1
 800b774:	00d2      	lsls	r2, r2, #3
 800b776:	189b      	adds	r3, r3, r2
 800b778:	681d      	ldr	r5, [r3, #0]
 800b77a:	685e      	ldr	r6, [r3, #4]
 800b77c:	9b02      	ldr	r3, [sp, #8]
 800b77e:	111c      	asrs	r4, r3, #4
 800b780:	2302      	movs	r3, #2
 800b782:	9310      	str	r3, [sp, #64]	; 0x40
 800b784:	9b02      	ldr	r3, [sp, #8]
 800b786:	05db      	lsls	r3, r3, #23
 800b788:	d50b      	bpl.n	800b7a2 <_dtoa_r+0x312>
 800b78a:	4b22      	ldr	r3, [pc, #136]	; (800b814 <_dtoa_r+0x384>)
 800b78c:	400c      	ands	r4, r1
 800b78e:	6a1a      	ldr	r2, [r3, #32]
 800b790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b792:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b794:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b796:	f7f5 fb17 	bl	8000dc8 <__aeabi_ddiv>
 800b79a:	2303      	movs	r3, #3
 800b79c:	900a      	str	r0, [sp, #40]	; 0x28
 800b79e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b7a0:	9310      	str	r3, [sp, #64]	; 0x40
 800b7a2:	4b1c      	ldr	r3, [pc, #112]	; (800b814 <_dtoa_r+0x384>)
 800b7a4:	9307      	str	r3, [sp, #28]
 800b7a6:	2c00      	cmp	r4, #0
 800b7a8:	d136      	bne.n	800b818 <_dtoa_r+0x388>
 800b7aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b7ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b7ae:	002a      	movs	r2, r5
 800b7b0:	0033      	movs	r3, r6
 800b7b2:	f7f5 fb09 	bl	8000dc8 <__aeabi_ddiv>
 800b7b6:	900a      	str	r0, [sp, #40]	; 0x28
 800b7b8:	910b      	str	r1, [sp, #44]	; 0x2c
 800b7ba:	e05c      	b.n	800b876 <_dtoa_r+0x3e6>
 800b7bc:	0800da1a 	.word	0x0800da1a
 800b7c0:	0800da31 	.word	0x0800da31
 800b7c4:	7ff00000 	.word	0x7ff00000
 800b7c8:	0000270f 	.word	0x0000270f
 800b7cc:	0800da16 	.word	0x0800da16
 800b7d0:	0800da19 	.word	0x0800da19
 800b7d4:	0800d8ac 	.word	0x0800d8ac
 800b7d8:	0800d8ad 	.word	0x0800d8ad
 800b7dc:	3ff00000 	.word	0x3ff00000
 800b7e0:	fffffc01 	.word	0xfffffc01
 800b7e4:	3ff80000 	.word	0x3ff80000
 800b7e8:	636f4361 	.word	0x636f4361
 800b7ec:	3fd287a7 	.word	0x3fd287a7
 800b7f0:	8b60c8b3 	.word	0x8b60c8b3
 800b7f4:	3fc68a28 	.word	0x3fc68a28
 800b7f8:	509f79fb 	.word	0x509f79fb
 800b7fc:	3fd34413 	.word	0x3fd34413
 800b800:	0800db38 	.word	0x0800db38
 800b804:	00000432 	.word	0x00000432
 800b808:	00000412 	.word	0x00000412
 800b80c:	fe100000 	.word	0xfe100000
 800b810:	0800da90 	.word	0x0800da90
 800b814:	0800db10 	.word	0x0800db10
 800b818:	2301      	movs	r3, #1
 800b81a:	421c      	tst	r4, r3
 800b81c:	d00b      	beq.n	800b836 <_dtoa_r+0x3a6>
 800b81e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b820:	0028      	movs	r0, r5
 800b822:	3301      	adds	r3, #1
 800b824:	9310      	str	r3, [sp, #64]	; 0x40
 800b826:	9b07      	ldr	r3, [sp, #28]
 800b828:	0031      	movs	r1, r6
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	f7f5 fed1 	bl	80015d4 <__aeabi_dmul>
 800b832:	0005      	movs	r5, r0
 800b834:	000e      	movs	r6, r1
 800b836:	9b07      	ldr	r3, [sp, #28]
 800b838:	1064      	asrs	r4, r4, #1
 800b83a:	3308      	adds	r3, #8
 800b83c:	e7b2      	b.n	800b7a4 <_dtoa_r+0x314>
 800b83e:	2302      	movs	r3, #2
 800b840:	9310      	str	r3, [sp, #64]	; 0x40
 800b842:	9b02      	ldr	r3, [sp, #8]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d016      	beq.n	800b876 <_dtoa_r+0x3e6>
 800b848:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b84a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b84c:	425c      	negs	r4, r3
 800b84e:	230f      	movs	r3, #15
 800b850:	4ab5      	ldr	r2, [pc, #724]	; (800bb28 <_dtoa_r+0x698>)
 800b852:	4023      	ands	r3, r4
 800b854:	00db      	lsls	r3, r3, #3
 800b856:	18d3      	adds	r3, r2, r3
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	f7f5 feba 	bl	80015d4 <__aeabi_dmul>
 800b860:	2601      	movs	r6, #1
 800b862:	2300      	movs	r3, #0
 800b864:	900a      	str	r0, [sp, #40]	; 0x28
 800b866:	910b      	str	r1, [sp, #44]	; 0x2c
 800b868:	4db0      	ldr	r5, [pc, #704]	; (800bb2c <_dtoa_r+0x69c>)
 800b86a:	1124      	asrs	r4, r4, #4
 800b86c:	2c00      	cmp	r4, #0
 800b86e:	d000      	beq.n	800b872 <_dtoa_r+0x3e2>
 800b870:	e094      	b.n	800b99c <_dtoa_r+0x50c>
 800b872:	2b00      	cmp	r3, #0
 800b874:	d19f      	bne.n	800b7b6 <_dtoa_r+0x326>
 800b876:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d100      	bne.n	800b87e <_dtoa_r+0x3ee>
 800b87c:	e09b      	b.n	800b9b6 <_dtoa_r+0x526>
 800b87e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b880:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b882:	2200      	movs	r2, #0
 800b884:	0020      	movs	r0, r4
 800b886:	0029      	movs	r1, r5
 800b888:	4ba9      	ldr	r3, [pc, #676]	; (800bb30 <_dtoa_r+0x6a0>)
 800b88a:	f7f4 fde3 	bl	8000454 <__aeabi_dcmplt>
 800b88e:	2800      	cmp	r0, #0
 800b890:	d100      	bne.n	800b894 <_dtoa_r+0x404>
 800b892:	e090      	b.n	800b9b6 <_dtoa_r+0x526>
 800b894:	9b06      	ldr	r3, [sp, #24]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d100      	bne.n	800b89c <_dtoa_r+0x40c>
 800b89a:	e08c      	b.n	800b9b6 <_dtoa_r+0x526>
 800b89c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	dd46      	ble.n	800b930 <_dtoa_r+0x4a0>
 800b8a2:	9b02      	ldr	r3, [sp, #8]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	0020      	movs	r0, r4
 800b8a8:	0029      	movs	r1, r5
 800b8aa:	1e5e      	subs	r6, r3, #1
 800b8ac:	4ba1      	ldr	r3, [pc, #644]	; (800bb34 <_dtoa_r+0x6a4>)
 800b8ae:	f7f5 fe91 	bl	80015d4 <__aeabi_dmul>
 800b8b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8b4:	900a      	str	r0, [sp, #40]	; 0x28
 800b8b6:	910b      	str	r1, [sp, #44]	; 0x2c
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	9310      	str	r3, [sp, #64]	; 0x40
 800b8bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8be:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b8c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b8c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b8c4:	9307      	str	r3, [sp, #28]
 800b8c6:	f7f6 fcd7 	bl	8002278 <__aeabi_i2d>
 800b8ca:	0022      	movs	r2, r4
 800b8cc:	002b      	movs	r3, r5
 800b8ce:	f7f5 fe81 	bl	80015d4 <__aeabi_dmul>
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	4b98      	ldr	r3, [pc, #608]	; (800bb38 <_dtoa_r+0x6a8>)
 800b8d6:	f7f4 ff0d 	bl	80006f4 <__aeabi_dadd>
 800b8da:	9010      	str	r0, [sp, #64]	; 0x40
 800b8dc:	9111      	str	r1, [sp, #68]	; 0x44
 800b8de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b8e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8e2:	920a      	str	r2, [sp, #40]	; 0x28
 800b8e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8e6:	4a95      	ldr	r2, [pc, #596]	; (800bb3c <_dtoa_r+0x6ac>)
 800b8e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8ea:	4694      	mov	ip, r2
 800b8ec:	4463      	add	r3, ip
 800b8ee:	9317      	str	r3, [sp, #92]	; 0x5c
 800b8f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8f2:	9b07      	ldr	r3, [sp, #28]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d161      	bne.n	800b9bc <_dtoa_r+0x52c>
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	0020      	movs	r0, r4
 800b8fc:	0029      	movs	r1, r5
 800b8fe:	4b90      	ldr	r3, [pc, #576]	; (800bb40 <_dtoa_r+0x6b0>)
 800b900:	f7f6 f8d4 	bl	8001aac <__aeabi_dsub>
 800b904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b906:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b908:	0004      	movs	r4, r0
 800b90a:	000d      	movs	r5, r1
 800b90c:	f7f4 fdb6 	bl	800047c <__aeabi_dcmpgt>
 800b910:	2800      	cmp	r0, #0
 800b912:	d000      	beq.n	800b916 <_dtoa_r+0x486>
 800b914:	e2b5      	b.n	800be82 <_dtoa_r+0x9f2>
 800b916:	488b      	ldr	r0, [pc, #556]	; (800bb44 <_dtoa_r+0x6b4>)
 800b918:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b91a:	4684      	mov	ip, r0
 800b91c:	4461      	add	r1, ip
 800b91e:	000b      	movs	r3, r1
 800b920:	0020      	movs	r0, r4
 800b922:	0029      	movs	r1, r5
 800b924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b926:	f7f4 fd95 	bl	8000454 <__aeabi_dcmplt>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d000      	beq.n	800b930 <_dtoa_r+0x4a0>
 800b92e:	e2a5      	b.n	800be7c <_dtoa_r+0x9ec>
 800b930:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b932:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b934:	930a      	str	r3, [sp, #40]	; 0x28
 800b936:	940b      	str	r4, [sp, #44]	; 0x2c
 800b938:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	da00      	bge.n	800b940 <_dtoa_r+0x4b0>
 800b93e:	e171      	b.n	800bc24 <_dtoa_r+0x794>
 800b940:	9a02      	ldr	r2, [sp, #8]
 800b942:	2a0e      	cmp	r2, #14
 800b944:	dd00      	ble.n	800b948 <_dtoa_r+0x4b8>
 800b946:	e16d      	b.n	800bc24 <_dtoa_r+0x794>
 800b948:	4b77      	ldr	r3, [pc, #476]	; (800bb28 <_dtoa_r+0x698>)
 800b94a:	00d2      	lsls	r2, r2, #3
 800b94c:	189b      	adds	r3, r3, r2
 800b94e:	685c      	ldr	r4, [r3, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	9308      	str	r3, [sp, #32]
 800b954:	9409      	str	r4, [sp, #36]	; 0x24
 800b956:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b958:	2b00      	cmp	r3, #0
 800b95a:	db00      	blt.n	800b95e <_dtoa_r+0x4ce>
 800b95c:	e0f6      	b.n	800bb4c <_dtoa_r+0x6bc>
 800b95e:	9b06      	ldr	r3, [sp, #24]
 800b960:	2b00      	cmp	r3, #0
 800b962:	dd00      	ble.n	800b966 <_dtoa_r+0x4d6>
 800b964:	e0f2      	b.n	800bb4c <_dtoa_r+0x6bc>
 800b966:	d000      	beq.n	800b96a <_dtoa_r+0x4da>
 800b968:	e288      	b.n	800be7c <_dtoa_r+0x9ec>
 800b96a:	9808      	ldr	r0, [sp, #32]
 800b96c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b96e:	2200      	movs	r2, #0
 800b970:	4b73      	ldr	r3, [pc, #460]	; (800bb40 <_dtoa_r+0x6b0>)
 800b972:	f7f5 fe2f 	bl	80015d4 <__aeabi_dmul>
 800b976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b97a:	f7f4 fd89 	bl	8000490 <__aeabi_dcmpge>
 800b97e:	9e06      	ldr	r6, [sp, #24]
 800b980:	0035      	movs	r5, r6
 800b982:	2800      	cmp	r0, #0
 800b984:	d000      	beq.n	800b988 <_dtoa_r+0x4f8>
 800b986:	e25f      	b.n	800be48 <_dtoa_r+0x9b8>
 800b988:	9b05      	ldr	r3, [sp, #20]
 800b98a:	9a05      	ldr	r2, [sp, #20]
 800b98c:	3301      	adds	r3, #1
 800b98e:	9307      	str	r3, [sp, #28]
 800b990:	2331      	movs	r3, #49	; 0x31
 800b992:	7013      	strb	r3, [r2, #0]
 800b994:	9b02      	ldr	r3, [sp, #8]
 800b996:	3301      	adds	r3, #1
 800b998:	9302      	str	r3, [sp, #8]
 800b99a:	e25a      	b.n	800be52 <_dtoa_r+0x9c2>
 800b99c:	4234      	tst	r4, r6
 800b99e:	d007      	beq.n	800b9b0 <_dtoa_r+0x520>
 800b9a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	9310      	str	r3, [sp, #64]	; 0x40
 800b9a6:	682a      	ldr	r2, [r5, #0]
 800b9a8:	686b      	ldr	r3, [r5, #4]
 800b9aa:	f7f5 fe13 	bl	80015d4 <__aeabi_dmul>
 800b9ae:	0033      	movs	r3, r6
 800b9b0:	1064      	asrs	r4, r4, #1
 800b9b2:	3508      	adds	r5, #8
 800b9b4:	e75a      	b.n	800b86c <_dtoa_r+0x3dc>
 800b9b6:	9e02      	ldr	r6, [sp, #8]
 800b9b8:	9b06      	ldr	r3, [sp, #24]
 800b9ba:	e780      	b.n	800b8be <_dtoa_r+0x42e>
 800b9bc:	9b07      	ldr	r3, [sp, #28]
 800b9be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b9c0:	1e5a      	subs	r2, r3, #1
 800b9c2:	4b59      	ldr	r3, [pc, #356]	; (800bb28 <_dtoa_r+0x698>)
 800b9c4:	00d2      	lsls	r2, r2, #3
 800b9c6:	189b      	adds	r3, r3, r2
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	2900      	cmp	r1, #0
 800b9ce:	d051      	beq.n	800ba74 <_dtoa_r+0x5e4>
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	495d      	ldr	r1, [pc, #372]	; (800bb48 <_dtoa_r+0x6b8>)
 800b9d4:	f7f5 f9f8 	bl	8000dc8 <__aeabi_ddiv>
 800b9d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9dc:	f7f6 f866 	bl	8001aac <__aeabi_dsub>
 800b9e0:	9a05      	ldr	r2, [sp, #20]
 800b9e2:	9b05      	ldr	r3, [sp, #20]
 800b9e4:	4694      	mov	ip, r2
 800b9e6:	9310      	str	r3, [sp, #64]	; 0x40
 800b9e8:	9b07      	ldr	r3, [sp, #28]
 800b9ea:	900a      	str	r0, [sp, #40]	; 0x28
 800b9ec:	910b      	str	r1, [sp, #44]	; 0x2c
 800b9ee:	4463      	add	r3, ip
 800b9f0:	9319      	str	r3, [sp, #100]	; 0x64
 800b9f2:	0029      	movs	r1, r5
 800b9f4:	0020      	movs	r0, r4
 800b9f6:	f7f6 fc09 	bl	800220c <__aeabi_d2iz>
 800b9fa:	9017      	str	r0, [sp, #92]	; 0x5c
 800b9fc:	f7f6 fc3c 	bl	8002278 <__aeabi_i2d>
 800ba00:	0002      	movs	r2, r0
 800ba02:	000b      	movs	r3, r1
 800ba04:	0020      	movs	r0, r4
 800ba06:	0029      	movs	r1, r5
 800ba08:	f7f6 f850 	bl	8001aac <__aeabi_dsub>
 800ba0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba10:	3301      	adds	r3, #1
 800ba12:	9307      	str	r3, [sp, #28]
 800ba14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba16:	0004      	movs	r4, r0
 800ba18:	3330      	adds	r3, #48	; 0x30
 800ba1a:	7013      	strb	r3, [r2, #0]
 800ba1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba20:	000d      	movs	r5, r1
 800ba22:	f7f4 fd17 	bl	8000454 <__aeabi_dcmplt>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d175      	bne.n	800bb16 <_dtoa_r+0x686>
 800ba2a:	0022      	movs	r2, r4
 800ba2c:	002b      	movs	r3, r5
 800ba2e:	2000      	movs	r0, #0
 800ba30:	493f      	ldr	r1, [pc, #252]	; (800bb30 <_dtoa_r+0x6a0>)
 800ba32:	f7f6 f83b 	bl	8001aac <__aeabi_dsub>
 800ba36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba3a:	f7f4 fd0b 	bl	8000454 <__aeabi_dcmplt>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d000      	beq.n	800ba44 <_dtoa_r+0x5b4>
 800ba42:	e0d1      	b.n	800bbe8 <_dtoa_r+0x758>
 800ba44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba46:	9a07      	ldr	r2, [sp, #28]
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d100      	bne.n	800ba4e <_dtoa_r+0x5be>
 800ba4c:	e770      	b.n	800b930 <_dtoa_r+0x4a0>
 800ba4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ba50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba52:	2200      	movs	r2, #0
 800ba54:	4b37      	ldr	r3, [pc, #220]	; (800bb34 <_dtoa_r+0x6a4>)
 800ba56:	f7f5 fdbd 	bl	80015d4 <__aeabi_dmul>
 800ba5a:	4b36      	ldr	r3, [pc, #216]	; (800bb34 <_dtoa_r+0x6a4>)
 800ba5c:	900a      	str	r0, [sp, #40]	; 0x28
 800ba5e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ba60:	2200      	movs	r2, #0
 800ba62:	0020      	movs	r0, r4
 800ba64:	0029      	movs	r1, r5
 800ba66:	f7f5 fdb5 	bl	80015d4 <__aeabi_dmul>
 800ba6a:	9b07      	ldr	r3, [sp, #28]
 800ba6c:	0004      	movs	r4, r0
 800ba6e:	000d      	movs	r5, r1
 800ba70:	9310      	str	r3, [sp, #64]	; 0x40
 800ba72:	e7be      	b.n	800b9f2 <_dtoa_r+0x562>
 800ba74:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ba76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba78:	f7f5 fdac 	bl	80015d4 <__aeabi_dmul>
 800ba7c:	9a05      	ldr	r2, [sp, #20]
 800ba7e:	9b05      	ldr	r3, [sp, #20]
 800ba80:	4694      	mov	ip, r2
 800ba82:	930a      	str	r3, [sp, #40]	; 0x28
 800ba84:	9b07      	ldr	r3, [sp, #28]
 800ba86:	9010      	str	r0, [sp, #64]	; 0x40
 800ba88:	9111      	str	r1, [sp, #68]	; 0x44
 800ba8a:	4463      	add	r3, ip
 800ba8c:	9319      	str	r3, [sp, #100]	; 0x64
 800ba8e:	0029      	movs	r1, r5
 800ba90:	0020      	movs	r0, r4
 800ba92:	f7f6 fbbb 	bl	800220c <__aeabi_d2iz>
 800ba96:	9017      	str	r0, [sp, #92]	; 0x5c
 800ba98:	f7f6 fbee 	bl	8002278 <__aeabi_i2d>
 800ba9c:	0002      	movs	r2, r0
 800ba9e:	000b      	movs	r3, r1
 800baa0:	0020      	movs	r0, r4
 800baa2:	0029      	movs	r1, r5
 800baa4:	f7f6 f802 	bl	8001aac <__aeabi_dsub>
 800baa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800baaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800baac:	3330      	adds	r3, #48	; 0x30
 800baae:	7013      	strb	r3, [r2, #0]
 800bab0:	0013      	movs	r3, r2
 800bab2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bab4:	3301      	adds	r3, #1
 800bab6:	0004      	movs	r4, r0
 800bab8:	000d      	movs	r5, r1
 800baba:	930a      	str	r3, [sp, #40]	; 0x28
 800babc:	4293      	cmp	r3, r2
 800babe:	d12c      	bne.n	800bb1a <_dtoa_r+0x68a>
 800bac0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bac2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bac4:	9a05      	ldr	r2, [sp, #20]
 800bac6:	9b07      	ldr	r3, [sp, #28]
 800bac8:	4694      	mov	ip, r2
 800baca:	4463      	add	r3, ip
 800bacc:	2200      	movs	r2, #0
 800bace:	9307      	str	r3, [sp, #28]
 800bad0:	4b1d      	ldr	r3, [pc, #116]	; (800bb48 <_dtoa_r+0x6b8>)
 800bad2:	f7f4 fe0f 	bl	80006f4 <__aeabi_dadd>
 800bad6:	0002      	movs	r2, r0
 800bad8:	000b      	movs	r3, r1
 800bada:	0020      	movs	r0, r4
 800badc:	0029      	movs	r1, r5
 800bade:	f7f4 fccd 	bl	800047c <__aeabi_dcmpgt>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d000      	beq.n	800bae8 <_dtoa_r+0x658>
 800bae6:	e07f      	b.n	800bbe8 <_dtoa_r+0x758>
 800bae8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800baea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baec:	2000      	movs	r0, #0
 800baee:	4916      	ldr	r1, [pc, #88]	; (800bb48 <_dtoa_r+0x6b8>)
 800baf0:	f7f5 ffdc 	bl	8001aac <__aeabi_dsub>
 800baf4:	0002      	movs	r2, r0
 800baf6:	000b      	movs	r3, r1
 800baf8:	0020      	movs	r0, r4
 800bafa:	0029      	movs	r1, r5
 800bafc:	f7f4 fcaa 	bl	8000454 <__aeabi_dcmplt>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d100      	bne.n	800bb06 <_dtoa_r+0x676>
 800bb04:	e714      	b.n	800b930 <_dtoa_r+0x4a0>
 800bb06:	9b07      	ldr	r3, [sp, #28]
 800bb08:	001a      	movs	r2, r3
 800bb0a:	3a01      	subs	r2, #1
 800bb0c:	9207      	str	r2, [sp, #28]
 800bb0e:	7812      	ldrb	r2, [r2, #0]
 800bb10:	2a30      	cmp	r2, #48	; 0x30
 800bb12:	d0f8      	beq.n	800bb06 <_dtoa_r+0x676>
 800bb14:	9307      	str	r3, [sp, #28]
 800bb16:	9602      	str	r6, [sp, #8]
 800bb18:	e054      	b.n	800bbc4 <_dtoa_r+0x734>
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	4b05      	ldr	r3, [pc, #20]	; (800bb34 <_dtoa_r+0x6a4>)
 800bb1e:	f7f5 fd59 	bl	80015d4 <__aeabi_dmul>
 800bb22:	0004      	movs	r4, r0
 800bb24:	000d      	movs	r5, r1
 800bb26:	e7b2      	b.n	800ba8e <_dtoa_r+0x5fe>
 800bb28:	0800db38 	.word	0x0800db38
 800bb2c:	0800db10 	.word	0x0800db10
 800bb30:	3ff00000 	.word	0x3ff00000
 800bb34:	40240000 	.word	0x40240000
 800bb38:	401c0000 	.word	0x401c0000
 800bb3c:	fcc00000 	.word	0xfcc00000
 800bb40:	40140000 	.word	0x40140000
 800bb44:	7cc00000 	.word	0x7cc00000
 800bb48:	3fe00000 	.word	0x3fe00000
 800bb4c:	9b06      	ldr	r3, [sp, #24]
 800bb4e:	9e05      	ldr	r6, [sp, #20]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	199b      	adds	r3, r3, r6
 800bb54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bb56:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bb58:	930a      	str	r3, [sp, #40]	; 0x28
 800bb5a:	9a08      	ldr	r2, [sp, #32]
 800bb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5e:	0020      	movs	r0, r4
 800bb60:	0029      	movs	r1, r5
 800bb62:	f7f5 f931 	bl	8000dc8 <__aeabi_ddiv>
 800bb66:	f7f6 fb51 	bl	800220c <__aeabi_d2iz>
 800bb6a:	9006      	str	r0, [sp, #24]
 800bb6c:	f7f6 fb84 	bl	8002278 <__aeabi_i2d>
 800bb70:	9a08      	ldr	r2, [sp, #32]
 800bb72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb74:	f7f5 fd2e 	bl	80015d4 <__aeabi_dmul>
 800bb78:	0002      	movs	r2, r0
 800bb7a:	000b      	movs	r3, r1
 800bb7c:	0020      	movs	r0, r4
 800bb7e:	0029      	movs	r1, r5
 800bb80:	f7f5 ff94 	bl	8001aac <__aeabi_dsub>
 800bb84:	0033      	movs	r3, r6
 800bb86:	9a06      	ldr	r2, [sp, #24]
 800bb88:	3601      	adds	r6, #1
 800bb8a:	3230      	adds	r2, #48	; 0x30
 800bb8c:	701a      	strb	r2, [r3, #0]
 800bb8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb90:	9607      	str	r6, [sp, #28]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d139      	bne.n	800bc0a <_dtoa_r+0x77a>
 800bb96:	0002      	movs	r2, r0
 800bb98:	000b      	movs	r3, r1
 800bb9a:	f7f4 fdab 	bl	80006f4 <__aeabi_dadd>
 800bb9e:	9a08      	ldr	r2, [sp, #32]
 800bba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba2:	0004      	movs	r4, r0
 800bba4:	000d      	movs	r5, r1
 800bba6:	f7f4 fc69 	bl	800047c <__aeabi_dcmpgt>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d11b      	bne.n	800bbe6 <_dtoa_r+0x756>
 800bbae:	9a08      	ldr	r2, [sp, #32]
 800bbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbb2:	0020      	movs	r0, r4
 800bbb4:	0029      	movs	r1, r5
 800bbb6:	f7f4 fc47 	bl	8000448 <__aeabi_dcmpeq>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	d002      	beq.n	800bbc4 <_dtoa_r+0x734>
 800bbbe:	9b06      	ldr	r3, [sp, #24]
 800bbc0:	07db      	lsls	r3, r3, #31
 800bbc2:	d410      	bmi.n	800bbe6 <_dtoa_r+0x756>
 800bbc4:	0038      	movs	r0, r7
 800bbc6:	9904      	ldr	r1, [sp, #16]
 800bbc8:	f000 fb06 	bl	800c1d8 <_Bfree>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	9a07      	ldr	r2, [sp, #28]
 800bbd0:	9802      	ldr	r0, [sp, #8]
 800bbd2:	7013      	strb	r3, [r2, #0]
 800bbd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	6018      	str	r0, [r3, #0]
 800bbda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d100      	bne.n	800bbe2 <_dtoa_r+0x752>
 800bbe0:	e4a3      	b.n	800b52a <_dtoa_r+0x9a>
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	e4a1      	b.n	800b52a <_dtoa_r+0x9a>
 800bbe6:	9e02      	ldr	r6, [sp, #8]
 800bbe8:	9b07      	ldr	r3, [sp, #28]
 800bbea:	9307      	str	r3, [sp, #28]
 800bbec:	3b01      	subs	r3, #1
 800bbee:	781a      	ldrb	r2, [r3, #0]
 800bbf0:	2a39      	cmp	r2, #57	; 0x39
 800bbf2:	d106      	bne.n	800bc02 <_dtoa_r+0x772>
 800bbf4:	9a05      	ldr	r2, [sp, #20]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d1f7      	bne.n	800bbea <_dtoa_r+0x75a>
 800bbfa:	2230      	movs	r2, #48	; 0x30
 800bbfc:	9905      	ldr	r1, [sp, #20]
 800bbfe:	3601      	adds	r6, #1
 800bc00:	700a      	strb	r2, [r1, #0]
 800bc02:	781a      	ldrb	r2, [r3, #0]
 800bc04:	3201      	adds	r2, #1
 800bc06:	701a      	strb	r2, [r3, #0]
 800bc08:	e785      	b.n	800bb16 <_dtoa_r+0x686>
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	4bad      	ldr	r3, [pc, #692]	; (800bec4 <_dtoa_r+0xa34>)
 800bc0e:	f7f5 fce1 	bl	80015d4 <__aeabi_dmul>
 800bc12:	2200      	movs	r2, #0
 800bc14:	2300      	movs	r3, #0
 800bc16:	0004      	movs	r4, r0
 800bc18:	000d      	movs	r5, r1
 800bc1a:	f7f4 fc15 	bl	8000448 <__aeabi_dcmpeq>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d09b      	beq.n	800bb5a <_dtoa_r+0x6ca>
 800bc22:	e7cf      	b.n	800bbc4 <_dtoa_r+0x734>
 800bc24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc26:	2a00      	cmp	r2, #0
 800bc28:	d100      	bne.n	800bc2c <_dtoa_r+0x79c>
 800bc2a:	e082      	b.n	800bd32 <_dtoa_r+0x8a2>
 800bc2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bc2e:	2a01      	cmp	r2, #1
 800bc30:	dc66      	bgt.n	800bd00 <_dtoa_r+0x870>
 800bc32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bc34:	2a00      	cmp	r2, #0
 800bc36:	d05f      	beq.n	800bcf8 <_dtoa_r+0x868>
 800bc38:	4aa3      	ldr	r2, [pc, #652]	; (800bec8 <_dtoa_r+0xa38>)
 800bc3a:	189b      	adds	r3, r3, r2
 800bc3c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800bc3e:	9c08      	ldr	r4, [sp, #32]
 800bc40:	9a08      	ldr	r2, [sp, #32]
 800bc42:	2101      	movs	r1, #1
 800bc44:	18d2      	adds	r2, r2, r3
 800bc46:	9208      	str	r2, [sp, #32]
 800bc48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc4a:	0038      	movs	r0, r7
 800bc4c:	18d3      	adds	r3, r2, r3
 800bc4e:	930d      	str	r3, [sp, #52]	; 0x34
 800bc50:	f000 fb72 	bl	800c338 <__i2b>
 800bc54:	0005      	movs	r5, r0
 800bc56:	2c00      	cmp	r4, #0
 800bc58:	dd0e      	ble.n	800bc78 <_dtoa_r+0x7e8>
 800bc5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	dd0b      	ble.n	800bc78 <_dtoa_r+0x7e8>
 800bc60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc62:	0023      	movs	r3, r4
 800bc64:	4294      	cmp	r4, r2
 800bc66:	dd00      	ble.n	800bc6a <_dtoa_r+0x7da>
 800bc68:	0013      	movs	r3, r2
 800bc6a:	9a08      	ldr	r2, [sp, #32]
 800bc6c:	1ae4      	subs	r4, r4, r3
 800bc6e:	1ad2      	subs	r2, r2, r3
 800bc70:	9208      	str	r2, [sp, #32]
 800bc72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	930d      	str	r3, [sp, #52]	; 0x34
 800bc78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d01f      	beq.n	800bcbe <_dtoa_r+0x82e>
 800bc7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d05a      	beq.n	800bd3a <_dtoa_r+0x8aa>
 800bc84:	2e00      	cmp	r6, #0
 800bc86:	dd11      	ble.n	800bcac <_dtoa_r+0x81c>
 800bc88:	0029      	movs	r1, r5
 800bc8a:	0032      	movs	r2, r6
 800bc8c:	0038      	movs	r0, r7
 800bc8e:	f000 fc19 	bl	800c4c4 <__pow5mult>
 800bc92:	9a04      	ldr	r2, [sp, #16]
 800bc94:	0001      	movs	r1, r0
 800bc96:	0005      	movs	r5, r0
 800bc98:	0038      	movs	r0, r7
 800bc9a:	f000 fb63 	bl	800c364 <__multiply>
 800bc9e:	9904      	ldr	r1, [sp, #16]
 800bca0:	9007      	str	r0, [sp, #28]
 800bca2:	0038      	movs	r0, r7
 800bca4:	f000 fa98 	bl	800c1d8 <_Bfree>
 800bca8:	9b07      	ldr	r3, [sp, #28]
 800bcaa:	9304      	str	r3, [sp, #16]
 800bcac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcae:	1b9a      	subs	r2, r3, r6
 800bcb0:	42b3      	cmp	r3, r6
 800bcb2:	d004      	beq.n	800bcbe <_dtoa_r+0x82e>
 800bcb4:	0038      	movs	r0, r7
 800bcb6:	9904      	ldr	r1, [sp, #16]
 800bcb8:	f000 fc04 	bl	800c4c4 <__pow5mult>
 800bcbc:	9004      	str	r0, [sp, #16]
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	0038      	movs	r0, r7
 800bcc2:	f000 fb39 	bl	800c338 <__i2b>
 800bcc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcc8:	0006      	movs	r6, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	dd37      	ble.n	800bd3e <_dtoa_r+0x8ae>
 800bcce:	001a      	movs	r2, r3
 800bcd0:	0001      	movs	r1, r0
 800bcd2:	0038      	movs	r0, r7
 800bcd4:	f000 fbf6 	bl	800c4c4 <__pow5mult>
 800bcd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bcda:	0006      	movs	r6, r0
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	dd33      	ble.n	800bd48 <_dtoa_r+0x8b8>
 800bce0:	2300      	movs	r3, #0
 800bce2:	9307      	str	r3, [sp, #28]
 800bce4:	6933      	ldr	r3, [r6, #16]
 800bce6:	3303      	adds	r3, #3
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	18f3      	adds	r3, r6, r3
 800bcec:	6858      	ldr	r0, [r3, #4]
 800bcee:	f000 fadb 	bl	800c2a8 <__hi0bits>
 800bcf2:	2320      	movs	r3, #32
 800bcf4:	1a18      	subs	r0, r3, r0
 800bcf6:	e03f      	b.n	800bd78 <_dtoa_r+0x8e8>
 800bcf8:	2336      	movs	r3, #54	; 0x36
 800bcfa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bcfc:	1a9b      	subs	r3, r3, r2
 800bcfe:	e79d      	b.n	800bc3c <_dtoa_r+0x7ac>
 800bd00:	9b06      	ldr	r3, [sp, #24]
 800bd02:	1e5e      	subs	r6, r3, #1
 800bd04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd06:	42b3      	cmp	r3, r6
 800bd08:	db08      	blt.n	800bd1c <_dtoa_r+0x88c>
 800bd0a:	1b9e      	subs	r6, r3, r6
 800bd0c:	9b06      	ldr	r3, [sp, #24]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	da0c      	bge.n	800bd2c <_dtoa_r+0x89c>
 800bd12:	9b08      	ldr	r3, [sp, #32]
 800bd14:	9a06      	ldr	r2, [sp, #24]
 800bd16:	1a9c      	subs	r4, r3, r2
 800bd18:	2300      	movs	r3, #0
 800bd1a:	e791      	b.n	800bc40 <_dtoa_r+0x7b0>
 800bd1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd20:	1af3      	subs	r3, r6, r3
 800bd22:	18d3      	adds	r3, r2, r3
 800bd24:	960e      	str	r6, [sp, #56]	; 0x38
 800bd26:	9314      	str	r3, [sp, #80]	; 0x50
 800bd28:	2600      	movs	r6, #0
 800bd2a:	e7ef      	b.n	800bd0c <_dtoa_r+0x87c>
 800bd2c:	9c08      	ldr	r4, [sp, #32]
 800bd2e:	9b06      	ldr	r3, [sp, #24]
 800bd30:	e786      	b.n	800bc40 <_dtoa_r+0x7b0>
 800bd32:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800bd34:	9c08      	ldr	r4, [sp, #32]
 800bd36:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bd38:	e78d      	b.n	800bc56 <_dtoa_r+0x7c6>
 800bd3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd3c:	e7ba      	b.n	800bcb4 <_dtoa_r+0x824>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	9307      	str	r3, [sp, #28]
 800bd42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	dc13      	bgt.n	800bd70 <_dtoa_r+0x8e0>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9307      	str	r3, [sp, #28]
 800bd4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10e      	bne.n	800bd70 <_dtoa_r+0x8e0>
 800bd52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd54:	031b      	lsls	r3, r3, #12
 800bd56:	d10b      	bne.n	800bd70 <_dtoa_r+0x8e0>
 800bd58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bd5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd5c:	4213      	tst	r3, r2
 800bd5e:	d007      	beq.n	800bd70 <_dtoa_r+0x8e0>
 800bd60:	9b08      	ldr	r3, [sp, #32]
 800bd62:	3301      	adds	r3, #1
 800bd64:	9308      	str	r3, [sp, #32]
 800bd66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd68:	3301      	adds	r3, #1
 800bd6a:	930d      	str	r3, [sp, #52]	; 0x34
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	9307      	str	r3, [sp, #28]
 800bd70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd72:	2001      	movs	r0, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1b5      	bne.n	800bce4 <_dtoa_r+0x854>
 800bd78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd7a:	221f      	movs	r2, #31
 800bd7c:	1818      	adds	r0, r3, r0
 800bd7e:	0003      	movs	r3, r0
 800bd80:	4013      	ands	r3, r2
 800bd82:	4210      	tst	r0, r2
 800bd84:	d046      	beq.n	800be14 <_dtoa_r+0x984>
 800bd86:	3201      	adds	r2, #1
 800bd88:	1ad2      	subs	r2, r2, r3
 800bd8a:	2a04      	cmp	r2, #4
 800bd8c:	dd3f      	ble.n	800be0e <_dtoa_r+0x97e>
 800bd8e:	221c      	movs	r2, #28
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	9a08      	ldr	r2, [sp, #32]
 800bd94:	18e4      	adds	r4, r4, r3
 800bd96:	18d2      	adds	r2, r2, r3
 800bd98:	9208      	str	r2, [sp, #32]
 800bd9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd9c:	18d3      	adds	r3, r2, r3
 800bd9e:	930d      	str	r3, [sp, #52]	; 0x34
 800bda0:	9b08      	ldr	r3, [sp, #32]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	dd05      	ble.n	800bdb2 <_dtoa_r+0x922>
 800bda6:	001a      	movs	r2, r3
 800bda8:	0038      	movs	r0, r7
 800bdaa:	9904      	ldr	r1, [sp, #16]
 800bdac:	f000 fbe6 	bl	800c57c <__lshift>
 800bdb0:	9004      	str	r0, [sp, #16]
 800bdb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	dd05      	ble.n	800bdc4 <_dtoa_r+0x934>
 800bdb8:	0031      	movs	r1, r6
 800bdba:	001a      	movs	r2, r3
 800bdbc:	0038      	movs	r0, r7
 800bdbe:	f000 fbdd 	bl	800c57c <__lshift>
 800bdc2:	0006      	movs	r6, r0
 800bdc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d026      	beq.n	800be18 <_dtoa_r+0x988>
 800bdca:	0031      	movs	r1, r6
 800bdcc:	9804      	ldr	r0, [sp, #16]
 800bdce:	f000 fc45 	bl	800c65c <__mcmp>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	da20      	bge.n	800be18 <_dtoa_r+0x988>
 800bdd6:	9b02      	ldr	r3, [sp, #8]
 800bdd8:	220a      	movs	r2, #10
 800bdda:	3b01      	subs	r3, #1
 800bddc:	9302      	str	r3, [sp, #8]
 800bdde:	0038      	movs	r0, r7
 800bde0:	2300      	movs	r3, #0
 800bde2:	9904      	ldr	r1, [sp, #16]
 800bde4:	f000 fa1c 	bl	800c220 <__multadd>
 800bde8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdea:	9004      	str	r0, [sp, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d100      	bne.n	800bdf2 <_dtoa_r+0x962>
 800bdf0:	e160      	b.n	800c0b4 <_dtoa_r+0xc24>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	0029      	movs	r1, r5
 800bdf6:	220a      	movs	r2, #10
 800bdf8:	0038      	movs	r0, r7
 800bdfa:	f000 fa11 	bl	800c220 <__multadd>
 800bdfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be00:	0005      	movs	r5, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	dc47      	bgt.n	800be96 <_dtoa_r+0xa06>
 800be06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be08:	2b02      	cmp	r3, #2
 800be0a:	dc0d      	bgt.n	800be28 <_dtoa_r+0x998>
 800be0c:	e043      	b.n	800be96 <_dtoa_r+0xa06>
 800be0e:	2a04      	cmp	r2, #4
 800be10:	d0c6      	beq.n	800bda0 <_dtoa_r+0x910>
 800be12:	0013      	movs	r3, r2
 800be14:	331c      	adds	r3, #28
 800be16:	e7bc      	b.n	800bd92 <_dtoa_r+0x902>
 800be18:	9b06      	ldr	r3, [sp, #24]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	dc35      	bgt.n	800be8a <_dtoa_r+0x9fa>
 800be1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be20:	2b02      	cmp	r3, #2
 800be22:	dd32      	ble.n	800be8a <_dtoa_r+0x9fa>
 800be24:	9b06      	ldr	r3, [sp, #24]
 800be26:	930c      	str	r3, [sp, #48]	; 0x30
 800be28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10c      	bne.n	800be48 <_dtoa_r+0x9b8>
 800be2e:	0031      	movs	r1, r6
 800be30:	2205      	movs	r2, #5
 800be32:	0038      	movs	r0, r7
 800be34:	f000 f9f4 	bl	800c220 <__multadd>
 800be38:	0006      	movs	r6, r0
 800be3a:	0001      	movs	r1, r0
 800be3c:	9804      	ldr	r0, [sp, #16]
 800be3e:	f000 fc0d 	bl	800c65c <__mcmp>
 800be42:	2800      	cmp	r0, #0
 800be44:	dd00      	ble.n	800be48 <_dtoa_r+0x9b8>
 800be46:	e59f      	b.n	800b988 <_dtoa_r+0x4f8>
 800be48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be4a:	43db      	mvns	r3, r3
 800be4c:	9302      	str	r3, [sp, #8]
 800be4e:	9b05      	ldr	r3, [sp, #20]
 800be50:	9307      	str	r3, [sp, #28]
 800be52:	2400      	movs	r4, #0
 800be54:	0031      	movs	r1, r6
 800be56:	0038      	movs	r0, r7
 800be58:	f000 f9be 	bl	800c1d8 <_Bfree>
 800be5c:	2d00      	cmp	r5, #0
 800be5e:	d100      	bne.n	800be62 <_dtoa_r+0x9d2>
 800be60:	e6b0      	b.n	800bbc4 <_dtoa_r+0x734>
 800be62:	2c00      	cmp	r4, #0
 800be64:	d005      	beq.n	800be72 <_dtoa_r+0x9e2>
 800be66:	42ac      	cmp	r4, r5
 800be68:	d003      	beq.n	800be72 <_dtoa_r+0x9e2>
 800be6a:	0021      	movs	r1, r4
 800be6c:	0038      	movs	r0, r7
 800be6e:	f000 f9b3 	bl	800c1d8 <_Bfree>
 800be72:	0029      	movs	r1, r5
 800be74:	0038      	movs	r0, r7
 800be76:	f000 f9af 	bl	800c1d8 <_Bfree>
 800be7a:	e6a3      	b.n	800bbc4 <_dtoa_r+0x734>
 800be7c:	2600      	movs	r6, #0
 800be7e:	0035      	movs	r5, r6
 800be80:	e7e2      	b.n	800be48 <_dtoa_r+0x9b8>
 800be82:	9602      	str	r6, [sp, #8]
 800be84:	9e07      	ldr	r6, [sp, #28]
 800be86:	0035      	movs	r5, r6
 800be88:	e57e      	b.n	800b988 <_dtoa_r+0x4f8>
 800be8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d100      	bne.n	800be92 <_dtoa_r+0xa02>
 800be90:	e0c8      	b.n	800c024 <_dtoa_r+0xb94>
 800be92:	9b06      	ldr	r3, [sp, #24]
 800be94:	930c      	str	r3, [sp, #48]	; 0x30
 800be96:	2c00      	cmp	r4, #0
 800be98:	dd05      	ble.n	800bea6 <_dtoa_r+0xa16>
 800be9a:	0029      	movs	r1, r5
 800be9c:	0022      	movs	r2, r4
 800be9e:	0038      	movs	r0, r7
 800bea0:	f000 fb6c 	bl	800c57c <__lshift>
 800bea4:	0005      	movs	r5, r0
 800bea6:	9b07      	ldr	r3, [sp, #28]
 800bea8:	0028      	movs	r0, r5
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d01f      	beq.n	800beee <_dtoa_r+0xa5e>
 800beae:	0038      	movs	r0, r7
 800beb0:	6869      	ldr	r1, [r5, #4]
 800beb2:	f000 f94d 	bl	800c150 <_Balloc>
 800beb6:	1e04      	subs	r4, r0, #0
 800beb8:	d10c      	bne.n	800bed4 <_dtoa_r+0xa44>
 800beba:	0002      	movs	r2, r0
 800bebc:	4b03      	ldr	r3, [pc, #12]	; (800becc <_dtoa_r+0xa3c>)
 800bebe:	4904      	ldr	r1, [pc, #16]	; (800bed0 <_dtoa_r+0xa40>)
 800bec0:	f7ff fafb 	bl	800b4ba <_dtoa_r+0x2a>
 800bec4:	40240000 	.word	0x40240000
 800bec8:	00000433 	.word	0x00000433
 800becc:	0800da90 	.word	0x0800da90
 800bed0:	000002ea 	.word	0x000002ea
 800bed4:	0029      	movs	r1, r5
 800bed6:	692b      	ldr	r3, [r5, #16]
 800bed8:	310c      	adds	r1, #12
 800beda:	1c9a      	adds	r2, r3, #2
 800bedc:	0092      	lsls	r2, r2, #2
 800bede:	300c      	adds	r0, #12
 800bee0:	f7fe fcc6 	bl	800a870 <memcpy>
 800bee4:	2201      	movs	r2, #1
 800bee6:	0021      	movs	r1, r4
 800bee8:	0038      	movs	r0, r7
 800beea:	f000 fb47 	bl	800c57c <__lshift>
 800beee:	002c      	movs	r4, r5
 800bef0:	0005      	movs	r5, r0
 800bef2:	9b05      	ldr	r3, [sp, #20]
 800bef4:	9308      	str	r3, [sp, #32]
 800bef6:	0031      	movs	r1, r6
 800bef8:	9804      	ldr	r0, [sp, #16]
 800befa:	f7ff fa3d 	bl	800b378 <quorem>
 800befe:	0003      	movs	r3, r0
 800bf00:	0021      	movs	r1, r4
 800bf02:	3330      	adds	r3, #48	; 0x30
 800bf04:	900e      	str	r0, [sp, #56]	; 0x38
 800bf06:	9804      	ldr	r0, [sp, #16]
 800bf08:	9306      	str	r3, [sp, #24]
 800bf0a:	f000 fba7 	bl	800c65c <__mcmp>
 800bf0e:	002a      	movs	r2, r5
 800bf10:	900f      	str	r0, [sp, #60]	; 0x3c
 800bf12:	0031      	movs	r1, r6
 800bf14:	0038      	movs	r0, r7
 800bf16:	f000 fbbd 	bl	800c694 <__mdiff>
 800bf1a:	68c3      	ldr	r3, [r0, #12]
 800bf1c:	9007      	str	r0, [sp, #28]
 800bf1e:	9310      	str	r3, [sp, #64]	; 0x40
 800bf20:	2301      	movs	r3, #1
 800bf22:	930d      	str	r3, [sp, #52]	; 0x34
 800bf24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d104      	bne.n	800bf34 <_dtoa_r+0xaa4>
 800bf2a:	0001      	movs	r1, r0
 800bf2c:	9804      	ldr	r0, [sp, #16]
 800bf2e:	f000 fb95 	bl	800c65c <__mcmp>
 800bf32:	900d      	str	r0, [sp, #52]	; 0x34
 800bf34:	0038      	movs	r0, r7
 800bf36:	9907      	ldr	r1, [sp, #28]
 800bf38:	f000 f94e 	bl	800c1d8 <_Bfree>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf42:	4018      	ands	r0, r3
 800bf44:	9b08      	ldr	r3, [sp, #32]
 800bf46:	3301      	adds	r3, #1
 800bf48:	9307      	str	r3, [sp, #28]
 800bf4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	4303      	orrs	r3, r0
 800bf50:	d10c      	bne.n	800bf6c <_dtoa_r+0xadc>
 800bf52:	9b06      	ldr	r3, [sp, #24]
 800bf54:	2b39      	cmp	r3, #57	; 0x39
 800bf56:	d025      	beq.n	800bfa4 <_dtoa_r+0xb14>
 800bf58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	dd02      	ble.n	800bf64 <_dtoa_r+0xad4>
 800bf5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf60:	3331      	adds	r3, #49	; 0x31
 800bf62:	9306      	str	r3, [sp, #24]
 800bf64:	9b08      	ldr	r3, [sp, #32]
 800bf66:	9a06      	ldr	r2, [sp, #24]
 800bf68:	701a      	strb	r2, [r3, #0]
 800bf6a:	e773      	b.n	800be54 <_dtoa_r+0x9c4>
 800bf6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	db03      	blt.n	800bf7a <_dtoa_r+0xaea>
 800bf72:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bf74:	4313      	orrs	r3, r2
 800bf76:	4303      	orrs	r3, r0
 800bf78:	d11f      	bne.n	800bfba <_dtoa_r+0xb2a>
 800bf7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	ddf1      	ble.n	800bf64 <_dtoa_r+0xad4>
 800bf80:	9904      	ldr	r1, [sp, #16]
 800bf82:	2201      	movs	r2, #1
 800bf84:	0038      	movs	r0, r7
 800bf86:	f000 faf9 	bl	800c57c <__lshift>
 800bf8a:	0031      	movs	r1, r6
 800bf8c:	9004      	str	r0, [sp, #16]
 800bf8e:	f000 fb65 	bl	800c65c <__mcmp>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	dc03      	bgt.n	800bf9e <_dtoa_r+0xb0e>
 800bf96:	d1e5      	bne.n	800bf64 <_dtoa_r+0xad4>
 800bf98:	9b06      	ldr	r3, [sp, #24]
 800bf9a:	07db      	lsls	r3, r3, #31
 800bf9c:	d5e2      	bpl.n	800bf64 <_dtoa_r+0xad4>
 800bf9e:	9b06      	ldr	r3, [sp, #24]
 800bfa0:	2b39      	cmp	r3, #57	; 0x39
 800bfa2:	d1dc      	bne.n	800bf5e <_dtoa_r+0xace>
 800bfa4:	2339      	movs	r3, #57	; 0x39
 800bfa6:	9a08      	ldr	r2, [sp, #32]
 800bfa8:	7013      	strb	r3, [r2, #0]
 800bfaa:	9b07      	ldr	r3, [sp, #28]
 800bfac:	9307      	str	r3, [sp, #28]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	781a      	ldrb	r2, [r3, #0]
 800bfb2:	2a39      	cmp	r2, #57	; 0x39
 800bfb4:	d06c      	beq.n	800c090 <_dtoa_r+0xc00>
 800bfb6:	3201      	adds	r2, #1
 800bfb8:	e7d6      	b.n	800bf68 <_dtoa_r+0xad8>
 800bfba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	dd07      	ble.n	800bfd0 <_dtoa_r+0xb40>
 800bfc0:	9b06      	ldr	r3, [sp, #24]
 800bfc2:	2b39      	cmp	r3, #57	; 0x39
 800bfc4:	d0ee      	beq.n	800bfa4 <_dtoa_r+0xb14>
 800bfc6:	9b06      	ldr	r3, [sp, #24]
 800bfc8:	9a08      	ldr	r2, [sp, #32]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	7013      	strb	r3, [r2, #0]
 800bfce:	e741      	b.n	800be54 <_dtoa_r+0x9c4>
 800bfd0:	9b08      	ldr	r3, [sp, #32]
 800bfd2:	9a06      	ldr	r2, [sp, #24]
 800bfd4:	701a      	strb	r2, [r3, #0]
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	9a05      	ldr	r2, [sp, #20]
 800bfda:	1a9b      	subs	r3, r3, r2
 800bfdc:	9a08      	ldr	r2, [sp, #32]
 800bfde:	189b      	adds	r3, r3, r2
 800bfe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d03e      	beq.n	800c064 <_dtoa_r+0xbd4>
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	220a      	movs	r2, #10
 800bfea:	9904      	ldr	r1, [sp, #16]
 800bfec:	0038      	movs	r0, r7
 800bfee:	f000 f917 	bl	800c220 <__multadd>
 800bff2:	2300      	movs	r3, #0
 800bff4:	9004      	str	r0, [sp, #16]
 800bff6:	220a      	movs	r2, #10
 800bff8:	0021      	movs	r1, r4
 800bffa:	0038      	movs	r0, r7
 800bffc:	42ac      	cmp	r4, r5
 800bffe:	d106      	bne.n	800c00e <_dtoa_r+0xb7e>
 800c000:	f000 f90e 	bl	800c220 <__multadd>
 800c004:	0004      	movs	r4, r0
 800c006:	0005      	movs	r5, r0
 800c008:	9b07      	ldr	r3, [sp, #28]
 800c00a:	9308      	str	r3, [sp, #32]
 800c00c:	e773      	b.n	800bef6 <_dtoa_r+0xa66>
 800c00e:	f000 f907 	bl	800c220 <__multadd>
 800c012:	0029      	movs	r1, r5
 800c014:	0004      	movs	r4, r0
 800c016:	2300      	movs	r3, #0
 800c018:	220a      	movs	r2, #10
 800c01a:	0038      	movs	r0, r7
 800c01c:	f000 f900 	bl	800c220 <__multadd>
 800c020:	0005      	movs	r5, r0
 800c022:	e7f1      	b.n	800c008 <_dtoa_r+0xb78>
 800c024:	9b06      	ldr	r3, [sp, #24]
 800c026:	930c      	str	r3, [sp, #48]	; 0x30
 800c028:	2400      	movs	r4, #0
 800c02a:	0031      	movs	r1, r6
 800c02c:	9804      	ldr	r0, [sp, #16]
 800c02e:	f7ff f9a3 	bl	800b378 <quorem>
 800c032:	9b05      	ldr	r3, [sp, #20]
 800c034:	3030      	adds	r0, #48	; 0x30
 800c036:	5518      	strb	r0, [r3, r4]
 800c038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c03a:	3401      	adds	r4, #1
 800c03c:	9006      	str	r0, [sp, #24]
 800c03e:	42a3      	cmp	r3, r4
 800c040:	dd07      	ble.n	800c052 <_dtoa_r+0xbc2>
 800c042:	2300      	movs	r3, #0
 800c044:	220a      	movs	r2, #10
 800c046:	0038      	movs	r0, r7
 800c048:	9904      	ldr	r1, [sp, #16]
 800c04a:	f000 f8e9 	bl	800c220 <__multadd>
 800c04e:	9004      	str	r0, [sp, #16]
 800c050:	e7eb      	b.n	800c02a <_dtoa_r+0xb9a>
 800c052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c054:	2001      	movs	r0, #1
 800c056:	2b00      	cmp	r3, #0
 800c058:	dd00      	ble.n	800c05c <_dtoa_r+0xbcc>
 800c05a:	0018      	movs	r0, r3
 800c05c:	2400      	movs	r4, #0
 800c05e:	9b05      	ldr	r3, [sp, #20]
 800c060:	181b      	adds	r3, r3, r0
 800c062:	9307      	str	r3, [sp, #28]
 800c064:	9904      	ldr	r1, [sp, #16]
 800c066:	2201      	movs	r2, #1
 800c068:	0038      	movs	r0, r7
 800c06a:	f000 fa87 	bl	800c57c <__lshift>
 800c06e:	0031      	movs	r1, r6
 800c070:	9004      	str	r0, [sp, #16]
 800c072:	f000 faf3 	bl	800c65c <__mcmp>
 800c076:	2800      	cmp	r0, #0
 800c078:	dc97      	bgt.n	800bfaa <_dtoa_r+0xb1a>
 800c07a:	d102      	bne.n	800c082 <_dtoa_r+0xbf2>
 800c07c:	9b06      	ldr	r3, [sp, #24]
 800c07e:	07db      	lsls	r3, r3, #31
 800c080:	d493      	bmi.n	800bfaa <_dtoa_r+0xb1a>
 800c082:	9b07      	ldr	r3, [sp, #28]
 800c084:	9307      	str	r3, [sp, #28]
 800c086:	3b01      	subs	r3, #1
 800c088:	781a      	ldrb	r2, [r3, #0]
 800c08a:	2a30      	cmp	r2, #48	; 0x30
 800c08c:	d0fa      	beq.n	800c084 <_dtoa_r+0xbf4>
 800c08e:	e6e1      	b.n	800be54 <_dtoa_r+0x9c4>
 800c090:	9a05      	ldr	r2, [sp, #20]
 800c092:	429a      	cmp	r2, r3
 800c094:	d18a      	bne.n	800bfac <_dtoa_r+0xb1c>
 800c096:	9b02      	ldr	r3, [sp, #8]
 800c098:	3301      	adds	r3, #1
 800c09a:	9302      	str	r3, [sp, #8]
 800c09c:	2331      	movs	r3, #49	; 0x31
 800c09e:	e795      	b.n	800bfcc <_dtoa_r+0xb3c>
 800c0a0:	4b08      	ldr	r3, [pc, #32]	; (800c0c4 <_dtoa_r+0xc34>)
 800c0a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c0a4:	9305      	str	r3, [sp, #20]
 800c0a6:	4b08      	ldr	r3, [pc, #32]	; (800c0c8 <_dtoa_r+0xc38>)
 800c0a8:	2a00      	cmp	r2, #0
 800c0aa:	d001      	beq.n	800c0b0 <_dtoa_r+0xc20>
 800c0ac:	f7ff fa3b 	bl	800b526 <_dtoa_r+0x96>
 800c0b0:	f7ff fa3b 	bl	800b52a <_dtoa_r+0x9a>
 800c0b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	dcb6      	bgt.n	800c028 <_dtoa_r+0xb98>
 800c0ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	dd00      	ble.n	800c0c2 <_dtoa_r+0xc32>
 800c0c0:	e6b2      	b.n	800be28 <_dtoa_r+0x998>
 800c0c2:	e7b1      	b.n	800c028 <_dtoa_r+0xb98>
 800c0c4:	0800da0d 	.word	0x0800da0d
 800c0c8:	0800da15 	.word	0x0800da15

0800c0cc <fiprintf>:
 800c0cc:	b40e      	push	{r1, r2, r3}
 800c0ce:	b503      	push	{r0, r1, lr}
 800c0d0:	0001      	movs	r1, r0
 800c0d2:	ab03      	add	r3, sp, #12
 800c0d4:	4804      	ldr	r0, [pc, #16]	; (800c0e8 <fiprintf+0x1c>)
 800c0d6:	cb04      	ldmia	r3!, {r2}
 800c0d8:	6800      	ldr	r0, [r0, #0]
 800c0da:	9301      	str	r3, [sp, #4]
 800c0dc:	f000 fd6e 	bl	800cbbc <_vfiprintf_r>
 800c0e0:	b002      	add	sp, #8
 800c0e2:	bc08      	pop	{r3}
 800c0e4:	b003      	add	sp, #12
 800c0e6:	4718      	bx	r3
 800c0e8:	2000000c 	.word	0x2000000c

0800c0ec <_localeconv_r>:
 800c0ec:	4800      	ldr	r0, [pc, #0]	; (800c0f0 <_localeconv_r+0x4>)
 800c0ee:	4770      	bx	lr
 800c0f0:	20000160 	.word	0x20000160

0800c0f4 <__ascii_mbtowc>:
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	2900      	cmp	r1, #0
 800c0f8:	d100      	bne.n	800c0fc <__ascii_mbtowc+0x8>
 800c0fa:	a901      	add	r1, sp, #4
 800c0fc:	1e10      	subs	r0, r2, #0
 800c0fe:	d006      	beq.n	800c10e <__ascii_mbtowc+0x1a>
 800c100:	2b00      	cmp	r3, #0
 800c102:	d006      	beq.n	800c112 <__ascii_mbtowc+0x1e>
 800c104:	7813      	ldrb	r3, [r2, #0]
 800c106:	600b      	str	r3, [r1, #0]
 800c108:	7810      	ldrb	r0, [r2, #0]
 800c10a:	1e43      	subs	r3, r0, #1
 800c10c:	4198      	sbcs	r0, r3
 800c10e:	b002      	add	sp, #8
 800c110:	4770      	bx	lr
 800c112:	2002      	movs	r0, #2
 800c114:	4240      	negs	r0, r0
 800c116:	e7fa      	b.n	800c10e <__ascii_mbtowc+0x1a>

0800c118 <memchr>:
 800c118:	b2c9      	uxtb	r1, r1
 800c11a:	1882      	adds	r2, r0, r2
 800c11c:	4290      	cmp	r0, r2
 800c11e:	d101      	bne.n	800c124 <memchr+0xc>
 800c120:	2000      	movs	r0, #0
 800c122:	4770      	bx	lr
 800c124:	7803      	ldrb	r3, [r0, #0]
 800c126:	428b      	cmp	r3, r1
 800c128:	d0fb      	beq.n	800c122 <memchr+0xa>
 800c12a:	3001      	adds	r0, #1
 800c12c:	e7f6      	b.n	800c11c <memchr+0x4>
	...

0800c130 <__malloc_lock>:
 800c130:	b510      	push	{r4, lr}
 800c132:	4802      	ldr	r0, [pc, #8]	; (800c13c <__malloc_lock+0xc>)
 800c134:	f001 f92f 	bl	800d396 <__retarget_lock_acquire_recursive>
 800c138:	bd10      	pop	{r4, pc}
 800c13a:	46c0      	nop			; (mov r8, r8)
 800c13c:	200005a4 	.word	0x200005a4

0800c140 <__malloc_unlock>:
 800c140:	b510      	push	{r4, lr}
 800c142:	4802      	ldr	r0, [pc, #8]	; (800c14c <__malloc_unlock+0xc>)
 800c144:	f001 f928 	bl	800d398 <__retarget_lock_release_recursive>
 800c148:	bd10      	pop	{r4, pc}
 800c14a:	46c0      	nop			; (mov r8, r8)
 800c14c:	200005a4 	.word	0x200005a4

0800c150 <_Balloc>:
 800c150:	b570      	push	{r4, r5, r6, lr}
 800c152:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c154:	0006      	movs	r6, r0
 800c156:	000c      	movs	r4, r1
 800c158:	2d00      	cmp	r5, #0
 800c15a:	d10e      	bne.n	800c17a <_Balloc+0x2a>
 800c15c:	2010      	movs	r0, #16
 800c15e:	f7fe fb7d 	bl	800a85c <malloc>
 800c162:	1e02      	subs	r2, r0, #0
 800c164:	6270      	str	r0, [r6, #36]	; 0x24
 800c166:	d104      	bne.n	800c172 <_Balloc+0x22>
 800c168:	2166      	movs	r1, #102	; 0x66
 800c16a:	4b19      	ldr	r3, [pc, #100]	; (800c1d0 <_Balloc+0x80>)
 800c16c:	4819      	ldr	r0, [pc, #100]	; (800c1d4 <_Balloc+0x84>)
 800c16e:	f7ff f8e5 	bl	800b33c <__assert_func>
 800c172:	6045      	str	r5, [r0, #4]
 800c174:	6085      	str	r5, [r0, #8]
 800c176:	6005      	str	r5, [r0, #0]
 800c178:	60c5      	str	r5, [r0, #12]
 800c17a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800c17c:	68eb      	ldr	r3, [r5, #12]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d013      	beq.n	800c1aa <_Balloc+0x5a>
 800c182:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c184:	00a2      	lsls	r2, r4, #2
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	189b      	adds	r3, r3, r2
 800c18a:	6818      	ldr	r0, [r3, #0]
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d118      	bne.n	800c1c2 <_Balloc+0x72>
 800c190:	2101      	movs	r1, #1
 800c192:	000d      	movs	r5, r1
 800c194:	40a5      	lsls	r5, r4
 800c196:	1d6a      	adds	r2, r5, #5
 800c198:	0030      	movs	r0, r6
 800c19a:	0092      	lsls	r2, r2, #2
 800c19c:	f000 fb76 	bl	800c88c <_calloc_r>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d00c      	beq.n	800c1be <_Balloc+0x6e>
 800c1a4:	6044      	str	r4, [r0, #4]
 800c1a6:	6085      	str	r5, [r0, #8]
 800c1a8:	e00d      	b.n	800c1c6 <_Balloc+0x76>
 800c1aa:	2221      	movs	r2, #33	; 0x21
 800c1ac:	2104      	movs	r1, #4
 800c1ae:	0030      	movs	r0, r6
 800c1b0:	f000 fb6c 	bl	800c88c <_calloc_r>
 800c1b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c1b6:	60e8      	str	r0, [r5, #12]
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1e1      	bne.n	800c182 <_Balloc+0x32>
 800c1be:	2000      	movs	r0, #0
 800c1c0:	bd70      	pop	{r4, r5, r6, pc}
 800c1c2:	6802      	ldr	r2, [r0, #0]
 800c1c4:	601a      	str	r2, [r3, #0]
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	6103      	str	r3, [r0, #16]
 800c1ca:	60c3      	str	r3, [r0, #12]
 800c1cc:	e7f8      	b.n	800c1c0 <_Balloc+0x70>
 800c1ce:	46c0      	nop			; (mov r8, r8)
 800c1d0:	0800da1a 	.word	0x0800da1a
 800c1d4:	0800daab 	.word	0x0800daab

0800c1d8 <_Bfree>:
 800c1d8:	b570      	push	{r4, r5, r6, lr}
 800c1da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c1dc:	0005      	movs	r5, r0
 800c1de:	000c      	movs	r4, r1
 800c1e0:	2e00      	cmp	r6, #0
 800c1e2:	d10e      	bne.n	800c202 <_Bfree+0x2a>
 800c1e4:	2010      	movs	r0, #16
 800c1e6:	f7fe fb39 	bl	800a85c <malloc>
 800c1ea:	1e02      	subs	r2, r0, #0
 800c1ec:	6268      	str	r0, [r5, #36]	; 0x24
 800c1ee:	d104      	bne.n	800c1fa <_Bfree+0x22>
 800c1f0:	218a      	movs	r1, #138	; 0x8a
 800c1f2:	4b09      	ldr	r3, [pc, #36]	; (800c218 <_Bfree+0x40>)
 800c1f4:	4809      	ldr	r0, [pc, #36]	; (800c21c <_Bfree+0x44>)
 800c1f6:	f7ff f8a1 	bl	800b33c <__assert_func>
 800c1fa:	6046      	str	r6, [r0, #4]
 800c1fc:	6086      	str	r6, [r0, #8]
 800c1fe:	6006      	str	r6, [r0, #0]
 800c200:	60c6      	str	r6, [r0, #12]
 800c202:	2c00      	cmp	r4, #0
 800c204:	d007      	beq.n	800c216 <_Bfree+0x3e>
 800c206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c208:	6862      	ldr	r2, [r4, #4]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	0092      	lsls	r2, r2, #2
 800c20e:	189b      	adds	r3, r3, r2
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	6022      	str	r2, [r4, #0]
 800c214:	601c      	str	r4, [r3, #0]
 800c216:	bd70      	pop	{r4, r5, r6, pc}
 800c218:	0800da1a 	.word	0x0800da1a
 800c21c:	0800daab 	.word	0x0800daab

0800c220 <__multadd>:
 800c220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c222:	000e      	movs	r6, r1
 800c224:	9001      	str	r0, [sp, #4]
 800c226:	000c      	movs	r4, r1
 800c228:	001d      	movs	r5, r3
 800c22a:	2000      	movs	r0, #0
 800c22c:	690f      	ldr	r7, [r1, #16]
 800c22e:	3614      	adds	r6, #20
 800c230:	6833      	ldr	r3, [r6, #0]
 800c232:	3001      	adds	r0, #1
 800c234:	b299      	uxth	r1, r3
 800c236:	4351      	muls	r1, r2
 800c238:	0c1b      	lsrs	r3, r3, #16
 800c23a:	4353      	muls	r3, r2
 800c23c:	1949      	adds	r1, r1, r5
 800c23e:	0c0d      	lsrs	r5, r1, #16
 800c240:	195b      	adds	r3, r3, r5
 800c242:	0c1d      	lsrs	r5, r3, #16
 800c244:	b289      	uxth	r1, r1
 800c246:	041b      	lsls	r3, r3, #16
 800c248:	185b      	adds	r3, r3, r1
 800c24a:	c608      	stmia	r6!, {r3}
 800c24c:	4287      	cmp	r7, r0
 800c24e:	dcef      	bgt.n	800c230 <__multadd+0x10>
 800c250:	2d00      	cmp	r5, #0
 800c252:	d022      	beq.n	800c29a <__multadd+0x7a>
 800c254:	68a3      	ldr	r3, [r4, #8]
 800c256:	42bb      	cmp	r3, r7
 800c258:	dc19      	bgt.n	800c28e <__multadd+0x6e>
 800c25a:	6863      	ldr	r3, [r4, #4]
 800c25c:	9801      	ldr	r0, [sp, #4]
 800c25e:	1c59      	adds	r1, r3, #1
 800c260:	f7ff ff76 	bl	800c150 <_Balloc>
 800c264:	1e06      	subs	r6, r0, #0
 800c266:	d105      	bne.n	800c274 <__multadd+0x54>
 800c268:	0002      	movs	r2, r0
 800c26a:	21b5      	movs	r1, #181	; 0xb5
 800c26c:	4b0c      	ldr	r3, [pc, #48]	; (800c2a0 <__multadd+0x80>)
 800c26e:	480d      	ldr	r0, [pc, #52]	; (800c2a4 <__multadd+0x84>)
 800c270:	f7ff f864 	bl	800b33c <__assert_func>
 800c274:	0021      	movs	r1, r4
 800c276:	6923      	ldr	r3, [r4, #16]
 800c278:	310c      	adds	r1, #12
 800c27a:	1c9a      	adds	r2, r3, #2
 800c27c:	0092      	lsls	r2, r2, #2
 800c27e:	300c      	adds	r0, #12
 800c280:	f7fe faf6 	bl	800a870 <memcpy>
 800c284:	0021      	movs	r1, r4
 800c286:	9801      	ldr	r0, [sp, #4]
 800c288:	f7ff ffa6 	bl	800c1d8 <_Bfree>
 800c28c:	0034      	movs	r4, r6
 800c28e:	1d3b      	adds	r3, r7, #4
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	18e3      	adds	r3, r4, r3
 800c294:	605d      	str	r5, [r3, #4]
 800c296:	1c7b      	adds	r3, r7, #1
 800c298:	6123      	str	r3, [r4, #16]
 800c29a:	0020      	movs	r0, r4
 800c29c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c29e:	46c0      	nop			; (mov r8, r8)
 800c2a0:	0800da90 	.word	0x0800da90
 800c2a4:	0800daab 	.word	0x0800daab

0800c2a8 <__hi0bits>:
 800c2a8:	0003      	movs	r3, r0
 800c2aa:	0c02      	lsrs	r2, r0, #16
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	4282      	cmp	r2, r0
 800c2b0:	d101      	bne.n	800c2b6 <__hi0bits+0xe>
 800c2b2:	041b      	lsls	r3, r3, #16
 800c2b4:	3010      	adds	r0, #16
 800c2b6:	0e1a      	lsrs	r2, r3, #24
 800c2b8:	d101      	bne.n	800c2be <__hi0bits+0x16>
 800c2ba:	3008      	adds	r0, #8
 800c2bc:	021b      	lsls	r3, r3, #8
 800c2be:	0f1a      	lsrs	r2, r3, #28
 800c2c0:	d101      	bne.n	800c2c6 <__hi0bits+0x1e>
 800c2c2:	3004      	adds	r0, #4
 800c2c4:	011b      	lsls	r3, r3, #4
 800c2c6:	0f9a      	lsrs	r2, r3, #30
 800c2c8:	d101      	bne.n	800c2ce <__hi0bits+0x26>
 800c2ca:	3002      	adds	r0, #2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	db03      	blt.n	800c2da <__hi0bits+0x32>
 800c2d2:	3001      	adds	r0, #1
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	d400      	bmi.n	800c2da <__hi0bits+0x32>
 800c2d8:	2020      	movs	r0, #32
 800c2da:	4770      	bx	lr

0800c2dc <__lo0bits>:
 800c2dc:	6803      	ldr	r3, [r0, #0]
 800c2de:	0002      	movs	r2, r0
 800c2e0:	2107      	movs	r1, #7
 800c2e2:	0018      	movs	r0, r3
 800c2e4:	4008      	ands	r0, r1
 800c2e6:	420b      	tst	r3, r1
 800c2e8:	d00d      	beq.n	800c306 <__lo0bits+0x2a>
 800c2ea:	3906      	subs	r1, #6
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	420b      	tst	r3, r1
 800c2f0:	d105      	bne.n	800c2fe <__lo0bits+0x22>
 800c2f2:	3002      	adds	r0, #2
 800c2f4:	4203      	tst	r3, r0
 800c2f6:	d003      	beq.n	800c300 <__lo0bits+0x24>
 800c2f8:	40cb      	lsrs	r3, r1
 800c2fa:	0008      	movs	r0, r1
 800c2fc:	6013      	str	r3, [r2, #0]
 800c2fe:	4770      	bx	lr
 800c300:	089b      	lsrs	r3, r3, #2
 800c302:	6013      	str	r3, [r2, #0]
 800c304:	e7fb      	b.n	800c2fe <__lo0bits+0x22>
 800c306:	b299      	uxth	r1, r3
 800c308:	2900      	cmp	r1, #0
 800c30a:	d101      	bne.n	800c310 <__lo0bits+0x34>
 800c30c:	2010      	movs	r0, #16
 800c30e:	0c1b      	lsrs	r3, r3, #16
 800c310:	b2d9      	uxtb	r1, r3
 800c312:	2900      	cmp	r1, #0
 800c314:	d101      	bne.n	800c31a <__lo0bits+0x3e>
 800c316:	3008      	adds	r0, #8
 800c318:	0a1b      	lsrs	r3, r3, #8
 800c31a:	0719      	lsls	r1, r3, #28
 800c31c:	d101      	bne.n	800c322 <__lo0bits+0x46>
 800c31e:	3004      	adds	r0, #4
 800c320:	091b      	lsrs	r3, r3, #4
 800c322:	0799      	lsls	r1, r3, #30
 800c324:	d101      	bne.n	800c32a <__lo0bits+0x4e>
 800c326:	3002      	adds	r0, #2
 800c328:	089b      	lsrs	r3, r3, #2
 800c32a:	07d9      	lsls	r1, r3, #31
 800c32c:	d4e9      	bmi.n	800c302 <__lo0bits+0x26>
 800c32e:	3001      	adds	r0, #1
 800c330:	085b      	lsrs	r3, r3, #1
 800c332:	d1e6      	bne.n	800c302 <__lo0bits+0x26>
 800c334:	2020      	movs	r0, #32
 800c336:	e7e2      	b.n	800c2fe <__lo0bits+0x22>

0800c338 <__i2b>:
 800c338:	b510      	push	{r4, lr}
 800c33a:	000c      	movs	r4, r1
 800c33c:	2101      	movs	r1, #1
 800c33e:	f7ff ff07 	bl	800c150 <_Balloc>
 800c342:	2800      	cmp	r0, #0
 800c344:	d106      	bne.n	800c354 <__i2b+0x1c>
 800c346:	21a0      	movs	r1, #160	; 0xa0
 800c348:	0002      	movs	r2, r0
 800c34a:	4b04      	ldr	r3, [pc, #16]	; (800c35c <__i2b+0x24>)
 800c34c:	4804      	ldr	r0, [pc, #16]	; (800c360 <__i2b+0x28>)
 800c34e:	0049      	lsls	r1, r1, #1
 800c350:	f7fe fff4 	bl	800b33c <__assert_func>
 800c354:	2301      	movs	r3, #1
 800c356:	6144      	str	r4, [r0, #20]
 800c358:	6103      	str	r3, [r0, #16]
 800c35a:	bd10      	pop	{r4, pc}
 800c35c:	0800da90 	.word	0x0800da90
 800c360:	0800daab 	.word	0x0800daab

0800c364 <__multiply>:
 800c364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c366:	690b      	ldr	r3, [r1, #16]
 800c368:	0014      	movs	r4, r2
 800c36a:	6912      	ldr	r2, [r2, #16]
 800c36c:	000d      	movs	r5, r1
 800c36e:	b089      	sub	sp, #36	; 0x24
 800c370:	4293      	cmp	r3, r2
 800c372:	da01      	bge.n	800c378 <__multiply+0x14>
 800c374:	0025      	movs	r5, r4
 800c376:	000c      	movs	r4, r1
 800c378:	692f      	ldr	r7, [r5, #16]
 800c37a:	6926      	ldr	r6, [r4, #16]
 800c37c:	6869      	ldr	r1, [r5, #4]
 800c37e:	19bb      	adds	r3, r7, r6
 800c380:	9302      	str	r3, [sp, #8]
 800c382:	68ab      	ldr	r3, [r5, #8]
 800c384:	19ba      	adds	r2, r7, r6
 800c386:	4293      	cmp	r3, r2
 800c388:	da00      	bge.n	800c38c <__multiply+0x28>
 800c38a:	3101      	adds	r1, #1
 800c38c:	f7ff fee0 	bl	800c150 <_Balloc>
 800c390:	9001      	str	r0, [sp, #4]
 800c392:	2800      	cmp	r0, #0
 800c394:	d106      	bne.n	800c3a4 <__multiply+0x40>
 800c396:	215e      	movs	r1, #94	; 0x5e
 800c398:	0002      	movs	r2, r0
 800c39a:	4b48      	ldr	r3, [pc, #288]	; (800c4bc <__multiply+0x158>)
 800c39c:	4848      	ldr	r0, [pc, #288]	; (800c4c0 <__multiply+0x15c>)
 800c39e:	31ff      	adds	r1, #255	; 0xff
 800c3a0:	f7fe ffcc 	bl	800b33c <__assert_func>
 800c3a4:	9b01      	ldr	r3, [sp, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	3314      	adds	r3, #20
 800c3aa:	469c      	mov	ip, r3
 800c3ac:	19bb      	adds	r3, r7, r6
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	4463      	add	r3, ip
 800c3b2:	9303      	str	r3, [sp, #12]
 800c3b4:	4663      	mov	r3, ip
 800c3b6:	9903      	ldr	r1, [sp, #12]
 800c3b8:	428b      	cmp	r3, r1
 800c3ba:	d32c      	bcc.n	800c416 <__multiply+0xb2>
 800c3bc:	002b      	movs	r3, r5
 800c3be:	0022      	movs	r2, r4
 800c3c0:	3314      	adds	r3, #20
 800c3c2:	00bf      	lsls	r7, r7, #2
 800c3c4:	3214      	adds	r2, #20
 800c3c6:	9306      	str	r3, [sp, #24]
 800c3c8:	00b6      	lsls	r6, r6, #2
 800c3ca:	19db      	adds	r3, r3, r7
 800c3cc:	9304      	str	r3, [sp, #16]
 800c3ce:	1993      	adds	r3, r2, r6
 800c3d0:	9307      	str	r3, [sp, #28]
 800c3d2:	2304      	movs	r3, #4
 800c3d4:	9305      	str	r3, [sp, #20]
 800c3d6:	002b      	movs	r3, r5
 800c3d8:	9904      	ldr	r1, [sp, #16]
 800c3da:	3315      	adds	r3, #21
 800c3dc:	9200      	str	r2, [sp, #0]
 800c3de:	4299      	cmp	r1, r3
 800c3e0:	d305      	bcc.n	800c3ee <__multiply+0x8a>
 800c3e2:	1b4b      	subs	r3, r1, r5
 800c3e4:	3b15      	subs	r3, #21
 800c3e6:	089b      	lsrs	r3, r3, #2
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	9305      	str	r3, [sp, #20]
 800c3ee:	9b07      	ldr	r3, [sp, #28]
 800c3f0:	9a00      	ldr	r2, [sp, #0]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d311      	bcc.n	800c41a <__multiply+0xb6>
 800c3f6:	9b02      	ldr	r3, [sp, #8]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	dd06      	ble.n	800c40a <__multiply+0xa6>
 800c3fc:	9b03      	ldr	r3, [sp, #12]
 800c3fe:	3b04      	subs	r3, #4
 800c400:	9303      	str	r3, [sp, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d054      	beq.n	800c4b4 <__multiply+0x150>
 800c40a:	9b01      	ldr	r3, [sp, #4]
 800c40c:	9a02      	ldr	r2, [sp, #8]
 800c40e:	0018      	movs	r0, r3
 800c410:	611a      	str	r2, [r3, #16]
 800c412:	b009      	add	sp, #36	; 0x24
 800c414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c416:	c304      	stmia	r3!, {r2}
 800c418:	e7cd      	b.n	800c3b6 <__multiply+0x52>
 800c41a:	9b00      	ldr	r3, [sp, #0]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	b298      	uxth	r0, r3
 800c420:	2800      	cmp	r0, #0
 800c422:	d01c      	beq.n	800c45e <__multiply+0xfa>
 800c424:	4667      	mov	r7, ip
 800c426:	2400      	movs	r4, #0
 800c428:	9e06      	ldr	r6, [sp, #24]
 800c42a:	ce02      	ldmia	r6!, {r1}
 800c42c:	683a      	ldr	r2, [r7, #0]
 800c42e:	b28b      	uxth	r3, r1
 800c430:	4343      	muls	r3, r0
 800c432:	0c09      	lsrs	r1, r1, #16
 800c434:	4341      	muls	r1, r0
 800c436:	b292      	uxth	r2, r2
 800c438:	189b      	adds	r3, r3, r2
 800c43a:	191b      	adds	r3, r3, r4
 800c43c:	000c      	movs	r4, r1
 800c43e:	683a      	ldr	r2, [r7, #0]
 800c440:	0c11      	lsrs	r1, r2, #16
 800c442:	1861      	adds	r1, r4, r1
 800c444:	0c1c      	lsrs	r4, r3, #16
 800c446:	1909      	adds	r1, r1, r4
 800c448:	0c0c      	lsrs	r4, r1, #16
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	0409      	lsls	r1, r1, #16
 800c44e:	430b      	orrs	r3, r1
 800c450:	c708      	stmia	r7!, {r3}
 800c452:	9b04      	ldr	r3, [sp, #16]
 800c454:	42b3      	cmp	r3, r6
 800c456:	d8e8      	bhi.n	800c42a <__multiply+0xc6>
 800c458:	4663      	mov	r3, ip
 800c45a:	9a05      	ldr	r2, [sp, #20]
 800c45c:	509c      	str	r4, [r3, r2]
 800c45e:	9b00      	ldr	r3, [sp, #0]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	0c1e      	lsrs	r6, r3, #16
 800c464:	d020      	beq.n	800c4a8 <__multiply+0x144>
 800c466:	4663      	mov	r3, ip
 800c468:	002c      	movs	r4, r5
 800c46a:	4660      	mov	r0, ip
 800c46c:	2700      	movs	r7, #0
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	3414      	adds	r4, #20
 800c472:	6822      	ldr	r2, [r4, #0]
 800c474:	b29b      	uxth	r3, r3
 800c476:	b291      	uxth	r1, r2
 800c478:	4371      	muls	r1, r6
 800c47a:	6802      	ldr	r2, [r0, #0]
 800c47c:	0c12      	lsrs	r2, r2, #16
 800c47e:	1889      	adds	r1, r1, r2
 800c480:	19cf      	adds	r7, r1, r7
 800c482:	0439      	lsls	r1, r7, #16
 800c484:	430b      	orrs	r3, r1
 800c486:	6003      	str	r3, [r0, #0]
 800c488:	cc02      	ldmia	r4!, {r1}
 800c48a:	6843      	ldr	r3, [r0, #4]
 800c48c:	0c09      	lsrs	r1, r1, #16
 800c48e:	4371      	muls	r1, r6
 800c490:	b29b      	uxth	r3, r3
 800c492:	0c3f      	lsrs	r7, r7, #16
 800c494:	18cb      	adds	r3, r1, r3
 800c496:	9a04      	ldr	r2, [sp, #16]
 800c498:	19db      	adds	r3, r3, r7
 800c49a:	0c1f      	lsrs	r7, r3, #16
 800c49c:	3004      	adds	r0, #4
 800c49e:	42a2      	cmp	r2, r4
 800c4a0:	d8e7      	bhi.n	800c472 <__multiply+0x10e>
 800c4a2:	4662      	mov	r2, ip
 800c4a4:	9905      	ldr	r1, [sp, #20]
 800c4a6:	5053      	str	r3, [r2, r1]
 800c4a8:	9b00      	ldr	r3, [sp, #0]
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	2304      	movs	r3, #4
 800c4b0:	449c      	add	ip, r3
 800c4b2:	e79c      	b.n	800c3ee <__multiply+0x8a>
 800c4b4:	9b02      	ldr	r3, [sp, #8]
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	9302      	str	r3, [sp, #8]
 800c4ba:	e79c      	b.n	800c3f6 <__multiply+0x92>
 800c4bc:	0800da90 	.word	0x0800da90
 800c4c0:	0800daab 	.word	0x0800daab

0800c4c4 <__pow5mult>:
 800c4c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4c6:	2303      	movs	r3, #3
 800c4c8:	0015      	movs	r5, r2
 800c4ca:	0007      	movs	r7, r0
 800c4cc:	000e      	movs	r6, r1
 800c4ce:	401a      	ands	r2, r3
 800c4d0:	421d      	tst	r5, r3
 800c4d2:	d008      	beq.n	800c4e6 <__pow5mult+0x22>
 800c4d4:	4925      	ldr	r1, [pc, #148]	; (800c56c <__pow5mult+0xa8>)
 800c4d6:	3a01      	subs	r2, #1
 800c4d8:	0092      	lsls	r2, r2, #2
 800c4da:	5852      	ldr	r2, [r2, r1]
 800c4dc:	2300      	movs	r3, #0
 800c4de:	0031      	movs	r1, r6
 800c4e0:	f7ff fe9e 	bl	800c220 <__multadd>
 800c4e4:	0006      	movs	r6, r0
 800c4e6:	10ad      	asrs	r5, r5, #2
 800c4e8:	d03d      	beq.n	800c566 <__pow5mult+0xa2>
 800c4ea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c4ec:	2c00      	cmp	r4, #0
 800c4ee:	d10f      	bne.n	800c510 <__pow5mult+0x4c>
 800c4f0:	2010      	movs	r0, #16
 800c4f2:	f7fe f9b3 	bl	800a85c <malloc>
 800c4f6:	1e02      	subs	r2, r0, #0
 800c4f8:	6278      	str	r0, [r7, #36]	; 0x24
 800c4fa:	d105      	bne.n	800c508 <__pow5mult+0x44>
 800c4fc:	21d7      	movs	r1, #215	; 0xd7
 800c4fe:	4b1c      	ldr	r3, [pc, #112]	; (800c570 <__pow5mult+0xac>)
 800c500:	481c      	ldr	r0, [pc, #112]	; (800c574 <__pow5mult+0xb0>)
 800c502:	0049      	lsls	r1, r1, #1
 800c504:	f7fe ff1a 	bl	800b33c <__assert_func>
 800c508:	6044      	str	r4, [r0, #4]
 800c50a:	6084      	str	r4, [r0, #8]
 800c50c:	6004      	str	r4, [r0, #0]
 800c50e:	60c4      	str	r4, [r0, #12]
 800c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c512:	689c      	ldr	r4, [r3, #8]
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	2c00      	cmp	r4, #0
 800c518:	d108      	bne.n	800c52c <__pow5mult+0x68>
 800c51a:	0038      	movs	r0, r7
 800c51c:	4916      	ldr	r1, [pc, #88]	; (800c578 <__pow5mult+0xb4>)
 800c51e:	f7ff ff0b 	bl	800c338 <__i2b>
 800c522:	9b01      	ldr	r3, [sp, #4]
 800c524:	0004      	movs	r4, r0
 800c526:	6098      	str	r0, [r3, #8]
 800c528:	2300      	movs	r3, #0
 800c52a:	6003      	str	r3, [r0, #0]
 800c52c:	2301      	movs	r3, #1
 800c52e:	421d      	tst	r5, r3
 800c530:	d00a      	beq.n	800c548 <__pow5mult+0x84>
 800c532:	0031      	movs	r1, r6
 800c534:	0022      	movs	r2, r4
 800c536:	0038      	movs	r0, r7
 800c538:	f7ff ff14 	bl	800c364 <__multiply>
 800c53c:	0031      	movs	r1, r6
 800c53e:	9001      	str	r0, [sp, #4]
 800c540:	0038      	movs	r0, r7
 800c542:	f7ff fe49 	bl	800c1d8 <_Bfree>
 800c546:	9e01      	ldr	r6, [sp, #4]
 800c548:	106d      	asrs	r5, r5, #1
 800c54a:	d00c      	beq.n	800c566 <__pow5mult+0xa2>
 800c54c:	6820      	ldr	r0, [r4, #0]
 800c54e:	2800      	cmp	r0, #0
 800c550:	d107      	bne.n	800c562 <__pow5mult+0x9e>
 800c552:	0022      	movs	r2, r4
 800c554:	0021      	movs	r1, r4
 800c556:	0038      	movs	r0, r7
 800c558:	f7ff ff04 	bl	800c364 <__multiply>
 800c55c:	2300      	movs	r3, #0
 800c55e:	6020      	str	r0, [r4, #0]
 800c560:	6003      	str	r3, [r0, #0]
 800c562:	0004      	movs	r4, r0
 800c564:	e7e2      	b.n	800c52c <__pow5mult+0x68>
 800c566:	0030      	movs	r0, r6
 800c568:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c56a:	46c0      	nop			; (mov r8, r8)
 800c56c:	0800dc00 	.word	0x0800dc00
 800c570:	0800da1a 	.word	0x0800da1a
 800c574:	0800daab 	.word	0x0800daab
 800c578:	00000271 	.word	0x00000271

0800c57c <__lshift>:
 800c57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c57e:	000c      	movs	r4, r1
 800c580:	0017      	movs	r7, r2
 800c582:	6923      	ldr	r3, [r4, #16]
 800c584:	1155      	asrs	r5, r2, #5
 800c586:	b087      	sub	sp, #28
 800c588:	18eb      	adds	r3, r5, r3
 800c58a:	9302      	str	r3, [sp, #8]
 800c58c:	3301      	adds	r3, #1
 800c58e:	9301      	str	r3, [sp, #4]
 800c590:	6849      	ldr	r1, [r1, #4]
 800c592:	68a3      	ldr	r3, [r4, #8]
 800c594:	9004      	str	r0, [sp, #16]
 800c596:	9a01      	ldr	r2, [sp, #4]
 800c598:	4293      	cmp	r3, r2
 800c59a:	db11      	blt.n	800c5c0 <__lshift+0x44>
 800c59c:	9804      	ldr	r0, [sp, #16]
 800c59e:	f7ff fdd7 	bl	800c150 <_Balloc>
 800c5a2:	0002      	movs	r2, r0
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	3214      	adds	r2, #20
 800c5a8:	0006      	movs	r6, r0
 800c5aa:	0011      	movs	r1, r2
 800c5ac:	9203      	str	r2, [sp, #12]
 800c5ae:	4298      	cmp	r0, r3
 800c5b0:	d10d      	bne.n	800c5ce <__lshift+0x52>
 800c5b2:	21da      	movs	r1, #218	; 0xda
 800c5b4:	0002      	movs	r2, r0
 800c5b6:	4b27      	ldr	r3, [pc, #156]	; (800c654 <__lshift+0xd8>)
 800c5b8:	4827      	ldr	r0, [pc, #156]	; (800c658 <__lshift+0xdc>)
 800c5ba:	31ff      	adds	r1, #255	; 0xff
 800c5bc:	f7fe febe 	bl	800b33c <__assert_func>
 800c5c0:	3101      	adds	r1, #1
 800c5c2:	005b      	lsls	r3, r3, #1
 800c5c4:	e7e7      	b.n	800c596 <__lshift+0x1a>
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	0098      	lsls	r0, r3, #2
 800c5ca:	500a      	str	r2, [r1, r0]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	42ab      	cmp	r3, r5
 800c5d0:	dbf9      	blt.n	800c5c6 <__lshift+0x4a>
 800c5d2:	43eb      	mvns	r3, r5
 800c5d4:	17db      	asrs	r3, r3, #31
 800c5d6:	401d      	ands	r5, r3
 800c5d8:	9b03      	ldr	r3, [sp, #12]
 800c5da:	00ad      	lsls	r5, r5, #2
 800c5dc:	211f      	movs	r1, #31
 800c5de:	0038      	movs	r0, r7
 800c5e0:	195d      	adds	r5, r3, r5
 800c5e2:	0023      	movs	r3, r4
 800c5e4:	6922      	ldr	r2, [r4, #16]
 800c5e6:	3314      	adds	r3, #20
 800c5e8:	0092      	lsls	r2, r2, #2
 800c5ea:	4008      	ands	r0, r1
 800c5ec:	4684      	mov	ip, r0
 800c5ee:	189a      	adds	r2, r3, r2
 800c5f0:	420f      	tst	r7, r1
 800c5f2:	d02a      	beq.n	800c64a <__lshift+0xce>
 800c5f4:	3101      	adds	r1, #1
 800c5f6:	1a09      	subs	r1, r1, r0
 800c5f8:	9105      	str	r1, [sp, #20]
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	9503      	str	r5, [sp, #12]
 800c5fe:	4667      	mov	r7, ip
 800c600:	6818      	ldr	r0, [r3, #0]
 800c602:	40b8      	lsls	r0, r7
 800c604:	4301      	orrs	r1, r0
 800c606:	9803      	ldr	r0, [sp, #12]
 800c608:	c002      	stmia	r0!, {r1}
 800c60a:	cb02      	ldmia	r3!, {r1}
 800c60c:	9003      	str	r0, [sp, #12]
 800c60e:	9805      	ldr	r0, [sp, #20]
 800c610:	40c1      	lsrs	r1, r0
 800c612:	429a      	cmp	r2, r3
 800c614:	d8f3      	bhi.n	800c5fe <__lshift+0x82>
 800c616:	0020      	movs	r0, r4
 800c618:	3015      	adds	r0, #21
 800c61a:	2304      	movs	r3, #4
 800c61c:	4282      	cmp	r2, r0
 800c61e:	d304      	bcc.n	800c62a <__lshift+0xae>
 800c620:	1b13      	subs	r3, r2, r4
 800c622:	3b15      	subs	r3, #21
 800c624:	089b      	lsrs	r3, r3, #2
 800c626:	3301      	adds	r3, #1
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	50e9      	str	r1, [r5, r3]
 800c62c:	2900      	cmp	r1, #0
 800c62e:	d002      	beq.n	800c636 <__lshift+0xba>
 800c630:	9b02      	ldr	r3, [sp, #8]
 800c632:	3302      	adds	r3, #2
 800c634:	9301      	str	r3, [sp, #4]
 800c636:	9b01      	ldr	r3, [sp, #4]
 800c638:	9804      	ldr	r0, [sp, #16]
 800c63a:	3b01      	subs	r3, #1
 800c63c:	0021      	movs	r1, r4
 800c63e:	6133      	str	r3, [r6, #16]
 800c640:	f7ff fdca 	bl	800c1d8 <_Bfree>
 800c644:	0030      	movs	r0, r6
 800c646:	b007      	add	sp, #28
 800c648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c64a:	cb02      	ldmia	r3!, {r1}
 800c64c:	c502      	stmia	r5!, {r1}
 800c64e:	429a      	cmp	r2, r3
 800c650:	d8fb      	bhi.n	800c64a <__lshift+0xce>
 800c652:	e7f0      	b.n	800c636 <__lshift+0xba>
 800c654:	0800da90 	.word	0x0800da90
 800c658:	0800daab 	.word	0x0800daab

0800c65c <__mcmp>:
 800c65c:	6902      	ldr	r2, [r0, #16]
 800c65e:	690b      	ldr	r3, [r1, #16]
 800c660:	b530      	push	{r4, r5, lr}
 800c662:	0004      	movs	r4, r0
 800c664:	1ad0      	subs	r0, r2, r3
 800c666:	429a      	cmp	r2, r3
 800c668:	d10d      	bne.n	800c686 <__mcmp+0x2a>
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	3414      	adds	r4, #20
 800c66e:	3114      	adds	r1, #20
 800c670:	18e2      	adds	r2, r4, r3
 800c672:	18c9      	adds	r1, r1, r3
 800c674:	3a04      	subs	r2, #4
 800c676:	3904      	subs	r1, #4
 800c678:	6815      	ldr	r5, [r2, #0]
 800c67a:	680b      	ldr	r3, [r1, #0]
 800c67c:	429d      	cmp	r5, r3
 800c67e:	d003      	beq.n	800c688 <__mcmp+0x2c>
 800c680:	2001      	movs	r0, #1
 800c682:	429d      	cmp	r5, r3
 800c684:	d303      	bcc.n	800c68e <__mcmp+0x32>
 800c686:	bd30      	pop	{r4, r5, pc}
 800c688:	4294      	cmp	r4, r2
 800c68a:	d3f3      	bcc.n	800c674 <__mcmp+0x18>
 800c68c:	e7fb      	b.n	800c686 <__mcmp+0x2a>
 800c68e:	4240      	negs	r0, r0
 800c690:	e7f9      	b.n	800c686 <__mcmp+0x2a>
	...

0800c694 <__mdiff>:
 800c694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c696:	000e      	movs	r6, r1
 800c698:	0007      	movs	r7, r0
 800c69a:	0011      	movs	r1, r2
 800c69c:	0030      	movs	r0, r6
 800c69e:	b087      	sub	sp, #28
 800c6a0:	0014      	movs	r4, r2
 800c6a2:	f7ff ffdb 	bl	800c65c <__mcmp>
 800c6a6:	1e05      	subs	r5, r0, #0
 800c6a8:	d110      	bne.n	800c6cc <__mdiff+0x38>
 800c6aa:	0001      	movs	r1, r0
 800c6ac:	0038      	movs	r0, r7
 800c6ae:	f7ff fd4f 	bl	800c150 <_Balloc>
 800c6b2:	1e02      	subs	r2, r0, #0
 800c6b4:	d104      	bne.n	800c6c0 <__mdiff+0x2c>
 800c6b6:	4b40      	ldr	r3, [pc, #256]	; (800c7b8 <__mdiff+0x124>)
 800c6b8:	4940      	ldr	r1, [pc, #256]	; (800c7bc <__mdiff+0x128>)
 800c6ba:	4841      	ldr	r0, [pc, #260]	; (800c7c0 <__mdiff+0x12c>)
 800c6bc:	f7fe fe3e 	bl	800b33c <__assert_func>
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	6145      	str	r5, [r0, #20]
 800c6c4:	6103      	str	r3, [r0, #16]
 800c6c6:	0010      	movs	r0, r2
 800c6c8:	b007      	add	sp, #28
 800c6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	db04      	blt.n	800c6de <__mdiff+0x4a>
 800c6d4:	0023      	movs	r3, r4
 800c6d6:	0034      	movs	r4, r6
 800c6d8:	001e      	movs	r6, r3
 800c6da:	2300      	movs	r3, #0
 800c6dc:	9301      	str	r3, [sp, #4]
 800c6de:	0038      	movs	r0, r7
 800c6e0:	6861      	ldr	r1, [r4, #4]
 800c6e2:	f7ff fd35 	bl	800c150 <_Balloc>
 800c6e6:	1e02      	subs	r2, r0, #0
 800c6e8:	d103      	bne.n	800c6f2 <__mdiff+0x5e>
 800c6ea:	2190      	movs	r1, #144	; 0x90
 800c6ec:	4b32      	ldr	r3, [pc, #200]	; (800c7b8 <__mdiff+0x124>)
 800c6ee:	0089      	lsls	r1, r1, #2
 800c6f0:	e7e3      	b.n	800c6ba <__mdiff+0x26>
 800c6f2:	9b01      	ldr	r3, [sp, #4]
 800c6f4:	2700      	movs	r7, #0
 800c6f6:	60c3      	str	r3, [r0, #12]
 800c6f8:	6920      	ldr	r0, [r4, #16]
 800c6fa:	3414      	adds	r4, #20
 800c6fc:	9401      	str	r4, [sp, #4]
 800c6fe:	9b01      	ldr	r3, [sp, #4]
 800c700:	0084      	lsls	r4, r0, #2
 800c702:	191b      	adds	r3, r3, r4
 800c704:	0034      	movs	r4, r6
 800c706:	9302      	str	r3, [sp, #8]
 800c708:	6933      	ldr	r3, [r6, #16]
 800c70a:	3414      	adds	r4, #20
 800c70c:	0099      	lsls	r1, r3, #2
 800c70e:	1863      	adds	r3, r4, r1
 800c710:	9303      	str	r3, [sp, #12]
 800c712:	0013      	movs	r3, r2
 800c714:	3314      	adds	r3, #20
 800c716:	469c      	mov	ip, r3
 800c718:	9305      	str	r3, [sp, #20]
 800c71a:	9b01      	ldr	r3, [sp, #4]
 800c71c:	9304      	str	r3, [sp, #16]
 800c71e:	9b04      	ldr	r3, [sp, #16]
 800c720:	cc02      	ldmia	r4!, {r1}
 800c722:	cb20      	ldmia	r3!, {r5}
 800c724:	9304      	str	r3, [sp, #16]
 800c726:	b2ab      	uxth	r3, r5
 800c728:	19df      	adds	r7, r3, r7
 800c72a:	b28b      	uxth	r3, r1
 800c72c:	1afb      	subs	r3, r7, r3
 800c72e:	0c2d      	lsrs	r5, r5, #16
 800c730:	0c09      	lsrs	r1, r1, #16
 800c732:	1a69      	subs	r1, r5, r1
 800c734:	141d      	asrs	r5, r3, #16
 800c736:	1949      	adds	r1, r1, r5
 800c738:	140f      	asrs	r7, r1, #16
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	0409      	lsls	r1, r1, #16
 800c73e:	430b      	orrs	r3, r1
 800c740:	4661      	mov	r1, ip
 800c742:	c108      	stmia	r1!, {r3}
 800c744:	9b03      	ldr	r3, [sp, #12]
 800c746:	468c      	mov	ip, r1
 800c748:	42a3      	cmp	r3, r4
 800c74a:	d8e8      	bhi.n	800c71e <__mdiff+0x8a>
 800c74c:	0031      	movs	r1, r6
 800c74e:	9c03      	ldr	r4, [sp, #12]
 800c750:	3115      	adds	r1, #21
 800c752:	2304      	movs	r3, #4
 800c754:	428c      	cmp	r4, r1
 800c756:	d304      	bcc.n	800c762 <__mdiff+0xce>
 800c758:	1ba3      	subs	r3, r4, r6
 800c75a:	3b15      	subs	r3, #21
 800c75c:	089b      	lsrs	r3, r3, #2
 800c75e:	3301      	adds	r3, #1
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	9901      	ldr	r1, [sp, #4]
 800c764:	18cc      	adds	r4, r1, r3
 800c766:	9905      	ldr	r1, [sp, #20]
 800c768:	0026      	movs	r6, r4
 800c76a:	18cb      	adds	r3, r1, r3
 800c76c:	469c      	mov	ip, r3
 800c76e:	9902      	ldr	r1, [sp, #8]
 800c770:	428e      	cmp	r6, r1
 800c772:	d310      	bcc.n	800c796 <__mdiff+0x102>
 800c774:	9e02      	ldr	r6, [sp, #8]
 800c776:	1ee5      	subs	r5, r4, #3
 800c778:	2100      	movs	r1, #0
 800c77a:	42ae      	cmp	r6, r5
 800c77c:	d304      	bcc.n	800c788 <__mdiff+0xf4>
 800c77e:	0031      	movs	r1, r6
 800c780:	3103      	adds	r1, #3
 800c782:	1b09      	subs	r1, r1, r4
 800c784:	0889      	lsrs	r1, r1, #2
 800c786:	0089      	lsls	r1, r1, #2
 800c788:	185b      	adds	r3, r3, r1
 800c78a:	3b04      	subs	r3, #4
 800c78c:	6819      	ldr	r1, [r3, #0]
 800c78e:	2900      	cmp	r1, #0
 800c790:	d00f      	beq.n	800c7b2 <__mdiff+0x11e>
 800c792:	6110      	str	r0, [r2, #16]
 800c794:	e797      	b.n	800c6c6 <__mdiff+0x32>
 800c796:	ce02      	ldmia	r6!, {r1}
 800c798:	b28d      	uxth	r5, r1
 800c79a:	19ed      	adds	r5, r5, r7
 800c79c:	0c0f      	lsrs	r7, r1, #16
 800c79e:	1429      	asrs	r1, r5, #16
 800c7a0:	1879      	adds	r1, r7, r1
 800c7a2:	140f      	asrs	r7, r1, #16
 800c7a4:	b2ad      	uxth	r5, r5
 800c7a6:	0409      	lsls	r1, r1, #16
 800c7a8:	430d      	orrs	r5, r1
 800c7aa:	4661      	mov	r1, ip
 800c7ac:	c120      	stmia	r1!, {r5}
 800c7ae:	468c      	mov	ip, r1
 800c7b0:	e7dd      	b.n	800c76e <__mdiff+0xda>
 800c7b2:	3801      	subs	r0, #1
 800c7b4:	e7e9      	b.n	800c78a <__mdiff+0xf6>
 800c7b6:	46c0      	nop			; (mov r8, r8)
 800c7b8:	0800da90 	.word	0x0800da90
 800c7bc:	00000232 	.word	0x00000232
 800c7c0:	0800daab 	.word	0x0800daab

0800c7c4 <__d2b>:
 800c7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7c6:	2101      	movs	r1, #1
 800c7c8:	0014      	movs	r4, r2
 800c7ca:	001e      	movs	r6, r3
 800c7cc:	9f08      	ldr	r7, [sp, #32]
 800c7ce:	f7ff fcbf 	bl	800c150 <_Balloc>
 800c7d2:	1e05      	subs	r5, r0, #0
 800c7d4:	d105      	bne.n	800c7e2 <__d2b+0x1e>
 800c7d6:	0002      	movs	r2, r0
 800c7d8:	4b26      	ldr	r3, [pc, #152]	; (800c874 <__d2b+0xb0>)
 800c7da:	4927      	ldr	r1, [pc, #156]	; (800c878 <__d2b+0xb4>)
 800c7dc:	4827      	ldr	r0, [pc, #156]	; (800c87c <__d2b+0xb8>)
 800c7de:	f7fe fdad 	bl	800b33c <__assert_func>
 800c7e2:	0333      	lsls	r3, r6, #12
 800c7e4:	0076      	lsls	r6, r6, #1
 800c7e6:	0b1b      	lsrs	r3, r3, #12
 800c7e8:	0d76      	lsrs	r6, r6, #21
 800c7ea:	d124      	bne.n	800c836 <__d2b+0x72>
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	2c00      	cmp	r4, #0
 800c7f0:	d027      	beq.n	800c842 <__d2b+0x7e>
 800c7f2:	4668      	mov	r0, sp
 800c7f4:	9400      	str	r4, [sp, #0]
 800c7f6:	f7ff fd71 	bl	800c2dc <__lo0bits>
 800c7fa:	9c00      	ldr	r4, [sp, #0]
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d01e      	beq.n	800c83e <__d2b+0x7a>
 800c800:	9b01      	ldr	r3, [sp, #4]
 800c802:	2120      	movs	r1, #32
 800c804:	001a      	movs	r2, r3
 800c806:	1a09      	subs	r1, r1, r0
 800c808:	408a      	lsls	r2, r1
 800c80a:	40c3      	lsrs	r3, r0
 800c80c:	4322      	orrs	r2, r4
 800c80e:	616a      	str	r2, [r5, #20]
 800c810:	9301      	str	r3, [sp, #4]
 800c812:	9c01      	ldr	r4, [sp, #4]
 800c814:	61ac      	str	r4, [r5, #24]
 800c816:	1e63      	subs	r3, r4, #1
 800c818:	419c      	sbcs	r4, r3
 800c81a:	3401      	adds	r4, #1
 800c81c:	612c      	str	r4, [r5, #16]
 800c81e:	2e00      	cmp	r6, #0
 800c820:	d018      	beq.n	800c854 <__d2b+0x90>
 800c822:	4b17      	ldr	r3, [pc, #92]	; (800c880 <__d2b+0xbc>)
 800c824:	18f6      	adds	r6, r6, r3
 800c826:	2335      	movs	r3, #53	; 0x35
 800c828:	1836      	adds	r6, r6, r0
 800c82a:	1a18      	subs	r0, r3, r0
 800c82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c82e:	603e      	str	r6, [r7, #0]
 800c830:	6018      	str	r0, [r3, #0]
 800c832:	0028      	movs	r0, r5
 800c834:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c836:	2280      	movs	r2, #128	; 0x80
 800c838:	0352      	lsls	r2, r2, #13
 800c83a:	4313      	orrs	r3, r2
 800c83c:	e7d6      	b.n	800c7ec <__d2b+0x28>
 800c83e:	616c      	str	r4, [r5, #20]
 800c840:	e7e7      	b.n	800c812 <__d2b+0x4e>
 800c842:	a801      	add	r0, sp, #4
 800c844:	f7ff fd4a 	bl	800c2dc <__lo0bits>
 800c848:	2401      	movs	r4, #1
 800c84a:	9b01      	ldr	r3, [sp, #4]
 800c84c:	612c      	str	r4, [r5, #16]
 800c84e:	616b      	str	r3, [r5, #20]
 800c850:	3020      	adds	r0, #32
 800c852:	e7e4      	b.n	800c81e <__d2b+0x5a>
 800c854:	4b0b      	ldr	r3, [pc, #44]	; (800c884 <__d2b+0xc0>)
 800c856:	18c0      	adds	r0, r0, r3
 800c858:	4b0b      	ldr	r3, [pc, #44]	; (800c888 <__d2b+0xc4>)
 800c85a:	6038      	str	r0, [r7, #0]
 800c85c:	18e3      	adds	r3, r4, r3
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	18eb      	adds	r3, r5, r3
 800c862:	6958      	ldr	r0, [r3, #20]
 800c864:	f7ff fd20 	bl	800c2a8 <__hi0bits>
 800c868:	0164      	lsls	r4, r4, #5
 800c86a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c86c:	1a24      	subs	r4, r4, r0
 800c86e:	601c      	str	r4, [r3, #0]
 800c870:	e7df      	b.n	800c832 <__d2b+0x6e>
 800c872:	46c0      	nop			; (mov r8, r8)
 800c874:	0800da90 	.word	0x0800da90
 800c878:	0000030a 	.word	0x0000030a
 800c87c:	0800daab 	.word	0x0800daab
 800c880:	fffffbcd 	.word	0xfffffbcd
 800c884:	fffffbce 	.word	0xfffffbce
 800c888:	3fffffff 	.word	0x3fffffff

0800c88c <_calloc_r>:
 800c88c:	434a      	muls	r2, r1
 800c88e:	b570      	push	{r4, r5, r6, lr}
 800c890:	0011      	movs	r1, r2
 800c892:	0015      	movs	r5, r2
 800c894:	f7fe f848 	bl	800a928 <_malloc_r>
 800c898:	1e04      	subs	r4, r0, #0
 800c89a:	d003      	beq.n	800c8a4 <_calloc_r+0x18>
 800c89c:	002a      	movs	r2, r5
 800c89e:	2100      	movs	r1, #0
 800c8a0:	f7fd ffef 	bl	800a882 <memset>
 800c8a4:	0020      	movs	r0, r4
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}

0800c8a8 <__ssputs_r>:
 800c8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8aa:	688e      	ldr	r6, [r1, #8]
 800c8ac:	b085      	sub	sp, #20
 800c8ae:	0007      	movs	r7, r0
 800c8b0:	000c      	movs	r4, r1
 800c8b2:	9203      	str	r2, [sp, #12]
 800c8b4:	9301      	str	r3, [sp, #4]
 800c8b6:	429e      	cmp	r6, r3
 800c8b8:	d83c      	bhi.n	800c934 <__ssputs_r+0x8c>
 800c8ba:	2390      	movs	r3, #144	; 0x90
 800c8bc:	898a      	ldrh	r2, [r1, #12]
 800c8be:	00db      	lsls	r3, r3, #3
 800c8c0:	421a      	tst	r2, r3
 800c8c2:	d034      	beq.n	800c92e <__ssputs_r+0x86>
 800c8c4:	2503      	movs	r5, #3
 800c8c6:	6909      	ldr	r1, [r1, #16]
 800c8c8:	6823      	ldr	r3, [r4, #0]
 800c8ca:	1a5b      	subs	r3, r3, r1
 800c8cc:	9302      	str	r3, [sp, #8]
 800c8ce:	6963      	ldr	r3, [r4, #20]
 800c8d0:	9802      	ldr	r0, [sp, #8]
 800c8d2:	435d      	muls	r5, r3
 800c8d4:	0feb      	lsrs	r3, r5, #31
 800c8d6:	195d      	adds	r5, r3, r5
 800c8d8:	9b01      	ldr	r3, [sp, #4]
 800c8da:	106d      	asrs	r5, r5, #1
 800c8dc:	3301      	adds	r3, #1
 800c8de:	181b      	adds	r3, r3, r0
 800c8e0:	42ab      	cmp	r3, r5
 800c8e2:	d900      	bls.n	800c8e6 <__ssputs_r+0x3e>
 800c8e4:	001d      	movs	r5, r3
 800c8e6:	0553      	lsls	r3, r2, #21
 800c8e8:	d532      	bpl.n	800c950 <__ssputs_r+0xa8>
 800c8ea:	0029      	movs	r1, r5
 800c8ec:	0038      	movs	r0, r7
 800c8ee:	f7fe f81b 	bl	800a928 <_malloc_r>
 800c8f2:	1e06      	subs	r6, r0, #0
 800c8f4:	d109      	bne.n	800c90a <__ssputs_r+0x62>
 800c8f6:	230c      	movs	r3, #12
 800c8f8:	603b      	str	r3, [r7, #0]
 800c8fa:	2340      	movs	r3, #64	; 0x40
 800c8fc:	2001      	movs	r0, #1
 800c8fe:	89a2      	ldrh	r2, [r4, #12]
 800c900:	4240      	negs	r0, r0
 800c902:	4313      	orrs	r3, r2
 800c904:	81a3      	strh	r3, [r4, #12]
 800c906:	b005      	add	sp, #20
 800c908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c90a:	9a02      	ldr	r2, [sp, #8]
 800c90c:	6921      	ldr	r1, [r4, #16]
 800c90e:	f7fd ffaf 	bl	800a870 <memcpy>
 800c912:	89a3      	ldrh	r3, [r4, #12]
 800c914:	4a14      	ldr	r2, [pc, #80]	; (800c968 <__ssputs_r+0xc0>)
 800c916:	401a      	ands	r2, r3
 800c918:	2380      	movs	r3, #128	; 0x80
 800c91a:	4313      	orrs	r3, r2
 800c91c:	81a3      	strh	r3, [r4, #12]
 800c91e:	9b02      	ldr	r3, [sp, #8]
 800c920:	6126      	str	r6, [r4, #16]
 800c922:	18f6      	adds	r6, r6, r3
 800c924:	6026      	str	r6, [r4, #0]
 800c926:	6165      	str	r5, [r4, #20]
 800c928:	9e01      	ldr	r6, [sp, #4]
 800c92a:	1aed      	subs	r5, r5, r3
 800c92c:	60a5      	str	r5, [r4, #8]
 800c92e:	9b01      	ldr	r3, [sp, #4]
 800c930:	429e      	cmp	r6, r3
 800c932:	d900      	bls.n	800c936 <__ssputs_r+0x8e>
 800c934:	9e01      	ldr	r6, [sp, #4]
 800c936:	0032      	movs	r2, r6
 800c938:	9903      	ldr	r1, [sp, #12]
 800c93a:	6820      	ldr	r0, [r4, #0]
 800c93c:	f000 fd9a 	bl	800d474 <memmove>
 800c940:	68a3      	ldr	r3, [r4, #8]
 800c942:	2000      	movs	r0, #0
 800c944:	1b9b      	subs	r3, r3, r6
 800c946:	60a3      	str	r3, [r4, #8]
 800c948:	6823      	ldr	r3, [r4, #0]
 800c94a:	199e      	adds	r6, r3, r6
 800c94c:	6026      	str	r6, [r4, #0]
 800c94e:	e7da      	b.n	800c906 <__ssputs_r+0x5e>
 800c950:	002a      	movs	r2, r5
 800c952:	0038      	movs	r0, r7
 800c954:	f000 fda1 	bl	800d49a <_realloc_r>
 800c958:	1e06      	subs	r6, r0, #0
 800c95a:	d1e0      	bne.n	800c91e <__ssputs_r+0x76>
 800c95c:	0038      	movs	r0, r7
 800c95e:	6921      	ldr	r1, [r4, #16]
 800c960:	f7fd ff98 	bl	800a894 <_free_r>
 800c964:	e7c7      	b.n	800c8f6 <__ssputs_r+0x4e>
 800c966:	46c0      	nop			; (mov r8, r8)
 800c968:	fffffb7f 	.word	0xfffffb7f

0800c96c <_svfiprintf_r>:
 800c96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c96e:	b0a1      	sub	sp, #132	; 0x84
 800c970:	9003      	str	r0, [sp, #12]
 800c972:	001d      	movs	r5, r3
 800c974:	898b      	ldrh	r3, [r1, #12]
 800c976:	000f      	movs	r7, r1
 800c978:	0016      	movs	r6, r2
 800c97a:	061b      	lsls	r3, r3, #24
 800c97c:	d511      	bpl.n	800c9a2 <_svfiprintf_r+0x36>
 800c97e:	690b      	ldr	r3, [r1, #16]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10e      	bne.n	800c9a2 <_svfiprintf_r+0x36>
 800c984:	2140      	movs	r1, #64	; 0x40
 800c986:	f7fd ffcf 	bl	800a928 <_malloc_r>
 800c98a:	6038      	str	r0, [r7, #0]
 800c98c:	6138      	str	r0, [r7, #16]
 800c98e:	2800      	cmp	r0, #0
 800c990:	d105      	bne.n	800c99e <_svfiprintf_r+0x32>
 800c992:	230c      	movs	r3, #12
 800c994:	9a03      	ldr	r2, [sp, #12]
 800c996:	3801      	subs	r0, #1
 800c998:	6013      	str	r3, [r2, #0]
 800c99a:	b021      	add	sp, #132	; 0x84
 800c99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c99e:	2340      	movs	r3, #64	; 0x40
 800c9a0:	617b      	str	r3, [r7, #20]
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	ac08      	add	r4, sp, #32
 800c9a6:	6163      	str	r3, [r4, #20]
 800c9a8:	3320      	adds	r3, #32
 800c9aa:	7663      	strb	r3, [r4, #25]
 800c9ac:	3310      	adds	r3, #16
 800c9ae:	76a3      	strb	r3, [r4, #26]
 800c9b0:	9507      	str	r5, [sp, #28]
 800c9b2:	0035      	movs	r5, r6
 800c9b4:	782b      	ldrb	r3, [r5, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d001      	beq.n	800c9be <_svfiprintf_r+0x52>
 800c9ba:	2b25      	cmp	r3, #37	; 0x25
 800c9bc:	d147      	bne.n	800ca4e <_svfiprintf_r+0xe2>
 800c9be:	1bab      	subs	r3, r5, r6
 800c9c0:	9305      	str	r3, [sp, #20]
 800c9c2:	42b5      	cmp	r5, r6
 800c9c4:	d00c      	beq.n	800c9e0 <_svfiprintf_r+0x74>
 800c9c6:	0032      	movs	r2, r6
 800c9c8:	0039      	movs	r1, r7
 800c9ca:	9803      	ldr	r0, [sp, #12]
 800c9cc:	f7ff ff6c 	bl	800c8a8 <__ssputs_r>
 800c9d0:	1c43      	adds	r3, r0, #1
 800c9d2:	d100      	bne.n	800c9d6 <_svfiprintf_r+0x6a>
 800c9d4:	e0ae      	b.n	800cb34 <_svfiprintf_r+0x1c8>
 800c9d6:	6962      	ldr	r2, [r4, #20]
 800c9d8:	9b05      	ldr	r3, [sp, #20]
 800c9da:	4694      	mov	ip, r2
 800c9dc:	4463      	add	r3, ip
 800c9de:	6163      	str	r3, [r4, #20]
 800c9e0:	782b      	ldrb	r3, [r5, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d100      	bne.n	800c9e8 <_svfiprintf_r+0x7c>
 800c9e6:	e0a5      	b.n	800cb34 <_svfiprintf_r+0x1c8>
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	4252      	negs	r2, r2
 800c9ee:	6062      	str	r2, [r4, #4]
 800c9f0:	a904      	add	r1, sp, #16
 800c9f2:	3254      	adds	r2, #84	; 0x54
 800c9f4:	1852      	adds	r2, r2, r1
 800c9f6:	1c6e      	adds	r6, r5, #1
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	60e3      	str	r3, [r4, #12]
 800c9fc:	60a3      	str	r3, [r4, #8]
 800c9fe:	7013      	strb	r3, [r2, #0]
 800ca00:	65a3      	str	r3, [r4, #88]	; 0x58
 800ca02:	2205      	movs	r2, #5
 800ca04:	7831      	ldrb	r1, [r6, #0]
 800ca06:	4854      	ldr	r0, [pc, #336]	; (800cb58 <_svfiprintf_r+0x1ec>)
 800ca08:	f7ff fb86 	bl	800c118 <memchr>
 800ca0c:	1c75      	adds	r5, r6, #1
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d11f      	bne.n	800ca52 <_svfiprintf_r+0xe6>
 800ca12:	6822      	ldr	r2, [r4, #0]
 800ca14:	06d3      	lsls	r3, r2, #27
 800ca16:	d504      	bpl.n	800ca22 <_svfiprintf_r+0xb6>
 800ca18:	2353      	movs	r3, #83	; 0x53
 800ca1a:	a904      	add	r1, sp, #16
 800ca1c:	185b      	adds	r3, r3, r1
 800ca1e:	2120      	movs	r1, #32
 800ca20:	7019      	strb	r1, [r3, #0]
 800ca22:	0713      	lsls	r3, r2, #28
 800ca24:	d504      	bpl.n	800ca30 <_svfiprintf_r+0xc4>
 800ca26:	2353      	movs	r3, #83	; 0x53
 800ca28:	a904      	add	r1, sp, #16
 800ca2a:	185b      	adds	r3, r3, r1
 800ca2c:	212b      	movs	r1, #43	; 0x2b
 800ca2e:	7019      	strb	r1, [r3, #0]
 800ca30:	7833      	ldrb	r3, [r6, #0]
 800ca32:	2b2a      	cmp	r3, #42	; 0x2a
 800ca34:	d016      	beq.n	800ca64 <_svfiprintf_r+0xf8>
 800ca36:	0035      	movs	r5, r6
 800ca38:	2100      	movs	r1, #0
 800ca3a:	200a      	movs	r0, #10
 800ca3c:	68e3      	ldr	r3, [r4, #12]
 800ca3e:	782a      	ldrb	r2, [r5, #0]
 800ca40:	1c6e      	adds	r6, r5, #1
 800ca42:	3a30      	subs	r2, #48	; 0x30
 800ca44:	2a09      	cmp	r2, #9
 800ca46:	d94e      	bls.n	800cae6 <_svfiprintf_r+0x17a>
 800ca48:	2900      	cmp	r1, #0
 800ca4a:	d111      	bne.n	800ca70 <_svfiprintf_r+0x104>
 800ca4c:	e017      	b.n	800ca7e <_svfiprintf_r+0x112>
 800ca4e:	3501      	adds	r5, #1
 800ca50:	e7b0      	b.n	800c9b4 <_svfiprintf_r+0x48>
 800ca52:	4b41      	ldr	r3, [pc, #260]	; (800cb58 <_svfiprintf_r+0x1ec>)
 800ca54:	6822      	ldr	r2, [r4, #0]
 800ca56:	1ac0      	subs	r0, r0, r3
 800ca58:	2301      	movs	r3, #1
 800ca5a:	4083      	lsls	r3, r0
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	002e      	movs	r6, r5
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	e7ce      	b.n	800ca02 <_svfiprintf_r+0x96>
 800ca64:	9b07      	ldr	r3, [sp, #28]
 800ca66:	1d19      	adds	r1, r3, #4
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	9107      	str	r1, [sp, #28]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	db01      	blt.n	800ca74 <_svfiprintf_r+0x108>
 800ca70:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca72:	e004      	b.n	800ca7e <_svfiprintf_r+0x112>
 800ca74:	425b      	negs	r3, r3
 800ca76:	60e3      	str	r3, [r4, #12]
 800ca78:	2302      	movs	r3, #2
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	782b      	ldrb	r3, [r5, #0]
 800ca80:	2b2e      	cmp	r3, #46	; 0x2e
 800ca82:	d10a      	bne.n	800ca9a <_svfiprintf_r+0x12e>
 800ca84:	786b      	ldrb	r3, [r5, #1]
 800ca86:	2b2a      	cmp	r3, #42	; 0x2a
 800ca88:	d135      	bne.n	800caf6 <_svfiprintf_r+0x18a>
 800ca8a:	9b07      	ldr	r3, [sp, #28]
 800ca8c:	3502      	adds	r5, #2
 800ca8e:	1d1a      	adds	r2, r3, #4
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	9207      	str	r2, [sp, #28]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	db2b      	blt.n	800caf0 <_svfiprintf_r+0x184>
 800ca98:	9309      	str	r3, [sp, #36]	; 0x24
 800ca9a:	4e30      	ldr	r6, [pc, #192]	; (800cb5c <_svfiprintf_r+0x1f0>)
 800ca9c:	2203      	movs	r2, #3
 800ca9e:	0030      	movs	r0, r6
 800caa0:	7829      	ldrb	r1, [r5, #0]
 800caa2:	f7ff fb39 	bl	800c118 <memchr>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	d006      	beq.n	800cab8 <_svfiprintf_r+0x14c>
 800caaa:	2340      	movs	r3, #64	; 0x40
 800caac:	1b80      	subs	r0, r0, r6
 800caae:	4083      	lsls	r3, r0
 800cab0:	6822      	ldr	r2, [r4, #0]
 800cab2:	3501      	adds	r5, #1
 800cab4:	4313      	orrs	r3, r2
 800cab6:	6023      	str	r3, [r4, #0]
 800cab8:	7829      	ldrb	r1, [r5, #0]
 800caba:	2206      	movs	r2, #6
 800cabc:	4828      	ldr	r0, [pc, #160]	; (800cb60 <_svfiprintf_r+0x1f4>)
 800cabe:	1c6e      	adds	r6, r5, #1
 800cac0:	7621      	strb	r1, [r4, #24]
 800cac2:	f7ff fb29 	bl	800c118 <memchr>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d03c      	beq.n	800cb44 <_svfiprintf_r+0x1d8>
 800caca:	4b26      	ldr	r3, [pc, #152]	; (800cb64 <_svfiprintf_r+0x1f8>)
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d125      	bne.n	800cb1c <_svfiprintf_r+0x1b0>
 800cad0:	2207      	movs	r2, #7
 800cad2:	9b07      	ldr	r3, [sp, #28]
 800cad4:	3307      	adds	r3, #7
 800cad6:	4393      	bics	r3, r2
 800cad8:	3308      	adds	r3, #8
 800cada:	9307      	str	r3, [sp, #28]
 800cadc:	6963      	ldr	r3, [r4, #20]
 800cade:	9a04      	ldr	r2, [sp, #16]
 800cae0:	189b      	adds	r3, r3, r2
 800cae2:	6163      	str	r3, [r4, #20]
 800cae4:	e765      	b.n	800c9b2 <_svfiprintf_r+0x46>
 800cae6:	4343      	muls	r3, r0
 800cae8:	0035      	movs	r5, r6
 800caea:	2101      	movs	r1, #1
 800caec:	189b      	adds	r3, r3, r2
 800caee:	e7a6      	b.n	800ca3e <_svfiprintf_r+0xd2>
 800caf0:	2301      	movs	r3, #1
 800caf2:	425b      	negs	r3, r3
 800caf4:	e7d0      	b.n	800ca98 <_svfiprintf_r+0x12c>
 800caf6:	2300      	movs	r3, #0
 800caf8:	200a      	movs	r0, #10
 800cafa:	001a      	movs	r2, r3
 800cafc:	3501      	adds	r5, #1
 800cafe:	6063      	str	r3, [r4, #4]
 800cb00:	7829      	ldrb	r1, [r5, #0]
 800cb02:	1c6e      	adds	r6, r5, #1
 800cb04:	3930      	subs	r1, #48	; 0x30
 800cb06:	2909      	cmp	r1, #9
 800cb08:	d903      	bls.n	800cb12 <_svfiprintf_r+0x1a6>
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d0c5      	beq.n	800ca9a <_svfiprintf_r+0x12e>
 800cb0e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb10:	e7c3      	b.n	800ca9a <_svfiprintf_r+0x12e>
 800cb12:	4342      	muls	r2, r0
 800cb14:	0035      	movs	r5, r6
 800cb16:	2301      	movs	r3, #1
 800cb18:	1852      	adds	r2, r2, r1
 800cb1a:	e7f1      	b.n	800cb00 <_svfiprintf_r+0x194>
 800cb1c:	ab07      	add	r3, sp, #28
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	003a      	movs	r2, r7
 800cb22:	0021      	movs	r1, r4
 800cb24:	4b10      	ldr	r3, [pc, #64]	; (800cb68 <_svfiprintf_r+0x1fc>)
 800cb26:	9803      	ldr	r0, [sp, #12]
 800cb28:	f7fe f806 	bl	800ab38 <_printf_float>
 800cb2c:	9004      	str	r0, [sp, #16]
 800cb2e:	9b04      	ldr	r3, [sp, #16]
 800cb30:	3301      	adds	r3, #1
 800cb32:	d1d3      	bne.n	800cadc <_svfiprintf_r+0x170>
 800cb34:	89bb      	ldrh	r3, [r7, #12]
 800cb36:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cb38:	065b      	lsls	r3, r3, #25
 800cb3a:	d400      	bmi.n	800cb3e <_svfiprintf_r+0x1d2>
 800cb3c:	e72d      	b.n	800c99a <_svfiprintf_r+0x2e>
 800cb3e:	2001      	movs	r0, #1
 800cb40:	4240      	negs	r0, r0
 800cb42:	e72a      	b.n	800c99a <_svfiprintf_r+0x2e>
 800cb44:	ab07      	add	r3, sp, #28
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	003a      	movs	r2, r7
 800cb4a:	0021      	movs	r1, r4
 800cb4c:	4b06      	ldr	r3, [pc, #24]	; (800cb68 <_svfiprintf_r+0x1fc>)
 800cb4e:	9803      	ldr	r0, [sp, #12]
 800cb50:	f7fe fab0 	bl	800b0b4 <_printf_i>
 800cb54:	e7ea      	b.n	800cb2c <_svfiprintf_r+0x1c0>
 800cb56:	46c0      	nop			; (mov r8, r8)
 800cb58:	0800dc0c 	.word	0x0800dc0c
 800cb5c:	0800dc12 	.word	0x0800dc12
 800cb60:	0800dc16 	.word	0x0800dc16
 800cb64:	0800ab39 	.word	0x0800ab39
 800cb68:	0800c8a9 	.word	0x0800c8a9

0800cb6c <__sfputc_r>:
 800cb6c:	6893      	ldr	r3, [r2, #8]
 800cb6e:	b510      	push	{r4, lr}
 800cb70:	3b01      	subs	r3, #1
 800cb72:	6093      	str	r3, [r2, #8]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	da04      	bge.n	800cb82 <__sfputc_r+0x16>
 800cb78:	6994      	ldr	r4, [r2, #24]
 800cb7a:	42a3      	cmp	r3, r4
 800cb7c:	db07      	blt.n	800cb8e <__sfputc_r+0x22>
 800cb7e:	290a      	cmp	r1, #10
 800cb80:	d005      	beq.n	800cb8e <__sfputc_r+0x22>
 800cb82:	6813      	ldr	r3, [r2, #0]
 800cb84:	1c58      	adds	r0, r3, #1
 800cb86:	6010      	str	r0, [r2, #0]
 800cb88:	7019      	strb	r1, [r3, #0]
 800cb8a:	0008      	movs	r0, r1
 800cb8c:	bd10      	pop	{r4, pc}
 800cb8e:	f000 f94f 	bl	800ce30 <__swbuf_r>
 800cb92:	0001      	movs	r1, r0
 800cb94:	e7f9      	b.n	800cb8a <__sfputc_r+0x1e>

0800cb96 <__sfputs_r>:
 800cb96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb98:	0006      	movs	r6, r0
 800cb9a:	000f      	movs	r7, r1
 800cb9c:	0014      	movs	r4, r2
 800cb9e:	18d5      	adds	r5, r2, r3
 800cba0:	42ac      	cmp	r4, r5
 800cba2:	d101      	bne.n	800cba8 <__sfputs_r+0x12>
 800cba4:	2000      	movs	r0, #0
 800cba6:	e007      	b.n	800cbb8 <__sfputs_r+0x22>
 800cba8:	7821      	ldrb	r1, [r4, #0]
 800cbaa:	003a      	movs	r2, r7
 800cbac:	0030      	movs	r0, r6
 800cbae:	f7ff ffdd 	bl	800cb6c <__sfputc_r>
 800cbb2:	3401      	adds	r4, #1
 800cbb4:	1c43      	adds	r3, r0, #1
 800cbb6:	d1f3      	bne.n	800cba0 <__sfputs_r+0xa>
 800cbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cbbc <_vfiprintf_r>:
 800cbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbbe:	b0a1      	sub	sp, #132	; 0x84
 800cbc0:	0006      	movs	r6, r0
 800cbc2:	000c      	movs	r4, r1
 800cbc4:	001f      	movs	r7, r3
 800cbc6:	9203      	str	r2, [sp, #12]
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d004      	beq.n	800cbd6 <_vfiprintf_r+0x1a>
 800cbcc:	6983      	ldr	r3, [r0, #24]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d101      	bne.n	800cbd6 <_vfiprintf_r+0x1a>
 800cbd2:	f000 fb3f 	bl	800d254 <__sinit>
 800cbd6:	4b8e      	ldr	r3, [pc, #568]	; (800ce10 <_vfiprintf_r+0x254>)
 800cbd8:	429c      	cmp	r4, r3
 800cbda:	d11c      	bne.n	800cc16 <_vfiprintf_r+0x5a>
 800cbdc:	6874      	ldr	r4, [r6, #4]
 800cbde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbe0:	07db      	lsls	r3, r3, #31
 800cbe2:	d405      	bmi.n	800cbf0 <_vfiprintf_r+0x34>
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	059b      	lsls	r3, r3, #22
 800cbe8:	d402      	bmi.n	800cbf0 <_vfiprintf_r+0x34>
 800cbea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbec:	f000 fbd3 	bl	800d396 <__retarget_lock_acquire_recursive>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	071b      	lsls	r3, r3, #28
 800cbf4:	d502      	bpl.n	800cbfc <_vfiprintf_r+0x40>
 800cbf6:	6923      	ldr	r3, [r4, #16]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d11d      	bne.n	800cc38 <_vfiprintf_r+0x7c>
 800cbfc:	0021      	movs	r1, r4
 800cbfe:	0030      	movs	r0, r6
 800cc00:	f000 f97a 	bl	800cef8 <__swsetup_r>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d017      	beq.n	800cc38 <_vfiprintf_r+0x7c>
 800cc08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc0a:	07db      	lsls	r3, r3, #31
 800cc0c:	d50d      	bpl.n	800cc2a <_vfiprintf_r+0x6e>
 800cc0e:	2001      	movs	r0, #1
 800cc10:	4240      	negs	r0, r0
 800cc12:	b021      	add	sp, #132	; 0x84
 800cc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc16:	4b7f      	ldr	r3, [pc, #508]	; (800ce14 <_vfiprintf_r+0x258>)
 800cc18:	429c      	cmp	r4, r3
 800cc1a:	d101      	bne.n	800cc20 <_vfiprintf_r+0x64>
 800cc1c:	68b4      	ldr	r4, [r6, #8]
 800cc1e:	e7de      	b.n	800cbde <_vfiprintf_r+0x22>
 800cc20:	4b7d      	ldr	r3, [pc, #500]	; (800ce18 <_vfiprintf_r+0x25c>)
 800cc22:	429c      	cmp	r4, r3
 800cc24:	d1db      	bne.n	800cbde <_vfiprintf_r+0x22>
 800cc26:	68f4      	ldr	r4, [r6, #12]
 800cc28:	e7d9      	b.n	800cbde <_vfiprintf_r+0x22>
 800cc2a:	89a3      	ldrh	r3, [r4, #12]
 800cc2c:	059b      	lsls	r3, r3, #22
 800cc2e:	d4ee      	bmi.n	800cc0e <_vfiprintf_r+0x52>
 800cc30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc32:	f000 fbb1 	bl	800d398 <__retarget_lock_release_recursive>
 800cc36:	e7ea      	b.n	800cc0e <_vfiprintf_r+0x52>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	ad08      	add	r5, sp, #32
 800cc3c:	616b      	str	r3, [r5, #20]
 800cc3e:	3320      	adds	r3, #32
 800cc40:	766b      	strb	r3, [r5, #25]
 800cc42:	3310      	adds	r3, #16
 800cc44:	76ab      	strb	r3, [r5, #26]
 800cc46:	9707      	str	r7, [sp, #28]
 800cc48:	9f03      	ldr	r7, [sp, #12]
 800cc4a:	783b      	ldrb	r3, [r7, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d001      	beq.n	800cc54 <_vfiprintf_r+0x98>
 800cc50:	2b25      	cmp	r3, #37	; 0x25
 800cc52:	d14e      	bne.n	800ccf2 <_vfiprintf_r+0x136>
 800cc54:	9b03      	ldr	r3, [sp, #12]
 800cc56:	1afb      	subs	r3, r7, r3
 800cc58:	9305      	str	r3, [sp, #20]
 800cc5a:	9b03      	ldr	r3, [sp, #12]
 800cc5c:	429f      	cmp	r7, r3
 800cc5e:	d00d      	beq.n	800cc7c <_vfiprintf_r+0xc0>
 800cc60:	9b05      	ldr	r3, [sp, #20]
 800cc62:	0021      	movs	r1, r4
 800cc64:	0030      	movs	r0, r6
 800cc66:	9a03      	ldr	r2, [sp, #12]
 800cc68:	f7ff ff95 	bl	800cb96 <__sfputs_r>
 800cc6c:	1c43      	adds	r3, r0, #1
 800cc6e:	d100      	bne.n	800cc72 <_vfiprintf_r+0xb6>
 800cc70:	e0b5      	b.n	800cdde <_vfiprintf_r+0x222>
 800cc72:	696a      	ldr	r2, [r5, #20]
 800cc74:	9b05      	ldr	r3, [sp, #20]
 800cc76:	4694      	mov	ip, r2
 800cc78:	4463      	add	r3, ip
 800cc7a:	616b      	str	r3, [r5, #20]
 800cc7c:	783b      	ldrb	r3, [r7, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d100      	bne.n	800cc84 <_vfiprintf_r+0xc8>
 800cc82:	e0ac      	b.n	800cdde <_vfiprintf_r+0x222>
 800cc84:	2201      	movs	r2, #1
 800cc86:	1c7b      	adds	r3, r7, #1
 800cc88:	9303      	str	r3, [sp, #12]
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	4252      	negs	r2, r2
 800cc8e:	606a      	str	r2, [r5, #4]
 800cc90:	a904      	add	r1, sp, #16
 800cc92:	3254      	adds	r2, #84	; 0x54
 800cc94:	1852      	adds	r2, r2, r1
 800cc96:	602b      	str	r3, [r5, #0]
 800cc98:	60eb      	str	r3, [r5, #12]
 800cc9a:	60ab      	str	r3, [r5, #8]
 800cc9c:	7013      	strb	r3, [r2, #0]
 800cc9e:	65ab      	str	r3, [r5, #88]	; 0x58
 800cca0:	9b03      	ldr	r3, [sp, #12]
 800cca2:	2205      	movs	r2, #5
 800cca4:	7819      	ldrb	r1, [r3, #0]
 800cca6:	485d      	ldr	r0, [pc, #372]	; (800ce1c <_vfiprintf_r+0x260>)
 800cca8:	f7ff fa36 	bl	800c118 <memchr>
 800ccac:	9b03      	ldr	r3, [sp, #12]
 800ccae:	1c5f      	adds	r7, r3, #1
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	d120      	bne.n	800ccf6 <_vfiprintf_r+0x13a>
 800ccb4:	682a      	ldr	r2, [r5, #0]
 800ccb6:	06d3      	lsls	r3, r2, #27
 800ccb8:	d504      	bpl.n	800ccc4 <_vfiprintf_r+0x108>
 800ccba:	2353      	movs	r3, #83	; 0x53
 800ccbc:	a904      	add	r1, sp, #16
 800ccbe:	185b      	adds	r3, r3, r1
 800ccc0:	2120      	movs	r1, #32
 800ccc2:	7019      	strb	r1, [r3, #0]
 800ccc4:	0713      	lsls	r3, r2, #28
 800ccc6:	d504      	bpl.n	800ccd2 <_vfiprintf_r+0x116>
 800ccc8:	2353      	movs	r3, #83	; 0x53
 800ccca:	a904      	add	r1, sp, #16
 800cccc:	185b      	adds	r3, r3, r1
 800ccce:	212b      	movs	r1, #43	; 0x2b
 800ccd0:	7019      	strb	r1, [r3, #0]
 800ccd2:	9b03      	ldr	r3, [sp, #12]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	2b2a      	cmp	r3, #42	; 0x2a
 800ccd8:	d016      	beq.n	800cd08 <_vfiprintf_r+0x14c>
 800ccda:	2100      	movs	r1, #0
 800ccdc:	68eb      	ldr	r3, [r5, #12]
 800ccde:	9f03      	ldr	r7, [sp, #12]
 800cce0:	783a      	ldrb	r2, [r7, #0]
 800cce2:	1c78      	adds	r0, r7, #1
 800cce4:	3a30      	subs	r2, #48	; 0x30
 800cce6:	4684      	mov	ip, r0
 800cce8:	2a09      	cmp	r2, #9
 800ccea:	d94f      	bls.n	800cd8c <_vfiprintf_r+0x1d0>
 800ccec:	2900      	cmp	r1, #0
 800ccee:	d111      	bne.n	800cd14 <_vfiprintf_r+0x158>
 800ccf0:	e017      	b.n	800cd22 <_vfiprintf_r+0x166>
 800ccf2:	3701      	adds	r7, #1
 800ccf4:	e7a9      	b.n	800cc4a <_vfiprintf_r+0x8e>
 800ccf6:	4b49      	ldr	r3, [pc, #292]	; (800ce1c <_vfiprintf_r+0x260>)
 800ccf8:	682a      	ldr	r2, [r5, #0]
 800ccfa:	1ac0      	subs	r0, r0, r3
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	4083      	lsls	r3, r0
 800cd00:	4313      	orrs	r3, r2
 800cd02:	602b      	str	r3, [r5, #0]
 800cd04:	9703      	str	r7, [sp, #12]
 800cd06:	e7cb      	b.n	800cca0 <_vfiprintf_r+0xe4>
 800cd08:	9b07      	ldr	r3, [sp, #28]
 800cd0a:	1d19      	adds	r1, r3, #4
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	9107      	str	r1, [sp, #28]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	db01      	blt.n	800cd18 <_vfiprintf_r+0x15c>
 800cd14:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd16:	e004      	b.n	800cd22 <_vfiprintf_r+0x166>
 800cd18:	425b      	negs	r3, r3
 800cd1a:	60eb      	str	r3, [r5, #12]
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	602b      	str	r3, [r5, #0]
 800cd22:	783b      	ldrb	r3, [r7, #0]
 800cd24:	2b2e      	cmp	r3, #46	; 0x2e
 800cd26:	d10a      	bne.n	800cd3e <_vfiprintf_r+0x182>
 800cd28:	787b      	ldrb	r3, [r7, #1]
 800cd2a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd2c:	d137      	bne.n	800cd9e <_vfiprintf_r+0x1e2>
 800cd2e:	9b07      	ldr	r3, [sp, #28]
 800cd30:	3702      	adds	r7, #2
 800cd32:	1d1a      	adds	r2, r3, #4
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	9207      	str	r2, [sp, #28]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	db2d      	blt.n	800cd98 <_vfiprintf_r+0x1dc>
 800cd3c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd3e:	2203      	movs	r2, #3
 800cd40:	7839      	ldrb	r1, [r7, #0]
 800cd42:	4837      	ldr	r0, [pc, #220]	; (800ce20 <_vfiprintf_r+0x264>)
 800cd44:	f7ff f9e8 	bl	800c118 <memchr>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	d007      	beq.n	800cd5c <_vfiprintf_r+0x1a0>
 800cd4c:	4b34      	ldr	r3, [pc, #208]	; (800ce20 <_vfiprintf_r+0x264>)
 800cd4e:	682a      	ldr	r2, [r5, #0]
 800cd50:	1ac0      	subs	r0, r0, r3
 800cd52:	2340      	movs	r3, #64	; 0x40
 800cd54:	4083      	lsls	r3, r0
 800cd56:	4313      	orrs	r3, r2
 800cd58:	3701      	adds	r7, #1
 800cd5a:	602b      	str	r3, [r5, #0]
 800cd5c:	7839      	ldrb	r1, [r7, #0]
 800cd5e:	1c7b      	adds	r3, r7, #1
 800cd60:	2206      	movs	r2, #6
 800cd62:	4830      	ldr	r0, [pc, #192]	; (800ce24 <_vfiprintf_r+0x268>)
 800cd64:	9303      	str	r3, [sp, #12]
 800cd66:	7629      	strb	r1, [r5, #24]
 800cd68:	f7ff f9d6 	bl	800c118 <memchr>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	d045      	beq.n	800cdfc <_vfiprintf_r+0x240>
 800cd70:	4b2d      	ldr	r3, [pc, #180]	; (800ce28 <_vfiprintf_r+0x26c>)
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d127      	bne.n	800cdc6 <_vfiprintf_r+0x20a>
 800cd76:	2207      	movs	r2, #7
 800cd78:	9b07      	ldr	r3, [sp, #28]
 800cd7a:	3307      	adds	r3, #7
 800cd7c:	4393      	bics	r3, r2
 800cd7e:	3308      	adds	r3, #8
 800cd80:	9307      	str	r3, [sp, #28]
 800cd82:	696b      	ldr	r3, [r5, #20]
 800cd84:	9a04      	ldr	r2, [sp, #16]
 800cd86:	189b      	adds	r3, r3, r2
 800cd88:	616b      	str	r3, [r5, #20]
 800cd8a:	e75d      	b.n	800cc48 <_vfiprintf_r+0x8c>
 800cd8c:	210a      	movs	r1, #10
 800cd8e:	434b      	muls	r3, r1
 800cd90:	4667      	mov	r7, ip
 800cd92:	189b      	adds	r3, r3, r2
 800cd94:	3909      	subs	r1, #9
 800cd96:	e7a3      	b.n	800cce0 <_vfiprintf_r+0x124>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	425b      	negs	r3, r3
 800cd9c:	e7ce      	b.n	800cd3c <_vfiprintf_r+0x180>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	001a      	movs	r2, r3
 800cda2:	3701      	adds	r7, #1
 800cda4:	606b      	str	r3, [r5, #4]
 800cda6:	7839      	ldrb	r1, [r7, #0]
 800cda8:	1c78      	adds	r0, r7, #1
 800cdaa:	3930      	subs	r1, #48	; 0x30
 800cdac:	4684      	mov	ip, r0
 800cdae:	2909      	cmp	r1, #9
 800cdb0:	d903      	bls.n	800cdba <_vfiprintf_r+0x1fe>
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0c3      	beq.n	800cd3e <_vfiprintf_r+0x182>
 800cdb6:	9209      	str	r2, [sp, #36]	; 0x24
 800cdb8:	e7c1      	b.n	800cd3e <_vfiprintf_r+0x182>
 800cdba:	230a      	movs	r3, #10
 800cdbc:	435a      	muls	r2, r3
 800cdbe:	4667      	mov	r7, ip
 800cdc0:	1852      	adds	r2, r2, r1
 800cdc2:	3b09      	subs	r3, #9
 800cdc4:	e7ef      	b.n	800cda6 <_vfiprintf_r+0x1ea>
 800cdc6:	ab07      	add	r3, sp, #28
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	0022      	movs	r2, r4
 800cdcc:	0029      	movs	r1, r5
 800cdce:	0030      	movs	r0, r6
 800cdd0:	4b16      	ldr	r3, [pc, #88]	; (800ce2c <_vfiprintf_r+0x270>)
 800cdd2:	f7fd feb1 	bl	800ab38 <_printf_float>
 800cdd6:	9004      	str	r0, [sp, #16]
 800cdd8:	9b04      	ldr	r3, [sp, #16]
 800cdda:	3301      	adds	r3, #1
 800cddc:	d1d1      	bne.n	800cd82 <_vfiprintf_r+0x1c6>
 800cdde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cde0:	07db      	lsls	r3, r3, #31
 800cde2:	d405      	bmi.n	800cdf0 <_vfiprintf_r+0x234>
 800cde4:	89a3      	ldrh	r3, [r4, #12]
 800cde6:	059b      	lsls	r3, r3, #22
 800cde8:	d402      	bmi.n	800cdf0 <_vfiprintf_r+0x234>
 800cdea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdec:	f000 fad4 	bl	800d398 <__retarget_lock_release_recursive>
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	065b      	lsls	r3, r3, #25
 800cdf4:	d500      	bpl.n	800cdf8 <_vfiprintf_r+0x23c>
 800cdf6:	e70a      	b.n	800cc0e <_vfiprintf_r+0x52>
 800cdf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cdfa:	e70a      	b.n	800cc12 <_vfiprintf_r+0x56>
 800cdfc:	ab07      	add	r3, sp, #28
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	0022      	movs	r2, r4
 800ce02:	0029      	movs	r1, r5
 800ce04:	0030      	movs	r0, r6
 800ce06:	4b09      	ldr	r3, [pc, #36]	; (800ce2c <_vfiprintf_r+0x270>)
 800ce08:	f7fe f954 	bl	800b0b4 <_printf_i>
 800ce0c:	e7e3      	b.n	800cdd6 <_vfiprintf_r+0x21a>
 800ce0e:	46c0      	nop			; (mov r8, r8)
 800ce10:	0800dc40 	.word	0x0800dc40
 800ce14:	0800dc60 	.word	0x0800dc60
 800ce18:	0800dc20 	.word	0x0800dc20
 800ce1c:	0800dc0c 	.word	0x0800dc0c
 800ce20:	0800dc12 	.word	0x0800dc12
 800ce24:	0800dc16 	.word	0x0800dc16
 800ce28:	0800ab39 	.word	0x0800ab39
 800ce2c:	0800cb97 	.word	0x0800cb97

0800ce30 <__swbuf_r>:
 800ce30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce32:	0005      	movs	r5, r0
 800ce34:	000e      	movs	r6, r1
 800ce36:	0014      	movs	r4, r2
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d004      	beq.n	800ce46 <__swbuf_r+0x16>
 800ce3c:	6983      	ldr	r3, [r0, #24]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <__swbuf_r+0x16>
 800ce42:	f000 fa07 	bl	800d254 <__sinit>
 800ce46:	4b22      	ldr	r3, [pc, #136]	; (800ced0 <__swbuf_r+0xa0>)
 800ce48:	429c      	cmp	r4, r3
 800ce4a:	d12e      	bne.n	800ceaa <__swbuf_r+0x7a>
 800ce4c:	686c      	ldr	r4, [r5, #4]
 800ce4e:	69a3      	ldr	r3, [r4, #24]
 800ce50:	60a3      	str	r3, [r4, #8]
 800ce52:	89a3      	ldrh	r3, [r4, #12]
 800ce54:	071b      	lsls	r3, r3, #28
 800ce56:	d532      	bpl.n	800cebe <__swbuf_r+0x8e>
 800ce58:	6923      	ldr	r3, [r4, #16]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d02f      	beq.n	800cebe <__swbuf_r+0x8e>
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	6922      	ldr	r2, [r4, #16]
 800ce62:	b2f7      	uxtb	r7, r6
 800ce64:	1a98      	subs	r0, r3, r2
 800ce66:	6963      	ldr	r3, [r4, #20]
 800ce68:	b2f6      	uxtb	r6, r6
 800ce6a:	4283      	cmp	r3, r0
 800ce6c:	dc05      	bgt.n	800ce7a <__swbuf_r+0x4a>
 800ce6e:	0021      	movs	r1, r4
 800ce70:	0028      	movs	r0, r5
 800ce72:	f000 f94d 	bl	800d110 <_fflush_r>
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d127      	bne.n	800ceca <__swbuf_r+0x9a>
 800ce7a:	68a3      	ldr	r3, [r4, #8]
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	3b01      	subs	r3, #1
 800ce80:	60a3      	str	r3, [r4, #8]
 800ce82:	6823      	ldr	r3, [r4, #0]
 800ce84:	1c5a      	adds	r2, r3, #1
 800ce86:	6022      	str	r2, [r4, #0]
 800ce88:	701f      	strb	r7, [r3, #0]
 800ce8a:	6963      	ldr	r3, [r4, #20]
 800ce8c:	4283      	cmp	r3, r0
 800ce8e:	d004      	beq.n	800ce9a <__swbuf_r+0x6a>
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	07db      	lsls	r3, r3, #31
 800ce94:	d507      	bpl.n	800cea6 <__swbuf_r+0x76>
 800ce96:	2e0a      	cmp	r6, #10
 800ce98:	d105      	bne.n	800cea6 <__swbuf_r+0x76>
 800ce9a:	0021      	movs	r1, r4
 800ce9c:	0028      	movs	r0, r5
 800ce9e:	f000 f937 	bl	800d110 <_fflush_r>
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d111      	bne.n	800ceca <__swbuf_r+0x9a>
 800cea6:	0030      	movs	r0, r6
 800cea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceaa:	4b0a      	ldr	r3, [pc, #40]	; (800ced4 <__swbuf_r+0xa4>)
 800ceac:	429c      	cmp	r4, r3
 800ceae:	d101      	bne.n	800ceb4 <__swbuf_r+0x84>
 800ceb0:	68ac      	ldr	r4, [r5, #8]
 800ceb2:	e7cc      	b.n	800ce4e <__swbuf_r+0x1e>
 800ceb4:	4b08      	ldr	r3, [pc, #32]	; (800ced8 <__swbuf_r+0xa8>)
 800ceb6:	429c      	cmp	r4, r3
 800ceb8:	d1c9      	bne.n	800ce4e <__swbuf_r+0x1e>
 800ceba:	68ec      	ldr	r4, [r5, #12]
 800cebc:	e7c7      	b.n	800ce4e <__swbuf_r+0x1e>
 800cebe:	0021      	movs	r1, r4
 800cec0:	0028      	movs	r0, r5
 800cec2:	f000 f819 	bl	800cef8 <__swsetup_r>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d0c9      	beq.n	800ce5e <__swbuf_r+0x2e>
 800ceca:	2601      	movs	r6, #1
 800cecc:	4276      	negs	r6, r6
 800cece:	e7ea      	b.n	800cea6 <__swbuf_r+0x76>
 800ced0:	0800dc40 	.word	0x0800dc40
 800ced4:	0800dc60 	.word	0x0800dc60
 800ced8:	0800dc20 	.word	0x0800dc20

0800cedc <__ascii_wctomb>:
 800cedc:	0003      	movs	r3, r0
 800cede:	1e08      	subs	r0, r1, #0
 800cee0:	d005      	beq.n	800ceee <__ascii_wctomb+0x12>
 800cee2:	2aff      	cmp	r2, #255	; 0xff
 800cee4:	d904      	bls.n	800cef0 <__ascii_wctomb+0x14>
 800cee6:	228a      	movs	r2, #138	; 0x8a
 800cee8:	2001      	movs	r0, #1
 800ceea:	601a      	str	r2, [r3, #0]
 800ceec:	4240      	negs	r0, r0
 800ceee:	4770      	bx	lr
 800cef0:	2001      	movs	r0, #1
 800cef2:	700a      	strb	r2, [r1, #0]
 800cef4:	e7fb      	b.n	800ceee <__ascii_wctomb+0x12>
	...

0800cef8 <__swsetup_r>:
 800cef8:	4b37      	ldr	r3, [pc, #220]	; (800cfd8 <__swsetup_r+0xe0>)
 800cefa:	b570      	push	{r4, r5, r6, lr}
 800cefc:	681d      	ldr	r5, [r3, #0]
 800cefe:	0006      	movs	r6, r0
 800cf00:	000c      	movs	r4, r1
 800cf02:	2d00      	cmp	r5, #0
 800cf04:	d005      	beq.n	800cf12 <__swsetup_r+0x1a>
 800cf06:	69ab      	ldr	r3, [r5, #24]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d102      	bne.n	800cf12 <__swsetup_r+0x1a>
 800cf0c:	0028      	movs	r0, r5
 800cf0e:	f000 f9a1 	bl	800d254 <__sinit>
 800cf12:	4b32      	ldr	r3, [pc, #200]	; (800cfdc <__swsetup_r+0xe4>)
 800cf14:	429c      	cmp	r4, r3
 800cf16:	d10f      	bne.n	800cf38 <__swsetup_r+0x40>
 800cf18:	686c      	ldr	r4, [r5, #4]
 800cf1a:	230c      	movs	r3, #12
 800cf1c:	5ee2      	ldrsh	r2, [r4, r3]
 800cf1e:	b293      	uxth	r3, r2
 800cf20:	0711      	lsls	r1, r2, #28
 800cf22:	d42d      	bmi.n	800cf80 <__swsetup_r+0x88>
 800cf24:	06d9      	lsls	r1, r3, #27
 800cf26:	d411      	bmi.n	800cf4c <__swsetup_r+0x54>
 800cf28:	2309      	movs	r3, #9
 800cf2a:	2001      	movs	r0, #1
 800cf2c:	6033      	str	r3, [r6, #0]
 800cf2e:	3337      	adds	r3, #55	; 0x37
 800cf30:	4313      	orrs	r3, r2
 800cf32:	81a3      	strh	r3, [r4, #12]
 800cf34:	4240      	negs	r0, r0
 800cf36:	bd70      	pop	{r4, r5, r6, pc}
 800cf38:	4b29      	ldr	r3, [pc, #164]	; (800cfe0 <__swsetup_r+0xe8>)
 800cf3a:	429c      	cmp	r4, r3
 800cf3c:	d101      	bne.n	800cf42 <__swsetup_r+0x4a>
 800cf3e:	68ac      	ldr	r4, [r5, #8]
 800cf40:	e7eb      	b.n	800cf1a <__swsetup_r+0x22>
 800cf42:	4b28      	ldr	r3, [pc, #160]	; (800cfe4 <__swsetup_r+0xec>)
 800cf44:	429c      	cmp	r4, r3
 800cf46:	d1e8      	bne.n	800cf1a <__swsetup_r+0x22>
 800cf48:	68ec      	ldr	r4, [r5, #12]
 800cf4a:	e7e6      	b.n	800cf1a <__swsetup_r+0x22>
 800cf4c:	075b      	lsls	r3, r3, #29
 800cf4e:	d513      	bpl.n	800cf78 <__swsetup_r+0x80>
 800cf50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf52:	2900      	cmp	r1, #0
 800cf54:	d008      	beq.n	800cf68 <__swsetup_r+0x70>
 800cf56:	0023      	movs	r3, r4
 800cf58:	3344      	adds	r3, #68	; 0x44
 800cf5a:	4299      	cmp	r1, r3
 800cf5c:	d002      	beq.n	800cf64 <__swsetup_r+0x6c>
 800cf5e:	0030      	movs	r0, r6
 800cf60:	f7fd fc98 	bl	800a894 <_free_r>
 800cf64:	2300      	movs	r3, #0
 800cf66:	6363      	str	r3, [r4, #52]	; 0x34
 800cf68:	2224      	movs	r2, #36	; 0x24
 800cf6a:	89a3      	ldrh	r3, [r4, #12]
 800cf6c:	4393      	bics	r3, r2
 800cf6e:	81a3      	strh	r3, [r4, #12]
 800cf70:	2300      	movs	r3, #0
 800cf72:	6063      	str	r3, [r4, #4]
 800cf74:	6923      	ldr	r3, [r4, #16]
 800cf76:	6023      	str	r3, [r4, #0]
 800cf78:	2308      	movs	r3, #8
 800cf7a:	89a2      	ldrh	r2, [r4, #12]
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	81a3      	strh	r3, [r4, #12]
 800cf80:	6923      	ldr	r3, [r4, #16]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10b      	bne.n	800cf9e <__swsetup_r+0xa6>
 800cf86:	21a0      	movs	r1, #160	; 0xa0
 800cf88:	2280      	movs	r2, #128	; 0x80
 800cf8a:	89a3      	ldrh	r3, [r4, #12]
 800cf8c:	0089      	lsls	r1, r1, #2
 800cf8e:	0092      	lsls	r2, r2, #2
 800cf90:	400b      	ands	r3, r1
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d003      	beq.n	800cf9e <__swsetup_r+0xa6>
 800cf96:	0021      	movs	r1, r4
 800cf98:	0030      	movs	r0, r6
 800cf9a:	f000 fa27 	bl	800d3ec <__smakebuf_r>
 800cf9e:	220c      	movs	r2, #12
 800cfa0:	5ea3      	ldrsh	r3, [r4, r2]
 800cfa2:	2001      	movs	r0, #1
 800cfa4:	001a      	movs	r2, r3
 800cfa6:	b299      	uxth	r1, r3
 800cfa8:	4002      	ands	r2, r0
 800cfaa:	4203      	tst	r3, r0
 800cfac:	d00f      	beq.n	800cfce <__swsetup_r+0xd6>
 800cfae:	2200      	movs	r2, #0
 800cfb0:	60a2      	str	r2, [r4, #8]
 800cfb2:	6962      	ldr	r2, [r4, #20]
 800cfb4:	4252      	negs	r2, r2
 800cfb6:	61a2      	str	r2, [r4, #24]
 800cfb8:	2000      	movs	r0, #0
 800cfba:	6922      	ldr	r2, [r4, #16]
 800cfbc:	4282      	cmp	r2, r0
 800cfbe:	d1ba      	bne.n	800cf36 <__swsetup_r+0x3e>
 800cfc0:	060a      	lsls	r2, r1, #24
 800cfc2:	d5b8      	bpl.n	800cf36 <__swsetup_r+0x3e>
 800cfc4:	2240      	movs	r2, #64	; 0x40
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	81a3      	strh	r3, [r4, #12]
 800cfca:	3801      	subs	r0, #1
 800cfcc:	e7b3      	b.n	800cf36 <__swsetup_r+0x3e>
 800cfce:	0788      	lsls	r0, r1, #30
 800cfd0:	d400      	bmi.n	800cfd4 <__swsetup_r+0xdc>
 800cfd2:	6962      	ldr	r2, [r4, #20]
 800cfd4:	60a2      	str	r2, [r4, #8]
 800cfd6:	e7ef      	b.n	800cfb8 <__swsetup_r+0xc0>
 800cfd8:	2000000c 	.word	0x2000000c
 800cfdc:	0800dc40 	.word	0x0800dc40
 800cfe0:	0800dc60 	.word	0x0800dc60
 800cfe4:	0800dc20 	.word	0x0800dc20

0800cfe8 <abort>:
 800cfe8:	2006      	movs	r0, #6
 800cfea:	b510      	push	{r4, lr}
 800cfec:	f000 faa6 	bl	800d53c <raise>
 800cff0:	2001      	movs	r0, #1
 800cff2:	f7f6 fb45 	bl	8003680 <_exit>
	...

0800cff8 <__sflush_r>:
 800cff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cffa:	898b      	ldrh	r3, [r1, #12]
 800cffc:	0005      	movs	r5, r0
 800cffe:	000c      	movs	r4, r1
 800d000:	071a      	lsls	r2, r3, #28
 800d002:	d45f      	bmi.n	800d0c4 <__sflush_r+0xcc>
 800d004:	684a      	ldr	r2, [r1, #4]
 800d006:	2a00      	cmp	r2, #0
 800d008:	dc04      	bgt.n	800d014 <__sflush_r+0x1c>
 800d00a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d00c:	2a00      	cmp	r2, #0
 800d00e:	dc01      	bgt.n	800d014 <__sflush_r+0x1c>
 800d010:	2000      	movs	r0, #0
 800d012:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d014:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d016:	2f00      	cmp	r7, #0
 800d018:	d0fa      	beq.n	800d010 <__sflush_r+0x18>
 800d01a:	2200      	movs	r2, #0
 800d01c:	2180      	movs	r1, #128	; 0x80
 800d01e:	682e      	ldr	r6, [r5, #0]
 800d020:	602a      	str	r2, [r5, #0]
 800d022:	001a      	movs	r2, r3
 800d024:	0149      	lsls	r1, r1, #5
 800d026:	400a      	ands	r2, r1
 800d028:	420b      	tst	r3, r1
 800d02a:	d034      	beq.n	800d096 <__sflush_r+0x9e>
 800d02c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d02e:	89a3      	ldrh	r3, [r4, #12]
 800d030:	075b      	lsls	r3, r3, #29
 800d032:	d506      	bpl.n	800d042 <__sflush_r+0x4a>
 800d034:	6863      	ldr	r3, [r4, #4]
 800d036:	1ac0      	subs	r0, r0, r3
 800d038:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d001      	beq.n	800d042 <__sflush_r+0x4a>
 800d03e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d040:	1ac0      	subs	r0, r0, r3
 800d042:	0002      	movs	r2, r0
 800d044:	6a21      	ldr	r1, [r4, #32]
 800d046:	2300      	movs	r3, #0
 800d048:	0028      	movs	r0, r5
 800d04a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d04c:	47b8      	blx	r7
 800d04e:	89a1      	ldrh	r1, [r4, #12]
 800d050:	1c43      	adds	r3, r0, #1
 800d052:	d106      	bne.n	800d062 <__sflush_r+0x6a>
 800d054:	682b      	ldr	r3, [r5, #0]
 800d056:	2b1d      	cmp	r3, #29
 800d058:	d831      	bhi.n	800d0be <__sflush_r+0xc6>
 800d05a:	4a2c      	ldr	r2, [pc, #176]	; (800d10c <__sflush_r+0x114>)
 800d05c:	40da      	lsrs	r2, r3
 800d05e:	07d3      	lsls	r3, r2, #31
 800d060:	d52d      	bpl.n	800d0be <__sflush_r+0xc6>
 800d062:	2300      	movs	r3, #0
 800d064:	6063      	str	r3, [r4, #4]
 800d066:	6923      	ldr	r3, [r4, #16]
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	04cb      	lsls	r3, r1, #19
 800d06c:	d505      	bpl.n	800d07a <__sflush_r+0x82>
 800d06e:	1c43      	adds	r3, r0, #1
 800d070:	d102      	bne.n	800d078 <__sflush_r+0x80>
 800d072:	682b      	ldr	r3, [r5, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d100      	bne.n	800d07a <__sflush_r+0x82>
 800d078:	6560      	str	r0, [r4, #84]	; 0x54
 800d07a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d07c:	602e      	str	r6, [r5, #0]
 800d07e:	2900      	cmp	r1, #0
 800d080:	d0c6      	beq.n	800d010 <__sflush_r+0x18>
 800d082:	0023      	movs	r3, r4
 800d084:	3344      	adds	r3, #68	; 0x44
 800d086:	4299      	cmp	r1, r3
 800d088:	d002      	beq.n	800d090 <__sflush_r+0x98>
 800d08a:	0028      	movs	r0, r5
 800d08c:	f7fd fc02 	bl	800a894 <_free_r>
 800d090:	2000      	movs	r0, #0
 800d092:	6360      	str	r0, [r4, #52]	; 0x34
 800d094:	e7bd      	b.n	800d012 <__sflush_r+0x1a>
 800d096:	2301      	movs	r3, #1
 800d098:	0028      	movs	r0, r5
 800d09a:	6a21      	ldr	r1, [r4, #32]
 800d09c:	47b8      	blx	r7
 800d09e:	1c43      	adds	r3, r0, #1
 800d0a0:	d1c5      	bne.n	800d02e <__sflush_r+0x36>
 800d0a2:	682b      	ldr	r3, [r5, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d0c2      	beq.n	800d02e <__sflush_r+0x36>
 800d0a8:	2b1d      	cmp	r3, #29
 800d0aa:	d001      	beq.n	800d0b0 <__sflush_r+0xb8>
 800d0ac:	2b16      	cmp	r3, #22
 800d0ae:	d101      	bne.n	800d0b4 <__sflush_r+0xbc>
 800d0b0:	602e      	str	r6, [r5, #0]
 800d0b2:	e7ad      	b.n	800d010 <__sflush_r+0x18>
 800d0b4:	2340      	movs	r3, #64	; 0x40
 800d0b6:	89a2      	ldrh	r2, [r4, #12]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	81a3      	strh	r3, [r4, #12]
 800d0bc:	e7a9      	b.n	800d012 <__sflush_r+0x1a>
 800d0be:	2340      	movs	r3, #64	; 0x40
 800d0c0:	430b      	orrs	r3, r1
 800d0c2:	e7fa      	b.n	800d0ba <__sflush_r+0xc2>
 800d0c4:	690f      	ldr	r7, [r1, #16]
 800d0c6:	2f00      	cmp	r7, #0
 800d0c8:	d0a2      	beq.n	800d010 <__sflush_r+0x18>
 800d0ca:	680a      	ldr	r2, [r1, #0]
 800d0cc:	600f      	str	r7, [r1, #0]
 800d0ce:	1bd2      	subs	r2, r2, r7
 800d0d0:	9201      	str	r2, [sp, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	079b      	lsls	r3, r3, #30
 800d0d6:	d100      	bne.n	800d0da <__sflush_r+0xe2>
 800d0d8:	694a      	ldr	r2, [r1, #20]
 800d0da:	60a2      	str	r2, [r4, #8]
 800d0dc:	9b01      	ldr	r3, [sp, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	dc00      	bgt.n	800d0e4 <__sflush_r+0xec>
 800d0e2:	e795      	b.n	800d010 <__sflush_r+0x18>
 800d0e4:	003a      	movs	r2, r7
 800d0e6:	0028      	movs	r0, r5
 800d0e8:	9b01      	ldr	r3, [sp, #4]
 800d0ea:	6a21      	ldr	r1, [r4, #32]
 800d0ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0ee:	47b0      	blx	r6
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	dc06      	bgt.n	800d102 <__sflush_r+0x10a>
 800d0f4:	2340      	movs	r3, #64	; 0x40
 800d0f6:	2001      	movs	r0, #1
 800d0f8:	89a2      	ldrh	r2, [r4, #12]
 800d0fa:	4240      	negs	r0, r0
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	e787      	b.n	800d012 <__sflush_r+0x1a>
 800d102:	9b01      	ldr	r3, [sp, #4]
 800d104:	183f      	adds	r7, r7, r0
 800d106:	1a1b      	subs	r3, r3, r0
 800d108:	9301      	str	r3, [sp, #4]
 800d10a:	e7e7      	b.n	800d0dc <__sflush_r+0xe4>
 800d10c:	20400001 	.word	0x20400001

0800d110 <_fflush_r>:
 800d110:	690b      	ldr	r3, [r1, #16]
 800d112:	b570      	push	{r4, r5, r6, lr}
 800d114:	0005      	movs	r5, r0
 800d116:	000c      	movs	r4, r1
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d102      	bne.n	800d122 <_fflush_r+0x12>
 800d11c:	2500      	movs	r5, #0
 800d11e:	0028      	movs	r0, r5
 800d120:	bd70      	pop	{r4, r5, r6, pc}
 800d122:	2800      	cmp	r0, #0
 800d124:	d004      	beq.n	800d130 <_fflush_r+0x20>
 800d126:	6983      	ldr	r3, [r0, #24]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d101      	bne.n	800d130 <_fflush_r+0x20>
 800d12c:	f000 f892 	bl	800d254 <__sinit>
 800d130:	4b14      	ldr	r3, [pc, #80]	; (800d184 <_fflush_r+0x74>)
 800d132:	429c      	cmp	r4, r3
 800d134:	d11b      	bne.n	800d16e <_fflush_r+0x5e>
 800d136:	686c      	ldr	r4, [r5, #4]
 800d138:	220c      	movs	r2, #12
 800d13a:	5ea3      	ldrsh	r3, [r4, r2]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d0ed      	beq.n	800d11c <_fflush_r+0xc>
 800d140:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d142:	07d2      	lsls	r2, r2, #31
 800d144:	d404      	bmi.n	800d150 <_fflush_r+0x40>
 800d146:	059b      	lsls	r3, r3, #22
 800d148:	d402      	bmi.n	800d150 <_fflush_r+0x40>
 800d14a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d14c:	f000 f923 	bl	800d396 <__retarget_lock_acquire_recursive>
 800d150:	0028      	movs	r0, r5
 800d152:	0021      	movs	r1, r4
 800d154:	f7ff ff50 	bl	800cff8 <__sflush_r>
 800d158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d15a:	0005      	movs	r5, r0
 800d15c:	07db      	lsls	r3, r3, #31
 800d15e:	d4de      	bmi.n	800d11e <_fflush_r+0xe>
 800d160:	89a3      	ldrh	r3, [r4, #12]
 800d162:	059b      	lsls	r3, r3, #22
 800d164:	d4db      	bmi.n	800d11e <_fflush_r+0xe>
 800d166:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d168:	f000 f916 	bl	800d398 <__retarget_lock_release_recursive>
 800d16c:	e7d7      	b.n	800d11e <_fflush_r+0xe>
 800d16e:	4b06      	ldr	r3, [pc, #24]	; (800d188 <_fflush_r+0x78>)
 800d170:	429c      	cmp	r4, r3
 800d172:	d101      	bne.n	800d178 <_fflush_r+0x68>
 800d174:	68ac      	ldr	r4, [r5, #8]
 800d176:	e7df      	b.n	800d138 <_fflush_r+0x28>
 800d178:	4b04      	ldr	r3, [pc, #16]	; (800d18c <_fflush_r+0x7c>)
 800d17a:	429c      	cmp	r4, r3
 800d17c:	d1dc      	bne.n	800d138 <_fflush_r+0x28>
 800d17e:	68ec      	ldr	r4, [r5, #12]
 800d180:	e7da      	b.n	800d138 <_fflush_r+0x28>
 800d182:	46c0      	nop			; (mov r8, r8)
 800d184:	0800dc40 	.word	0x0800dc40
 800d188:	0800dc60 	.word	0x0800dc60
 800d18c:	0800dc20 	.word	0x0800dc20

0800d190 <std>:
 800d190:	2300      	movs	r3, #0
 800d192:	b510      	push	{r4, lr}
 800d194:	0004      	movs	r4, r0
 800d196:	6003      	str	r3, [r0, #0]
 800d198:	6043      	str	r3, [r0, #4]
 800d19a:	6083      	str	r3, [r0, #8]
 800d19c:	8181      	strh	r1, [r0, #12]
 800d19e:	6643      	str	r3, [r0, #100]	; 0x64
 800d1a0:	0019      	movs	r1, r3
 800d1a2:	81c2      	strh	r2, [r0, #14]
 800d1a4:	6103      	str	r3, [r0, #16]
 800d1a6:	6143      	str	r3, [r0, #20]
 800d1a8:	6183      	str	r3, [r0, #24]
 800d1aa:	2208      	movs	r2, #8
 800d1ac:	305c      	adds	r0, #92	; 0x5c
 800d1ae:	f7fd fb68 	bl	800a882 <memset>
 800d1b2:	4b05      	ldr	r3, [pc, #20]	; (800d1c8 <std+0x38>)
 800d1b4:	6263      	str	r3, [r4, #36]	; 0x24
 800d1b6:	4b05      	ldr	r3, [pc, #20]	; (800d1cc <std+0x3c>)
 800d1b8:	6224      	str	r4, [r4, #32]
 800d1ba:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1bc:	4b04      	ldr	r3, [pc, #16]	; (800d1d0 <std+0x40>)
 800d1be:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1c0:	4b04      	ldr	r3, [pc, #16]	; (800d1d4 <std+0x44>)
 800d1c2:	6323      	str	r3, [r4, #48]	; 0x30
 800d1c4:	bd10      	pop	{r4, pc}
 800d1c6:	46c0      	nop			; (mov r8, r8)
 800d1c8:	0800d57d 	.word	0x0800d57d
 800d1cc:	0800d5a5 	.word	0x0800d5a5
 800d1d0:	0800d5dd 	.word	0x0800d5dd
 800d1d4:	0800d609 	.word	0x0800d609

0800d1d8 <_cleanup_r>:
 800d1d8:	b510      	push	{r4, lr}
 800d1da:	4902      	ldr	r1, [pc, #8]	; (800d1e4 <_cleanup_r+0xc>)
 800d1dc:	f000 f8ba 	bl	800d354 <_fwalk_reent>
 800d1e0:	bd10      	pop	{r4, pc}
 800d1e2:	46c0      	nop			; (mov r8, r8)
 800d1e4:	0800d111 	.word	0x0800d111

0800d1e8 <__sfmoreglue>:
 800d1e8:	b570      	push	{r4, r5, r6, lr}
 800d1ea:	2568      	movs	r5, #104	; 0x68
 800d1ec:	1e4a      	subs	r2, r1, #1
 800d1ee:	4355      	muls	r5, r2
 800d1f0:	000e      	movs	r6, r1
 800d1f2:	0029      	movs	r1, r5
 800d1f4:	3174      	adds	r1, #116	; 0x74
 800d1f6:	f7fd fb97 	bl	800a928 <_malloc_r>
 800d1fa:	1e04      	subs	r4, r0, #0
 800d1fc:	d008      	beq.n	800d210 <__sfmoreglue+0x28>
 800d1fe:	2100      	movs	r1, #0
 800d200:	002a      	movs	r2, r5
 800d202:	6001      	str	r1, [r0, #0]
 800d204:	6046      	str	r6, [r0, #4]
 800d206:	300c      	adds	r0, #12
 800d208:	60a0      	str	r0, [r4, #8]
 800d20a:	3268      	adds	r2, #104	; 0x68
 800d20c:	f7fd fb39 	bl	800a882 <memset>
 800d210:	0020      	movs	r0, r4
 800d212:	bd70      	pop	{r4, r5, r6, pc}

0800d214 <__sfp_lock_acquire>:
 800d214:	b510      	push	{r4, lr}
 800d216:	4802      	ldr	r0, [pc, #8]	; (800d220 <__sfp_lock_acquire+0xc>)
 800d218:	f000 f8bd 	bl	800d396 <__retarget_lock_acquire_recursive>
 800d21c:	bd10      	pop	{r4, pc}
 800d21e:	46c0      	nop			; (mov r8, r8)
 800d220:	200005a8 	.word	0x200005a8

0800d224 <__sfp_lock_release>:
 800d224:	b510      	push	{r4, lr}
 800d226:	4802      	ldr	r0, [pc, #8]	; (800d230 <__sfp_lock_release+0xc>)
 800d228:	f000 f8b6 	bl	800d398 <__retarget_lock_release_recursive>
 800d22c:	bd10      	pop	{r4, pc}
 800d22e:	46c0      	nop			; (mov r8, r8)
 800d230:	200005a8 	.word	0x200005a8

0800d234 <__sinit_lock_acquire>:
 800d234:	b510      	push	{r4, lr}
 800d236:	4802      	ldr	r0, [pc, #8]	; (800d240 <__sinit_lock_acquire+0xc>)
 800d238:	f000 f8ad 	bl	800d396 <__retarget_lock_acquire_recursive>
 800d23c:	bd10      	pop	{r4, pc}
 800d23e:	46c0      	nop			; (mov r8, r8)
 800d240:	200005a3 	.word	0x200005a3

0800d244 <__sinit_lock_release>:
 800d244:	b510      	push	{r4, lr}
 800d246:	4802      	ldr	r0, [pc, #8]	; (800d250 <__sinit_lock_release+0xc>)
 800d248:	f000 f8a6 	bl	800d398 <__retarget_lock_release_recursive>
 800d24c:	bd10      	pop	{r4, pc}
 800d24e:	46c0      	nop			; (mov r8, r8)
 800d250:	200005a3 	.word	0x200005a3

0800d254 <__sinit>:
 800d254:	b513      	push	{r0, r1, r4, lr}
 800d256:	0004      	movs	r4, r0
 800d258:	f7ff ffec 	bl	800d234 <__sinit_lock_acquire>
 800d25c:	69a3      	ldr	r3, [r4, #24]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d002      	beq.n	800d268 <__sinit+0x14>
 800d262:	f7ff ffef 	bl	800d244 <__sinit_lock_release>
 800d266:	bd13      	pop	{r0, r1, r4, pc}
 800d268:	64a3      	str	r3, [r4, #72]	; 0x48
 800d26a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d26c:	6523      	str	r3, [r4, #80]	; 0x50
 800d26e:	4b13      	ldr	r3, [pc, #76]	; (800d2bc <__sinit+0x68>)
 800d270:	4a13      	ldr	r2, [pc, #76]	; (800d2c0 <__sinit+0x6c>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	62a2      	str	r2, [r4, #40]	; 0x28
 800d276:	9301      	str	r3, [sp, #4]
 800d278:	42a3      	cmp	r3, r4
 800d27a:	d101      	bne.n	800d280 <__sinit+0x2c>
 800d27c:	2301      	movs	r3, #1
 800d27e:	61a3      	str	r3, [r4, #24]
 800d280:	0020      	movs	r0, r4
 800d282:	f000 f81f 	bl	800d2c4 <__sfp>
 800d286:	6060      	str	r0, [r4, #4]
 800d288:	0020      	movs	r0, r4
 800d28a:	f000 f81b 	bl	800d2c4 <__sfp>
 800d28e:	60a0      	str	r0, [r4, #8]
 800d290:	0020      	movs	r0, r4
 800d292:	f000 f817 	bl	800d2c4 <__sfp>
 800d296:	2200      	movs	r2, #0
 800d298:	2104      	movs	r1, #4
 800d29a:	60e0      	str	r0, [r4, #12]
 800d29c:	6860      	ldr	r0, [r4, #4]
 800d29e:	f7ff ff77 	bl	800d190 <std>
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	2109      	movs	r1, #9
 800d2a6:	68a0      	ldr	r0, [r4, #8]
 800d2a8:	f7ff ff72 	bl	800d190 <std>
 800d2ac:	2202      	movs	r2, #2
 800d2ae:	2112      	movs	r1, #18
 800d2b0:	68e0      	ldr	r0, [r4, #12]
 800d2b2:	f7ff ff6d 	bl	800d190 <std>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	61a3      	str	r3, [r4, #24]
 800d2ba:	e7d2      	b.n	800d262 <__sinit+0xe>
 800d2bc:	0800d898 	.word	0x0800d898
 800d2c0:	0800d1d9 	.word	0x0800d1d9

0800d2c4 <__sfp>:
 800d2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2c6:	0007      	movs	r7, r0
 800d2c8:	f7ff ffa4 	bl	800d214 <__sfp_lock_acquire>
 800d2cc:	4b1f      	ldr	r3, [pc, #124]	; (800d34c <__sfp+0x88>)
 800d2ce:	681e      	ldr	r6, [r3, #0]
 800d2d0:	69b3      	ldr	r3, [r6, #24]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d102      	bne.n	800d2dc <__sfp+0x18>
 800d2d6:	0030      	movs	r0, r6
 800d2d8:	f7ff ffbc 	bl	800d254 <__sinit>
 800d2dc:	3648      	adds	r6, #72	; 0x48
 800d2de:	68b4      	ldr	r4, [r6, #8]
 800d2e0:	6873      	ldr	r3, [r6, #4]
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	d504      	bpl.n	800d2f0 <__sfp+0x2c>
 800d2e6:	6833      	ldr	r3, [r6, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d022      	beq.n	800d332 <__sfp+0x6e>
 800d2ec:	6836      	ldr	r6, [r6, #0]
 800d2ee:	e7f6      	b.n	800d2de <__sfp+0x1a>
 800d2f0:	220c      	movs	r2, #12
 800d2f2:	5ea5      	ldrsh	r5, [r4, r2]
 800d2f4:	2d00      	cmp	r5, #0
 800d2f6:	d11a      	bne.n	800d32e <__sfp+0x6a>
 800d2f8:	0020      	movs	r0, r4
 800d2fa:	4b15      	ldr	r3, [pc, #84]	; (800d350 <__sfp+0x8c>)
 800d2fc:	3058      	adds	r0, #88	; 0x58
 800d2fe:	60e3      	str	r3, [r4, #12]
 800d300:	6665      	str	r5, [r4, #100]	; 0x64
 800d302:	f000 f847 	bl	800d394 <__retarget_lock_init_recursive>
 800d306:	f7ff ff8d 	bl	800d224 <__sfp_lock_release>
 800d30a:	0020      	movs	r0, r4
 800d30c:	2208      	movs	r2, #8
 800d30e:	0029      	movs	r1, r5
 800d310:	6025      	str	r5, [r4, #0]
 800d312:	60a5      	str	r5, [r4, #8]
 800d314:	6065      	str	r5, [r4, #4]
 800d316:	6125      	str	r5, [r4, #16]
 800d318:	6165      	str	r5, [r4, #20]
 800d31a:	61a5      	str	r5, [r4, #24]
 800d31c:	305c      	adds	r0, #92	; 0x5c
 800d31e:	f7fd fab0 	bl	800a882 <memset>
 800d322:	6365      	str	r5, [r4, #52]	; 0x34
 800d324:	63a5      	str	r5, [r4, #56]	; 0x38
 800d326:	64a5      	str	r5, [r4, #72]	; 0x48
 800d328:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d32a:	0020      	movs	r0, r4
 800d32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d32e:	3468      	adds	r4, #104	; 0x68
 800d330:	e7d7      	b.n	800d2e2 <__sfp+0x1e>
 800d332:	2104      	movs	r1, #4
 800d334:	0038      	movs	r0, r7
 800d336:	f7ff ff57 	bl	800d1e8 <__sfmoreglue>
 800d33a:	1e04      	subs	r4, r0, #0
 800d33c:	6030      	str	r0, [r6, #0]
 800d33e:	d1d5      	bne.n	800d2ec <__sfp+0x28>
 800d340:	f7ff ff70 	bl	800d224 <__sfp_lock_release>
 800d344:	230c      	movs	r3, #12
 800d346:	603b      	str	r3, [r7, #0]
 800d348:	e7ef      	b.n	800d32a <__sfp+0x66>
 800d34a:	46c0      	nop			; (mov r8, r8)
 800d34c:	0800d898 	.word	0x0800d898
 800d350:	ffff0001 	.word	0xffff0001

0800d354 <_fwalk_reent>:
 800d354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d356:	0004      	movs	r4, r0
 800d358:	0006      	movs	r6, r0
 800d35a:	2700      	movs	r7, #0
 800d35c:	9101      	str	r1, [sp, #4]
 800d35e:	3448      	adds	r4, #72	; 0x48
 800d360:	6863      	ldr	r3, [r4, #4]
 800d362:	68a5      	ldr	r5, [r4, #8]
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	9b00      	ldr	r3, [sp, #0]
 800d368:	3b01      	subs	r3, #1
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	d504      	bpl.n	800d378 <_fwalk_reent+0x24>
 800d36e:	6824      	ldr	r4, [r4, #0]
 800d370:	2c00      	cmp	r4, #0
 800d372:	d1f5      	bne.n	800d360 <_fwalk_reent+0xc>
 800d374:	0038      	movs	r0, r7
 800d376:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d378:	89ab      	ldrh	r3, [r5, #12]
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d908      	bls.n	800d390 <_fwalk_reent+0x3c>
 800d37e:	220e      	movs	r2, #14
 800d380:	5eab      	ldrsh	r3, [r5, r2]
 800d382:	3301      	adds	r3, #1
 800d384:	d004      	beq.n	800d390 <_fwalk_reent+0x3c>
 800d386:	0029      	movs	r1, r5
 800d388:	0030      	movs	r0, r6
 800d38a:	9b01      	ldr	r3, [sp, #4]
 800d38c:	4798      	blx	r3
 800d38e:	4307      	orrs	r7, r0
 800d390:	3568      	adds	r5, #104	; 0x68
 800d392:	e7e8      	b.n	800d366 <_fwalk_reent+0x12>

0800d394 <__retarget_lock_init_recursive>:
 800d394:	4770      	bx	lr

0800d396 <__retarget_lock_acquire_recursive>:
 800d396:	4770      	bx	lr

0800d398 <__retarget_lock_release_recursive>:
 800d398:	4770      	bx	lr
	...

0800d39c <__swhatbuf_r>:
 800d39c:	b570      	push	{r4, r5, r6, lr}
 800d39e:	000e      	movs	r6, r1
 800d3a0:	001d      	movs	r5, r3
 800d3a2:	230e      	movs	r3, #14
 800d3a4:	5ec9      	ldrsh	r1, [r1, r3]
 800d3a6:	0014      	movs	r4, r2
 800d3a8:	b096      	sub	sp, #88	; 0x58
 800d3aa:	2900      	cmp	r1, #0
 800d3ac:	da07      	bge.n	800d3be <__swhatbuf_r+0x22>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	602b      	str	r3, [r5, #0]
 800d3b2:	89b3      	ldrh	r3, [r6, #12]
 800d3b4:	061b      	lsls	r3, r3, #24
 800d3b6:	d411      	bmi.n	800d3dc <__swhatbuf_r+0x40>
 800d3b8:	2380      	movs	r3, #128	; 0x80
 800d3ba:	00db      	lsls	r3, r3, #3
 800d3bc:	e00f      	b.n	800d3de <__swhatbuf_r+0x42>
 800d3be:	466a      	mov	r2, sp
 800d3c0:	f000 f94e 	bl	800d660 <_fstat_r>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	dbf2      	blt.n	800d3ae <__swhatbuf_r+0x12>
 800d3c8:	23f0      	movs	r3, #240	; 0xf0
 800d3ca:	9901      	ldr	r1, [sp, #4]
 800d3cc:	021b      	lsls	r3, r3, #8
 800d3ce:	4019      	ands	r1, r3
 800d3d0:	4b05      	ldr	r3, [pc, #20]	; (800d3e8 <__swhatbuf_r+0x4c>)
 800d3d2:	18c9      	adds	r1, r1, r3
 800d3d4:	424b      	negs	r3, r1
 800d3d6:	4159      	adcs	r1, r3
 800d3d8:	6029      	str	r1, [r5, #0]
 800d3da:	e7ed      	b.n	800d3b8 <__swhatbuf_r+0x1c>
 800d3dc:	2340      	movs	r3, #64	; 0x40
 800d3de:	2000      	movs	r0, #0
 800d3e0:	6023      	str	r3, [r4, #0]
 800d3e2:	b016      	add	sp, #88	; 0x58
 800d3e4:	bd70      	pop	{r4, r5, r6, pc}
 800d3e6:	46c0      	nop			; (mov r8, r8)
 800d3e8:	ffffe000 	.word	0xffffe000

0800d3ec <__smakebuf_r>:
 800d3ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3ee:	2602      	movs	r6, #2
 800d3f0:	898b      	ldrh	r3, [r1, #12]
 800d3f2:	0005      	movs	r5, r0
 800d3f4:	000c      	movs	r4, r1
 800d3f6:	4233      	tst	r3, r6
 800d3f8:	d006      	beq.n	800d408 <__smakebuf_r+0x1c>
 800d3fa:	0023      	movs	r3, r4
 800d3fc:	3347      	adds	r3, #71	; 0x47
 800d3fe:	6023      	str	r3, [r4, #0]
 800d400:	6123      	str	r3, [r4, #16]
 800d402:	2301      	movs	r3, #1
 800d404:	6163      	str	r3, [r4, #20]
 800d406:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d408:	466a      	mov	r2, sp
 800d40a:	ab01      	add	r3, sp, #4
 800d40c:	f7ff ffc6 	bl	800d39c <__swhatbuf_r>
 800d410:	9900      	ldr	r1, [sp, #0]
 800d412:	0007      	movs	r7, r0
 800d414:	0028      	movs	r0, r5
 800d416:	f7fd fa87 	bl	800a928 <_malloc_r>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d108      	bne.n	800d430 <__smakebuf_r+0x44>
 800d41e:	220c      	movs	r2, #12
 800d420:	5ea3      	ldrsh	r3, [r4, r2]
 800d422:	059a      	lsls	r2, r3, #22
 800d424:	d4ef      	bmi.n	800d406 <__smakebuf_r+0x1a>
 800d426:	2203      	movs	r2, #3
 800d428:	4393      	bics	r3, r2
 800d42a:	431e      	orrs	r6, r3
 800d42c:	81a6      	strh	r6, [r4, #12]
 800d42e:	e7e4      	b.n	800d3fa <__smakebuf_r+0xe>
 800d430:	4b0f      	ldr	r3, [pc, #60]	; (800d470 <__smakebuf_r+0x84>)
 800d432:	62ab      	str	r3, [r5, #40]	; 0x28
 800d434:	2380      	movs	r3, #128	; 0x80
 800d436:	89a2      	ldrh	r2, [r4, #12]
 800d438:	6020      	str	r0, [r4, #0]
 800d43a:	4313      	orrs	r3, r2
 800d43c:	81a3      	strh	r3, [r4, #12]
 800d43e:	9b00      	ldr	r3, [sp, #0]
 800d440:	6120      	str	r0, [r4, #16]
 800d442:	6163      	str	r3, [r4, #20]
 800d444:	9b01      	ldr	r3, [sp, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00d      	beq.n	800d466 <__smakebuf_r+0x7a>
 800d44a:	0028      	movs	r0, r5
 800d44c:	230e      	movs	r3, #14
 800d44e:	5ee1      	ldrsh	r1, [r4, r3]
 800d450:	f000 f918 	bl	800d684 <_isatty_r>
 800d454:	2800      	cmp	r0, #0
 800d456:	d006      	beq.n	800d466 <__smakebuf_r+0x7a>
 800d458:	2203      	movs	r2, #3
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	4393      	bics	r3, r2
 800d45e:	001a      	movs	r2, r3
 800d460:	2301      	movs	r3, #1
 800d462:	4313      	orrs	r3, r2
 800d464:	81a3      	strh	r3, [r4, #12]
 800d466:	89a0      	ldrh	r0, [r4, #12]
 800d468:	4307      	orrs	r7, r0
 800d46a:	81a7      	strh	r7, [r4, #12]
 800d46c:	e7cb      	b.n	800d406 <__smakebuf_r+0x1a>
 800d46e:	46c0      	nop			; (mov r8, r8)
 800d470:	0800d1d9 	.word	0x0800d1d9

0800d474 <memmove>:
 800d474:	b510      	push	{r4, lr}
 800d476:	4288      	cmp	r0, r1
 800d478:	d902      	bls.n	800d480 <memmove+0xc>
 800d47a:	188b      	adds	r3, r1, r2
 800d47c:	4298      	cmp	r0, r3
 800d47e:	d303      	bcc.n	800d488 <memmove+0x14>
 800d480:	2300      	movs	r3, #0
 800d482:	e007      	b.n	800d494 <memmove+0x20>
 800d484:	5c8b      	ldrb	r3, [r1, r2]
 800d486:	5483      	strb	r3, [r0, r2]
 800d488:	3a01      	subs	r2, #1
 800d48a:	d2fb      	bcs.n	800d484 <memmove+0x10>
 800d48c:	bd10      	pop	{r4, pc}
 800d48e:	5ccc      	ldrb	r4, [r1, r3]
 800d490:	54c4      	strb	r4, [r0, r3]
 800d492:	3301      	adds	r3, #1
 800d494:	429a      	cmp	r2, r3
 800d496:	d1fa      	bne.n	800d48e <memmove+0x1a>
 800d498:	e7f8      	b.n	800d48c <memmove+0x18>

0800d49a <_realloc_r>:
 800d49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49c:	0007      	movs	r7, r0
 800d49e:	000d      	movs	r5, r1
 800d4a0:	0016      	movs	r6, r2
 800d4a2:	2900      	cmp	r1, #0
 800d4a4:	d105      	bne.n	800d4b2 <_realloc_r+0x18>
 800d4a6:	0011      	movs	r1, r2
 800d4a8:	f7fd fa3e 	bl	800a928 <_malloc_r>
 800d4ac:	0004      	movs	r4, r0
 800d4ae:	0020      	movs	r0, r4
 800d4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4b2:	2a00      	cmp	r2, #0
 800d4b4:	d103      	bne.n	800d4be <_realloc_r+0x24>
 800d4b6:	f7fd f9ed 	bl	800a894 <_free_r>
 800d4ba:	0034      	movs	r4, r6
 800d4bc:	e7f7      	b.n	800d4ae <_realloc_r+0x14>
 800d4be:	f000 f907 	bl	800d6d0 <_malloc_usable_size_r>
 800d4c2:	002c      	movs	r4, r5
 800d4c4:	42b0      	cmp	r0, r6
 800d4c6:	d2f2      	bcs.n	800d4ae <_realloc_r+0x14>
 800d4c8:	0031      	movs	r1, r6
 800d4ca:	0038      	movs	r0, r7
 800d4cc:	f7fd fa2c 	bl	800a928 <_malloc_r>
 800d4d0:	1e04      	subs	r4, r0, #0
 800d4d2:	d0ec      	beq.n	800d4ae <_realloc_r+0x14>
 800d4d4:	0029      	movs	r1, r5
 800d4d6:	0032      	movs	r2, r6
 800d4d8:	f7fd f9ca 	bl	800a870 <memcpy>
 800d4dc:	0029      	movs	r1, r5
 800d4de:	0038      	movs	r0, r7
 800d4e0:	f7fd f9d8 	bl	800a894 <_free_r>
 800d4e4:	e7e3      	b.n	800d4ae <_realloc_r+0x14>

0800d4e6 <_raise_r>:
 800d4e6:	b570      	push	{r4, r5, r6, lr}
 800d4e8:	0004      	movs	r4, r0
 800d4ea:	000d      	movs	r5, r1
 800d4ec:	291f      	cmp	r1, #31
 800d4ee:	d904      	bls.n	800d4fa <_raise_r+0x14>
 800d4f0:	2316      	movs	r3, #22
 800d4f2:	6003      	str	r3, [r0, #0]
 800d4f4:	2001      	movs	r0, #1
 800d4f6:	4240      	negs	r0, r0
 800d4f8:	bd70      	pop	{r4, r5, r6, pc}
 800d4fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d004      	beq.n	800d50a <_raise_r+0x24>
 800d500:	008a      	lsls	r2, r1, #2
 800d502:	189b      	adds	r3, r3, r2
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	2a00      	cmp	r2, #0
 800d508:	d108      	bne.n	800d51c <_raise_r+0x36>
 800d50a:	0020      	movs	r0, r4
 800d50c:	f000 f832 	bl	800d574 <_getpid_r>
 800d510:	002a      	movs	r2, r5
 800d512:	0001      	movs	r1, r0
 800d514:	0020      	movs	r0, r4
 800d516:	f000 f81b 	bl	800d550 <_kill_r>
 800d51a:	e7ed      	b.n	800d4f8 <_raise_r+0x12>
 800d51c:	2000      	movs	r0, #0
 800d51e:	2a01      	cmp	r2, #1
 800d520:	d0ea      	beq.n	800d4f8 <_raise_r+0x12>
 800d522:	1c51      	adds	r1, r2, #1
 800d524:	d103      	bne.n	800d52e <_raise_r+0x48>
 800d526:	2316      	movs	r3, #22
 800d528:	3001      	adds	r0, #1
 800d52a:	6023      	str	r3, [r4, #0]
 800d52c:	e7e4      	b.n	800d4f8 <_raise_r+0x12>
 800d52e:	2400      	movs	r4, #0
 800d530:	0028      	movs	r0, r5
 800d532:	601c      	str	r4, [r3, #0]
 800d534:	4790      	blx	r2
 800d536:	0020      	movs	r0, r4
 800d538:	e7de      	b.n	800d4f8 <_raise_r+0x12>
	...

0800d53c <raise>:
 800d53c:	b510      	push	{r4, lr}
 800d53e:	4b03      	ldr	r3, [pc, #12]	; (800d54c <raise+0x10>)
 800d540:	0001      	movs	r1, r0
 800d542:	6818      	ldr	r0, [r3, #0]
 800d544:	f7ff ffcf 	bl	800d4e6 <_raise_r>
 800d548:	bd10      	pop	{r4, pc}
 800d54a:	46c0      	nop			; (mov r8, r8)
 800d54c:	2000000c 	.word	0x2000000c

0800d550 <_kill_r>:
 800d550:	2300      	movs	r3, #0
 800d552:	b570      	push	{r4, r5, r6, lr}
 800d554:	4d06      	ldr	r5, [pc, #24]	; (800d570 <_kill_r+0x20>)
 800d556:	0004      	movs	r4, r0
 800d558:	0008      	movs	r0, r1
 800d55a:	0011      	movs	r1, r2
 800d55c:	602b      	str	r3, [r5, #0]
 800d55e:	f7f6 f87f 	bl	8003660 <_kill>
 800d562:	1c43      	adds	r3, r0, #1
 800d564:	d103      	bne.n	800d56e <_kill_r+0x1e>
 800d566:	682b      	ldr	r3, [r5, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d000      	beq.n	800d56e <_kill_r+0x1e>
 800d56c:	6023      	str	r3, [r4, #0]
 800d56e:	bd70      	pop	{r4, r5, r6, pc}
 800d570:	2000059c 	.word	0x2000059c

0800d574 <_getpid_r>:
 800d574:	b510      	push	{r4, lr}
 800d576:	f7f6 f86d 	bl	8003654 <_getpid>
 800d57a:	bd10      	pop	{r4, pc}

0800d57c <__sread>:
 800d57c:	b570      	push	{r4, r5, r6, lr}
 800d57e:	000c      	movs	r4, r1
 800d580:	250e      	movs	r5, #14
 800d582:	5f49      	ldrsh	r1, [r1, r5]
 800d584:	f000 f8ac 	bl	800d6e0 <_read_r>
 800d588:	2800      	cmp	r0, #0
 800d58a:	db03      	blt.n	800d594 <__sread+0x18>
 800d58c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d58e:	181b      	adds	r3, r3, r0
 800d590:	6563      	str	r3, [r4, #84]	; 0x54
 800d592:	bd70      	pop	{r4, r5, r6, pc}
 800d594:	89a3      	ldrh	r3, [r4, #12]
 800d596:	4a02      	ldr	r2, [pc, #8]	; (800d5a0 <__sread+0x24>)
 800d598:	4013      	ands	r3, r2
 800d59a:	81a3      	strh	r3, [r4, #12]
 800d59c:	e7f9      	b.n	800d592 <__sread+0x16>
 800d59e:	46c0      	nop			; (mov r8, r8)
 800d5a0:	ffffefff 	.word	0xffffefff

0800d5a4 <__swrite>:
 800d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a6:	001f      	movs	r7, r3
 800d5a8:	898b      	ldrh	r3, [r1, #12]
 800d5aa:	0005      	movs	r5, r0
 800d5ac:	000c      	movs	r4, r1
 800d5ae:	0016      	movs	r6, r2
 800d5b0:	05db      	lsls	r3, r3, #23
 800d5b2:	d505      	bpl.n	800d5c0 <__swrite+0x1c>
 800d5b4:	230e      	movs	r3, #14
 800d5b6:	5ec9      	ldrsh	r1, [r1, r3]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	2302      	movs	r3, #2
 800d5bc:	f000 f874 	bl	800d6a8 <_lseek_r>
 800d5c0:	89a3      	ldrh	r3, [r4, #12]
 800d5c2:	4a05      	ldr	r2, [pc, #20]	; (800d5d8 <__swrite+0x34>)
 800d5c4:	0028      	movs	r0, r5
 800d5c6:	4013      	ands	r3, r2
 800d5c8:	81a3      	strh	r3, [r4, #12]
 800d5ca:	0032      	movs	r2, r6
 800d5cc:	230e      	movs	r3, #14
 800d5ce:	5ee1      	ldrsh	r1, [r4, r3]
 800d5d0:	003b      	movs	r3, r7
 800d5d2:	f000 f81f 	bl	800d614 <_write_r>
 800d5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d8:	ffffefff 	.word	0xffffefff

0800d5dc <__sseek>:
 800d5dc:	b570      	push	{r4, r5, r6, lr}
 800d5de:	000c      	movs	r4, r1
 800d5e0:	250e      	movs	r5, #14
 800d5e2:	5f49      	ldrsh	r1, [r1, r5]
 800d5e4:	f000 f860 	bl	800d6a8 <_lseek_r>
 800d5e8:	89a3      	ldrh	r3, [r4, #12]
 800d5ea:	1c42      	adds	r2, r0, #1
 800d5ec:	d103      	bne.n	800d5f6 <__sseek+0x1a>
 800d5ee:	4a05      	ldr	r2, [pc, #20]	; (800d604 <__sseek+0x28>)
 800d5f0:	4013      	ands	r3, r2
 800d5f2:	81a3      	strh	r3, [r4, #12]
 800d5f4:	bd70      	pop	{r4, r5, r6, pc}
 800d5f6:	2280      	movs	r2, #128	; 0x80
 800d5f8:	0152      	lsls	r2, r2, #5
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	81a3      	strh	r3, [r4, #12]
 800d5fe:	6560      	str	r0, [r4, #84]	; 0x54
 800d600:	e7f8      	b.n	800d5f4 <__sseek+0x18>
 800d602:	46c0      	nop			; (mov r8, r8)
 800d604:	ffffefff 	.word	0xffffefff

0800d608 <__sclose>:
 800d608:	b510      	push	{r4, lr}
 800d60a:	230e      	movs	r3, #14
 800d60c:	5ec9      	ldrsh	r1, [r1, r3]
 800d60e:	f000 f815 	bl	800d63c <_close_r>
 800d612:	bd10      	pop	{r4, pc}

0800d614 <_write_r>:
 800d614:	b570      	push	{r4, r5, r6, lr}
 800d616:	0004      	movs	r4, r0
 800d618:	0008      	movs	r0, r1
 800d61a:	0011      	movs	r1, r2
 800d61c:	001a      	movs	r2, r3
 800d61e:	2300      	movs	r3, #0
 800d620:	4d05      	ldr	r5, [pc, #20]	; (800d638 <_write_r+0x24>)
 800d622:	602b      	str	r3, [r5, #0]
 800d624:	f7f6 f855 	bl	80036d2 <_write>
 800d628:	1c43      	adds	r3, r0, #1
 800d62a:	d103      	bne.n	800d634 <_write_r+0x20>
 800d62c:	682b      	ldr	r3, [r5, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d000      	beq.n	800d634 <_write_r+0x20>
 800d632:	6023      	str	r3, [r4, #0]
 800d634:	bd70      	pop	{r4, r5, r6, pc}
 800d636:	46c0      	nop			; (mov r8, r8)
 800d638:	2000059c 	.word	0x2000059c

0800d63c <_close_r>:
 800d63c:	2300      	movs	r3, #0
 800d63e:	b570      	push	{r4, r5, r6, lr}
 800d640:	4d06      	ldr	r5, [pc, #24]	; (800d65c <_close_r+0x20>)
 800d642:	0004      	movs	r4, r0
 800d644:	0008      	movs	r0, r1
 800d646:	602b      	str	r3, [r5, #0]
 800d648:	f7f6 f85f 	bl	800370a <_close>
 800d64c:	1c43      	adds	r3, r0, #1
 800d64e:	d103      	bne.n	800d658 <_close_r+0x1c>
 800d650:	682b      	ldr	r3, [r5, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d000      	beq.n	800d658 <_close_r+0x1c>
 800d656:	6023      	str	r3, [r4, #0]
 800d658:	bd70      	pop	{r4, r5, r6, pc}
 800d65a:	46c0      	nop			; (mov r8, r8)
 800d65c:	2000059c 	.word	0x2000059c

0800d660 <_fstat_r>:
 800d660:	2300      	movs	r3, #0
 800d662:	b570      	push	{r4, r5, r6, lr}
 800d664:	4d06      	ldr	r5, [pc, #24]	; (800d680 <_fstat_r+0x20>)
 800d666:	0004      	movs	r4, r0
 800d668:	0008      	movs	r0, r1
 800d66a:	0011      	movs	r1, r2
 800d66c:	602b      	str	r3, [r5, #0]
 800d66e:	f7f6 f856 	bl	800371e <_fstat>
 800d672:	1c43      	adds	r3, r0, #1
 800d674:	d103      	bne.n	800d67e <_fstat_r+0x1e>
 800d676:	682b      	ldr	r3, [r5, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d000      	beq.n	800d67e <_fstat_r+0x1e>
 800d67c:	6023      	str	r3, [r4, #0]
 800d67e:	bd70      	pop	{r4, r5, r6, pc}
 800d680:	2000059c 	.word	0x2000059c

0800d684 <_isatty_r>:
 800d684:	2300      	movs	r3, #0
 800d686:	b570      	push	{r4, r5, r6, lr}
 800d688:	4d06      	ldr	r5, [pc, #24]	; (800d6a4 <_isatty_r+0x20>)
 800d68a:	0004      	movs	r4, r0
 800d68c:	0008      	movs	r0, r1
 800d68e:	602b      	str	r3, [r5, #0]
 800d690:	f7f6 f853 	bl	800373a <_isatty>
 800d694:	1c43      	adds	r3, r0, #1
 800d696:	d103      	bne.n	800d6a0 <_isatty_r+0x1c>
 800d698:	682b      	ldr	r3, [r5, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d000      	beq.n	800d6a0 <_isatty_r+0x1c>
 800d69e:	6023      	str	r3, [r4, #0]
 800d6a0:	bd70      	pop	{r4, r5, r6, pc}
 800d6a2:	46c0      	nop			; (mov r8, r8)
 800d6a4:	2000059c 	.word	0x2000059c

0800d6a8 <_lseek_r>:
 800d6a8:	b570      	push	{r4, r5, r6, lr}
 800d6aa:	0004      	movs	r4, r0
 800d6ac:	0008      	movs	r0, r1
 800d6ae:	0011      	movs	r1, r2
 800d6b0:	001a      	movs	r2, r3
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	4d05      	ldr	r5, [pc, #20]	; (800d6cc <_lseek_r+0x24>)
 800d6b6:	602b      	str	r3, [r5, #0]
 800d6b8:	f7f6 f848 	bl	800374c <_lseek>
 800d6bc:	1c43      	adds	r3, r0, #1
 800d6be:	d103      	bne.n	800d6c8 <_lseek_r+0x20>
 800d6c0:	682b      	ldr	r3, [r5, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d000      	beq.n	800d6c8 <_lseek_r+0x20>
 800d6c6:	6023      	str	r3, [r4, #0]
 800d6c8:	bd70      	pop	{r4, r5, r6, pc}
 800d6ca:	46c0      	nop			; (mov r8, r8)
 800d6cc:	2000059c 	.word	0x2000059c

0800d6d0 <_malloc_usable_size_r>:
 800d6d0:	1f0b      	subs	r3, r1, #4
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	1f18      	subs	r0, r3, #4
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	da01      	bge.n	800d6de <_malloc_usable_size_r+0xe>
 800d6da:	580b      	ldr	r3, [r1, r0]
 800d6dc:	18c0      	adds	r0, r0, r3
 800d6de:	4770      	bx	lr

0800d6e0 <_read_r>:
 800d6e0:	b570      	push	{r4, r5, r6, lr}
 800d6e2:	0004      	movs	r4, r0
 800d6e4:	0008      	movs	r0, r1
 800d6e6:	0011      	movs	r1, r2
 800d6e8:	001a      	movs	r2, r3
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	4d05      	ldr	r5, [pc, #20]	; (800d704 <_read_r+0x24>)
 800d6ee:	602b      	str	r3, [r5, #0]
 800d6f0:	f7f5 ffd2 	bl	8003698 <_read>
 800d6f4:	1c43      	adds	r3, r0, #1
 800d6f6:	d103      	bne.n	800d700 <_read_r+0x20>
 800d6f8:	682b      	ldr	r3, [r5, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d000      	beq.n	800d700 <_read_r+0x20>
 800d6fe:	6023      	str	r3, [r4, #0]
 800d700:	bd70      	pop	{r4, r5, r6, pc}
 800d702:	46c0      	nop			; (mov r8, r8)
 800d704:	2000059c 	.word	0x2000059c

0800d708 <_init>:
 800d708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d70a:	46c0      	nop			; (mov r8, r8)
 800d70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d70e:	bc08      	pop	{r3}
 800d710:	469e      	mov	lr, r3
 800d712:	4770      	bx	lr

0800d714 <_fini>:
 800d714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d716:	46c0      	nop			; (mov r8, r8)
 800d718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d71a:	bc08      	pop	{r3}
 800d71c:	469e      	mov	lr, r3
 800d71e:	4770      	bx	lr
