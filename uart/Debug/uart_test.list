
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e56c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800e628  0800e628  0001e628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb88  0800eb88  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb88  0800eb88  0001eb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb90  0800eb90  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb90  0800eb90  0001eb90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb94  0800eb94  0001eb94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800eb98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  200001fc  0800ed94  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  0800ed94  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024fdd  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c17  00000000  00000000  00045201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00048e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  0004a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000571a  00000000  00000000  0004b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb77  00000000  00000000  0005109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca6ba  00000000  00000000  0006dc11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001382cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e4  00000000  00000000  00138320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001fc 	.word	0x200001fc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800e610 	.word	0x0800e610

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000200 	.word	0x20000200
 8000100:	0800e610 	.word	0x0800e610

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f85b 	bl	80014f4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffa5 	bl	8001398 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f84d 	bl	80014f4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f843 	bl	80014f4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffc7 	bl	8001410 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ffbd 	bl	8001410 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	1c08      	adds	r0, r1, #0
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 ff74 	bl	80023f0 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 ff6f 	bl	80023f0 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_ui2f>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	1e05      	subs	r5, r0, #0
 8000680:	d00e      	beq.n	80006a0 <__aeabi_ui2f+0x24>
 8000682:	f001 fe97 	bl	80023b4 <__clzsi2>
 8000686:	239e      	movs	r3, #158	; 0x9e
 8000688:	0004      	movs	r4, r0
 800068a:	1a1b      	subs	r3, r3, r0
 800068c:	2b96      	cmp	r3, #150	; 0x96
 800068e:	dc0c      	bgt.n	80006aa <__aeabi_ui2f+0x2e>
 8000690:	2808      	cmp	r0, #8
 8000692:	dd01      	ble.n	8000698 <__aeabi_ui2f+0x1c>
 8000694:	3c08      	subs	r4, #8
 8000696:	40a5      	lsls	r5, r4
 8000698:	026d      	lsls	r5, r5, #9
 800069a:	0a6d      	lsrs	r5, r5, #9
 800069c:	b2d8      	uxtb	r0, r3
 800069e:	e001      	b.n	80006a4 <__aeabi_ui2f+0x28>
 80006a0:	2000      	movs	r0, #0
 80006a2:	2500      	movs	r5, #0
 80006a4:	05c0      	lsls	r0, r0, #23
 80006a6:	4328      	orrs	r0, r5
 80006a8:	bd70      	pop	{r4, r5, r6, pc}
 80006aa:	2b99      	cmp	r3, #153	; 0x99
 80006ac:	dd09      	ble.n	80006c2 <__aeabi_ui2f+0x46>
 80006ae:	0002      	movs	r2, r0
 80006b0:	0029      	movs	r1, r5
 80006b2:	321b      	adds	r2, #27
 80006b4:	4091      	lsls	r1, r2
 80006b6:	1e4a      	subs	r2, r1, #1
 80006b8:	4191      	sbcs	r1, r2
 80006ba:	2205      	movs	r2, #5
 80006bc:	1a12      	subs	r2, r2, r0
 80006be:	40d5      	lsrs	r5, r2
 80006c0:	430d      	orrs	r5, r1
 80006c2:	2c05      	cmp	r4, #5
 80006c4:	dd01      	ble.n	80006ca <__aeabi_ui2f+0x4e>
 80006c6:	1f62      	subs	r2, r4, #5
 80006c8:	4095      	lsls	r5, r2
 80006ca:	0029      	movs	r1, r5
 80006cc:	4e08      	ldr	r6, [pc, #32]	; (80006f0 <__aeabi_ui2f+0x74>)
 80006ce:	4031      	ands	r1, r6
 80006d0:	076a      	lsls	r2, r5, #29
 80006d2:	d009      	beq.n	80006e8 <__aeabi_ui2f+0x6c>
 80006d4:	200f      	movs	r0, #15
 80006d6:	4028      	ands	r0, r5
 80006d8:	2804      	cmp	r0, #4
 80006da:	d005      	beq.n	80006e8 <__aeabi_ui2f+0x6c>
 80006dc:	3104      	adds	r1, #4
 80006de:	014a      	lsls	r2, r1, #5
 80006e0:	d502      	bpl.n	80006e8 <__aeabi_ui2f+0x6c>
 80006e2:	239f      	movs	r3, #159	; 0x9f
 80006e4:	4031      	ands	r1, r6
 80006e6:	1b1b      	subs	r3, r3, r4
 80006e8:	0189      	lsls	r1, r1, #6
 80006ea:	0a4d      	lsrs	r5, r1, #9
 80006ec:	b2d8      	uxtb	r0, r3
 80006ee:	e7d9      	b.n	80006a4 <__aeabi_ui2f+0x28>
 80006f0:	fbffffff 	.word	0xfbffffff

080006f4 <__aeabi_dadd>:
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	464f      	mov	r7, r9
 80006f8:	46d6      	mov	lr, sl
 80006fa:	4646      	mov	r6, r8
 80006fc:	000d      	movs	r5, r1
 80006fe:	0001      	movs	r1, r0
 8000700:	0018      	movs	r0, r3
 8000702:	b5c0      	push	{r6, r7, lr}
 8000704:	0017      	movs	r7, r2
 8000706:	032b      	lsls	r3, r5, #12
 8000708:	0a5a      	lsrs	r2, r3, #9
 800070a:	0f4b      	lsrs	r3, r1, #29
 800070c:	4313      	orrs	r3, r2
 800070e:	00ca      	lsls	r2, r1, #3
 8000710:	4691      	mov	r9, r2
 8000712:	0302      	lsls	r2, r0, #12
 8000714:	006e      	lsls	r6, r5, #1
 8000716:	0041      	lsls	r1, r0, #1
 8000718:	0a52      	lsrs	r2, r2, #9
 800071a:	0fec      	lsrs	r4, r5, #31
 800071c:	0f7d      	lsrs	r5, r7, #29
 800071e:	4315      	orrs	r5, r2
 8000720:	0d76      	lsrs	r6, r6, #21
 8000722:	0d49      	lsrs	r1, r1, #21
 8000724:	0fc0      	lsrs	r0, r0, #31
 8000726:	4682      	mov	sl, r0
 8000728:	46ac      	mov	ip, r5
 800072a:	00ff      	lsls	r7, r7, #3
 800072c:	1a72      	subs	r2, r6, r1
 800072e:	4284      	cmp	r4, r0
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0x40>
 8000732:	e098      	b.n	8000866 <__aeabi_dadd+0x172>
 8000734:	2a00      	cmp	r2, #0
 8000736:	dc00      	bgt.n	800073a <__aeabi_dadd+0x46>
 8000738:	e081      	b.n	800083e <__aeabi_dadd+0x14a>
 800073a:	2900      	cmp	r1, #0
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x4c>
 800073e:	e0b6      	b.n	80008ae <__aeabi_dadd+0x1ba>
 8000740:	49c9      	ldr	r1, [pc, #804]	; (8000a68 <__aeabi_dadd+0x374>)
 8000742:	428e      	cmp	r6, r1
 8000744:	d100      	bne.n	8000748 <__aeabi_dadd+0x54>
 8000746:	e172      	b.n	8000a2e <__aeabi_dadd+0x33a>
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	0028      	movs	r0, r5
 800074c:	0409      	lsls	r1, r1, #16
 800074e:	4308      	orrs	r0, r1
 8000750:	4684      	mov	ip, r0
 8000752:	2a38      	cmp	r2, #56	; 0x38
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0x64>
 8000756:	e15e      	b.n	8000a16 <__aeabi_dadd+0x322>
 8000758:	2a1f      	cmp	r2, #31
 800075a:	dd00      	ble.n	800075e <__aeabi_dadd+0x6a>
 800075c:	e1ee      	b.n	8000b3c <__aeabi_dadd+0x448>
 800075e:	2020      	movs	r0, #32
 8000760:	0039      	movs	r1, r7
 8000762:	4665      	mov	r5, ip
 8000764:	1a80      	subs	r0, r0, r2
 8000766:	4087      	lsls	r7, r0
 8000768:	40d1      	lsrs	r1, r2
 800076a:	4085      	lsls	r5, r0
 800076c:	430d      	orrs	r5, r1
 800076e:	0039      	movs	r1, r7
 8000770:	1e4f      	subs	r7, r1, #1
 8000772:	41b9      	sbcs	r1, r7
 8000774:	4667      	mov	r7, ip
 8000776:	40d7      	lsrs	r7, r2
 8000778:	4329      	orrs	r1, r5
 800077a:	1bdb      	subs	r3, r3, r7
 800077c:	464a      	mov	r2, r9
 800077e:	1a55      	subs	r5, r2, r1
 8000780:	45a9      	cmp	r9, r5
 8000782:	4189      	sbcs	r1, r1
 8000784:	4249      	negs	r1, r1
 8000786:	1a5b      	subs	r3, r3, r1
 8000788:	4698      	mov	r8, r3
 800078a:	4643      	mov	r3, r8
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	d400      	bmi.n	8000792 <__aeabi_dadd+0x9e>
 8000790:	e0cc      	b.n	800092c <__aeabi_dadd+0x238>
 8000792:	4643      	mov	r3, r8
 8000794:	025b      	lsls	r3, r3, #9
 8000796:	0a5b      	lsrs	r3, r3, #9
 8000798:	4698      	mov	r8, r3
 800079a:	4643      	mov	r3, r8
 800079c:	2b00      	cmp	r3, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0xae>
 80007a0:	e12c      	b.n	80009fc <__aeabi_dadd+0x308>
 80007a2:	4640      	mov	r0, r8
 80007a4:	f001 fe06 	bl	80023b4 <__clzsi2>
 80007a8:	0001      	movs	r1, r0
 80007aa:	3908      	subs	r1, #8
 80007ac:	2220      	movs	r2, #32
 80007ae:	0028      	movs	r0, r5
 80007b0:	4643      	mov	r3, r8
 80007b2:	1a52      	subs	r2, r2, r1
 80007b4:	408b      	lsls	r3, r1
 80007b6:	40d0      	lsrs	r0, r2
 80007b8:	408d      	lsls	r5, r1
 80007ba:	4303      	orrs	r3, r0
 80007bc:	428e      	cmp	r6, r1
 80007be:	dd00      	ble.n	80007c2 <__aeabi_dadd+0xce>
 80007c0:	e117      	b.n	80009f2 <__aeabi_dadd+0x2fe>
 80007c2:	1b8e      	subs	r6, r1, r6
 80007c4:	1c72      	adds	r2, r6, #1
 80007c6:	2a1f      	cmp	r2, #31
 80007c8:	dd00      	ble.n	80007cc <__aeabi_dadd+0xd8>
 80007ca:	e1a7      	b.n	8000b1c <__aeabi_dadd+0x428>
 80007cc:	2120      	movs	r1, #32
 80007ce:	0018      	movs	r0, r3
 80007d0:	002e      	movs	r6, r5
 80007d2:	1a89      	subs	r1, r1, r2
 80007d4:	408d      	lsls	r5, r1
 80007d6:	4088      	lsls	r0, r1
 80007d8:	40d6      	lsrs	r6, r2
 80007da:	40d3      	lsrs	r3, r2
 80007dc:	1e69      	subs	r1, r5, #1
 80007de:	418d      	sbcs	r5, r1
 80007e0:	4330      	orrs	r0, r6
 80007e2:	4698      	mov	r8, r3
 80007e4:	2600      	movs	r6, #0
 80007e6:	4305      	orrs	r5, r0
 80007e8:	076b      	lsls	r3, r5, #29
 80007ea:	d009      	beq.n	8000800 <__aeabi_dadd+0x10c>
 80007ec:	230f      	movs	r3, #15
 80007ee:	402b      	ands	r3, r5
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d005      	beq.n	8000800 <__aeabi_dadd+0x10c>
 80007f4:	1d2b      	adds	r3, r5, #4
 80007f6:	42ab      	cmp	r3, r5
 80007f8:	41ad      	sbcs	r5, r5
 80007fa:	426d      	negs	r5, r5
 80007fc:	44a8      	add	r8, r5
 80007fe:	001d      	movs	r5, r3
 8000800:	4643      	mov	r3, r8
 8000802:	021b      	lsls	r3, r3, #8
 8000804:	d400      	bmi.n	8000808 <__aeabi_dadd+0x114>
 8000806:	e094      	b.n	8000932 <__aeabi_dadd+0x23e>
 8000808:	4b97      	ldr	r3, [pc, #604]	; (8000a68 <__aeabi_dadd+0x374>)
 800080a:	1c72      	adds	r2, r6, #1
 800080c:	429a      	cmp	r2, r3
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x11e>
 8000810:	e09d      	b.n	800094e <__aeabi_dadd+0x25a>
 8000812:	4641      	mov	r1, r8
 8000814:	4b95      	ldr	r3, [pc, #596]	; (8000a6c <__aeabi_dadd+0x378>)
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	4019      	ands	r1, r3
 800081a:	000b      	movs	r3, r1
 800081c:	0552      	lsls	r2, r2, #21
 800081e:	0749      	lsls	r1, r1, #29
 8000820:	025b      	lsls	r3, r3, #9
 8000822:	4329      	orrs	r1, r5
 8000824:	0b1b      	lsrs	r3, r3, #12
 8000826:	0d52      	lsrs	r2, r2, #21
 8000828:	0512      	lsls	r2, r2, #20
 800082a:	4313      	orrs	r3, r2
 800082c:	07e4      	lsls	r4, r4, #31
 800082e:	4323      	orrs	r3, r4
 8000830:	0008      	movs	r0, r1
 8000832:	0019      	movs	r1, r3
 8000834:	bce0      	pop	{r5, r6, r7}
 8000836:	46ba      	mov	sl, r7
 8000838:	46b1      	mov	r9, r6
 800083a:	46a8      	mov	r8, r5
 800083c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083e:	2a00      	cmp	r2, #0
 8000840:	d043      	beq.n	80008ca <__aeabi_dadd+0x1d6>
 8000842:	1b8a      	subs	r2, r1, r6
 8000844:	2e00      	cmp	r6, #0
 8000846:	d000      	beq.n	800084a <__aeabi_dadd+0x156>
 8000848:	e12a      	b.n	8000aa0 <__aeabi_dadd+0x3ac>
 800084a:	464c      	mov	r4, r9
 800084c:	431c      	orrs	r4, r3
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x15e>
 8000850:	e1d1      	b.n	8000bf6 <__aeabi_dadd+0x502>
 8000852:	1e54      	subs	r4, r2, #1
 8000854:	2a01      	cmp	r2, #1
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x166>
 8000858:	e21f      	b.n	8000c9a <__aeabi_dadd+0x5a6>
 800085a:	4d83      	ldr	r5, [pc, #524]	; (8000a68 <__aeabi_dadd+0x374>)
 800085c:	42aa      	cmp	r2, r5
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x16e>
 8000860:	e272      	b.n	8000d48 <__aeabi_dadd+0x654>
 8000862:	0022      	movs	r2, r4
 8000864:	e123      	b.n	8000aae <__aeabi_dadd+0x3ba>
 8000866:	2a00      	cmp	r2, #0
 8000868:	dc00      	bgt.n	800086c <__aeabi_dadd+0x178>
 800086a:	e098      	b.n	800099e <__aeabi_dadd+0x2aa>
 800086c:	2900      	cmp	r1, #0
 800086e:	d042      	beq.n	80008f6 <__aeabi_dadd+0x202>
 8000870:	497d      	ldr	r1, [pc, #500]	; (8000a68 <__aeabi_dadd+0x374>)
 8000872:	428e      	cmp	r6, r1
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x184>
 8000876:	e0da      	b.n	8000a2e <__aeabi_dadd+0x33a>
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0028      	movs	r0, r5
 800087c:	0409      	lsls	r1, r1, #16
 800087e:	4308      	orrs	r0, r1
 8000880:	4684      	mov	ip, r0
 8000882:	2a38      	cmp	r2, #56	; 0x38
 8000884:	dd00      	ble.n	8000888 <__aeabi_dadd+0x194>
 8000886:	e129      	b.n	8000adc <__aeabi_dadd+0x3e8>
 8000888:	2a1f      	cmp	r2, #31
 800088a:	dc00      	bgt.n	800088e <__aeabi_dadd+0x19a>
 800088c:	e187      	b.n	8000b9e <__aeabi_dadd+0x4aa>
 800088e:	0011      	movs	r1, r2
 8000890:	4665      	mov	r5, ip
 8000892:	3920      	subs	r1, #32
 8000894:	40cd      	lsrs	r5, r1
 8000896:	2a20      	cmp	r2, #32
 8000898:	d004      	beq.n	80008a4 <__aeabi_dadd+0x1b0>
 800089a:	2040      	movs	r0, #64	; 0x40
 800089c:	4661      	mov	r1, ip
 800089e:	1a82      	subs	r2, r0, r2
 80008a0:	4091      	lsls	r1, r2
 80008a2:	430f      	orrs	r7, r1
 80008a4:	0039      	movs	r1, r7
 80008a6:	1e4f      	subs	r7, r1, #1
 80008a8:	41b9      	sbcs	r1, r7
 80008aa:	430d      	orrs	r5, r1
 80008ac:	e11b      	b.n	8000ae6 <__aeabi_dadd+0x3f2>
 80008ae:	0029      	movs	r1, r5
 80008b0:	4339      	orrs	r1, r7
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dadd+0x1c2>
 80008b4:	e0b5      	b.n	8000a22 <__aeabi_dadd+0x32e>
 80008b6:	1e51      	subs	r1, r2, #1
 80008b8:	2a01      	cmp	r2, #1
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x1ca>
 80008bc:	e1ab      	b.n	8000c16 <__aeabi_dadd+0x522>
 80008be:	486a      	ldr	r0, [pc, #424]	; (8000a68 <__aeabi_dadd+0x374>)
 80008c0:	4282      	cmp	r2, r0
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dadd+0x1d2>
 80008c4:	e1b2      	b.n	8000c2c <__aeabi_dadd+0x538>
 80008c6:	000a      	movs	r2, r1
 80008c8:	e743      	b.n	8000752 <__aeabi_dadd+0x5e>
 80008ca:	4969      	ldr	r1, [pc, #420]	; (8000a70 <__aeabi_dadd+0x37c>)
 80008cc:	1c75      	adds	r5, r6, #1
 80008ce:	420d      	tst	r5, r1
 80008d0:	d000      	beq.n	80008d4 <__aeabi_dadd+0x1e0>
 80008d2:	e0cf      	b.n	8000a74 <__aeabi_dadd+0x380>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x1e6>
 80008d8:	e193      	b.n	8000c02 <__aeabi_dadd+0x50e>
 80008da:	4649      	mov	r1, r9
 80008dc:	4319      	orrs	r1, r3
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x1ee>
 80008e0:	e1d1      	b.n	8000c86 <__aeabi_dadd+0x592>
 80008e2:	4661      	mov	r1, ip
 80008e4:	4339      	orrs	r1, r7
 80008e6:	d000      	beq.n	80008ea <__aeabi_dadd+0x1f6>
 80008e8:	e1e3      	b.n	8000cb2 <__aeabi_dadd+0x5be>
 80008ea:	4649      	mov	r1, r9
 80008ec:	0758      	lsls	r0, r3, #29
 80008ee:	08c9      	lsrs	r1, r1, #3
 80008f0:	4301      	orrs	r1, r0
 80008f2:	08db      	lsrs	r3, r3, #3
 80008f4:	e026      	b.n	8000944 <__aeabi_dadd+0x250>
 80008f6:	0029      	movs	r1, r5
 80008f8:	4339      	orrs	r1, r7
 80008fa:	d100      	bne.n	80008fe <__aeabi_dadd+0x20a>
 80008fc:	e091      	b.n	8000a22 <__aeabi_dadd+0x32e>
 80008fe:	1e51      	subs	r1, r2, #1
 8000900:	2a01      	cmp	r2, #1
 8000902:	d005      	beq.n	8000910 <__aeabi_dadd+0x21c>
 8000904:	4858      	ldr	r0, [pc, #352]	; (8000a68 <__aeabi_dadd+0x374>)
 8000906:	4282      	cmp	r2, r0
 8000908:	d100      	bne.n	800090c <__aeabi_dadd+0x218>
 800090a:	e18f      	b.n	8000c2c <__aeabi_dadd+0x538>
 800090c:	000a      	movs	r2, r1
 800090e:	e7b8      	b.n	8000882 <__aeabi_dadd+0x18e>
 8000910:	003d      	movs	r5, r7
 8000912:	444d      	add	r5, r9
 8000914:	454d      	cmp	r5, r9
 8000916:	4189      	sbcs	r1, r1
 8000918:	4463      	add	r3, ip
 800091a:	4698      	mov	r8, r3
 800091c:	4249      	negs	r1, r1
 800091e:	4488      	add	r8, r1
 8000920:	4643      	mov	r3, r8
 8000922:	2602      	movs	r6, #2
 8000924:	021b      	lsls	r3, r3, #8
 8000926:	d500      	bpl.n	800092a <__aeabi_dadd+0x236>
 8000928:	e0eb      	b.n	8000b02 <__aeabi_dadd+0x40e>
 800092a:	3e01      	subs	r6, #1
 800092c:	076b      	lsls	r3, r5, #29
 800092e:	d000      	beq.n	8000932 <__aeabi_dadd+0x23e>
 8000930:	e75c      	b.n	80007ec <__aeabi_dadd+0xf8>
 8000932:	4643      	mov	r3, r8
 8000934:	08e9      	lsrs	r1, r5, #3
 8000936:	075a      	lsls	r2, r3, #29
 8000938:	4311      	orrs	r1, r2
 800093a:	0032      	movs	r2, r6
 800093c:	08db      	lsrs	r3, r3, #3
 800093e:	484a      	ldr	r0, [pc, #296]	; (8000a68 <__aeabi_dadd+0x374>)
 8000940:	4282      	cmp	r2, r0
 8000942:	d021      	beq.n	8000988 <__aeabi_dadd+0x294>
 8000944:	031b      	lsls	r3, r3, #12
 8000946:	0552      	lsls	r2, r2, #21
 8000948:	0b1b      	lsrs	r3, r3, #12
 800094a:	0d52      	lsrs	r2, r2, #21
 800094c:	e76c      	b.n	8000828 <__aeabi_dadd+0x134>
 800094e:	2300      	movs	r3, #0
 8000950:	2100      	movs	r1, #0
 8000952:	e769      	b.n	8000828 <__aeabi_dadd+0x134>
 8000954:	002a      	movs	r2, r5
 8000956:	433a      	orrs	r2, r7
 8000958:	d069      	beq.n	8000a2e <__aeabi_dadd+0x33a>
 800095a:	464a      	mov	r2, r9
 800095c:	0758      	lsls	r0, r3, #29
 800095e:	08d1      	lsrs	r1, r2, #3
 8000960:	08da      	lsrs	r2, r3, #3
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	031b      	lsls	r3, r3, #12
 8000966:	4308      	orrs	r0, r1
 8000968:	421a      	tst	r2, r3
 800096a:	d007      	beq.n	800097c <__aeabi_dadd+0x288>
 800096c:	0029      	movs	r1, r5
 800096e:	08ed      	lsrs	r5, r5, #3
 8000970:	421d      	tst	r5, r3
 8000972:	d103      	bne.n	800097c <__aeabi_dadd+0x288>
 8000974:	002a      	movs	r2, r5
 8000976:	08ff      	lsrs	r7, r7, #3
 8000978:	0748      	lsls	r0, r1, #29
 800097a:	4338      	orrs	r0, r7
 800097c:	0f43      	lsrs	r3, r0, #29
 800097e:	00c1      	lsls	r1, r0, #3
 8000980:	075b      	lsls	r3, r3, #29
 8000982:	08c9      	lsrs	r1, r1, #3
 8000984:	4319      	orrs	r1, r3
 8000986:	0013      	movs	r3, r2
 8000988:	000a      	movs	r2, r1
 800098a:	431a      	orrs	r2, r3
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x29c>
 800098e:	e213      	b.n	8000db8 <__aeabi_dadd+0x6c4>
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	0312      	lsls	r2, r2, #12
 8000994:	4313      	orrs	r3, r2
 8000996:	031b      	lsls	r3, r3, #12
 8000998:	4a33      	ldr	r2, [pc, #204]	; (8000a68 <__aeabi_dadd+0x374>)
 800099a:	0b1b      	lsrs	r3, r3, #12
 800099c:	e744      	b.n	8000828 <__aeabi_dadd+0x134>
 800099e:	2a00      	cmp	r2, #0
 80009a0:	d04b      	beq.n	8000a3a <__aeabi_dadd+0x346>
 80009a2:	1b8a      	subs	r2, r1, r6
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_dadd+0x2b6>
 80009a8:	e0e7      	b.n	8000b7a <__aeabi_dadd+0x486>
 80009aa:	482f      	ldr	r0, [pc, #188]	; (8000a68 <__aeabi_dadd+0x374>)
 80009ac:	4281      	cmp	r1, r0
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x2be>
 80009b0:	e195      	b.n	8000cde <__aeabi_dadd+0x5ea>
 80009b2:	2080      	movs	r0, #128	; 0x80
 80009b4:	0400      	lsls	r0, r0, #16
 80009b6:	4303      	orrs	r3, r0
 80009b8:	2a38      	cmp	r2, #56	; 0x38
 80009ba:	dd00      	ble.n	80009be <__aeabi_dadd+0x2ca>
 80009bc:	e143      	b.n	8000c46 <__aeabi_dadd+0x552>
 80009be:	2a1f      	cmp	r2, #31
 80009c0:	dd00      	ble.n	80009c4 <__aeabi_dadd+0x2d0>
 80009c2:	e1db      	b.n	8000d7c <__aeabi_dadd+0x688>
 80009c4:	2020      	movs	r0, #32
 80009c6:	001d      	movs	r5, r3
 80009c8:	464e      	mov	r6, r9
 80009ca:	1a80      	subs	r0, r0, r2
 80009cc:	4085      	lsls	r5, r0
 80009ce:	40d6      	lsrs	r6, r2
 80009d0:	4335      	orrs	r5, r6
 80009d2:	464e      	mov	r6, r9
 80009d4:	4086      	lsls	r6, r0
 80009d6:	0030      	movs	r0, r6
 80009d8:	40d3      	lsrs	r3, r2
 80009da:	1e46      	subs	r6, r0, #1
 80009dc:	41b0      	sbcs	r0, r6
 80009de:	449c      	add	ip, r3
 80009e0:	4305      	orrs	r5, r0
 80009e2:	19ed      	adds	r5, r5, r7
 80009e4:	42bd      	cmp	r5, r7
 80009e6:	419b      	sbcs	r3, r3
 80009e8:	425b      	negs	r3, r3
 80009ea:	4463      	add	r3, ip
 80009ec:	4698      	mov	r8, r3
 80009ee:	000e      	movs	r6, r1
 80009f0:	e07f      	b.n	8000af2 <__aeabi_dadd+0x3fe>
 80009f2:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <__aeabi_dadd+0x378>)
 80009f4:	1a76      	subs	r6, r6, r1
 80009f6:	4013      	ands	r3, r2
 80009f8:	4698      	mov	r8, r3
 80009fa:	e6f5      	b.n	80007e8 <__aeabi_dadd+0xf4>
 80009fc:	0028      	movs	r0, r5
 80009fe:	f001 fcd9 	bl	80023b4 <__clzsi2>
 8000a02:	0001      	movs	r1, r0
 8000a04:	3118      	adds	r1, #24
 8000a06:	291f      	cmp	r1, #31
 8000a08:	dc00      	bgt.n	8000a0c <__aeabi_dadd+0x318>
 8000a0a:	e6cf      	b.n	80007ac <__aeabi_dadd+0xb8>
 8000a0c:	002b      	movs	r3, r5
 8000a0e:	3808      	subs	r0, #8
 8000a10:	4083      	lsls	r3, r0
 8000a12:	2500      	movs	r5, #0
 8000a14:	e6d2      	b.n	80007bc <__aeabi_dadd+0xc8>
 8000a16:	4662      	mov	r2, ip
 8000a18:	433a      	orrs	r2, r7
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	1e4f      	subs	r7, r1, #1
 8000a1e:	41b9      	sbcs	r1, r7
 8000a20:	e6ac      	b.n	800077c <__aeabi_dadd+0x88>
 8000a22:	4649      	mov	r1, r9
 8000a24:	0758      	lsls	r0, r3, #29
 8000a26:	08c9      	lsrs	r1, r1, #3
 8000a28:	4301      	orrs	r1, r0
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	e787      	b.n	800093e <__aeabi_dadd+0x24a>
 8000a2e:	4649      	mov	r1, r9
 8000a30:	075a      	lsls	r2, r3, #29
 8000a32:	08c9      	lsrs	r1, r1, #3
 8000a34:	4311      	orrs	r1, r2
 8000a36:	08db      	lsrs	r3, r3, #3
 8000a38:	e7a6      	b.n	8000988 <__aeabi_dadd+0x294>
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <__aeabi_dadd+0x37c>)
 8000a3c:	1c70      	adds	r0, r6, #1
 8000a3e:	4208      	tst	r0, r1
 8000a40:	d000      	beq.n	8000a44 <__aeabi_dadd+0x350>
 8000a42:	e0bb      	b.n	8000bbc <__aeabi_dadd+0x4c8>
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d000      	beq.n	8000a4a <__aeabi_dadd+0x356>
 8000a48:	e114      	b.n	8000c74 <__aeabi_dadd+0x580>
 8000a4a:	4649      	mov	r1, r9
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0x35e>
 8000a50:	e175      	b.n	8000d3e <__aeabi_dadd+0x64a>
 8000a52:	0029      	movs	r1, r5
 8000a54:	4339      	orrs	r1, r7
 8000a56:	d000      	beq.n	8000a5a <__aeabi_dadd+0x366>
 8000a58:	e17e      	b.n	8000d58 <__aeabi_dadd+0x664>
 8000a5a:	4649      	mov	r1, r9
 8000a5c:	0758      	lsls	r0, r3, #29
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	4301      	orrs	r1, r0
 8000a62:	08db      	lsrs	r3, r3, #3
 8000a64:	e76e      	b.n	8000944 <__aeabi_dadd+0x250>
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	000007ff 	.word	0x000007ff
 8000a6c:	ff7fffff 	.word	0xff7fffff
 8000a70:	000007fe 	.word	0x000007fe
 8000a74:	4649      	mov	r1, r9
 8000a76:	1bcd      	subs	r5, r1, r7
 8000a78:	4661      	mov	r1, ip
 8000a7a:	1a58      	subs	r0, r3, r1
 8000a7c:	45a9      	cmp	r9, r5
 8000a7e:	4189      	sbcs	r1, r1
 8000a80:	4249      	negs	r1, r1
 8000a82:	4688      	mov	r8, r1
 8000a84:	0001      	movs	r1, r0
 8000a86:	4640      	mov	r0, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	0209      	lsls	r1, r1, #8
 8000a8e:	d500      	bpl.n	8000a92 <__aeabi_dadd+0x39e>
 8000a90:	e0a6      	b.n	8000be0 <__aeabi_dadd+0x4ec>
 8000a92:	4641      	mov	r1, r8
 8000a94:	4329      	orrs	r1, r5
 8000a96:	d000      	beq.n	8000a9a <__aeabi_dadd+0x3a6>
 8000a98:	e67f      	b.n	800079a <__aeabi_dadd+0xa6>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	2400      	movs	r4, #0
 8000a9e:	e751      	b.n	8000944 <__aeabi_dadd+0x250>
 8000aa0:	4cc7      	ldr	r4, [pc, #796]	; (8000dc0 <__aeabi_dadd+0x6cc>)
 8000aa2:	42a1      	cmp	r1, r4
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dadd+0x3b4>
 8000aa6:	e0c7      	b.n	8000c38 <__aeabi_dadd+0x544>
 8000aa8:	2480      	movs	r4, #128	; 0x80
 8000aaa:	0424      	lsls	r4, r4, #16
 8000aac:	4323      	orrs	r3, r4
 8000aae:	2a38      	cmp	r2, #56	; 0x38
 8000ab0:	dc54      	bgt.n	8000b5c <__aeabi_dadd+0x468>
 8000ab2:	2a1f      	cmp	r2, #31
 8000ab4:	dd00      	ble.n	8000ab8 <__aeabi_dadd+0x3c4>
 8000ab6:	e0cc      	b.n	8000c52 <__aeabi_dadd+0x55e>
 8000ab8:	2420      	movs	r4, #32
 8000aba:	4648      	mov	r0, r9
 8000abc:	1aa4      	subs	r4, r4, r2
 8000abe:	001d      	movs	r5, r3
 8000ac0:	464e      	mov	r6, r9
 8000ac2:	40a0      	lsls	r0, r4
 8000ac4:	40d6      	lsrs	r6, r2
 8000ac6:	40a5      	lsls	r5, r4
 8000ac8:	0004      	movs	r4, r0
 8000aca:	40d3      	lsrs	r3, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	4335      	orrs	r5, r6
 8000ad0:	1e66      	subs	r6, r4, #1
 8000ad2:	41b4      	sbcs	r4, r6
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	469c      	mov	ip, r3
 8000ad8:	4325      	orrs	r5, r4
 8000ada:	e044      	b.n	8000b66 <__aeabi_dadd+0x472>
 8000adc:	4662      	mov	r2, ip
 8000ade:	433a      	orrs	r2, r7
 8000ae0:	0015      	movs	r5, r2
 8000ae2:	1e6f      	subs	r7, r5, #1
 8000ae4:	41bd      	sbcs	r5, r7
 8000ae6:	444d      	add	r5, r9
 8000ae8:	454d      	cmp	r5, r9
 8000aea:	4189      	sbcs	r1, r1
 8000aec:	4249      	negs	r1, r1
 8000aee:	4688      	mov	r8, r1
 8000af0:	4498      	add	r8, r3
 8000af2:	4643      	mov	r3, r8
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	d400      	bmi.n	8000afa <__aeabi_dadd+0x406>
 8000af8:	e718      	b.n	800092c <__aeabi_dadd+0x238>
 8000afa:	4bb1      	ldr	r3, [pc, #708]	; (8000dc0 <__aeabi_dadd+0x6cc>)
 8000afc:	3601      	adds	r6, #1
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d049      	beq.n	8000b96 <__aeabi_dadd+0x4a2>
 8000b02:	4642      	mov	r2, r8
 8000b04:	4baf      	ldr	r3, [pc, #700]	; (8000dc4 <__aeabi_dadd+0x6d0>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	401a      	ands	r2, r3
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	086a      	lsrs	r2, r5, #1
 8000b0e:	400d      	ands	r5, r1
 8000b10:	4315      	orrs	r5, r2
 8000b12:	07d9      	lsls	r1, r3, #31
 8000b14:	085b      	lsrs	r3, r3, #1
 8000b16:	4698      	mov	r8, r3
 8000b18:	430d      	orrs	r5, r1
 8000b1a:	e665      	b.n	80007e8 <__aeabi_dadd+0xf4>
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	3e1f      	subs	r6, #31
 8000b20:	40f0      	lsrs	r0, r6
 8000b22:	2a20      	cmp	r2, #32
 8000b24:	d003      	beq.n	8000b2e <__aeabi_dadd+0x43a>
 8000b26:	2140      	movs	r1, #64	; 0x40
 8000b28:	1a8a      	subs	r2, r1, r2
 8000b2a:	4093      	lsls	r3, r2
 8000b2c:	431d      	orrs	r5, r3
 8000b2e:	1e69      	subs	r1, r5, #1
 8000b30:	418d      	sbcs	r5, r1
 8000b32:	2300      	movs	r3, #0
 8000b34:	2600      	movs	r6, #0
 8000b36:	4698      	mov	r8, r3
 8000b38:	4305      	orrs	r5, r0
 8000b3a:	e6f7      	b.n	800092c <__aeabi_dadd+0x238>
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	4665      	mov	r5, ip
 8000b40:	3920      	subs	r1, #32
 8000b42:	40cd      	lsrs	r5, r1
 8000b44:	2a20      	cmp	r2, #32
 8000b46:	d004      	beq.n	8000b52 <__aeabi_dadd+0x45e>
 8000b48:	2040      	movs	r0, #64	; 0x40
 8000b4a:	4661      	mov	r1, ip
 8000b4c:	1a82      	subs	r2, r0, r2
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	430f      	orrs	r7, r1
 8000b52:	0039      	movs	r1, r7
 8000b54:	1e4f      	subs	r7, r1, #1
 8000b56:	41b9      	sbcs	r1, r7
 8000b58:	4329      	orrs	r1, r5
 8000b5a:	e60f      	b.n	800077c <__aeabi_dadd+0x88>
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	001d      	movs	r5, r3
 8000b62:	1e6b      	subs	r3, r5, #1
 8000b64:	419d      	sbcs	r5, r3
 8000b66:	1b7d      	subs	r5, r7, r5
 8000b68:	42af      	cmp	r7, r5
 8000b6a:	419b      	sbcs	r3, r3
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	425b      	negs	r3, r3
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	4698      	mov	r8, r3
 8000b74:	4654      	mov	r4, sl
 8000b76:	000e      	movs	r6, r1
 8000b78:	e607      	b.n	800078a <__aeabi_dadd+0x96>
 8000b7a:	4648      	mov	r0, r9
 8000b7c:	4318      	orrs	r0, r3
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dadd+0x48e>
 8000b80:	e0b3      	b.n	8000cea <__aeabi_dadd+0x5f6>
 8000b82:	1e50      	subs	r0, r2, #1
 8000b84:	2a01      	cmp	r2, #1
 8000b86:	d100      	bne.n	8000b8a <__aeabi_dadd+0x496>
 8000b88:	e10d      	b.n	8000da6 <__aeabi_dadd+0x6b2>
 8000b8a:	4d8d      	ldr	r5, [pc, #564]	; (8000dc0 <__aeabi_dadd+0x6cc>)
 8000b8c:	42aa      	cmp	r2, r5
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x49e>
 8000b90:	e0a5      	b.n	8000cde <__aeabi_dadd+0x5ea>
 8000b92:	0002      	movs	r2, r0
 8000b94:	e710      	b.n	80009b8 <__aeabi_dadd+0x2c4>
 8000b96:	0032      	movs	r2, r6
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	e644      	b.n	8000828 <__aeabi_dadd+0x134>
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	0038      	movs	r0, r7
 8000ba2:	1a89      	subs	r1, r1, r2
 8000ba4:	4665      	mov	r5, ip
 8000ba6:	408f      	lsls	r7, r1
 8000ba8:	408d      	lsls	r5, r1
 8000baa:	40d0      	lsrs	r0, r2
 8000bac:	1e79      	subs	r1, r7, #1
 8000bae:	418f      	sbcs	r7, r1
 8000bb0:	4305      	orrs	r5, r0
 8000bb2:	433d      	orrs	r5, r7
 8000bb4:	4667      	mov	r7, ip
 8000bb6:	40d7      	lsrs	r7, r2
 8000bb8:	19db      	adds	r3, r3, r7
 8000bba:	e794      	b.n	8000ae6 <__aeabi_dadd+0x3f2>
 8000bbc:	4a80      	ldr	r2, [pc, #512]	; (8000dc0 <__aeabi_dadd+0x6cc>)
 8000bbe:	4290      	cmp	r0, r2
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x4d0>
 8000bc2:	e0ec      	b.n	8000d9e <__aeabi_dadd+0x6aa>
 8000bc4:	0039      	movs	r1, r7
 8000bc6:	4449      	add	r1, r9
 8000bc8:	4549      	cmp	r1, r9
 8000bca:	4192      	sbcs	r2, r2
 8000bcc:	4463      	add	r3, ip
 8000bce:	4252      	negs	r2, r2
 8000bd0:	189b      	adds	r3, r3, r2
 8000bd2:	07dd      	lsls	r5, r3, #31
 8000bd4:	0849      	lsrs	r1, r1, #1
 8000bd6:	085b      	lsrs	r3, r3, #1
 8000bd8:	4698      	mov	r8, r3
 8000bda:	0006      	movs	r6, r0
 8000bdc:	430d      	orrs	r5, r1
 8000bde:	e6a5      	b.n	800092c <__aeabi_dadd+0x238>
 8000be0:	464a      	mov	r2, r9
 8000be2:	1abd      	subs	r5, r7, r2
 8000be4:	42af      	cmp	r7, r5
 8000be6:	4189      	sbcs	r1, r1
 8000be8:	4662      	mov	r2, ip
 8000bea:	4249      	negs	r1, r1
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	1a5b      	subs	r3, r3, r1
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	4654      	mov	r4, sl
 8000bf4:	e5d1      	b.n	800079a <__aeabi_dadd+0xa6>
 8000bf6:	076c      	lsls	r4, r5, #29
 8000bf8:	08f9      	lsrs	r1, r7, #3
 8000bfa:	4321      	orrs	r1, r4
 8000bfc:	08eb      	lsrs	r3, r5, #3
 8000bfe:	0004      	movs	r4, r0
 8000c00:	e69d      	b.n	800093e <__aeabi_dadd+0x24a>
 8000c02:	464a      	mov	r2, r9
 8000c04:	431a      	orrs	r2, r3
 8000c06:	d175      	bne.n	8000cf4 <__aeabi_dadd+0x600>
 8000c08:	4661      	mov	r1, ip
 8000c0a:	4339      	orrs	r1, r7
 8000c0c:	d114      	bne.n	8000c38 <__aeabi_dadd+0x544>
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	2400      	movs	r4, #0
 8000c12:	031b      	lsls	r3, r3, #12
 8000c14:	e6bc      	b.n	8000990 <__aeabi_dadd+0x29c>
 8000c16:	464a      	mov	r2, r9
 8000c18:	1bd5      	subs	r5, r2, r7
 8000c1a:	45a9      	cmp	r9, r5
 8000c1c:	4189      	sbcs	r1, r1
 8000c1e:	4662      	mov	r2, ip
 8000c20:	4249      	negs	r1, r1
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	4698      	mov	r8, r3
 8000c28:	2601      	movs	r6, #1
 8000c2a:	e5ae      	b.n	800078a <__aeabi_dadd+0x96>
 8000c2c:	464a      	mov	r2, r9
 8000c2e:	08d1      	lsrs	r1, r2, #3
 8000c30:	075a      	lsls	r2, r3, #29
 8000c32:	4311      	orrs	r1, r2
 8000c34:	08db      	lsrs	r3, r3, #3
 8000c36:	e6a7      	b.n	8000988 <__aeabi_dadd+0x294>
 8000c38:	4663      	mov	r3, ip
 8000c3a:	08f9      	lsrs	r1, r7, #3
 8000c3c:	075a      	lsls	r2, r3, #29
 8000c3e:	4654      	mov	r4, sl
 8000c40:	4311      	orrs	r1, r2
 8000c42:	08db      	lsrs	r3, r3, #3
 8000c44:	e6a0      	b.n	8000988 <__aeabi_dadd+0x294>
 8000c46:	464a      	mov	r2, r9
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	001d      	movs	r5, r3
 8000c4c:	1e6b      	subs	r3, r5, #1
 8000c4e:	419d      	sbcs	r5, r3
 8000c50:	e6c7      	b.n	80009e2 <__aeabi_dadd+0x2ee>
 8000c52:	0014      	movs	r4, r2
 8000c54:	001e      	movs	r6, r3
 8000c56:	3c20      	subs	r4, #32
 8000c58:	40e6      	lsrs	r6, r4
 8000c5a:	2a20      	cmp	r2, #32
 8000c5c:	d005      	beq.n	8000c6a <__aeabi_dadd+0x576>
 8000c5e:	2440      	movs	r4, #64	; 0x40
 8000c60:	1aa2      	subs	r2, r4, r2
 8000c62:	4093      	lsls	r3, r2
 8000c64:	464a      	mov	r2, r9
 8000c66:	431a      	orrs	r2, r3
 8000c68:	4691      	mov	r9, r2
 8000c6a:	464d      	mov	r5, r9
 8000c6c:	1e6b      	subs	r3, r5, #1
 8000c6e:	419d      	sbcs	r5, r3
 8000c70:	4335      	orrs	r5, r6
 8000c72:	e778      	b.n	8000b66 <__aeabi_dadd+0x472>
 8000c74:	464a      	mov	r2, r9
 8000c76:	431a      	orrs	r2, r3
 8000c78:	d000      	beq.n	8000c7c <__aeabi_dadd+0x588>
 8000c7a:	e66b      	b.n	8000954 <__aeabi_dadd+0x260>
 8000c7c:	076b      	lsls	r3, r5, #29
 8000c7e:	08f9      	lsrs	r1, r7, #3
 8000c80:	4319      	orrs	r1, r3
 8000c82:	08eb      	lsrs	r3, r5, #3
 8000c84:	e680      	b.n	8000988 <__aeabi_dadd+0x294>
 8000c86:	4661      	mov	r1, ip
 8000c88:	4339      	orrs	r1, r7
 8000c8a:	d054      	beq.n	8000d36 <__aeabi_dadd+0x642>
 8000c8c:	4663      	mov	r3, ip
 8000c8e:	08f9      	lsrs	r1, r7, #3
 8000c90:	075c      	lsls	r4, r3, #29
 8000c92:	4321      	orrs	r1, r4
 8000c94:	08db      	lsrs	r3, r3, #3
 8000c96:	0004      	movs	r4, r0
 8000c98:	e654      	b.n	8000944 <__aeabi_dadd+0x250>
 8000c9a:	464a      	mov	r2, r9
 8000c9c:	1abd      	subs	r5, r7, r2
 8000c9e:	42af      	cmp	r7, r5
 8000ca0:	4189      	sbcs	r1, r1
 8000ca2:	4662      	mov	r2, ip
 8000ca4:	4249      	negs	r1, r1
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	4698      	mov	r8, r3
 8000cac:	0004      	movs	r4, r0
 8000cae:	2601      	movs	r6, #1
 8000cb0:	e56b      	b.n	800078a <__aeabi_dadd+0x96>
 8000cb2:	464a      	mov	r2, r9
 8000cb4:	1bd5      	subs	r5, r2, r7
 8000cb6:	45a9      	cmp	r9, r5
 8000cb8:	4189      	sbcs	r1, r1
 8000cba:	4662      	mov	r2, ip
 8000cbc:	4249      	negs	r1, r1
 8000cbe:	1a9a      	subs	r2, r3, r2
 8000cc0:	1a52      	subs	r2, r2, r1
 8000cc2:	4690      	mov	r8, r2
 8000cc4:	0212      	lsls	r2, r2, #8
 8000cc6:	d532      	bpl.n	8000d2e <__aeabi_dadd+0x63a>
 8000cc8:	464a      	mov	r2, r9
 8000cca:	1abd      	subs	r5, r7, r2
 8000ccc:	42af      	cmp	r7, r5
 8000cce:	4189      	sbcs	r1, r1
 8000cd0:	4662      	mov	r2, ip
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	1a5b      	subs	r3, r3, r1
 8000cd8:	4698      	mov	r8, r3
 8000cda:	0004      	movs	r4, r0
 8000cdc:	e584      	b.n	80007e8 <__aeabi_dadd+0xf4>
 8000cde:	4663      	mov	r3, ip
 8000ce0:	08f9      	lsrs	r1, r7, #3
 8000ce2:	075a      	lsls	r2, r3, #29
 8000ce4:	4311      	orrs	r1, r2
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	e64e      	b.n	8000988 <__aeabi_dadd+0x294>
 8000cea:	08f9      	lsrs	r1, r7, #3
 8000cec:	0768      	lsls	r0, r5, #29
 8000cee:	4301      	orrs	r1, r0
 8000cf0:	08eb      	lsrs	r3, r5, #3
 8000cf2:	e624      	b.n	800093e <__aeabi_dadd+0x24a>
 8000cf4:	4662      	mov	r2, ip
 8000cf6:	433a      	orrs	r2, r7
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dadd+0x608>
 8000cfa:	e698      	b.n	8000a2e <__aeabi_dadd+0x33a>
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	08d1      	lsrs	r1, r2, #3
 8000d00:	075a      	lsls	r2, r3, #29
 8000d02:	4311      	orrs	r1, r2
 8000d04:	08da      	lsrs	r2, r3, #3
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	031b      	lsls	r3, r3, #12
 8000d0a:	421a      	tst	r2, r3
 8000d0c:	d008      	beq.n	8000d20 <__aeabi_dadd+0x62c>
 8000d0e:	4660      	mov	r0, ip
 8000d10:	08c5      	lsrs	r5, r0, #3
 8000d12:	421d      	tst	r5, r3
 8000d14:	d104      	bne.n	8000d20 <__aeabi_dadd+0x62c>
 8000d16:	4654      	mov	r4, sl
 8000d18:	002a      	movs	r2, r5
 8000d1a:	08f9      	lsrs	r1, r7, #3
 8000d1c:	0743      	lsls	r3, r0, #29
 8000d1e:	4319      	orrs	r1, r3
 8000d20:	0f4b      	lsrs	r3, r1, #29
 8000d22:	00c9      	lsls	r1, r1, #3
 8000d24:	075b      	lsls	r3, r3, #29
 8000d26:	08c9      	lsrs	r1, r1, #3
 8000d28:	4319      	orrs	r1, r3
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	e62c      	b.n	8000988 <__aeabi_dadd+0x294>
 8000d2e:	4641      	mov	r1, r8
 8000d30:	4329      	orrs	r1, r5
 8000d32:	d000      	beq.n	8000d36 <__aeabi_dadd+0x642>
 8000d34:	e5fa      	b.n	800092c <__aeabi_dadd+0x238>
 8000d36:	2300      	movs	r3, #0
 8000d38:	000a      	movs	r2, r1
 8000d3a:	2400      	movs	r4, #0
 8000d3c:	e602      	b.n	8000944 <__aeabi_dadd+0x250>
 8000d3e:	076b      	lsls	r3, r5, #29
 8000d40:	08f9      	lsrs	r1, r7, #3
 8000d42:	4319      	orrs	r1, r3
 8000d44:	08eb      	lsrs	r3, r5, #3
 8000d46:	e5fd      	b.n	8000944 <__aeabi_dadd+0x250>
 8000d48:	4663      	mov	r3, ip
 8000d4a:	08f9      	lsrs	r1, r7, #3
 8000d4c:	075b      	lsls	r3, r3, #29
 8000d4e:	4319      	orrs	r1, r3
 8000d50:	4663      	mov	r3, ip
 8000d52:	0004      	movs	r4, r0
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	e617      	b.n	8000988 <__aeabi_dadd+0x294>
 8000d58:	003d      	movs	r5, r7
 8000d5a:	444d      	add	r5, r9
 8000d5c:	4463      	add	r3, ip
 8000d5e:	454d      	cmp	r5, r9
 8000d60:	4189      	sbcs	r1, r1
 8000d62:	4698      	mov	r8, r3
 8000d64:	4249      	negs	r1, r1
 8000d66:	4488      	add	r8, r1
 8000d68:	4643      	mov	r3, r8
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	d400      	bmi.n	8000d70 <__aeabi_dadd+0x67c>
 8000d6e:	e5dd      	b.n	800092c <__aeabi_dadd+0x238>
 8000d70:	4642      	mov	r2, r8
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <__aeabi_dadd+0x6d0>)
 8000d74:	2601      	movs	r6, #1
 8000d76:	401a      	ands	r2, r3
 8000d78:	4690      	mov	r8, r2
 8000d7a:	e5d7      	b.n	800092c <__aeabi_dadd+0x238>
 8000d7c:	0010      	movs	r0, r2
 8000d7e:	001e      	movs	r6, r3
 8000d80:	3820      	subs	r0, #32
 8000d82:	40c6      	lsrs	r6, r0
 8000d84:	2a20      	cmp	r2, #32
 8000d86:	d005      	beq.n	8000d94 <__aeabi_dadd+0x6a0>
 8000d88:	2040      	movs	r0, #64	; 0x40
 8000d8a:	1a82      	subs	r2, r0, r2
 8000d8c:	4093      	lsls	r3, r2
 8000d8e:	464a      	mov	r2, r9
 8000d90:	431a      	orrs	r2, r3
 8000d92:	4691      	mov	r9, r2
 8000d94:	464d      	mov	r5, r9
 8000d96:	1e6b      	subs	r3, r5, #1
 8000d98:	419d      	sbcs	r5, r3
 8000d9a:	4335      	orrs	r5, r6
 8000d9c:	e621      	b.n	80009e2 <__aeabi_dadd+0x2ee>
 8000d9e:	0002      	movs	r2, r0
 8000da0:	2300      	movs	r3, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	e540      	b.n	8000828 <__aeabi_dadd+0x134>
 8000da6:	464a      	mov	r2, r9
 8000da8:	19d5      	adds	r5, r2, r7
 8000daa:	42bd      	cmp	r5, r7
 8000dac:	4189      	sbcs	r1, r1
 8000dae:	4463      	add	r3, ip
 8000db0:	4698      	mov	r8, r3
 8000db2:	4249      	negs	r1, r1
 8000db4:	4488      	add	r8, r1
 8000db6:	e5b3      	b.n	8000920 <__aeabi_dadd+0x22c>
 8000db8:	2100      	movs	r1, #0
 8000dba:	4a01      	ldr	r2, [pc, #4]	; (8000dc0 <__aeabi_dadd+0x6cc>)
 8000dbc:	000b      	movs	r3, r1
 8000dbe:	e533      	b.n	8000828 <__aeabi_dadd+0x134>
 8000dc0:	000007ff 	.word	0x000007ff
 8000dc4:	ff7fffff 	.word	0xff7fffff

08000dc8 <__aeabi_ddiv>:
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dca:	4657      	mov	r7, sl
 8000dcc:	464e      	mov	r6, r9
 8000dce:	4645      	mov	r5, r8
 8000dd0:	46de      	mov	lr, fp
 8000dd2:	b5e0      	push	{r5, r6, r7, lr}
 8000dd4:	4681      	mov	r9, r0
 8000dd6:	0005      	movs	r5, r0
 8000dd8:	030c      	lsls	r4, r1, #12
 8000dda:	0048      	lsls	r0, r1, #1
 8000ddc:	4692      	mov	sl, r2
 8000dde:	001f      	movs	r7, r3
 8000de0:	b085      	sub	sp, #20
 8000de2:	0b24      	lsrs	r4, r4, #12
 8000de4:	0d40      	lsrs	r0, r0, #21
 8000de6:	0fce      	lsrs	r6, r1, #31
 8000de8:	2800      	cmp	r0, #0
 8000dea:	d059      	beq.n	8000ea0 <__aeabi_ddiv+0xd8>
 8000dec:	4b87      	ldr	r3, [pc, #540]	; (800100c <__aeabi_ddiv+0x244>)
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d100      	bne.n	8000df4 <__aeabi_ddiv+0x2c>
 8000df2:	e098      	b.n	8000f26 <__aeabi_ddiv+0x15e>
 8000df4:	0f6b      	lsrs	r3, r5, #29
 8000df6:	00e4      	lsls	r4, r4, #3
 8000df8:	431c      	orrs	r4, r3
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	041b      	lsls	r3, r3, #16
 8000dfe:	4323      	orrs	r3, r4
 8000e00:	4698      	mov	r8, r3
 8000e02:	4b83      	ldr	r3, [pc, #524]	; (8001010 <__aeabi_ddiv+0x248>)
 8000e04:	00ed      	lsls	r5, r5, #3
 8000e06:	469b      	mov	fp, r3
 8000e08:	2300      	movs	r3, #0
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	4483      	add	fp, r0
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	033c      	lsls	r4, r7, #12
 8000e12:	007b      	lsls	r3, r7, #1
 8000e14:	4650      	mov	r0, sl
 8000e16:	0b24      	lsrs	r4, r4, #12
 8000e18:	0d5b      	lsrs	r3, r3, #21
 8000e1a:	0fff      	lsrs	r7, r7, #31
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d067      	beq.n	8000ef0 <__aeabi_ddiv+0x128>
 8000e20:	4a7a      	ldr	r2, [pc, #488]	; (800100c <__aeabi_ddiv+0x244>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d018      	beq.n	8000e58 <__aeabi_ddiv+0x90>
 8000e26:	497a      	ldr	r1, [pc, #488]	; (8001010 <__aeabi_ddiv+0x248>)
 8000e28:	0f42      	lsrs	r2, r0, #29
 8000e2a:	468c      	mov	ip, r1
 8000e2c:	00e4      	lsls	r4, r4, #3
 8000e2e:	4659      	mov	r1, fp
 8000e30:	4314      	orrs	r4, r2
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	4463      	add	r3, ip
 8000e36:	0412      	lsls	r2, r2, #16
 8000e38:	1acb      	subs	r3, r1, r3
 8000e3a:	4314      	orrs	r4, r2
 8000e3c:	469b      	mov	fp, r3
 8000e3e:	00c2      	lsls	r2, r0, #3
 8000e40:	2000      	movs	r0, #0
 8000e42:	0033      	movs	r3, r6
 8000e44:	407b      	eors	r3, r7
 8000e46:	469a      	mov	sl, r3
 8000e48:	464b      	mov	r3, r9
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	d900      	bls.n	8000e50 <__aeabi_ddiv+0x88>
 8000e4e:	e0ef      	b.n	8001030 <__aeabi_ddiv+0x268>
 8000e50:	4970      	ldr	r1, [pc, #448]	; (8001014 <__aeabi_ddiv+0x24c>)
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	58cb      	ldr	r3, [r1, r3]
 8000e56:	469f      	mov	pc, r3
 8000e58:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <__aeabi_ddiv+0x250>)
 8000e5a:	4652      	mov	r2, sl
 8000e5c:	469c      	mov	ip, r3
 8000e5e:	4322      	orrs	r2, r4
 8000e60:	44e3      	add	fp, ip
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d000      	beq.n	8000e68 <__aeabi_ddiv+0xa0>
 8000e66:	e095      	b.n	8000f94 <__aeabi_ddiv+0x1cc>
 8000e68:	4649      	mov	r1, r9
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	4689      	mov	r9, r1
 8000e70:	2400      	movs	r4, #0
 8000e72:	2002      	movs	r0, #2
 8000e74:	e7e5      	b.n	8000e42 <__aeabi_ddiv+0x7a>
 8000e76:	2300      	movs	r3, #0
 8000e78:	2400      	movs	r4, #0
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	4652      	mov	r2, sl
 8000e7e:	051b      	lsls	r3, r3, #20
 8000e80:	4323      	orrs	r3, r4
 8000e82:	07d2      	lsls	r2, r2, #31
 8000e84:	4313      	orrs	r3, r2
 8000e86:	0028      	movs	r0, r5
 8000e88:	0019      	movs	r1, r3
 8000e8a:	b005      	add	sp, #20
 8000e8c:	bcf0      	pop	{r4, r5, r6, r7}
 8000e8e:	46bb      	mov	fp, r7
 8000e90:	46b2      	mov	sl, r6
 8000e92:	46a9      	mov	r9, r5
 8000e94:	46a0      	mov	r8, r4
 8000e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e98:	2400      	movs	r4, #0
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	4b5b      	ldr	r3, [pc, #364]	; (800100c <__aeabi_ddiv+0x244>)
 8000e9e:	e7ed      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 8000ea0:	464b      	mov	r3, r9
 8000ea2:	4323      	orrs	r3, r4
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0xe2>
 8000ea8:	e089      	b.n	8000fbe <__aeabi_ddiv+0x1f6>
 8000eaa:	2c00      	cmp	r4, #0
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_ddiv+0xe8>
 8000eae:	e1e0      	b.n	8001272 <__aeabi_ddiv+0x4aa>
 8000eb0:	0020      	movs	r0, r4
 8000eb2:	f001 fa7f 	bl	80023b4 <__clzsi2>
 8000eb6:	0001      	movs	r1, r0
 8000eb8:	0002      	movs	r2, r0
 8000eba:	390b      	subs	r1, #11
 8000ebc:	231d      	movs	r3, #29
 8000ebe:	1a5b      	subs	r3, r3, r1
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	0010      	movs	r0, r2
 8000ec4:	40d9      	lsrs	r1, r3
 8000ec6:	3808      	subs	r0, #8
 8000ec8:	4084      	lsls	r4, r0
 8000eca:	000b      	movs	r3, r1
 8000ecc:	464d      	mov	r5, r9
 8000ece:	4323      	orrs	r3, r4
 8000ed0:	4698      	mov	r8, r3
 8000ed2:	4085      	lsls	r5, r0
 8000ed4:	4851      	ldr	r0, [pc, #324]	; (800101c <__aeabi_ddiv+0x254>)
 8000ed6:	033c      	lsls	r4, r7, #12
 8000ed8:	1a83      	subs	r3, r0, r2
 8000eda:	469b      	mov	fp, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	4699      	mov	r9, r3
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	007b      	lsls	r3, r7, #1
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	0b24      	lsrs	r4, r4, #12
 8000ee8:	0d5b      	lsrs	r3, r3, #21
 8000eea:	0fff      	lsrs	r7, r7, #31
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d197      	bne.n	8000e20 <__aeabi_ddiv+0x58>
 8000ef0:	4652      	mov	r2, sl
 8000ef2:	4322      	orrs	r2, r4
 8000ef4:	d055      	beq.n	8000fa2 <__aeabi_ddiv+0x1da>
 8000ef6:	2c00      	cmp	r4, #0
 8000ef8:	d100      	bne.n	8000efc <__aeabi_ddiv+0x134>
 8000efa:	e1ca      	b.n	8001292 <__aeabi_ddiv+0x4ca>
 8000efc:	0020      	movs	r0, r4
 8000efe:	f001 fa59 	bl	80023b4 <__clzsi2>
 8000f02:	0002      	movs	r2, r0
 8000f04:	3a0b      	subs	r2, #11
 8000f06:	231d      	movs	r3, #29
 8000f08:	0001      	movs	r1, r0
 8000f0a:	1a9b      	subs	r3, r3, r2
 8000f0c:	4652      	mov	r2, sl
 8000f0e:	3908      	subs	r1, #8
 8000f10:	40da      	lsrs	r2, r3
 8000f12:	408c      	lsls	r4, r1
 8000f14:	4314      	orrs	r4, r2
 8000f16:	4652      	mov	r2, sl
 8000f18:	408a      	lsls	r2, r1
 8000f1a:	4b41      	ldr	r3, [pc, #260]	; (8001020 <__aeabi_ddiv+0x258>)
 8000f1c:	4458      	add	r0, fp
 8000f1e:	469b      	mov	fp, r3
 8000f20:	4483      	add	fp, r0
 8000f22:	2000      	movs	r0, #0
 8000f24:	e78d      	b.n	8000e42 <__aeabi_ddiv+0x7a>
 8000f26:	464b      	mov	r3, r9
 8000f28:	4323      	orrs	r3, r4
 8000f2a:	4698      	mov	r8, r3
 8000f2c:	d140      	bne.n	8000fb0 <__aeabi_ddiv+0x1e8>
 8000f2e:	2308      	movs	r3, #8
 8000f30:	4699      	mov	r9, r3
 8000f32:	3b06      	subs	r3, #6
 8000f34:	2500      	movs	r5, #0
 8000f36:	4683      	mov	fp, r0
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	e769      	b.n	8000e10 <__aeabi_ddiv+0x48>
 8000f3c:	46b2      	mov	sl, r6
 8000f3e:	9b00      	ldr	r3, [sp, #0]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d0a9      	beq.n	8000e98 <__aeabi_ddiv+0xd0>
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d100      	bne.n	8000f4a <__aeabi_ddiv+0x182>
 8000f48:	e211      	b.n	800136e <__aeabi_ddiv+0x5a6>
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d093      	beq.n	8000e76 <__aeabi_ddiv+0xae>
 8000f4e:	4a35      	ldr	r2, [pc, #212]	; (8001024 <__aeabi_ddiv+0x25c>)
 8000f50:	445a      	add	r2, fp
 8000f52:	2a00      	cmp	r2, #0
 8000f54:	dc00      	bgt.n	8000f58 <__aeabi_ddiv+0x190>
 8000f56:	e13c      	b.n	80011d2 <__aeabi_ddiv+0x40a>
 8000f58:	076b      	lsls	r3, r5, #29
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_ddiv+0x196>
 8000f5c:	e1a7      	b.n	80012ae <__aeabi_ddiv+0x4e6>
 8000f5e:	08ed      	lsrs	r5, r5, #3
 8000f60:	4643      	mov	r3, r8
 8000f62:	01db      	lsls	r3, r3, #7
 8000f64:	d506      	bpl.n	8000f74 <__aeabi_ddiv+0x1ac>
 8000f66:	4642      	mov	r2, r8
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <__aeabi_ddiv+0x260>)
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	4690      	mov	r8, r2
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	00d2      	lsls	r2, r2, #3
 8000f72:	445a      	add	r2, fp
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <__aeabi_ddiv+0x264>)
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dc8e      	bgt.n	8000e98 <__aeabi_ddiv+0xd0>
 8000f7a:	4643      	mov	r3, r8
 8000f7c:	0552      	lsls	r2, r2, #21
 8000f7e:	0758      	lsls	r0, r3, #29
 8000f80:	025c      	lsls	r4, r3, #9
 8000f82:	4305      	orrs	r5, r0
 8000f84:	0b24      	lsrs	r4, r4, #12
 8000f86:	0d53      	lsrs	r3, r2, #21
 8000f88:	e778      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 8000f8a:	46ba      	mov	sl, r7
 8000f8c:	46a0      	mov	r8, r4
 8000f8e:	0015      	movs	r5, r2
 8000f90:	9000      	str	r0, [sp, #0]
 8000f92:	e7d4      	b.n	8000f3e <__aeabi_ddiv+0x176>
 8000f94:	464a      	mov	r2, r9
 8000f96:	2303      	movs	r3, #3
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	4691      	mov	r9, r2
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	4652      	mov	r2, sl
 8000fa0:	e74f      	b.n	8000e42 <__aeabi_ddiv+0x7a>
 8000fa2:	4649      	mov	r1, r9
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4319      	orrs	r1, r3
 8000fa8:	4689      	mov	r9, r1
 8000faa:	2400      	movs	r4, #0
 8000fac:	2001      	movs	r0, #1
 8000fae:	e748      	b.n	8000e42 <__aeabi_ddiv+0x7a>
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	4699      	mov	r9, r3
 8000fb4:	3b09      	subs	r3, #9
 8000fb6:	46a0      	mov	r8, r4
 8000fb8:	4683      	mov	fp, r0
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	e728      	b.n	8000e10 <__aeabi_ddiv+0x48>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	4699      	mov	r9, r3
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	469b      	mov	fp, r3
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	2500      	movs	r5, #0
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	e720      	b.n	8000e10 <__aeabi_ddiv+0x48>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	2480      	movs	r4, #128	; 0x80
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	2500      	movs	r5, #0
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <__aeabi_ddiv+0x244>)
 8000fd8:	0324      	lsls	r4, r4, #12
 8000fda:	e74f      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	4641      	mov	r1, r8
 8000fe0:	031b      	lsls	r3, r3, #12
 8000fe2:	4219      	tst	r1, r3
 8000fe4:	d008      	beq.n	8000ff8 <__aeabi_ddiv+0x230>
 8000fe6:	421c      	tst	r4, r3
 8000fe8:	d106      	bne.n	8000ff8 <__aeabi_ddiv+0x230>
 8000fea:	431c      	orrs	r4, r3
 8000fec:	0324      	lsls	r4, r4, #12
 8000fee:	46ba      	mov	sl, r7
 8000ff0:	0015      	movs	r5, r2
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <__aeabi_ddiv+0x244>)
 8000ff4:	0b24      	lsrs	r4, r4, #12
 8000ff6:	e741      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 8000ff8:	2480      	movs	r4, #128	; 0x80
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	0324      	lsls	r4, r4, #12
 8000ffe:	431c      	orrs	r4, r3
 8001000:	0324      	lsls	r4, r4, #12
 8001002:	46b2      	mov	sl, r6
 8001004:	4b01      	ldr	r3, [pc, #4]	; (800100c <__aeabi_ddiv+0x244>)
 8001006:	0b24      	lsrs	r4, r4, #12
 8001008:	e738      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	000007ff 	.word	0x000007ff
 8001010:	fffffc01 	.word	0xfffffc01
 8001014:	0800e644 	.word	0x0800e644
 8001018:	fffff801 	.word	0xfffff801
 800101c:	fffffc0d 	.word	0xfffffc0d
 8001020:	000003f3 	.word	0x000003f3
 8001024:	000003ff 	.word	0x000003ff
 8001028:	feffffff 	.word	0xfeffffff
 800102c:	000007fe 	.word	0x000007fe
 8001030:	4544      	cmp	r4, r8
 8001032:	d200      	bcs.n	8001036 <__aeabi_ddiv+0x26e>
 8001034:	e116      	b.n	8001264 <__aeabi_ddiv+0x49c>
 8001036:	d100      	bne.n	800103a <__aeabi_ddiv+0x272>
 8001038:	e111      	b.n	800125e <__aeabi_ddiv+0x496>
 800103a:	2301      	movs	r3, #1
 800103c:	425b      	negs	r3, r3
 800103e:	469c      	mov	ip, r3
 8001040:	002e      	movs	r6, r5
 8001042:	4640      	mov	r0, r8
 8001044:	2500      	movs	r5, #0
 8001046:	44e3      	add	fp, ip
 8001048:	0223      	lsls	r3, r4, #8
 800104a:	0e14      	lsrs	r4, r2, #24
 800104c:	431c      	orrs	r4, r3
 800104e:	0c1b      	lsrs	r3, r3, #16
 8001050:	4699      	mov	r9, r3
 8001052:	0423      	lsls	r3, r4, #16
 8001054:	0c1f      	lsrs	r7, r3, #16
 8001056:	0212      	lsls	r2, r2, #8
 8001058:	4649      	mov	r1, r9
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	9701      	str	r7, [sp, #4]
 800105e:	f7ff f8f3 	bl	8000248 <__aeabi_uidivmod>
 8001062:	0002      	movs	r2, r0
 8001064:	437a      	muls	r2, r7
 8001066:	040b      	lsls	r3, r1, #16
 8001068:	0c31      	lsrs	r1, r6, #16
 800106a:	4680      	mov	r8, r0
 800106c:	4319      	orrs	r1, r3
 800106e:	428a      	cmp	r2, r1
 8001070:	d90b      	bls.n	800108a <__aeabi_ddiv+0x2c2>
 8001072:	2301      	movs	r3, #1
 8001074:	425b      	negs	r3, r3
 8001076:	469c      	mov	ip, r3
 8001078:	1909      	adds	r1, r1, r4
 800107a:	44e0      	add	r8, ip
 800107c:	428c      	cmp	r4, r1
 800107e:	d804      	bhi.n	800108a <__aeabi_ddiv+0x2c2>
 8001080:	428a      	cmp	r2, r1
 8001082:	d902      	bls.n	800108a <__aeabi_ddiv+0x2c2>
 8001084:	1e83      	subs	r3, r0, #2
 8001086:	4698      	mov	r8, r3
 8001088:	1909      	adds	r1, r1, r4
 800108a:	1a88      	subs	r0, r1, r2
 800108c:	4649      	mov	r1, r9
 800108e:	f7ff f8db 	bl	8000248 <__aeabi_uidivmod>
 8001092:	0409      	lsls	r1, r1, #16
 8001094:	468c      	mov	ip, r1
 8001096:	0431      	lsls	r1, r6, #16
 8001098:	4666      	mov	r6, ip
 800109a:	9a01      	ldr	r2, [sp, #4]
 800109c:	0c09      	lsrs	r1, r1, #16
 800109e:	4342      	muls	r2, r0
 80010a0:	0003      	movs	r3, r0
 80010a2:	4331      	orrs	r1, r6
 80010a4:	428a      	cmp	r2, r1
 80010a6:	d904      	bls.n	80010b2 <__aeabi_ddiv+0x2ea>
 80010a8:	1909      	adds	r1, r1, r4
 80010aa:	3b01      	subs	r3, #1
 80010ac:	428c      	cmp	r4, r1
 80010ae:	d800      	bhi.n	80010b2 <__aeabi_ddiv+0x2ea>
 80010b0:	e111      	b.n	80012d6 <__aeabi_ddiv+0x50e>
 80010b2:	1a89      	subs	r1, r1, r2
 80010b4:	4642      	mov	r2, r8
 80010b6:	9e00      	ldr	r6, [sp, #0]
 80010b8:	0412      	lsls	r2, r2, #16
 80010ba:	431a      	orrs	r2, r3
 80010bc:	0c33      	lsrs	r3, r6, #16
 80010be:	001f      	movs	r7, r3
 80010c0:	0c10      	lsrs	r0, r2, #16
 80010c2:	4690      	mov	r8, r2
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	0413      	lsls	r3, r2, #16
 80010c8:	0432      	lsls	r2, r6, #16
 80010ca:	0c16      	lsrs	r6, r2, #16
 80010cc:	0032      	movs	r2, r6
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	435a      	muls	r2, r3
 80010d2:	9603      	str	r6, [sp, #12]
 80010d4:	437b      	muls	r3, r7
 80010d6:	4346      	muls	r6, r0
 80010d8:	4378      	muls	r0, r7
 80010da:	0c17      	lsrs	r7, r2, #16
 80010dc:	46bc      	mov	ip, r7
 80010de:	199b      	adds	r3, r3, r6
 80010e0:	4463      	add	r3, ip
 80010e2:	429e      	cmp	r6, r3
 80010e4:	d903      	bls.n	80010ee <__aeabi_ddiv+0x326>
 80010e6:	2680      	movs	r6, #128	; 0x80
 80010e8:	0276      	lsls	r6, r6, #9
 80010ea:	46b4      	mov	ip, r6
 80010ec:	4460      	add	r0, ip
 80010ee:	0c1e      	lsrs	r6, r3, #16
 80010f0:	1830      	adds	r0, r6, r0
 80010f2:	0416      	lsls	r6, r2, #16
 80010f4:	041b      	lsls	r3, r3, #16
 80010f6:	0c36      	lsrs	r6, r6, #16
 80010f8:	199e      	adds	r6, r3, r6
 80010fa:	4281      	cmp	r1, r0
 80010fc:	d200      	bcs.n	8001100 <__aeabi_ddiv+0x338>
 80010fe:	e09c      	b.n	800123a <__aeabi_ddiv+0x472>
 8001100:	d100      	bne.n	8001104 <__aeabi_ddiv+0x33c>
 8001102:	e097      	b.n	8001234 <__aeabi_ddiv+0x46c>
 8001104:	1bae      	subs	r6, r5, r6
 8001106:	1a09      	subs	r1, r1, r0
 8001108:	42b5      	cmp	r5, r6
 800110a:	4180      	sbcs	r0, r0
 800110c:	4240      	negs	r0, r0
 800110e:	1a08      	subs	r0, r1, r0
 8001110:	4284      	cmp	r4, r0
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0x34e>
 8001114:	e111      	b.n	800133a <__aeabi_ddiv+0x572>
 8001116:	4649      	mov	r1, r9
 8001118:	f7ff f896 	bl	8000248 <__aeabi_uidivmod>
 800111c:	9a01      	ldr	r2, [sp, #4]
 800111e:	040b      	lsls	r3, r1, #16
 8001120:	4342      	muls	r2, r0
 8001122:	0c31      	lsrs	r1, r6, #16
 8001124:	0005      	movs	r5, r0
 8001126:	4319      	orrs	r1, r3
 8001128:	428a      	cmp	r2, r1
 800112a:	d907      	bls.n	800113c <__aeabi_ddiv+0x374>
 800112c:	1909      	adds	r1, r1, r4
 800112e:	3d01      	subs	r5, #1
 8001130:	428c      	cmp	r4, r1
 8001132:	d803      	bhi.n	800113c <__aeabi_ddiv+0x374>
 8001134:	428a      	cmp	r2, r1
 8001136:	d901      	bls.n	800113c <__aeabi_ddiv+0x374>
 8001138:	1e85      	subs	r5, r0, #2
 800113a:	1909      	adds	r1, r1, r4
 800113c:	1a88      	subs	r0, r1, r2
 800113e:	4649      	mov	r1, r9
 8001140:	f7ff f882 	bl	8000248 <__aeabi_uidivmod>
 8001144:	0409      	lsls	r1, r1, #16
 8001146:	468c      	mov	ip, r1
 8001148:	0431      	lsls	r1, r6, #16
 800114a:	4666      	mov	r6, ip
 800114c:	9a01      	ldr	r2, [sp, #4]
 800114e:	0c09      	lsrs	r1, r1, #16
 8001150:	4342      	muls	r2, r0
 8001152:	0003      	movs	r3, r0
 8001154:	4331      	orrs	r1, r6
 8001156:	428a      	cmp	r2, r1
 8001158:	d907      	bls.n	800116a <__aeabi_ddiv+0x3a2>
 800115a:	1909      	adds	r1, r1, r4
 800115c:	3b01      	subs	r3, #1
 800115e:	428c      	cmp	r4, r1
 8001160:	d803      	bhi.n	800116a <__aeabi_ddiv+0x3a2>
 8001162:	428a      	cmp	r2, r1
 8001164:	d901      	bls.n	800116a <__aeabi_ddiv+0x3a2>
 8001166:	1e83      	subs	r3, r0, #2
 8001168:	1909      	adds	r1, r1, r4
 800116a:	9e03      	ldr	r6, [sp, #12]
 800116c:	1a89      	subs	r1, r1, r2
 800116e:	0032      	movs	r2, r6
 8001170:	042d      	lsls	r5, r5, #16
 8001172:	431d      	orrs	r5, r3
 8001174:	9f02      	ldr	r7, [sp, #8]
 8001176:	042b      	lsls	r3, r5, #16
 8001178:	0c1b      	lsrs	r3, r3, #16
 800117a:	435a      	muls	r2, r3
 800117c:	437b      	muls	r3, r7
 800117e:	469c      	mov	ip, r3
 8001180:	0c28      	lsrs	r0, r5, #16
 8001182:	4346      	muls	r6, r0
 8001184:	0c13      	lsrs	r3, r2, #16
 8001186:	44b4      	add	ip, r6
 8001188:	4463      	add	r3, ip
 800118a:	4378      	muls	r0, r7
 800118c:	429e      	cmp	r6, r3
 800118e:	d903      	bls.n	8001198 <__aeabi_ddiv+0x3d0>
 8001190:	2680      	movs	r6, #128	; 0x80
 8001192:	0276      	lsls	r6, r6, #9
 8001194:	46b4      	mov	ip, r6
 8001196:	4460      	add	r0, ip
 8001198:	0c1e      	lsrs	r6, r3, #16
 800119a:	0412      	lsls	r2, r2, #16
 800119c:	041b      	lsls	r3, r3, #16
 800119e:	0c12      	lsrs	r2, r2, #16
 80011a0:	1830      	adds	r0, r6, r0
 80011a2:	189b      	adds	r3, r3, r2
 80011a4:	4281      	cmp	r1, r0
 80011a6:	d306      	bcc.n	80011b6 <__aeabi_ddiv+0x3ee>
 80011a8:	d002      	beq.n	80011b0 <__aeabi_ddiv+0x3e8>
 80011aa:	2301      	movs	r3, #1
 80011ac:	431d      	orrs	r5, r3
 80011ae:	e6ce      	b.n	8000f4e <__aeabi_ddiv+0x186>
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d100      	bne.n	80011b6 <__aeabi_ddiv+0x3ee>
 80011b4:	e6cb      	b.n	8000f4e <__aeabi_ddiv+0x186>
 80011b6:	1861      	adds	r1, r4, r1
 80011b8:	1e6e      	subs	r6, r5, #1
 80011ba:	42a1      	cmp	r1, r4
 80011bc:	d200      	bcs.n	80011c0 <__aeabi_ddiv+0x3f8>
 80011be:	e0a4      	b.n	800130a <__aeabi_ddiv+0x542>
 80011c0:	4281      	cmp	r1, r0
 80011c2:	d200      	bcs.n	80011c6 <__aeabi_ddiv+0x3fe>
 80011c4:	e0c9      	b.n	800135a <__aeabi_ddiv+0x592>
 80011c6:	d100      	bne.n	80011ca <__aeabi_ddiv+0x402>
 80011c8:	e0d9      	b.n	800137e <__aeabi_ddiv+0x5b6>
 80011ca:	0035      	movs	r5, r6
 80011cc:	e7ed      	b.n	80011aa <__aeabi_ddiv+0x3e2>
 80011ce:	2501      	movs	r5, #1
 80011d0:	426d      	negs	r5, r5
 80011d2:	2101      	movs	r1, #1
 80011d4:	1a89      	subs	r1, r1, r2
 80011d6:	2938      	cmp	r1, #56	; 0x38
 80011d8:	dd00      	ble.n	80011dc <__aeabi_ddiv+0x414>
 80011da:	e64c      	b.n	8000e76 <__aeabi_ddiv+0xae>
 80011dc:	291f      	cmp	r1, #31
 80011de:	dc00      	bgt.n	80011e2 <__aeabi_ddiv+0x41a>
 80011e0:	e07f      	b.n	80012e2 <__aeabi_ddiv+0x51a>
 80011e2:	231f      	movs	r3, #31
 80011e4:	425b      	negs	r3, r3
 80011e6:	1a9a      	subs	r2, r3, r2
 80011e8:	4643      	mov	r3, r8
 80011ea:	40d3      	lsrs	r3, r2
 80011ec:	2920      	cmp	r1, #32
 80011ee:	d004      	beq.n	80011fa <__aeabi_ddiv+0x432>
 80011f0:	4644      	mov	r4, r8
 80011f2:	4a65      	ldr	r2, [pc, #404]	; (8001388 <__aeabi_ddiv+0x5c0>)
 80011f4:	445a      	add	r2, fp
 80011f6:	4094      	lsls	r4, r2
 80011f8:	4325      	orrs	r5, r4
 80011fa:	1e6a      	subs	r2, r5, #1
 80011fc:	4195      	sbcs	r5, r2
 80011fe:	2207      	movs	r2, #7
 8001200:	432b      	orrs	r3, r5
 8001202:	0015      	movs	r5, r2
 8001204:	2400      	movs	r4, #0
 8001206:	401d      	ands	r5, r3
 8001208:	421a      	tst	r2, r3
 800120a:	d100      	bne.n	800120e <__aeabi_ddiv+0x446>
 800120c:	e0a1      	b.n	8001352 <__aeabi_ddiv+0x58a>
 800120e:	220f      	movs	r2, #15
 8001210:	2400      	movs	r4, #0
 8001212:	401a      	ands	r2, r3
 8001214:	2a04      	cmp	r2, #4
 8001216:	d100      	bne.n	800121a <__aeabi_ddiv+0x452>
 8001218:	e098      	b.n	800134c <__aeabi_ddiv+0x584>
 800121a:	1d1a      	adds	r2, r3, #4
 800121c:	429a      	cmp	r2, r3
 800121e:	419b      	sbcs	r3, r3
 8001220:	425b      	negs	r3, r3
 8001222:	18e4      	adds	r4, r4, r3
 8001224:	0013      	movs	r3, r2
 8001226:	0222      	lsls	r2, r4, #8
 8001228:	d400      	bmi.n	800122c <__aeabi_ddiv+0x464>
 800122a:	e08f      	b.n	800134c <__aeabi_ddiv+0x584>
 800122c:	2301      	movs	r3, #1
 800122e:	2400      	movs	r4, #0
 8001230:	2500      	movs	r5, #0
 8001232:	e623      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 8001234:	42b5      	cmp	r5, r6
 8001236:	d300      	bcc.n	800123a <__aeabi_ddiv+0x472>
 8001238:	e764      	b.n	8001104 <__aeabi_ddiv+0x33c>
 800123a:	4643      	mov	r3, r8
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	9b00      	ldr	r3, [sp, #0]
 8001240:	469c      	mov	ip, r3
 8001242:	4465      	add	r5, ip
 8001244:	001f      	movs	r7, r3
 8001246:	429d      	cmp	r5, r3
 8001248:	419b      	sbcs	r3, r3
 800124a:	425b      	negs	r3, r3
 800124c:	191b      	adds	r3, r3, r4
 800124e:	18c9      	adds	r1, r1, r3
 8001250:	428c      	cmp	r4, r1
 8001252:	d23a      	bcs.n	80012ca <__aeabi_ddiv+0x502>
 8001254:	4288      	cmp	r0, r1
 8001256:	d863      	bhi.n	8001320 <__aeabi_ddiv+0x558>
 8001258:	d060      	beq.n	800131c <__aeabi_ddiv+0x554>
 800125a:	4690      	mov	r8, r2
 800125c:	e752      	b.n	8001104 <__aeabi_ddiv+0x33c>
 800125e:	42aa      	cmp	r2, r5
 8001260:	d900      	bls.n	8001264 <__aeabi_ddiv+0x49c>
 8001262:	e6ea      	b.n	800103a <__aeabi_ddiv+0x272>
 8001264:	4643      	mov	r3, r8
 8001266:	07de      	lsls	r6, r3, #31
 8001268:	0858      	lsrs	r0, r3, #1
 800126a:	086b      	lsrs	r3, r5, #1
 800126c:	431e      	orrs	r6, r3
 800126e:	07ed      	lsls	r5, r5, #31
 8001270:	e6ea      	b.n	8001048 <__aeabi_ddiv+0x280>
 8001272:	4648      	mov	r0, r9
 8001274:	f001 f89e 	bl	80023b4 <__clzsi2>
 8001278:	0001      	movs	r1, r0
 800127a:	0002      	movs	r2, r0
 800127c:	3115      	adds	r1, #21
 800127e:	3220      	adds	r2, #32
 8001280:	291c      	cmp	r1, #28
 8001282:	dc00      	bgt.n	8001286 <__aeabi_ddiv+0x4be>
 8001284:	e61a      	b.n	8000ebc <__aeabi_ddiv+0xf4>
 8001286:	464b      	mov	r3, r9
 8001288:	3808      	subs	r0, #8
 800128a:	4083      	lsls	r3, r0
 800128c:	2500      	movs	r5, #0
 800128e:	4698      	mov	r8, r3
 8001290:	e620      	b.n	8000ed4 <__aeabi_ddiv+0x10c>
 8001292:	f001 f88f 	bl	80023b4 <__clzsi2>
 8001296:	0003      	movs	r3, r0
 8001298:	001a      	movs	r2, r3
 800129a:	3215      	adds	r2, #21
 800129c:	3020      	adds	r0, #32
 800129e:	2a1c      	cmp	r2, #28
 80012a0:	dc00      	bgt.n	80012a4 <__aeabi_ddiv+0x4dc>
 80012a2:	e630      	b.n	8000f06 <__aeabi_ddiv+0x13e>
 80012a4:	4654      	mov	r4, sl
 80012a6:	3b08      	subs	r3, #8
 80012a8:	2200      	movs	r2, #0
 80012aa:	409c      	lsls	r4, r3
 80012ac:	e635      	b.n	8000f1a <__aeabi_ddiv+0x152>
 80012ae:	230f      	movs	r3, #15
 80012b0:	402b      	ands	r3, r5
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d100      	bne.n	80012b8 <__aeabi_ddiv+0x4f0>
 80012b6:	e652      	b.n	8000f5e <__aeabi_ddiv+0x196>
 80012b8:	2305      	movs	r3, #5
 80012ba:	425b      	negs	r3, r3
 80012bc:	42ab      	cmp	r3, r5
 80012be:	419b      	sbcs	r3, r3
 80012c0:	3504      	adds	r5, #4
 80012c2:	425b      	negs	r3, r3
 80012c4:	08ed      	lsrs	r5, r5, #3
 80012c6:	4498      	add	r8, r3
 80012c8:	e64a      	b.n	8000f60 <__aeabi_ddiv+0x198>
 80012ca:	428c      	cmp	r4, r1
 80012cc:	d1c5      	bne.n	800125a <__aeabi_ddiv+0x492>
 80012ce:	42af      	cmp	r7, r5
 80012d0:	d9c0      	bls.n	8001254 <__aeabi_ddiv+0x48c>
 80012d2:	4690      	mov	r8, r2
 80012d4:	e716      	b.n	8001104 <__aeabi_ddiv+0x33c>
 80012d6:	428a      	cmp	r2, r1
 80012d8:	d800      	bhi.n	80012dc <__aeabi_ddiv+0x514>
 80012da:	e6ea      	b.n	80010b2 <__aeabi_ddiv+0x2ea>
 80012dc:	1e83      	subs	r3, r0, #2
 80012de:	1909      	adds	r1, r1, r4
 80012e0:	e6e7      	b.n	80010b2 <__aeabi_ddiv+0x2ea>
 80012e2:	4a2a      	ldr	r2, [pc, #168]	; (800138c <__aeabi_ddiv+0x5c4>)
 80012e4:	0028      	movs	r0, r5
 80012e6:	445a      	add	r2, fp
 80012e8:	4643      	mov	r3, r8
 80012ea:	4095      	lsls	r5, r2
 80012ec:	4093      	lsls	r3, r2
 80012ee:	40c8      	lsrs	r0, r1
 80012f0:	1e6a      	subs	r2, r5, #1
 80012f2:	4195      	sbcs	r5, r2
 80012f4:	4644      	mov	r4, r8
 80012f6:	4303      	orrs	r3, r0
 80012f8:	432b      	orrs	r3, r5
 80012fa:	40cc      	lsrs	r4, r1
 80012fc:	075a      	lsls	r2, r3, #29
 80012fe:	d092      	beq.n	8001226 <__aeabi_ddiv+0x45e>
 8001300:	220f      	movs	r2, #15
 8001302:	401a      	ands	r2, r3
 8001304:	2a04      	cmp	r2, #4
 8001306:	d188      	bne.n	800121a <__aeabi_ddiv+0x452>
 8001308:	e78d      	b.n	8001226 <__aeabi_ddiv+0x45e>
 800130a:	0035      	movs	r5, r6
 800130c:	4281      	cmp	r1, r0
 800130e:	d000      	beq.n	8001312 <__aeabi_ddiv+0x54a>
 8001310:	e74b      	b.n	80011aa <__aeabi_ddiv+0x3e2>
 8001312:	9a00      	ldr	r2, [sp, #0]
 8001314:	4293      	cmp	r3, r2
 8001316:	d000      	beq.n	800131a <__aeabi_ddiv+0x552>
 8001318:	e747      	b.n	80011aa <__aeabi_ddiv+0x3e2>
 800131a:	e618      	b.n	8000f4e <__aeabi_ddiv+0x186>
 800131c:	42ae      	cmp	r6, r5
 800131e:	d99c      	bls.n	800125a <__aeabi_ddiv+0x492>
 8001320:	2302      	movs	r3, #2
 8001322:	425b      	negs	r3, r3
 8001324:	469c      	mov	ip, r3
 8001326:	9b00      	ldr	r3, [sp, #0]
 8001328:	44e0      	add	r8, ip
 800132a:	469c      	mov	ip, r3
 800132c:	4465      	add	r5, ip
 800132e:	429d      	cmp	r5, r3
 8001330:	419b      	sbcs	r3, r3
 8001332:	425b      	negs	r3, r3
 8001334:	191b      	adds	r3, r3, r4
 8001336:	18c9      	adds	r1, r1, r3
 8001338:	e6e4      	b.n	8001104 <__aeabi_ddiv+0x33c>
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <__aeabi_ddiv+0x5c8>)
 800133c:	445a      	add	r2, fp
 800133e:	2a00      	cmp	r2, #0
 8001340:	dc00      	bgt.n	8001344 <__aeabi_ddiv+0x57c>
 8001342:	e744      	b.n	80011ce <__aeabi_ddiv+0x406>
 8001344:	2301      	movs	r3, #1
 8001346:	2500      	movs	r5, #0
 8001348:	4498      	add	r8, r3
 800134a:	e609      	b.n	8000f60 <__aeabi_ddiv+0x198>
 800134c:	0765      	lsls	r5, r4, #29
 800134e:	0264      	lsls	r4, r4, #9
 8001350:	0b24      	lsrs	r4, r4, #12
 8001352:	08db      	lsrs	r3, r3, #3
 8001354:	431d      	orrs	r5, r3
 8001356:	2300      	movs	r3, #0
 8001358:	e590      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 800135a:	9e00      	ldr	r6, [sp, #0]
 800135c:	3d02      	subs	r5, #2
 800135e:	0072      	lsls	r2, r6, #1
 8001360:	42b2      	cmp	r2, r6
 8001362:	41bf      	sbcs	r7, r7
 8001364:	427f      	negs	r7, r7
 8001366:	193c      	adds	r4, r7, r4
 8001368:	1909      	adds	r1, r1, r4
 800136a:	9200      	str	r2, [sp, #0]
 800136c:	e7ce      	b.n	800130c <__aeabi_ddiv+0x544>
 800136e:	2480      	movs	r4, #128	; 0x80
 8001370:	4643      	mov	r3, r8
 8001372:	0324      	lsls	r4, r4, #12
 8001374:	431c      	orrs	r4, r3
 8001376:	0324      	lsls	r4, r4, #12
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <__aeabi_ddiv+0x5cc>)
 800137a:	0b24      	lsrs	r4, r4, #12
 800137c:	e57e      	b.n	8000e7c <__aeabi_ddiv+0xb4>
 800137e:	9a00      	ldr	r2, [sp, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3ea      	bcc.n	800135a <__aeabi_ddiv+0x592>
 8001384:	0035      	movs	r5, r6
 8001386:	e7c4      	b.n	8001312 <__aeabi_ddiv+0x54a>
 8001388:	0000043e 	.word	0x0000043e
 800138c:	0000041e 	.word	0x0000041e
 8001390:	000003ff 	.word	0x000003ff
 8001394:	000007ff 	.word	0x000007ff

08001398 <__eqdf2>:
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	464f      	mov	r7, r9
 800139c:	4646      	mov	r6, r8
 800139e:	46d6      	mov	lr, sl
 80013a0:	4694      	mov	ip, r2
 80013a2:	4691      	mov	r9, r2
 80013a4:	031a      	lsls	r2, r3, #12
 80013a6:	0b12      	lsrs	r2, r2, #12
 80013a8:	4d18      	ldr	r5, [pc, #96]	; (800140c <__eqdf2+0x74>)
 80013aa:	b5c0      	push	{r6, r7, lr}
 80013ac:	004c      	lsls	r4, r1, #1
 80013ae:	030f      	lsls	r7, r1, #12
 80013b0:	4692      	mov	sl, r2
 80013b2:	005a      	lsls	r2, r3, #1
 80013b4:	0006      	movs	r6, r0
 80013b6:	4680      	mov	r8, r0
 80013b8:	0b3f      	lsrs	r7, r7, #12
 80013ba:	2001      	movs	r0, #1
 80013bc:	0d64      	lsrs	r4, r4, #21
 80013be:	0fc9      	lsrs	r1, r1, #31
 80013c0:	0d52      	lsrs	r2, r2, #21
 80013c2:	0fdb      	lsrs	r3, r3, #31
 80013c4:	42ac      	cmp	r4, r5
 80013c6:	d00a      	beq.n	80013de <__eqdf2+0x46>
 80013c8:	42aa      	cmp	r2, r5
 80013ca:	d003      	beq.n	80013d4 <__eqdf2+0x3c>
 80013cc:	4294      	cmp	r4, r2
 80013ce:	d101      	bne.n	80013d4 <__eqdf2+0x3c>
 80013d0:	4557      	cmp	r7, sl
 80013d2:	d00d      	beq.n	80013f0 <__eqdf2+0x58>
 80013d4:	bce0      	pop	{r5, r6, r7}
 80013d6:	46ba      	mov	sl, r7
 80013d8:	46b1      	mov	r9, r6
 80013da:	46a8      	mov	r8, r5
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	003d      	movs	r5, r7
 80013e0:	4335      	orrs	r5, r6
 80013e2:	d1f7      	bne.n	80013d4 <__eqdf2+0x3c>
 80013e4:	42a2      	cmp	r2, r4
 80013e6:	d1f5      	bne.n	80013d4 <__eqdf2+0x3c>
 80013e8:	4652      	mov	r2, sl
 80013ea:	4665      	mov	r5, ip
 80013ec:	432a      	orrs	r2, r5
 80013ee:	d1f1      	bne.n	80013d4 <__eqdf2+0x3c>
 80013f0:	2001      	movs	r0, #1
 80013f2:	45c8      	cmp	r8, r9
 80013f4:	d1ee      	bne.n	80013d4 <__eqdf2+0x3c>
 80013f6:	4299      	cmp	r1, r3
 80013f8:	d006      	beq.n	8001408 <__eqdf2+0x70>
 80013fa:	2c00      	cmp	r4, #0
 80013fc:	d1ea      	bne.n	80013d4 <__eqdf2+0x3c>
 80013fe:	433e      	orrs	r6, r7
 8001400:	0030      	movs	r0, r6
 8001402:	1e46      	subs	r6, r0, #1
 8001404:	41b0      	sbcs	r0, r6
 8001406:	e7e5      	b.n	80013d4 <__eqdf2+0x3c>
 8001408:	2000      	movs	r0, #0
 800140a:	e7e3      	b.n	80013d4 <__eqdf2+0x3c>
 800140c:	000007ff 	.word	0x000007ff

08001410 <__gedf2>:
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	464e      	mov	r6, r9
 8001414:	4645      	mov	r5, r8
 8001416:	4657      	mov	r7, sl
 8001418:	46de      	mov	lr, fp
 800141a:	0004      	movs	r4, r0
 800141c:	0018      	movs	r0, r3
 800141e:	b5e0      	push	{r5, r6, r7, lr}
 8001420:	0016      	movs	r6, r2
 8001422:	031b      	lsls	r3, r3, #12
 8001424:	0b1b      	lsrs	r3, r3, #12
 8001426:	4d32      	ldr	r5, [pc, #200]	; (80014f0 <__gedf2+0xe0>)
 8001428:	030f      	lsls	r7, r1, #12
 800142a:	004a      	lsls	r2, r1, #1
 800142c:	4699      	mov	r9, r3
 800142e:	0043      	lsls	r3, r0, #1
 8001430:	46a4      	mov	ip, r4
 8001432:	46b0      	mov	r8, r6
 8001434:	0b3f      	lsrs	r7, r7, #12
 8001436:	0d52      	lsrs	r2, r2, #21
 8001438:	0fc9      	lsrs	r1, r1, #31
 800143a:	0d5b      	lsrs	r3, r3, #21
 800143c:	0fc0      	lsrs	r0, r0, #31
 800143e:	42aa      	cmp	r2, r5
 8001440:	d029      	beq.n	8001496 <__gedf2+0x86>
 8001442:	42ab      	cmp	r3, r5
 8001444:	d018      	beq.n	8001478 <__gedf2+0x68>
 8001446:	2a00      	cmp	r2, #0
 8001448:	d12a      	bne.n	80014a0 <__gedf2+0x90>
 800144a:	433c      	orrs	r4, r7
 800144c:	46a3      	mov	fp, r4
 800144e:	4265      	negs	r5, r4
 8001450:	4165      	adcs	r5, r4
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <__gedf2+0x4c>
 8001456:	464c      	mov	r4, r9
 8001458:	4326      	orrs	r6, r4
 800145a:	d027      	beq.n	80014ac <__gedf2+0x9c>
 800145c:	2d00      	cmp	r5, #0
 800145e:	d115      	bne.n	800148c <__gedf2+0x7c>
 8001460:	4281      	cmp	r1, r0
 8001462:	d028      	beq.n	80014b6 <__gedf2+0xa6>
 8001464:	2002      	movs	r0, #2
 8001466:	3901      	subs	r1, #1
 8001468:	4008      	ands	r0, r1
 800146a:	3801      	subs	r0, #1
 800146c:	bcf0      	pop	{r4, r5, r6, r7}
 800146e:	46bb      	mov	fp, r7
 8001470:	46b2      	mov	sl, r6
 8001472:	46a9      	mov	r9, r5
 8001474:	46a0      	mov	r8, r4
 8001476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001478:	464d      	mov	r5, r9
 800147a:	432e      	orrs	r6, r5
 800147c:	d12f      	bne.n	80014de <__gedf2+0xce>
 800147e:	2a00      	cmp	r2, #0
 8001480:	d1ee      	bne.n	8001460 <__gedf2+0x50>
 8001482:	433c      	orrs	r4, r7
 8001484:	4265      	negs	r5, r4
 8001486:	4165      	adcs	r5, r4
 8001488:	2d00      	cmp	r5, #0
 800148a:	d0e9      	beq.n	8001460 <__gedf2+0x50>
 800148c:	2800      	cmp	r0, #0
 800148e:	d1ed      	bne.n	800146c <__gedf2+0x5c>
 8001490:	2001      	movs	r0, #1
 8001492:	4240      	negs	r0, r0
 8001494:	e7ea      	b.n	800146c <__gedf2+0x5c>
 8001496:	003d      	movs	r5, r7
 8001498:	4325      	orrs	r5, r4
 800149a:	d120      	bne.n	80014de <__gedf2+0xce>
 800149c:	4293      	cmp	r3, r2
 800149e:	d0eb      	beq.n	8001478 <__gedf2+0x68>
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1dd      	bne.n	8001460 <__gedf2+0x50>
 80014a4:	464c      	mov	r4, r9
 80014a6:	4326      	orrs	r6, r4
 80014a8:	d1da      	bne.n	8001460 <__gedf2+0x50>
 80014aa:	e7db      	b.n	8001464 <__gedf2+0x54>
 80014ac:	465b      	mov	r3, fp
 80014ae:	2000      	movs	r0, #0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0db      	beq.n	800146c <__gedf2+0x5c>
 80014b4:	e7d6      	b.n	8001464 <__gedf2+0x54>
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dc0a      	bgt.n	80014d0 <__gedf2+0xc0>
 80014ba:	dbe7      	blt.n	800148c <__gedf2+0x7c>
 80014bc:	454f      	cmp	r7, r9
 80014be:	d8d1      	bhi.n	8001464 <__gedf2+0x54>
 80014c0:	d010      	beq.n	80014e4 <__gedf2+0xd4>
 80014c2:	2000      	movs	r0, #0
 80014c4:	454f      	cmp	r7, r9
 80014c6:	d2d1      	bcs.n	800146c <__gedf2+0x5c>
 80014c8:	2900      	cmp	r1, #0
 80014ca:	d0e1      	beq.n	8001490 <__gedf2+0x80>
 80014cc:	0008      	movs	r0, r1
 80014ce:	e7cd      	b.n	800146c <__gedf2+0x5c>
 80014d0:	4243      	negs	r3, r0
 80014d2:	4158      	adcs	r0, r3
 80014d4:	2302      	movs	r3, #2
 80014d6:	4240      	negs	r0, r0
 80014d8:	4018      	ands	r0, r3
 80014da:	3801      	subs	r0, #1
 80014dc:	e7c6      	b.n	800146c <__gedf2+0x5c>
 80014de:	2002      	movs	r0, #2
 80014e0:	4240      	negs	r0, r0
 80014e2:	e7c3      	b.n	800146c <__gedf2+0x5c>
 80014e4:	45c4      	cmp	ip, r8
 80014e6:	d8bd      	bhi.n	8001464 <__gedf2+0x54>
 80014e8:	2000      	movs	r0, #0
 80014ea:	45c4      	cmp	ip, r8
 80014ec:	d2be      	bcs.n	800146c <__gedf2+0x5c>
 80014ee:	e7eb      	b.n	80014c8 <__gedf2+0xb8>
 80014f0:	000007ff 	.word	0x000007ff

080014f4 <__ledf2>:
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	464e      	mov	r6, r9
 80014f8:	4645      	mov	r5, r8
 80014fa:	4657      	mov	r7, sl
 80014fc:	46de      	mov	lr, fp
 80014fe:	0004      	movs	r4, r0
 8001500:	0018      	movs	r0, r3
 8001502:	b5e0      	push	{r5, r6, r7, lr}
 8001504:	0016      	movs	r6, r2
 8001506:	031b      	lsls	r3, r3, #12
 8001508:	0b1b      	lsrs	r3, r3, #12
 800150a:	4d31      	ldr	r5, [pc, #196]	; (80015d0 <__ledf2+0xdc>)
 800150c:	030f      	lsls	r7, r1, #12
 800150e:	004a      	lsls	r2, r1, #1
 8001510:	4699      	mov	r9, r3
 8001512:	0043      	lsls	r3, r0, #1
 8001514:	46a4      	mov	ip, r4
 8001516:	46b0      	mov	r8, r6
 8001518:	0b3f      	lsrs	r7, r7, #12
 800151a:	0d52      	lsrs	r2, r2, #21
 800151c:	0fc9      	lsrs	r1, r1, #31
 800151e:	0d5b      	lsrs	r3, r3, #21
 8001520:	0fc0      	lsrs	r0, r0, #31
 8001522:	42aa      	cmp	r2, r5
 8001524:	d011      	beq.n	800154a <__ledf2+0x56>
 8001526:	42ab      	cmp	r3, r5
 8001528:	d014      	beq.n	8001554 <__ledf2+0x60>
 800152a:	2a00      	cmp	r2, #0
 800152c:	d12f      	bne.n	800158e <__ledf2+0x9a>
 800152e:	433c      	orrs	r4, r7
 8001530:	46a3      	mov	fp, r4
 8001532:	4265      	negs	r5, r4
 8001534:	4165      	adcs	r5, r4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d114      	bne.n	8001564 <__ledf2+0x70>
 800153a:	464c      	mov	r4, r9
 800153c:	4326      	orrs	r6, r4
 800153e:	d111      	bne.n	8001564 <__ledf2+0x70>
 8001540:	465b      	mov	r3, fp
 8001542:	2000      	movs	r0, #0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d017      	beq.n	8001578 <__ledf2+0x84>
 8001548:	e010      	b.n	800156c <__ledf2+0x78>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d112      	bne.n	8001576 <__ledf2+0x82>
 8001550:	4293      	cmp	r3, r2
 8001552:	d11c      	bne.n	800158e <__ledf2+0x9a>
 8001554:	464d      	mov	r5, r9
 8001556:	432e      	orrs	r6, r5
 8001558:	d10d      	bne.n	8001576 <__ledf2+0x82>
 800155a:	2a00      	cmp	r2, #0
 800155c:	d104      	bne.n	8001568 <__ledf2+0x74>
 800155e:	433c      	orrs	r4, r7
 8001560:	4265      	negs	r5, r4
 8001562:	4165      	adcs	r5, r4
 8001564:	2d00      	cmp	r5, #0
 8001566:	d10d      	bne.n	8001584 <__ledf2+0x90>
 8001568:	4281      	cmp	r1, r0
 800156a:	d016      	beq.n	800159a <__ledf2+0xa6>
 800156c:	2002      	movs	r0, #2
 800156e:	3901      	subs	r1, #1
 8001570:	4008      	ands	r0, r1
 8001572:	3801      	subs	r0, #1
 8001574:	e000      	b.n	8001578 <__ledf2+0x84>
 8001576:	2002      	movs	r0, #2
 8001578:	bcf0      	pop	{r4, r5, r6, r7}
 800157a:	46bb      	mov	fp, r7
 800157c:	46b2      	mov	sl, r6
 800157e:	46a9      	mov	r9, r5
 8001580:	46a0      	mov	r8, r4
 8001582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001584:	2800      	cmp	r0, #0
 8001586:	d1f7      	bne.n	8001578 <__ledf2+0x84>
 8001588:	2001      	movs	r0, #1
 800158a:	4240      	negs	r0, r0
 800158c:	e7f4      	b.n	8001578 <__ledf2+0x84>
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1ea      	bne.n	8001568 <__ledf2+0x74>
 8001592:	464c      	mov	r4, r9
 8001594:	4326      	orrs	r6, r4
 8001596:	d1e7      	bne.n	8001568 <__ledf2+0x74>
 8001598:	e7e8      	b.n	800156c <__ledf2+0x78>
 800159a:	429a      	cmp	r2, r3
 800159c:	dd06      	ble.n	80015ac <__ledf2+0xb8>
 800159e:	4243      	negs	r3, r0
 80015a0:	4158      	adcs	r0, r3
 80015a2:	2302      	movs	r3, #2
 80015a4:	4240      	negs	r0, r0
 80015a6:	4018      	ands	r0, r3
 80015a8:	3801      	subs	r0, #1
 80015aa:	e7e5      	b.n	8001578 <__ledf2+0x84>
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbe9      	blt.n	8001584 <__ledf2+0x90>
 80015b0:	454f      	cmp	r7, r9
 80015b2:	d8db      	bhi.n	800156c <__ledf2+0x78>
 80015b4:	d006      	beq.n	80015c4 <__ledf2+0xd0>
 80015b6:	2000      	movs	r0, #0
 80015b8:	454f      	cmp	r7, r9
 80015ba:	d2dd      	bcs.n	8001578 <__ledf2+0x84>
 80015bc:	2900      	cmp	r1, #0
 80015be:	d0e3      	beq.n	8001588 <__ledf2+0x94>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7d9      	b.n	8001578 <__ledf2+0x84>
 80015c4:	45c4      	cmp	ip, r8
 80015c6:	d8d1      	bhi.n	800156c <__ledf2+0x78>
 80015c8:	2000      	movs	r0, #0
 80015ca:	45c4      	cmp	ip, r8
 80015cc:	d2d4      	bcs.n	8001578 <__ledf2+0x84>
 80015ce:	e7f5      	b.n	80015bc <__ledf2+0xc8>
 80015d0:	000007ff 	.word	0x000007ff

080015d4 <__aeabi_dmul>:
 80015d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d6:	4657      	mov	r7, sl
 80015d8:	464e      	mov	r6, r9
 80015da:	4645      	mov	r5, r8
 80015dc:	46de      	mov	lr, fp
 80015de:	b5e0      	push	{r5, r6, r7, lr}
 80015e0:	4698      	mov	r8, r3
 80015e2:	030c      	lsls	r4, r1, #12
 80015e4:	004b      	lsls	r3, r1, #1
 80015e6:	0006      	movs	r6, r0
 80015e8:	4692      	mov	sl, r2
 80015ea:	b087      	sub	sp, #28
 80015ec:	0b24      	lsrs	r4, r4, #12
 80015ee:	0d5b      	lsrs	r3, r3, #21
 80015f0:	0fcf      	lsrs	r7, r1, #31
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d06c      	beq.n	80016d0 <__aeabi_dmul+0xfc>
 80015f6:	4add      	ldr	r2, [pc, #884]	; (800196c <__aeabi_dmul+0x398>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d100      	bne.n	80015fe <__aeabi_dmul+0x2a>
 80015fc:	e086      	b.n	800170c <__aeabi_dmul+0x138>
 80015fe:	0f42      	lsrs	r2, r0, #29
 8001600:	00e4      	lsls	r4, r4, #3
 8001602:	4314      	orrs	r4, r2
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	0412      	lsls	r2, r2, #16
 8001608:	4314      	orrs	r4, r2
 800160a:	4ad9      	ldr	r2, [pc, #868]	; (8001970 <__aeabi_dmul+0x39c>)
 800160c:	00c5      	lsls	r5, r0, #3
 800160e:	4694      	mov	ip, r2
 8001610:	4463      	add	r3, ip
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2300      	movs	r3, #0
 8001616:	4699      	mov	r9, r3
 8001618:	469b      	mov	fp, r3
 800161a:	4643      	mov	r3, r8
 800161c:	4642      	mov	r2, r8
 800161e:	031e      	lsls	r6, r3, #12
 8001620:	0fd2      	lsrs	r2, r2, #31
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4650      	mov	r0, sl
 8001626:	4690      	mov	r8, r2
 8001628:	0b36      	lsrs	r6, r6, #12
 800162a:	0d5b      	lsrs	r3, r3, #21
 800162c:	d100      	bne.n	8001630 <__aeabi_dmul+0x5c>
 800162e:	e078      	b.n	8001722 <__aeabi_dmul+0x14e>
 8001630:	4ace      	ldr	r2, [pc, #824]	; (800196c <__aeabi_dmul+0x398>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01d      	beq.n	8001672 <__aeabi_dmul+0x9e>
 8001636:	49ce      	ldr	r1, [pc, #824]	; (8001970 <__aeabi_dmul+0x39c>)
 8001638:	0f42      	lsrs	r2, r0, #29
 800163a:	468c      	mov	ip, r1
 800163c:	9900      	ldr	r1, [sp, #0]
 800163e:	4463      	add	r3, ip
 8001640:	00f6      	lsls	r6, r6, #3
 8001642:	468c      	mov	ip, r1
 8001644:	4316      	orrs	r6, r2
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	449c      	add	ip, r3
 800164a:	0412      	lsls	r2, r2, #16
 800164c:	4663      	mov	r3, ip
 800164e:	4316      	orrs	r6, r2
 8001650:	00c2      	lsls	r2, r0, #3
 8001652:	2000      	movs	r0, #0
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	9900      	ldr	r1, [sp, #0]
 8001658:	4643      	mov	r3, r8
 800165a:	3101      	adds	r1, #1
 800165c:	468c      	mov	ip, r1
 800165e:	4649      	mov	r1, r9
 8001660:	407b      	eors	r3, r7
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	290f      	cmp	r1, #15
 8001666:	d900      	bls.n	800166a <__aeabi_dmul+0x96>
 8001668:	e07e      	b.n	8001768 <__aeabi_dmul+0x194>
 800166a:	4bc2      	ldr	r3, [pc, #776]	; (8001974 <__aeabi_dmul+0x3a0>)
 800166c:	0089      	lsls	r1, r1, #2
 800166e:	5859      	ldr	r1, [r3, r1]
 8001670:	468f      	mov	pc, r1
 8001672:	4652      	mov	r2, sl
 8001674:	9b00      	ldr	r3, [sp, #0]
 8001676:	4332      	orrs	r2, r6
 8001678:	d000      	beq.n	800167c <__aeabi_dmul+0xa8>
 800167a:	e156      	b.n	800192a <__aeabi_dmul+0x356>
 800167c:	49bb      	ldr	r1, [pc, #748]	; (800196c <__aeabi_dmul+0x398>)
 800167e:	2600      	movs	r6, #0
 8001680:	468c      	mov	ip, r1
 8001682:	4463      	add	r3, ip
 8001684:	4649      	mov	r1, r9
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2302      	movs	r3, #2
 800168a:	4319      	orrs	r1, r3
 800168c:	4689      	mov	r9, r1
 800168e:	2002      	movs	r0, #2
 8001690:	e7e1      	b.n	8001656 <__aeabi_dmul+0x82>
 8001692:	4643      	mov	r3, r8
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	0034      	movs	r4, r6
 8001698:	0015      	movs	r5, r2
 800169a:	4683      	mov	fp, r0
 800169c:	465b      	mov	r3, fp
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d05e      	beq.n	8001760 <__aeabi_dmul+0x18c>
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d100      	bne.n	80016a8 <__aeabi_dmul+0xd4>
 80016a6:	e1f3      	b.n	8001a90 <__aeabi_dmul+0x4bc>
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d000      	beq.n	80016ae <__aeabi_dmul+0xda>
 80016ac:	e118      	b.n	80018e0 <__aeabi_dmul+0x30c>
 80016ae:	2200      	movs	r2, #0
 80016b0:	2400      	movs	r4, #0
 80016b2:	2500      	movs	r5, #0
 80016b4:	9b01      	ldr	r3, [sp, #4]
 80016b6:	0512      	lsls	r2, r2, #20
 80016b8:	4322      	orrs	r2, r4
 80016ba:	07db      	lsls	r3, r3, #31
 80016bc:	431a      	orrs	r2, r3
 80016be:	0028      	movs	r0, r5
 80016c0:	0011      	movs	r1, r2
 80016c2:	b007      	add	sp, #28
 80016c4:	bcf0      	pop	{r4, r5, r6, r7}
 80016c6:	46bb      	mov	fp, r7
 80016c8:	46b2      	mov	sl, r6
 80016ca:	46a9      	mov	r9, r5
 80016cc:	46a0      	mov	r8, r4
 80016ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d0:	0025      	movs	r5, r4
 80016d2:	4305      	orrs	r5, r0
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dmul+0x104>
 80016d6:	e141      	b.n	800195c <__aeabi_dmul+0x388>
 80016d8:	2c00      	cmp	r4, #0
 80016da:	d100      	bne.n	80016de <__aeabi_dmul+0x10a>
 80016dc:	e1ad      	b.n	8001a3a <__aeabi_dmul+0x466>
 80016de:	0020      	movs	r0, r4
 80016e0:	f000 fe68 	bl	80023b4 <__clzsi2>
 80016e4:	0001      	movs	r1, r0
 80016e6:	0002      	movs	r2, r0
 80016e8:	390b      	subs	r1, #11
 80016ea:	231d      	movs	r3, #29
 80016ec:	0010      	movs	r0, r2
 80016ee:	1a5b      	subs	r3, r3, r1
 80016f0:	0031      	movs	r1, r6
 80016f2:	0035      	movs	r5, r6
 80016f4:	3808      	subs	r0, #8
 80016f6:	4084      	lsls	r4, r0
 80016f8:	40d9      	lsrs	r1, r3
 80016fa:	4085      	lsls	r5, r0
 80016fc:	430c      	orrs	r4, r1
 80016fe:	489e      	ldr	r0, [pc, #632]	; (8001978 <__aeabi_dmul+0x3a4>)
 8001700:	1a83      	subs	r3, r0, r2
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2300      	movs	r3, #0
 8001706:	4699      	mov	r9, r3
 8001708:	469b      	mov	fp, r3
 800170a:	e786      	b.n	800161a <__aeabi_dmul+0x46>
 800170c:	0005      	movs	r5, r0
 800170e:	4325      	orrs	r5, r4
 8001710:	d000      	beq.n	8001714 <__aeabi_dmul+0x140>
 8001712:	e11c      	b.n	800194e <__aeabi_dmul+0x37a>
 8001714:	2208      	movs	r2, #8
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2302      	movs	r3, #2
 800171a:	2400      	movs	r4, #0
 800171c:	4691      	mov	r9, r2
 800171e:	469b      	mov	fp, r3
 8001720:	e77b      	b.n	800161a <__aeabi_dmul+0x46>
 8001722:	4652      	mov	r2, sl
 8001724:	4332      	orrs	r2, r6
 8001726:	d100      	bne.n	800172a <__aeabi_dmul+0x156>
 8001728:	e10a      	b.n	8001940 <__aeabi_dmul+0x36c>
 800172a:	2e00      	cmp	r6, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_dmul+0x15c>
 800172e:	e176      	b.n	8001a1e <__aeabi_dmul+0x44a>
 8001730:	0030      	movs	r0, r6
 8001732:	f000 fe3f 	bl	80023b4 <__clzsi2>
 8001736:	0002      	movs	r2, r0
 8001738:	3a0b      	subs	r2, #11
 800173a:	231d      	movs	r3, #29
 800173c:	0001      	movs	r1, r0
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	4652      	mov	r2, sl
 8001742:	3908      	subs	r1, #8
 8001744:	40da      	lsrs	r2, r3
 8001746:	408e      	lsls	r6, r1
 8001748:	4316      	orrs	r6, r2
 800174a:	4652      	mov	r2, sl
 800174c:	408a      	lsls	r2, r1
 800174e:	9b00      	ldr	r3, [sp, #0]
 8001750:	4989      	ldr	r1, [pc, #548]	; (8001978 <__aeabi_dmul+0x3a4>)
 8001752:	1a18      	subs	r0, r3, r0
 8001754:	0003      	movs	r3, r0
 8001756:	468c      	mov	ip, r1
 8001758:	4463      	add	r3, ip
 800175a:	2000      	movs	r0, #0
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	e77a      	b.n	8001656 <__aeabi_dmul+0x82>
 8001760:	2400      	movs	r4, #0
 8001762:	2500      	movs	r5, #0
 8001764:	4a81      	ldr	r2, [pc, #516]	; (800196c <__aeabi_dmul+0x398>)
 8001766:	e7a5      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001768:	0c2f      	lsrs	r7, r5, #16
 800176a:	042d      	lsls	r5, r5, #16
 800176c:	0c2d      	lsrs	r5, r5, #16
 800176e:	002b      	movs	r3, r5
 8001770:	0c11      	lsrs	r1, r2, #16
 8001772:	0412      	lsls	r2, r2, #16
 8001774:	0c12      	lsrs	r2, r2, #16
 8001776:	4353      	muls	r3, r2
 8001778:	4698      	mov	r8, r3
 800177a:	0013      	movs	r3, r2
 800177c:	0028      	movs	r0, r5
 800177e:	437b      	muls	r3, r7
 8001780:	4699      	mov	r9, r3
 8001782:	4348      	muls	r0, r1
 8001784:	4448      	add	r0, r9
 8001786:	4683      	mov	fp, r0
 8001788:	4640      	mov	r0, r8
 800178a:	000b      	movs	r3, r1
 800178c:	0c00      	lsrs	r0, r0, #16
 800178e:	4682      	mov	sl, r0
 8001790:	4658      	mov	r0, fp
 8001792:	437b      	muls	r3, r7
 8001794:	4450      	add	r0, sl
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	4581      	cmp	r9, r0
 800179a:	d906      	bls.n	80017aa <__aeabi_dmul+0x1d6>
 800179c:	469a      	mov	sl, r3
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	025b      	lsls	r3, r3, #9
 80017a2:	4699      	mov	r9, r3
 80017a4:	44ca      	add	sl, r9
 80017a6:	4653      	mov	r3, sl
 80017a8:	9302      	str	r3, [sp, #8]
 80017aa:	0c03      	lsrs	r3, r0, #16
 80017ac:	469b      	mov	fp, r3
 80017ae:	4643      	mov	r3, r8
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	0400      	lsls	r0, r0, #16
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	4698      	mov	r8, r3
 80017b8:	0003      	movs	r3, r0
 80017ba:	4443      	add	r3, r8
 80017bc:	9304      	str	r3, [sp, #16]
 80017be:	0c33      	lsrs	r3, r6, #16
 80017c0:	4699      	mov	r9, r3
 80017c2:	002b      	movs	r3, r5
 80017c4:	0436      	lsls	r6, r6, #16
 80017c6:	0c36      	lsrs	r6, r6, #16
 80017c8:	4373      	muls	r3, r6
 80017ca:	4698      	mov	r8, r3
 80017cc:	0033      	movs	r3, r6
 80017ce:	437b      	muls	r3, r7
 80017d0:	469a      	mov	sl, r3
 80017d2:	464b      	mov	r3, r9
 80017d4:	435d      	muls	r5, r3
 80017d6:	435f      	muls	r7, r3
 80017d8:	4643      	mov	r3, r8
 80017da:	4455      	add	r5, sl
 80017dc:	0c18      	lsrs	r0, r3, #16
 80017de:	1940      	adds	r0, r0, r5
 80017e0:	4582      	cmp	sl, r0
 80017e2:	d903      	bls.n	80017ec <__aeabi_dmul+0x218>
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	025b      	lsls	r3, r3, #9
 80017e8:	469a      	mov	sl, r3
 80017ea:	4457      	add	r7, sl
 80017ec:	0c05      	lsrs	r5, r0, #16
 80017ee:	19eb      	adds	r3, r5, r7
 80017f0:	9305      	str	r3, [sp, #20]
 80017f2:	4643      	mov	r3, r8
 80017f4:	041d      	lsls	r5, r3, #16
 80017f6:	0c2d      	lsrs	r5, r5, #16
 80017f8:	0400      	lsls	r0, r0, #16
 80017fa:	1940      	adds	r0, r0, r5
 80017fc:	0c25      	lsrs	r5, r4, #16
 80017fe:	0424      	lsls	r4, r4, #16
 8001800:	0c24      	lsrs	r4, r4, #16
 8001802:	0027      	movs	r7, r4
 8001804:	4357      	muls	r7, r2
 8001806:	436a      	muls	r2, r5
 8001808:	4690      	mov	r8, r2
 800180a:	002a      	movs	r2, r5
 800180c:	0c3b      	lsrs	r3, r7, #16
 800180e:	469a      	mov	sl, r3
 8001810:	434a      	muls	r2, r1
 8001812:	4361      	muls	r1, r4
 8001814:	4441      	add	r1, r8
 8001816:	4451      	add	r1, sl
 8001818:	4483      	add	fp, r0
 800181a:	4588      	cmp	r8, r1
 800181c:	d903      	bls.n	8001826 <__aeabi_dmul+0x252>
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	4698      	mov	r8, r3
 8001824:	4442      	add	r2, r8
 8001826:	043f      	lsls	r7, r7, #16
 8001828:	0c0b      	lsrs	r3, r1, #16
 800182a:	0c3f      	lsrs	r7, r7, #16
 800182c:	0409      	lsls	r1, r1, #16
 800182e:	19c9      	adds	r1, r1, r7
 8001830:	0027      	movs	r7, r4
 8001832:	4698      	mov	r8, r3
 8001834:	464b      	mov	r3, r9
 8001836:	4377      	muls	r7, r6
 8001838:	435c      	muls	r4, r3
 800183a:	436e      	muls	r6, r5
 800183c:	435d      	muls	r5, r3
 800183e:	0c3b      	lsrs	r3, r7, #16
 8001840:	4699      	mov	r9, r3
 8001842:	19a4      	adds	r4, r4, r6
 8001844:	444c      	add	r4, r9
 8001846:	4442      	add	r2, r8
 8001848:	9503      	str	r5, [sp, #12]
 800184a:	42a6      	cmp	r6, r4
 800184c:	d904      	bls.n	8001858 <__aeabi_dmul+0x284>
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	025b      	lsls	r3, r3, #9
 8001852:	4698      	mov	r8, r3
 8001854:	4445      	add	r5, r8
 8001856:	9503      	str	r5, [sp, #12]
 8001858:	9b02      	ldr	r3, [sp, #8]
 800185a:	043f      	lsls	r7, r7, #16
 800185c:	445b      	add	r3, fp
 800185e:	001e      	movs	r6, r3
 8001860:	4283      	cmp	r3, r0
 8001862:	4180      	sbcs	r0, r0
 8001864:	0423      	lsls	r3, r4, #16
 8001866:	4698      	mov	r8, r3
 8001868:	9b05      	ldr	r3, [sp, #20]
 800186a:	0c3f      	lsrs	r7, r7, #16
 800186c:	4447      	add	r7, r8
 800186e:	4698      	mov	r8, r3
 8001870:	1876      	adds	r6, r6, r1
 8001872:	428e      	cmp	r6, r1
 8001874:	4189      	sbcs	r1, r1
 8001876:	4447      	add	r7, r8
 8001878:	4240      	negs	r0, r0
 800187a:	183d      	adds	r5, r7, r0
 800187c:	46a8      	mov	r8, r5
 800187e:	4693      	mov	fp, r2
 8001880:	4249      	negs	r1, r1
 8001882:	468a      	mov	sl, r1
 8001884:	44c3      	add	fp, r8
 8001886:	429f      	cmp	r7, r3
 8001888:	41bf      	sbcs	r7, r7
 800188a:	4580      	cmp	r8, r0
 800188c:	4180      	sbcs	r0, r0
 800188e:	9b03      	ldr	r3, [sp, #12]
 8001890:	44da      	add	sl, fp
 8001892:	4698      	mov	r8, r3
 8001894:	4653      	mov	r3, sl
 8001896:	4240      	negs	r0, r0
 8001898:	427f      	negs	r7, r7
 800189a:	4307      	orrs	r7, r0
 800189c:	0c24      	lsrs	r4, r4, #16
 800189e:	4593      	cmp	fp, r2
 80018a0:	4192      	sbcs	r2, r2
 80018a2:	458a      	cmp	sl, r1
 80018a4:	4189      	sbcs	r1, r1
 80018a6:	193f      	adds	r7, r7, r4
 80018a8:	0ddc      	lsrs	r4, r3, #23
 80018aa:	9b04      	ldr	r3, [sp, #16]
 80018ac:	0275      	lsls	r5, r6, #9
 80018ae:	431d      	orrs	r5, r3
 80018b0:	1e68      	subs	r0, r5, #1
 80018b2:	4185      	sbcs	r5, r0
 80018b4:	4653      	mov	r3, sl
 80018b6:	4252      	negs	r2, r2
 80018b8:	4249      	negs	r1, r1
 80018ba:	430a      	orrs	r2, r1
 80018bc:	18bf      	adds	r7, r7, r2
 80018be:	4447      	add	r7, r8
 80018c0:	0df6      	lsrs	r6, r6, #23
 80018c2:	027f      	lsls	r7, r7, #9
 80018c4:	4335      	orrs	r5, r6
 80018c6:	025a      	lsls	r2, r3, #9
 80018c8:	433c      	orrs	r4, r7
 80018ca:	4315      	orrs	r5, r2
 80018cc:	01fb      	lsls	r3, r7, #7
 80018ce:	d400      	bmi.n	80018d2 <__aeabi_dmul+0x2fe>
 80018d0:	e0c1      	b.n	8001a56 <__aeabi_dmul+0x482>
 80018d2:	2101      	movs	r1, #1
 80018d4:	086a      	lsrs	r2, r5, #1
 80018d6:	400d      	ands	r5, r1
 80018d8:	4315      	orrs	r5, r2
 80018da:	07e2      	lsls	r2, r4, #31
 80018dc:	4315      	orrs	r5, r2
 80018de:	0864      	lsrs	r4, r4, #1
 80018e0:	4926      	ldr	r1, [pc, #152]	; (800197c <__aeabi_dmul+0x3a8>)
 80018e2:	4461      	add	r1, ip
 80018e4:	2900      	cmp	r1, #0
 80018e6:	dd56      	ble.n	8001996 <__aeabi_dmul+0x3c2>
 80018e8:	076b      	lsls	r3, r5, #29
 80018ea:	d009      	beq.n	8001900 <__aeabi_dmul+0x32c>
 80018ec:	220f      	movs	r2, #15
 80018ee:	402a      	ands	r2, r5
 80018f0:	2a04      	cmp	r2, #4
 80018f2:	d005      	beq.n	8001900 <__aeabi_dmul+0x32c>
 80018f4:	1d2a      	adds	r2, r5, #4
 80018f6:	42aa      	cmp	r2, r5
 80018f8:	41ad      	sbcs	r5, r5
 80018fa:	426d      	negs	r5, r5
 80018fc:	1964      	adds	r4, r4, r5
 80018fe:	0015      	movs	r5, r2
 8001900:	01e3      	lsls	r3, r4, #7
 8001902:	d504      	bpl.n	800190e <__aeabi_dmul+0x33a>
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <__aeabi_dmul+0x3ac>)
 8001908:	00c9      	lsls	r1, r1, #3
 800190a:	4014      	ands	r4, r2
 800190c:	4461      	add	r1, ip
 800190e:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <__aeabi_dmul+0x3b0>)
 8001910:	4291      	cmp	r1, r2
 8001912:	dd00      	ble.n	8001916 <__aeabi_dmul+0x342>
 8001914:	e724      	b.n	8001760 <__aeabi_dmul+0x18c>
 8001916:	0762      	lsls	r2, r4, #29
 8001918:	08ed      	lsrs	r5, r5, #3
 800191a:	0264      	lsls	r4, r4, #9
 800191c:	0549      	lsls	r1, r1, #21
 800191e:	4315      	orrs	r5, r2
 8001920:	0b24      	lsrs	r4, r4, #12
 8001922:	0d4a      	lsrs	r2, r1, #21
 8001924:	e6c6      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001926:	9701      	str	r7, [sp, #4]
 8001928:	e6b8      	b.n	800169c <__aeabi_dmul+0xc8>
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <__aeabi_dmul+0x398>)
 800192c:	2003      	movs	r0, #3
 800192e:	4694      	mov	ip, r2
 8001930:	4463      	add	r3, ip
 8001932:	464a      	mov	r2, r9
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2303      	movs	r3, #3
 8001938:	431a      	orrs	r2, r3
 800193a:	4691      	mov	r9, r2
 800193c:	4652      	mov	r2, sl
 800193e:	e68a      	b.n	8001656 <__aeabi_dmul+0x82>
 8001940:	4649      	mov	r1, r9
 8001942:	2301      	movs	r3, #1
 8001944:	4319      	orrs	r1, r3
 8001946:	4689      	mov	r9, r1
 8001948:	2600      	movs	r6, #0
 800194a:	2001      	movs	r0, #1
 800194c:	e683      	b.n	8001656 <__aeabi_dmul+0x82>
 800194e:	220c      	movs	r2, #12
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2303      	movs	r3, #3
 8001954:	0005      	movs	r5, r0
 8001956:	4691      	mov	r9, r2
 8001958:	469b      	mov	fp, r3
 800195a:	e65e      	b.n	800161a <__aeabi_dmul+0x46>
 800195c:	2304      	movs	r3, #4
 800195e:	4699      	mov	r9, r3
 8001960:	2300      	movs	r3, #0
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	2400      	movs	r4, #0
 8001968:	469b      	mov	fp, r3
 800196a:	e656      	b.n	800161a <__aeabi_dmul+0x46>
 800196c:	000007ff 	.word	0x000007ff
 8001970:	fffffc01 	.word	0xfffffc01
 8001974:	0800e684 	.word	0x0800e684
 8001978:	fffffc0d 	.word	0xfffffc0d
 800197c:	000003ff 	.word	0x000003ff
 8001980:	feffffff 	.word	0xfeffffff
 8001984:	000007fe 	.word	0x000007fe
 8001988:	2300      	movs	r3, #0
 800198a:	2480      	movs	r4, #128	; 0x80
 800198c:	2500      	movs	r5, #0
 800198e:	4a44      	ldr	r2, [pc, #272]	; (8001aa0 <__aeabi_dmul+0x4cc>)
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	0324      	lsls	r4, r4, #12
 8001994:	e68e      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001996:	2001      	movs	r0, #1
 8001998:	1a40      	subs	r0, r0, r1
 800199a:	2838      	cmp	r0, #56	; 0x38
 800199c:	dd00      	ble.n	80019a0 <__aeabi_dmul+0x3cc>
 800199e:	e686      	b.n	80016ae <__aeabi_dmul+0xda>
 80019a0:	281f      	cmp	r0, #31
 80019a2:	dd5b      	ble.n	8001a5c <__aeabi_dmul+0x488>
 80019a4:	221f      	movs	r2, #31
 80019a6:	0023      	movs	r3, r4
 80019a8:	4252      	negs	r2, r2
 80019aa:	1a51      	subs	r1, r2, r1
 80019ac:	40cb      	lsrs	r3, r1
 80019ae:	0019      	movs	r1, r3
 80019b0:	2820      	cmp	r0, #32
 80019b2:	d003      	beq.n	80019bc <__aeabi_dmul+0x3e8>
 80019b4:	4a3b      	ldr	r2, [pc, #236]	; (8001aa4 <__aeabi_dmul+0x4d0>)
 80019b6:	4462      	add	r2, ip
 80019b8:	4094      	lsls	r4, r2
 80019ba:	4325      	orrs	r5, r4
 80019bc:	1e6a      	subs	r2, r5, #1
 80019be:	4195      	sbcs	r5, r2
 80019c0:	002a      	movs	r2, r5
 80019c2:	430a      	orrs	r2, r1
 80019c4:	2107      	movs	r1, #7
 80019c6:	000d      	movs	r5, r1
 80019c8:	2400      	movs	r4, #0
 80019ca:	4015      	ands	r5, r2
 80019cc:	4211      	tst	r1, r2
 80019ce:	d05b      	beq.n	8001a88 <__aeabi_dmul+0x4b4>
 80019d0:	210f      	movs	r1, #15
 80019d2:	2400      	movs	r4, #0
 80019d4:	4011      	ands	r1, r2
 80019d6:	2904      	cmp	r1, #4
 80019d8:	d053      	beq.n	8001a82 <__aeabi_dmul+0x4ae>
 80019da:	1d11      	adds	r1, r2, #4
 80019dc:	4291      	cmp	r1, r2
 80019de:	4192      	sbcs	r2, r2
 80019e0:	4252      	negs	r2, r2
 80019e2:	18a4      	adds	r4, r4, r2
 80019e4:	000a      	movs	r2, r1
 80019e6:	0223      	lsls	r3, r4, #8
 80019e8:	d54b      	bpl.n	8001a82 <__aeabi_dmul+0x4ae>
 80019ea:	2201      	movs	r2, #1
 80019ec:	2400      	movs	r4, #0
 80019ee:	2500      	movs	r5, #0
 80019f0:	e660      	b.n	80016b4 <__aeabi_dmul+0xe0>
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	031b      	lsls	r3, r3, #12
 80019f6:	421c      	tst	r4, r3
 80019f8:	d009      	beq.n	8001a0e <__aeabi_dmul+0x43a>
 80019fa:	421e      	tst	r6, r3
 80019fc:	d107      	bne.n	8001a0e <__aeabi_dmul+0x43a>
 80019fe:	4333      	orrs	r3, r6
 8001a00:	031c      	lsls	r4, r3, #12
 8001a02:	4643      	mov	r3, r8
 8001a04:	0015      	movs	r5, r2
 8001a06:	0b24      	lsrs	r4, r4, #12
 8001a08:	4a25      	ldr	r2, [pc, #148]	; (8001aa0 <__aeabi_dmul+0x4cc>)
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	e652      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	4314      	orrs	r4, r2
 8001a14:	0324      	lsls	r4, r4, #12
 8001a16:	4a22      	ldr	r2, [pc, #136]	; (8001aa0 <__aeabi_dmul+0x4cc>)
 8001a18:	0b24      	lsrs	r4, r4, #12
 8001a1a:	9701      	str	r7, [sp, #4]
 8001a1c:	e64a      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001a1e:	f000 fcc9 	bl	80023b4 <__clzsi2>
 8001a22:	0003      	movs	r3, r0
 8001a24:	001a      	movs	r2, r3
 8001a26:	3215      	adds	r2, #21
 8001a28:	3020      	adds	r0, #32
 8001a2a:	2a1c      	cmp	r2, #28
 8001a2c:	dc00      	bgt.n	8001a30 <__aeabi_dmul+0x45c>
 8001a2e:	e684      	b.n	800173a <__aeabi_dmul+0x166>
 8001a30:	4656      	mov	r6, sl
 8001a32:	3b08      	subs	r3, #8
 8001a34:	2200      	movs	r2, #0
 8001a36:	409e      	lsls	r6, r3
 8001a38:	e689      	b.n	800174e <__aeabi_dmul+0x17a>
 8001a3a:	f000 fcbb 	bl	80023b4 <__clzsi2>
 8001a3e:	0001      	movs	r1, r0
 8001a40:	0002      	movs	r2, r0
 8001a42:	3115      	adds	r1, #21
 8001a44:	3220      	adds	r2, #32
 8001a46:	291c      	cmp	r1, #28
 8001a48:	dc00      	bgt.n	8001a4c <__aeabi_dmul+0x478>
 8001a4a:	e64e      	b.n	80016ea <__aeabi_dmul+0x116>
 8001a4c:	0034      	movs	r4, r6
 8001a4e:	3808      	subs	r0, #8
 8001a50:	2500      	movs	r5, #0
 8001a52:	4084      	lsls	r4, r0
 8001a54:	e653      	b.n	80016fe <__aeabi_dmul+0x12a>
 8001a56:	9b00      	ldr	r3, [sp, #0]
 8001a58:	469c      	mov	ip, r3
 8001a5a:	e741      	b.n	80018e0 <__aeabi_dmul+0x30c>
 8001a5c:	4912      	ldr	r1, [pc, #72]	; (8001aa8 <__aeabi_dmul+0x4d4>)
 8001a5e:	0022      	movs	r2, r4
 8001a60:	4461      	add	r1, ip
 8001a62:	002e      	movs	r6, r5
 8001a64:	408d      	lsls	r5, r1
 8001a66:	408a      	lsls	r2, r1
 8001a68:	40c6      	lsrs	r6, r0
 8001a6a:	1e69      	subs	r1, r5, #1
 8001a6c:	418d      	sbcs	r5, r1
 8001a6e:	4332      	orrs	r2, r6
 8001a70:	432a      	orrs	r2, r5
 8001a72:	40c4      	lsrs	r4, r0
 8001a74:	0753      	lsls	r3, r2, #29
 8001a76:	d0b6      	beq.n	80019e6 <__aeabi_dmul+0x412>
 8001a78:	210f      	movs	r1, #15
 8001a7a:	4011      	ands	r1, r2
 8001a7c:	2904      	cmp	r1, #4
 8001a7e:	d1ac      	bne.n	80019da <__aeabi_dmul+0x406>
 8001a80:	e7b1      	b.n	80019e6 <__aeabi_dmul+0x412>
 8001a82:	0765      	lsls	r5, r4, #29
 8001a84:	0264      	lsls	r4, r4, #9
 8001a86:	0b24      	lsrs	r4, r4, #12
 8001a88:	08d2      	lsrs	r2, r2, #3
 8001a8a:	4315      	orrs	r5, r2
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	e611      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	0312      	lsls	r2, r2, #12
 8001a94:	4314      	orrs	r4, r2
 8001a96:	0324      	lsls	r4, r4, #12
 8001a98:	4a01      	ldr	r2, [pc, #4]	; (8001aa0 <__aeabi_dmul+0x4cc>)
 8001a9a:	0b24      	lsrs	r4, r4, #12
 8001a9c:	e60a      	b.n	80016b4 <__aeabi_dmul+0xe0>
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	000007ff 	.word	0x000007ff
 8001aa4:	0000043e 	.word	0x0000043e
 8001aa8:	0000041e 	.word	0x0000041e

08001aac <__aeabi_dsub>:
 8001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aae:	4657      	mov	r7, sl
 8001ab0:	464e      	mov	r6, r9
 8001ab2:	4645      	mov	r5, r8
 8001ab4:	46de      	mov	lr, fp
 8001ab6:	0004      	movs	r4, r0
 8001ab8:	b5e0      	push	{r5, r6, r7, lr}
 8001aba:	001f      	movs	r7, r3
 8001abc:	0010      	movs	r0, r2
 8001abe:	030b      	lsls	r3, r1, #12
 8001ac0:	0f62      	lsrs	r2, r4, #29
 8001ac2:	004e      	lsls	r6, r1, #1
 8001ac4:	0fcd      	lsrs	r5, r1, #31
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	0339      	lsls	r1, r7, #12
 8001aca:	4313      	orrs	r3, r2
 8001acc:	0a49      	lsrs	r1, r1, #9
 8001ace:	00e2      	lsls	r2, r4, #3
 8001ad0:	0f44      	lsrs	r4, r0, #29
 8001ad2:	4321      	orrs	r1, r4
 8001ad4:	4cc2      	ldr	r4, [pc, #776]	; (8001de0 <__aeabi_dsub+0x334>)
 8001ad6:	4691      	mov	r9, r2
 8001ad8:	4692      	mov	sl, r2
 8001ada:	00c0      	lsls	r0, r0, #3
 8001adc:	007a      	lsls	r2, r7, #1
 8001ade:	4680      	mov	r8, r0
 8001ae0:	0d76      	lsrs	r6, r6, #21
 8001ae2:	0d52      	lsrs	r2, r2, #21
 8001ae4:	0fff      	lsrs	r7, r7, #31
 8001ae6:	42a2      	cmp	r2, r4
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dsub+0x40>
 8001aea:	e0b4      	b.n	8001c56 <__aeabi_dsub+0x1aa>
 8001aec:	2401      	movs	r4, #1
 8001aee:	4067      	eors	r7, r4
 8001af0:	46bb      	mov	fp, r7
 8001af2:	42bd      	cmp	r5, r7
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dsub+0x4c>
 8001af6:	e088      	b.n	8001c0a <__aeabi_dsub+0x15e>
 8001af8:	1ab4      	subs	r4, r6, r2
 8001afa:	46a4      	mov	ip, r4
 8001afc:	2c00      	cmp	r4, #0
 8001afe:	dc00      	bgt.n	8001b02 <__aeabi_dsub+0x56>
 8001b00:	e0b2      	b.n	8001c68 <__aeabi_dsub+0x1bc>
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	d100      	bne.n	8001b08 <__aeabi_dsub+0x5c>
 8001b06:	e0c5      	b.n	8001c94 <__aeabi_dsub+0x1e8>
 8001b08:	4ab5      	ldr	r2, [pc, #724]	; (8001de0 <__aeabi_dsub+0x334>)
 8001b0a:	4296      	cmp	r6, r2
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x64>
 8001b0e:	e28b      	b.n	8002028 <__aeabi_dsub+0x57c>
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	0412      	lsls	r2, r2, #16
 8001b14:	4311      	orrs	r1, r2
 8001b16:	4662      	mov	r2, ip
 8001b18:	2a38      	cmp	r2, #56	; 0x38
 8001b1a:	dd00      	ble.n	8001b1e <__aeabi_dsub+0x72>
 8001b1c:	e1a1      	b.n	8001e62 <__aeabi_dsub+0x3b6>
 8001b1e:	2a1f      	cmp	r2, #31
 8001b20:	dd00      	ble.n	8001b24 <__aeabi_dsub+0x78>
 8001b22:	e216      	b.n	8001f52 <__aeabi_dsub+0x4a6>
 8001b24:	2720      	movs	r7, #32
 8001b26:	000c      	movs	r4, r1
 8001b28:	1abf      	subs	r7, r7, r2
 8001b2a:	40bc      	lsls	r4, r7
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	46a0      	mov	r8, r4
 8001b30:	4664      	mov	r4, ip
 8001b32:	40b8      	lsls	r0, r7
 8001b34:	40e2      	lsrs	r2, r4
 8001b36:	4644      	mov	r4, r8
 8001b38:	4314      	orrs	r4, r2
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	1e50      	subs	r0, r2, #1
 8001b3e:	4182      	sbcs	r2, r0
 8001b40:	4660      	mov	r0, ip
 8001b42:	40c1      	lsrs	r1, r0
 8001b44:	4322      	orrs	r2, r4
 8001b46:	1a5b      	subs	r3, r3, r1
 8001b48:	4649      	mov	r1, r9
 8001b4a:	1a8c      	subs	r4, r1, r2
 8001b4c:	45a1      	cmp	r9, r4
 8001b4e:	4192      	sbcs	r2, r2
 8001b50:	4252      	negs	r2, r2
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	4698      	mov	r8, r3
 8001b56:	4643      	mov	r3, r8
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	d400      	bmi.n	8001b5e <__aeabi_dsub+0xb2>
 8001b5c:	e117      	b.n	8001d8e <__aeabi_dsub+0x2e2>
 8001b5e:	4643      	mov	r3, r8
 8001b60:	025b      	lsls	r3, r3, #9
 8001b62:	0a5b      	lsrs	r3, r3, #9
 8001b64:	4698      	mov	r8, r3
 8001b66:	4643      	mov	r3, r8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dsub+0xc2>
 8001b6c:	e16c      	b.n	8001e48 <__aeabi_dsub+0x39c>
 8001b6e:	4640      	mov	r0, r8
 8001b70:	f000 fc20 	bl	80023b4 <__clzsi2>
 8001b74:	0002      	movs	r2, r0
 8001b76:	3a08      	subs	r2, #8
 8001b78:	2120      	movs	r1, #32
 8001b7a:	0020      	movs	r0, r4
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	1a89      	subs	r1, r1, r2
 8001b80:	4093      	lsls	r3, r2
 8001b82:	40c8      	lsrs	r0, r1
 8001b84:	4094      	lsls	r4, r2
 8001b86:	4303      	orrs	r3, r0
 8001b88:	4296      	cmp	r6, r2
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dsub+0xe2>
 8001b8c:	e157      	b.n	8001e3e <__aeabi_dsub+0x392>
 8001b8e:	1b96      	subs	r6, r2, r6
 8001b90:	1c71      	adds	r1, r6, #1
 8001b92:	291f      	cmp	r1, #31
 8001b94:	dd00      	ble.n	8001b98 <__aeabi_dsub+0xec>
 8001b96:	e1cb      	b.n	8001f30 <__aeabi_dsub+0x484>
 8001b98:	2220      	movs	r2, #32
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	0026      	movs	r6, r4
 8001b9e:	1a52      	subs	r2, r2, r1
 8001ba0:	4094      	lsls	r4, r2
 8001ba2:	4090      	lsls	r0, r2
 8001ba4:	40ce      	lsrs	r6, r1
 8001ba6:	40cb      	lsrs	r3, r1
 8001ba8:	1e62      	subs	r2, r4, #1
 8001baa:	4194      	sbcs	r4, r2
 8001bac:	4330      	orrs	r0, r6
 8001bae:	4698      	mov	r8, r3
 8001bb0:	2600      	movs	r6, #0
 8001bb2:	4304      	orrs	r4, r0
 8001bb4:	0763      	lsls	r3, r4, #29
 8001bb6:	d009      	beq.n	8001bcc <__aeabi_dsub+0x120>
 8001bb8:	230f      	movs	r3, #15
 8001bba:	4023      	ands	r3, r4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d005      	beq.n	8001bcc <__aeabi_dsub+0x120>
 8001bc0:	1d23      	adds	r3, r4, #4
 8001bc2:	42a3      	cmp	r3, r4
 8001bc4:	41a4      	sbcs	r4, r4
 8001bc6:	4264      	negs	r4, r4
 8001bc8:	44a0      	add	r8, r4
 8001bca:	001c      	movs	r4, r3
 8001bcc:	4643      	mov	r3, r8
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	d400      	bmi.n	8001bd4 <__aeabi_dsub+0x128>
 8001bd2:	e0df      	b.n	8001d94 <__aeabi_dsub+0x2e8>
 8001bd4:	4b82      	ldr	r3, [pc, #520]	; (8001de0 <__aeabi_dsub+0x334>)
 8001bd6:	3601      	adds	r6, #1
 8001bd8:	429e      	cmp	r6, r3
 8001bda:	d100      	bne.n	8001bde <__aeabi_dsub+0x132>
 8001bdc:	e0fb      	b.n	8001dd6 <__aeabi_dsub+0x32a>
 8001bde:	4642      	mov	r2, r8
 8001be0:	4b80      	ldr	r3, [pc, #512]	; (8001de4 <__aeabi_dsub+0x338>)
 8001be2:	08e4      	lsrs	r4, r4, #3
 8001be4:	401a      	ands	r2, r3
 8001be6:	0013      	movs	r3, r2
 8001be8:	0571      	lsls	r1, r6, #21
 8001bea:	0752      	lsls	r2, r2, #29
 8001bec:	025b      	lsls	r3, r3, #9
 8001bee:	4322      	orrs	r2, r4
 8001bf0:	0b1b      	lsrs	r3, r3, #12
 8001bf2:	0d49      	lsrs	r1, r1, #21
 8001bf4:	0509      	lsls	r1, r1, #20
 8001bf6:	07ed      	lsls	r5, r5, #31
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	4329      	orrs	r1, r5
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	bcf0      	pop	{r4, r5, r6, r7}
 8001c00:	46bb      	mov	fp, r7
 8001c02:	46b2      	mov	sl, r6
 8001c04:	46a9      	mov	r9, r5
 8001c06:	46a0      	mov	r8, r4
 8001c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c0a:	1ab4      	subs	r4, r6, r2
 8001c0c:	46a4      	mov	ip, r4
 8001c0e:	2c00      	cmp	r4, #0
 8001c10:	dd58      	ble.n	8001cc4 <__aeabi_dsub+0x218>
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x16c>
 8001c16:	e09e      	b.n	8001d56 <__aeabi_dsub+0x2aa>
 8001c18:	4a71      	ldr	r2, [pc, #452]	; (8001de0 <__aeabi_dsub+0x334>)
 8001c1a:	4296      	cmp	r6, r2
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x174>
 8001c1e:	e13b      	b.n	8001e98 <__aeabi_dsub+0x3ec>
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	0412      	lsls	r2, r2, #16
 8001c24:	4311      	orrs	r1, r2
 8001c26:	4662      	mov	r2, ip
 8001c28:	2a38      	cmp	r2, #56	; 0x38
 8001c2a:	dd00      	ble.n	8001c2e <__aeabi_dsub+0x182>
 8001c2c:	e0c1      	b.n	8001db2 <__aeabi_dsub+0x306>
 8001c2e:	2a1f      	cmp	r2, #31
 8001c30:	dc00      	bgt.n	8001c34 <__aeabi_dsub+0x188>
 8001c32:	e1bb      	b.n	8001fac <__aeabi_dsub+0x500>
 8001c34:	000c      	movs	r4, r1
 8001c36:	3a20      	subs	r2, #32
 8001c38:	40d4      	lsrs	r4, r2
 8001c3a:	0022      	movs	r2, r4
 8001c3c:	4664      	mov	r4, ip
 8001c3e:	2c20      	cmp	r4, #32
 8001c40:	d004      	beq.n	8001c4c <__aeabi_dsub+0x1a0>
 8001c42:	2740      	movs	r7, #64	; 0x40
 8001c44:	1b3f      	subs	r7, r7, r4
 8001c46:	40b9      	lsls	r1, r7
 8001c48:	4308      	orrs	r0, r1
 8001c4a:	4680      	mov	r8, r0
 8001c4c:	4644      	mov	r4, r8
 8001c4e:	1e61      	subs	r1, r4, #1
 8001c50:	418c      	sbcs	r4, r1
 8001c52:	4314      	orrs	r4, r2
 8001c54:	e0b1      	b.n	8001dba <__aeabi_dsub+0x30e>
 8001c56:	000c      	movs	r4, r1
 8001c58:	4304      	orrs	r4, r0
 8001c5a:	d02a      	beq.n	8001cb2 <__aeabi_dsub+0x206>
 8001c5c:	46bb      	mov	fp, r7
 8001c5e:	42bd      	cmp	r5, r7
 8001c60:	d02d      	beq.n	8001cbe <__aeabi_dsub+0x212>
 8001c62:	4c61      	ldr	r4, [pc, #388]	; (8001de8 <__aeabi_dsub+0x33c>)
 8001c64:	46a4      	mov	ip, r4
 8001c66:	44b4      	add	ip, r6
 8001c68:	4664      	mov	r4, ip
 8001c6a:	2c00      	cmp	r4, #0
 8001c6c:	d05c      	beq.n	8001d28 <__aeabi_dsub+0x27c>
 8001c6e:	1b94      	subs	r4, r2, r6
 8001c70:	46a4      	mov	ip, r4
 8001c72:	2e00      	cmp	r6, #0
 8001c74:	d000      	beq.n	8001c78 <__aeabi_dsub+0x1cc>
 8001c76:	e115      	b.n	8001ea4 <__aeabi_dsub+0x3f8>
 8001c78:	464d      	mov	r5, r9
 8001c7a:	431d      	orrs	r5, r3
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_dsub+0x1d4>
 8001c7e:	e1c3      	b.n	8002008 <__aeabi_dsub+0x55c>
 8001c80:	1e65      	subs	r5, r4, #1
 8001c82:	2c01      	cmp	r4, #1
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dsub+0x1dc>
 8001c86:	e20c      	b.n	80020a2 <__aeabi_dsub+0x5f6>
 8001c88:	4e55      	ldr	r6, [pc, #340]	; (8001de0 <__aeabi_dsub+0x334>)
 8001c8a:	42b4      	cmp	r4, r6
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x1e4>
 8001c8e:	e1f8      	b.n	8002082 <__aeabi_dsub+0x5d6>
 8001c90:	46ac      	mov	ip, r5
 8001c92:	e10e      	b.n	8001eb2 <__aeabi_dsub+0x406>
 8001c94:	000a      	movs	r2, r1
 8001c96:	4302      	orrs	r2, r0
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x1f0>
 8001c9a:	e136      	b.n	8001f0a <__aeabi_dsub+0x45e>
 8001c9c:	0022      	movs	r2, r4
 8001c9e:	3a01      	subs	r2, #1
 8001ca0:	2c01      	cmp	r4, #1
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_dsub+0x1fa>
 8001ca4:	e1c6      	b.n	8002034 <__aeabi_dsub+0x588>
 8001ca6:	4c4e      	ldr	r4, [pc, #312]	; (8001de0 <__aeabi_dsub+0x334>)
 8001ca8:	45a4      	cmp	ip, r4
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0x202>
 8001cac:	e0f4      	b.n	8001e98 <__aeabi_dsub+0x3ec>
 8001cae:	4694      	mov	ip, r2
 8001cb0:	e731      	b.n	8001b16 <__aeabi_dsub+0x6a>
 8001cb2:	2401      	movs	r4, #1
 8001cb4:	4067      	eors	r7, r4
 8001cb6:	46bb      	mov	fp, r7
 8001cb8:	42bd      	cmp	r5, r7
 8001cba:	d000      	beq.n	8001cbe <__aeabi_dsub+0x212>
 8001cbc:	e71c      	b.n	8001af8 <__aeabi_dsub+0x4c>
 8001cbe:	4c4a      	ldr	r4, [pc, #296]	; (8001de8 <__aeabi_dsub+0x33c>)
 8001cc0:	46a4      	mov	ip, r4
 8001cc2:	44b4      	add	ip, r6
 8001cc4:	4664      	mov	r4, ip
 8001cc6:	2c00      	cmp	r4, #0
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x220>
 8001cca:	e0cf      	b.n	8001e6c <__aeabi_dsub+0x3c0>
 8001ccc:	1b94      	subs	r4, r2, r6
 8001cce:	46a4      	mov	ip, r4
 8001cd0:	2e00      	cmp	r6, #0
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dsub+0x22a>
 8001cd4:	e15c      	b.n	8001f90 <__aeabi_dsub+0x4e4>
 8001cd6:	4e42      	ldr	r6, [pc, #264]	; (8001de0 <__aeabi_dsub+0x334>)
 8001cd8:	42b2      	cmp	r2, r6
 8001cda:	d100      	bne.n	8001cde <__aeabi_dsub+0x232>
 8001cdc:	e1ec      	b.n	80020b8 <__aeabi_dsub+0x60c>
 8001cde:	2680      	movs	r6, #128	; 0x80
 8001ce0:	0436      	lsls	r6, r6, #16
 8001ce2:	4333      	orrs	r3, r6
 8001ce4:	4664      	mov	r4, ip
 8001ce6:	2c38      	cmp	r4, #56	; 0x38
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0x240>
 8001cea:	e1b3      	b.n	8002054 <__aeabi_dsub+0x5a8>
 8001cec:	2c1f      	cmp	r4, #31
 8001cee:	dd00      	ble.n	8001cf2 <__aeabi_dsub+0x246>
 8001cf0:	e238      	b.n	8002164 <__aeabi_dsub+0x6b8>
 8001cf2:	2620      	movs	r6, #32
 8001cf4:	1b36      	subs	r6, r6, r4
 8001cf6:	001c      	movs	r4, r3
 8001cf8:	40b4      	lsls	r4, r6
 8001cfa:	464f      	mov	r7, r9
 8001cfc:	46a0      	mov	r8, r4
 8001cfe:	4664      	mov	r4, ip
 8001d00:	40e7      	lsrs	r7, r4
 8001d02:	4644      	mov	r4, r8
 8001d04:	433c      	orrs	r4, r7
 8001d06:	464f      	mov	r7, r9
 8001d08:	40b7      	lsls	r7, r6
 8001d0a:	003e      	movs	r6, r7
 8001d0c:	1e77      	subs	r7, r6, #1
 8001d0e:	41be      	sbcs	r6, r7
 8001d10:	4334      	orrs	r4, r6
 8001d12:	4666      	mov	r6, ip
 8001d14:	40f3      	lsrs	r3, r6
 8001d16:	18c9      	adds	r1, r1, r3
 8001d18:	1824      	adds	r4, r4, r0
 8001d1a:	4284      	cmp	r4, r0
 8001d1c:	419b      	sbcs	r3, r3
 8001d1e:	425b      	negs	r3, r3
 8001d20:	4698      	mov	r8, r3
 8001d22:	0016      	movs	r6, r2
 8001d24:	4488      	add	r8, r1
 8001d26:	e04e      	b.n	8001dc6 <__aeabi_dsub+0x31a>
 8001d28:	4a30      	ldr	r2, [pc, #192]	; (8001dec <__aeabi_dsub+0x340>)
 8001d2a:	1c74      	adds	r4, r6, #1
 8001d2c:	4214      	tst	r4, r2
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_dsub+0x286>
 8001d30:	e0d6      	b.n	8001ee0 <__aeabi_dsub+0x434>
 8001d32:	464a      	mov	r2, r9
 8001d34:	431a      	orrs	r2, r3
 8001d36:	2e00      	cmp	r6, #0
 8001d38:	d000      	beq.n	8001d3c <__aeabi_dsub+0x290>
 8001d3a:	e15b      	b.n	8001ff4 <__aeabi_dsub+0x548>
 8001d3c:	2a00      	cmp	r2, #0
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x296>
 8001d40:	e1a5      	b.n	800208e <__aeabi_dsub+0x5e2>
 8001d42:	000a      	movs	r2, r1
 8001d44:	4302      	orrs	r2, r0
 8001d46:	d000      	beq.n	8001d4a <__aeabi_dsub+0x29e>
 8001d48:	e1bb      	b.n	80020c2 <__aeabi_dsub+0x616>
 8001d4a:	464a      	mov	r2, r9
 8001d4c:	0759      	lsls	r1, r3, #29
 8001d4e:	08d2      	lsrs	r2, r2, #3
 8001d50:	430a      	orrs	r2, r1
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	e027      	b.n	8001da6 <__aeabi_dsub+0x2fa>
 8001d56:	000a      	movs	r2, r1
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x2b2>
 8001d5c:	e174      	b.n	8002048 <__aeabi_dsub+0x59c>
 8001d5e:	0022      	movs	r2, r4
 8001d60:	3a01      	subs	r2, #1
 8001d62:	2c01      	cmp	r4, #1
 8001d64:	d005      	beq.n	8001d72 <__aeabi_dsub+0x2c6>
 8001d66:	4c1e      	ldr	r4, [pc, #120]	; (8001de0 <__aeabi_dsub+0x334>)
 8001d68:	45a4      	cmp	ip, r4
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x2c2>
 8001d6c:	e094      	b.n	8001e98 <__aeabi_dsub+0x3ec>
 8001d6e:	4694      	mov	ip, r2
 8001d70:	e759      	b.n	8001c26 <__aeabi_dsub+0x17a>
 8001d72:	4448      	add	r0, r9
 8001d74:	4548      	cmp	r0, r9
 8001d76:	4192      	sbcs	r2, r2
 8001d78:	185b      	adds	r3, r3, r1
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	0004      	movs	r4, r0
 8001d7e:	4252      	negs	r2, r2
 8001d80:	4490      	add	r8, r2
 8001d82:	4643      	mov	r3, r8
 8001d84:	2602      	movs	r6, #2
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	d500      	bpl.n	8001d8c <__aeabi_dsub+0x2e0>
 8001d8a:	e0c4      	b.n	8001f16 <__aeabi_dsub+0x46a>
 8001d8c:	3e01      	subs	r6, #1
 8001d8e:	0763      	lsls	r3, r4, #29
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x2e8>
 8001d92:	e711      	b.n	8001bb8 <__aeabi_dsub+0x10c>
 8001d94:	4643      	mov	r3, r8
 8001d96:	46b4      	mov	ip, r6
 8001d98:	0759      	lsls	r1, r3, #29
 8001d9a:	08e2      	lsrs	r2, r4, #3
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	08db      	lsrs	r3, r3, #3
 8001da0:	490f      	ldr	r1, [pc, #60]	; (8001de0 <__aeabi_dsub+0x334>)
 8001da2:	458c      	cmp	ip, r1
 8001da4:	d040      	beq.n	8001e28 <__aeabi_dsub+0x37c>
 8001da6:	4661      	mov	r1, ip
 8001da8:	031b      	lsls	r3, r3, #12
 8001daa:	0549      	lsls	r1, r1, #21
 8001dac:	0b1b      	lsrs	r3, r3, #12
 8001dae:	0d49      	lsrs	r1, r1, #21
 8001db0:	e720      	b.n	8001bf4 <__aeabi_dsub+0x148>
 8001db2:	4301      	orrs	r1, r0
 8001db4:	000c      	movs	r4, r1
 8001db6:	1e61      	subs	r1, r4, #1
 8001db8:	418c      	sbcs	r4, r1
 8001dba:	444c      	add	r4, r9
 8001dbc:	454c      	cmp	r4, r9
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4690      	mov	r8, r2
 8001dc4:	4498      	add	r8, r3
 8001dc6:	4643      	mov	r3, r8
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	d5e0      	bpl.n	8001d8e <__aeabi_dsub+0x2e2>
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <__aeabi_dsub+0x334>)
 8001dce:	3601      	adds	r6, #1
 8001dd0:	429e      	cmp	r6, r3
 8001dd2:	d000      	beq.n	8001dd6 <__aeabi_dsub+0x32a>
 8001dd4:	e09f      	b.n	8001f16 <__aeabi_dsub+0x46a>
 8001dd6:	0031      	movs	r1, r6
 8001dd8:	2300      	movs	r3, #0
 8001dda:	2200      	movs	r2, #0
 8001ddc:	e70a      	b.n	8001bf4 <__aeabi_dsub+0x148>
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	000007ff 	.word	0x000007ff
 8001de4:	ff7fffff 	.word	0xff7fffff
 8001de8:	fffff801 	.word	0xfffff801
 8001dec:	000007fe 	.word	0x000007fe
 8001df0:	2a00      	cmp	r2, #0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x34a>
 8001df4:	e160      	b.n	80020b8 <__aeabi_dsub+0x60c>
 8001df6:	000a      	movs	r2, r1
 8001df8:	4302      	orrs	r2, r0
 8001dfa:	d04d      	beq.n	8001e98 <__aeabi_dsub+0x3ec>
 8001dfc:	464a      	mov	r2, r9
 8001dfe:	075c      	lsls	r4, r3, #29
 8001e00:	08d2      	lsrs	r2, r2, #3
 8001e02:	4322      	orrs	r2, r4
 8001e04:	2480      	movs	r4, #128	; 0x80
 8001e06:	08db      	lsrs	r3, r3, #3
 8001e08:	0324      	lsls	r4, r4, #12
 8001e0a:	4223      	tst	r3, r4
 8001e0c:	d007      	beq.n	8001e1e <__aeabi_dsub+0x372>
 8001e0e:	08ce      	lsrs	r6, r1, #3
 8001e10:	4226      	tst	r6, r4
 8001e12:	d104      	bne.n	8001e1e <__aeabi_dsub+0x372>
 8001e14:	465d      	mov	r5, fp
 8001e16:	0033      	movs	r3, r6
 8001e18:	08c2      	lsrs	r2, r0, #3
 8001e1a:	0749      	lsls	r1, r1, #29
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	0f51      	lsrs	r1, r2, #29
 8001e20:	00d2      	lsls	r2, r2, #3
 8001e22:	08d2      	lsrs	r2, r2, #3
 8001e24:	0749      	lsls	r1, r1, #29
 8001e26:	430a      	orrs	r2, r1
 8001e28:	0011      	movs	r1, r2
 8001e2a:	4319      	orrs	r1, r3
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x384>
 8001e2e:	e1c8      	b.n	80021c2 <__aeabi_dsub+0x716>
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	0309      	lsls	r1, r1, #12
 8001e34:	430b      	orrs	r3, r1
 8001e36:	031b      	lsls	r3, r3, #12
 8001e38:	49d5      	ldr	r1, [pc, #852]	; (8002190 <__aeabi_dsub+0x6e4>)
 8001e3a:	0b1b      	lsrs	r3, r3, #12
 8001e3c:	e6da      	b.n	8001bf4 <__aeabi_dsub+0x148>
 8001e3e:	49d5      	ldr	r1, [pc, #852]	; (8002194 <__aeabi_dsub+0x6e8>)
 8001e40:	1ab6      	subs	r6, r6, r2
 8001e42:	400b      	ands	r3, r1
 8001e44:	4698      	mov	r8, r3
 8001e46:	e6b5      	b.n	8001bb4 <__aeabi_dsub+0x108>
 8001e48:	0020      	movs	r0, r4
 8001e4a:	f000 fab3 	bl	80023b4 <__clzsi2>
 8001e4e:	0002      	movs	r2, r0
 8001e50:	3218      	adds	r2, #24
 8001e52:	2a1f      	cmp	r2, #31
 8001e54:	dc00      	bgt.n	8001e58 <__aeabi_dsub+0x3ac>
 8001e56:	e68f      	b.n	8001b78 <__aeabi_dsub+0xcc>
 8001e58:	0023      	movs	r3, r4
 8001e5a:	3808      	subs	r0, #8
 8001e5c:	4083      	lsls	r3, r0
 8001e5e:	2400      	movs	r4, #0
 8001e60:	e692      	b.n	8001b88 <__aeabi_dsub+0xdc>
 8001e62:	4308      	orrs	r0, r1
 8001e64:	0002      	movs	r2, r0
 8001e66:	1e50      	subs	r0, r2, #1
 8001e68:	4182      	sbcs	r2, r0
 8001e6a:	e66d      	b.n	8001b48 <__aeabi_dsub+0x9c>
 8001e6c:	4cca      	ldr	r4, [pc, #808]	; (8002198 <__aeabi_dsub+0x6ec>)
 8001e6e:	1c72      	adds	r2, r6, #1
 8001e70:	4222      	tst	r2, r4
 8001e72:	d000      	beq.n	8001e76 <__aeabi_dsub+0x3ca>
 8001e74:	e0ad      	b.n	8001fd2 <__aeabi_dsub+0x526>
 8001e76:	464a      	mov	r2, r9
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	2e00      	cmp	r6, #0
 8001e7c:	d1b8      	bne.n	8001df0 <__aeabi_dsub+0x344>
 8001e7e:	2a00      	cmp	r2, #0
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x3d8>
 8001e82:	e158      	b.n	8002136 <__aeabi_dsub+0x68a>
 8001e84:	000a      	movs	r2, r1
 8001e86:	4302      	orrs	r2, r0
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x3e0>
 8001e8a:	e159      	b.n	8002140 <__aeabi_dsub+0x694>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	0759      	lsls	r1, r3, #29
 8001e90:	08d2      	lsrs	r2, r2, #3
 8001e92:	430a      	orrs	r2, r1
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	e786      	b.n	8001da6 <__aeabi_dsub+0x2fa>
 8001e98:	464a      	mov	r2, r9
 8001e9a:	0759      	lsls	r1, r3, #29
 8001e9c:	08d2      	lsrs	r2, r2, #3
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	e7c1      	b.n	8001e28 <__aeabi_dsub+0x37c>
 8001ea4:	4dba      	ldr	r5, [pc, #744]	; (8002190 <__aeabi_dsub+0x6e4>)
 8001ea6:	42aa      	cmp	r2, r5
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x400>
 8001eaa:	e11e      	b.n	80020ea <__aeabi_dsub+0x63e>
 8001eac:	2580      	movs	r5, #128	; 0x80
 8001eae:	042d      	lsls	r5, r5, #16
 8001eb0:	432b      	orrs	r3, r5
 8001eb2:	4664      	mov	r4, ip
 8001eb4:	2c38      	cmp	r4, #56	; 0x38
 8001eb6:	dc5d      	bgt.n	8001f74 <__aeabi_dsub+0x4c8>
 8001eb8:	2c1f      	cmp	r4, #31
 8001eba:	dd00      	ble.n	8001ebe <__aeabi_dsub+0x412>
 8001ebc:	e0d0      	b.n	8002060 <__aeabi_dsub+0x5b4>
 8001ebe:	2520      	movs	r5, #32
 8001ec0:	4667      	mov	r7, ip
 8001ec2:	1b2d      	subs	r5, r5, r4
 8001ec4:	464e      	mov	r6, r9
 8001ec6:	001c      	movs	r4, r3
 8001ec8:	40fe      	lsrs	r6, r7
 8001eca:	40ac      	lsls	r4, r5
 8001ecc:	4334      	orrs	r4, r6
 8001ece:	464e      	mov	r6, r9
 8001ed0:	40ae      	lsls	r6, r5
 8001ed2:	0035      	movs	r5, r6
 8001ed4:	40fb      	lsrs	r3, r7
 8001ed6:	1e6e      	subs	r6, r5, #1
 8001ed8:	41b5      	sbcs	r5, r6
 8001eda:	1ac9      	subs	r1, r1, r3
 8001edc:	432c      	orrs	r4, r5
 8001ede:	e04e      	b.n	8001f7e <__aeabi_dsub+0x4d2>
 8001ee0:	464a      	mov	r2, r9
 8001ee2:	1a14      	subs	r4, r2, r0
 8001ee4:	45a1      	cmp	r9, r4
 8001ee6:	4192      	sbcs	r2, r2
 8001ee8:	4252      	negs	r2, r2
 8001eea:	4690      	mov	r8, r2
 8001eec:	1a5f      	subs	r7, r3, r1
 8001eee:	003a      	movs	r2, r7
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	1bd2      	subs	r2, r2, r7
 8001ef4:	4690      	mov	r8, r2
 8001ef6:	0212      	lsls	r2, r2, #8
 8001ef8:	d500      	bpl.n	8001efc <__aeabi_dsub+0x450>
 8001efa:	e08b      	b.n	8002014 <__aeabi_dsub+0x568>
 8001efc:	4642      	mov	r2, r8
 8001efe:	4322      	orrs	r2, r4
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dsub+0x458>
 8001f02:	e630      	b.n	8001b66 <__aeabi_dsub+0xba>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2500      	movs	r5, #0
 8001f08:	e74d      	b.n	8001da6 <__aeabi_dsub+0x2fa>
 8001f0a:	464a      	mov	r2, r9
 8001f0c:	0759      	lsls	r1, r3, #29
 8001f0e:	08d2      	lsrs	r2, r2, #3
 8001f10:	430a      	orrs	r2, r1
 8001f12:	08db      	lsrs	r3, r3, #3
 8001f14:	e744      	b.n	8001da0 <__aeabi_dsub+0x2f4>
 8001f16:	4642      	mov	r2, r8
 8001f18:	4b9e      	ldr	r3, [pc, #632]	; (8002194 <__aeabi_dsub+0x6e8>)
 8001f1a:	0861      	lsrs	r1, r4, #1
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	0013      	movs	r3, r2
 8001f20:	2201      	movs	r2, #1
 8001f22:	4014      	ands	r4, r2
 8001f24:	430c      	orrs	r4, r1
 8001f26:	07da      	lsls	r2, r3, #31
 8001f28:	085b      	lsrs	r3, r3, #1
 8001f2a:	4698      	mov	r8, r3
 8001f2c:	4314      	orrs	r4, r2
 8001f2e:	e641      	b.n	8001bb4 <__aeabi_dsub+0x108>
 8001f30:	001a      	movs	r2, r3
 8001f32:	3e1f      	subs	r6, #31
 8001f34:	40f2      	lsrs	r2, r6
 8001f36:	0016      	movs	r6, r2
 8001f38:	2920      	cmp	r1, #32
 8001f3a:	d003      	beq.n	8001f44 <__aeabi_dsub+0x498>
 8001f3c:	2240      	movs	r2, #64	; 0x40
 8001f3e:	1a51      	subs	r1, r2, r1
 8001f40:	408b      	lsls	r3, r1
 8001f42:	431c      	orrs	r4, r3
 8001f44:	1e62      	subs	r2, r4, #1
 8001f46:	4194      	sbcs	r4, r2
 8001f48:	2300      	movs	r3, #0
 8001f4a:	4334      	orrs	r4, r6
 8001f4c:	4698      	mov	r8, r3
 8001f4e:	2600      	movs	r6, #0
 8001f50:	e71d      	b.n	8001d8e <__aeabi_dsub+0x2e2>
 8001f52:	000c      	movs	r4, r1
 8001f54:	3a20      	subs	r2, #32
 8001f56:	40d4      	lsrs	r4, r2
 8001f58:	0022      	movs	r2, r4
 8001f5a:	4664      	mov	r4, ip
 8001f5c:	2c20      	cmp	r4, #32
 8001f5e:	d004      	beq.n	8001f6a <__aeabi_dsub+0x4be>
 8001f60:	2740      	movs	r7, #64	; 0x40
 8001f62:	1b3f      	subs	r7, r7, r4
 8001f64:	40b9      	lsls	r1, r7
 8001f66:	4308      	orrs	r0, r1
 8001f68:	4680      	mov	r8, r0
 8001f6a:	4644      	mov	r4, r8
 8001f6c:	1e61      	subs	r1, r4, #1
 8001f6e:	418c      	sbcs	r4, r1
 8001f70:	4322      	orrs	r2, r4
 8001f72:	e5e9      	b.n	8001b48 <__aeabi_dsub+0x9c>
 8001f74:	464c      	mov	r4, r9
 8001f76:	4323      	orrs	r3, r4
 8001f78:	001c      	movs	r4, r3
 8001f7a:	1e63      	subs	r3, r4, #1
 8001f7c:	419c      	sbcs	r4, r3
 8001f7e:	1b04      	subs	r4, r0, r4
 8001f80:	42a0      	cmp	r0, r4
 8001f82:	419b      	sbcs	r3, r3
 8001f84:	425b      	negs	r3, r3
 8001f86:	1acb      	subs	r3, r1, r3
 8001f88:	4698      	mov	r8, r3
 8001f8a:	465d      	mov	r5, fp
 8001f8c:	0016      	movs	r6, r2
 8001f8e:	e5e2      	b.n	8001b56 <__aeabi_dsub+0xaa>
 8001f90:	464e      	mov	r6, r9
 8001f92:	431e      	orrs	r6, r3
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x4ec>
 8001f96:	e0ae      	b.n	80020f6 <__aeabi_dsub+0x64a>
 8001f98:	1e66      	subs	r6, r4, #1
 8001f9a:	2c01      	cmp	r4, #1
 8001f9c:	d100      	bne.n	8001fa0 <__aeabi_dsub+0x4f4>
 8001f9e:	e0fd      	b.n	800219c <__aeabi_dsub+0x6f0>
 8001fa0:	4f7b      	ldr	r7, [pc, #492]	; (8002190 <__aeabi_dsub+0x6e4>)
 8001fa2:	42bc      	cmp	r4, r7
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x4fc>
 8001fa6:	e107      	b.n	80021b8 <__aeabi_dsub+0x70c>
 8001fa8:	46b4      	mov	ip, r6
 8001faa:	e69b      	b.n	8001ce4 <__aeabi_dsub+0x238>
 8001fac:	4664      	mov	r4, ip
 8001fae:	2220      	movs	r2, #32
 8001fb0:	1b12      	subs	r2, r2, r4
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	4094      	lsls	r4, r2
 8001fb6:	0007      	movs	r7, r0
 8001fb8:	4090      	lsls	r0, r2
 8001fba:	46a0      	mov	r8, r4
 8001fbc:	4664      	mov	r4, ip
 8001fbe:	1e42      	subs	r2, r0, #1
 8001fc0:	4190      	sbcs	r0, r2
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	40e7      	lsrs	r7, r4
 8001fc6:	4644      	mov	r4, r8
 8001fc8:	40d1      	lsrs	r1, r2
 8001fca:	433c      	orrs	r4, r7
 8001fcc:	4304      	orrs	r4, r0
 8001fce:	185b      	adds	r3, r3, r1
 8001fd0:	e6f3      	b.n	8001dba <__aeabi_dsub+0x30e>
 8001fd2:	4c6f      	ldr	r4, [pc, #444]	; (8002190 <__aeabi_dsub+0x6e4>)
 8001fd4:	42a2      	cmp	r2, r4
 8001fd6:	d100      	bne.n	8001fda <__aeabi_dsub+0x52e>
 8001fd8:	e0d5      	b.n	8002186 <__aeabi_dsub+0x6da>
 8001fda:	4448      	add	r0, r9
 8001fdc:	185b      	adds	r3, r3, r1
 8001fde:	4548      	cmp	r0, r9
 8001fe0:	4189      	sbcs	r1, r1
 8001fe2:	4249      	negs	r1, r1
 8001fe4:	185b      	adds	r3, r3, r1
 8001fe6:	07dc      	lsls	r4, r3, #31
 8001fe8:	0840      	lsrs	r0, r0, #1
 8001fea:	085b      	lsrs	r3, r3, #1
 8001fec:	4698      	mov	r8, r3
 8001fee:	0016      	movs	r6, r2
 8001ff0:	4304      	orrs	r4, r0
 8001ff2:	e6cc      	b.n	8001d8e <__aeabi_dsub+0x2e2>
 8001ff4:	2a00      	cmp	r2, #0
 8001ff6:	d000      	beq.n	8001ffa <__aeabi_dsub+0x54e>
 8001ff8:	e082      	b.n	8002100 <__aeabi_dsub+0x654>
 8001ffa:	000a      	movs	r2, r1
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	d140      	bne.n	8002082 <__aeabi_dsub+0x5d6>
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	2500      	movs	r5, #0
 8002004:	031b      	lsls	r3, r3, #12
 8002006:	e713      	b.n	8001e30 <__aeabi_dsub+0x384>
 8002008:	074b      	lsls	r3, r1, #29
 800200a:	08c2      	lsrs	r2, r0, #3
 800200c:	431a      	orrs	r2, r3
 800200e:	465d      	mov	r5, fp
 8002010:	08cb      	lsrs	r3, r1, #3
 8002012:	e6c5      	b.n	8001da0 <__aeabi_dsub+0x2f4>
 8002014:	464a      	mov	r2, r9
 8002016:	1a84      	subs	r4, r0, r2
 8002018:	42a0      	cmp	r0, r4
 800201a:	4192      	sbcs	r2, r2
 800201c:	1acb      	subs	r3, r1, r3
 800201e:	4252      	negs	r2, r2
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	4698      	mov	r8, r3
 8002024:	465d      	mov	r5, fp
 8002026:	e59e      	b.n	8001b66 <__aeabi_dsub+0xba>
 8002028:	464a      	mov	r2, r9
 800202a:	0759      	lsls	r1, r3, #29
 800202c:	08d2      	lsrs	r2, r2, #3
 800202e:	430a      	orrs	r2, r1
 8002030:	08db      	lsrs	r3, r3, #3
 8002032:	e6f9      	b.n	8001e28 <__aeabi_dsub+0x37c>
 8002034:	464a      	mov	r2, r9
 8002036:	1a14      	subs	r4, r2, r0
 8002038:	45a1      	cmp	r9, r4
 800203a:	4192      	sbcs	r2, r2
 800203c:	1a5b      	subs	r3, r3, r1
 800203e:	4252      	negs	r2, r2
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	4698      	mov	r8, r3
 8002044:	2601      	movs	r6, #1
 8002046:	e586      	b.n	8001b56 <__aeabi_dsub+0xaa>
 8002048:	464a      	mov	r2, r9
 800204a:	0759      	lsls	r1, r3, #29
 800204c:	08d2      	lsrs	r2, r2, #3
 800204e:	430a      	orrs	r2, r1
 8002050:	08db      	lsrs	r3, r3, #3
 8002052:	e6a5      	b.n	8001da0 <__aeabi_dsub+0x2f4>
 8002054:	464c      	mov	r4, r9
 8002056:	4323      	orrs	r3, r4
 8002058:	001c      	movs	r4, r3
 800205a:	1e63      	subs	r3, r4, #1
 800205c:	419c      	sbcs	r4, r3
 800205e:	e65b      	b.n	8001d18 <__aeabi_dsub+0x26c>
 8002060:	4665      	mov	r5, ip
 8002062:	001e      	movs	r6, r3
 8002064:	3d20      	subs	r5, #32
 8002066:	40ee      	lsrs	r6, r5
 8002068:	2c20      	cmp	r4, #32
 800206a:	d005      	beq.n	8002078 <__aeabi_dsub+0x5cc>
 800206c:	2540      	movs	r5, #64	; 0x40
 800206e:	1b2d      	subs	r5, r5, r4
 8002070:	40ab      	lsls	r3, r5
 8002072:	464c      	mov	r4, r9
 8002074:	431c      	orrs	r4, r3
 8002076:	46a2      	mov	sl, r4
 8002078:	4654      	mov	r4, sl
 800207a:	1e63      	subs	r3, r4, #1
 800207c:	419c      	sbcs	r4, r3
 800207e:	4334      	orrs	r4, r6
 8002080:	e77d      	b.n	8001f7e <__aeabi_dsub+0x4d2>
 8002082:	074b      	lsls	r3, r1, #29
 8002084:	08c2      	lsrs	r2, r0, #3
 8002086:	431a      	orrs	r2, r3
 8002088:	465d      	mov	r5, fp
 800208a:	08cb      	lsrs	r3, r1, #3
 800208c:	e6cc      	b.n	8001e28 <__aeabi_dsub+0x37c>
 800208e:	000a      	movs	r2, r1
 8002090:	4302      	orrs	r2, r0
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x5ea>
 8002094:	e736      	b.n	8001f04 <__aeabi_dsub+0x458>
 8002096:	074b      	lsls	r3, r1, #29
 8002098:	08c2      	lsrs	r2, r0, #3
 800209a:	431a      	orrs	r2, r3
 800209c:	465d      	mov	r5, fp
 800209e:	08cb      	lsrs	r3, r1, #3
 80020a0:	e681      	b.n	8001da6 <__aeabi_dsub+0x2fa>
 80020a2:	464a      	mov	r2, r9
 80020a4:	1a84      	subs	r4, r0, r2
 80020a6:	42a0      	cmp	r0, r4
 80020a8:	4192      	sbcs	r2, r2
 80020aa:	1acb      	subs	r3, r1, r3
 80020ac:	4252      	negs	r2, r2
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	4698      	mov	r8, r3
 80020b2:	465d      	mov	r5, fp
 80020b4:	2601      	movs	r6, #1
 80020b6:	e54e      	b.n	8001b56 <__aeabi_dsub+0xaa>
 80020b8:	074b      	lsls	r3, r1, #29
 80020ba:	08c2      	lsrs	r2, r0, #3
 80020bc:	431a      	orrs	r2, r3
 80020be:	08cb      	lsrs	r3, r1, #3
 80020c0:	e6b2      	b.n	8001e28 <__aeabi_dsub+0x37c>
 80020c2:	464a      	mov	r2, r9
 80020c4:	1a14      	subs	r4, r2, r0
 80020c6:	45a1      	cmp	r9, r4
 80020c8:	4192      	sbcs	r2, r2
 80020ca:	1a5f      	subs	r7, r3, r1
 80020cc:	4252      	negs	r2, r2
 80020ce:	1aba      	subs	r2, r7, r2
 80020d0:	4690      	mov	r8, r2
 80020d2:	0212      	lsls	r2, r2, #8
 80020d4:	d56b      	bpl.n	80021ae <__aeabi_dsub+0x702>
 80020d6:	464a      	mov	r2, r9
 80020d8:	1a84      	subs	r4, r0, r2
 80020da:	42a0      	cmp	r0, r4
 80020dc:	4192      	sbcs	r2, r2
 80020de:	1acb      	subs	r3, r1, r3
 80020e0:	4252      	negs	r2, r2
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	4698      	mov	r8, r3
 80020e6:	465d      	mov	r5, fp
 80020e8:	e564      	b.n	8001bb4 <__aeabi_dsub+0x108>
 80020ea:	074b      	lsls	r3, r1, #29
 80020ec:	08c2      	lsrs	r2, r0, #3
 80020ee:	431a      	orrs	r2, r3
 80020f0:	465d      	mov	r5, fp
 80020f2:	08cb      	lsrs	r3, r1, #3
 80020f4:	e698      	b.n	8001e28 <__aeabi_dsub+0x37c>
 80020f6:	074b      	lsls	r3, r1, #29
 80020f8:	08c2      	lsrs	r2, r0, #3
 80020fa:	431a      	orrs	r2, r3
 80020fc:	08cb      	lsrs	r3, r1, #3
 80020fe:	e64f      	b.n	8001da0 <__aeabi_dsub+0x2f4>
 8002100:	000a      	movs	r2, r1
 8002102:	4302      	orrs	r2, r0
 8002104:	d090      	beq.n	8002028 <__aeabi_dsub+0x57c>
 8002106:	464a      	mov	r2, r9
 8002108:	075c      	lsls	r4, r3, #29
 800210a:	08d2      	lsrs	r2, r2, #3
 800210c:	4314      	orrs	r4, r2
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	08db      	lsrs	r3, r3, #3
 8002112:	0312      	lsls	r2, r2, #12
 8002114:	4213      	tst	r3, r2
 8002116:	d008      	beq.n	800212a <__aeabi_dsub+0x67e>
 8002118:	08ce      	lsrs	r6, r1, #3
 800211a:	4216      	tst	r6, r2
 800211c:	d105      	bne.n	800212a <__aeabi_dsub+0x67e>
 800211e:	08c0      	lsrs	r0, r0, #3
 8002120:	0749      	lsls	r1, r1, #29
 8002122:	4308      	orrs	r0, r1
 8002124:	0004      	movs	r4, r0
 8002126:	465d      	mov	r5, fp
 8002128:	0033      	movs	r3, r6
 800212a:	0f61      	lsrs	r1, r4, #29
 800212c:	00e2      	lsls	r2, r4, #3
 800212e:	0749      	lsls	r1, r1, #29
 8002130:	08d2      	lsrs	r2, r2, #3
 8002132:	430a      	orrs	r2, r1
 8002134:	e678      	b.n	8001e28 <__aeabi_dsub+0x37c>
 8002136:	074b      	lsls	r3, r1, #29
 8002138:	08c2      	lsrs	r2, r0, #3
 800213a:	431a      	orrs	r2, r3
 800213c:	08cb      	lsrs	r3, r1, #3
 800213e:	e632      	b.n	8001da6 <__aeabi_dsub+0x2fa>
 8002140:	4448      	add	r0, r9
 8002142:	185b      	adds	r3, r3, r1
 8002144:	4548      	cmp	r0, r9
 8002146:	4192      	sbcs	r2, r2
 8002148:	4698      	mov	r8, r3
 800214a:	4252      	negs	r2, r2
 800214c:	4490      	add	r8, r2
 800214e:	4643      	mov	r3, r8
 8002150:	0004      	movs	r4, r0
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	d400      	bmi.n	8002158 <__aeabi_dsub+0x6ac>
 8002156:	e61a      	b.n	8001d8e <__aeabi_dsub+0x2e2>
 8002158:	4642      	mov	r2, r8
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <__aeabi_dsub+0x6e8>)
 800215c:	2601      	movs	r6, #1
 800215e:	401a      	ands	r2, r3
 8002160:	4690      	mov	r8, r2
 8002162:	e614      	b.n	8001d8e <__aeabi_dsub+0x2e2>
 8002164:	4666      	mov	r6, ip
 8002166:	001f      	movs	r7, r3
 8002168:	3e20      	subs	r6, #32
 800216a:	40f7      	lsrs	r7, r6
 800216c:	2c20      	cmp	r4, #32
 800216e:	d005      	beq.n	800217c <__aeabi_dsub+0x6d0>
 8002170:	2640      	movs	r6, #64	; 0x40
 8002172:	1b36      	subs	r6, r6, r4
 8002174:	40b3      	lsls	r3, r6
 8002176:	464c      	mov	r4, r9
 8002178:	431c      	orrs	r4, r3
 800217a:	46a2      	mov	sl, r4
 800217c:	4654      	mov	r4, sl
 800217e:	1e63      	subs	r3, r4, #1
 8002180:	419c      	sbcs	r4, r3
 8002182:	433c      	orrs	r4, r7
 8002184:	e5c8      	b.n	8001d18 <__aeabi_dsub+0x26c>
 8002186:	0011      	movs	r1, r2
 8002188:	2300      	movs	r3, #0
 800218a:	2200      	movs	r2, #0
 800218c:	e532      	b.n	8001bf4 <__aeabi_dsub+0x148>
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	000007ff 	.word	0x000007ff
 8002194:	ff7fffff 	.word	0xff7fffff
 8002198:	000007fe 	.word	0x000007fe
 800219c:	464a      	mov	r2, r9
 800219e:	1814      	adds	r4, r2, r0
 80021a0:	4284      	cmp	r4, r0
 80021a2:	4192      	sbcs	r2, r2
 80021a4:	185b      	adds	r3, r3, r1
 80021a6:	4698      	mov	r8, r3
 80021a8:	4252      	negs	r2, r2
 80021aa:	4490      	add	r8, r2
 80021ac:	e5e9      	b.n	8001d82 <__aeabi_dsub+0x2d6>
 80021ae:	4642      	mov	r2, r8
 80021b0:	4322      	orrs	r2, r4
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0x70a>
 80021b4:	e6a6      	b.n	8001f04 <__aeabi_dsub+0x458>
 80021b6:	e5ea      	b.n	8001d8e <__aeabi_dsub+0x2e2>
 80021b8:	074b      	lsls	r3, r1, #29
 80021ba:	08c2      	lsrs	r2, r0, #3
 80021bc:	431a      	orrs	r2, r3
 80021be:	08cb      	lsrs	r3, r1, #3
 80021c0:	e632      	b.n	8001e28 <__aeabi_dsub+0x37c>
 80021c2:	2200      	movs	r2, #0
 80021c4:	4901      	ldr	r1, [pc, #4]	; (80021cc <__aeabi_dsub+0x720>)
 80021c6:	0013      	movs	r3, r2
 80021c8:	e514      	b.n	8001bf4 <__aeabi_dsub+0x148>
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	000007ff 	.word	0x000007ff

080021d0 <__aeabi_dcmpun>:
 80021d0:	b570      	push	{r4, r5, r6, lr}
 80021d2:	0005      	movs	r5, r0
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <__aeabi_dcmpun+0x38>)
 80021d6:	030c      	lsls	r4, r1, #12
 80021d8:	0016      	movs	r6, r2
 80021da:	0049      	lsls	r1, r1, #1
 80021dc:	031a      	lsls	r2, r3, #12
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	0b24      	lsrs	r4, r4, #12
 80021e2:	0d49      	lsrs	r1, r1, #21
 80021e4:	0b12      	lsrs	r2, r2, #12
 80021e6:	0d5b      	lsrs	r3, r3, #21
 80021e8:	4281      	cmp	r1, r0
 80021ea:	d008      	beq.n	80021fe <__aeabi_dcmpun+0x2e>
 80021ec:	4906      	ldr	r1, [pc, #24]	; (8002208 <__aeabi_dcmpun+0x38>)
 80021ee:	2000      	movs	r0, #0
 80021f0:	428b      	cmp	r3, r1
 80021f2:	d103      	bne.n	80021fc <__aeabi_dcmpun+0x2c>
 80021f4:	4332      	orrs	r2, r6
 80021f6:	0010      	movs	r0, r2
 80021f8:	1e42      	subs	r2, r0, #1
 80021fa:	4190      	sbcs	r0, r2
 80021fc:	bd70      	pop	{r4, r5, r6, pc}
 80021fe:	2001      	movs	r0, #1
 8002200:	432c      	orrs	r4, r5
 8002202:	d1fb      	bne.n	80021fc <__aeabi_dcmpun+0x2c>
 8002204:	e7f2      	b.n	80021ec <__aeabi_dcmpun+0x1c>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	000007ff 	.word	0x000007ff

0800220c <__aeabi_d2iz>:
 800220c:	000a      	movs	r2, r1
 800220e:	b530      	push	{r4, r5, lr}
 8002210:	4c13      	ldr	r4, [pc, #76]	; (8002260 <__aeabi_d2iz+0x54>)
 8002212:	0053      	lsls	r3, r2, #1
 8002214:	0309      	lsls	r1, r1, #12
 8002216:	0005      	movs	r5, r0
 8002218:	0b09      	lsrs	r1, r1, #12
 800221a:	2000      	movs	r0, #0
 800221c:	0d5b      	lsrs	r3, r3, #21
 800221e:	0fd2      	lsrs	r2, r2, #31
 8002220:	42a3      	cmp	r3, r4
 8002222:	dd04      	ble.n	800222e <__aeabi_d2iz+0x22>
 8002224:	480f      	ldr	r0, [pc, #60]	; (8002264 <__aeabi_d2iz+0x58>)
 8002226:	4283      	cmp	r3, r0
 8002228:	dd02      	ble.n	8002230 <__aeabi_d2iz+0x24>
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <__aeabi_d2iz+0x5c>)
 800222c:	18d0      	adds	r0, r2, r3
 800222e:	bd30      	pop	{r4, r5, pc}
 8002230:	2080      	movs	r0, #128	; 0x80
 8002232:	0340      	lsls	r0, r0, #13
 8002234:	4301      	orrs	r1, r0
 8002236:	480d      	ldr	r0, [pc, #52]	; (800226c <__aeabi_d2iz+0x60>)
 8002238:	1ac0      	subs	r0, r0, r3
 800223a:	281f      	cmp	r0, #31
 800223c:	dd08      	ble.n	8002250 <__aeabi_d2iz+0x44>
 800223e:	480c      	ldr	r0, [pc, #48]	; (8002270 <__aeabi_d2iz+0x64>)
 8002240:	1ac3      	subs	r3, r0, r3
 8002242:	40d9      	lsrs	r1, r3
 8002244:	000b      	movs	r3, r1
 8002246:	4258      	negs	r0, r3
 8002248:	2a00      	cmp	r2, #0
 800224a:	d1f0      	bne.n	800222e <__aeabi_d2iz+0x22>
 800224c:	0018      	movs	r0, r3
 800224e:	e7ee      	b.n	800222e <__aeabi_d2iz+0x22>
 8002250:	4c08      	ldr	r4, [pc, #32]	; (8002274 <__aeabi_d2iz+0x68>)
 8002252:	40c5      	lsrs	r5, r0
 8002254:	46a4      	mov	ip, r4
 8002256:	4463      	add	r3, ip
 8002258:	4099      	lsls	r1, r3
 800225a:	000b      	movs	r3, r1
 800225c:	432b      	orrs	r3, r5
 800225e:	e7f2      	b.n	8002246 <__aeabi_d2iz+0x3a>
 8002260:	000003fe 	.word	0x000003fe
 8002264:	0000041d 	.word	0x0000041d
 8002268:	7fffffff 	.word	0x7fffffff
 800226c:	00000433 	.word	0x00000433
 8002270:	00000413 	.word	0x00000413
 8002274:	fffffbed 	.word	0xfffffbed

08002278 <__aeabi_i2d>:
 8002278:	b570      	push	{r4, r5, r6, lr}
 800227a:	2800      	cmp	r0, #0
 800227c:	d016      	beq.n	80022ac <__aeabi_i2d+0x34>
 800227e:	17c3      	asrs	r3, r0, #31
 8002280:	18c5      	adds	r5, r0, r3
 8002282:	405d      	eors	r5, r3
 8002284:	0fc4      	lsrs	r4, r0, #31
 8002286:	0028      	movs	r0, r5
 8002288:	f000 f894 	bl	80023b4 <__clzsi2>
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <__aeabi_i2d+0x5c>)
 800228e:	1a12      	subs	r2, r2, r0
 8002290:	280a      	cmp	r0, #10
 8002292:	dc16      	bgt.n	80022c2 <__aeabi_i2d+0x4a>
 8002294:	0003      	movs	r3, r0
 8002296:	002e      	movs	r6, r5
 8002298:	3315      	adds	r3, #21
 800229a:	409e      	lsls	r6, r3
 800229c:	230b      	movs	r3, #11
 800229e:	1a18      	subs	r0, r3, r0
 80022a0:	40c5      	lsrs	r5, r0
 80022a2:	0553      	lsls	r3, r2, #21
 80022a4:	032d      	lsls	r5, r5, #12
 80022a6:	0b2d      	lsrs	r5, r5, #12
 80022a8:	0d5b      	lsrs	r3, r3, #21
 80022aa:	e003      	b.n	80022b4 <__aeabi_i2d+0x3c>
 80022ac:	2400      	movs	r4, #0
 80022ae:	2300      	movs	r3, #0
 80022b0:	2500      	movs	r5, #0
 80022b2:	2600      	movs	r6, #0
 80022b4:	051b      	lsls	r3, r3, #20
 80022b6:	432b      	orrs	r3, r5
 80022b8:	07e4      	lsls	r4, r4, #31
 80022ba:	4323      	orrs	r3, r4
 80022bc:	0030      	movs	r0, r6
 80022be:	0019      	movs	r1, r3
 80022c0:	bd70      	pop	{r4, r5, r6, pc}
 80022c2:	380b      	subs	r0, #11
 80022c4:	4085      	lsls	r5, r0
 80022c6:	0553      	lsls	r3, r2, #21
 80022c8:	032d      	lsls	r5, r5, #12
 80022ca:	2600      	movs	r6, #0
 80022cc:	0b2d      	lsrs	r5, r5, #12
 80022ce:	0d5b      	lsrs	r3, r3, #21
 80022d0:	e7f0      	b.n	80022b4 <__aeabi_i2d+0x3c>
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	0000041e 	.word	0x0000041e

080022d8 <__aeabi_ui2d>:
 80022d8:	b510      	push	{r4, lr}
 80022da:	1e04      	subs	r4, r0, #0
 80022dc:	d010      	beq.n	8002300 <__aeabi_ui2d+0x28>
 80022de:	f000 f869 	bl	80023b4 <__clzsi2>
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <__aeabi_ui2d+0x48>)
 80022e4:	1a1b      	subs	r3, r3, r0
 80022e6:	280a      	cmp	r0, #10
 80022e8:	dc11      	bgt.n	800230e <__aeabi_ui2d+0x36>
 80022ea:	220b      	movs	r2, #11
 80022ec:	0021      	movs	r1, r4
 80022ee:	1a12      	subs	r2, r2, r0
 80022f0:	40d1      	lsrs	r1, r2
 80022f2:	3015      	adds	r0, #21
 80022f4:	030a      	lsls	r2, r1, #12
 80022f6:	055b      	lsls	r3, r3, #21
 80022f8:	4084      	lsls	r4, r0
 80022fa:	0b12      	lsrs	r2, r2, #12
 80022fc:	0d5b      	lsrs	r3, r3, #21
 80022fe:	e001      	b.n	8002304 <__aeabi_ui2d+0x2c>
 8002300:	2300      	movs	r3, #0
 8002302:	2200      	movs	r2, #0
 8002304:	051b      	lsls	r3, r3, #20
 8002306:	4313      	orrs	r3, r2
 8002308:	0020      	movs	r0, r4
 800230a:	0019      	movs	r1, r3
 800230c:	bd10      	pop	{r4, pc}
 800230e:	0022      	movs	r2, r4
 8002310:	380b      	subs	r0, #11
 8002312:	4082      	lsls	r2, r0
 8002314:	055b      	lsls	r3, r3, #21
 8002316:	0312      	lsls	r2, r2, #12
 8002318:	2400      	movs	r4, #0
 800231a:	0b12      	lsrs	r2, r2, #12
 800231c:	0d5b      	lsrs	r3, r3, #21
 800231e:	e7f1      	b.n	8002304 <__aeabi_ui2d+0x2c>
 8002320:	0000041e 	.word	0x0000041e

08002324 <__aeabi_f2d>:
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	0043      	lsls	r3, r0, #1
 8002328:	0246      	lsls	r6, r0, #9
 800232a:	0fc4      	lsrs	r4, r0, #31
 800232c:	20fe      	movs	r0, #254	; 0xfe
 800232e:	0e1b      	lsrs	r3, r3, #24
 8002330:	1c59      	adds	r1, r3, #1
 8002332:	0a75      	lsrs	r5, r6, #9
 8002334:	4208      	tst	r0, r1
 8002336:	d00c      	beq.n	8002352 <__aeabi_f2d+0x2e>
 8002338:	22e0      	movs	r2, #224	; 0xe0
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	4694      	mov	ip, r2
 800233e:	076d      	lsls	r5, r5, #29
 8002340:	0b36      	lsrs	r6, r6, #12
 8002342:	4463      	add	r3, ip
 8002344:	051b      	lsls	r3, r3, #20
 8002346:	4333      	orrs	r3, r6
 8002348:	07e4      	lsls	r4, r4, #31
 800234a:	4323      	orrs	r3, r4
 800234c:	0028      	movs	r0, r5
 800234e:	0019      	movs	r1, r3
 8002350:	bd70      	pop	{r4, r5, r6, pc}
 8002352:	2b00      	cmp	r3, #0
 8002354:	d114      	bne.n	8002380 <__aeabi_f2d+0x5c>
 8002356:	2d00      	cmp	r5, #0
 8002358:	d01b      	beq.n	8002392 <__aeabi_f2d+0x6e>
 800235a:	0028      	movs	r0, r5
 800235c:	f000 f82a 	bl	80023b4 <__clzsi2>
 8002360:	280a      	cmp	r0, #10
 8002362:	dc1c      	bgt.n	800239e <__aeabi_f2d+0x7a>
 8002364:	230b      	movs	r3, #11
 8002366:	002a      	movs	r2, r5
 8002368:	1a1b      	subs	r3, r3, r0
 800236a:	40da      	lsrs	r2, r3
 800236c:	0003      	movs	r3, r0
 800236e:	3315      	adds	r3, #21
 8002370:	409d      	lsls	r5, r3
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <__aeabi_f2d+0x88>)
 8002374:	0312      	lsls	r2, r2, #12
 8002376:	1a1b      	subs	r3, r3, r0
 8002378:	055b      	lsls	r3, r3, #21
 800237a:	0b16      	lsrs	r6, r2, #12
 800237c:	0d5b      	lsrs	r3, r3, #21
 800237e:	e7e1      	b.n	8002344 <__aeabi_f2d+0x20>
 8002380:	2d00      	cmp	r5, #0
 8002382:	d009      	beq.n	8002398 <__aeabi_f2d+0x74>
 8002384:	0b32      	lsrs	r2, r6, #12
 8002386:	2680      	movs	r6, #128	; 0x80
 8002388:	0336      	lsls	r6, r6, #12
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <__aeabi_f2d+0x8c>)
 800238c:	076d      	lsls	r5, r5, #29
 800238e:	4316      	orrs	r6, r2
 8002390:	e7d8      	b.n	8002344 <__aeabi_f2d+0x20>
 8002392:	2300      	movs	r3, #0
 8002394:	2600      	movs	r6, #0
 8002396:	e7d5      	b.n	8002344 <__aeabi_f2d+0x20>
 8002398:	2600      	movs	r6, #0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <__aeabi_f2d+0x8c>)
 800239c:	e7d2      	b.n	8002344 <__aeabi_f2d+0x20>
 800239e:	0003      	movs	r3, r0
 80023a0:	002a      	movs	r2, r5
 80023a2:	3b0b      	subs	r3, #11
 80023a4:	409a      	lsls	r2, r3
 80023a6:	2500      	movs	r5, #0
 80023a8:	e7e3      	b.n	8002372 <__aeabi_f2d+0x4e>
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	00000389 	.word	0x00000389
 80023b0:	000007ff 	.word	0x000007ff

080023b4 <__clzsi2>:
 80023b4:	211c      	movs	r1, #28
 80023b6:	2301      	movs	r3, #1
 80023b8:	041b      	lsls	r3, r3, #16
 80023ba:	4298      	cmp	r0, r3
 80023bc:	d301      	bcc.n	80023c2 <__clzsi2+0xe>
 80023be:	0c00      	lsrs	r0, r0, #16
 80023c0:	3910      	subs	r1, #16
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	4298      	cmp	r0, r3
 80023c6:	d301      	bcc.n	80023cc <__clzsi2+0x18>
 80023c8:	0a00      	lsrs	r0, r0, #8
 80023ca:	3908      	subs	r1, #8
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	4298      	cmp	r0, r3
 80023d0:	d301      	bcc.n	80023d6 <__clzsi2+0x22>
 80023d2:	0900      	lsrs	r0, r0, #4
 80023d4:	3904      	subs	r1, #4
 80023d6:	a202      	add	r2, pc, #8	; (adr r2, 80023e0 <__clzsi2+0x2c>)
 80023d8:	5c10      	ldrb	r0, [r2, r0]
 80023da:	1840      	adds	r0, r0, r1
 80023dc:	4770      	bx	lr
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	02020304 	.word	0x02020304
 80023e4:	01010101 	.word	0x01010101
	...

080023f0 <__clzdi2>:
 80023f0:	b510      	push	{r4, lr}
 80023f2:	2900      	cmp	r1, #0
 80023f4:	d103      	bne.n	80023fe <__clzdi2+0xe>
 80023f6:	f7ff ffdd 	bl	80023b4 <__clzsi2>
 80023fa:	3020      	adds	r0, #32
 80023fc:	e002      	b.n	8002404 <__clzdi2+0x14>
 80023fe:	1c08      	adds	r0, r1, #0
 8002400:	f7ff ffd8 	bl	80023b4 <__clzsi2>
 8002404:	bd10      	pop	{r4, pc}
 8002406:	46c0      	nop			; (mov r8, r8)

08002408 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Callback to be called after HAL_UART_RECEIVE_IT finishes getting data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	// Disable Interrupts
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002410:	201b      	movs	r0, #27
 8002412:	f002 fa84 	bl	800491e <HAL_NVIC_DisableIRQ>
	// Set received flag
	cmd_received = 1;
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_UART_RxCpltCallback+0x84>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]
	// Copy the receive buffer into the command buffer.
	memcpy(cmd_data,Rx_data,20);
 800241c:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <HAL_UART_RxCpltCallback+0x88>)
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_UART_RxCpltCallback+0x8c>)
 8002420:	0010      	movs	r0, r2
 8002422:	0019      	movs	r1, r3
 8002424:	2314      	movs	r3, #20
 8002426:	001a      	movs	r2, r3
 8002428:	f009 f9a6 	bl	800b778 <memcpy>
	// Save the last command
	// Enable Interrupts
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800242c:	201b      	movs	r0, #27
 800242e:	f002 fa66 	bl	80048fe <HAL_NVIC_EnableIRQ>
	ret = HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 8002432:	4918      	ldr	r1, [pc, #96]	; (8002494 <HAL_UART_RxCpltCallback+0x8c>)
 8002434:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_UART_RxCpltCallback+0x90>)
 8002436:	2214      	movs	r2, #20
 8002438:	0018      	movs	r0, r3
 800243a:	f007 f963 	bl	8009704 <HAL_UART_Receive_DMA>
 800243e:	0003      	movs	r3, r0
 8002440:	001a      	movs	r2, r3
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <HAL_UART_RxCpltCallback+0x94>)
 8002444:	701a      	strb	r2, [r3, #0]

	//__HAL_UART_CLEAR_FLAG(JETSON_UART, UART_CLEAR_OREF);
	//__HAL_UART_SEND_REQ(JETSON_UART, UART_RXDATA_FLUSH_REQUEST);

	if (ret != HAL_OK) {
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_UART_RxCpltCallback+0x94>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01a      	beq.n	8002484 <HAL_UART_RxCpltCallback+0x7c>
		Error_Handler();
 800244e:	f000 fc21 	bl	8002c94 <Error_Handler>
		HAL_UART_Abort_IT(&huart1);
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_UART_RxCpltCallback+0x98>)
 8002454:	0018      	movs	r0, r3
 8002456:	f007 f9c5 	bl	80097e4 <HAL_UART_Abort_IT>
	    SET_BIT(huart1.Instance->CR3, USART_CR3_EIE);
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_UART_RxCpltCallback+0x98>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_UART_RxCpltCallback+0x98>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
	    //This flag no longer exists
	    //SET_BIT(huart1.Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
	    HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 800246a:	201b      	movs	r0, #27
 800246c:	f002 fa74 	bl	8004958 <HAL_NVIC_ClearPendingIRQ>

	    ret = HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 8002470:	4908      	ldr	r1, [pc, #32]	; (8002494 <HAL_UART_RxCpltCallback+0x8c>)
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_UART_RxCpltCallback+0x90>)
 8002474:	2214      	movs	r2, #20
 8002476:	0018      	movs	r0, r3
 8002478:	f007 f944 	bl	8009704 <HAL_UART_Receive_DMA>
 800247c:	0003      	movs	r3, r0
 800247e:	001a      	movs	r2, r3
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_UART_RxCpltCallback+0x94>)
 8002482:	701a      	strb	r2, [r3, #0]
	}
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000218 	.word	0x20000218
 8002490:	200003f8 	.word	0x200003f8
 8002494:	200002d4 	.word	0x200002d4
 8002498:	200004e8 	.word	0x200004e8
 800249c:	20000578 	.word	0x20000578
 80024a0:	2000040c 	.word	0x2000040c

080024a4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024b8:	f001 fbc4 	bl	8003c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024bc:	f000 f816 	bl	80024ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c0:	f000 fb14 	bl	8002aec <MX_GPIO_Init>
  MX_DMA_Init();
 80024c4:	f000 faec 	bl	8002aa0 <MX_DMA_Init>
  MX_ADC1_Init();
 80024c8:	f000 f87e 	bl	80025c8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80024cc:	f000 f928 	bl	8002720 <MX_TIM1_Init>
  MX_TIM3_Init();
 80024d0:	f000 f9de 	bl	8002890 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80024d4:	f000 fa48 	bl	8002968 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80024d8:	f000 fa94 	bl	8002a04 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80024dc:	f000 f8e0 	bl	80026a0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  main_preloop();
 80024e0:	f000 fc9c 	bl	8002e1c <main_preloop>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  main_loop();
 80024e4:	f000 fbdc 	bl	8002ca0 <main_loop>
 80024e8:	e7fc      	b.n	80024e4 <main+0x30>
	...

080024ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b0a7      	sub	sp, #156	; 0x9c
 80024f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024f2:	245c      	movs	r4, #92	; 0x5c
 80024f4:	193b      	adds	r3, r7, r4
 80024f6:	0018      	movs	r0, r3
 80024f8:	233c      	movs	r3, #60	; 0x3c
 80024fa:	001a      	movs	r2, r3
 80024fc:	2100      	movs	r1, #0
 80024fe:	f009 f944 	bl	800b78a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002502:	234c      	movs	r3, #76	; 0x4c
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	0018      	movs	r0, r3
 8002508:	2310      	movs	r3, #16
 800250a:	001a      	movs	r2, r3
 800250c:	2100      	movs	r1, #0
 800250e:	f009 f93c 	bl	800b78a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002512:	003b      	movs	r3, r7
 8002514:	0018      	movs	r0, r3
 8002516:	234c      	movs	r3, #76	; 0x4c
 8002518:	001a      	movs	r2, r3
 800251a:	2100      	movs	r1, #0
 800251c:	f009 f935 	bl	800b78a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	0018      	movs	r0, r3
 8002526:	f005 f9df 	bl	80078e8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800252a:	193b      	adds	r3, r7, r4
 800252c:	2202      	movs	r2, #2
 800252e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002530:	193b      	adds	r3, r7, r4
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	0052      	lsls	r2, r2, #1
 8002536:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002538:	193b      	adds	r3, r7, r4
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800253e:	193b      	adds	r3, r7, r4
 8002540:	2240      	movs	r2, #64	; 0x40
 8002542:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002544:	193b      	adds	r3, r7, r4
 8002546:	2200      	movs	r2, #0
 8002548:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800254a:	193b      	adds	r3, r7, r4
 800254c:	0018      	movs	r0, r3
 800254e:	f005 fa17 	bl	8007980 <HAL_RCC_OscConfig>
 8002552:	1e03      	subs	r3, r0, #0
 8002554:	d001      	beq.n	800255a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002556:	f000 fb9d 	bl	8002c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800255a:	214c      	movs	r1, #76	; 0x4c
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2207      	movs	r2, #7
 8002560:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002562:	187b      	adds	r3, r7, r1
 8002564:	2200      	movs	r2, #0
 8002566:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002568:	187b      	adds	r3, r7, r1
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800256e:	187b      	adds	r3, r7, r1
 8002570:	2200      	movs	r2, #0
 8002572:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002574:	187b      	adds	r3, r7, r1
 8002576:	2100      	movs	r1, #0
 8002578:	0018      	movs	r0, r3
 800257a:	f005 fd67 	bl	800804c <HAL_RCC_ClockConfig>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d001      	beq.n	8002586 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002582:	f000 fb87 	bl	8002c94 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002586:	003b      	movs	r3, r7
 8002588:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <SystemClock_Config+0xd8>)
 800258a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800258c:	003b      	movs	r3, r7
 800258e:	2200      	movs	r2, #0
 8002590:	605a      	str	r2, [r3, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002592:	003b      	movs	r3, r7
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002598:	003b      	movs	r3, r7
 800259a:	2200      	movs	r2, #0
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800259e:	003b      	movs	r3, r7
 80025a0:	2200      	movs	r2, #0
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80025a4:	003b      	movs	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025aa:	003b      	movs	r3, r7
 80025ac:	0018      	movs	r0, r3
 80025ae:	f005 fef7 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 80025b2:	1e03      	subs	r3, r0, #0
 80025b4:	d001      	beq.n	80025ba <SystemClock_Config+0xce>
  {
    Error_Handler();
 80025b6:	f000 fb6d 	bl	8002c94 <Error_Handler>
  }
}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	b027      	add	sp, #156	; 0x9c
 80025c0:	bd90      	pop	{r4, r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	00204043 	.word	0x00204043

080025c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	0018      	movs	r0, r3
 80025d2:	230c      	movs	r3, #12
 80025d4:	001a      	movs	r2, r3
 80025d6:	2100      	movs	r1, #0
 80025d8:	f009 f8d7 	bl	800b78a <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80025dc:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <MX_ADC1_Init+0xcc>)
 80025de:	4a2e      	ldr	r2, [pc, #184]	; (8002698 <MX_ADC1_Init+0xd0>)
 80025e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80025e2:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <MX_ADC1_Init+0xcc>)
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	05d2      	lsls	r2, r2, #23
 80025e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025ea:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <MX_ADC1_Init+0xcc>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <MX_ADC1_Init+0xcc>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025f6:	4b27      	ldr	r3, [pc, #156]	; (8002694 <MX_ADC1_Init+0xcc>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <MX_ADC1_Init+0xcc>)
 80025fe:	2204      	movs	r2, #4
 8002600:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002602:	4b24      	ldr	r3, [pc, #144]	; (8002694 <MX_ADC1_Init+0xcc>)
 8002604:	2200      	movs	r2, #0
 8002606:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <MX_ADC1_Init+0xcc>)
 800260a:	2200      	movs	r2, #0
 800260c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <MX_ADC1_Init+0xcc>)
 8002610:	2200      	movs	r2, #0
 8002612:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <MX_ADC1_Init+0xcc>)
 8002616:	2201      	movs	r2, #1
 8002618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <MX_ADC1_Init+0xcc>)
 800261c:	2220      	movs	r2, #32
 800261e:	2100      	movs	r1, #0
 8002620:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <MX_ADC1_Init+0xcc>)
 8002624:	2200      	movs	r2, #0
 8002626:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002628:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <MX_ADC1_Init+0xcc>)
 800262a:	2200      	movs	r2, #0
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <MX_ADC1_Init+0xcc>)
 8002630:	222c      	movs	r2, #44	; 0x2c
 8002632:	2100      	movs	r1, #0
 8002634:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <MX_ADC1_Init+0xcc>)
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_ADC1_Init+0xcc>)
 800263e:	2200      	movs	r2, #0
 8002640:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <MX_ADC1_Init+0xcc>)
 8002644:	2200      	movs	r2, #0
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <MX_ADC1_Init+0xcc>)
 800264a:	223c      	movs	r2, #60	; 0x3c
 800264c:	2100      	movs	r1, #0
 800264e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <MX_ADC1_Init+0xcc>)
 8002652:	2200      	movs	r2, #0
 8002654:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <MX_ADC1_Init+0xcc>)
 8002658:	0018      	movs	r0, r3
 800265a:	f001 fc9b 	bl	8003f94 <HAL_ADC_Init>
 800265e:	1e03      	subs	r3, r0, #0
 8002660:	d001      	beq.n	8002666 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002662:	f000 fb17 	bl	8002c94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	4a0c      	ldr	r2, [pc, #48]	; (800269c <MX_ADC1_Init+0xd4>)
 800266a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2200      	movs	r2, #0
 8002670:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002678:	1d3a      	adds	r2, r7, #4
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <MX_ADC1_Init+0xcc>)
 800267c:	0011      	movs	r1, r2
 800267e:	0018      	movs	r0, r3
 8002680:	f001 fe66 	bl	8004350 <HAL_ADC_ConfigChannel>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d001      	beq.n	800268c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002688:	f000 fb04 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b004      	add	sp, #16
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000334 	.word	0x20000334
 8002698:	40012400 	.word	0x40012400
 800269c:	0c000008 	.word	0x0c000008

080026a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <MX_I2C2_Init+0x74>)
 80026a6:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <MX_I2C2_Init+0x78>)
 80026a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <MX_I2C2_Init+0x74>)
 80026ac:	4a1b      	ldr	r2, [pc, #108]	; (800271c <MX_I2C2_Init+0x7c>)
 80026ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <MX_I2C2_Init+0x74>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026b6:	4b17      	ldr	r3, [pc, #92]	; (8002714 <MX_I2C2_Init+0x74>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <MX_I2C2_Init+0x74>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <MX_I2C2_Init+0x74>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_I2C2_Init+0x74>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <MX_I2C2_Init+0x74>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <MX_I2C2_Init+0x74>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <MX_I2C2_Init+0x74>)
 80026dc:	0018      	movs	r0, r3
 80026de:	f002 fe49 	bl	8005374 <HAL_I2C_Init>
 80026e2:	1e03      	subs	r3, r0, #0
 80026e4:	d001      	beq.n	80026ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80026e6:	f000 fad5 	bl	8002c94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <MX_I2C2_Init+0x74>)
 80026ec:	2100      	movs	r1, #0
 80026ee:	0018      	movs	r0, r3
 80026f0:	f005 f862 	bl	80077b8 <HAL_I2CEx_ConfigAnalogFilter>
 80026f4:	1e03      	subs	r3, r0, #0
 80026f6:	d001      	beq.n	80026fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80026f8:	f000 facc 	bl	8002c94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <MX_I2C2_Init+0x74>)
 80026fe:	2100      	movs	r1, #0
 8002700:	0018      	movs	r0, r3
 8002702:	f005 f8a5 	bl	8007850 <HAL_I2CEx_ConfigDigitalFilter>
 8002706:	1e03      	subs	r3, r0, #0
 8002708:	d001      	beq.n	800270e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800270a:	f000 fac3 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000288 	.word	0x20000288
 8002718:	40005800 	.word	0x40005800
 800271c:	00303d5b 	.word	0x00303d5b

08002720 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b098      	sub	sp, #96	; 0x60
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002726:	2354      	movs	r3, #84	; 0x54
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	0018      	movs	r0, r3
 800272c:	230c      	movs	r3, #12
 800272e:	001a      	movs	r2, r3
 8002730:	2100      	movs	r1, #0
 8002732:	f009 f82a 	bl	800b78a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002736:	2338      	movs	r3, #56	; 0x38
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	0018      	movs	r0, r3
 800273c:	231c      	movs	r3, #28
 800273e:	001a      	movs	r2, r3
 8002740:	2100      	movs	r1, #0
 8002742:	f009 f822 	bl	800b78a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	0018      	movs	r0, r3
 800274a:	2334      	movs	r3, #52	; 0x34
 800274c:	001a      	movs	r2, r3
 800274e:	2100      	movs	r1, #0
 8002750:	f009 f81b 	bl	800b78a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002754:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <MX_TIM1_Init+0x164>)
 8002756:	4a4c      	ldr	r2, [pc, #304]	; (8002888 <MX_TIM1_Init+0x168>)
 8002758:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800275a:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <MX_TIM1_Init+0x164>)
 800275c:	2200      	movs	r2, #0
 800275e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002760:	4b48      	ldr	r3, [pc, #288]	; (8002884 <MX_TIM1_Init+0x164>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <MX_TIM1_Init+0x164>)
 8002768:	4a48      	ldr	r2, [pc, #288]	; (800288c <MX_TIM1_Init+0x16c>)
 800276a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276c:	4b45      	ldr	r3, [pc, #276]	; (8002884 <MX_TIM1_Init+0x164>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002772:	4b44      	ldr	r3, [pc, #272]	; (8002884 <MX_TIM1_Init+0x164>)
 8002774:	2200      	movs	r2, #0
 8002776:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002778:	4b42      	ldr	r3, [pc, #264]	; (8002884 <MX_TIM1_Init+0x164>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800277e:	4b41      	ldr	r3, [pc, #260]	; (8002884 <MX_TIM1_Init+0x164>)
 8002780:	0018      	movs	r0, r3
 8002782:	f006 f849 	bl	8008818 <HAL_TIM_PWM_Init>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d001      	beq.n	800278e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800278a:	f000 fa83 	bl	8002c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278e:	2154      	movs	r1, #84	; 0x54
 8002790:	187b      	adds	r3, r7, r1
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002796:	187b      	adds	r3, r7, r1
 8002798:	2200      	movs	r2, #0
 800279a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800279c:	187b      	adds	r3, r7, r1
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027a2:	187a      	adds	r2, r7, r1
 80027a4:	4b37      	ldr	r3, [pc, #220]	; (8002884 <MX_TIM1_Init+0x164>)
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f006 fcd1 	bl	8009150 <HAL_TIMEx_MasterConfigSynchronization>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80027b2:	f000 fa6f 	bl	8002c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027b6:	2138      	movs	r1, #56	; 0x38
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	2260      	movs	r2, #96	; 0x60
 80027bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	2200      	movs	r2, #0
 80027c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	2200      	movs	r2, #0
 80027da:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e2:	1879      	adds	r1, r7, r1
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <MX_TIM1_Init+0x164>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	0018      	movs	r0, r3
 80027ea:	f006 f86d 	bl	80088c8 <HAL_TIM_PWM_ConfigChannel>
 80027ee:	1e03      	subs	r3, r0, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80027f2:	f000 fa4f 	bl	8002c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027f6:	2338      	movs	r3, #56	; 0x38
 80027f8:	18f9      	adds	r1, r7, r3
 80027fa:	4b22      	ldr	r3, [pc, #136]	; (8002884 <MX_TIM1_Init+0x164>)
 80027fc:	2204      	movs	r2, #4
 80027fe:	0018      	movs	r0, r3
 8002800:	f006 f862 	bl	80088c8 <HAL_TIM_PWM_ConfigChannel>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d001      	beq.n	800280c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8002808:	f000 fa44 	bl	8002c94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2200      	movs	r2, #0
 8002816:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2280      	movs	r2, #128	; 0x80
 800282e:	0192      	lsls	r2, r2, #6
 8002830:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	0492      	lsls	r2, r2, #18
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	2200      	movs	r2, #0
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	2200      	movs	r2, #0
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800285e:	1d3a      	adds	r2, r7, #4
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <MX_TIM1_Init+0x164>)
 8002862:	0011      	movs	r1, r2
 8002864:	0018      	movs	r0, r3
 8002866:	f006 fce9 	bl	800923c <HAL_TIMEx_ConfigBreakDeadTime>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d001      	beq.n	8002872 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 800286e:	f000 fa11 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <MX_TIM1_Init+0x164>)
 8002874:	0018      	movs	r0, r3
 8002876:	f000 fdb7 	bl	80033e8 <HAL_TIM_MspPostInit>

}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	46bd      	mov	sp, r7
 800287e:	b018      	add	sp, #96	; 0x60
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	2000049c 	.word	0x2000049c
 8002888:	40012c00 	.word	0x40012c00
 800288c:	0000ffff 	.word	0x0000ffff

08002890 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002896:	231c      	movs	r3, #28
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	0018      	movs	r0, r3
 800289c:	230c      	movs	r3, #12
 800289e:	001a      	movs	r2, r3
 80028a0:	2100      	movs	r1, #0
 80028a2:	f008 ff72 	bl	800b78a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028a6:	003b      	movs	r3, r7
 80028a8:	0018      	movs	r0, r3
 80028aa:	231c      	movs	r3, #28
 80028ac:	001a      	movs	r2, r3
 80028ae:	2100      	movs	r1, #0
 80028b0:	f008 ff6b 	bl	800b78a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028b4:	4b29      	ldr	r3, [pc, #164]	; (800295c <MX_TIM3_Init+0xcc>)
 80028b6:	4a2a      	ldr	r2, [pc, #168]	; (8002960 <MX_TIM3_Init+0xd0>)
 80028b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80028ba:	4b28      	ldr	r3, [pc, #160]	; (800295c <MX_TIM3_Init+0xcc>)
 80028bc:	2200      	movs	r2, #0
 80028be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c0:	4b26      	ldr	r3, [pc, #152]	; (800295c <MX_TIM3_Init+0xcc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80028c6:	4b25      	ldr	r3, [pc, #148]	; (800295c <MX_TIM3_Init+0xcc>)
 80028c8:	4a26      	ldr	r2, [pc, #152]	; (8002964 <MX_TIM3_Init+0xd4>)
 80028ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028cc:	4b23      	ldr	r3, [pc, #140]	; (800295c <MX_TIM3_Init+0xcc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <MX_TIM3_Init+0xcc>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028d8:	4b20      	ldr	r3, [pc, #128]	; (800295c <MX_TIM3_Init+0xcc>)
 80028da:	0018      	movs	r0, r3
 80028dc:	f005 ff9c 	bl	8008818 <HAL_TIM_PWM_Init>
 80028e0:	1e03      	subs	r3, r0, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80028e4:	f000 f9d6 	bl	8002c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e8:	211c      	movs	r1, #28
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f0:	187b      	adds	r3, r7, r1
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028f6:	187a      	adds	r2, r7, r1
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <MX_TIM3_Init+0xcc>)
 80028fa:	0011      	movs	r1, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f006 fc27 	bl	8009150 <HAL_TIMEx_MasterConfigSynchronization>
 8002902:	1e03      	subs	r3, r0, #0
 8002904:	d001      	beq.n	800290a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002906:	f000 f9c5 	bl	8002c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800290a:	003b      	movs	r3, r7
 800290c:	2260      	movs	r2, #96	; 0x60
 800290e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002910:	003b      	movs	r3, r7
 8002912:	2200      	movs	r2, #0
 8002914:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002916:	003b      	movs	r3, r7
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800291c:	003b      	movs	r3, r7
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002922:	0039      	movs	r1, r7
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <MX_TIM3_Init+0xcc>)
 8002926:	2200      	movs	r2, #0
 8002928:	0018      	movs	r0, r3
 800292a:	f005 ffcd 	bl	80088c8 <HAL_TIM_PWM_ConfigChannel>
 800292e:	1e03      	subs	r3, r0, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8002932:	f000 f9af 	bl	8002c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002936:	0039      	movs	r1, r7
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <MX_TIM3_Init+0xcc>)
 800293a:	2204      	movs	r2, #4
 800293c:	0018      	movs	r0, r3
 800293e:	f005 ffc3 	bl	80088c8 <HAL_TIM_PWM_ConfigChannel>
 8002942:	1e03      	subs	r3, r0, #0
 8002944:	d001      	beq.n	800294a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8002946:	f000 f9a5 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800294a:	4b04      	ldr	r3, [pc, #16]	; (800295c <MX_TIM3_Init+0xcc>)
 800294c:	0018      	movs	r0, r3
 800294e:	f000 fd4b 	bl	80033e8 <HAL_TIM_MspPostInit>

}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	46bd      	mov	sp, r7
 8002956:	b00a      	add	sp, #40	; 0x28
 8002958:	bd80      	pop	{r7, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	200002e8 	.word	0x200002e8
 8002960:	40000400 	.word	0x40000400
 8002964:	0000ffff 	.word	0x0000ffff

08002968 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800296c:	4b23      	ldr	r3, [pc, #140]	; (80029fc <MX_USART1_UART_Init+0x94>)
 800296e:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <MX_USART1_UART_Init+0x98>)
 8002970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002972:	4b22      	ldr	r3, [pc, #136]	; (80029fc <MX_USART1_UART_Init+0x94>)
 8002974:	2296      	movs	r2, #150	; 0x96
 8002976:	0212      	lsls	r2, r2, #8
 8002978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <MX_USART1_UART_Init+0x94>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002980:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <MX_USART1_UART_Init+0x94>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <MX_USART1_UART_Init+0x94>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <MX_USART1_UART_Init+0x94>)
 800298e:	220c      	movs	r2, #12
 8002990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_CTS;
 8002992:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <MX_USART1_UART_Init+0x94>)
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	0092      	lsls	r2, r2, #2
 8002998:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <MX_USART1_UART_Init+0x94>)
 800299c:	2200      	movs	r2, #0
 800299e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029a0:	4b16      	ldr	r3, [pc, #88]	; (80029fc <MX_USART1_UART_Init+0x94>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <MX_USART1_UART_Init+0x94>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <MX_USART1_UART_Init+0x94>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <MX_USART1_UART_Init+0x94>)
 80029b4:	0018      	movs	r0, r3
 80029b6:	f006 fce7 	bl	8009388 <HAL_UART_Init>
 80029ba:	1e03      	subs	r3, r0, #0
 80029bc:	d001      	beq.n	80029c2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80029be:	f000 f969 	bl	8002c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <MX_USART1_UART_Init+0x94>)
 80029c4:	2100      	movs	r1, #0
 80029c6:	0018      	movs	r0, r3
 80029c8:	f008 fdc2 	bl	800b550 <HAL_UARTEx_SetTxFifoThreshold>
 80029cc:	1e03      	subs	r3, r0, #0
 80029ce:	d001      	beq.n	80029d4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80029d0:	f000 f960 	bl	8002c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <MX_USART1_UART_Init+0x94>)
 80029d6:	2100      	movs	r1, #0
 80029d8:	0018      	movs	r0, r3
 80029da:	f008 fdf9 	bl	800b5d0 <HAL_UARTEx_SetRxFifoThreshold>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80029e2:	f000 f957 	bl	8002c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <MX_USART1_UART_Init+0x94>)
 80029e8:	0018      	movs	r0, r3
 80029ea:	f008 fd77 	bl	800b4dc <HAL_UARTEx_DisableFifoMode>
 80029ee:	1e03      	subs	r3, r0, #0
 80029f0:	d001      	beq.n	80029f6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80029f2:	f000 f94f 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	2000040c 	.word	0x2000040c
 8002a00:	40013800 	.word	0x40013800

08002a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a08:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a0a:	4a24      	ldr	r2, [pc, #144]	; (8002a9c <MX_USART2_UART_Init+0x98>)
 8002a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a10:	2296      	movs	r2, #150	; 0x96
 8002a12:	0212      	lsls	r2, r2, #8
 8002a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a22:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a34:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f006 fc9a 	bl	8009388 <HAL_UART_Init>
 8002a54:	1e03      	subs	r3, r0, #0
 8002a56:	d001      	beq.n	8002a5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a58:	f000 f91c 	bl	8002c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a5e:	2100      	movs	r1, #0
 8002a60:	0018      	movs	r0, r3
 8002a62:	f008 fd75 	bl	800b550 <HAL_UARTEx_SetTxFifoThreshold>
 8002a66:	1e03      	subs	r3, r0, #0
 8002a68:	d001      	beq.n	8002a6e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a6a:	f000 f913 	bl	8002c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a70:	2100      	movs	r1, #0
 8002a72:	0018      	movs	r0, r3
 8002a74:	f008 fdac 	bl	800b5d0 <HAL_UARTEx_SetRxFifoThreshold>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a7c:	f000 f90a 	bl	8002c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <MX_USART2_UART_Init+0x94>)
 8002a82:	0018      	movs	r0, r3
 8002a84:	f008 fd2a 	bl	800b4dc <HAL_UARTEx_DisableFifoMode>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a8c:	f000 f902 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	200004e8 	.word	0x200004e8
 8002a9c:	40004400 	.word	0x40004400

08002aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <MX_DMA_Init+0x48>)
 8002aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <MX_DMA_Init+0x48>)
 8002aac:	2101      	movs	r1, #1
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <MX_DMA_Init+0x48>)
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4013      	ands	r3, r2
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	2009      	movs	r0, #9
 8002ac4:	f001 ff06 	bl	80048d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ac8:	2009      	movs	r0, #9
 8002aca:	f001 ff18 	bl	80048fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f001 fefe 	bl	80048d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002ad8:	200a      	movs	r0, #10
 8002ada:	f001 ff10 	bl	80048fe <HAL_NVIC_EnableIRQ>

}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b002      	add	sp, #8
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	40021000 	.word	0x40021000

08002aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b08b      	sub	sp, #44	; 0x2c
 8002af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af2:	2414      	movs	r4, #20
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	0018      	movs	r0, r3
 8002af8:	2314      	movs	r3, #20
 8002afa:	001a      	movs	r2, r3
 8002afc:	2100      	movs	r1, #0
 8002afe:	f008 fe44 	bl	800b78a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b02:	4b5e      	ldr	r3, [pc, #376]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b06:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b08:	2104      	movs	r1, #4
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b0e:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	2204      	movs	r2, #4
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b1a:	4b58      	ldr	r3, [pc, #352]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b1e:	4b57      	ldr	r3, [pc, #348]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b20:	2120      	movs	r1, #32
 8002b22:	430a      	orrs	r2, r1
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34
 8002b26:	4b55      	ldr	r3, [pc, #340]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	4b52      	ldr	r3, [pc, #328]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b36:	4b51      	ldr	r3, [pc, #324]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b3e:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4a:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b4e:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b50:	2102      	movs	r1, #2
 8002b52:	430a      	orrs	r2, r1
 8002b54:	635a      	str	r2, [r3, #52]	; 0x34
 8002b56:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b62:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b66:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b68:	2108      	movs	r1, #8
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b6e:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <MX_GPIO_Init+0x190>)
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	2208      	movs	r2, #8
 8002b74:	4013      	ands	r3, r2
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HBRIDGE_BWD_Pin|LIMIT_SWITCH_0_Pin, GPIO_PIN_RESET);
 8002b7a:	23c0      	movs	r3, #192	; 0xc0
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	4840      	ldr	r0, [pc, #256]	; (8002c80 <MX_GPIO_Init+0x194>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	0019      	movs	r1, r3
 8002b84:	f002 fbd8 	bl	8005338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, GPIO_PIN_RESET);
 8002b88:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <MX_GPIO_Init+0x198>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f002 fbd2 	bl	8005338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIMIT_SWITCH_2_GPIO_Port, LIMIT_SWITCH_2_Pin, GPIO_PIN_RESET);
 8002b94:	23a0      	movs	r3, #160	; 0xa0
 8002b96:	05db      	lsls	r3, r3, #23
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f002 fbcb 	bl	8005338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WHITE_LED_Pin|UV_BULB_Pin|RAMAN_LASER_Pin|NICHROME_WIRE_0_Pin
 8002ba2:	4939      	ldr	r1, [pc, #228]	; (8002c88 <MX_GPIO_Init+0x19c>)
 8002ba4:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <MX_GPIO_Init+0x1a0>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f002 fbc5 	bl	8005338 <HAL_GPIO_WritePin>
                          |AUTON_LED_1_AND_LASER_Pin|AUTON_LED_0_Pin|SERVO_PWM_2_Pin|AUTON_LED_2_AND_UV_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NICHROME_WIRE_1_Pin|NICHROME_WIRE_2_Pin, GPIO_PIN_RESET);
 8002bae:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <MX_GPIO_Init+0x1a4>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	210a      	movs	r1, #10
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f002 fbbf 	bl	8005338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HBRIDGE_BWD_Pin LIMIT_SWITCH_0_Pin */
  GPIO_InitStruct.Pin = HBRIDGE_BWD_Pin|LIMIT_SWITCH_0_Pin;
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	22c0      	movs	r2, #192	; 0xc0
 8002bbe:	0212      	lsls	r2, r2, #8
 8002bc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bce:	193b      	adds	r3, r7, r4
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd4:	193b      	adds	r3, r7, r4
 8002bd6:	4a2a      	ldr	r2, [pc, #168]	; (8002c80 <MX_GPIO_Init+0x194>)
 8002bd8:	0019      	movs	r1, r3
 8002bda:	0010      	movs	r0, r2
 8002bdc:	f002 fa40 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_SWITCH_1_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin;
 8002be0:	193b      	adds	r3, r7, r4
 8002be2:	2202      	movs	r2, #2
 8002be4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be6:	193b      	adds	r3, r7, r4
 8002be8:	2201      	movs	r2, #1
 8002bea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	193b      	adds	r3, r7, r4
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf2:	193b      	adds	r3, r7, r4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIMIT_SWITCH_1_GPIO_Port, &GPIO_InitStruct);
 8002bf8:	193b      	adds	r3, r7, r4
 8002bfa:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <MX_GPIO_Init+0x198>)
 8002bfc:	0019      	movs	r1, r3
 8002bfe:	0010      	movs	r0, r2
 8002c00:	f002 fa2e 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_2_Pin;
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	193b      	adds	r3, r7, r4
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	193b      	adds	r3, r7, r4
 8002c18:	2200      	movs	r2, #0
 8002c1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIMIT_SWITCH_2_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	193a      	adds	r2, r7, r4
 8002c1e:	23a0      	movs	r3, #160	; 0xa0
 8002c20:	05db      	lsls	r3, r3, #23
 8002c22:	0011      	movs	r1, r2
 8002c24:	0018      	movs	r0, r3
 8002c26:	f002 fa1b 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pins : WHITE_LED_Pin UV_BULB_Pin RAMAN_LASER_Pin NICHROME_WIRE_0_Pin
                           AUTON_LED_1_AND_LASER_Pin AUTON_LED_0_Pin SERVO_PWM_2_Pin AUTON_LED_2_AND_UV_LED_Pin */
  GPIO_InitStruct.Pin = WHITE_LED_Pin|UV_BULB_Pin|RAMAN_LASER_Pin|NICHROME_WIRE_0_Pin
 8002c2a:	193b      	adds	r3, r7, r4
 8002c2c:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <MX_GPIO_Init+0x19c>)
 8002c2e:	601a      	str	r2, [r3, #0]
                          |AUTON_LED_1_AND_LASER_Pin|AUTON_LED_0_Pin|SERVO_PWM_2_Pin|AUTON_LED_2_AND_UV_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c30:	193b      	adds	r3, r7, r4
 8002c32:	2201      	movs	r2, #1
 8002c34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	193b      	adds	r3, r7, r4
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	193b      	adds	r3, r7, r4
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <MX_GPIO_Init+0x1a0>)
 8002c46:	0019      	movs	r1, r3
 8002c48:	0010      	movs	r0, r2
 8002c4a:	f002 fa09 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pins : NICHROME_WIRE_1_Pin NICHROME_WIRE_2_Pin */
  GPIO_InitStruct.Pin = NICHROME_WIRE_1_Pin|NICHROME_WIRE_2_Pin;
 8002c4e:	0021      	movs	r1, r4
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	220a      	movs	r2, #10
 8002c54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2201      	movs	r2, #1
 8002c5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	2200      	movs	r2, #0
 8002c66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <MX_GPIO_Init+0x1a4>)
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	0010      	movs	r0, r2
 8002c70:	f002 f9f6 	bl	8005060 <HAL_GPIO_Init>

}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b00b      	add	sp, #44	; 0x2c
 8002c7a:	bd90      	pop	{r4, r7, pc}
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	50000800 	.word	0x50000800
 8002c84:	50001400 	.word	0x50001400
 8002c88:	00003e70 	.word	0x00003e70
 8002c8c:	50000400 	.word	0x50000400
 8002c90:	50000c00 	.word	0x50000c00

08002c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c98:	b672      	cpsid	i
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <Error_Handler+0x8>
	...

08002ca0 <main_loop>:
extern SMBus *i2cBus;
extern Device *triad[3];

#define JETSON_UART &huart2

int main_loop(){
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af02      	add	r7, sp, #8
	// Read and send all thermistor data over Jetson UART
	send_thermistor_data(thermistors, JETSON_UART);
#endif

	//Disable interrupts
	    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002ca6:	201b      	movs	r0, #27
 8002ca8:	f001 fe39 	bl	800491e <HAL_NVIC_DisableIRQ>
	   	uint8_t message[20];
	   	for(int i = 0; i< 20; ++i){
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	e007      	b.n	8002cc2 <main_loop+0x22>
	   		message[i] = 0;
 8002cb2:	003a      	movs	r2, r7
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	18d3      	adds	r3, r2, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
	   	for(int i = 0; i< 20; ++i){
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2b13      	cmp	r3, #19
 8002cc6:	ddf4      	ble.n	8002cb2 <main_loop+0x12>
	   	}
	   	if(cmd_received == 1){
 8002cc8:	4b4d      	ldr	r3, [pc, #308]	; (8002e00 <main_loop+0x160>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10a      	bne.n	8002ce6 <main_loop+0x46>
	   		cmd_received = 0;
 8002cd0:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <main_loop+0x160>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
	   		memcpy(message,cmd_data,20);
 8002cd6:	003a      	movs	r2, r7
 8002cd8:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <main_loop+0x164>)
 8002cda:	0010      	movs	r0, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	2314      	movs	r3, #20
 8002ce0:	001a      	movs	r2, r3
 8002ce2:	f008 fd49 	bl	800b778 <memcpy>
	   	}
	   	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ce6:	201b      	movs	r0, #27
 8002ce8:	f001 fe09 	bl	80048fe <HAL_NVIC_EnableIRQ>

#ifdef TRIAD_ENABLE
	// strcpy((char*)buf, "Hello!\r\n");
	// HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	// HAL_Delay(500);
	Channel *channel = new_channel(0, 0);
 8002cec:	2100      	movs	r1, #0
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f000 ff60 	bl	8003bb4 <new_channel>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	617b      	str	r3, [r7, #20]

	// TODO: Don't hardcode the 0 here
	channel_select(mux, mux->channel_list[0]);
 8002cf8:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <main_loop+0x168>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b42      	ldr	r3, [pc, #264]	; (8002e08 <main_loop+0x168>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	0019      	movs	r1, r3
 8002d04:	0010      	movs	r0, r2
 8002d06:	f000 f927 	bl	8002f58 <channel_select>

	for (uint8_t i = 0; i < 3; ++i) {
 8002d0a:	231b      	movs	r3, #27
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e065      	b.n	8002de0 <main_loop+0x140>
	  virtual_write(DEV_SEL, triad[i]->dev_register);
 8002d14:	231b      	movs	r3, #27
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <main_loop+0x16c>)
 8002d1c:	0092      	lsls	r2, r2, #2
 8002d1e:	58d3      	ldr	r3, [r2, r3]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	0019      	movs	r1, r3
 8002d24:	204f      	movs	r0, #79	; 0x4f
 8002d26:	f000 fef7 	bl	8003b18 <virtual_write>
	  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8002d2a:	231a      	movs	r3, #26
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	e04a      	b.n	8002dca <main_loop+0x12a>
		  channel = triad[i]->channels[j];
 8002d34:	251b      	movs	r5, #27
 8002d36:	197b      	adds	r3, r7, r5
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	4b34      	ldr	r3, [pc, #208]	; (8002e0c <main_loop+0x16c>)
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	58d2      	ldr	r2, [r2, r3]
 8002d40:	241a      	movs	r4, #26
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	18d3      	adds	r3, r2, r3
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	617b      	str	r3, [r7, #20]
		  channel->color_data = get_decimal(channel->lsb_register, channel->msb_register);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	0019      	movs	r1, r3
 8002d5a:	0010      	movs	r0, r2
 8002d5c:	f000 fe0b 	bl	8003976 <get_decimal>
 8002d60:	0003      	movs	r3, r0
 8002d62:	001a      	movs	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	805a      	strh	r2, [r3, #2]

		  //complicated way to print "channel {x} : {data}"
		  sprintf((char*)buf_triad , "channel %u : %f \r\n", (unsigned int)((i*CHANNELS) + j), (float)channel->color_data);
 8002d68:	197b      	adds	r3, r7, r5
 8002d6a:	781a      	ldrb	r2, [r3, #0]
 8002d6c:	0013      	movs	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	189b      	adds	r3, r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	001a      	movs	r2, r3
 8002d76:	0025      	movs	r5, r4
 8002d78:	193b      	adds	r3, r7, r4
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	18d3      	adds	r3, r2, r3
 8002d7e:	001c      	movs	r4, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	885b      	ldrh	r3, [r3, #2]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7fd fc79 	bl	800067c <__aeabi_ui2f>
 8002d8a:	1c03      	adds	r3, r0, #0
 8002d8c:	1c18      	adds	r0, r3, #0
 8002d8e:	f7ff fac9 	bl	8002324 <__aeabi_f2d>
 8002d92:	0002      	movs	r2, r0
 8002d94:	000b      	movs	r3, r1
 8002d96:	491e      	ldr	r1, [pc, #120]	; (8002e10 <main_loop+0x170>)
 8002d98:	481e      	ldr	r0, [pc, #120]	; (8002e14 <main_loop+0x174>)
 8002d9a:	9200      	str	r2, [sp, #0]
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	0022      	movs	r2, r4
 8002da0:	f009 fa30 	bl	800c204 <siprintf>

		  HAL_UART_Transmit_IT(&huart2, buf_triad, strlen((char*)buf_triad));
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <main_loop+0x174>)
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7fd f9ac 	bl	8000104 <strlen>
 8002dac:	0003      	movs	r3, r0
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	4918      	ldr	r1, [pc, #96]	; (8002e14 <main_loop+0x174>)
 8002db2:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <main_loop+0x178>)
 8002db4:	0018      	movs	r0, r3
 8002db6:	f006 fbe9 	bl	800958c <HAL_UART_Transmit_IT>
		  HAL_Delay(10);
 8002dba:	200a      	movs	r0, #10
 8002dbc:	f000 ffc8 	bl	8003d50 <HAL_Delay>
	  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8002dc0:	197b      	adds	r3, r7, r5
 8002dc2:	197a      	adds	r2, r7, r5
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	3201      	adds	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	231a      	movs	r3, #26
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d9af      	bls.n	8002d34 <main_loop+0x94>
	for (uint8_t i = 0; i < 3; ++i) {
 8002dd4:	221b      	movs	r2, #27
 8002dd6:	18bb      	adds	r3, r7, r2
 8002dd8:	18ba      	adds	r2, r7, r2
 8002dda:	7812      	ldrb	r2, [r2, #0]
 8002ddc:	3201      	adds	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	231b      	movs	r3, #27
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d994      	bls.n	8002d14 <main_loop+0x74>
	  }
	}
	HAL_Delay(1000);
 8002dea:	23fa      	movs	r3, #250	; 0xfa
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 ffae 	bl	8003d50 <HAL_Delay>
#endif

	return 0;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b008      	add	sp, #32
 8002dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	20000218 	.word	0x20000218
 8002e04:	200003f8 	.word	0x200003f8
 8002e08:	200005a8 	.word	0x200005a8
 8002e0c:	200005cc 	.word	0x200005cc
 8002e10:	0800e628 	.word	0x0800e628
 8002e14:	200005ac 	.word	0x200005ac
 8002e18:	200004e8 	.word	0x200004e8

08002e1c <main_preloop>:
#include "main.h"
#include "main_loop.h"

#define JETSON_UART &huart2

int main_preloop(){
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 8002e20:	4926      	ldr	r1, [pc, #152]	; (8002ebc <main_preloop+0xa0>)
 8002e22:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <main_preloop+0xa4>)
 8002e24:	2214      	movs	r2, #20
 8002e26:	0018      	movs	r0, r3
 8002e28:	f006 fc6c 	bl	8009704 <HAL_UART_Receive_DMA>

  mosfetcopy = (char *)malloc(21);
#endif

#ifdef MUX_ENABLE
  	i2cBus = new_smbus(&hi2c2, &huart2);
 8002e2c:	4a24      	ldr	r2, [pc, #144]	; (8002ec0 <main_preloop+0xa4>)
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <main_preloop+0xa8>)
 8002e30:	0011      	movs	r1, r2
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 f8a1 	bl	8002f7a <new_smbus>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <main_preloop+0xac>)
 8002e3c:	601a      	str	r2, [r3, #0]
  	disable_DMA(i2cBus);
 8002e3e:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <main_preloop+0xac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 f8b9 	bl	8002fba <disable_DMA>
  	mux = new_mux(i2cBus);
 8002e48:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <main_preloop+0xac>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 f841 	bl	8002ed4 <new_mux>
 8002e52:	0002      	movs	r2, r0
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <main_preloop+0xb0>)
 8002e56:	601a      	str	r2, [r3, #0]

//	add_channel(mux, SPECTRAL_DEVICES);
//	channel_select(mux, mux->channel_list[SPECTRAL_DEVICES]);

	// TODO: Don't harcode 0 in here
	add_channel(mux, 0);
 8002e58:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <main_preloop+0xb0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 f85c 	bl	8002f1c <add_channel>
	channel_select(mux, mux->channel_list[0]);
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <main_preloop+0xb0>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <main_preloop+0xb0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	0019      	movs	r1, r3
 8002e70:	0010      	movs	r0, r2
 8002e72:	f000 f871 	bl	8002f58 <channel_select>


	triad[0] = new_device(0x00);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f000 fda0 	bl	80039bc <new_device>
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <main_preloop+0xb4>)
 8002e80:	601a      	str	r2, [r3, #0]
	triad[1] = new_device(0x01);
 8002e82:	2001      	movs	r0, #1
 8002e84:	f000 fd9a 	bl	80039bc <new_device>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <main_preloop+0xb4>)
 8002e8c:	605a      	str	r2, [r3, #4]
	triad[2] = new_device(0x02);
 8002e8e:	2002      	movs	r0, #2
 8002e90:	f000 fd94 	bl	80039bc <new_device>
 8002e94:	0002      	movs	r2, r0
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <main_preloop+0xb4>)
 8002e98:	609a      	str	r2, [r3, #8]

	virtual_write(0x04, 0x28);
 8002e9a:	2128      	movs	r1, #40	; 0x28
 8002e9c:	2004      	movs	r0, #4
 8002e9e:	f000 fe3b 	bl	8003b18 <virtual_write>
	virtual_write(0x04, 0x28);
 8002ea2:	2128      	movs	r1, #40	; 0x28
 8002ea4:	2004      	movs	r0, #4
 8002ea6:	f000 fe37 	bl	8003b18 <virtual_write>
	virtual_write(0x05, 0xFF);
 8002eaa:	21ff      	movs	r1, #255	; 0xff
 8002eac:	2005      	movs	r0, #5
 8002eae:	f000 fe33 	bl	8003b18 <virtual_write>

#endif

	return 0;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	200002d4 	.word	0x200002d4
 8002ec0:	200004e8 	.word	0x200004e8
 8002ec4:	20000288 	.word	0x20000288
 8002ec8:	200005a0 	.word	0x200005a0
 8002ecc:	200005a8 	.word	0x200005a8
 8002ed0:	200005cc 	.word	0x200005cc

08002ed4 <new_mux>:
#include "mux.h"
#include "smbus.h"

int channel_map[8] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };

Mux *new_mux(SMBus *i2cBus) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
    Mux *mux = malloc(sizeof(Mux));
 8002edc:	2028      	movs	r0, #40	; 0x28
 8002ede:	f008 fc41 	bl	800b764 <malloc>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	60bb      	str	r3, [r7, #8]
    mux->i2cBus = i2cBus;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; ++i) {
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e009      	b.n	8002f06 <new_mux+0x32>
        mux->channel_list[i] = 0x00;
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	18d3      	adds	r3, r2, r3
 8002efa:	3304      	adds	r3, #4
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; ++i) {
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b07      	cmp	r3, #7
 8002f0a:	ddf2      	ble.n	8002ef2 <new_mux+0x1e>
    }
    mux->channels_active = 0;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

    return mux;
 8002f12:	68bb      	ldr	r3, [r7, #8]
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b004      	add	sp, #16
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <add_channel>:

void add_channel(Mux *mux, int channel) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
    if (channel > 7) {
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b07      	cmp	r3, #7
 8002f2a:	dc0f      	bgt.n	8002f4c <add_channel+0x30>
        return;
    }
    mux->channel_list[channel] = channel_map[channel];
 8002f2c:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <add_channel+0x38>)
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	0092      	lsls	r2, r2, #2
 8002f32:	58d2      	ldr	r2, [r2, r3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	18cb      	adds	r3, r1, r3
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	601a      	str	r2, [r3, #0]
    mux->channels_active += 1;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24
 8002f4a:	e000      	b.n	8002f4e <add_channel+0x32>
        return;
 8002f4c:	46c0      	nop			; (mov r8, r8)
}
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000000 	.word	0x20000000

08002f58 <channel_select>:

void channel_select(Mux *mux, int channel){
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
    write_byte_data(mux->i2cBus, I2C_MUX_ADDRESS, MUX_CMD, channel);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	22cc      	movs	r2, #204	; 0xcc
 8002f6c:	2170      	movs	r1, #112	; 0x70
 8002f6e:	f000 f8aa 	bl	80030c6 <write_byte_data>
}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b002      	add	sp, #8
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <new_smbus>:
#include "smbus.h"


SMBus *new_smbus(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
    SMBus *smbus = malloc(sizeof(SMBus));
 8002f84:	2028      	movs	r0, #40	; 0x28
 8002f86:	f008 fbed 	bl	800b764 <malloc>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	60fb      	str	r3, [r7, #12]
    smbus->i2c = hi2c;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	601a      	str	r2, [r3, #0]
    smbus->uart = huart;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	605a      	str	r2, [r3, #4]
    smbus->DMA = TRUE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2227      	movs	r2, #39	; 0x27
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	5499      	strb	r1, [r3, r2]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3309      	adds	r3, #9
 8002fa6:	221e      	movs	r2, #30
 8002fa8:	2100      	movs	r1, #0
 8002faa:	0018      	movs	r0, r3
 8002fac:	f008 fbed 	bl	800b78a <memset>

    return smbus;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b004      	add	sp, #16
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <disable_DMA>:

void disable_DMA(SMBus *smbus) {
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
    smbus->DMA = FALSE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2227      	movs	r2, #39	; 0x27
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]
}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <read_byte_data>:
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
    }
    _check_error(smbus);
}

long read_byte_data(SMBus *smbus, uint8_t addr, char cmd) {
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af02      	add	r7, sp, #8
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	0008      	movs	r0, r1
 8002fdc:	0011      	movs	r1, r2
 8002fde:	1cfb      	adds	r3, r7, #3
 8002fe0:	1c02      	adds	r2, r0, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	1cbb      	adds	r3, r7, #2
 8002fe6:	1c0a      	adds	r2, r1, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
    //transmits the address to read from
    smbus->buf[0] = cmd;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	1cba      	adds	r2, r7, #2
 8002fee:	7812      	ldrb	r2, [r2, #0]
 8002ff0:	725a      	strb	r2, [r3, #9]
    if (!smbus->DMA) {
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2227      	movs	r2, #39	; 0x27
 8002ff6:	5c9b      	ldrb	r3, [r3, r2]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d114      	bne.n	8003026 <read_byte_data+0x54>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, 1000);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	1cfb      	adds	r3, r7, #3
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	18db      	adds	r3, r3, r3
 8003008:	b299      	uxth	r1, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3309      	adds	r3, #9
 800300e:	001a      	movs	r2, r3
 8003010:	23fa      	movs	r3, #250	; 0xfa
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	2301      	movs	r3, #1
 8003018:	f002 fa42 	bl	80054a0 <HAL_I2C_Master_Transmit>
 800301c:	0003      	movs	r3, r0
 800301e:	001a      	movs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	721a      	strb	r2, [r3, #8]
 8003024:	e010      	b.n	8003048 <read_byte_data+0x76>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	1cfb      	adds	r3, r7, #3
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	18db      	adds	r3, r3, r3
 8003032:	b299      	uxth	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3309      	adds	r3, #9
 8003038:	001a      	movs	r2, r3
 800303a:	2301      	movs	r3, #1
 800303c:	f002 fc40 	bl	80058c0 <HAL_I2C_Master_Transmit_DMA>
 8003040:	0003      	movs	r3, r0
 8003042:	001a      	movs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0018      	movs	r0, r3
 800304c:	f000 f886 	bl	800315c <_check_error>
    //reads from address sent above
    if (!smbus->DMA) {
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2227      	movs	r2, #39	; 0x27
 8003054:	5c9b      	ldrb	r3, [r3, r2]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d117      	bne.n	800308a <read_byte_data+0xb8>
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 1, 1000);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	1cfb      	adds	r3, r7, #3
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	b21b      	sxth	r3, r3
 8003066:	2201      	movs	r2, #1
 8003068:	4313      	orrs	r3, r2
 800306a:	b21b      	sxth	r3, r3
 800306c:	b299      	uxth	r1, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3309      	adds	r3, #9
 8003072:	001a      	movs	r2, r3
 8003074:	23fa      	movs	r3, #250	; 0xfa
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	2301      	movs	r3, #1
 800307c:	f002 fb18 	bl	80056b0 <HAL_I2C_Master_Receive>
 8003080:	0003      	movs	r3, r0
 8003082:	001a      	movs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	721a      	strb	r2, [r3, #8]
 8003088:	e013      	b.n	80030b2 <read_byte_data+0xe0>
    }
    else {
        smbus->ret = HAL_I2C_Master_Receive_DMA(smbus->i2c, (addr << 1) | 1, smbus->buf, 1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	1cfb      	adds	r3, r7, #3
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	b21b      	sxth	r3, r3
 8003096:	2201      	movs	r2, #1
 8003098:	4313      	orrs	r3, r2
 800309a:	b21b      	sxth	r3, r3
 800309c:	b299      	uxth	r1, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3309      	adds	r3, #9
 80030a2:	001a      	movs	r2, r3
 80030a4:	2301      	movs	r3, #1
 80030a6:	f002 fd11 	bl	8005acc <HAL_I2C_Master_Receive_DMA>
 80030aa:	0003      	movs	r3, r0
 80030ac:	001a      	movs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f000 f851 	bl	800315c <_check_error>
    return smbus->buf[0];
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7a5b      	ldrb	r3, [r3, #9]
}
 80030be:	0018      	movs	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b002      	add	sp, #8
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <write_byte_data>:

void write_byte_data(SMBus *smbus, uint8_t addr, char cmd, uint8_t data) {
 80030c6:	b590      	push	{r4, r7, lr}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af02      	add	r7, sp, #8
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	000c      	movs	r4, r1
 80030d0:	0010      	movs	r0, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	1cfb      	adds	r3, r7, #3
 80030d6:	1c22      	adds	r2, r4, #0
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	1cbb      	adds	r3, r7, #2
 80030dc:	1c02      	adds	r2, r0, #0
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	1c7b      	adds	r3, r7, #1
 80030e2:	1c0a      	adds	r2, r1, #0
 80030e4:	701a      	strb	r2, [r3, #0]
    smbus->buf[0] = cmd;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	1cba      	adds	r2, r7, #2
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	725a      	strb	r2, [r3, #9]
    smbus->buf[1] = data;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	1c7a      	adds	r2, r7, #1
 80030f2:	7812      	ldrb	r2, [r2, #0]
 80030f4:	729a      	strb	r2, [r3, #10]

    //SMBUS docs first byte is cmd to write, second is data
    if (!smbus->DMA) {
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2227      	movs	r2, #39	; 0x27
 80030fa:	5c9b      	ldrb	r3, [r3, r2]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d114      	bne.n	800312a <write_byte_data+0x64>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 2, 1000);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	1cfb      	adds	r3, r7, #3
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	18db      	adds	r3, r3, r3
 800310c:	b299      	uxth	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3309      	adds	r3, #9
 8003112:	001a      	movs	r2, r3
 8003114:	23fa      	movs	r3, #250	; 0xfa
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	2302      	movs	r3, #2
 800311c:	f002 f9c0 	bl	80054a0 <HAL_I2C_Master_Transmit>
 8003120:	0003      	movs	r3, r0
 8003122:	001a      	movs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	721a      	strb	r2, [r3, #8]
 8003128:	e010      	b.n	800314c <write_byte_data+0x86>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 2);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	1cfb      	adds	r3, r7, #3
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	18db      	adds	r3, r3, r3
 8003136:	b299      	uxth	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3309      	adds	r3, #9
 800313c:	001a      	movs	r2, r3
 800313e:	2302      	movs	r3, #2
 8003140:	f002 fbbe 	bl	80058c0 <HAL_I2C_Master_Transmit_DMA>
 8003144:	0003      	movs	r3, r0
 8003146:	001a      	movs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	0018      	movs	r0, r3
 8003150:	f000 f804 	bl	800315c <_check_error>
}
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	b003      	add	sp, #12
 800315a:	bd90      	pop	{r4, r7, pc}

0800315c <_check_error>:
    }
    
    _check_error(smbus);
}

int _check_error(SMBus *smbus) {
 800315c:	b5b0      	push	{r4, r5, r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
    if (smbus->ret != HAL_OK) {
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7a1b      	ldrb	r3, [r3, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d020      	beq.n	80031ae <_check_error+0x52>
        strcpy((char*)smbus->buf, "Err \r\n");
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3309      	adds	r3, #9
 8003170:	001a      	movs	r2, r3
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <_check_error+0x5c>)
 8003174:	0010      	movs	r0, r2
 8003176:	0019      	movs	r1, r3
 8003178:	2307      	movs	r3, #7
 800317a:	001a      	movs	r2, r3
 800317c:	f008 fafc 	bl	800b778 <memcpy>

        HAL_UART_Transmit(smbus->uart, smbus->buf, strlen((char*)smbus->buf), 1000);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685c      	ldr	r4, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3309      	adds	r3, #9
 8003188:	001d      	movs	r5, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3309      	adds	r3, #9
 800318e:	0018      	movs	r0, r3
 8003190:	f7fc ffb8 	bl	8000104 <strlen>
 8003194:	0003      	movs	r3, r0
 8003196:	b29a      	uxth	r2, r3
 8003198:	23fa      	movs	r3, #250	; 0xfa
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	0029      	movs	r1, r5
 800319e:	0020      	movs	r0, r4
 80031a0:	f006 f948 	bl	8009434 <HAL_UART_Transmit>
        HAL_Delay(10);
 80031a4:	200a      	movs	r0, #10
 80031a6:	f000 fdd3 	bl	8003d50 <HAL_Delay>
        return FALSE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <_check_error+0x54>
    }
    return TRUE;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bdb0      	pop	{r4, r5, r7, pc}
 80031b8:	0800e63c 	.word	0x0800e63c

080031bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <HAL_MspInit+0x4c>)
 80031c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <HAL_MspInit+0x4c>)
 80031c8:	2101      	movs	r1, #1
 80031ca:	430a      	orrs	r2, r1
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
 80031ce:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <HAL_MspInit+0x4c>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	2201      	movs	r2, #1
 80031d4:	4013      	ands	r3, r2
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_MspInit+0x4c>)
 80031dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_MspInit+0x4c>)
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	0549      	lsls	r1, r1, #21
 80031e4:	430a      	orrs	r2, r1
 80031e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80031e8:	4b07      	ldr	r3, [pc, #28]	; (8003208 <HAL_MspInit+0x4c>)
 80031ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	055b      	lsls	r3, r3, #21
 80031f0:	4013      	ands	r3, r2
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80031f6:	23c0      	movs	r3, #192	; 0xc0
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 fdcc 	bl	8003d98 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b002      	add	sp, #8
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000

0800320c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b08b      	sub	sp, #44	; 0x2c
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	2414      	movs	r4, #20
 8003216:	193b      	adds	r3, r7, r4
 8003218:	0018      	movs	r0, r3
 800321a:	2314      	movs	r3, #20
 800321c:	001a      	movs	r2, r3
 800321e:	2100      	movs	r1, #0
 8003220:	f008 fab3 	bl	800b78a <memset>
  if(hadc->Instance==ADC1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <HAL_ADC_MspInit+0x80>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d129      	bne.n	8003282 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800322e:	4b18      	ldr	r3, [pc, #96]	; (8003290 <HAL_ADC_MspInit+0x84>)
 8003230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003232:	4b17      	ldr	r3, [pc, #92]	; (8003290 <HAL_ADC_MspInit+0x84>)
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	0349      	lsls	r1, r1, #13
 8003238:	430a      	orrs	r2, r1
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <HAL_ADC_MspInit+0x84>)
 800323e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	035b      	lsls	r3, r3, #13
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_ADC_MspInit+0x84>)
 800324c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_ADC_MspInit+0x84>)
 8003250:	2101      	movs	r1, #1
 8003252:	430a      	orrs	r2, r1
 8003254:	635a      	str	r2, [r3, #52]	; 0x34
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <HAL_ADC_MspInit+0x84>)
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	2201      	movs	r2, #1
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = THERMISTOR_1_Pin|THERMISTOR_2_Pin|THERMISTOR_0_Pin;
 8003262:	193b      	adds	r3, r7, r4
 8003264:	2238      	movs	r2, #56	; 0x38
 8003266:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003268:	193b      	adds	r3, r7, r4
 800326a:	2203      	movs	r2, #3
 800326c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	193b      	adds	r3, r7, r4
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003274:	193a      	adds	r2, r7, r4
 8003276:	23a0      	movs	r3, #160	; 0xa0
 8003278:	05db      	lsls	r3, r3, #23
 800327a:	0011      	movs	r1, r2
 800327c:	0018      	movs	r0, r3
 800327e:	f001 feef 	bl	8005060 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	b00b      	add	sp, #44	; 0x2c
 8003288:	bd90      	pop	{r4, r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	40012400 	.word	0x40012400
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b08b      	sub	sp, #44	; 0x2c
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	2414      	movs	r4, #20
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	0018      	movs	r0, r3
 80032a2:	2314      	movs	r3, #20
 80032a4:	001a      	movs	r2, r3
 80032a6:	2100      	movs	r1, #0
 80032a8:	f008 fa6f 	bl	800b78a <memset>
  if(hi2c->Instance==I2C2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a30      	ldr	r2, [pc, #192]	; (8003374 <HAL_I2C_MspInit+0xe0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d15a      	bne.n	800336c <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b6:	4b30      	ldr	r3, [pc, #192]	; (8003378 <HAL_I2C_MspInit+0xe4>)
 80032b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ba:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <HAL_I2C_MspInit+0xe4>)
 80032bc:	2101      	movs	r1, #1
 80032be:	430a      	orrs	r2, r1
 80032c0:	635a      	str	r2, [r3, #52]	; 0x34
 80032c2:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <HAL_I2C_MspInit+0xe4>)
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c6:	2201      	movs	r2, #1
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ce:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_I2C_MspInit+0xe4>)
 80032d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d2:	4b29      	ldr	r3, [pc, #164]	; (8003378 <HAL_I2C_MspInit+0xe4>)
 80032d4:	2102      	movs	r1, #2
 80032d6:	430a      	orrs	r2, r1
 80032d8:	635a      	str	r2, [r3, #52]	; 0x34
 80032da:	4b27      	ldr	r3, [pc, #156]	; (8003378 <HAL_I2C_MspInit+0xe4>)
 80032dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032de:	2202      	movs	r2, #2
 80032e0:	4013      	ands	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA7     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MUX_SCL_Pin;
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032ec:	193b      	adds	r3, r7, r4
 80032ee:	2212      	movs	r2, #18
 80032f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	193b      	adds	r3, r7, r4
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f8:	193b      	adds	r3, r7, r4
 80032fa:	2200      	movs	r2, #0
 80032fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	2208      	movs	r2, #8
 8003302:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MUX_SCL_GPIO_Port, &GPIO_InitStruct);
 8003304:	193a      	adds	r2, r7, r4
 8003306:	23a0      	movs	r3, #160	; 0xa0
 8003308:	05db      	lsls	r3, r3, #23
 800330a:	0011      	movs	r1, r2
 800330c:	0018      	movs	r0, r3
 800330e:	f001 fea7 	bl	8005060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MUX_SDA_Pin;
 8003312:	0021      	movs	r1, r4
 8003314:	187b      	adds	r3, r7, r1
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	01d2      	lsls	r2, r2, #7
 800331a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800331c:	187b      	adds	r3, r7, r1
 800331e:	2212      	movs	r2, #18
 8003320:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	187b      	adds	r3, r7, r1
 800332a:	2200      	movs	r2, #0
 800332c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800332e:	187b      	adds	r3, r7, r1
 8003330:	2206      	movs	r2, #6
 8003332:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MUX_SDA_GPIO_Port, &GPIO_InitStruct);
 8003334:	187b      	adds	r3, r7, r1
 8003336:	4a11      	ldr	r2, [pc, #68]	; (800337c <HAL_I2C_MspInit+0xe8>)
 8003338:	0019      	movs	r1, r3
 800333a:	0010      	movs	r0, r2
 800333c:	f001 fe90 	bl	8005060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003340:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <HAL_I2C_MspInit+0xe4>)
 8003342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <HAL_I2C_MspInit+0xe4>)
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	03c9      	lsls	r1, r1, #15
 800334a:	430a      	orrs	r2, r1
 800334c:	63da      	str	r2, [r3, #60]	; 0x3c
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_I2C_MspInit+0xe4>)
 8003350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	03db      	lsls	r3, r3, #15
 8003356:	4013      	ands	r3, r2
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_3_IRQn, 0, 0);
 800335c:	2200      	movs	r2, #0
 800335e:	2100      	movs	r1, #0
 8003360:	2018      	movs	r0, #24
 8003362:	f001 fab7 	bl	80048d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_3_IRQn);
 8003366:	2018      	movs	r0, #24
 8003368:	f001 fac9 	bl	80048fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b00b      	add	sp, #44	; 0x2c
 8003372:	bd90      	pop	{r4, r7, pc}
 8003374:	40005800 	.word	0x40005800
 8003378:	40021000 	.word	0x40021000
 800337c:	50000400 	.word	0x50000400

08003380 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <HAL_TIM_PWM_MspInit+0x5c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10e      	bne.n	80033b0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003392:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_TIM_PWM_MspInit+0x60>)
 8003394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_TIM_PWM_MspInit+0x60>)
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	0109      	lsls	r1, r1, #4
 800339c:	430a      	orrs	r2, r1
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
 80033a0:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <HAL_TIM_PWM_MspInit+0x60>)
 80033a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	4013      	ands	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80033ae:	e010      	b.n	80033d2 <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM3)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0b      	ldr	r2, [pc, #44]	; (80033e4 <HAL_TIM_PWM_MspInit+0x64>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d10b      	bne.n	80033d2 <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_TIM_PWM_MspInit+0x60>)
 80033bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_TIM_PWM_MspInit+0x60>)
 80033c0:	2102      	movs	r1, #2
 80033c2:	430a      	orrs	r2, r1
 80033c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_TIM_PWM_MspInit+0x60>)
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	2202      	movs	r2, #2
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b004      	add	sp, #16
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40000400 	.word	0x40000400

080033e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b08d      	sub	sp, #52	; 0x34
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	241c      	movs	r4, #28
 80033f2:	193b      	adds	r3, r7, r4
 80033f4:	0018      	movs	r0, r3
 80033f6:	2314      	movs	r3, #20
 80033f8:	001a      	movs	r2, r3
 80033fa:	2100      	movs	r1, #0
 80033fc:	f008 f9c5 	bl	800b78a <memset>
  if(htim->Instance==TIM1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a4b      	ldr	r2, [pc, #300]	; (8003534 <HAL_TIM_MspPostInit+0x14c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d145      	bne.n	8003496 <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340a:	4b4b      	ldr	r3, [pc, #300]	; (8003538 <HAL_TIM_MspPostInit+0x150>)
 800340c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800340e:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <HAL_TIM_MspPostInit+0x150>)
 8003410:	2101      	movs	r1, #1
 8003412:	430a      	orrs	r2, r1
 8003414:	635a      	str	r2, [r3, #52]	; 0x34
 8003416:	4b48      	ldr	r3, [pc, #288]	; (8003538 <HAL_TIM_MspPostInit+0x150>)
 8003418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341a:	2201      	movs	r2, #1
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003422:	4b45      	ldr	r3, [pc, #276]	; (8003538 <HAL_TIM_MspPostInit+0x150>)
 8003424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003426:	4b44      	ldr	r3, [pc, #272]	; (8003538 <HAL_TIM_MspPostInit+0x150>)
 8003428:	2102      	movs	r1, #2
 800342a:	430a      	orrs	r2, r1
 800342c:	635a      	str	r2, [r3, #52]	; 0x34
 800342e:	4b42      	ldr	r3, [pc, #264]	; (8003538 <HAL_TIM_MspPostInit+0x150>)
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	2202      	movs	r2, #2
 8003434:	4013      	ands	r3, r2
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_0_Pin;
 800343a:	193b      	adds	r3, r7, r4
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	0052      	lsls	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	193b      	adds	r3, r7, r4
 8003444:	2202      	movs	r2, #2
 8003446:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	193b      	adds	r3, r7, r4
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344e:	193b      	adds	r3, r7, r4
 8003450:	2200      	movs	r2, #0
 8003452:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003454:	193b      	adds	r3, r7, r4
 8003456:	2202      	movs	r2, #2
 8003458:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_0_GPIO_Port, &GPIO_InitStruct);
 800345a:	193a      	adds	r2, r7, r4
 800345c:	23a0      	movs	r3, #160	; 0xa0
 800345e:	05db      	lsls	r3, r3, #23
 8003460:	0011      	movs	r1, r2
 8003462:	0018      	movs	r0, r3
 8003464:	f001 fdfc 	bl	8005060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8003468:	0021      	movs	r1, r4
 800346a:	187b      	adds	r3, r7, r1
 800346c:	2208      	movs	r2, #8
 800346e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	187b      	adds	r3, r7, r1
 8003472:	2202      	movs	r2, #2
 8003474:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	187b      	adds	r3, r7, r1
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347c:	187b      	adds	r3, r7, r1
 800347e:	2200      	movs	r2, #0
 8003480:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003482:	187b      	adds	r3, r7, r1
 8003484:	2201      	movs	r2, #1
 8003486:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8003488:	187b      	adds	r3, r7, r1
 800348a:	4a2c      	ldr	r2, [pc, #176]	; (800353c <HAL_TIM_MspPostInit+0x154>)
 800348c:	0019      	movs	r1, r3
 800348e:	0010      	movs	r0, r2
 8003490:	f001 fde6 	bl	8005060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003494:	e049      	b.n	800352a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM3)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a29      	ldr	r2, [pc, #164]	; (8003540 <HAL_TIM_MspPostInit+0x158>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d144      	bne.n	800352a <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a0:	4b25      	ldr	r3, [pc, #148]	; (8003538 <HAL_TIM_MspPostInit+0x150>)
 80034a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a4:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_TIM_MspPostInit+0x150>)
 80034a6:	2101      	movs	r1, #1
 80034a8:	430a      	orrs	r2, r1
 80034aa:	635a      	str	r2, [r3, #52]	; 0x34
 80034ac:	4b22      	ldr	r3, [pc, #136]	; (8003538 <HAL_TIM_MspPostInit+0x150>)
 80034ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b0:	2201      	movs	r2, #1
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b8:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <HAL_TIM_MspPostInit+0x150>)
 80034ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034bc:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_TIM_MspPostInit+0x150>)
 80034be:	2104      	movs	r1, #4
 80034c0:	430a      	orrs	r2, r1
 80034c2:	635a      	str	r2, [r3, #52]	; 0x34
 80034c4:	4b1c      	ldr	r3, [pc, #112]	; (8003538 <HAL_TIM_MspPostInit+0x150>)
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	2204      	movs	r2, #4
 80034ca:	4013      	ands	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HBRIDGE_PWM_Pin;
 80034d0:	241c      	movs	r4, #28
 80034d2:	193b      	adds	r3, r7, r4
 80034d4:	2240      	movs	r2, #64	; 0x40
 80034d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	193b      	adds	r3, r7, r4
 80034da:	2202      	movs	r2, #2
 80034dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	193b      	adds	r3, r7, r4
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	193b      	adds	r3, r7, r4
 80034e6:	2200      	movs	r2, #0
 80034e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80034ea:	193b      	adds	r3, r7, r4
 80034ec:	2201      	movs	r2, #1
 80034ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HBRIDGE_PWM_GPIO_Port, &GPIO_InitStruct);
 80034f0:	193a      	adds	r2, r7, r4
 80034f2:	23a0      	movs	r3, #160	; 0xa0
 80034f4:	05db      	lsls	r3, r3, #23
 80034f6:	0011      	movs	r1, r2
 80034f8:	0018      	movs	r0, r3
 80034fa:	f001 fdb1 	bl	8005060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HBRIDGE_FWD_Pin;
 80034fe:	0021      	movs	r1, r4
 8003500:	187b      	adds	r3, r7, r1
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	187b      	adds	r3, r7, r1
 8003508:	2202      	movs	r2, #2
 800350a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	187b      	adds	r3, r7, r1
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003512:	187b      	adds	r3, r7, r1
 8003514:	2200      	movs	r2, #0
 8003516:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003518:	187b      	adds	r3, r7, r1
 800351a:	2201      	movs	r2, #1
 800351c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HBRIDGE_FWD_GPIO_Port, &GPIO_InitStruct);
 800351e:	187b      	adds	r3, r7, r1
 8003520:	4a08      	ldr	r2, [pc, #32]	; (8003544 <HAL_TIM_MspPostInit+0x15c>)
 8003522:	0019      	movs	r1, r3
 8003524:	0010      	movs	r0, r2
 8003526:	f001 fd9b 	bl	8005060 <HAL_GPIO_Init>
}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	46bd      	mov	sp, r7
 800352e:	b00d      	add	sp, #52	; 0x34
 8003530:	bd90      	pop	{r4, r7, pc}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	40012c00 	.word	0x40012c00
 8003538:	40021000 	.word	0x40021000
 800353c:	50000400 	.word	0x50000400
 8003540:	40000400 	.word	0x40000400
 8003544:	50000800 	.word	0x50000800

08003548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b08d      	sub	sp, #52	; 0x34
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	241c      	movs	r4, #28
 8003552:	193b      	adds	r3, r7, r4
 8003554:	0018      	movs	r0, r3
 8003556:	2314      	movs	r3, #20
 8003558:	001a      	movs	r2, r3
 800355a:	2100      	movs	r1, #0
 800355c:	f008 f915 	bl	800b78a <memset>
  if(huart->Instance==USART1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a70      	ldr	r2, [pc, #448]	; (8003728 <HAL_UART_MspInit+0x1e0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d172      	bne.n	8003650 <HAL_UART_MspInit+0x108>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800356a:	4b70      	ldr	r3, [pc, #448]	; (800372c <HAL_UART_MspInit+0x1e4>)
 800356c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800356e:	4b6f      	ldr	r3, [pc, #444]	; (800372c <HAL_UART_MspInit+0x1e4>)
 8003570:	2180      	movs	r1, #128	; 0x80
 8003572:	01c9      	lsls	r1, r1, #7
 8003574:	430a      	orrs	r2, r1
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
 8003578:	4b6c      	ldr	r3, [pc, #432]	; (800372c <HAL_UART_MspInit+0x1e4>)
 800357a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	01db      	lsls	r3, r3, #7
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003586:	4b69      	ldr	r3, [pc, #420]	; (800372c <HAL_UART_MspInit+0x1e4>)
 8003588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358a:	4b68      	ldr	r3, [pc, #416]	; (800372c <HAL_UART_MspInit+0x1e4>)
 800358c:	2101      	movs	r1, #1
 800358e:	430a      	orrs	r2, r1
 8003590:	635a      	str	r2, [r3, #52]	; 0x34
 8003592:	4b66      	ldr	r3, [pc, #408]	; (800372c <HAL_UART_MspInit+0x1e4>)
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	2201      	movs	r2, #1
 8003598:	4013      	ands	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11 [PA9]     ------> USART1_CTS
    */
    GPIO_InitStruct.Pin = JETSON_UART_TX_Pin|JETSON_UART_RX_Pin;
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	22c0      	movs	r2, #192	; 0xc0
 80035a2:	00d2      	lsls	r2, r2, #3
 80035a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a6:	193b      	adds	r3, r7, r4
 80035a8:	2202      	movs	r2, #2
 80035aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	193b      	adds	r3, r7, r4
 80035ae:	2200      	movs	r2, #0
 80035b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	2202      	movs	r2, #2
 80035b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	2201      	movs	r2, #1
 80035bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035be:	193a      	adds	r2, r7, r4
 80035c0:	23a0      	movs	r3, #160	; 0xa0
 80035c2:	05db      	lsls	r3, r3, #23
 80035c4:	0011      	movs	r1, r2
 80035c6:	0018      	movs	r0, r3
 80035c8:	f001 fd4a 	bl	8005060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JETSON_UART_CTS_Pin;
 80035cc:	0021      	movs	r1, r4
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	187b      	adds	r3, r7, r1
 80035d8:	2202      	movs	r2, #2
 80035da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	187b      	adds	r3, r7, r1
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	187b      	adds	r3, r7, r1
 80035e4:	2200      	movs	r2, #0
 80035e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80035e8:	187b      	adds	r3, r7, r1
 80035ea:	2201      	movs	r2, #1
 80035ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(JETSON_UART_CTS_GPIO_Port, &GPIO_InitStruct);
 80035ee:	187a      	adds	r2, r7, r1
 80035f0:	23a0      	movs	r3, #160	; 0xa0
 80035f2:	05db      	lsls	r3, r3, #23
 80035f4:	0011      	movs	r1, r2
 80035f6:	0018      	movs	r0, r3
 80035f8:	f001 fd32 	bl	8005060 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80035fc:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <HAL_UART_MspInit+0x1e8>)
 80035fe:	4a4d      	ldr	r2, [pc, #308]	; (8003734 <HAL_UART_MspInit+0x1ec>)
 8003600:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003602:	4b4b      	ldr	r3, [pc, #300]	; (8003730 <HAL_UART_MspInit+0x1e8>)
 8003604:	2232      	movs	r2, #50	; 0x32
 8003606:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003608:	4b49      	ldr	r3, [pc, #292]	; (8003730 <HAL_UART_MspInit+0x1e8>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800360e:	4b48      	ldr	r3, [pc, #288]	; (8003730 <HAL_UART_MspInit+0x1e8>)
 8003610:	2200      	movs	r2, #0
 8003612:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003614:	4b46      	ldr	r3, [pc, #280]	; (8003730 <HAL_UART_MspInit+0x1e8>)
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800361a:	4b45      	ldr	r3, [pc, #276]	; (8003730 <HAL_UART_MspInit+0x1e8>)
 800361c:	2200      	movs	r2, #0
 800361e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003620:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_UART_MspInit+0x1e8>)
 8003622:	2200      	movs	r2, #0
 8003624:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003626:	4b42      	ldr	r3, [pc, #264]	; (8003730 <HAL_UART_MspInit+0x1e8>)
 8003628:	2200      	movs	r2, #0
 800362a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800362c:	4b40      	ldr	r3, [pc, #256]	; (8003730 <HAL_UART_MspInit+0x1e8>)
 800362e:	2200      	movs	r2, #0
 8003630:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003632:	4b3f      	ldr	r3, [pc, #252]	; (8003730 <HAL_UART_MspInit+0x1e8>)
 8003634:	0018      	movs	r0, r3
 8003636:	f001 f99f 	bl	8004978 <HAL_DMA_Init>
 800363a:	1e03      	subs	r3, r0, #0
 800363c:	d001      	beq.n	8003642 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800363e:	f7ff fb29 	bl	8002c94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a3a      	ldr	r2, [pc, #232]	; (8003730 <HAL_UART_MspInit+0x1e8>)
 8003646:	67da      	str	r2, [r3, #124]	; 0x7c
 8003648:	4b39      	ldr	r3, [pc, #228]	; (8003730 <HAL_UART_MspInit+0x1e8>)
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800364e:	e066      	b.n	800371e <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a38      	ldr	r2, [pc, #224]	; (8003738 <HAL_UART_MspInit+0x1f0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d161      	bne.n	800371e <HAL_UART_MspInit+0x1d6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800365a:	4b34      	ldr	r3, [pc, #208]	; (800372c <HAL_UART_MspInit+0x1e4>)
 800365c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800365e:	4b33      	ldr	r3, [pc, #204]	; (800372c <HAL_UART_MspInit+0x1e4>)
 8003660:	2180      	movs	r1, #128	; 0x80
 8003662:	0289      	lsls	r1, r1, #10
 8003664:	430a      	orrs	r2, r1
 8003666:	63da      	str	r2, [r3, #60]	; 0x3c
 8003668:	4b30      	ldr	r3, [pc, #192]	; (800372c <HAL_UART_MspInit+0x1e4>)
 800366a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	029b      	lsls	r3, r3, #10
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003676:	4b2d      	ldr	r3, [pc, #180]	; (800372c <HAL_UART_MspInit+0x1e4>)
 8003678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367a:	4b2c      	ldr	r3, [pc, #176]	; (800372c <HAL_UART_MspInit+0x1e4>)
 800367c:	2101      	movs	r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	635a      	str	r2, [r3, #52]	; 0x34
 8003682:	4b2a      	ldr	r3, [pc, #168]	; (800372c <HAL_UART_MspInit+0x1e4>)
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	2201      	movs	r2, #1
 8003688:	4013      	ands	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800368e:	211c      	movs	r1, #28
 8003690:	187b      	adds	r3, r7, r1
 8003692:	4a2a      	ldr	r2, [pc, #168]	; (800373c <HAL_UART_MspInit+0x1f4>)
 8003694:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003696:	187b      	adds	r3, r7, r1
 8003698:	2202      	movs	r2, #2
 800369a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369c:	187b      	adds	r3, r7, r1
 800369e:	2200      	movs	r2, #0
 80036a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a2:	187b      	adds	r3, r7, r1
 80036a4:	2200      	movs	r2, #0
 80036a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80036a8:	187b      	adds	r3, r7, r1
 80036aa:	2201      	movs	r2, #1
 80036ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ae:	187a      	adds	r2, r7, r1
 80036b0:	23a0      	movs	r3, #160	; 0xa0
 80036b2:	05db      	lsls	r3, r3, #23
 80036b4:	0011      	movs	r1, r2
 80036b6:	0018      	movs	r0, r3
 80036b8:	f001 fcd2 	bl	8005060 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80036bc:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_UART_MspInit+0x1f8>)
 80036be:	4a21      	ldr	r2, [pc, #132]	; (8003744 <HAL_UART_MspInit+0x1fc>)
 80036c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80036c2:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <HAL_UART_MspInit+0x1f8>)
 80036c4:	2234      	movs	r2, #52	; 0x34
 80036c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_UART_MspInit+0x1f8>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <HAL_UART_MspInit+0x1f8>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036d4:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <HAL_UART_MspInit+0x1f8>)
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036da:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_UART_MspInit+0x1f8>)
 80036dc:	2200      	movs	r2, #0
 80036de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036e0:	4b17      	ldr	r3, [pc, #92]	; (8003740 <HAL_UART_MspInit+0x1f8>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80036e6:	4b16      	ldr	r3, [pc, #88]	; (8003740 <HAL_UART_MspInit+0x1f8>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036ec:	4b14      	ldr	r3, [pc, #80]	; (8003740 <HAL_UART_MspInit+0x1f8>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036f2:	4b13      	ldr	r3, [pc, #76]	; (8003740 <HAL_UART_MspInit+0x1f8>)
 80036f4:	0018      	movs	r0, r3
 80036f6:	f001 f93f 	bl	8004978 <HAL_DMA_Init>
 80036fa:	1e03      	subs	r3, r0, #0
 80036fc:	d001      	beq.n	8003702 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 80036fe:	f7ff fac9 	bl	8002c94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a0e      	ldr	r2, [pc, #56]	; (8003740 <HAL_UART_MspInit+0x1f8>)
 8003706:	67da      	str	r2, [r3, #124]	; 0x7c
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <HAL_UART_MspInit+0x1f8>)
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2100      	movs	r1, #0
 8003712:	201c      	movs	r0, #28
 8003714:	f001 f8de 	bl	80048d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8003718:	201c      	movs	r0, #28
 800371a:	f001 f8f0 	bl	80048fe <HAL_NVIC_EnableIRQ>
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b00d      	add	sp, #52	; 0x34
 8003724:	bd90      	pop	{r4, r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	40013800 	.word	0x40013800
 800372c:	40021000 	.word	0x40021000
 8003730:	20000398 	.word	0x20000398
 8003734:	40020008 	.word	0x40020008
 8003738:	40004400 	.word	0x40004400
 800373c:	00008004 	.word	0x00008004
 8003740:	20000228 	.word	0x20000228
 8003744:	4002001c 	.word	0x4002001c

08003748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800374c:	e7fe      	b.n	800374c <NMI_Handler+0x4>

0800374e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003752:	e7fe      	b.n	8003752 <HardFault_Handler+0x4>

08003754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800376c:	f000 fad4 	bl	8003d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <DMA1_Channel1_IRQHandler+0x14>)
 800377e:	0018      	movs	r0, r3
 8003780:	f001 faf4 	bl	8004d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	20000398 	.word	0x20000398

08003790 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003796:	0018      	movs	r0, r3
 8003798:	f001 fae8 	bl	8004d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	20000228 	.word	0x20000228

080037a8 <I2C2_3_IRQHandler>:

/**
  * @brief This function handles I2C2, I2C3 Interrupt (combined with EXTI 24 and EXTI 22).
  */
void I2C2_3_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_3_IRQn 0 */

  /* USER CODE END I2C2_3_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <I2C2_3_IRQHandler+0x2c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	23e0      	movs	r3, #224	; 0xe0
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4013      	ands	r3, r2
 80037b8:	d004      	beq.n	80037c4 <I2C2_3_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <I2C2_3_IRQHandler+0x2c>)
 80037bc:	0018      	movs	r0, r3
 80037be:	f002 faa5 	bl	8005d0c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_3_IRQn 1 */

  /* USER CODE END I2C2_3_IRQn 1 */
}
 80037c2:	e003      	b.n	80037cc <I2C2_3_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <I2C2_3_IRQHandler+0x2c>)
 80037c6:	0018      	movs	r0, r3
 80037c8:	f002 fa86 	bl	8005cd8 <HAL_I2C_EV_IRQHandler>
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	20000288 	.word	0x20000288

080037d8 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <USART2_LPUART2_IRQHandler+0x14>)
 80037de:	0018      	movs	r0, r3
 80037e0:	f006 f92e 	bl	8009a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	200004e8 	.word	0x200004e8

080037f0 <_getpid>:
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	2301      	movs	r3, #1
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <_kill>:
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	f007 ff83 	bl	800b710 <__errno>
 800380a:	0003      	movs	r3, r0
 800380c:	2216      	movs	r2, #22
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	2301      	movs	r3, #1
 8003812:	425b      	negs	r3, r3
 8003814:	0018      	movs	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}

0800381c <_exit>:
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	2301      	movs	r3, #1
 8003826:	425a      	negs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	0011      	movs	r1, r2
 800382c:	0018      	movs	r0, r3
 800382e:	f7ff ffe5 	bl	80037fc <_kill>
 8003832:	e7fe      	b.n	8003832 <_exit+0x16>

08003834 <_read>:
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	e00a      	b.n	800385c <_read+0x28>
 8003846:	e000      	b.n	800384a <_read+0x16>
 8003848:	bf00      	nop
 800384a:	0001      	movs	r1, r0
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	60ba      	str	r2, [r7, #8]
 8003852:	b2ca      	uxtb	r2, r1
 8003854:	701a      	strb	r2, [r3, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	3301      	adds	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	429a      	cmp	r2, r3
 8003862:	dbf0      	blt.n	8003846 <_read+0x12>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b006      	add	sp, #24
 800386c:	bd80      	pop	{r7, pc}

0800386e <_write>:
 800386e:	b580      	push	{r7, lr}
 8003870:	b086      	sub	sp, #24
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e009      	b.n	8003894 <_write+0x26>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	60ba      	str	r2, [r7, #8]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	0018      	movs	r0, r3
 800388a:	e000      	b.n	800388e <_write+0x20>
 800388c:	bf00      	nop
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	3301      	adds	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	429a      	cmp	r2, r3
 800389a:	dbf1      	blt.n	8003880 <_write+0x12>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	0018      	movs	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b006      	add	sp, #24
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <_close>:
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	2301      	movs	r3, #1
 80038b0:	425b      	negs	r3, r3
 80038b2:	0018      	movs	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b002      	add	sp, #8
 80038b8:	bd80      	pop	{r7, pc}

080038ba <_fstat>:
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	0192      	lsls	r2, r2, #6
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	2300      	movs	r3, #0
 80038ce:	0018      	movs	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b002      	add	sp, #8
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <_isatty>:
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	2301      	movs	r3, #1
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b002      	add	sp, #8
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <_lseek>:
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	2300      	movs	r3, #0
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b004      	add	sp, #16
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <_sbrk>:
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	4a14      	ldr	r2, [pc, #80]	; (800395c <_sbrk+0x5c>)
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <_sbrk+0x60>)
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <_sbrk+0x64>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <_sbrk+0x22>
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <_sbrk+0x64>)
 800391e:	4a12      	ldr	r2, [pc, #72]	; (8003968 <_sbrk+0x68>)
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <_sbrk+0x64>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	18d3      	adds	r3, r2, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d207      	bcs.n	8003940 <_sbrk+0x40>
 8003930:	f007 feee 	bl	800b710 <__errno>
 8003934:	0003      	movs	r3, r0
 8003936:	220c      	movs	r2, #12
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	2301      	movs	r3, #1
 800393c:	425b      	negs	r3, r3
 800393e:	e009      	b.n	8003954 <_sbrk+0x54>
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <_sbrk+0x64>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <_sbrk+0x64>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	18d2      	adds	r2, r2, r3
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <_sbrk+0x64>)
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	0018      	movs	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	b006      	add	sp, #24
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20024000 	.word	0x20024000
 8003960:	00000400 	.word	0x00000400
 8003964:	2000021c 	.word	0x2000021c
 8003968:	200005f0 	.word	0x200005f0

0800396c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003970:	46c0      	nop			; (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <get_decimal>:

uint8_t buf_triad[30];
SMBus *i2cBus;
Device *triad[3];

uint16_t get_decimal(uint8_t virtual_reg_l, uint8_t virtual_reg_h) {
 8003976:	b590      	push	{r4, r7, lr}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	0002      	movs	r2, r0
 800397e:	1dfb      	adds	r3, r7, #7
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	1dbb      	adds	r3, r7, #6
 8003984:	1c0a      	adds	r2, r1, #0
 8003986:	701a      	strb	r2, [r3, #0]
	uint16_t high = virtual_read(virtual_reg_h) << 8;
 8003988:	1dbb      	adds	r3, r7, #6
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	0018      	movs	r0, r3
 800398e:	f000 f85d 	bl	8003a4c <virtual_read>
 8003992:	0003      	movs	r3, r0
 8003994:	b29a      	uxth	r2, r3
 8003996:	240e      	movs	r4, #14
 8003998:	193b      	adds	r3, r7, r4
 800399a:	0212      	lsls	r2, r2, #8
 800399c:	801a      	strh	r2, [r3, #0]
	return high | (virtual_read(virtual_reg_l) & 0xFF);
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	0018      	movs	r0, r3
 80039a4:	f000 f852 	bl	8003a4c <virtual_read>
 80039a8:	0003      	movs	r3, r0
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	193b      	adds	r3, r7, r4
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	b29b      	uxth	r3, r3
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b005      	add	sp, #20
 80039ba:	bd90      	pop	{r4, r7, pc}

080039bc <new_device>:

Device* new_device(uint8_t dev_register) {
 80039bc:	b5b0      	push	{r4, r5, r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	0002      	movs	r2, r0
 80039c4:	1dfb      	adds	r3, r7, #7
 80039c6:	701a      	strb	r2, [r3, #0]
	Device* dev = malloc(sizeof(Device));
 80039c8:	201c      	movs	r0, #28
 80039ca:	f007 fecb 	bl	800b764 <malloc>
 80039ce:	0003      	movs	r3, r0
 80039d0:	613b      	str	r3, [r7, #16]
	dev->dev_register = dev_register;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1dfa      	adds	r2, r7, #7
 80039d6:	7812      	ldrb	r2, [r2, #0]
 80039d8:	701a      	strb	r2, [r3, #0]

	uint8_t START_REG = 0x08; //RAW_VALUE_RGA_LOW;
 80039da:	230f      	movs	r3, #15
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	2208      	movs	r2, #8
 80039e0:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < CHANNELS; ++i) {
 80039e2:	2317      	movs	r3, #23
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	e024      	b.n	8003a36 <new_device+0x7a>
		dev->channels[i] = new_channel(START_REG + (2 * i), START_REG + (2 * i) + 1);
 80039ec:	2117      	movs	r1, #23
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	18db      	adds	r3, r3, r3
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	240f      	movs	r4, #15
 80039f8:	193b      	adds	r3, r7, r4
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	b2d8      	uxtb	r0, r3
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	18db      	adds	r3, r3, r3
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	193b      	adds	r3, r7, r4
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	18d3      	adds	r3, r2, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	000d      	movs	r5, r1
 8003a16:	187b      	adds	r3, r7, r1
 8003a18:	781c      	ldrb	r4, [r3, #0]
 8003a1a:	0011      	movs	r1, r2
 8003a1c:	f000 f8ca 	bl	8003bb4 <new_channel>
 8003a20:	0001      	movs	r1, r0
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	00a3      	lsls	r3, r4, #2
 8003a26:	18d3      	adds	r3, r2, r3
 8003a28:	3304      	adds	r3, #4
 8003a2a:	6019      	str	r1, [r3, #0]
	for (uint8_t i = 0; i < CHANNELS; ++i) {
 8003a2c:	197b      	adds	r3, r7, r5
 8003a2e:	197a      	adds	r2, r7, r5
 8003a30:	7812      	ldrb	r2, [r2, #0]
 8003a32:	3201      	adds	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	2317      	movs	r3, #23
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b05      	cmp	r3, #5
 8003a3e:	d9d5      	bls.n	80039ec <new_device+0x30>
	}
	return dev;
 8003a40:	693b      	ldr	r3, [r7, #16]
}
 8003a42:	0018      	movs	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b006      	add	sp, #24
 8003a48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003a4c <virtual_read>:

uint8_t virtual_read(uint8_t v_reg) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	0002      	movs	r2, r0
 8003a54:	1dfb      	adds	r3, r7, #7
 8003a56:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t d;

	// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
	status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003a58:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <virtual_read+0xc8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2149      	movs	r1, #73	; 0x49
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7ff fab6 	bl	8002fd2 <read_byte_data>
 8003a66:	0002      	movs	r2, r0
 8003a68:	210f      	movs	r1, #15
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	701a      	strb	r2, [r3, #0]

	if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8003a6e:	187b      	adds	r3, r7, r1
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	4013      	ands	r3, r2
 8003a76:	d00a      	beq.n	8003a8e <virtual_read+0x42>
		// d = nucleo_byte_read(I2C_AS72XX_SLAVE_READ_REG);
		d = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <virtual_read+0xc8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	2149      	movs	r1, #73	; 0x49
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7ff faa6 	bl	8002fd2 <read_byte_data>
 8003a86:	0002      	movs	r2, r0
 8003a88:	230e      	movs	r3, #14
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	701a      	strb	r2, [r3, #0]
	}

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003a8e:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <virtual_read+0xc8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2200      	movs	r2, #0
 8003a94:	2149      	movs	r1, #73	; 0x49
 8003a96:	0018      	movs	r0, r3
 8003a98:	f7ff fa9b 	bl	8002fd2 <read_byte_data>
 8003a9c:	0002      	movs	r2, r0
 8003a9e:	210f      	movs	r1, #15
 8003aa0:	187b      	adds	r3, r7, r1
 8003aa2:	701a      	strb	r2, [r3, #0]

		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8003aa4:	187b      	adds	r3, r7, r1
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d003      	beq.n	8003ab6 <virtual_read+0x6a>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 8003aae:	2005      	movs	r0, #5
 8003ab0:	f000 f94e 	bl	8003d50 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003ab4:	e7eb      	b.n	8003a8e <virtual_read+0x42>
			break;
 8003ab6:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
 8003ab8:	4b16      	ldr	r3, [pc, #88]	; (8003b14 <virtual_read+0xc8>)
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	1dfb      	adds	r3, r7, #7
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	2149      	movs	r1, #73	; 0x49
 8003ac4:	f7ff faff 	bl	80030c6 <write_byte_data>

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003ac8:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <virtual_read+0xc8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2149      	movs	r1, #73	; 0x49
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f7ff fa7e 	bl	8002fd2 <read_byte_data>
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	210f      	movs	r1, #15
 8003ada:	187b      	adds	r3, r7, r1
 8003adc:	701a      	strb	r2, [r3, #0]

		if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8003ade:	187b      	adds	r3, r7, r1
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d103      	bne.n	8003af0 <virtual_read+0xa4>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 8003ae8:	2005      	movs	r0, #5
 8003aea:	f000 f931 	bl	8003d50 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003aee:	e7eb      	b.n	8003ac8 <virtual_read+0x7c>
			break;
 8003af0:	46c0      	nop			; (mov r8, r8)
	}

	// d = nucleo_byte_read( I2C_AS72XX_SLAVE_READ_REG);

	d = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <virtual_read+0xc8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2202      	movs	r2, #2
 8003af8:	2149      	movs	r1, #73	; 0x49
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7ff fa69 	bl	8002fd2 <read_byte_data>
 8003b00:	0002      	movs	r2, r0
 8003b02:	210e      	movs	r1, #14
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	701a      	strb	r2, [r3, #0]

	return d;
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	781b      	ldrb	r3, [r3, #0]
}
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b004      	add	sp, #16
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	200005a0 	.word	0x200005a0

08003b18 <virtual_write>:


void virtual_write(uint8_t v_reg, uint8_t data) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	0002      	movs	r2, r0
 8003b20:	1dfb      	adds	r3, r7, #7
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	1dbb      	adds	r3, r7, #6
 8003b26:	1c0a      	adds	r2, r1, #0
 8003b28:	701a      	strb	r2, [r3, #0]
	uint8_t status;

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003b2a:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <virtual_write+0x98>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2149      	movs	r1, #73	; 0x49
 8003b32:	0018      	movs	r0, r3
 8003b34:	f7ff fa4d 	bl	8002fd2 <read_byte_data>
 8003b38:	0002      	movs	r2, r0
 8003b3a:	210f      	movs	r1, #15
 8003b3c:	187b      	adds	r3, r7, r1
 8003b3e:	701a      	strb	r2, [r3, #0]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2202      	movs	r2, #2
 8003b46:	4013      	ands	r3, r2
 8003b48:	d003      	beq.n	8003b52 <virtual_write+0x3a>
			break;
		}
		HAL_Delay(5);
 8003b4a:	2005      	movs	r0, #5
 8003b4c:	f000 f900 	bl	8003d50 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003b50:	e7eb      	b.n	8003b2a <virtual_write+0x12>
			break;
 8003b52:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
 8003b54:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <virtual_write+0x98>)
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	1dfb      	adds	r3, r7, #7
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2280      	movs	r2, #128	; 0x80
 8003b5e:	4252      	negs	r2, r2
 8003b60:	4313      	orrs	r3, r2
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2201      	movs	r2, #1
 8003b66:	2149      	movs	r1, #73	; 0x49
 8003b68:	f7ff faad 	bl	80030c6 <write_byte_data>

	while(1) {
//		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003b6c:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <virtual_write+0x98>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2200      	movs	r2, #0
 8003b72:	2149      	movs	r1, #73	; 0x49
 8003b74:	0018      	movs	r0, r3
 8003b76:	f7ff fa2c 	bl	8002fd2 <read_byte_data>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	210f      	movs	r1, #15
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	701a      	strb	r2, [r3, #0]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8003b82:	187b      	adds	r3, r7, r1
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2202      	movs	r2, #2
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d003      	beq.n	8003b94 <virtual_write+0x7c>
			break;
		}
		HAL_Delay(5);
 8003b8c:	2005      	movs	r0, #5
 8003b8e:	f000 f8df 	bl	8003d50 <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8003b92:	e7eb      	b.n	8003b6c <virtual_write+0x54>
			break;
 8003b94:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, data);
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, data);
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <virtual_write+0x98>)
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	1dbb      	adds	r3, r7, #6
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	2149      	movs	r1, #73	; 0x49
 8003ba2:	f7ff fa90 	bl	80030c6 <write_byte_data>
}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b004      	add	sp, #16
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	200005a0 	.word	0x200005a0

08003bb4 <new_channel>:

Channel* new_channel(uint8_t lsb_r, uint8_t msb_r) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	0002      	movs	r2, r0
 8003bbc:	1dfb      	adds	r3, r7, #7
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	1dbb      	adds	r3, r7, #6
 8003bc2:	1c0a      	adds	r2, r1, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
	Channel* ch = malloc(sizeof(Channel));
 8003bc6:	2004      	movs	r0, #4
 8003bc8:	f007 fdcc 	bl	800b764 <malloc>
 8003bcc:	0003      	movs	r3, r0
 8003bce:	60fb      	str	r3, [r7, #12]
	ch->color_data = 0;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	805a      	strh	r2, [r3, #2]
	ch->lsb_register = lsb_r;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1dfa      	adds	r2, r7, #7
 8003bda:	7812      	ldrb	r2, [r2, #0]
 8003bdc:	701a      	strb	r2, [r3, #0]
	ch->msb_register = msb_r;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1dba      	adds	r2, r7, #6
 8003be2:	7812      	ldrb	r2, [r2, #0]
 8003be4:	705a      	strb	r2, [r3, #1]
	return ch;
 8003be6:	68fb      	ldr	r3, [r7, #12]
}
 8003be8:	0018      	movs	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b004      	add	sp, #16
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <Reset_Handler>:
 8003bf0:	480d      	ldr	r0, [pc, #52]	; (8003c28 <LoopForever+0x2>)
 8003bf2:	4685      	mov	sp, r0
 8003bf4:	f7ff feba 	bl	800396c <SystemInit>
 8003bf8:	480c      	ldr	r0, [pc, #48]	; (8003c2c <LoopForever+0x6>)
 8003bfa:	490d      	ldr	r1, [pc, #52]	; (8003c30 <LoopForever+0xa>)
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	; (8003c34 <LoopForever+0xe>)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e002      	b.n	8003c08 <LoopCopyDataInit>

08003c02 <CopyDataInit>:
 8003c02:	58d4      	ldr	r4, [r2, r3]
 8003c04:	50c4      	str	r4, [r0, r3]
 8003c06:	3304      	adds	r3, #4

08003c08 <LoopCopyDataInit>:
 8003c08:	18c4      	adds	r4, r0, r3
 8003c0a:	428c      	cmp	r4, r1
 8003c0c:	d3f9      	bcc.n	8003c02 <CopyDataInit>
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <LoopForever+0x12>)
 8003c10:	4c0a      	ldr	r4, [pc, #40]	; (8003c3c <LoopForever+0x16>)
 8003c12:	2300      	movs	r3, #0
 8003c14:	e001      	b.n	8003c1a <LoopFillZerobss>

08003c16 <FillZerobss>:
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	3204      	adds	r2, #4

08003c1a <LoopFillZerobss>:
 8003c1a:	42a2      	cmp	r2, r4
 8003c1c:	d3fb      	bcc.n	8003c16 <FillZerobss>
 8003c1e:	f007 fd7d 	bl	800b71c <__libc_init_array>
 8003c22:	f7fe fc47 	bl	80024b4 <main>

08003c26 <LoopForever>:
 8003c26:	e7fe      	b.n	8003c26 <LoopForever>
 8003c28:	20024000 	.word	0x20024000
 8003c2c:	20000000 	.word	0x20000000
 8003c30:	200001fc 	.word	0x200001fc
 8003c34:	0800eb98 	.word	0x0800eb98
 8003c38:	200001fc 	.word	0x200001fc
 8003c3c:	200005ec 	.word	0x200005ec

08003c40 <ADC1_COMP_IRQHandler>:
 8003c40:	e7fe      	b.n	8003c40 <ADC1_COMP_IRQHandler>
	...

08003c44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c4a:	1dfb      	adds	r3, r7, #7
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_Init+0x3c>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <HAL_Init+0x3c>)
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	0049      	lsls	r1, r1, #1
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c5e:	2000      	movs	r0, #0
 8003c60:	f000 f810 	bl	8003c84 <HAL_InitTick>
 8003c64:	1e03      	subs	r3, r0, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003c68:	1dfb      	adds	r3, r7, #7
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]
 8003c6e:	e001      	b.n	8003c74 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003c70:	f7ff faa4 	bl	80031bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c74:	1dfb      	adds	r3, r7, #7
 8003c76:	781b      	ldrb	r3, [r3, #0]
}
 8003c78:	0018      	movs	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40022000 	.word	0x40022000

08003c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c8c:	230f      	movs	r3, #15
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <HAL_InitTick+0x88>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d02b      	beq.n	8003cf4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <HAL_InitTick+0x8c>)
 8003c9e:	681c      	ldr	r4, [r3, #0]
 8003ca0:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <HAL_InitTick+0x88>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	23fa      	movs	r3, #250	; 0xfa
 8003ca8:	0098      	lsls	r0, r3, #2
 8003caa:	f7fc fa47 	bl	800013c <__udivsi3>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	0020      	movs	r0, r4
 8003cb4:	f7fc fa42 	bl	800013c <__udivsi3>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f000 fe3f 	bl	800493e <HAL_SYSTICK_Config>
 8003cc0:	1e03      	subs	r3, r0, #0
 8003cc2:	d112      	bne.n	8003cea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d80a      	bhi.n	8003ce0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	2301      	movs	r3, #1
 8003cce:	425b      	negs	r3, r3
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f000 fdfe 	bl	80048d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <HAL_InitTick+0x90>)
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e00d      	b.n	8003cfc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003ce0:	230f      	movs	r3, #15
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	e008      	b.n	8003cfc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cea:	230f      	movs	r3, #15
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	2201      	movs	r2, #1
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	e003      	b.n	8003cfc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cf4:	230f      	movs	r3, #15
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	781b      	ldrb	r3, [r3, #0]
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b005      	add	sp, #20
 8003d08:	bd90      	pop	{r4, r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	20000028 	.word	0x20000028
 8003d10:	20000020 	.word	0x20000020
 8003d14:	20000024 	.word	0x20000024

08003d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_IncTick+0x1c>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	001a      	movs	r2, r3
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_IncTick+0x20>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	18d2      	adds	r2, r2, r3
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_IncTick+0x20>)
 8003d2a:	601a      	str	r2, [r3, #0]
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	20000028 	.word	0x20000028
 8003d38:	200005d8 	.word	0x200005d8

08003d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d40:	4b02      	ldr	r3, [pc, #8]	; (8003d4c <HAL_GetTick+0x10>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	200005d8 	.word	0x200005d8

08003d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d58:	f7ff fff0 	bl	8003d3c <HAL_GetTick>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	d005      	beq.n	8003d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <HAL_Delay+0x44>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	001a      	movs	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	f7ff ffe0 	bl	8003d3c <HAL_GetTick>
 8003d7c:	0002      	movs	r2, r0
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d8f7      	bhi.n	8003d78 <HAL_Delay+0x28>
  {
  }
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b004      	add	sp, #16
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	20000028 	.word	0x20000028

08003d98 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a06      	ldr	r2, [pc, #24]	; (8003dc0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	0019      	movs	r1, r3
 8003daa:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]
}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b002      	add	sp, #8
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	fffff9ff 	.word	0xfffff9ff

08003dc4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a05      	ldr	r2, [pc, #20]	; (8003de8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003dd4:	401a      	ands	r2, r3
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b002      	add	sp, #8
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	fe3fffff 	.word	0xfe3fffff

08003dec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	23e0      	movs	r3, #224	; 0xe0
 8003dfa:	045b      	lsls	r3, r3, #17
 8003dfc:	4013      	ands	r3, r2
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b002      	add	sp, #8
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	2104      	movs	r1, #4
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	2107      	movs	r1, #7
 8003e1e:	4091      	lsls	r1, r2
 8003e20:	000a      	movs	r2, r1
 8003e22:	43d2      	mvns	r2, r2
 8003e24:	401a      	ands	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2104      	movs	r1, #4
 8003e2a:	400b      	ands	r3, r1
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4099      	lsls	r1, r3
 8003e30:	000b      	movs	r3, r1
 8003e32:	431a      	orrs	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b004      	add	sp, #16
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	211f      	movs	r1, #31
 8003e54:	400a      	ands	r2, r1
 8003e56:	210f      	movs	r1, #15
 8003e58:	4091      	lsls	r1, r2
 8003e5a:	000a      	movs	r2, r1
 8003e5c:	43d2      	mvns	r2, r2
 8003e5e:	401a      	ands	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	0e9b      	lsrs	r3, r3, #26
 8003e64:	210f      	movs	r1, #15
 8003e66:	4019      	ands	r1, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	201f      	movs	r0, #31
 8003e6c:	4003      	ands	r3, r0
 8003e6e:	4099      	lsls	r1, r3
 8003e70:	000b      	movs	r3, r1
 8003e72:	431a      	orrs	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b004      	add	sp, #16
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	035b      	lsls	r3, r3, #13
 8003e92:	0b5b      	lsrs	r3, r3, #13
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b002      	add	sp, #8
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	0352      	lsls	r2, r2, #13
 8003eb4:	0b52      	lsrs	r2, r2, #13
 8003eb6:	43d2      	mvns	r2, r2
 8003eb8:	401a      	ands	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b002      	add	sp, #8
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	0212      	lsls	r2, r2, #8
 8003edc:	43d2      	mvns	r2, r2
 8003ede:	401a      	ands	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	400b      	ands	r3, r1
 8003ee8:	4904      	ldr	r1, [pc, #16]	; (8003efc <LL_ADC_SetChannelSamplingTime+0x34>)
 8003eea:	400b      	ands	r3, r1
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	07ffff00 	.word	0x07ffff00

08003f00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a05      	ldr	r2, [pc, #20]	; (8003f24 <LL_ADC_EnableInternalRegulator+0x24>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2280      	movs	r2, #128	; 0x80
 8003f12:	0552      	lsls	r2, r2, #21
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b002      	add	sp, #8
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	6fffffe8 	.word	0x6fffffe8

08003f28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	055b      	lsls	r3, r3, #21
 8003f38:	401a      	ands	r2, r3
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	055b      	lsls	r3, r3, #21
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d101      	bne.n	8003f46 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	0018      	movs	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <LL_ADC_IsEnabled+0x18>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <LL_ADC_IsEnabled+0x1a>
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b002      	add	sp, #8
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d101      	bne.n	8003f8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b002      	add	sp, #8
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f9c:	231f      	movs	r3, #31
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e1b1      	b.n	800431e <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7ff f921 	bl	800320c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2254      	movs	r2, #84	; 0x54
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7ff ffa3 	bl	8003f28 <LL_ADC_IsInternalRegulatorEnabled>
 8003fe2:	1e03      	subs	r3, r0, #0
 8003fe4:	d115      	bne.n	8004012 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f7ff ff88 	bl	8003f00 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ff0:	4bcd      	ldr	r3, [pc, #820]	; (8004328 <HAL_ADC_Init+0x394>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	49cd      	ldr	r1, [pc, #820]	; (800432c <HAL_ADC_Init+0x398>)
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f7fc f8a0 	bl	800013c <__udivsi3>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	3301      	adds	r3, #1
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004004:	e002      	b.n	800400c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3b01      	subs	r3, #1
 800400a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f9      	bne.n	8004006 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	0018      	movs	r0, r3
 8004018:	f7ff ff86 	bl	8003f28 <LL_ADC_IsInternalRegulatorEnabled>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d10f      	bne.n	8004040 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	2210      	movs	r2, #16
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	2201      	movs	r2, #1
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004038:	231f      	movs	r3, #31
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	2201      	movs	r2, #1
 800403e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	0018      	movs	r0, r3
 8004046:	f7ff ff94 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 800404a:	0003      	movs	r3, r0
 800404c:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004052:	2210      	movs	r2, #16
 8004054:	4013      	ands	r3, r2
 8004056:	d000      	beq.n	800405a <HAL_ADC_Init+0xc6>
 8004058:	e154      	b.n	8004304 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d000      	beq.n	8004062 <HAL_ADC_Init+0xce>
 8004060:	e150      	b.n	8004304 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	4ab2      	ldr	r2, [pc, #712]	; (8004330 <HAL_ADC_Init+0x39c>)
 8004068:	4013      	ands	r3, r2
 800406a:	2202      	movs	r2, #2
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	0018      	movs	r0, r3
 8004078:	f7ff ff6a 	bl	8003f50 <LL_ADC_IsEnabled>
 800407c:	1e03      	subs	r3, r0, #0
 800407e:	d156      	bne.n	800412e <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2218      	movs	r2, #24
 8004088:	4393      	bics	r3, r2
 800408a:	0019      	movs	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	0f9b      	lsrs	r3, r3, #30
 800409e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80040a4:	4313      	orrs	r3, r2
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	223c      	movs	r2, #60	; 0x3c
 80040b0:	5c9b      	ldrb	r3, [r3, r2]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d111      	bne.n	80040da <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	0f9b      	lsrs	r3, r3, #30
 80040bc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80040c2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80040c8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80040ce:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	2201      	movs	r2, #1
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	4a94      	ldr	r2, [pc, #592]	; (8004334 <HAL_ADC_Init+0x3a0>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	0019      	movs	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	23c0      	movs	r3, #192	; 0xc0
 80040f6:	061b      	lsls	r3, r3, #24
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d018      	beq.n	800412e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	05db      	lsls	r3, r3, #23
 8004104:	429a      	cmp	r2, r3
 8004106:	d012      	beq.n	800412e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	061b      	lsls	r3, r3, #24
 8004110:	429a      	cmp	r2, r3
 8004112:	d00c      	beq.n	800412e <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004114:	4b88      	ldr	r3, [pc, #544]	; (8004338 <HAL_ADC_Init+0x3a4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a88      	ldr	r2, [pc, #544]	; (800433c <HAL_ADC_Init+0x3a8>)
 800411a:	4013      	ands	r3, r2
 800411c:	0019      	movs	r1, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	23f0      	movs	r3, #240	; 0xf0
 8004124:	039b      	lsls	r3, r3, #14
 8004126:	401a      	ands	r2, r3
 8004128:	4b83      	ldr	r3, [pc, #524]	; (8004338 <HAL_ADC_Init+0x3a4>)
 800412a:	430a      	orrs	r2, r1
 800412c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	7e1b      	ldrb	r3, [r3, #24]
 8004132:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	7e5b      	ldrb	r3, [r3, #25]
 8004138:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800413a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	7e9b      	ldrb	r3, [r3, #26]
 8004140:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004142:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_ADC_Init+0x1be>
 800414c:	2380      	movs	r3, #128	; 0x80
 800414e:	015b      	lsls	r3, r3, #5
 8004150:	e000      	b.n	8004154 <HAL_ADC_Init+0x1c0>
 8004152:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004154:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800415a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	da04      	bge.n	800416e <HAL_ADC_Init+0x1da>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	e001      	b.n	8004172 <HAL_ADC_Init+0x1de>
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8004172:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	212c      	movs	r1, #44	; 0x2c
 8004178:	5c5b      	ldrb	r3, [r3, r1]
 800417a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800417c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	5c9b      	ldrb	r3, [r3, r2]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d115      	bne.n	80041ba <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7e9b      	ldrb	r3, [r3, #26]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d105      	bne.n	80041a2 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2280      	movs	r2, #128	; 0x80
 800419a:	0252      	lsls	r2, r2, #9
 800419c:	4313      	orrs	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	e00b      	b.n	80041ba <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	2220      	movs	r2, #32
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	2201      	movs	r2, #1
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c6:	23e0      	movs	r3, #224	; 0xe0
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80041d0:	4313      	orrs	r3, r2
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	4a58      	ldr	r2, [pc, #352]	; (8004340 <HAL_ADC_Init+0x3ac>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	0019      	movs	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	4a53      	ldr	r2, [pc, #332]	; (8004344 <HAL_ADC_Init+0x3b0>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	0019      	movs	r1, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	430a      	orrs	r2, r1
 8004202:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420c:	001a      	movs	r2, r3
 800420e:	2100      	movs	r1, #0
 8004210:	f7ff fdf9 	bl	8003e06 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	494a      	ldr	r1, [pc, #296]	; (8004348 <HAL_ADC_Init+0x3b4>)
 800421e:	001a      	movs	r2, r3
 8004220:	f7ff fdf1 	bl	8003e06 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2110      	movs	r1, #16
 8004238:	4249      	negs	r1, r1
 800423a:	430a      	orrs	r2, r1
 800423c:	629a      	str	r2, [r3, #40]	; 0x28
 800423e:	e03a      	b.n	80042b6 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	039b      	lsls	r3, r3, #14
 8004248:	429a      	cmp	r2, r3
 800424a:	d134      	bne.n	80042b6 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	e00c      	b.n	800426c <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	40da      	lsrs	r2, r3
 800425c:	0013      	movs	r3, r2
 800425e:	220f      	movs	r2, #15
 8004260:	4013      	ands	r3, r2
 8004262:	2b0f      	cmp	r3, #15
 8004264:	d006      	beq.n	8004274 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3301      	adds	r3, #1
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b07      	cmp	r3, #7
 8004270:	d9ef      	bls.n	8004252 <HAL_ADC_Init+0x2be>
 8004272:	e000      	b.n	8004276 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8004274:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d109      	bne.n	8004290 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2110      	movs	r1, #16
 8004288:	4249      	negs	r1, r1
 800428a:	430a      	orrs	r2, r1
 800428c:	629a      	str	r2, [r3, #40]	; 0x28
 800428e:	e012      	b.n	80042b6 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	3b01      	subs	r3, #1
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	221c      	movs	r2, #28
 80042a0:	4013      	ands	r3, r2
 80042a2:	2210      	movs	r2, #16
 80042a4:	4252      	negs	r2, r2
 80042a6:	409a      	lsls	r2, r3
 80042a8:	0011      	movs	r1, r2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a23      	ldr	r2, [pc, #140]	; (800434c <HAL_ADC_Init+0x3b8>)
 80042be:	4013      	ands	r3, r2
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d10b      	bne.n	80042de <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	2203      	movs	r2, #3
 80042d2:	4393      	bics	r3, r2
 80042d4:	2201      	movs	r2, #1
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80042dc:	e01c      	b.n	8004318 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	2212      	movs	r2, #18
 80042e4:	4393      	bics	r3, r2
 80042e6:	2210      	movs	r2, #16
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f2:	2201      	movs	r2, #1
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80042fa:	231f      	movs	r3, #31
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004302:	e009      	b.n	8004318 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	2210      	movs	r2, #16
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004310:	231f      	movs	r3, #31
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004318:	231f      	movs	r3, #31
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	781b      	ldrb	r3, [r3, #0]
}
 800431e:	0018      	movs	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	b008      	add	sp, #32
 8004324:	bd80      	pop	{r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	20000020 	.word	0x20000020
 800432c:	00030d40 	.word	0x00030d40
 8004330:	fffffefd 	.word	0xfffffefd
 8004334:	1ffffc02 	.word	0x1ffffc02
 8004338:	40012708 	.word	0x40012708
 800433c:	ffc3ffff 	.word	0xffc3ffff
 8004340:	fffe0219 	.word	0xfffe0219
 8004344:	dffffc02 	.word	0xdffffc02
 8004348:	07ffff04 	.word	0x07ffff04
 800434c:	833fffe7 	.word	0x833fffe7

08004350 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800435a:	2317      	movs	r3, #23
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2254      	movs	r2, #84	; 0x54
 800436a:	5c9b      	ldrb	r3, [r3, r2]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x24>
 8004370:	2302      	movs	r3, #2
 8004372:	e1c0      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x3a6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2254      	movs	r2, #84	; 0x54
 8004378:	2101      	movs	r1, #1
 800437a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0018      	movs	r0, r3
 8004382:	f7ff fdf6 	bl	8003f72 <LL_ADC_REG_IsConversionOngoing>
 8004386:	1e03      	subs	r3, r0, #0
 8004388:	d000      	beq.n	800438c <HAL_ADC_ConfigChannel+0x3c>
 800438a:	e1a3      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d100      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x46>
 8004394:	e143      	b.n	800461e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691a      	ldr	r2, [r3, #16]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	429a      	cmp	r2, r3
 80043a0:	d004      	beq.n	80043ac <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80043a6:	4ac1      	ldr	r2, [pc, #772]	; (80046ac <HAL_ADC_ConfigChannel+0x35c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d108      	bne.n	80043be <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	0019      	movs	r1, r3
 80043b6:	0010      	movs	r0, r2
 80043b8:	f7ff fd62 	bl	8003e80 <LL_ADC_REG_SetSequencerChAdd>
 80043bc:	e0c9      	b.n	8004552 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	211f      	movs	r1, #31
 80043c8:	400b      	ands	r3, r1
 80043ca:	210f      	movs	r1, #15
 80043cc:	4099      	lsls	r1, r3
 80043ce:	000b      	movs	r3, r1
 80043d0:	43db      	mvns	r3, r3
 80043d2:	4013      	ands	r3, r2
 80043d4:	0019      	movs	r1, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	035b      	lsls	r3, r3, #13
 80043dc:	0b5b      	lsrs	r3, r3, #13
 80043de:	d105      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x9c>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	0e9b      	lsrs	r3, r3, #26
 80043e6:	221f      	movs	r2, #31
 80043e8:	4013      	ands	r3, r2
 80043ea:	e098      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2201      	movs	r2, #1
 80043f2:	4013      	ands	r3, r2
 80043f4:	d000      	beq.n	80043f8 <HAL_ADC_ConfigChannel+0xa8>
 80043f6:	e091      	b.n	800451c <HAL_ADC_ConfigChannel+0x1cc>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2202      	movs	r2, #2
 80043fe:	4013      	ands	r3, r2
 8004400:	d000      	beq.n	8004404 <HAL_ADC_ConfigChannel+0xb4>
 8004402:	e089      	b.n	8004518 <HAL_ADC_ConfigChannel+0x1c8>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2204      	movs	r2, #4
 800440a:	4013      	ands	r3, r2
 800440c:	d000      	beq.n	8004410 <HAL_ADC_ConfigChannel+0xc0>
 800440e:	e081      	b.n	8004514 <HAL_ADC_ConfigChannel+0x1c4>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2208      	movs	r2, #8
 8004416:	4013      	ands	r3, r2
 8004418:	d000      	beq.n	800441c <HAL_ADC_ConfigChannel+0xcc>
 800441a:	e079      	b.n	8004510 <HAL_ADC_ConfigChannel+0x1c0>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2210      	movs	r2, #16
 8004422:	4013      	ands	r3, r2
 8004424:	d000      	beq.n	8004428 <HAL_ADC_ConfigChannel+0xd8>
 8004426:	e071      	b.n	800450c <HAL_ADC_ConfigChannel+0x1bc>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2220      	movs	r2, #32
 800442e:	4013      	ands	r3, r2
 8004430:	d000      	beq.n	8004434 <HAL_ADC_ConfigChannel+0xe4>
 8004432:	e069      	b.n	8004508 <HAL_ADC_ConfigChannel+0x1b8>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2240      	movs	r2, #64	; 0x40
 800443a:	4013      	ands	r3, r2
 800443c:	d000      	beq.n	8004440 <HAL_ADC_ConfigChannel+0xf0>
 800443e:	e061      	b.n	8004504 <HAL_ADC_ConfigChannel+0x1b4>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	4013      	ands	r3, r2
 8004448:	d000      	beq.n	800444c <HAL_ADC_ConfigChannel+0xfc>
 800444a:	e059      	b.n	8004500 <HAL_ADC_ConfigChannel+0x1b0>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	2380      	movs	r3, #128	; 0x80
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	4013      	ands	r3, r2
 8004456:	d151      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x1ac>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4013      	ands	r3, r2
 8004462:	d149      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x1a8>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4013      	ands	r3, r2
 800446e:	d141      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x1a4>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	4013      	ands	r3, r2
 800447a:	d139      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x1a0>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	015b      	lsls	r3, r3, #5
 8004484:	4013      	ands	r3, r2
 8004486:	d131      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x19c>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	019b      	lsls	r3, r3, #6
 8004490:	4013      	ands	r3, r2
 8004492:	d129      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x198>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	2380      	movs	r3, #128	; 0x80
 800449a:	01db      	lsls	r3, r3, #7
 800449c:	4013      	ands	r3, r2
 800449e:	d121      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x194>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	4013      	ands	r3, r2
 80044aa:	d119      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x190>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	025b      	lsls	r3, r3, #9
 80044b4:	4013      	ands	r3, r2
 80044b6:	d111      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x18c>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	029b      	lsls	r3, r3, #10
 80044c0:	4013      	ands	r3, r2
 80044c2:	d109      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x188>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	02db      	lsls	r3, r3, #11
 80044cc:	4013      	ands	r3, r2
 80044ce:	d001      	beq.n	80044d4 <HAL_ADC_ConfigChannel+0x184>
 80044d0:	2312      	movs	r3, #18
 80044d2:	e024      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 80044d4:	2300      	movs	r3, #0
 80044d6:	e022      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 80044d8:	2311      	movs	r3, #17
 80044da:	e020      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 80044dc:	2310      	movs	r3, #16
 80044de:	e01e      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 80044e0:	230f      	movs	r3, #15
 80044e2:	e01c      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 80044e4:	230e      	movs	r3, #14
 80044e6:	e01a      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 80044e8:	230d      	movs	r3, #13
 80044ea:	e018      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 80044ec:	230c      	movs	r3, #12
 80044ee:	e016      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 80044f0:	230b      	movs	r3, #11
 80044f2:	e014      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 80044f4:	230a      	movs	r3, #10
 80044f6:	e012      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 80044f8:	2309      	movs	r3, #9
 80044fa:	e010      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 80044fc:	2308      	movs	r3, #8
 80044fe:	e00e      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 8004500:	2307      	movs	r3, #7
 8004502:	e00c      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 8004504:	2306      	movs	r3, #6
 8004506:	e00a      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 8004508:	2305      	movs	r3, #5
 800450a:	e008      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 800450c:	2304      	movs	r3, #4
 800450e:	e006      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 8004510:	2303      	movs	r3, #3
 8004512:	e004      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 8004514:	2302      	movs	r3, #2
 8004516:	e002      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <HAL_ADC_ConfigChannel+0x1ce>
 800451c:	2300      	movs	r3, #0
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	6852      	ldr	r2, [r2, #4]
 8004522:	201f      	movs	r0, #31
 8004524:	4002      	ands	r2, r0
 8004526:	4093      	lsls	r3, r2
 8004528:	000a      	movs	r2, r1
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	089b      	lsrs	r3, r3, #2
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	429a      	cmp	r2, r3
 800453e:	d808      	bhi.n	8004552 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6859      	ldr	r1, [r3, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	001a      	movs	r2, r3
 800454e:	f7ff fc77 	bl	8003e40 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6819      	ldr	r1, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	001a      	movs	r2, r3
 8004560:	f7ff fcb2 	bl	8003ec8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	db00      	blt.n	800456e <HAL_ADC_ConfigChannel+0x21e>
 800456c:	e0bc      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800456e:	4b50      	ldr	r3, [pc, #320]	; (80046b0 <HAL_ADC_ConfigChannel+0x360>)
 8004570:	0018      	movs	r0, r3
 8004572:	f7ff fc3b 	bl	8003dec <LL_ADC_GetCommonPathInternalCh>
 8004576:	0003      	movs	r3, r0
 8004578:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a4d      	ldr	r2, [pc, #308]	; (80046b4 <HAL_ADC_ConfigChannel+0x364>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d122      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	2380      	movs	r3, #128	; 0x80
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800458c:	d11d      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2280      	movs	r2, #128	; 0x80
 8004592:	0412      	lsls	r2, r2, #16
 8004594:	4313      	orrs	r3, r2
 8004596:	4a46      	ldr	r2, [pc, #280]	; (80046b0 <HAL_ADC_ConfigChannel+0x360>)
 8004598:	0019      	movs	r1, r3
 800459a:	0010      	movs	r0, r2
 800459c:	f7ff fc12 	bl	8003dc4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045a0:	4b45      	ldr	r3, [pc, #276]	; (80046b8 <HAL_ADC_ConfigChannel+0x368>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4945      	ldr	r1, [pc, #276]	; (80046bc <HAL_ADC_ConfigChannel+0x36c>)
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7fb fdc8 	bl	800013c <__udivsi3>
 80045ac:	0003      	movs	r3, r0
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	0013      	movs	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	189b      	adds	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045ba:	e002      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3b01      	subs	r3, #1
 80045c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f9      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045c8:	e08e      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3c      	ldr	r2, [pc, #240]	; (80046c0 <HAL_ADC_ConfigChannel+0x370>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10e      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x2a2>
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	045b      	lsls	r3, r3, #17
 80045da:	4013      	ands	r3, r2
 80045dc:	d109      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2280      	movs	r2, #128	; 0x80
 80045e2:	0452      	lsls	r2, r2, #17
 80045e4:	4313      	orrs	r3, r2
 80045e6:	4a32      	ldr	r2, [pc, #200]	; (80046b0 <HAL_ADC_ConfigChannel+0x360>)
 80045e8:	0019      	movs	r1, r3
 80045ea:	0010      	movs	r0, r2
 80045ec:	f7ff fbea 	bl	8003dc4 <LL_ADC_SetCommonPathInternalCh>
 80045f0:	e07a      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a33      	ldr	r2, [pc, #204]	; (80046c4 <HAL_ADC_ConfigChannel+0x374>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d000      	beq.n	80045fe <HAL_ADC_ConfigChannel+0x2ae>
 80045fc:	e074      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	03db      	lsls	r3, r3, #15
 8004604:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004606:	d000      	beq.n	800460a <HAL_ADC_ConfigChannel+0x2ba>
 8004608:	e06e      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2280      	movs	r2, #128	; 0x80
 800460e:	03d2      	lsls	r2, r2, #15
 8004610:	4313      	orrs	r3, r2
 8004612:	4a27      	ldr	r2, [pc, #156]	; (80046b0 <HAL_ADC_ConfigChannel+0x360>)
 8004614:	0019      	movs	r1, r3
 8004616:	0010      	movs	r0, r2
 8004618:	f7ff fbd4 	bl	8003dc4 <LL_ADC_SetCommonPathInternalCh>
 800461c:	e064      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	429a      	cmp	r2, r3
 8004628:	d004      	beq.n	8004634 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800462e:	4a1f      	ldr	r2, [pc, #124]	; (80046ac <HAL_ADC_ConfigChannel+0x35c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d107      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0019      	movs	r1, r3
 800463e:	0010      	movs	r0, r2
 8004640:	f7ff fc2f 	bl	8003ea2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	da4d      	bge.n	80046e8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800464c:	4b18      	ldr	r3, [pc, #96]	; (80046b0 <HAL_ADC_ConfigChannel+0x360>)
 800464e:	0018      	movs	r0, r3
 8004650:	f7ff fbcc 	bl	8003dec <LL_ADC_GetCommonPathInternalCh>
 8004654:	0003      	movs	r3, r0
 8004656:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <HAL_ADC_ConfigChannel+0x364>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d108      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <HAL_ADC_ConfigChannel+0x378>)
 8004666:	4013      	ands	r3, r2
 8004668:	4a11      	ldr	r2, [pc, #68]	; (80046b0 <HAL_ADC_ConfigChannel+0x360>)
 800466a:	0019      	movs	r1, r3
 800466c:	0010      	movs	r0, r2
 800466e:	f7ff fba9 	bl	8003dc4 <LL_ADC_SetCommonPathInternalCh>
 8004672:	e039      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a11      	ldr	r2, [pc, #68]	; (80046c0 <HAL_ADC_ConfigChannel+0x370>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d108      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4a12      	ldr	r2, [pc, #72]	; (80046cc <HAL_ADC_ConfigChannel+0x37c>)
 8004682:	4013      	ands	r3, r2
 8004684:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_ADC_ConfigChannel+0x360>)
 8004686:	0019      	movs	r1, r3
 8004688:	0010      	movs	r0, r2
 800468a:	f7ff fb9b 	bl	8003dc4 <LL_ADC_SetCommonPathInternalCh>
 800468e:	e02b      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a0b      	ldr	r2, [pc, #44]	; (80046c4 <HAL_ADC_ConfigChannel+0x374>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d126      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4a0c      	ldr	r2, [pc, #48]	; (80046d0 <HAL_ADC_ConfigChannel+0x380>)
 800469e:	4013      	ands	r3, r2
 80046a0:	4a03      	ldr	r2, [pc, #12]	; (80046b0 <HAL_ADC_ConfigChannel+0x360>)
 80046a2:	0019      	movs	r1, r3
 80046a4:	0010      	movs	r0, r2
 80046a6:	f7ff fb8d 	bl	8003dc4 <LL_ADC_SetCommonPathInternalCh>
 80046aa:	e01d      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x398>
 80046ac:	80000004 	.word	0x80000004
 80046b0:	40012708 	.word	0x40012708
 80046b4:	b0001000 	.word	0xb0001000
 80046b8:	20000020 	.word	0x20000020
 80046bc:	00030d40 	.word	0x00030d40
 80046c0:	b8004000 	.word	0xb8004000
 80046c4:	b4002000 	.word	0xb4002000
 80046c8:	ff7fffff 	.word	0xff7fffff
 80046cc:	feffffff 	.word	0xfeffffff
 80046d0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	2220      	movs	r2, #32
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046e0:	2317      	movs	r3, #23
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	2201      	movs	r2, #1
 80046e6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2254      	movs	r2, #84	; 0x54
 80046ec:	2100      	movs	r1, #0
 80046ee:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80046f0:	2317      	movs	r3, #23
 80046f2:	18fb      	adds	r3, r7, r3
 80046f4:	781b      	ldrb	r3, [r3, #0]
}
 80046f6:	0018      	movs	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b006      	add	sp, #24
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	46c0      	nop			; (mov r8, r8)

08004700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	0002      	movs	r2, r0
 8004708:	1dfb      	adds	r3, r7, #7
 800470a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800470c:	1dfb      	adds	r3, r7, #7
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b7f      	cmp	r3, #127	; 0x7f
 8004712:	d809      	bhi.n	8004728 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004714:	1dfb      	adds	r3, r7, #7
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	001a      	movs	r2, r3
 800471a:	231f      	movs	r3, #31
 800471c:	401a      	ands	r2, r3
 800471e:	4b04      	ldr	r3, [pc, #16]	; (8004730 <__NVIC_EnableIRQ+0x30>)
 8004720:	2101      	movs	r1, #1
 8004722:	4091      	lsls	r1, r2
 8004724:	000a      	movs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004728:	46c0      	nop			; (mov r8, r8)
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}
 8004730:	e000e100 	.word	0xe000e100

08004734 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	0002      	movs	r2, r0
 800473c:	1dfb      	adds	r3, r7, #7
 800473e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004740:	1dfb      	adds	r3, r7, #7
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b7f      	cmp	r3, #127	; 0x7f
 8004746:	d810      	bhi.n	800476a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004748:	1dfb      	adds	r3, r7, #7
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	001a      	movs	r2, r3
 800474e:	231f      	movs	r3, #31
 8004750:	4013      	ands	r3, r2
 8004752:	4908      	ldr	r1, [pc, #32]	; (8004774 <__NVIC_DisableIRQ+0x40>)
 8004754:	2201      	movs	r2, #1
 8004756:	409a      	lsls	r2, r3
 8004758:	0013      	movs	r3, r2
 800475a:	2280      	movs	r2, #128	; 0x80
 800475c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800475e:	f3bf 8f4f 	dsb	sy
}
 8004762:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8004764:	f3bf 8f6f 	isb	sy
}
 8004768:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	b002      	add	sp, #8
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	e000e100 	.word	0xe000e100

08004778 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	0002      	movs	r2, r0
 8004780:	1dfb      	adds	r3, r7, #7
 8004782:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004784:	1dfb      	adds	r3, r7, #7
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b7f      	cmp	r3, #127	; 0x7f
 800478a:	d80a      	bhi.n	80047a2 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800478c:	1dfb      	adds	r3, r7, #7
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	001a      	movs	r2, r3
 8004792:	231f      	movs	r3, #31
 8004794:	4013      	ands	r3, r2
 8004796:	4905      	ldr	r1, [pc, #20]	; (80047ac <__NVIC_ClearPendingIRQ+0x34>)
 8004798:	2201      	movs	r2, #1
 800479a:	409a      	lsls	r2, r3
 800479c:	23c0      	movs	r3, #192	; 0xc0
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	50ca      	str	r2, [r1, r3]
  }
}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b002      	add	sp, #8
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	e000e100 	.word	0xe000e100

080047b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047b0:	b590      	push	{r4, r7, lr}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	0002      	movs	r2, r0
 80047b8:	6039      	str	r1, [r7, #0]
 80047ba:	1dfb      	adds	r3, r7, #7
 80047bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80047be:	1dfb      	adds	r3, r7, #7
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b7f      	cmp	r3, #127	; 0x7f
 80047c4:	d828      	bhi.n	8004818 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047c6:	4a2f      	ldr	r2, [pc, #188]	; (8004884 <__NVIC_SetPriority+0xd4>)
 80047c8:	1dfb      	adds	r3, r7, #7
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b25b      	sxtb	r3, r3
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	33c0      	adds	r3, #192	; 0xc0
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	589b      	ldr	r3, [r3, r2]
 80047d6:	1dfa      	adds	r2, r7, #7
 80047d8:	7812      	ldrb	r2, [r2, #0]
 80047da:	0011      	movs	r1, r2
 80047dc:	2203      	movs	r2, #3
 80047de:	400a      	ands	r2, r1
 80047e0:	00d2      	lsls	r2, r2, #3
 80047e2:	21ff      	movs	r1, #255	; 0xff
 80047e4:	4091      	lsls	r1, r2
 80047e6:	000a      	movs	r2, r1
 80047e8:	43d2      	mvns	r2, r2
 80047ea:	401a      	ands	r2, r3
 80047ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	019b      	lsls	r3, r3, #6
 80047f2:	22ff      	movs	r2, #255	; 0xff
 80047f4:	401a      	ands	r2, r3
 80047f6:	1dfb      	adds	r3, r7, #7
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	0018      	movs	r0, r3
 80047fc:	2303      	movs	r3, #3
 80047fe:	4003      	ands	r3, r0
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004804:	481f      	ldr	r0, [pc, #124]	; (8004884 <__NVIC_SetPriority+0xd4>)
 8004806:	1dfb      	adds	r3, r7, #7
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	b25b      	sxtb	r3, r3
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	430a      	orrs	r2, r1
 8004810:	33c0      	adds	r3, #192	; 0xc0
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004816:	e031      	b.n	800487c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004818:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <__NVIC_SetPriority+0xd8>)
 800481a:	1dfb      	adds	r3, r7, #7
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	0019      	movs	r1, r3
 8004820:	230f      	movs	r3, #15
 8004822:	400b      	ands	r3, r1
 8004824:	3b08      	subs	r3, #8
 8004826:	089b      	lsrs	r3, r3, #2
 8004828:	3306      	adds	r3, #6
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	18d3      	adds	r3, r2, r3
 800482e:	3304      	adds	r3, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	1dfa      	adds	r2, r7, #7
 8004834:	7812      	ldrb	r2, [r2, #0]
 8004836:	0011      	movs	r1, r2
 8004838:	2203      	movs	r2, #3
 800483a:	400a      	ands	r2, r1
 800483c:	00d2      	lsls	r2, r2, #3
 800483e:	21ff      	movs	r1, #255	; 0xff
 8004840:	4091      	lsls	r1, r2
 8004842:	000a      	movs	r2, r1
 8004844:	43d2      	mvns	r2, r2
 8004846:	401a      	ands	r2, r3
 8004848:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	019b      	lsls	r3, r3, #6
 800484e:	22ff      	movs	r2, #255	; 0xff
 8004850:	401a      	ands	r2, r3
 8004852:	1dfb      	adds	r3, r7, #7
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	0018      	movs	r0, r3
 8004858:	2303      	movs	r3, #3
 800485a:	4003      	ands	r3, r0
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004860:	4809      	ldr	r0, [pc, #36]	; (8004888 <__NVIC_SetPriority+0xd8>)
 8004862:	1dfb      	adds	r3, r7, #7
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	001c      	movs	r4, r3
 8004868:	230f      	movs	r3, #15
 800486a:	4023      	ands	r3, r4
 800486c:	3b08      	subs	r3, #8
 800486e:	089b      	lsrs	r3, r3, #2
 8004870:	430a      	orrs	r2, r1
 8004872:	3306      	adds	r3, #6
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	18c3      	adds	r3, r0, r3
 8004878:	3304      	adds	r3, #4
 800487a:	601a      	str	r2, [r3, #0]
}
 800487c:	46c0      	nop			; (mov r8, r8)
 800487e:	46bd      	mov	sp, r7
 8004880:	b003      	add	sp, #12
 8004882:	bd90      	pop	{r4, r7, pc}
 8004884:	e000e100 	.word	0xe000e100
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	1e5a      	subs	r2, r3, #1
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	045b      	lsls	r3, r3, #17
 800489c:	429a      	cmp	r2, r3
 800489e:	d301      	bcc.n	80048a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048a0:	2301      	movs	r3, #1
 80048a2:	e010      	b.n	80048c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048a4:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <SysTick_Config+0x44>)
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	3a01      	subs	r2, #1
 80048aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ac:	2301      	movs	r3, #1
 80048ae:	425b      	negs	r3, r3
 80048b0:	2103      	movs	r1, #3
 80048b2:	0018      	movs	r0, r3
 80048b4:	f7ff ff7c 	bl	80047b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <SysTick_Config+0x44>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048be:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <SysTick_Config+0x44>)
 80048c0:	2207      	movs	r2, #7
 80048c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	0018      	movs	r0, r3
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b002      	add	sp, #8
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	e000e010 	.word	0xe000e010

080048d4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
 80048de:	210f      	movs	r1, #15
 80048e0:	187b      	adds	r3, r7, r1
 80048e2:	1c02      	adds	r2, r0, #0
 80048e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	187b      	adds	r3, r7, r1
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	b25b      	sxtb	r3, r3
 80048ee:	0011      	movs	r1, r2
 80048f0:	0018      	movs	r0, r3
 80048f2:	f7ff ff5d 	bl	80047b0 <__NVIC_SetPriority>
}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b004      	add	sp, #16
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	0002      	movs	r2, r0
 8004906:	1dfb      	adds	r3, r7, #7
 8004908:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800490a:	1dfb      	adds	r3, r7, #7
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	b25b      	sxtb	r3, r3
 8004910:	0018      	movs	r0, r3
 8004912:	f7ff fef5 	bl	8004700 <__NVIC_EnableIRQ>
}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	46bd      	mov	sp, r7
 800491a:	b002      	add	sp, #8
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	0002      	movs	r2, r0
 8004926:	1dfb      	adds	r3, r7, #7
 8004928:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800492a:	1dfb      	adds	r3, r7, #7
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b25b      	sxtb	r3, r3
 8004930:	0018      	movs	r0, r3
 8004932:	f7ff feff 	bl	8004734 <__NVIC_DisableIRQ>
}
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	46bd      	mov	sp, r7
 800493a:	b002      	add	sp, #8
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	0018      	movs	r0, r3
 800494a:	f7ff ff9f 	bl	800488c <SysTick_Config>
 800494e:	0003      	movs	r3, r0
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	0002      	movs	r2, r0
 8004960:	1dfb      	adds	r3, r7, #7
 8004962:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004964:	1dfb      	adds	r3, r7, #7
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	b25b      	sxtb	r3, r3
 800496a:	0018      	movs	r0, r3
 800496c:	f7ff ff04 	bl	8004778 <__NVIC_ClearPendingIRQ>
}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	46bd      	mov	sp, r7
 8004974:	b002      	add	sp, #8
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e091      	b.n	8004aae <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	001a      	movs	r2, r3
 8004990:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <HAL_DMA_Init+0x140>)
 8004992:	429a      	cmp	r2, r3
 8004994:	d810      	bhi.n	80049b8 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a48      	ldr	r2, [pc, #288]	; (8004abc <HAL_DMA_Init+0x144>)
 800499c:	4694      	mov	ip, r2
 800499e:	4463      	add	r3, ip
 80049a0:	2114      	movs	r1, #20
 80049a2:	0018      	movs	r0, r3
 80049a4:	f7fb fbca 	bl	800013c <__udivsi3>
 80049a8:	0003      	movs	r3, r0
 80049aa:	009a      	lsls	r2, r3, #2
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a43      	ldr	r2, [pc, #268]	; (8004ac0 <HAL_DMA_Init+0x148>)
 80049b4:	641a      	str	r2, [r3, #64]	; 0x40
 80049b6:	e00f      	b.n	80049d8 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a41      	ldr	r2, [pc, #260]	; (8004ac4 <HAL_DMA_Init+0x14c>)
 80049be:	4694      	mov	ip, r2
 80049c0:	4463      	add	r3, ip
 80049c2:	2114      	movs	r1, #20
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7fb fbb9 	bl	800013c <__udivsi3>
 80049ca:	0003      	movs	r3, r0
 80049cc:	009a      	lsls	r2, r3, #2
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a3c      	ldr	r2, [pc, #240]	; (8004ac8 <HAL_DMA_Init+0x150>)
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2225      	movs	r2, #37	; 0x25
 80049dc:	2102      	movs	r1, #2
 80049de:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4938      	ldr	r1, [pc, #224]	; (8004acc <HAL_DMA_Init+0x154>)
 80049ec:	400a      	ands	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6819      	ldr	r1, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f000 faab 	bl	8004f84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	01db      	lsls	r3, r3, #7
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d102      	bne.n	8004a40 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a48:	217f      	movs	r1, #127	; 0x7f
 8004a4a:	400a      	ands	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a56:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d011      	beq.n	8004a84 <HAL_DMA_Init+0x10c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d80d      	bhi.n	8004a84 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f000 fad4 	bl	8005018 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	e008      	b.n	8004a96 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2225      	movs	r2, #37	; 0x25
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2224      	movs	r2, #36	; 0x24
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	0018      	movs	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b002      	add	sp, #8
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	40020407 	.word	0x40020407
 8004abc:	bffdfff8 	.word	0xbffdfff8
 8004ac0:	40020000 	.word	0x40020000
 8004ac4:	bffdfbf8 	.word	0xbffdfbf8
 8004ac8:	40020400 	.word	0x40020400
 8004acc:	ffff800f 	.word	0xffff800f

08004ad0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ade:	2317      	movs	r3, #23
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2224      	movs	r2, #36	; 0x24
 8004aea:	5c9b      	ldrb	r3, [r3, r2]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_DMA_Start_IT+0x24>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e06f      	b.n	8004bd4 <HAL_DMA_Start_IT+0x104>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2224      	movs	r2, #36	; 0x24
 8004af8:	2101      	movs	r1, #1
 8004afa:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2225      	movs	r2, #37	; 0x25
 8004b00:	5c9b      	ldrb	r3, [r3, r2]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d157      	bne.n	8004bb8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2225      	movs	r2, #37	; 0x25
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2101      	movs	r1, #1
 8004b22:	438a      	bics	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f9ed 	bl	8004f0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	210e      	movs	r1, #14
 8004b46:	430a      	orrs	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e00f      	b.n	8004b6c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2104      	movs	r1, #4
 8004b58:	438a      	bics	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	210a      	movs	r1, #10
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	025b      	lsls	r3, r3, #9
 8004b76:	4013      	ands	r3, r2
 8004b78:	d008      	beq.n	8004b8c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b84:	2180      	movs	r1, #128	; 0x80
 8004b86:	0049      	lsls	r1, r1, #1
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9e:	2180      	movs	r1, #128	; 0x80
 8004ba0:	0049      	lsls	r1, r1, #1
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e00a      	b.n	8004bce <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2224      	movs	r2, #36	; 0x24
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004bc6:	2317      	movs	r3, #23
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004bce:	2317      	movs	r3, #23
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	781b      	ldrb	r3, [r3, #0]
}
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b006      	add	sp, #24
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e04f      	b.n	8004c8e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2225      	movs	r2, #37	; 0x25
 8004bf2:	5c9b      	ldrb	r3, [r3, r2]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d008      	beq.n	8004c0c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2224      	movs	r2, #36	; 0x24
 8004c04:	2100      	movs	r1, #0
 8004c06:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e040      	b.n	8004c8e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	210e      	movs	r1, #14
 8004c18:	438a      	bics	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c26:	491c      	ldr	r1, [pc, #112]	; (8004c98 <HAL_DMA_Abort+0xbc>)
 8004c28:	400a      	ands	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2101      	movs	r1, #1
 8004c38:	438a      	bics	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	221c      	movs	r2, #28
 8004c42:	401a      	ands	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	2101      	movs	r1, #1
 8004c4a:	4091      	lsls	r1, r2
 8004c4c:	000a      	movs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	490a      	ldr	r1, [pc, #40]	; (8004c98 <HAL_DMA_Abort+0xbc>)
 8004c6e:	400a      	ands	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2225      	movs	r2, #37	; 0x25
 8004c80:	2101      	movs	r1, #1
 8004c82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2224      	movs	r2, #36	; 0x24
 8004c88:	2100      	movs	r1, #0
 8004c8a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	0018      	movs	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b002      	add	sp, #8
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	fffffeff 	.word	0xfffffeff

08004c9c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca4:	210f      	movs	r1, #15
 8004ca6:	187b      	adds	r3, r7, r1
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2225      	movs	r2, #37	; 0x25
 8004cb0:	5c9b      	ldrb	r3, [r3, r2]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d006      	beq.n	8004cc6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2204      	movs	r2, #4
 8004cbc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	e048      	b.n	8004d58 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	210e      	movs	r1, #14
 8004cd2:	438a      	bics	r2, r1
 8004cd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	438a      	bics	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf0:	491d      	ldr	r1, [pc, #116]	; (8004d68 <HAL_DMA_Abort_IT+0xcc>)
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	221c      	movs	r2, #28
 8004cfc:	401a      	ands	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	2101      	movs	r1, #1
 8004d04:	4091      	lsls	r1, r2
 8004d06:	000a      	movs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00c      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	4910      	ldr	r1, [pc, #64]	; (8004d68 <HAL_DMA_Abort_IT+0xcc>)
 8004d28:	400a      	ands	r2, r1
 8004d2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2225      	movs	r2, #37	; 0x25
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2224      	movs	r2, #36	; 0x24
 8004d42:	2100      	movs	r1, #0
 8004d44:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d004      	beq.n	8004d58 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	0010      	movs	r0, r2
 8004d56:	4798      	blx	r3
    }
  }
  return status;
 8004d58:	230f      	movs	r3, #15
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	781b      	ldrb	r3, [r3, #0]
}
 8004d5e:	0018      	movs	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b004      	add	sp, #16
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	fffffeff 	.word	0xfffffeff

08004d6c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	221c      	movs	r2, #28
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	0013      	movs	r3, r2
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4013      	ands	r3, r2
 8004d96:	d026      	beq.n	8004de6 <HAL_DMA_IRQHandler+0x7a>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2204      	movs	r2, #4
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d022      	beq.n	8004de6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2220      	movs	r2, #32
 8004da8:	4013      	ands	r3, r2
 8004daa:	d107      	bne.n	8004dbc <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2104      	movs	r1, #4
 8004db8:	438a      	bics	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	221c      	movs	r2, #28
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	2104      	movs	r1, #4
 8004dca:	4091      	lsls	r1, r2
 8004dcc:	000a      	movs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d100      	bne.n	8004dda <HAL_DMA_IRQHandler+0x6e>
 8004dd8:	e080      	b.n	8004edc <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	0010      	movs	r0, r2
 8004de2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004de4:	e07a      	b.n	8004edc <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	221c      	movs	r2, #28
 8004dec:	4013      	ands	r3, r2
 8004dee:	2202      	movs	r2, #2
 8004df0:	409a      	lsls	r2, r3
 8004df2:	0013      	movs	r3, r2
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4013      	ands	r3, r2
 8004df8:	d03c      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x108>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d038      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d10b      	bne.n	8004e26 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	210a      	movs	r1, #10
 8004e1a:	438a      	bics	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2225      	movs	r2, #37	; 0x25
 8004e22:	2101      	movs	r1, #1
 8004e24:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	001a      	movs	r2, r3
 8004e2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ee8 <HAL_DMA_IRQHandler+0x17c>)
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d909      	bls.n	8004e46 <HAL_DMA_IRQHandler+0xda>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	221c      	movs	r2, #28
 8004e38:	401a      	ands	r2, r3
 8004e3a:	4b2c      	ldr	r3, [pc, #176]	; (8004eec <HAL_DMA_IRQHandler+0x180>)
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	4091      	lsls	r1, r2
 8004e40:	000a      	movs	r2, r1
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	e008      	b.n	8004e58 <HAL_DMA_IRQHandler+0xec>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	221c      	movs	r2, #28
 8004e4c:	401a      	ands	r2, r3
 8004e4e:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <HAL_DMA_IRQHandler+0x184>)
 8004e50:	2102      	movs	r1, #2
 8004e52:	4091      	lsls	r1, r2
 8004e54:	000a      	movs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2224      	movs	r2, #36	; 0x24
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d039      	beq.n	8004edc <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	0010      	movs	r0, r2
 8004e70:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004e72:	e033      	b.n	8004edc <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e78:	221c      	movs	r2, #28
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	0013      	movs	r3, r2
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4013      	ands	r3, r2
 8004e86:	d02a      	beq.n	8004ede <HAL_DMA_IRQHandler+0x172>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d026      	beq.n	8004ede <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	210e      	movs	r1, #14
 8004e9c:	438a      	bics	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea4:	221c      	movs	r2, #28
 8004ea6:	401a      	ands	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	2101      	movs	r1, #1
 8004eae:	4091      	lsls	r1, r2
 8004eb0:	000a      	movs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2225      	movs	r2, #37	; 0x25
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2224      	movs	r2, #36	; 0x24
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	0010      	movs	r0, r2
 8004eda:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004edc:	46c0      	nop			; (mov r8, r8)
 8004ede:	46c0      	nop			; (mov r8, r8)
}
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b004      	add	sp, #16
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	40020080 	.word	0x40020080
 8004eec:	40020400 	.word	0x40020400
 8004ef0:	40020000 	.word	0x40020000

08004ef4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2225      	movs	r2, #37	; 0x25
 8004f00:	5c9b      	ldrb	r3, [r3, r2]
 8004f02:	b2db      	uxtb	r3, r3
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f22:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f34:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3a:	221c      	movs	r2, #28
 8004f3c:	401a      	ands	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	2101      	movs	r1, #1
 8004f44:	4091      	lsls	r1, r2
 8004f46:	000a      	movs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d108      	bne.n	8004f6c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f6a:	e007      	b.n	8004f7c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b004      	add	sp, #16
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	001a      	movs	r2, r3
 8004f92:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d814      	bhi.n	8004fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9c:	089b      	lsrs	r3, r3, #2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4a1a      	ldr	r2, [pc, #104]	; (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004fa2:	189a      	adds	r2, r3, r2
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	001a      	movs	r2, r3
 8004fae:	23ff      	movs	r3, #255	; 0xff
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	3b08      	subs	r3, #8
 8004fb4:	2114      	movs	r1, #20
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f7fb f8c0 	bl	800013c <__udivsi3>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e014      	b.n	8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	089b      	lsrs	r3, r3, #2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4a11      	ldr	r2, [pc, #68]	; (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004fcc:	189a      	adds	r2, r3, r2
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	001a      	movs	r2, r3
 8004fd8:	23ff      	movs	r3, #255	; 0xff
 8004fda:	4013      	ands	r3, r2
 8004fdc:	3b08      	subs	r3, #8
 8004fde:	2114      	movs	r1, #20
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f7fb f8ab 	bl	800013c <__udivsi3>
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	3307      	adds	r3, #7
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a09      	ldr	r2, [pc, #36]	; (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8004ff0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	221f      	movs	r2, #31
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005000:	46c0      	nop			; (mov r8, r8)
 8005002:	46bd      	mov	sp, r7
 8005004:	b004      	add	sp, #16
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40020407 	.word	0x40020407
 800500c:	40020800 	.word	0x40020800
 8005010:	4002081c 	.word	0x4002081c
 8005014:	40020880 	.word	0x40020880

08005018 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	227f      	movs	r2, #127	; 0x7f
 8005026:	4013      	ands	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4a0a      	ldr	r2, [pc, #40]	; (8005058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800502e:	4694      	mov	ip, r2
 8005030:	4463      	add	r3, ip
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	001a      	movs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a07      	ldr	r2, [pc, #28]	; (800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800503e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3b01      	subs	r3, #1
 8005044:	2203      	movs	r2, #3
 8005046:	4013      	ands	r3, r2
 8005048:	2201      	movs	r2, #1
 800504a:	409a      	lsls	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005050:	46c0      	nop			; (mov r8, r8)
 8005052:	46bd      	mov	sp, r7
 8005054:	b004      	add	sp, #16
 8005056:	bd80      	pop	{r7, pc}
 8005058:	1000823f 	.word	0x1000823f
 800505c:	40020940 	.word	0x40020940

08005060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800506e:	e14d      	b.n	800530c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2101      	movs	r1, #1
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4091      	lsls	r1, r2
 800507a:	000a      	movs	r2, r1
 800507c:	4013      	ands	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d100      	bne.n	8005088 <HAL_GPIO_Init+0x28>
 8005086:	e13e      	b.n	8005306 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2203      	movs	r2, #3
 800508e:	4013      	ands	r3, r2
 8005090:	2b01      	cmp	r3, #1
 8005092:	d005      	beq.n	80050a0 <HAL_GPIO_Init+0x40>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2203      	movs	r2, #3
 800509a:	4013      	ands	r3, r2
 800509c:	2b02      	cmp	r3, #2
 800509e:	d130      	bne.n	8005102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	2203      	movs	r2, #3
 80050ac:	409a      	lsls	r2, r3
 80050ae:	0013      	movs	r3, r2
 80050b0:	43da      	mvns	r2, r3
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4013      	ands	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	409a      	lsls	r2, r3
 80050c2:	0013      	movs	r3, r2
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050d6:	2201      	movs	r2, #1
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	409a      	lsls	r2, r3
 80050dc:	0013      	movs	r3, r2
 80050de:	43da      	mvns	r2, r3
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4013      	ands	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	091b      	lsrs	r3, r3, #4
 80050ec:	2201      	movs	r2, #1
 80050ee:	401a      	ands	r2, r3
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	409a      	lsls	r2, r3
 80050f4:	0013      	movs	r3, r2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2203      	movs	r2, #3
 8005108:	4013      	ands	r3, r2
 800510a:	2b03      	cmp	r3, #3
 800510c:	d017      	beq.n	800513e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	2203      	movs	r2, #3
 800511a:	409a      	lsls	r2, r3
 800511c:	0013      	movs	r3, r2
 800511e:	43da      	mvns	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	4013      	ands	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	409a      	lsls	r2, r3
 8005130:	0013      	movs	r3, r2
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2203      	movs	r2, #3
 8005144:	4013      	ands	r3, r2
 8005146:	2b02      	cmp	r3, #2
 8005148:	d123      	bne.n	8005192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	08da      	lsrs	r2, r3, #3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3208      	adds	r2, #8
 8005152:	0092      	lsls	r2, r2, #2
 8005154:	58d3      	ldr	r3, [r2, r3]
 8005156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2207      	movs	r2, #7
 800515c:	4013      	ands	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	220f      	movs	r2, #15
 8005162:	409a      	lsls	r2, r3
 8005164:	0013      	movs	r3, r2
 8005166:	43da      	mvns	r2, r3
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4013      	ands	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2107      	movs	r1, #7
 8005176:	400b      	ands	r3, r1
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	409a      	lsls	r2, r3
 800517c:	0013      	movs	r3, r2
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	08da      	lsrs	r2, r3, #3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3208      	adds	r2, #8
 800518c:	0092      	lsls	r2, r2, #2
 800518e:	6939      	ldr	r1, [r7, #16]
 8005190:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	2203      	movs	r2, #3
 800519e:	409a      	lsls	r2, r3
 80051a0:	0013      	movs	r3, r2
 80051a2:	43da      	mvns	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4013      	ands	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2203      	movs	r2, #3
 80051b0:	401a      	ands	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	409a      	lsls	r2, r3
 80051b8:	0013      	movs	r3, r2
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	23c0      	movs	r3, #192	; 0xc0
 80051cc:	029b      	lsls	r3, r3, #10
 80051ce:	4013      	ands	r3, r2
 80051d0:	d100      	bne.n	80051d4 <HAL_GPIO_Init+0x174>
 80051d2:	e098      	b.n	8005306 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80051d4:	4a53      	ldr	r2, [pc, #332]	; (8005324 <HAL_GPIO_Init+0x2c4>)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	089b      	lsrs	r3, r3, #2
 80051da:	3318      	adds	r3, #24
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	589b      	ldr	r3, [r3, r2]
 80051e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2203      	movs	r2, #3
 80051e6:	4013      	ands	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	220f      	movs	r2, #15
 80051ec:	409a      	lsls	r2, r3
 80051ee:	0013      	movs	r3, r2
 80051f0:	43da      	mvns	r2, r3
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4013      	ands	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	23a0      	movs	r3, #160	; 0xa0
 80051fc:	05db      	lsls	r3, r3, #23
 80051fe:	429a      	cmp	r2, r3
 8005200:	d019      	beq.n	8005236 <HAL_GPIO_Init+0x1d6>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a48      	ldr	r2, [pc, #288]	; (8005328 <HAL_GPIO_Init+0x2c8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <HAL_GPIO_Init+0x1d2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a47      	ldr	r2, [pc, #284]	; (800532c <HAL_GPIO_Init+0x2cc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00d      	beq.n	800522e <HAL_GPIO_Init+0x1ce>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a46      	ldr	r2, [pc, #280]	; (8005330 <HAL_GPIO_Init+0x2d0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d007      	beq.n	800522a <HAL_GPIO_Init+0x1ca>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a45      	ldr	r2, [pc, #276]	; (8005334 <HAL_GPIO_Init+0x2d4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <HAL_GPIO_Init+0x1c6>
 8005222:	2304      	movs	r3, #4
 8005224:	e008      	b.n	8005238 <HAL_GPIO_Init+0x1d8>
 8005226:	2305      	movs	r3, #5
 8005228:	e006      	b.n	8005238 <HAL_GPIO_Init+0x1d8>
 800522a:	2303      	movs	r3, #3
 800522c:	e004      	b.n	8005238 <HAL_GPIO_Init+0x1d8>
 800522e:	2302      	movs	r3, #2
 8005230:	e002      	b.n	8005238 <HAL_GPIO_Init+0x1d8>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_GPIO_Init+0x1d8>
 8005236:	2300      	movs	r3, #0
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	2103      	movs	r1, #3
 800523c:	400a      	ands	r2, r1
 800523e:	00d2      	lsls	r2, r2, #3
 8005240:	4093      	lsls	r3, r2
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005248:	4936      	ldr	r1, [pc, #216]	; (8005324 <HAL_GPIO_Init+0x2c4>)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	089b      	lsrs	r3, r3, #2
 800524e:	3318      	adds	r3, #24
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005256:	4a33      	ldr	r2, [pc, #204]	; (8005324 <HAL_GPIO_Init+0x2c4>)
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	58d3      	ldr	r3, [r2, r3]
 800525c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	43da      	mvns	r2, r3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4013      	ands	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	025b      	lsls	r3, r3, #9
 8005270:	4013      	ands	r3, r2
 8005272:	d003      	beq.n	800527c <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800527c:	4929      	ldr	r1, [pc, #164]	; (8005324 <HAL_GPIO_Init+0x2c4>)
 800527e:	2280      	movs	r2, #128	; 0x80
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8005284:	4a27      	ldr	r2, [pc, #156]	; (8005324 <HAL_GPIO_Init+0x2c4>)
 8005286:	2384      	movs	r3, #132	; 0x84
 8005288:	58d3      	ldr	r3, [r2, r3]
 800528a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	43da      	mvns	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4013      	ands	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	029b      	lsls	r3, r3, #10
 800529e:	4013      	ands	r3, r2
 80052a0:	d003      	beq.n	80052aa <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80052aa:	491e      	ldr	r1, [pc, #120]	; (8005324 <HAL_GPIO_Init+0x2c4>)
 80052ac:	2284      	movs	r2, #132	; 0x84
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052b2:	4b1c      	ldr	r3, [pc, #112]	; (8005324 <HAL_GPIO_Init+0x2c4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	43da      	mvns	r2, r3
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4013      	ands	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	035b      	lsls	r3, r3, #13
 80052ca:	4013      	ands	r3, r2
 80052cc:	d003      	beq.n	80052d6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052d6:	4b13      	ldr	r3, [pc, #76]	; (8005324 <HAL_GPIO_Init+0x2c4>)
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80052dc:	4b11      	ldr	r3, [pc, #68]	; (8005324 <HAL_GPIO_Init+0x2c4>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	43da      	mvns	r2, r3
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4013      	ands	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	039b      	lsls	r3, r3, #14
 80052f4:	4013      	ands	r3, r2
 80052f6:	d003      	beq.n	8005300 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005300:	4b08      	ldr	r3, [pc, #32]	; (8005324 <HAL_GPIO_Init+0x2c4>)
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	3301      	adds	r3, #1
 800530a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	40da      	lsrs	r2, r3
 8005314:	1e13      	subs	r3, r2, #0
 8005316:	d000      	beq.n	800531a <HAL_GPIO_Init+0x2ba>
 8005318:	e6aa      	b.n	8005070 <HAL_GPIO_Init+0x10>
  }
}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	46c0      	nop			; (mov r8, r8)
 800531e:	46bd      	mov	sp, r7
 8005320:	b006      	add	sp, #24
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40021800 	.word	0x40021800
 8005328:	50000400 	.word	0x50000400
 800532c:	50000800 	.word	0x50000800
 8005330:	50000c00 	.word	0x50000c00
 8005334:	50001000 	.word	0x50001000

08005338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	0008      	movs	r0, r1
 8005342:	0011      	movs	r1, r2
 8005344:	1cbb      	adds	r3, r7, #2
 8005346:	1c02      	adds	r2, r0, #0
 8005348:	801a      	strh	r2, [r3, #0]
 800534a:	1c7b      	adds	r3, r7, #1
 800534c:	1c0a      	adds	r2, r1, #0
 800534e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005350:	1c7b      	adds	r3, r7, #1
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005358:	1cbb      	adds	r3, r7, #2
 800535a:	881a      	ldrh	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005360:	e003      	b.n	800536a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005362:	1cbb      	adds	r3, r7, #2
 8005364:	881a      	ldrh	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	629a      	str	r2, [r3, #40]	; 0x28
}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	46bd      	mov	sp, r7
 800536e:	b002      	add	sp, #8
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e082      	b.n	800548c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2241      	movs	r2, #65	; 0x41
 800538a:	5c9b      	ldrb	r3, [r3, r2]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d107      	bne.n	80053a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2240      	movs	r2, #64	; 0x40
 8005396:	2100      	movs	r1, #0
 8005398:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	0018      	movs	r0, r3
 800539e:	f7fd ff79 	bl	8003294 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2241      	movs	r2, #65	; 0x41
 80053a6:	2124      	movs	r1, #36	; 0x24
 80053a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2101      	movs	r1, #1
 80053b6:	438a      	bics	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4934      	ldr	r1, [pc, #208]	; (8005494 <HAL_I2C_Init+0x120>)
 80053c4:	400a      	ands	r2, r1
 80053c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4931      	ldr	r1, [pc, #196]	; (8005498 <HAL_I2C_Init+0x124>)
 80053d4:	400a      	ands	r2, r1
 80053d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d108      	bne.n	80053f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2180      	movs	r1, #128	; 0x80
 80053ea:	0209      	lsls	r1, r1, #8
 80053ec:	430a      	orrs	r2, r1
 80053ee:	609a      	str	r2, [r3, #8]
 80053f0:	e007      	b.n	8005402 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2184      	movs	r1, #132	; 0x84
 80053fc:	0209      	lsls	r1, r1, #8
 80053fe:	430a      	orrs	r2, r1
 8005400:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d104      	bne.n	8005414 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2280      	movs	r2, #128	; 0x80
 8005410:	0112      	lsls	r2, r2, #4
 8005412:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	491f      	ldr	r1, [pc, #124]	; (800549c <HAL_I2C_Init+0x128>)
 8005420:	430a      	orrs	r2, r1
 8005422:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	491a      	ldr	r1, [pc, #104]	; (8005498 <HAL_I2C_Init+0x124>)
 8005430:	400a      	ands	r2, r1
 8005432:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	431a      	orrs	r2, r3
 800543e:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69d9      	ldr	r1, [r3, #28]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1a      	ldr	r2, [r3, #32]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2101      	movs	r1, #1
 800546a:	430a      	orrs	r2, r1
 800546c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2241      	movs	r2, #65	; 0x41
 8005478:	2120      	movs	r1, #32
 800547a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2242      	movs	r2, #66	; 0x42
 8005486:	2100      	movs	r1, #0
 8005488:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	0018      	movs	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	b002      	add	sp, #8
 8005492:	bd80      	pop	{r7, pc}
 8005494:	f0ffffff 	.word	0xf0ffffff
 8005498:	ffff7fff 	.word	0xffff7fff
 800549c:	02008000 	.word	0x02008000

080054a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b089      	sub	sp, #36	; 0x24
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	0008      	movs	r0, r1
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	0019      	movs	r1, r3
 80054ae:	230a      	movs	r3, #10
 80054b0:	18fb      	adds	r3, r7, r3
 80054b2:	1c02      	adds	r2, r0, #0
 80054b4:	801a      	strh	r2, [r3, #0]
 80054b6:	2308      	movs	r3, #8
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	1c0a      	adds	r2, r1, #0
 80054bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2241      	movs	r2, #65	; 0x41
 80054c2:	5c9b      	ldrb	r3, [r3, r2]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d000      	beq.n	80054cc <HAL_I2C_Master_Transmit+0x2c>
 80054ca:	e0e7      	b.n	800569c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2240      	movs	r2, #64	; 0x40
 80054d0:	5c9b      	ldrb	r3, [r3, r2]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_I2C_Master_Transmit+0x3a>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e0e1      	b.n	800569e <HAL_I2C_Master_Transmit+0x1fe>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2240      	movs	r2, #64	; 0x40
 80054de:	2101      	movs	r1, #1
 80054e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054e2:	f7fe fc2b 	bl	8003d3c <HAL_GetTick>
 80054e6:	0003      	movs	r3, r0
 80054e8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	0219      	lsls	r1, r3, #8
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2319      	movs	r3, #25
 80054f6:	2201      	movs	r2, #1
 80054f8:	f001 febc 	bl	8007274 <I2C_WaitOnFlagUntilTimeout>
 80054fc:	1e03      	subs	r3, r0, #0
 80054fe:	d001      	beq.n	8005504 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0cc      	b.n	800569e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2241      	movs	r2, #65	; 0x41
 8005508:	2121      	movs	r1, #33	; 0x21
 800550a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2242      	movs	r2, #66	; 0x42
 8005510:	2110      	movs	r1, #16
 8005512:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2208      	movs	r2, #8
 8005524:	18ba      	adds	r2, r7, r2
 8005526:	8812      	ldrh	r2, [r2, #0]
 8005528:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	2bff      	cmp	r3, #255	; 0xff
 8005538:	d911      	bls.n	800555e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	22ff      	movs	r2, #255	; 0xff
 800553e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005544:	b2da      	uxtb	r2, r3
 8005546:	2380      	movs	r3, #128	; 0x80
 8005548:	045c      	lsls	r4, r3, #17
 800554a:	230a      	movs	r3, #10
 800554c:	18fb      	adds	r3, r7, r3
 800554e:	8819      	ldrh	r1, [r3, #0]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	4b55      	ldr	r3, [pc, #340]	; (80056a8 <HAL_I2C_Master_Transmit+0x208>)
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	0023      	movs	r3, r4
 8005558:	f002 f82c 	bl	80075b4 <I2C_TransferConfig>
 800555c:	e075      	b.n	800564a <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556c:	b2da      	uxtb	r2, r3
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	049c      	lsls	r4, r3, #18
 8005572:	230a      	movs	r3, #10
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	8819      	ldrh	r1, [r3, #0]
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	4b4b      	ldr	r3, [pc, #300]	; (80056a8 <HAL_I2C_Master_Transmit+0x208>)
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	0023      	movs	r3, r4
 8005580:	f002 f818 	bl	80075b4 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005584:	e061      	b.n	800564a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	0018      	movs	r0, r3
 800558e:	f001 feb0 	bl	80072f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005592:	1e03      	subs	r3, r0, #0
 8005594:	d001      	beq.n	800559a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e081      	b.n	800569e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	781a      	ldrb	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d03a      	beq.n	800564a <HAL_I2C_Master_Transmit+0x1aa>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d136      	bne.n	800564a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	0013      	movs	r3, r2
 80055e6:	2200      	movs	r2, #0
 80055e8:	2180      	movs	r1, #128	; 0x80
 80055ea:	f001 fe43 	bl	8007274 <I2C_WaitOnFlagUntilTimeout>
 80055ee:	1e03      	subs	r3, r0, #0
 80055f0:	d001      	beq.n	80055f6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e053      	b.n	800569e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2bff      	cmp	r3, #255	; 0xff
 80055fe:	d911      	bls.n	8005624 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	22ff      	movs	r2, #255	; 0xff
 8005604:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560a:	b2da      	uxtb	r2, r3
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	045c      	lsls	r4, r3, #17
 8005610:	230a      	movs	r3, #10
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	8819      	ldrh	r1, [r3, #0]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	2300      	movs	r3, #0
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	0023      	movs	r3, r4
 800561e:	f001 ffc9 	bl	80075b4 <I2C_TransferConfig>
 8005622:	e012      	b.n	800564a <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005632:	b2da      	uxtb	r2, r3
 8005634:	2380      	movs	r3, #128	; 0x80
 8005636:	049c      	lsls	r4, r3, #18
 8005638:	230a      	movs	r3, #10
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	8819      	ldrh	r1, [r3, #0]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	2300      	movs	r3, #0
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	0023      	movs	r3, r4
 8005646:	f001 ffb5 	bl	80075b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d198      	bne.n	8005586 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	0018      	movs	r0, r3
 800565c:	f001 fe88 	bl	8007370 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005660:	1e03      	subs	r3, r0, #0
 8005662:	d001      	beq.n	8005668 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e01a      	b.n	800569e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2220      	movs	r2, #32
 800566e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	490c      	ldr	r1, [pc, #48]	; (80056ac <HAL_I2C_Master_Transmit+0x20c>)
 800567c:	400a      	ands	r2, r1
 800567e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2241      	movs	r2, #65	; 0x41
 8005684:	2120      	movs	r1, #32
 8005686:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2242      	movs	r2, #66	; 0x42
 800568c:	2100      	movs	r1, #0
 800568e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2240      	movs	r2, #64	; 0x40
 8005694:	2100      	movs	r1, #0
 8005696:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	e000      	b.n	800569e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800569c:	2302      	movs	r3, #2
  }
}
 800569e:	0018      	movs	r0, r3
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b007      	add	sp, #28
 80056a4:	bd90      	pop	{r4, r7, pc}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	80002000 	.word	0x80002000
 80056ac:	fe00e800 	.word	0xfe00e800

080056b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b089      	sub	sp, #36	; 0x24
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	0008      	movs	r0, r1
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	0019      	movs	r1, r3
 80056be:	230a      	movs	r3, #10
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	1c02      	adds	r2, r0, #0
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	2308      	movs	r3, #8
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	1c0a      	adds	r2, r1, #0
 80056cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2241      	movs	r2, #65	; 0x41
 80056d2:	5c9b      	ldrb	r3, [r3, r2]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d000      	beq.n	80056dc <HAL_I2C_Master_Receive+0x2c>
 80056da:	e0e8      	b.n	80058ae <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2240      	movs	r2, #64	; 0x40
 80056e0:	5c9b      	ldrb	r3, [r3, r2]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_I2C_Master_Receive+0x3a>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e0e2      	b.n	80058b0 <HAL_I2C_Master_Receive+0x200>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2240      	movs	r2, #64	; 0x40
 80056ee:	2101      	movs	r1, #1
 80056f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056f2:	f7fe fb23 	bl	8003d3c <HAL_GetTick>
 80056f6:	0003      	movs	r3, r0
 80056f8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056fa:	2380      	movs	r3, #128	; 0x80
 80056fc:	0219      	lsls	r1, r3, #8
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	2319      	movs	r3, #25
 8005706:	2201      	movs	r2, #1
 8005708:	f001 fdb4 	bl	8007274 <I2C_WaitOnFlagUntilTimeout>
 800570c:	1e03      	subs	r3, r0, #0
 800570e:	d001      	beq.n	8005714 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0cd      	b.n	80058b0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2241      	movs	r2, #65	; 0x41
 8005718:	2122      	movs	r1, #34	; 0x22
 800571a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2242      	movs	r2, #66	; 0x42
 8005720:	2110      	movs	r1, #16
 8005722:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2208      	movs	r2, #8
 8005734:	18ba      	adds	r2, r7, r2
 8005736:	8812      	ldrh	r2, [r2, #0]
 8005738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2bff      	cmp	r3, #255	; 0xff
 8005748:	d911      	bls.n	800576e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	22ff      	movs	r2, #255	; 0xff
 800574e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005754:	b2da      	uxtb	r2, r3
 8005756:	2380      	movs	r3, #128	; 0x80
 8005758:	045c      	lsls	r4, r3, #17
 800575a:	230a      	movs	r3, #10
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	8819      	ldrh	r1, [r3, #0]
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	4b55      	ldr	r3, [pc, #340]	; (80058b8 <HAL_I2C_Master_Receive+0x208>)
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	0023      	movs	r3, r4
 8005768:	f001 ff24 	bl	80075b4 <I2C_TransferConfig>
 800576c:	e076      	b.n	800585c <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577c:	b2da      	uxtb	r2, r3
 800577e:	2380      	movs	r3, #128	; 0x80
 8005780:	049c      	lsls	r4, r3, #18
 8005782:	230a      	movs	r3, #10
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	8819      	ldrh	r1, [r3, #0]
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	4b4b      	ldr	r3, [pc, #300]	; (80058b8 <HAL_I2C_Master_Receive+0x208>)
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	0023      	movs	r3, r4
 8005790:	f001 ff10 	bl	80075b4 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005794:	e062      	b.n	800585c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	0018      	movs	r0, r3
 800579e:	f001 fe23 	bl	80073e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057a2:	1e03      	subs	r3, r0, #0
 80057a4:	d001      	beq.n	80057aa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e082      	b.n	80058b0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d03a      	beq.n	800585c <HAL_I2C_Master_Receive+0x1ac>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d136      	bne.n	800585c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	0013      	movs	r3, r2
 80057f8:	2200      	movs	r2, #0
 80057fa:	2180      	movs	r1, #128	; 0x80
 80057fc:	f001 fd3a 	bl	8007274 <I2C_WaitOnFlagUntilTimeout>
 8005800:	1e03      	subs	r3, r0, #0
 8005802:	d001      	beq.n	8005808 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e053      	b.n	80058b0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580c:	b29b      	uxth	r3, r3
 800580e:	2bff      	cmp	r3, #255	; 0xff
 8005810:	d911      	bls.n	8005836 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	22ff      	movs	r2, #255	; 0xff
 8005816:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581c:	b2da      	uxtb	r2, r3
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	045c      	lsls	r4, r3, #17
 8005822:	230a      	movs	r3, #10
 8005824:	18fb      	adds	r3, r7, r3
 8005826:	8819      	ldrh	r1, [r3, #0]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	2300      	movs	r3, #0
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	0023      	movs	r3, r4
 8005830:	f001 fec0 	bl	80075b4 <I2C_TransferConfig>
 8005834:	e012      	b.n	800585c <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005844:	b2da      	uxtb	r2, r3
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	049c      	lsls	r4, r3, #18
 800584a:	230a      	movs	r3, #10
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	8819      	ldrh	r1, [r3, #0]
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	2300      	movs	r3, #0
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	0023      	movs	r3, r4
 8005858:	f001 feac 	bl	80075b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d197      	bne.n	8005796 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	0018      	movs	r0, r3
 800586e:	f001 fd7f 	bl	8007370 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005872:	1e03      	subs	r3, r0, #0
 8005874:	d001      	beq.n	800587a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e01a      	b.n	80058b0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2220      	movs	r2, #32
 8005880:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	490b      	ldr	r1, [pc, #44]	; (80058bc <HAL_I2C_Master_Receive+0x20c>)
 800588e:	400a      	ands	r2, r1
 8005890:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2241      	movs	r2, #65	; 0x41
 8005896:	2120      	movs	r1, #32
 8005898:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2242      	movs	r2, #66	; 0x42
 800589e:	2100      	movs	r1, #0
 80058a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2240      	movs	r2, #64	; 0x40
 80058a6:	2100      	movs	r1, #0
 80058a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e000      	b.n	80058b0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
  }
}
 80058b0:	0018      	movs	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	b007      	add	sp, #28
 80058b6:	bd90      	pop	{r4, r7, pc}
 80058b8:	80002400 	.word	0x80002400
 80058bc:	fe00e800 	.word	0xfe00e800

080058c0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80058c0:	b5b0      	push	{r4, r5, r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	0008      	movs	r0, r1
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	0019      	movs	r1, r3
 80058ce:	230a      	movs	r3, #10
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	1c02      	adds	r2, r0, #0
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	2308      	movs	r3, #8
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	1c0a      	adds	r2, r1, #0
 80058dc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2241      	movs	r2, #65	; 0x41
 80058e2:	5c9b      	ldrb	r3, [r3, r2]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b20      	cmp	r3, #32
 80058e8:	d000      	beq.n	80058ec <HAL_I2C_Master_Transmit_DMA+0x2c>
 80058ea:	e0dd      	b.n	8005aa8 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	2380      	movs	r3, #128	; 0x80
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	401a      	ands	r2, r3
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d101      	bne.n	8005904 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8005900:	2302      	movs	r3, #2
 8005902:	e0d2      	b.n	8005aaa <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2240      	movs	r2, #64	; 0x40
 8005908:	5c9b      	ldrb	r3, [r3, r2]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_I2C_Master_Transmit_DMA+0x52>
 800590e:	2302      	movs	r3, #2
 8005910:	e0cb      	b.n	8005aaa <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2240      	movs	r2, #64	; 0x40
 8005916:	2101      	movs	r1, #1
 8005918:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2241      	movs	r2, #65	; 0x41
 800591e:	2121      	movs	r1, #33	; 0x21
 8005920:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2242      	movs	r2, #66	; 0x42
 8005926:	2110      	movs	r1, #16
 8005928:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2208      	movs	r2, #8
 800593a:	18ba      	adds	r2, r7, r2
 800593c:	8812      	ldrh	r2, [r2, #0]
 800593e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4a5c      	ldr	r2, [pc, #368]	; (8005ab4 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8005944:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a5b      	ldr	r2, [pc, #364]	; (8005ab8 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800594a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	2bff      	cmp	r3, #255	; 0xff
 8005954:	d906      	bls.n	8005964 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	22ff      	movs	r2, #255	; 0xff
 800595a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	045b      	lsls	r3, r3, #17
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	e007      	b.n	8005974 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800596e:	2380      	movs	r3, #128	; 0x80
 8005970:	049b      	lsls	r3, r3, #18
 8005972:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005978:	2b00      	cmp	r3, #0
 800597a:	d100      	bne.n	800597e <HAL_I2C_Master_Transmit_DMA+0xbe>
 800597c:	e078      	b.n	8005a70 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	2b00      	cmp	r3, #0
 8005984:	d023      	beq.n	80059ce <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	4a4c      	ldr	r2, [pc, #304]	; (8005abc <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800598c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	4a4b      	ldr	r2, [pc, #300]	; (8005ac0 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8005994:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	2200      	movs	r2, #0
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3328      	adds	r3, #40	; 0x28
 80059b2:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80059b8:	2513      	movs	r5, #19
 80059ba:	197c      	adds	r4, r7, r5
 80059bc:	f7ff f888 	bl	8004ad0 <HAL_DMA_Start_IT>
 80059c0:	0003      	movs	r3, r0
 80059c2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80059c4:	197b      	adds	r3, r7, r5
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d13d      	bne.n	8005a48 <HAL_I2C_Master_Transmit_DMA+0x188>
 80059cc:	e013      	b.n	80059f6 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2241      	movs	r2, #65	; 0x41
 80059d2:	2120      	movs	r1, #32
 80059d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2242      	movs	r2, #66	; 0x42
 80059da:	2100      	movs	r1, #0
 80059dc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	2280      	movs	r2, #128	; 0x80
 80059e4:	431a      	orrs	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2240      	movs	r2, #64	; 0x40
 80059ee:	2100      	movs	r1, #0
 80059f0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e059      	b.n	8005aaa <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	697c      	ldr	r4, [r7, #20]
 80059fe:	230a      	movs	r3, #10
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	8819      	ldrh	r1, [r3, #0]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	4b2f      	ldr	r3, [pc, #188]	; (8005ac4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	0023      	movs	r3, r4
 8005a0c:	f001 fdd2 	bl	80075b4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2240      	movs	r2, #64	; 0x40
 8005a26:	2100      	movs	r1, #0
 8005a28:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2110      	movs	r1, #16
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f001 fdf6 	bl	8007620 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2180      	movs	r1, #128	; 0x80
 8005a40:	01c9      	lsls	r1, r1, #7
 8005a42:	430a      	orrs	r2, r1
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e02d      	b.n	8005aa4 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2241      	movs	r2, #65	; 0x41
 8005a4c:	2120      	movs	r1, #32
 8005a4e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2242      	movs	r2, #66	; 0x42
 8005a54:	2100      	movs	r1, #0
 8005a56:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2240      	movs	r2, #64	; 0x40
 8005a68:	2100      	movs	r1, #0
 8005a6a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e01c      	b.n	8005aaa <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8005a74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	049c      	lsls	r4, r3, #18
 8005a80:	230a      	movs	r3, #10
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	8819      	ldrh	r1, [r3, #0]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	4b0e      	ldr	r3, [pc, #56]	; (8005ac4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	0023      	movs	r3, r4
 8005a8e:	f001 fd91 	bl	80075b4 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2240      	movs	r2, #64	; 0x40
 8005a96:	2100      	movs	r1, #0
 8005a98:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f001 fdbe 	bl	8007620 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e000      	b.n	8005aaa <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005aa8:	2302      	movs	r3, #2
  }
}
 8005aaa:	0018      	movs	r0, r3
 8005aac:	46bd      	mov	sp, r7
 8005aae:	b006      	add	sp, #24
 8005ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	ffff0000 	.word	0xffff0000
 8005ab8:	0800632d 	.word	0x0800632d
 8005abc:	080070c5 	.word	0x080070c5
 8005ac0:	08007205 	.word	0x08007205
 8005ac4:	80002000 	.word	0x80002000
 8005ac8:	08005e81 	.word	0x08005e81

08005acc <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005acc:	b5b0      	push	{r4, r5, r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	0008      	movs	r0, r1
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	0019      	movs	r1, r3
 8005ada:	230a      	movs	r3, #10
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	1c02      	adds	r2, r0, #0
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	1c0a      	adds	r2, r1, #0
 8005ae8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2241      	movs	r2, #65	; 0x41
 8005aee:	5c9b      	ldrb	r3, [r3, r2]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	d000      	beq.n	8005af8 <HAL_I2C_Master_Receive_DMA+0x2c>
 8005af6:	e0dd      	b.n	8005cb4 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	401a      	ands	r2, r3
 8005b04:	2380      	movs	r3, #128	; 0x80
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d101      	bne.n	8005b10 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e0d2      	b.n	8005cb6 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2240      	movs	r2, #64	; 0x40
 8005b14:	5c9b      	ldrb	r3, [r3, r2]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_I2C_Master_Receive_DMA+0x52>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e0cb      	b.n	8005cb6 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2240      	movs	r2, #64	; 0x40
 8005b22:	2101      	movs	r1, #1
 8005b24:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2241      	movs	r2, #65	; 0x41
 8005b2a:	2122      	movs	r1, #34	; 0x22
 8005b2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2242      	movs	r2, #66	; 0x42
 8005b32:	2110      	movs	r1, #16
 8005b34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2208      	movs	r2, #8
 8005b46:	18ba      	adds	r2, r7, r2
 8005b48:	8812      	ldrh	r2, [r2, #0]
 8005b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a5c      	ldr	r2, [pc, #368]	; (8005cc0 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8005b50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a5b      	ldr	r2, [pc, #364]	; (8005cc4 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8005b56:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2bff      	cmp	r3, #255	; 0xff
 8005b60:	d906      	bls.n	8005b70 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	22ff      	movs	r2, #255	; 0xff
 8005b66:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005b68:	2380      	movs	r3, #128	; 0x80
 8005b6a:	045b      	lsls	r3, r3, #17
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	e007      	b.n	8005b80 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005b7a:	2380      	movs	r3, #128	; 0x80
 8005b7c:	049b      	lsls	r3, r3, #18
 8005b7e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d100      	bne.n	8005b8a <HAL_I2C_Master_Receive_DMA+0xbe>
 8005b88:	e078      	b.n	8005c7c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d023      	beq.n	8005bda <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	4a4c      	ldr	r2, [pc, #304]	; (8005cc8 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8005b98:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9e:	4a4b      	ldr	r2, [pc, #300]	; (8005ccc <HAL_I2C_Master_Receive_DMA+0x200>)
 8005ba0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	2200      	movs	r2, #0
 8005bb0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3324      	adds	r3, #36	; 0x24
 8005bbc:	0019      	movs	r1, r3
 8005bbe:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005bc4:	2513      	movs	r5, #19
 8005bc6:	197c      	adds	r4, r7, r5
 8005bc8:	f7fe ff82 	bl	8004ad0 <HAL_DMA_Start_IT>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005bd0:	197b      	adds	r3, r7, r5
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d13d      	bne.n	8005c54 <HAL_I2C_Master_Receive_DMA+0x188>
 8005bd8:	e013      	b.n	8005c02 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2241      	movs	r2, #65	; 0x41
 8005bde:	2120      	movs	r1, #32
 8005be0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2242      	movs	r2, #66	; 0x42
 8005be6:	2100      	movs	r1, #0
 8005be8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	2280      	movs	r2, #128	; 0x80
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2240      	movs	r2, #64	; 0x40
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e059      	b.n	8005cb6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	697c      	ldr	r4, [r7, #20]
 8005c0a:	230a      	movs	r3, #10
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	8819      	ldrh	r1, [r3, #0]
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	4b2f      	ldr	r3, [pc, #188]	; (8005cd0 <HAL_I2C_Master_Receive_DMA+0x204>)
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	0023      	movs	r3, r4
 8005c18:	f001 fccc 	bl	80075b4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2240      	movs	r2, #64	; 0x40
 8005c32:	2100      	movs	r1, #0
 8005c34:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2110      	movs	r1, #16
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f001 fcf0 	bl	8007620 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2180      	movs	r1, #128	; 0x80
 8005c4c:	0209      	lsls	r1, r1, #8
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	e02d      	b.n	8005cb0 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2241      	movs	r2, #65	; 0x41
 8005c58:	2120      	movs	r1, #32
 8005c5a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2242      	movs	r2, #66	; 0x42
 8005c60:	2100      	movs	r1, #0
 8005c62:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c68:	2210      	movs	r2, #16
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2240      	movs	r2, #64	; 0x40
 8005c74:	2100      	movs	r1, #0
 8005c76:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e01c      	b.n	8005cb6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4a15      	ldr	r2, [pc, #84]	; (8005cd4 <HAL_I2C_Master_Receive_DMA+0x208>)
 8005c80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	049c      	lsls	r4, r3, #18
 8005c8c:	230a      	movs	r3, #10
 8005c8e:	18fb      	adds	r3, r7, r3
 8005c90:	8819      	ldrh	r1, [r3, #0]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <HAL_I2C_Master_Receive_DMA+0x204>)
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	0023      	movs	r3, r4
 8005c9a:	f001 fc8b 	bl	80075b4 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2240      	movs	r2, #64	; 0x40
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2101      	movs	r1, #1
 8005caa:	0018      	movs	r0, r3
 8005cac:	f001 fcb8 	bl	8007620 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e000      	b.n	8005cb6 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	b006      	add	sp, #24
 8005cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	ffff0000 	.word	0xffff0000
 8005cc4:	0800632d 	.word	0x0800632d
 8005cc8:	08007165 	.word	0x08007165
 8005ccc:	08007205 	.word	0x08007205
 8005cd0:	80002400 	.word	0x80002400
 8005cd4:	08005e81 	.word	0x08005e81

08005cd8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
  }
}
 8005d04:	46c0      	nop			; (mov r8, r8)
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b004      	add	sp, #16
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	001a      	movs	r2, r3
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d010      	beq.n	8005d52 <HAL_I2C_ER_IRQHandler+0x46>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	09db      	lsrs	r3, r3, #7
 8005d34:	001a      	movs	r2, r3
 8005d36:	2301      	movs	r3, #1
 8005d38:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d3a:	d00a      	beq.n	8005d52 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d40:	2201      	movs	r2, #1
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2280      	movs	r2, #128	; 0x80
 8005d4e:	0052      	lsls	r2, r2, #1
 8005d50:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	0a9b      	lsrs	r3, r3, #10
 8005d56:	001a      	movs	r2, r3
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	d010      	beq.n	8005d80 <HAL_I2C_ER_IRQHandler+0x74>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	09db      	lsrs	r3, r3, #7
 8005d62:	001a      	movs	r2, r3
 8005d64:	2301      	movs	r3, #1
 8005d66:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d68:	d00a      	beq.n	8005d80 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6e:	2208      	movs	r2, #8
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2280      	movs	r2, #128	; 0x80
 8005d7c:	00d2      	lsls	r2, r2, #3
 8005d7e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	0a5b      	lsrs	r3, r3, #9
 8005d84:	001a      	movs	r2, r3
 8005d86:	2301      	movs	r3, #1
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d010      	beq.n	8005dae <HAL_I2C_ER_IRQHandler+0xa2>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	09db      	lsrs	r3, r3, #7
 8005d90:	001a      	movs	r2, r3
 8005d92:	2301      	movs	r3, #1
 8005d94:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d96:	d00a      	beq.n	8005dae <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2280      	movs	r2, #128	; 0x80
 8005daa:	0092      	lsls	r2, r2, #2
 8005dac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	220b      	movs	r2, #11
 8005db8:	4013      	ands	r3, r2
 8005dba:	d005      	beq.n	8005dc8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	0011      	movs	r1, r2
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f001 f850 	bl	8006e68 <I2C_ITError>
  }
}
 8005dc8:	46c0      	nop			; (mov r8, r8)
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b006      	add	sp, #24
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005dd8:	46c0      	nop			; (mov r8, r8)
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	b002      	add	sp, #8
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005de8:	46c0      	nop			; (mov r8, r8)
 8005dea:	46bd      	mov	sp, r7
 8005dec:	b002      	add	sp, #8
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005df8:	46c0      	nop			; (mov r8, r8)
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	b002      	add	sp, #8
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e08:	46c0      	nop			; (mov r8, r8)
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	b002      	add	sp, #8
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	0008      	movs	r0, r1
 8005e1a:	0011      	movs	r1, r2
 8005e1c:	1cfb      	adds	r3, r7, #3
 8005e1e:	1c02      	adds	r2, r0, #0
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	003b      	movs	r3, r7
 8005e24:	1c0a      	adds	r2, r1, #0
 8005e26:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e28:	46c0      	nop			; (mov r8, r8)
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005e38:	46c0      	nop			; (mov r8, r8)
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005e48:	46c0      	nop			; (mov r8, r8)
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	b002      	add	sp, #8
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b002      	add	sp, #8
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e68:	46c0      	nop			; (mov r8, r8)
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b002      	add	sp, #8
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b002      	add	sp, #8
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b089      	sub	sp, #36	; 0x24
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2240      	movs	r2, #64	; 0x40
 8005e94:	5c9b      	ldrb	r3, [r3, r2]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <I2C_Master_ISR_IT+0x1e>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e12b      	b.n	80060f6 <I2C_Master_ISR_IT+0x276>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2240      	movs	r2, #64	; 0x40
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	001a      	movs	r2, r3
 8005eac:	2301      	movs	r3, #1
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d014      	beq.n	8005edc <I2C_Master_ISR_IT+0x5c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	091b      	lsrs	r3, r3, #4
 8005eb6:	001a      	movs	r2, r3
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ebc:	d00e      	beq.n	8005edc <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2210      	movs	r2, #16
 8005ec4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eca:	2204      	movs	r2, #4
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f001 f8d2 	bl	800707e <I2C_Flush_TXDR>
 8005eda:	e0f5      	b.n	80060c8 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	089b      	lsrs	r3, r3, #2
 8005ee0:	001a      	movs	r2, r3
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d023      	beq.n	8005f30 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	089b      	lsrs	r3, r3, #2
 8005eec:	001a      	movs	r2, r3
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ef2:	d01d      	beq.n	8005f30 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	4393      	bics	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f2e:	e0cb      	b.n	80060c8 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	085b      	lsrs	r3, r3, #1
 8005f34:	001a      	movs	r2, r3
 8005f36:	2301      	movs	r3, #1
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d01e      	beq.n	8005f7a <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	085b      	lsrs	r3, r3, #1
 8005f40:	001a      	movs	r2, r3
 8005f42:	2301      	movs	r3, #1
 8005f44:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f46:	d018      	beq.n	8005f7a <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f78:	e0a6      	b.n	80060c8 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	09db      	lsrs	r3, r3, #7
 8005f7e:	001a      	movs	r2, r3
 8005f80:	2301      	movs	r3, #1
 8005f82:	4013      	ands	r3, r2
 8005f84:	d100      	bne.n	8005f88 <I2C_Master_ISR_IT+0x108>
 8005f86:	e06b      	b.n	8006060 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	099b      	lsrs	r3, r3, #6
 8005f8c:	001a      	movs	r2, r3
 8005f8e:	2301      	movs	r3, #1
 8005f90:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f92:	d065      	beq.n	8006060 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d04a      	beq.n	8006034 <I2C_Master_ISR_IT+0x1b4>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d146      	bne.n	8006034 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	2112      	movs	r1, #18
 8005fb0:	187b      	adds	r3, r7, r1
 8005fb2:	0592      	lsls	r2, r2, #22
 8005fb4:	0d92      	lsrs	r2, r2, #22
 8005fb6:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2bff      	cmp	r3, #255	; 0xff
 8005fc0:	d910      	bls.n	8005fe4 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	22ff      	movs	r2, #255	; 0xff
 8005fc6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	2380      	movs	r3, #128	; 0x80
 8005fd0:	045c      	lsls	r4, r3, #17
 8005fd2:	187b      	adds	r3, r7, r1
 8005fd4:	8819      	ldrh	r1, [r3, #0]
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	0023      	movs	r3, r4
 8005fde:	f001 fae9 	bl	80075b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fe2:	e03c      	b.n	800605e <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	4a43      	ldr	r2, [pc, #268]	; (8006100 <I2C_Master_ISR_IT+0x280>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00e      	beq.n	8006016 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006002:	2312      	movs	r3, #18
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	8819      	ldrh	r1, [r3, #0]
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	2300      	movs	r3, #0
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	0023      	movs	r3, r4
 8006010:	f001 fad0 	bl	80075b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006014:	e023      	b.n	800605e <I2C_Master_ISR_IT+0x1de>
                                hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601a:	b2da      	uxtb	r2, r3
 800601c:	2380      	movs	r3, #128	; 0x80
 800601e:	049c      	lsls	r4, r3, #18
 8006020:	2312      	movs	r3, #18
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	8819      	ldrh	r1, [r3, #0]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	2300      	movs	r3, #0
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	0023      	movs	r3, r4
 800602e:	f001 fac1 	bl	80075b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006032:	e014      	b.n	800605e <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	049b      	lsls	r3, r3, #18
 800603e:	401a      	ands	r2, r3
 8006040:	2380      	movs	r3, #128	; 0x80
 8006042:	049b      	lsls	r3, r3, #18
 8006044:	429a      	cmp	r2, r3
 8006046:	d004      	beq.n	8006052 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	0018      	movs	r0, r3
 800604c:	f000 fc14 	bl	8006878 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006050:	e03a      	b.n	80060c8 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2140      	movs	r1, #64	; 0x40
 8006056:	0018      	movs	r0, r3
 8006058:	f000 ff06 	bl	8006e68 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800605c:	e034      	b.n	80060c8 <I2C_Master_ISR_IT+0x248>
 800605e:	e033      	b.n	80060c8 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	099b      	lsrs	r3, r3, #6
 8006064:	001a      	movs	r2, r3
 8006066:	2301      	movs	r3, #1
 8006068:	4013      	ands	r3, r2
 800606a:	d02d      	beq.n	80060c8 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	099b      	lsrs	r3, r3, #6
 8006070:	001a      	movs	r2, r3
 8006072:	2301      	movs	r3, #1
 8006074:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006076:	d027      	beq.n	80060c8 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d11d      	bne.n	80060be <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	2380      	movs	r3, #128	; 0x80
 800608a:	049b      	lsls	r3, r3, #18
 800608c:	401a      	ands	r2, r3
 800608e:	2380      	movs	r3, #128	; 0x80
 8006090:	049b      	lsls	r3, r3, #18
 8006092:	429a      	cmp	r2, r3
 8006094:	d018      	beq.n	80060c8 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	4a19      	ldr	r2, [pc, #100]	; (8006100 <I2C_Master_ISR_IT+0x280>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d109      	bne.n	80060b4 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2180      	movs	r1, #128	; 0x80
 80060ac:	01c9      	lsls	r1, r1, #7
 80060ae:	430a      	orrs	r2, r1
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	e009      	b.n	80060c8 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	0018      	movs	r0, r3
 80060b8:	f000 fbde 	bl	8006878 <I2C_ITMasterSeqCplt>
 80060bc:	e004      	b.n	80060c8 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2140      	movs	r1, #64	; 0x40
 80060c2:	0018      	movs	r0, r3
 80060c4:	f000 fed0 	bl	8006e68 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	001a      	movs	r2, r3
 80060ce:	2301      	movs	r3, #1
 80060d0:	4013      	ands	r3, r2
 80060d2:	d00b      	beq.n	80060ec <I2C_Master_ISR_IT+0x26c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	001a      	movs	r2, r3
 80060da:	2301      	movs	r3, #1
 80060dc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060de:	d005      	beq.n	80060ec <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	0011      	movs	r1, r2
 80060e6:	0018      	movs	r0, r3
 80060e8:	f000 fc6e 	bl	80069c8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2240      	movs	r2, #64	; 0x40
 80060f0:	2100      	movs	r1, #0
 80060f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	0018      	movs	r0, r3
 80060f8:	46bd      	mov	sp, r7
 80060fa:	b007      	add	sp, #28
 80060fc:	bd90      	pop	{r4, r7, pc}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	ffff0000 	.word	0xffff0000

08006104 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2240      	movs	r2, #64	; 0x40
 800611e:	5c9b      	ldrb	r3, [r3, r2]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <I2C_Slave_ISR_IT+0x24>
 8006124:	2302      	movs	r3, #2
 8006126:	e0fa      	b.n	800631e <I2C_Slave_ISR_IT+0x21a>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2240      	movs	r2, #64	; 0x40
 800612c:	2101      	movs	r1, #1
 800612e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	001a      	movs	r2, r3
 8006136:	2301      	movs	r3, #1
 8006138:	4013      	ands	r3, r2
 800613a:	d00b      	beq.n	8006154 <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	001a      	movs	r2, r3
 8006142:	2301      	movs	r3, #1
 8006144:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006146:	d005      	beq.n	8006154 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	0011      	movs	r1, r2
 800614e:	0018      	movs	r0, r3
 8006150:	f000 fd0c 	bl	8006b6c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	091b      	lsrs	r3, r3, #4
 8006158:	001a      	movs	r2, r3
 800615a:	2301      	movs	r3, #1
 800615c:	4013      	ands	r3, r2
 800615e:	d054      	beq.n	800620a <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	091b      	lsrs	r3, r3, #4
 8006164:	001a      	movs	r2, r3
 8006166:	2301      	movs	r3, #1
 8006168:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800616a:	d04e      	beq.n	800620a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d12d      	bne.n	80061d2 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2241      	movs	r2, #65	; 0x41
 800617a:	5c9b      	ldrb	r3, [r3, r2]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b28      	cmp	r3, #40	; 0x28
 8006180:	d10b      	bne.n	800619a <I2C_Slave_ISR_IT+0x96>
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	2380      	movs	r3, #128	; 0x80
 8006186:	049b      	lsls	r3, r3, #18
 8006188:	429a      	cmp	r2, r3
 800618a:	d106      	bne.n	800619a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	0011      	movs	r1, r2
 8006192:	0018      	movs	r0, r3
 8006194:	f000 fe0e 	bl	8006db4 <I2C_ITListenCplt>
 8006198:	e036      	b.n	8006208 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2241      	movs	r2, #65	; 0x41
 800619e:	5c9b      	ldrb	r3, [r3, r2]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b29      	cmp	r3, #41	; 0x29
 80061a4:	d110      	bne.n	80061c8 <I2C_Slave_ISR_IT+0xc4>
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4a5f      	ldr	r2, [pc, #380]	; (8006328 <I2C_Slave_ISR_IT+0x224>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00c      	beq.n	80061c8 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2210      	movs	r2, #16
 80061b4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	0018      	movs	r0, r3
 80061ba:	f000 ff60 	bl	800707e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	0018      	movs	r0, r3
 80061c2:	f000 fb9b 	bl	80068fc <I2C_ITSlaveSeqCplt>
 80061c6:	e01f      	b.n	8006208 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2210      	movs	r2, #16
 80061ce:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80061d0:	e09d      	b.n	800630e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2210      	movs	r2, #16
 80061d8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061de:	2204      	movs	r2, #4
 80061e0:	431a      	orrs	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <I2C_Slave_ISR_IT+0xf4>
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	2380      	movs	r3, #128	; 0x80
 80061f0:	045b      	lsls	r3, r3, #17
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d000      	beq.n	80061f8 <I2C_Slave_ISR_IT+0xf4>
 80061f6:	e08a      	b.n	800630e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	0011      	movs	r1, r2
 8006200:	0018      	movs	r0, r3
 8006202:	f000 fe31 	bl	8006e68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006206:	e082      	b.n	800630e <I2C_Slave_ISR_IT+0x20a>
 8006208:	e081      	b.n	800630e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	089b      	lsrs	r3, r3, #2
 800620e:	001a      	movs	r2, r3
 8006210:	2301      	movs	r3, #1
 8006212:	4013      	ands	r3, r2
 8006214:	d031      	beq.n	800627a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	089b      	lsrs	r3, r3, #2
 800621a:	001a      	movs	r2, r3
 800621c:	2301      	movs	r3, #1
 800621e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006220:	d02b      	beq.n	800627a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d018      	beq.n	800625e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d154      	bne.n	8006312 <I2C_Slave_ISR_IT+0x20e>
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	4a2f      	ldr	r2, [pc, #188]	; (8006328 <I2C_Slave_ISR_IT+0x224>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d050      	beq.n	8006312 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	0018      	movs	r0, r3
 8006274:	f000 fb42 	bl	80068fc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006278:	e04b      	b.n	8006312 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	08db      	lsrs	r3, r3, #3
 800627e:	001a      	movs	r2, r3
 8006280:	2301      	movs	r3, #1
 8006282:	4013      	ands	r3, r2
 8006284:	d00c      	beq.n	80062a0 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	08db      	lsrs	r3, r3, #3
 800628a:	001a      	movs	r2, r3
 800628c:	2301      	movs	r3, #1
 800628e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006290:	d006      	beq.n	80062a0 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	0011      	movs	r1, r2
 8006298:	0018      	movs	r0, r3
 800629a:	f000 fa49 	bl	8006730 <I2C_ITAddrCplt>
 800629e:	e039      	b.n	8006314 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	085b      	lsrs	r3, r3, #1
 80062a4:	001a      	movs	r2, r3
 80062a6:	2301      	movs	r3, #1
 80062a8:	4013      	ands	r3, r2
 80062aa:	d033      	beq.n	8006314 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	085b      	lsrs	r3, r3, #1
 80062b0:	001a      	movs	r2, r3
 80062b2:	2301      	movs	r3, #1
 80062b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80062b6:	d02d      	beq.n	8006314 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d018      	beq.n	80062f4 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	781a      	ldrb	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	851a      	strh	r2, [r3, #40]	; 0x28
 80062f2:	e00f      	b.n	8006314 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	2380      	movs	r3, #128	; 0x80
 80062f8:	045b      	lsls	r3, r3, #17
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d002      	beq.n	8006304 <I2C_Slave_ISR_IT+0x200>
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d107      	bne.n	8006314 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	0018      	movs	r0, r3
 8006308:	f000 faf8 	bl	80068fc <I2C_ITSlaveSeqCplt>
 800630c:	e002      	b.n	8006314 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	e000      	b.n	8006314 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006312:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2240      	movs	r2, #64	; 0x40
 8006318:	2100      	movs	r1, #0
 800631a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	0018      	movs	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	b006      	add	sp, #24
 8006324:	bd80      	pop	{r7, pc}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	ffff0000 	.word	0xffff0000

0800632c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                               uint32_t ITSources)
{
 800632c:	b590      	push	{r4, r7, lr}
 800632e:	b089      	sub	sp, #36	; 0x24
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2240      	movs	r2, #64	; 0x40
 800633c:	5c9b      	ldrb	r3, [r3, r2]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <I2C_Master_ISR_DMA+0x1a>
 8006342:	2302      	movs	r3, #2
 8006344:	e0f7      	b.n	8006536 <I2C_Master_ISR_DMA+0x20a>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2240      	movs	r2, #64	; 0x40
 800634a:	2101      	movs	r1, #1
 800634c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	091b      	lsrs	r3, r3, #4
 8006352:	001a      	movs	r2, r3
 8006354:	2301      	movs	r3, #1
 8006356:	4013      	ands	r3, r2
 8006358:	d019      	beq.n	800638e <I2C_Master_ISR_DMA+0x62>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	091b      	lsrs	r3, r3, #4
 800635e:	001a      	movs	r2, r3
 8006360:	2301      	movs	r3, #1
 8006362:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006364:	d013      	beq.n	800638e <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2210      	movs	r2, #16
 800636c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	2204      	movs	r2, #4
 8006374:	431a      	orrs	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2120      	movs	r1, #32
 800637e:	0018      	movs	r0, r3
 8006380:	f001 f94e 	bl	8007620 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	0018      	movs	r0, r3
 8006388:	f000 fe79 	bl	800707e <I2C_Flush_TXDR>
 800638c:	e0ce      	b.n	800652c <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	09db      	lsrs	r3, r3, #7
 8006392:	001a      	movs	r2, r3
 8006394:	2301      	movs	r3, #1
 8006396:	4013      	ands	r3, r2
 8006398:	d100      	bne.n	800639c <I2C_Master_ISR_DMA+0x70>
 800639a:	e07e      	b.n	800649a <I2C_Master_ISR_DMA+0x16e>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	099b      	lsrs	r3, r3, #6
 80063a0:	001a      	movs	r2, r3
 80063a2:	2301      	movs	r3, #1
 80063a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80063a6:	d100      	bne.n	80063aa <I2C_Master_ISR_DMA+0x7e>
 80063a8:	e077      	b.n	800649a <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2140      	movs	r1, #64	; 0x40
 80063b6:	438a      	bics	r2, r1
 80063b8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d055      	beq.n	8006470 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	2312      	movs	r3, #18
 80063ce:	18fb      	adds	r3, r7, r3
 80063d0:	0592      	lsls	r2, r2, #22
 80063d2:	0d92      	lsrs	r2, r2, #22
 80063d4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2bff      	cmp	r3, #255	; 0xff
 80063de:	d906      	bls.n	80063ee <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	22ff      	movs	r2, #255	; 0xff
 80063e4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80063e6:	2380      	movs	r3, #128	; 0x80
 80063e8:	045b      	lsls	r3, r3, #17
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	e010      	b.n	8006410 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	4a50      	ldr	r2, [pc, #320]	; (8006540 <I2C_Master_ISR_DMA+0x214>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d003      	beq.n	800640a <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	e002      	b.n	8006410 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800640a:	2380      	movs	r3, #128	; 0x80
 800640c:	049b      	lsls	r3, r3, #18
 800640e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006414:	b2da      	uxtb	r2, r3
 8006416:	697c      	ldr	r4, [r7, #20]
 8006418:	2312      	movs	r3, #18
 800641a:	18fb      	adds	r3, r7, r3
 800641c:	8819      	ldrh	r1, [r3, #0]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	2300      	movs	r3, #0
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	0023      	movs	r3, r4
 8006426:	f001 f8c5 	bl	80075b4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2241      	movs	r2, #65	; 0x41
 8006440:	5c9b      	ldrb	r3, [r3, r2]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b22      	cmp	r3, #34	; 0x22
 8006446:	d109      	bne.n	800645c <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2180      	movs	r1, #128	; 0x80
 8006454:	0209      	lsls	r1, r1, #8
 8006456:	430a      	orrs	r2, r1
 8006458:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800645a:	e067      	b.n	800652c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2180      	movs	r1, #128	; 0x80
 8006468:	01c9      	lsls	r1, r1, #7
 800646a:	430a      	orrs	r2, r1
 800646c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800646e:	e05d      	b.n	800652c <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	2380      	movs	r3, #128	; 0x80
 8006478:	049b      	lsls	r3, r3, #18
 800647a:	401a      	ands	r2, r3
 800647c:	2380      	movs	r3, #128	; 0x80
 800647e:	049b      	lsls	r3, r3, #18
 8006480:	429a      	cmp	r2, r3
 8006482:	d004      	beq.n	800648e <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	0018      	movs	r0, r3
 8006488:	f000 f9f6 	bl	8006878 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800648c:	e04e      	b.n	800652c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2140      	movs	r1, #64	; 0x40
 8006492:	0018      	movs	r0, r3
 8006494:	f000 fce8 	bl	8006e68 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006498:	e048      	b.n	800652c <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	099b      	lsrs	r3, r3, #6
 800649e:	001a      	movs	r2, r3
 80064a0:	2301      	movs	r3, #1
 80064a2:	4013      	ands	r3, r2
 80064a4:	d02e      	beq.n	8006504 <I2C_Master_ISR_DMA+0x1d8>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	099b      	lsrs	r3, r3, #6
 80064aa:	001a      	movs	r2, r3
 80064ac:	2301      	movs	r3, #1
 80064ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80064b0:	d028      	beq.n	8006504 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d11d      	bne.n	80064f8 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	049b      	lsls	r3, r3, #18
 80064c6:	401a      	ands	r2, r3
 80064c8:	2380      	movs	r3, #128	; 0x80
 80064ca:	049b      	lsls	r3, r3, #18
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d02c      	beq.n	800652a <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	4a1a      	ldr	r2, [pc, #104]	; (8006540 <I2C_Master_ISR_DMA+0x214>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d109      	bne.n	80064ee <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2180      	movs	r1, #128	; 0x80
 80064e6:	01c9      	lsls	r1, r1, #7
 80064e8:	430a      	orrs	r2, r1
 80064ea:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80064ec:	e01d      	b.n	800652a <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	0018      	movs	r0, r3
 80064f2:	f000 f9c1 	bl	8006878 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80064f6:	e018      	b.n	800652a <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2140      	movs	r1, #64	; 0x40
 80064fc:	0018      	movs	r0, r3
 80064fe:	f000 fcb3 	bl	8006e68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006502:	e012      	b.n	800652a <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	001a      	movs	r2, r3
 800650a:	2301      	movs	r3, #1
 800650c:	4013      	ands	r3, r2
 800650e:	d00d      	beq.n	800652c <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	001a      	movs	r2, r3
 8006516:	2301      	movs	r3, #1
 8006518:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800651a:	d007      	beq.n	800652c <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	0011      	movs	r1, r2
 8006522:	0018      	movs	r0, r3
 8006524:	f000 fa50 	bl	80069c8 <I2C_ITMasterCplt>
 8006528:	e000      	b.n	800652c <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 800652a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2240      	movs	r2, #64	; 0x40
 8006530:	2100      	movs	r1, #0
 8006532:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	0018      	movs	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	b007      	add	sp, #28
 800653c:	bd90      	pop	{r4, r7, pc}
 800653e:	46c0      	nop			; (mov r8, r8)
 8006540:	ffff0000 	.word	0xffff0000

08006544 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2240      	movs	r2, #64	; 0x40
 800655e:	5c9b      	ldrb	r3, [r3, r2]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <I2C_Slave_ISR_DMA+0x24>
 8006564:	2302      	movs	r3, #2
 8006566:	e0dd      	b.n	8006724 <I2C_Slave_ISR_DMA+0x1e0>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2240      	movs	r2, #64	; 0x40
 800656c:	2101      	movs	r1, #1
 800656e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	001a      	movs	r2, r3
 8006576:	2301      	movs	r3, #1
 8006578:	4013      	ands	r3, r2
 800657a:	d00b      	beq.n	8006594 <I2C_Slave_ISR_DMA+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	095b      	lsrs	r3, r3, #5
 8006580:	001a      	movs	r2, r3
 8006582:	2301      	movs	r3, #1
 8006584:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006586:	d005      	beq.n	8006594 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	0011      	movs	r1, r2
 800658e:	0018      	movs	r0, r3
 8006590:	f000 faec 	bl	8006b6c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	091b      	lsrs	r3, r3, #4
 8006598:	001a      	movs	r2, r3
 800659a:	2301      	movs	r3, #1
 800659c:	4013      	ands	r3, r2
 800659e:	d100      	bne.n	80065a2 <I2C_Slave_ISR_DMA+0x5e>
 80065a0:	e0a9      	b.n	80066f6 <I2C_Slave_ISR_DMA+0x1b2>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	091b      	lsrs	r3, r3, #4
 80065a6:	001a      	movs	r2, r3
 80065a8:	2301      	movs	r3, #1
 80065aa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80065ac:	d100      	bne.n	80065b0 <I2C_Slave_ISR_DMA+0x6c>
 80065ae:	e0a2      	b.n	80066f6 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	0b9b      	lsrs	r3, r3, #14
 80065b4:	001a      	movs	r2, r3
 80065b6:	2301      	movs	r3, #1
 80065b8:	4013      	ands	r3, r2
 80065ba:	d106      	bne.n	80065ca <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	0bdb      	lsrs	r3, r3, #15
 80065c0:	001a      	movs	r2, r3
 80065c2:	2301      	movs	r3, #1
 80065c4:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80065c6:	d100      	bne.n	80065ca <I2C_Slave_ISR_DMA+0x86>
 80065c8:	e08e      	b.n	80066e8 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00d      	beq.n	80065ee <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	0bdb      	lsrs	r3, r3, #15
 80065d6:	001a      	movs	r2, r3
 80065d8:	2301      	movs	r3, #1
 80065da:	4013      	ands	r3, r2
 80065dc:	d007      	beq.n	80065ee <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 80065ea:	2301      	movs	r3, #1
 80065ec:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00d      	beq.n	8006612 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	0b9b      	lsrs	r3, r3, #14
 80065fa:	001a      	movs	r2, r3
 80065fc:	2301      	movs	r3, #1
 80065fe:	4013      	ands	r3, r2
 8006600:	d007      	beq.n	8006612 <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 800660e:	2301      	movs	r3, #1
 8006610:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d12d      	bne.n	8006674 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2241      	movs	r2, #65	; 0x41
 800661c:	5c9b      	ldrb	r3, [r3, r2]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b28      	cmp	r3, #40	; 0x28
 8006622:	d10b      	bne.n	800663c <I2C_Slave_ISR_DMA+0xf8>
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	2380      	movs	r3, #128	; 0x80
 8006628:	049b      	lsls	r3, r3, #18
 800662a:	429a      	cmp	r2, r3
 800662c:	d106      	bne.n	800663c <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	0011      	movs	r1, r2
 8006634:	0018      	movs	r0, r3
 8006636:	f000 fbbd 	bl	8006db4 <I2C_ITListenCplt>
 800663a:	e054      	b.n	80066e6 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2241      	movs	r2, #65	; 0x41
 8006640:	5c9b      	ldrb	r3, [r3, r2]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b29      	cmp	r3, #41	; 0x29
 8006646:	d110      	bne.n	800666a <I2C_Slave_ISR_DMA+0x126>
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	4a38      	ldr	r2, [pc, #224]	; (800672c <I2C_Slave_ISR_DMA+0x1e8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00c      	beq.n	800666a <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2210      	movs	r2, #16
 8006656:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	0018      	movs	r0, r3
 800665c:	f000 fd0f 	bl	800707e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	0018      	movs	r0, r3
 8006664:	f000 f94a 	bl	80068fc <I2C_ITSlaveSeqCplt>
 8006668:	e03d      	b.n	80066e6 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2210      	movs	r2, #16
 8006670:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006672:	e03e      	b.n	80066f2 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2210      	movs	r2, #16
 800667a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006680:	2204      	movs	r2, #4
 8006682:	431a      	orrs	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006688:	2317      	movs	r3, #23
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	2141      	movs	r1, #65	; 0x41
 8006690:	5c52      	ldrb	r2, [r2, r1]
 8006692:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d004      	beq.n	80066a4 <I2C_Slave_ISR_DMA+0x160>
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	2380      	movs	r3, #128	; 0x80
 800669e:	045b      	lsls	r3, r3, #17
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d126      	bne.n	80066f2 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80066a4:	2217      	movs	r2, #23
 80066a6:	18bb      	adds	r3, r7, r2
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b21      	cmp	r3, #33	; 0x21
 80066ac:	d003      	beq.n	80066b6 <I2C_Slave_ISR_DMA+0x172>
 80066ae:	18bb      	adds	r3, r7, r2
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b29      	cmp	r3, #41	; 0x29
 80066b4:	d103      	bne.n	80066be <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2221      	movs	r2, #33	; 0x21
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
 80066bc:	e00b      	b.n	80066d6 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80066be:	2217      	movs	r2, #23
 80066c0:	18bb      	adds	r3, r7, r2
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b22      	cmp	r3, #34	; 0x22
 80066c6:	d003      	beq.n	80066d0 <I2C_Slave_ISR_DMA+0x18c>
 80066c8:	18bb      	adds	r3, r7, r2
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b2a      	cmp	r3, #42	; 0x2a
 80066ce:	d102      	bne.n	80066d6 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2222      	movs	r2, #34	; 0x22
 80066d4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	0011      	movs	r1, r2
 80066de:	0018      	movs	r0, r3
 80066e0:	f000 fbc2 	bl	8006e68 <I2C_ITError>
      if (treatdmanack == 1U)
 80066e4:	e005      	b.n	80066f2 <I2C_Slave_ISR_DMA+0x1ae>
 80066e6:	e004      	b.n	80066f2 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2210      	movs	r2, #16
 80066ee:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80066f0:	e013      	b.n	800671a <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 80066f2:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80066f4:	e011      	b.n	800671a <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	08db      	lsrs	r3, r3, #3
 80066fa:	001a      	movs	r2, r3
 80066fc:	2301      	movs	r3, #1
 80066fe:	4013      	ands	r3, r2
 8006700:	d00b      	beq.n	800671a <I2C_Slave_ISR_DMA+0x1d6>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	08db      	lsrs	r3, r3, #3
 8006706:	001a      	movs	r2, r3
 8006708:	2301      	movs	r3, #1
 800670a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800670c:	d005      	beq.n	800671a <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	0011      	movs	r1, r2
 8006714:	0018      	movs	r0, r3
 8006716:	f000 f80b 	bl	8006730 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2240      	movs	r2, #64	; 0x40
 800671e:	2100      	movs	r1, #0
 8006720:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	0018      	movs	r0, r3
 8006726:	46bd      	mov	sp, r7
 8006728:	b008      	add	sp, #32
 800672a:	bd80      	pop	{r7, pc}
 800672c:	ffff0000 	.word	0xffff0000

08006730 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006730:	b5b0      	push	{r4, r5, r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2241      	movs	r2, #65	; 0x41
 800673e:	5c9b      	ldrb	r3, [r3, r2]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	001a      	movs	r2, r3
 8006744:	2328      	movs	r3, #40	; 0x28
 8006746:	4013      	ands	r3, r2
 8006748:	2b28      	cmp	r3, #40	; 0x28
 800674a:	d000      	beq.n	800674e <I2C_ITAddrCplt+0x1e>
 800674c:	e088      	b.n	8006860 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	0c1b      	lsrs	r3, r3, #16
 8006756:	b2da      	uxtb	r2, r3
 8006758:	250f      	movs	r5, #15
 800675a:	197b      	adds	r3, r7, r5
 800675c:	2101      	movs	r1, #1
 800675e:	400a      	ands	r2, r1
 8006760:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	0c1b      	lsrs	r3, r3, #16
 800676a:	b29a      	uxth	r2, r3
 800676c:	200c      	movs	r0, #12
 800676e:	183b      	adds	r3, r7, r0
 8006770:	21fe      	movs	r1, #254	; 0xfe
 8006772:	400a      	ands	r2, r1
 8006774:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	b29a      	uxth	r2, r3
 800677e:	240a      	movs	r4, #10
 8006780:	193b      	adds	r3, r7, r4
 8006782:	0592      	lsls	r2, r2, #22
 8006784:	0d92      	lsrs	r2, r2, #22
 8006786:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	b29a      	uxth	r2, r3
 8006790:	2308      	movs	r3, #8
 8006792:	18fb      	adds	r3, r7, r3
 8006794:	21fe      	movs	r1, #254	; 0xfe
 8006796:	400a      	ands	r2, r1
 8006798:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d148      	bne.n	8006834 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80067a2:	0021      	movs	r1, r4
 80067a4:	187b      	adds	r3, r7, r1
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	09db      	lsrs	r3, r3, #7
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	183b      	adds	r3, r7, r0
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	4053      	eors	r3, r2
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	001a      	movs	r2, r3
 80067b6:	2306      	movs	r3, #6
 80067b8:	4013      	ands	r3, r2
 80067ba:	d120      	bne.n	80067fe <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80067bc:	183b      	adds	r3, r7, r0
 80067be:	187a      	adds	r2, r7, r1
 80067c0:	8812      	ldrh	r2, [r2, #0]
 80067c2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d14c      	bne.n	8006870 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2208      	movs	r2, #8
 80067e2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2240      	movs	r2, #64	; 0x40
 80067e8:	2100      	movs	r1, #0
 80067ea:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80067ec:	183b      	adds	r3, r7, r0
 80067ee:	881a      	ldrh	r2, [r3, #0]
 80067f0:	197b      	adds	r3, r7, r5
 80067f2:	7819      	ldrb	r1, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	0018      	movs	r0, r3
 80067f8:	f7ff fb0a 	bl	8005e10 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80067fc:	e038      	b.n	8006870 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80067fe:	240c      	movs	r4, #12
 8006800:	193b      	adds	r3, r7, r4
 8006802:	2208      	movs	r2, #8
 8006804:	18ba      	adds	r2, r7, r2
 8006806:	8812      	ldrh	r2, [r2, #0]
 8006808:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800680a:	2380      	movs	r3, #128	; 0x80
 800680c:	021a      	lsls	r2, r3, #8
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	0011      	movs	r1, r2
 8006812:	0018      	movs	r0, r3
 8006814:	f000 ff6c 	bl	80076f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2240      	movs	r2, #64	; 0x40
 800681c:	2100      	movs	r1, #0
 800681e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006820:	193b      	adds	r3, r7, r4
 8006822:	881a      	ldrh	r2, [r3, #0]
 8006824:	230f      	movs	r3, #15
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	7819      	ldrb	r1, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	0018      	movs	r0, r3
 800682e:	f7ff faef 	bl	8005e10 <HAL_I2C_AddrCallback>
}
 8006832:	e01d      	b.n	8006870 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006834:	2380      	movs	r3, #128	; 0x80
 8006836:	021a      	lsls	r2, r3, #8
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	0011      	movs	r1, r2
 800683c:	0018      	movs	r0, r3
 800683e:	f000 ff57 	bl	80076f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2240      	movs	r2, #64	; 0x40
 8006846:	2100      	movs	r1, #0
 8006848:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800684a:	230c      	movs	r3, #12
 800684c:	18fb      	adds	r3, r7, r3
 800684e:	881a      	ldrh	r2, [r3, #0]
 8006850:	230f      	movs	r3, #15
 8006852:	18fb      	adds	r3, r7, r3
 8006854:	7819      	ldrb	r1, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	0018      	movs	r0, r3
 800685a:	f7ff fad9 	bl	8005e10 <HAL_I2C_AddrCallback>
}
 800685e:	e007      	b.n	8006870 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2208      	movs	r2, #8
 8006866:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2240      	movs	r2, #64	; 0x40
 800686c:	2100      	movs	r1, #0
 800686e:	5499      	strb	r1, [r3, r2]
}
 8006870:	46c0      	nop			; (mov r8, r8)
 8006872:	46bd      	mov	sp, r7
 8006874:	b004      	add	sp, #16
 8006876:	bdb0      	pop	{r4, r5, r7, pc}

08006878 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2242      	movs	r2, #66	; 0x42
 8006884:	2100      	movs	r1, #0
 8006886:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2241      	movs	r2, #65	; 0x41
 800688c:	5c9b      	ldrb	r3, [r3, r2]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b21      	cmp	r3, #33	; 0x21
 8006892:	d117      	bne.n	80068c4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2241      	movs	r2, #65	; 0x41
 8006898:	2120      	movs	r1, #32
 800689a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2211      	movs	r2, #17
 80068a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2101      	movs	r1, #1
 80068ac:	0018      	movs	r0, r3
 80068ae:	f000 ff1f 	bl	80076f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2240      	movs	r2, #64	; 0x40
 80068b6:	2100      	movs	r1, #0
 80068b8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	0018      	movs	r0, r3
 80068be:	f7ff fa87 	bl	8005dd0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068c2:	e016      	b.n	80068f2 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2241      	movs	r2, #65	; 0x41
 80068c8:	2120      	movs	r1, #32
 80068ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2212      	movs	r2, #18
 80068d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2102      	movs	r1, #2
 80068dc:	0018      	movs	r0, r3
 80068de:	f000 ff07 	bl	80076f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2240      	movs	r2, #64	; 0x40
 80068e6:	2100      	movs	r1, #0
 80068e8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7ff fa77 	bl	8005de0 <HAL_I2C_MasterRxCpltCallback>
}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	46bd      	mov	sp, r7
 80068f6:	b002      	add	sp, #8
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2242      	movs	r2, #66	; 0x42
 8006910:	2100      	movs	r1, #0
 8006912:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	0b9b      	lsrs	r3, r3, #14
 8006918:	001a      	movs	r2, r3
 800691a:	2301      	movs	r3, #1
 800691c:	4013      	ands	r3, r2
 800691e:	d008      	beq.n	8006932 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4925      	ldr	r1, [pc, #148]	; (80069c0 <I2C_ITSlaveSeqCplt+0xc4>)
 800692c:	400a      	ands	r2, r1
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	e00d      	b.n	800694e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	0bdb      	lsrs	r3, r3, #15
 8006936:	001a      	movs	r2, r3
 8006938:	2301      	movs	r3, #1
 800693a:	4013      	ands	r3, r2
 800693c:	d007      	beq.n	800694e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	491e      	ldr	r1, [pc, #120]	; (80069c4 <I2C_ITSlaveSeqCplt+0xc8>)
 800694a:	400a      	ands	r2, r1
 800694c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2241      	movs	r2, #65	; 0x41
 8006952:	5c9b      	ldrb	r3, [r3, r2]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b29      	cmp	r3, #41	; 0x29
 8006958:	d114      	bne.n	8006984 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2241      	movs	r2, #65	; 0x41
 800695e:	2128      	movs	r1, #40	; 0x28
 8006960:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2221      	movs	r2, #33	; 0x21
 8006966:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2101      	movs	r1, #1
 800696c:	0018      	movs	r0, r3
 800696e:	f000 febf 	bl	80076f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2240      	movs	r2, #64	; 0x40
 8006976:	2100      	movs	r1, #0
 8006978:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	0018      	movs	r0, r3
 800697e:	f7ff fa37 	bl	8005df0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006982:	e019      	b.n	80069b8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2241      	movs	r2, #65	; 0x41
 8006988:	5c9b      	ldrb	r3, [r3, r2]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b2a      	cmp	r3, #42	; 0x2a
 800698e:	d113      	bne.n	80069b8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2241      	movs	r2, #65	; 0x41
 8006994:	2128      	movs	r1, #40	; 0x28
 8006996:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2222      	movs	r2, #34	; 0x22
 800699c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2102      	movs	r1, #2
 80069a2:	0018      	movs	r0, r3
 80069a4:	f000 fea4 	bl	80076f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2240      	movs	r2, #64	; 0x40
 80069ac:	2100      	movs	r1, #0
 80069ae:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	0018      	movs	r0, r3
 80069b4:	f7ff fa24 	bl	8005e00 <HAL_I2C_SlaveRxCpltCallback>
}
 80069b8:	46c0      	nop			; (mov r8, r8)
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b004      	add	sp, #16
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	ffffbfff 	.word	0xffffbfff
 80069c4:	ffff7fff 	.word	0xffff7fff

080069c8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2220      	movs	r2, #32
 80069dc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2241      	movs	r2, #65	; 0x41
 80069e2:	5c9b      	ldrb	r3, [r3, r2]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b21      	cmp	r3, #33	; 0x21
 80069e8:	d108      	bne.n	80069fc <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2101      	movs	r1, #1
 80069ee:	0018      	movs	r0, r3
 80069f0:	f000 fe7e 	bl	80076f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2211      	movs	r2, #17
 80069f8:	631a      	str	r2, [r3, #48]	; 0x30
 80069fa:	e00d      	b.n	8006a18 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2241      	movs	r2, #65	; 0x41
 8006a00:	5c9b      	ldrb	r3, [r3, r2]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b22      	cmp	r3, #34	; 0x22
 8006a06:	d107      	bne.n	8006a18 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2102      	movs	r1, #2
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	f000 fe6f 	bl	80076f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2212      	movs	r2, #18
 8006a16:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4950      	ldr	r1, [pc, #320]	; (8006b64 <I2C_ITMasterCplt+0x19c>)
 8006a24:	400a      	ands	r2, r1
 8006a26:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a4d      	ldr	r2, [pc, #308]	; (8006b68 <I2C_ITMasterCplt+0x1a0>)
 8006a32:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	091b      	lsrs	r3, r3, #4
 8006a38:	001a      	movs	r2, r3
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d009      	beq.n	8006a54 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2210      	movs	r2, #16
 8006a46:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2241      	movs	r2, #65	; 0x41
 8006a58:	5c9b      	ldrb	r3, [r3, r2]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b60      	cmp	r3, #96	; 0x60
 8006a5e:	d10b      	bne.n	8006a78 <I2C_ITMasterCplt+0xb0>
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	089b      	lsrs	r3, r3, #2
 8006a64:	001a      	movs	r2, r3
 8006a66:	2301      	movs	r3, #1
 8006a68:	4013      	ands	r3, r2
 8006a6a:	d005      	beq.n	8006a78 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006a76:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f000 faff 	bl	800707e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a84:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2241      	movs	r2, #65	; 0x41
 8006a8a:	5c9b      	ldrb	r3, [r3, r2]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b60      	cmp	r3, #96	; 0x60
 8006a90:	d002      	beq.n	8006a98 <I2C_ITMasterCplt+0xd0>
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d007      	beq.n	8006aa8 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	0011      	movs	r1, r2
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	f000 f9e1 	bl	8006e68 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006aa6:	e058      	b.n	8006b5a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2241      	movs	r2, #65	; 0x41
 8006aac:	5c9b      	ldrb	r3, [r3, r2]
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b21      	cmp	r3, #33	; 0x21
 8006ab2:	d126      	bne.n	8006b02 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2241      	movs	r2, #65	; 0x41
 8006ab8:	2120      	movs	r1, #32
 8006aba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2242      	movs	r2, #66	; 0x42
 8006ac6:	5c9b      	ldrb	r3, [r3, r2]
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d10c      	bne.n	8006ae8 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2242      	movs	r2, #66	; 0x42
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2240      	movs	r2, #64	; 0x40
 8006ada:	2100      	movs	r1, #0
 8006adc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f7ff f9ad 	bl	8005e40 <HAL_I2C_MemTxCpltCallback>
}
 8006ae6:	e038      	b.n	8006b5a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2242      	movs	r2, #66	; 0x42
 8006aec:	2100      	movs	r1, #0
 8006aee:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2240      	movs	r2, #64	; 0x40
 8006af4:	2100      	movs	r1, #0
 8006af6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	0018      	movs	r0, r3
 8006afc:	f7ff f968 	bl	8005dd0 <HAL_I2C_MasterTxCpltCallback>
}
 8006b00:	e02b      	b.n	8006b5a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2241      	movs	r2, #65	; 0x41
 8006b06:	5c9b      	ldrb	r3, [r3, r2]
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b22      	cmp	r3, #34	; 0x22
 8006b0c:	d125      	bne.n	8006b5a <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2241      	movs	r2, #65	; 0x41
 8006b12:	2120      	movs	r1, #32
 8006b14:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2242      	movs	r2, #66	; 0x42
 8006b20:	5c9b      	ldrb	r3, [r3, r2]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b40      	cmp	r3, #64	; 0x40
 8006b26:	d10c      	bne.n	8006b42 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2242      	movs	r2, #66	; 0x42
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2240      	movs	r2, #64	; 0x40
 8006b34:	2100      	movs	r1, #0
 8006b36:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f7ff f988 	bl	8005e50 <HAL_I2C_MemRxCpltCallback>
}
 8006b40:	e00b      	b.n	8006b5a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2242      	movs	r2, #66	; 0x42
 8006b46:	2100      	movs	r1, #0
 8006b48:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2240      	movs	r2, #64	; 0x40
 8006b4e:	2100      	movs	r1, #0
 8006b50:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	0018      	movs	r0, r3
 8006b56:	f7ff f943 	bl	8005de0 <HAL_I2C_MasterRxCpltCallback>
}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	b006      	add	sp, #24
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	46c0      	nop			; (mov r8, r8)
 8006b64:	fe00e800 	.word	0xfe00e800
 8006b68:	ffff0000 	.word	0xffff0000

08006b6c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006b82:	200f      	movs	r0, #15
 8006b84:	183b      	adds	r3, r7, r0
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	2141      	movs	r1, #65	; 0x41
 8006b8a:	5c52      	ldrb	r2, [r2, r1]
 8006b8c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2220      	movs	r2, #32
 8006b94:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b96:	183b      	adds	r3, r7, r0
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b21      	cmp	r3, #33	; 0x21
 8006b9c:	d003      	beq.n	8006ba6 <I2C_ITSlaveCplt+0x3a>
 8006b9e:	183b      	adds	r3, r7, r0
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b29      	cmp	r3, #41	; 0x29
 8006ba4:	d109      	bne.n	8006bba <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ba6:	4a7d      	ldr	r2, [pc, #500]	; (8006d9c <I2C_ITSlaveCplt+0x230>)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	0011      	movs	r1, r2
 8006bac:	0018      	movs	r0, r3
 8006bae:	f000 fd9f 	bl	80076f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2221      	movs	r2, #33	; 0x21
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bb8:	e011      	b.n	8006bde <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006bba:	220f      	movs	r2, #15
 8006bbc:	18bb      	adds	r3, r7, r2
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b22      	cmp	r3, #34	; 0x22
 8006bc2:	d003      	beq.n	8006bcc <I2C_ITSlaveCplt+0x60>
 8006bc4:	18bb      	adds	r3, r7, r2
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bca:	d108      	bne.n	8006bde <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006bcc:	4a74      	ldr	r2, [pc, #464]	; (8006da0 <I2C_ITSlaveCplt+0x234>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	0011      	movs	r1, r2
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f000 fd8c 	bl	80076f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2222      	movs	r2, #34	; 0x22
 8006bdc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2180      	movs	r1, #128	; 0x80
 8006bea:	0209      	lsls	r1, r1, #8
 8006bec:	430a      	orrs	r2, r1
 8006bee:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	496a      	ldr	r1, [pc, #424]	; (8006da4 <I2C_ITSlaveCplt+0x238>)
 8006bfc:	400a      	ands	r2, r1
 8006bfe:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	0018      	movs	r0, r3
 8006c04:	f000 fa3b 	bl	800707e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	0b9b      	lsrs	r3, r3, #14
 8006c0c:	001a      	movs	r2, r3
 8006c0e:	2301      	movs	r3, #1
 8006c10:	4013      	ands	r3, r2
 8006c12:	d013      	beq.n	8006c3c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4962      	ldr	r1, [pc, #392]	; (8006da8 <I2C_ITSlaveCplt+0x23c>)
 8006c20:	400a      	ands	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d020      	beq.n	8006c6e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c3a:	e018      	b.n	8006c6e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	0bdb      	lsrs	r3, r3, #15
 8006c40:	001a      	movs	r2, r3
 8006c42:	2301      	movs	r3, #1
 8006c44:	4013      	ands	r3, r2
 8006c46:	d012      	beq.n	8006c6e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4956      	ldr	r1, [pc, #344]	; (8006dac <I2C_ITSlaveCplt+0x240>)
 8006c54:	400a      	ands	r2, r1
 8006c56:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d006      	beq.n	8006c6e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	089b      	lsrs	r3, r3, #2
 8006c72:	001a      	movs	r2, r3
 8006c74:	2301      	movs	r3, #1
 8006c76:	4013      	ands	r3, r2
 8006c78:	d020      	beq.n	8006cbc <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	4393      	bics	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00c      	beq.n	8006cbc <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	2204      	movs	r2, #4
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2242      	movs	r2, #66	; 0x42
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d013      	beq.n	8006d10 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	0011      	movs	r1, r2
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f000 f8b9 	bl	8006e68 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2241      	movs	r2, #65	; 0x41
 8006cfa:	5c9b      	ldrb	r3, [r3, r2]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b28      	cmp	r3, #40	; 0x28
 8006d00:	d147      	bne.n	8006d92 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	0011      	movs	r1, r2
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f000 f853 	bl	8006db4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d0e:	e040      	b.n	8006d92 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <I2C_ITSlaveCplt+0x244>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d016      	beq.n	8006d48 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f7ff fded 	bl	80068fc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a22      	ldr	r2, [pc, #136]	; (8006db0 <I2C_ITSlaveCplt+0x244>)
 8006d26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2241      	movs	r2, #65	; 0x41
 8006d2c:	2120      	movs	r1, #32
 8006d2e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2240      	movs	r2, #64	; 0x40
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	0018      	movs	r0, r3
 8006d42:	f7ff f875 	bl	8005e30 <HAL_I2C_ListenCpltCallback>
}
 8006d46:	e024      	b.n	8006d92 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2241      	movs	r2, #65	; 0x41
 8006d4c:	5c9b      	ldrb	r3, [r3, r2]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b22      	cmp	r3, #34	; 0x22
 8006d52:	d10f      	bne.n	8006d74 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2241      	movs	r2, #65	; 0x41
 8006d58:	2120      	movs	r1, #32
 8006d5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2240      	movs	r2, #64	; 0x40
 8006d66:	2100      	movs	r1, #0
 8006d68:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f7ff f847 	bl	8005e00 <HAL_I2C_SlaveRxCpltCallback>
}
 8006d72:	e00e      	b.n	8006d92 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2241      	movs	r2, #65	; 0x41
 8006d78:	2120      	movs	r1, #32
 8006d7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2240      	movs	r2, #64	; 0x40
 8006d86:	2100      	movs	r1, #0
 8006d88:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f7ff f82f 	bl	8005df0 <HAL_I2C_SlaveTxCpltCallback>
}
 8006d92:	46c0      	nop			; (mov r8, r8)
 8006d94:	46bd      	mov	sp, r7
 8006d96:	b006      	add	sp, #24
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	00008001 	.word	0x00008001
 8006da0:	00008002 	.word	0x00008002
 8006da4:	fe00e800 	.word	0xfe00e800
 8006da8:	ffffbfff 	.word	0xffffbfff
 8006dac:	ffff7fff 	.word	0xffff7fff
 8006db0:	ffff0000 	.word	0xffff0000

08006db4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a27      	ldr	r2, [pc, #156]	; (8006e60 <I2C_ITListenCplt+0xac>)
 8006dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2241      	movs	r2, #65	; 0x41
 8006dce:	2120      	movs	r1, #32
 8006dd0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2242      	movs	r2, #66	; 0x42
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	089b      	lsrs	r3, r3, #2
 8006de4:	001a      	movs	r2, r3
 8006de6:	2301      	movs	r3, #1
 8006de8:	4013      	ands	r3, r2
 8006dea:	d022      	beq.n	8006e32 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d012      	beq.n	8006e32 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006e32:	4a0c      	ldr	r2, [pc, #48]	; (8006e64 <I2C_ITListenCplt+0xb0>)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	0011      	movs	r1, r2
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f000 fc59 	bl	80076f0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2210      	movs	r2, #16
 8006e44:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2240      	movs	r2, #64	; 0x40
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	0018      	movs	r0, r3
 8006e52:	f7fe ffed 	bl	8005e30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b002      	add	sp, #8
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	ffff0000 	.word	0xffff0000
 8006e64:	00008003 	.word	0x00008003

08006e68 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006e72:	200f      	movs	r0, #15
 8006e74:	183b      	adds	r3, r7, r0
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	2141      	movs	r1, #65	; 0x41
 8006e7a:	5c52      	ldrb	r2, [r2, r1]
 8006e7c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2242      	movs	r2, #66	; 0x42
 8006e82:	2100      	movs	r1, #0
 8006e84:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a62      	ldr	r2, [pc, #392]	; (8007014 <I2C_ITError+0x1ac>)
 8006e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006e9e:	183b      	adds	r3, r7, r0
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b28      	cmp	r3, #40	; 0x28
 8006ea4:	d007      	beq.n	8006eb6 <I2C_ITError+0x4e>
 8006ea6:	183b      	adds	r3, r7, r0
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	2b29      	cmp	r3, #41	; 0x29
 8006eac:	d003      	beq.n	8006eb6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006eae:	183b      	adds	r3, r7, r0
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb4:	d10c      	bne.n	8006ed0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2103      	movs	r1, #3
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f000 fc18 	bl	80076f0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2241      	movs	r2, #65	; 0x41
 8006ec4:	2128      	movs	r1, #40	; 0x28
 8006ec6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a53      	ldr	r2, [pc, #332]	; (8007018 <I2C_ITError+0x1b0>)
 8006ecc:	635a      	str	r2, [r3, #52]	; 0x34
 8006ece:	e012      	b.n	8006ef6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ed0:	4a52      	ldr	r2, [pc, #328]	; (800701c <I2C_ITError+0x1b4>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	0011      	movs	r1, r2
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	f000 fc0a 	bl	80076f0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2241      	movs	r2, #65	; 0x41
 8006ee0:	5c9b      	ldrb	r3, [r3, r2]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b60      	cmp	r3, #96	; 0x60
 8006ee6:	d003      	beq.n	8006ef0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2241      	movs	r2, #65	; 0x41
 8006eec:	2120      	movs	r1, #32
 8006eee:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d03b      	beq.n	8006f7c <I2C_ITError+0x114>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b11      	cmp	r3, #17
 8006f08:	d002      	beq.n	8006f10 <I2C_ITError+0xa8>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b21      	cmp	r3, #33	; 0x21
 8006f0e:	d135      	bne.n	8006f7c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	2380      	movs	r3, #128	; 0x80
 8006f18:	01db      	lsls	r3, r3, #7
 8006f1a:	401a      	ands	r2, r3
 8006f1c:	2380      	movs	r3, #128	; 0x80
 8006f1e:	01db      	lsls	r3, r3, #7
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d107      	bne.n	8006f34 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	493c      	ldr	r1, [pc, #240]	; (8007020 <I2C_ITError+0x1b8>)
 8006f30:	400a      	ands	r2, r1
 8006f32:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f38:	0018      	movs	r0, r3
 8006f3a:	f7fd ffdb 	bl	8004ef4 <HAL_DMA_GetState>
 8006f3e:	0003      	movs	r3, r0
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d016      	beq.n	8006f72 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	4a36      	ldr	r2, [pc, #216]	; (8007024 <I2C_ITError+0x1bc>)
 8006f4a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2240      	movs	r2, #64	; 0x40
 8006f50:	2100      	movs	r1, #0
 8006f52:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f7fd fe9f 	bl	8004c9c <HAL_DMA_Abort_IT>
 8006f5e:	1e03      	subs	r3, r0, #0
 8006f60:	d051      	beq.n	8007006 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f70:	e049      	b.n	8007006 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	0018      	movs	r0, r3
 8006f76:	f000 f859 	bl	800702c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f7a:	e044      	b.n	8007006 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d03b      	beq.n	8006ffc <I2C_ITError+0x194>
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b12      	cmp	r3, #18
 8006f88:	d002      	beq.n	8006f90 <I2C_ITError+0x128>
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b22      	cmp	r3, #34	; 0x22
 8006f8e:	d135      	bne.n	8006ffc <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	2380      	movs	r3, #128	; 0x80
 8006f98:	021b      	lsls	r3, r3, #8
 8006f9a:	401a      	ands	r2, r3
 8006f9c:	2380      	movs	r3, #128	; 0x80
 8006f9e:	021b      	lsls	r3, r3, #8
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d107      	bne.n	8006fb4 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	491e      	ldr	r1, [pc, #120]	; (8007028 <I2C_ITError+0x1c0>)
 8006fb0:	400a      	ands	r2, r1
 8006fb2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7fd ff9b 	bl	8004ef4 <HAL_DMA_GetState>
 8006fbe:	0003      	movs	r3, r0
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d016      	beq.n	8006ff2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc8:	4a16      	ldr	r2, [pc, #88]	; (8007024 <I2C_ITError+0x1bc>)
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2240      	movs	r2, #64	; 0x40
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f7fd fe5f 	bl	8004c9c <HAL_DMA_Abort_IT>
 8006fde:	1e03      	subs	r3, r0, #0
 8006fe0:	d013      	beq.n	800700a <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fec:	0018      	movs	r0, r3
 8006fee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ff0:	e00b      	b.n	800700a <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f000 f819 	bl	800702c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ffa:	e006      	b.n	800700a <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	0018      	movs	r0, r3
 8007000:	f000 f814 	bl	800702c <I2C_TreatErrorCallback>
  }
}
 8007004:	e002      	b.n	800700c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	e000      	b.n	800700c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800700a:	46c0      	nop			; (mov r8, r8)
}
 800700c:	46c0      	nop			; (mov r8, r8)
 800700e:	46bd      	mov	sp, r7
 8007010:	b004      	add	sp, #16
 8007012:	bd80      	pop	{r7, pc}
 8007014:	ffff0000 	.word	0xffff0000
 8007018:	08006105 	.word	0x08006105
 800701c:	00008003 	.word	0x00008003
 8007020:	ffffbfff 	.word	0xffffbfff
 8007024:	08007237 	.word	0x08007237
 8007028:	ffff7fff 	.word	0xffff7fff

0800702c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2241      	movs	r2, #65	; 0x41
 8007038:	5c9b      	ldrb	r3, [r3, r2]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b60      	cmp	r3, #96	; 0x60
 800703e:	d10f      	bne.n	8007060 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2241      	movs	r2, #65	; 0x41
 8007044:	2120      	movs	r1, #32
 8007046:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2240      	movs	r2, #64	; 0x40
 8007052:	2100      	movs	r1, #0
 8007054:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	0018      	movs	r0, r3
 800705a:	f7fe ff09 	bl	8005e70 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800705e:	e00a      	b.n	8007076 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2240      	movs	r2, #64	; 0x40
 800706a:	2100      	movs	r1, #0
 800706c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	0018      	movs	r0, r3
 8007072:	f7fe fef5 	bl	8005e60 <HAL_I2C_ErrorCallback>
}
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	46bd      	mov	sp, r7
 800707a:	b002      	add	sp, #8
 800707c:	bd80      	pop	{r7, pc}

0800707e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	2202      	movs	r2, #2
 800708e:	4013      	ands	r3, r2
 8007090:	2b02      	cmp	r3, #2
 8007092:	d103      	bne.n	800709c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2200      	movs	r2, #0
 800709a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	2201      	movs	r2, #1
 80070a4:	4013      	ands	r3, r2
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d007      	beq.n	80070ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	699a      	ldr	r2, [r3, #24]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2101      	movs	r1, #1
 80070b6:	430a      	orrs	r2, r1
 80070b8:	619a      	str	r2, [r3, #24]
  }
}
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	46bd      	mov	sp, r7
 80070be:	b002      	add	sp, #8
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4920      	ldr	r1, [pc, #128]	; (8007160 <I2C_DMAMasterTransmitCplt+0x9c>)
 80070de:	400a      	ands	r2, r1
 80070e0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d105      	bne.n	80070f8 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2120      	movs	r1, #32
 80070f0:	0018      	movs	r0, r3
 80070f2:	f000 fa95 	bl	8007620 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80070f6:	e02e      	b.n	8007156 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007100:	189a      	adds	r2, r3, r2
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710a:	b29b      	uxth	r3, r3
 800710c:	2bff      	cmp	r3, #255	; 0xff
 800710e:	d903      	bls.n	8007118 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	22ff      	movs	r2, #255	; 0xff
 8007114:	851a      	strh	r2, [r3, #40]	; 0x28
 8007116:	e004      	b.n	8007122 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711c:	b29a      	uxth	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	0019      	movs	r1, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3328      	adds	r3, #40	; 0x28
 8007132:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007138:	f7fd fcca 	bl	8004ad0 <HAL_DMA_Start_IT>
 800713c:	1e03      	subs	r3, r0, #0
 800713e:	d005      	beq.n	800714c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2110      	movs	r1, #16
 8007144:	0018      	movs	r0, r3
 8007146:	f7ff fe8f 	bl	8006e68 <I2C_ITError>
}
 800714a:	e004      	b.n	8007156 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2140      	movs	r1, #64	; 0x40
 8007150:	0018      	movs	r0, r3
 8007152:	f000 fa65 	bl	8007620 <I2C_Enable_IRQ>
}
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	46bd      	mov	sp, r7
 800715a:	b004      	add	sp, #16
 800715c:	bd80      	pop	{r7, pc}
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	ffffbfff 	.word	0xffffbfff

08007164 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4920      	ldr	r1, [pc, #128]	; (8007200 <I2C_DMAMasterReceiveCplt+0x9c>)
 800717e:	400a      	ands	r2, r1
 8007180:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d105      	bne.n	8007198 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2120      	movs	r1, #32
 8007190:	0018      	movs	r0, r3
 8007192:	f000 fa45 	bl	8007620 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007196:	e02e      	b.n	80071f6 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80071a0:	189a      	adds	r2, r3, r2
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	2bff      	cmp	r3, #255	; 0xff
 80071ae:	d903      	bls.n	80071b8 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	22ff      	movs	r2, #255	; 0xff
 80071b4:	851a      	strh	r2, [r3, #40]	; 0x28
 80071b6:	e004      	b.n	80071c2 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3324      	adds	r3, #36	; 0x24
 80071cc:	0019      	movs	r1, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80071d8:	f7fd fc7a 	bl	8004ad0 <HAL_DMA_Start_IT>
 80071dc:	1e03      	subs	r3, r0, #0
 80071de:	d005      	beq.n	80071ec <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2110      	movs	r1, #16
 80071e4:	0018      	movs	r0, r3
 80071e6:	f7ff fe3f 	bl	8006e68 <I2C_ITError>
}
 80071ea:	e004      	b.n	80071f6 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2140      	movs	r1, #64	; 0x40
 80071f0:	0018      	movs	r0, r3
 80071f2:	f000 fa15 	bl	8007620 <I2C_Enable_IRQ>
}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	46bd      	mov	sp, r7
 80071fa:	b004      	add	sp, #16
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	46c0      	nop			; (mov r8, r8)
 8007200:	ffff7fff 	.word	0xffff7fff

08007204 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007210:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2180      	movs	r1, #128	; 0x80
 800721e:	0209      	lsls	r1, r1, #8
 8007220:	430a      	orrs	r2, r1
 8007222:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2110      	movs	r1, #16
 8007228:	0018      	movs	r0, r3
 800722a:	f7ff fe1d 	bl	8006e68 <I2C_ITError>
}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	46bd      	mov	sp, r7
 8007232:	b004      	add	sp, #16
 8007234:	bd80      	pop	{r7, pc}

08007236 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	2200      	movs	r2, #0
 8007252:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007260:	2200      	movs	r2, #0
 8007262:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	0018      	movs	r0, r3
 8007268:	f7ff fee0 	bl	800702c <I2C_TreatErrorCallback>
}
 800726c:	46c0      	nop			; (mov r8, r8)
 800726e:	46bd      	mov	sp, r7
 8007270:	b004      	add	sp, #16
 8007272:	bd80      	pop	{r7, pc}

08007274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	1dfb      	adds	r3, r7, #7
 8007282:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007284:	e021      	b.n	80072ca <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	3301      	adds	r3, #1
 800728a:	d01e      	beq.n	80072ca <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728c:	f7fc fd56 	bl	8003d3c <HAL_GetTick>
 8007290:	0002      	movs	r2, r0
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d302      	bcc.n	80072a2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d113      	bne.n	80072ca <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a6:	2220      	movs	r2, #32
 80072a8:	431a      	orrs	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2241      	movs	r2, #65	; 0x41
 80072b2:	2120      	movs	r1, #32
 80072b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2242      	movs	r2, #66	; 0x42
 80072ba:	2100      	movs	r1, #0
 80072bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2240      	movs	r2, #64	; 0x40
 80072c2:	2100      	movs	r1, #0
 80072c4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e00f      	b.n	80072ea <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	4013      	ands	r3, r2
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	425a      	negs	r2, r3
 80072da:	4153      	adcs	r3, r2
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	001a      	movs	r2, r3
 80072e0:	1dfb      	adds	r3, r7, #7
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d0ce      	beq.n	8007286 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	0018      	movs	r0, r3
 80072ec:	46bd      	mov	sp, r7
 80072ee:	b004      	add	sp, #16
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072fe:	e02b      	b.n	8007358 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	68b9      	ldr	r1, [r7, #8]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	0018      	movs	r0, r3
 8007308:	f000 f8da 	bl	80074c0 <I2C_IsAcknowledgeFailed>
 800730c:	1e03      	subs	r3, r0, #0
 800730e:	d001      	beq.n	8007314 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e029      	b.n	8007368 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	3301      	adds	r3, #1
 8007318:	d01e      	beq.n	8007358 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731a:	f7fc fd0f 	bl	8003d3c <HAL_GetTick>
 800731e:	0002      	movs	r2, r0
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	429a      	cmp	r2, r3
 8007328:	d302      	bcc.n	8007330 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d113      	bne.n	8007358 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007334:	2220      	movs	r2, #32
 8007336:	431a      	orrs	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2241      	movs	r2, #65	; 0x41
 8007340:	2120      	movs	r1, #32
 8007342:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2242      	movs	r2, #66	; 0x42
 8007348:	2100      	movs	r1, #0
 800734a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2240      	movs	r2, #64	; 0x40
 8007350:	2100      	movs	r1, #0
 8007352:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e007      	b.n	8007368 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	2202      	movs	r2, #2
 8007360:	4013      	ands	r3, r2
 8007362:	2b02      	cmp	r3, #2
 8007364:	d1cc      	bne.n	8007300 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	0018      	movs	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	b004      	add	sp, #16
 800736e:	bd80      	pop	{r7, pc}

08007370 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800737c:	e028      	b.n	80073d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	68b9      	ldr	r1, [r7, #8]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	0018      	movs	r0, r3
 8007386:	f000 f89b 	bl	80074c0 <I2C_IsAcknowledgeFailed>
 800738a:	1e03      	subs	r3, r0, #0
 800738c:	d001      	beq.n	8007392 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e026      	b.n	80073e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007392:	f7fc fcd3 	bl	8003d3c <HAL_GetTick>
 8007396:	0002      	movs	r2, r0
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d302      	bcc.n	80073a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d113      	bne.n	80073d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ac:	2220      	movs	r2, #32
 80073ae:	431a      	orrs	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2241      	movs	r2, #65	; 0x41
 80073b8:	2120      	movs	r1, #32
 80073ba:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2242      	movs	r2, #66	; 0x42
 80073c0:	2100      	movs	r1, #0
 80073c2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2240      	movs	r2, #64	; 0x40
 80073c8:	2100      	movs	r1, #0
 80073ca:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e007      	b.n	80073e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	2220      	movs	r2, #32
 80073d8:	4013      	ands	r3, r2
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d1cf      	bne.n	800737e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	0018      	movs	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b004      	add	sp, #16
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073f4:	e055      	b.n	80074a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	0018      	movs	r0, r3
 80073fe:	f000 f85f 	bl	80074c0 <I2C_IsAcknowledgeFailed>
 8007402:	1e03      	subs	r3, r0, #0
 8007404:	d001      	beq.n	800740a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e053      	b.n	80074b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	2220      	movs	r2, #32
 8007412:	4013      	ands	r3, r2
 8007414:	2b20      	cmp	r3, #32
 8007416:	d129      	bne.n	800746c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	2204      	movs	r2, #4
 8007420:	4013      	ands	r3, r2
 8007422:	2b04      	cmp	r3, #4
 8007424:	d105      	bne.n	8007432 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	e03f      	b.n	80074b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2220      	movs	r2, #32
 8007438:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	491d      	ldr	r1, [pc, #116]	; (80074bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8007446:	400a      	ands	r2, r1
 8007448:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2241      	movs	r2, #65	; 0x41
 8007454:	2120      	movs	r1, #32
 8007456:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2242      	movs	r2, #66	; 0x42
 800745c:	2100      	movs	r1, #0
 800745e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2240      	movs	r2, #64	; 0x40
 8007464:	2100      	movs	r1, #0
 8007466:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e022      	b.n	80074b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800746c:	f7fc fc66 	bl	8003d3c <HAL_GetTick>
 8007470:	0002      	movs	r2, r0
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	d302      	bcc.n	8007482 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10f      	bne.n	80074a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007486:	2220      	movs	r2, #32
 8007488:	431a      	orrs	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2241      	movs	r2, #65	; 0x41
 8007492:	2120      	movs	r1, #32
 8007494:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2240      	movs	r2, #64	; 0x40
 800749a:	2100      	movs	r1, #0
 800749c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e007      	b.n	80074b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	2204      	movs	r2, #4
 80074aa:	4013      	ands	r3, r2
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d1a2      	bne.n	80073f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	0018      	movs	r0, r3
 80074b4:	46bd      	mov	sp, r7
 80074b6:	b004      	add	sp, #16
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	fe00e800 	.word	0xfe00e800

080074c0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	2210      	movs	r2, #16
 80074d4:	4013      	ands	r3, r2
 80074d6:	2b10      	cmp	r3, #16
 80074d8:	d164      	bne.n	80075a4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	2380      	movs	r3, #128	; 0x80
 80074e2:	049b      	lsls	r3, r3, #18
 80074e4:	401a      	ands	r2, r3
 80074e6:	2380      	movs	r3, #128	; 0x80
 80074e8:	049b      	lsls	r3, r3, #18
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d02b      	beq.n	8007546 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2180      	movs	r1, #128	; 0x80
 80074fa:	01c9      	lsls	r1, r1, #7
 80074fc:	430a      	orrs	r2, r1
 80074fe:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007500:	e021      	b.n	8007546 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	3301      	adds	r3, #1
 8007506:	d01e      	beq.n	8007546 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007508:	f7fc fc18 	bl	8003d3c <HAL_GetTick>
 800750c:	0002      	movs	r2, r0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	429a      	cmp	r2, r3
 8007516:	d302      	bcc.n	800751e <I2C_IsAcknowledgeFailed+0x5e>
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d113      	bne.n	8007546 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	2220      	movs	r2, #32
 8007524:	431a      	orrs	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2241      	movs	r2, #65	; 0x41
 800752e:	2120      	movs	r1, #32
 8007530:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2242      	movs	r2, #66	; 0x42
 8007536:	2100      	movs	r1, #0
 8007538:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2240      	movs	r2, #64	; 0x40
 800753e:	2100      	movs	r1, #0
 8007540:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e02f      	b.n	80075a6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	2220      	movs	r2, #32
 800754e:	4013      	ands	r3, r2
 8007550:	2b20      	cmp	r3, #32
 8007552:	d1d6      	bne.n	8007502 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2210      	movs	r2, #16
 800755a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2220      	movs	r2, #32
 8007562:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	0018      	movs	r0, r3
 8007568:	f7ff fd89 	bl	800707e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	490e      	ldr	r1, [pc, #56]	; (80075b0 <I2C_IsAcknowledgeFailed+0xf0>)
 8007578:	400a      	ands	r2, r1
 800757a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007580:	2204      	movs	r2, #4
 8007582:	431a      	orrs	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2241      	movs	r2, #65	; 0x41
 800758c:	2120      	movs	r1, #32
 800758e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2242      	movs	r2, #66	; 0x42
 8007594:	2100      	movs	r1, #0
 8007596:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2240      	movs	r2, #64	; 0x40
 800759c:	2100      	movs	r1, #0
 800759e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e000      	b.n	80075a6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	0018      	movs	r0, r3
 80075a8:	46bd      	mov	sp, r7
 80075aa:	b004      	add	sp, #16
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	fe00e800 	.word	0xfe00e800

080075b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075b4:	b590      	push	{r4, r7, lr}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	0008      	movs	r0, r1
 80075be:	0011      	movs	r1, r2
 80075c0:	607b      	str	r3, [r7, #4]
 80075c2:	240a      	movs	r4, #10
 80075c4:	193b      	adds	r3, r7, r4
 80075c6:	1c02      	adds	r2, r0, #0
 80075c8:	801a      	strh	r2, [r3, #0]
 80075ca:	2009      	movs	r0, #9
 80075cc:	183b      	adds	r3, r7, r0
 80075ce:	1c0a      	adds	r2, r1, #0
 80075d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	6a3a      	ldr	r2, [r7, #32]
 80075da:	0d51      	lsrs	r1, r2, #21
 80075dc:	2280      	movs	r2, #128	; 0x80
 80075de:	00d2      	lsls	r2, r2, #3
 80075e0:	400a      	ands	r2, r1
 80075e2:	490e      	ldr	r1, [pc, #56]	; (800761c <I2C_TransferConfig+0x68>)
 80075e4:	430a      	orrs	r2, r1
 80075e6:	43d2      	mvns	r2, r2
 80075e8:	401a      	ands	r2, r3
 80075ea:	0011      	movs	r1, r2
 80075ec:	193b      	adds	r3, r7, r4
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	059b      	lsls	r3, r3, #22
 80075f2:	0d9a      	lsrs	r2, r3, #22
 80075f4:	183b      	adds	r3, r7, r0
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	0418      	lsls	r0, r3, #16
 80075fa:	23ff      	movs	r3, #255	; 0xff
 80075fc:	041b      	lsls	r3, r3, #16
 80075fe:	4003      	ands	r3, r0
 8007600:	431a      	orrs	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	431a      	orrs	r2, r3
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	431a      	orrs	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	46bd      	mov	sp, r7
 8007616:	b005      	add	sp, #20
 8007618:	bd90      	pop	{r4, r7, pc}
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	03ff63ff 	.word	0x03ff63ff

08007620 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	000a      	movs	r2, r1
 800762a:	1cbb      	adds	r3, r7, #2
 800762c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007636:	4b2c      	ldr	r3, [pc, #176]	; (80076e8 <I2C_Enable_IRQ+0xc8>)
 8007638:	429a      	cmp	r2, r3
 800763a:	d004      	beq.n	8007646 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007640:	4b2a      	ldr	r3, [pc, #168]	; (80076ec <I2C_Enable_IRQ+0xcc>)
 8007642:	429a      	cmp	r2, r3
 8007644:	d121      	bne.n	800768a <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007646:	1cbb      	adds	r3, r7, #2
 8007648:	2200      	movs	r2, #0
 800764a:	5e9b      	ldrsh	r3, [r3, r2]
 800764c:	2b00      	cmp	r3, #0
 800764e:	da03      	bge.n	8007658 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	22b8      	movs	r2, #184	; 0xb8
 8007654:	4313      	orrs	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007658:	1cbb      	adds	r3, r7, #2
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	2b10      	cmp	r3, #16
 800765e:	d103      	bne.n	8007668 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2290      	movs	r2, #144	; 0x90
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007668:	1cbb      	adds	r3, r7, #2
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	2b20      	cmp	r3, #32
 800766e:	d103      	bne.n	8007678 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2260      	movs	r2, #96	; 0x60
 8007674:	4313      	orrs	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007678:	1cbb      	adds	r3, r7, #2
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d127      	bne.n	80076d0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2240      	movs	r2, #64	; 0x40
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007688:	e022      	b.n	80076d0 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800768a:	1cbb      	adds	r3, r7, #2
 800768c:	2200      	movs	r2, #0
 800768e:	5e9b      	ldrsh	r3, [r3, r2]
 8007690:	2b00      	cmp	r3, #0
 8007692:	da03      	bge.n	800769c <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	22b8      	movs	r2, #184	; 0xb8
 8007698:	4313      	orrs	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800769c:	1cbb      	adds	r3, r7, #2
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	2201      	movs	r2, #1
 80076a2:	4013      	ands	r3, r2
 80076a4:	d003      	beq.n	80076ae <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	22f2      	movs	r2, #242	; 0xf2
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076ae:	1cbb      	adds	r3, r7, #2
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	2202      	movs	r2, #2
 80076b4:	4013      	ands	r3, r2
 80076b6:	d003      	beq.n	80076c0 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	22f4      	movs	r2, #244	; 0xf4
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80076c0:	1cbb      	adds	r3, r7, #2
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d103      	bne.n	80076d0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2220      	movs	r2, #32
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6819      	ldr	r1, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	430a      	orrs	r2, r1
 80076de:	601a      	str	r2, [r3, #0]
}
 80076e0:	46c0      	nop			; (mov r8, r8)
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b004      	add	sp, #16
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	0800632d 	.word	0x0800632d
 80076ec:	08006545 	.word	0x08006545

080076f0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	000a      	movs	r2, r1
 80076fa:	1cbb      	adds	r3, r7, #2
 80076fc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007702:	1cbb      	adds	r3, r7, #2
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	2201      	movs	r2, #1
 8007708:	4013      	ands	r3, r2
 800770a:	d010      	beq.n	800772e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2242      	movs	r2, #66	; 0x42
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2241      	movs	r2, #65	; 0x41
 8007718:	5c9b      	ldrb	r3, [r3, r2]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	001a      	movs	r2, r3
 800771e:	2328      	movs	r3, #40	; 0x28
 8007720:	4013      	ands	r3, r2
 8007722:	2b28      	cmp	r3, #40	; 0x28
 8007724:	d003      	beq.n	800772e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	22b0      	movs	r2, #176	; 0xb0
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800772e:	1cbb      	adds	r3, r7, #2
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	2202      	movs	r2, #2
 8007734:	4013      	ands	r3, r2
 8007736:	d010      	beq.n	800775a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2244      	movs	r2, #68	; 0x44
 800773c:	4313      	orrs	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2241      	movs	r2, #65	; 0x41
 8007744:	5c9b      	ldrb	r3, [r3, r2]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	001a      	movs	r2, r3
 800774a:	2328      	movs	r3, #40	; 0x28
 800774c:	4013      	ands	r3, r2
 800774e:	2b28      	cmp	r3, #40	; 0x28
 8007750:	d003      	beq.n	800775a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	22b0      	movs	r2, #176	; 0xb0
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800775a:	1cbb      	adds	r3, r7, #2
 800775c:	2200      	movs	r2, #0
 800775e:	5e9b      	ldrsh	r3, [r3, r2]
 8007760:	2b00      	cmp	r3, #0
 8007762:	da03      	bge.n	800776c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	22b8      	movs	r2, #184	; 0xb8
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800776c:	1cbb      	adds	r3, r7, #2
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	2b10      	cmp	r3, #16
 8007772:	d103      	bne.n	800777c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2290      	movs	r2, #144	; 0x90
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800777c:	1cbb      	adds	r3, r7, #2
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	2b20      	cmp	r3, #32
 8007782:	d103      	bne.n	800778c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2220      	movs	r2, #32
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800778c:	1cbb      	adds	r3, r7, #2
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	2b40      	cmp	r3, #64	; 0x40
 8007792:	d103      	bne.n	800779c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2240      	movs	r2, #64	; 0x40
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	43d9      	mvns	r1, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	400a      	ands	r2, r1
 80077ac:	601a      	str	r2, [r3, #0]
}
 80077ae:	46c0      	nop			; (mov r8, r8)
 80077b0:	46bd      	mov	sp, r7
 80077b2:	b004      	add	sp, #16
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2241      	movs	r2, #65	; 0x41
 80077c6:	5c9b      	ldrb	r3, [r3, r2]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	d138      	bne.n	8007840 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2240      	movs	r2, #64	; 0x40
 80077d2:	5c9b      	ldrb	r3, [r3, r2]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077d8:	2302      	movs	r3, #2
 80077da:	e032      	b.n	8007842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2240      	movs	r2, #64	; 0x40
 80077e0:	2101      	movs	r1, #1
 80077e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2241      	movs	r2, #65	; 0x41
 80077e8:	2124      	movs	r1, #36	; 0x24
 80077ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2101      	movs	r1, #1
 80077f8:	438a      	bics	r2, r1
 80077fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4911      	ldr	r1, [pc, #68]	; (800784c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007808:	400a      	ands	r2, r1
 800780a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6819      	ldr	r1, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2101      	movs	r1, #1
 8007828:	430a      	orrs	r2, r1
 800782a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2241      	movs	r2, #65	; 0x41
 8007830:	2120      	movs	r1, #32
 8007832:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2240      	movs	r2, #64	; 0x40
 8007838:	2100      	movs	r1, #0
 800783a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	e000      	b.n	8007842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007840:	2302      	movs	r3, #2
  }
}
 8007842:	0018      	movs	r0, r3
 8007844:	46bd      	mov	sp, r7
 8007846:	b002      	add	sp, #8
 8007848:	bd80      	pop	{r7, pc}
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	ffffefff 	.word	0xffffefff

08007850 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2241      	movs	r2, #65	; 0x41
 800785e:	5c9b      	ldrb	r3, [r3, r2]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b20      	cmp	r3, #32
 8007864:	d139      	bne.n	80078da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2240      	movs	r2, #64	; 0x40
 800786a:	5c9b      	ldrb	r3, [r3, r2]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d101      	bne.n	8007874 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007870:	2302      	movs	r3, #2
 8007872:	e033      	b.n	80078dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2240      	movs	r2, #64	; 0x40
 8007878:	2101      	movs	r1, #1
 800787a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2241      	movs	r2, #65	; 0x41
 8007880:	2124      	movs	r1, #36	; 0x24
 8007882:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2101      	movs	r1, #1
 8007890:	438a      	bics	r2, r1
 8007892:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4a11      	ldr	r2, [pc, #68]	; (80078e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	021b      	lsls	r3, r3, #8
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2101      	movs	r1, #1
 80078c2:	430a      	orrs	r2, r1
 80078c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2241      	movs	r2, #65	; 0x41
 80078ca:	2120      	movs	r1, #32
 80078cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2240      	movs	r2, #64	; 0x40
 80078d2:	2100      	movs	r1, #0
 80078d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e000      	b.n	80078dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078da:	2302      	movs	r3, #2
  }
}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	b004      	add	sp, #16
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	fffff0ff 	.word	0xfffff0ff

080078e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80078f0:	4b19      	ldr	r3, [pc, #100]	; (8007958 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a19      	ldr	r2, [pc, #100]	; (800795c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	0019      	movs	r1, r3
 80078fa:	4b17      	ldr	r3, [pc, #92]	; (8007958 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	430a      	orrs	r2, r1
 8007900:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	2380      	movs	r3, #128	; 0x80
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	429a      	cmp	r2, r3
 800790a:	d11f      	bne.n	800794c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800790c:	4b14      	ldr	r3, [pc, #80]	; (8007960 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	0013      	movs	r3, r2
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	189b      	adds	r3, r3, r2
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	4912      	ldr	r1, [pc, #72]	; (8007964 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800791a:	0018      	movs	r0, r3
 800791c:	f7f8 fc0e 	bl	800013c <__udivsi3>
 8007920:	0003      	movs	r3, r0
 8007922:	3301      	adds	r3, #1
 8007924:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007926:	e008      	b.n	800793a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3b01      	subs	r3, #1
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	e001      	b.n	800793a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e009      	b.n	800794e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800793a:	4b07      	ldr	r3, [pc, #28]	; (8007958 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800793c:	695a      	ldr	r2, [r3, #20]
 800793e:	2380      	movs	r3, #128	; 0x80
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	401a      	ands	r2, r3
 8007944:	2380      	movs	r3, #128	; 0x80
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	429a      	cmp	r2, r3
 800794a:	d0ed      	beq.n	8007928 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	0018      	movs	r0, r3
 8007950:	46bd      	mov	sp, r7
 8007952:	b004      	add	sp, #16
 8007954:	bd80      	pop	{r7, pc}
 8007956:	46c0      	nop			; (mov r8, r8)
 8007958:	40007000 	.word	0x40007000
 800795c:	fffff9ff 	.word	0xfffff9ff
 8007960:	20000020 	.word	0x20000020
 8007964:	000f4240 	.word	0x000f4240

08007968 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800796c:	4b03      	ldr	r3, [pc, #12]	; (800797c <LL_RCC_GetAPB1Prescaler+0x14>)
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	23e0      	movs	r3, #224	; 0xe0
 8007972:	01db      	lsls	r3, r3, #7
 8007974:	4013      	ands	r3, r2
}
 8007976:	0018      	movs	r0, r3
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	40021000 	.word	0x40021000

08007980 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	f000 fb56 	bl	8008040 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2201      	movs	r2, #1
 800799a:	4013      	ands	r3, r2
 800799c:	d100      	bne.n	80079a0 <HAL_RCC_OscConfig+0x20>
 800799e:	e07d      	b.n	8007a9c <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079a0:	4bc3      	ldr	r3, [pc, #780]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	2238      	movs	r2, #56	; 0x38
 80079a6:	4013      	ands	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079aa:	4bc1      	ldr	r3, [pc, #772]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	2203      	movs	r2, #3
 80079b0:	4013      	ands	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	2b10      	cmp	r3, #16
 80079b8:	d102      	bne.n	80079c0 <HAL_RCC_OscConfig+0x40>
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d002      	beq.n	80079c6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d10c      	bne.n	80079e0 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079c6:	4bba      	ldr	r3, [pc, #744]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	2380      	movs	r3, #128	; 0x80
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	4013      	ands	r3, r2
 80079d0:	d063      	beq.n	8007a9a <HAL_RCC_OscConfig+0x11a>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d15f      	bne.n	8007a9a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	f000 fb30 	bl	8008040 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	025b      	lsls	r3, r3, #9
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d107      	bne.n	80079fc <HAL_RCC_OscConfig+0x7c>
 80079ec:	4bb0      	ldr	r3, [pc, #704]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	4baf      	ldr	r3, [pc, #700]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 80079f2:	2180      	movs	r1, #128	; 0x80
 80079f4:	0249      	lsls	r1, r1, #9
 80079f6:	430a      	orrs	r2, r1
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	e020      	b.n	8007a3e <HAL_RCC_OscConfig+0xbe>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	23a0      	movs	r3, #160	; 0xa0
 8007a02:	02db      	lsls	r3, r3, #11
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d10e      	bne.n	8007a26 <HAL_RCC_OscConfig+0xa6>
 8007a08:	4ba9      	ldr	r3, [pc, #676]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	4ba8      	ldr	r3, [pc, #672]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007a0e:	2180      	movs	r1, #128	; 0x80
 8007a10:	02c9      	lsls	r1, r1, #11
 8007a12:	430a      	orrs	r2, r1
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	4ba6      	ldr	r3, [pc, #664]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	4ba5      	ldr	r3, [pc, #660]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007a1c:	2180      	movs	r1, #128	; 0x80
 8007a1e:	0249      	lsls	r1, r1, #9
 8007a20:	430a      	orrs	r2, r1
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e00b      	b.n	8007a3e <HAL_RCC_OscConfig+0xbe>
 8007a26:	4ba2      	ldr	r3, [pc, #648]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	4ba1      	ldr	r3, [pc, #644]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007a2c:	49a1      	ldr	r1, [pc, #644]	; (8007cb4 <HAL_RCC_OscConfig+0x334>)
 8007a2e:	400a      	ands	r2, r1
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	4b9f      	ldr	r3, [pc, #636]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	4b9e      	ldr	r3, [pc, #632]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007a38:	499f      	ldr	r1, [pc, #636]	; (8007cb8 <HAL_RCC_OscConfig+0x338>)
 8007a3a:	400a      	ands	r2, r1
 8007a3c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d014      	beq.n	8007a70 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a46:	f7fc f979 	bl	8003d3c <HAL_GetTick>
 8007a4a:	0003      	movs	r3, r0
 8007a4c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a4e:	e008      	b.n	8007a62 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a50:	f7fc f974 	bl	8003d3c <HAL_GetTick>
 8007a54:	0002      	movs	r2, r0
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b64      	cmp	r3, #100	; 0x64
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e2ee      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a62:	4b93      	ldr	r3, [pc, #588]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	2380      	movs	r3, #128	; 0x80
 8007a68:	029b      	lsls	r3, r3, #10
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	d0f0      	beq.n	8007a50 <HAL_RCC_OscConfig+0xd0>
 8007a6e:	e015      	b.n	8007a9c <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a70:	f7fc f964 	bl	8003d3c <HAL_GetTick>
 8007a74:	0003      	movs	r3, r0
 8007a76:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a78:	e008      	b.n	8007a8c <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a7a:	f7fc f95f 	bl	8003d3c <HAL_GetTick>
 8007a7e:	0002      	movs	r2, r0
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	2b64      	cmp	r3, #100	; 0x64
 8007a86:	d901      	bls.n	8007a8c <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e2d9      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a8c:	4b88      	ldr	r3, [pc, #544]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	2380      	movs	r3, #128	; 0x80
 8007a92:	029b      	lsls	r3, r3, #10
 8007a94:	4013      	ands	r3, r2
 8007a96:	d1f0      	bne.n	8007a7a <HAL_RCC_OscConfig+0xfa>
 8007a98:	e000      	b.n	8007a9c <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a9a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	d100      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x128>
 8007aa6:	e099      	b.n	8007bdc <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007aa8:	4b81      	ldr	r3, [pc, #516]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	2238      	movs	r2, #56	; 0x38
 8007aae:	4013      	ands	r3, r2
 8007ab0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ab2:	4b7f      	ldr	r3, [pc, #508]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2203      	movs	r2, #3
 8007ab8:	4013      	ands	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	2b10      	cmp	r3, #16
 8007ac0:	d102      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x148>
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d002      	beq.n	8007ace <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d135      	bne.n	8007b3a <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ace:	4b78      	ldr	r3, [pc, #480]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	2380      	movs	r3, #128	; 0x80
 8007ad4:	00db      	lsls	r3, r3, #3
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	d005      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x166>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e2ac      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ae6:	4b72      	ldr	r3, [pc, #456]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	4a74      	ldr	r2, [pc, #464]	; (8007cbc <HAL_RCC_OscConfig+0x33c>)
 8007aec:	4013      	ands	r3, r2
 8007aee:	0019      	movs	r1, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	021a      	lsls	r2, r3, #8
 8007af6:	4b6e      	ldr	r3, [pc, #440]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007af8:	430a      	orrs	r2, r1
 8007afa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d112      	bne.n	8007b28 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007b02:	4b6b      	ldr	r3, [pc, #428]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a6e      	ldr	r2, [pc, #440]	; (8007cc0 <HAL_RCC_OscConfig+0x340>)
 8007b08:	4013      	ands	r3, r2
 8007b0a:	0019      	movs	r1, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691a      	ldr	r2, [r3, #16]
 8007b10:	4b67      	ldr	r3, [pc, #412]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007b12:	430a      	orrs	r2, r1
 8007b14:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007b16:	4b66      	ldr	r3, [pc, #408]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	0adb      	lsrs	r3, r3, #11
 8007b1c:	2207      	movs	r2, #7
 8007b1e:	4013      	ands	r3, r2
 8007b20:	4a68      	ldr	r2, [pc, #416]	; (8007cc4 <HAL_RCC_OscConfig+0x344>)
 8007b22:	40da      	lsrs	r2, r3
 8007b24:	4b68      	ldr	r3, [pc, #416]	; (8007cc8 <HAL_RCC_OscConfig+0x348>)
 8007b26:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007b28:	4b68      	ldr	r3, [pc, #416]	; (8007ccc <HAL_RCC_OscConfig+0x34c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	f7fc f8a9 	bl	8003c84 <HAL_InitTick>
 8007b32:	1e03      	subs	r3, r0, #0
 8007b34:	d051      	beq.n	8007bda <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e282      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d030      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007b42:	4b5b      	ldr	r3, [pc, #364]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a5e      	ldr	r2, [pc, #376]	; (8007cc0 <HAL_RCC_OscConfig+0x340>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	0019      	movs	r1, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691a      	ldr	r2, [r3, #16]
 8007b50:	4b57      	ldr	r3, [pc, #348]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007b52:	430a      	orrs	r2, r1
 8007b54:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007b56:	4b56      	ldr	r3, [pc, #344]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4b55      	ldr	r3, [pc, #340]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007b5c:	2180      	movs	r1, #128	; 0x80
 8007b5e:	0049      	lsls	r1, r1, #1
 8007b60:	430a      	orrs	r2, r1
 8007b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b64:	f7fc f8ea 	bl	8003d3c <HAL_GetTick>
 8007b68:	0003      	movs	r3, r0
 8007b6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b6c:	e008      	b.n	8007b80 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b6e:	f7fc f8e5 	bl	8003d3c <HAL_GetTick>
 8007b72:	0002      	movs	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e25f      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b80:	4b4b      	ldr	r3, [pc, #300]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	2380      	movs	r3, #128	; 0x80
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	4013      	ands	r3, r2
 8007b8a:	d0f0      	beq.n	8007b6e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b8c:	4b48      	ldr	r3, [pc, #288]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a4a      	ldr	r2, [pc, #296]	; (8007cbc <HAL_RCC_OscConfig+0x33c>)
 8007b92:	4013      	ands	r3, r2
 8007b94:	0019      	movs	r1, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	021a      	lsls	r2, r3, #8
 8007b9c:	4b44      	ldr	r3, [pc, #272]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
 8007ba2:	e01b      	b.n	8007bdc <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007ba4:	4b42      	ldr	r3, [pc, #264]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	4b41      	ldr	r3, [pc, #260]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007baa:	4949      	ldr	r1, [pc, #292]	; (8007cd0 <HAL_RCC_OscConfig+0x350>)
 8007bac:	400a      	ands	r2, r1
 8007bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb0:	f7fc f8c4 	bl	8003d3c <HAL_GetTick>
 8007bb4:	0003      	movs	r3, r0
 8007bb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007bb8:	e008      	b.n	8007bcc <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bba:	f7fc f8bf 	bl	8003d3c <HAL_GetTick>
 8007bbe:	0002      	movs	r2, r0
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d901      	bls.n	8007bcc <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e239      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007bcc:	4b38      	ldr	r3, [pc, #224]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	2380      	movs	r3, #128	; 0x80
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	d1f0      	bne.n	8007bba <HAL_RCC_OscConfig+0x23a>
 8007bd8:	e000      	b.n	8007bdc <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bda:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2208      	movs	r2, #8
 8007be2:	4013      	ands	r3, r2
 8007be4:	d047      	beq.n	8007c76 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007be6:	4b32      	ldr	r3, [pc, #200]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	2238      	movs	r2, #56	; 0x38
 8007bec:	4013      	ands	r3, r2
 8007bee:	2b18      	cmp	r3, #24
 8007bf0:	d10a      	bne.n	8007c08 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007bf2:	4b2f      	ldr	r3, [pc, #188]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	d03c      	beq.n	8007c76 <HAL_RCC_OscConfig+0x2f6>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d138      	bne.n	8007c76 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e21b      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d019      	beq.n	8007c44 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007c10:	4b27      	ldr	r3, [pc, #156]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007c12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007c14:	4b26      	ldr	r3, [pc, #152]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007c16:	2101      	movs	r1, #1
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1c:	f7fc f88e 	bl	8003d3c <HAL_GetTick>
 8007c20:	0003      	movs	r3, r0
 8007c22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c24:	e008      	b.n	8007c38 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c26:	f7fc f889 	bl	8003d3c <HAL_GetTick>
 8007c2a:	0002      	movs	r2, r0
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d901      	bls.n	8007c38 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e203      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c38:	4b1d      	ldr	r3, [pc, #116]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	4013      	ands	r3, r2
 8007c40:	d0f1      	beq.n	8007c26 <HAL_RCC_OscConfig+0x2a6>
 8007c42:	e018      	b.n	8007c76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007c44:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007c46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007c48:	4b19      	ldr	r3, [pc, #100]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	438a      	bics	r2, r1
 8007c4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c50:	f7fc f874 	bl	8003d3c <HAL_GetTick>
 8007c54:	0003      	movs	r3, r0
 8007c56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c58:	e008      	b.n	8007c6c <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c5a:	f7fc f86f 	bl	8003d3c <HAL_GetTick>
 8007c5e:	0002      	movs	r2, r0
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d901      	bls.n	8007c6c <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e1e9      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c6c:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c70:	2202      	movs	r2, #2
 8007c72:	4013      	ands	r3, r2
 8007c74:	d1f1      	bne.n	8007c5a <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2204      	movs	r2, #4
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	d100      	bne.n	8007c82 <HAL_RCC_OscConfig+0x302>
 8007c80:	e0c6      	b.n	8007e10 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c82:	231f      	movs	r3, #31
 8007c84:	18fb      	adds	r3, r7, r3
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007c8a:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	2238      	movs	r2, #56	; 0x38
 8007c90:	4013      	ands	r3, r2
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d11e      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007c96:	4b06      	ldr	r3, [pc, #24]	; (8007cb0 <HAL_RCC_OscConfig+0x330>)
 8007c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	d100      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x322>
 8007ca0:	e0b6      	b.n	8007e10 <HAL_RCC_OscConfig+0x490>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d000      	beq.n	8007cac <HAL_RCC_OscConfig+0x32c>
 8007caa:	e0b1      	b.n	8007e10 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e1c7      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
 8007cb0:	40021000 	.word	0x40021000
 8007cb4:	fffeffff 	.word	0xfffeffff
 8007cb8:	fffbffff 	.word	0xfffbffff
 8007cbc:	ffff80ff 	.word	0xffff80ff
 8007cc0:	ffffc7ff 	.word	0xffffc7ff
 8007cc4:	00f42400 	.word	0x00f42400
 8007cc8:	20000020 	.word	0x20000020
 8007ccc:	20000024 	.word	0x20000024
 8007cd0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007cd4:	4bb8      	ldr	r3, [pc, #736]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cd8:	2380      	movs	r3, #128	; 0x80
 8007cda:	055b      	lsls	r3, r3, #21
 8007cdc:	4013      	ands	r3, r2
 8007cde:	d101      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x364>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e000      	b.n	8007ce6 <HAL_RCC_OscConfig+0x366>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d011      	beq.n	8007d0e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007cea:	4bb3      	ldr	r3, [pc, #716]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cee:	4bb2      	ldr	r3, [pc, #712]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007cf0:	2180      	movs	r1, #128	; 0x80
 8007cf2:	0549      	lsls	r1, r1, #21
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	63da      	str	r2, [r3, #60]	; 0x3c
 8007cf8:	4baf      	ldr	r3, [pc, #700]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cfc:	2380      	movs	r3, #128	; 0x80
 8007cfe:	055b      	lsls	r3, r3, #21
 8007d00:	4013      	ands	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8007d06:	231f      	movs	r3, #31
 8007d08:	18fb      	adds	r3, r7, r3
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d0e:	4bab      	ldr	r3, [pc, #684]	; (8007fbc <HAL_RCC_OscConfig+0x63c>)
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	2380      	movs	r3, #128	; 0x80
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	4013      	ands	r3, r2
 8007d18:	d11a      	bne.n	8007d50 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d1a:	4ba8      	ldr	r3, [pc, #672]	; (8007fbc <HAL_RCC_OscConfig+0x63c>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	4ba7      	ldr	r3, [pc, #668]	; (8007fbc <HAL_RCC_OscConfig+0x63c>)
 8007d20:	2180      	movs	r1, #128	; 0x80
 8007d22:	0049      	lsls	r1, r1, #1
 8007d24:	430a      	orrs	r2, r1
 8007d26:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007d28:	f7fc f808 	bl	8003d3c <HAL_GetTick>
 8007d2c:	0003      	movs	r3, r0
 8007d2e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d30:	e008      	b.n	8007d44 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d32:	f7fc f803 	bl	8003d3c <HAL_GetTick>
 8007d36:	0002      	movs	r2, r0
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d901      	bls.n	8007d44 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e17d      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d44:	4b9d      	ldr	r3, [pc, #628]	; (8007fbc <HAL_RCC_OscConfig+0x63c>)
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	2380      	movs	r3, #128	; 0x80
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	d0f0      	beq.n	8007d32 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d106      	bne.n	8007d66 <HAL_RCC_OscConfig+0x3e6>
 8007d58:	4b97      	ldr	r3, [pc, #604]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007d5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d5c:	4b96      	ldr	r3, [pc, #600]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007d5e:	2101      	movs	r1, #1
 8007d60:	430a      	orrs	r2, r1
 8007d62:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d64:	e01c      	b.n	8007da0 <HAL_RCC_OscConfig+0x420>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	2b05      	cmp	r3, #5
 8007d6c:	d10c      	bne.n	8007d88 <HAL_RCC_OscConfig+0x408>
 8007d6e:	4b92      	ldr	r3, [pc, #584]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007d70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d72:	4b91      	ldr	r3, [pc, #580]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007d74:	2104      	movs	r1, #4
 8007d76:	430a      	orrs	r2, r1
 8007d78:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d7a:	4b8f      	ldr	r3, [pc, #572]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007d7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d7e:	4b8e      	ldr	r3, [pc, #568]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007d80:	2101      	movs	r1, #1
 8007d82:	430a      	orrs	r2, r1
 8007d84:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d86:	e00b      	b.n	8007da0 <HAL_RCC_OscConfig+0x420>
 8007d88:	4b8b      	ldr	r3, [pc, #556]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007d8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d8c:	4b8a      	ldr	r3, [pc, #552]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007d8e:	2101      	movs	r1, #1
 8007d90:	438a      	bics	r2, r1
 8007d92:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d94:	4b88      	ldr	r3, [pc, #544]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007d96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d98:	4b87      	ldr	r3, [pc, #540]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007d9a:	2104      	movs	r1, #4
 8007d9c:	438a      	bics	r2, r1
 8007d9e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d014      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da8:	f7fb ffc8 	bl	8003d3c <HAL_GetTick>
 8007dac:	0003      	movs	r3, r0
 8007dae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007db0:	e009      	b.n	8007dc6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007db2:	f7fb ffc3 	bl	8003d3c <HAL_GetTick>
 8007db6:	0002      	movs	r2, r0
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	4a80      	ldr	r2, [pc, #512]	; (8007fc0 <HAL_RCC_OscConfig+0x640>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e13c      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dc6:	4b7c      	ldr	r3, [pc, #496]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dca:	2202      	movs	r2, #2
 8007dcc:	4013      	ands	r3, r2
 8007dce:	d0f0      	beq.n	8007db2 <HAL_RCC_OscConfig+0x432>
 8007dd0:	e013      	b.n	8007dfa <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd2:	f7fb ffb3 	bl	8003d3c <HAL_GetTick>
 8007dd6:	0003      	movs	r3, r0
 8007dd8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007dda:	e009      	b.n	8007df0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ddc:	f7fb ffae 	bl	8003d3c <HAL_GetTick>
 8007de0:	0002      	movs	r2, r0
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	4a76      	ldr	r2, [pc, #472]	; (8007fc0 <HAL_RCC_OscConfig+0x640>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d901      	bls.n	8007df0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e127      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007df0:	4b71      	ldr	r3, [pc, #452]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df4:	2202      	movs	r2, #2
 8007df6:	4013      	ands	r3, r2
 8007df8:	d1f0      	bne.n	8007ddc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007dfa:	231f      	movs	r3, #31
 8007dfc:	18fb      	adds	r3, r7, r3
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d105      	bne.n	8007e10 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007e04:	4b6c      	ldr	r3, [pc, #432]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e08:	4b6b      	ldr	r3, [pc, #428]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007e0a:	496e      	ldr	r1, [pc, #440]	; (8007fc4 <HAL_RCC_OscConfig+0x644>)
 8007e0c:	400a      	ands	r2, r1
 8007e0e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2220      	movs	r2, #32
 8007e16:	4013      	ands	r3, r2
 8007e18:	d039      	beq.n	8007e8e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01b      	beq.n	8007e5a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e22:	4b65      	ldr	r3, [pc, #404]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	4b64      	ldr	r3, [pc, #400]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007e28:	2180      	movs	r1, #128	; 0x80
 8007e2a:	03c9      	lsls	r1, r1, #15
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e30:	f7fb ff84 	bl	8003d3c <HAL_GetTick>
 8007e34:	0003      	movs	r3, r0
 8007e36:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007e38:	e008      	b.n	8007e4c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e3a:	f7fb ff7f 	bl	8003d3c <HAL_GetTick>
 8007e3e:	0002      	movs	r2, r0
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e0f9      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007e4c:	4b5a      	ldr	r3, [pc, #360]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	2380      	movs	r3, #128	; 0x80
 8007e52:	041b      	lsls	r3, r3, #16
 8007e54:	4013      	ands	r3, r2
 8007e56:	d0f0      	beq.n	8007e3a <HAL_RCC_OscConfig+0x4ba>
 8007e58:	e019      	b.n	8007e8e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e5a:	4b57      	ldr	r3, [pc, #348]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4b56      	ldr	r3, [pc, #344]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007e60:	4959      	ldr	r1, [pc, #356]	; (8007fc8 <HAL_RCC_OscConfig+0x648>)
 8007e62:	400a      	ands	r2, r1
 8007e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e66:	f7fb ff69 	bl	8003d3c <HAL_GetTick>
 8007e6a:	0003      	movs	r3, r0
 8007e6c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007e6e:	e008      	b.n	8007e82 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e70:	f7fb ff64 	bl	8003d3c <HAL_GetTick>
 8007e74:	0002      	movs	r2, r0
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d901      	bls.n	8007e82 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e0de      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007e82:	4b4d      	ldr	r3, [pc, #308]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	2380      	movs	r3, #128	; 0x80
 8007e88:	041b      	lsls	r3, r3, #16
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	d1f0      	bne.n	8007e70 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d100      	bne.n	8007e98 <HAL_RCC_OscConfig+0x518>
 8007e96:	e0d2      	b.n	800803e <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e98:	4b47      	ldr	r3, [pc, #284]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	2238      	movs	r2, #56	; 0x38
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	2b10      	cmp	r3, #16
 8007ea2:	d100      	bne.n	8007ea6 <HAL_RCC_OscConfig+0x526>
 8007ea4:	e081      	b.n	8007faa <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d156      	bne.n	8007f5c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eae:	4b42      	ldr	r3, [pc, #264]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4b41      	ldr	r3, [pc, #260]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007eb4:	4945      	ldr	r1, [pc, #276]	; (8007fcc <HAL_RCC_OscConfig+0x64c>)
 8007eb6:	400a      	ands	r2, r1
 8007eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eba:	f7fb ff3f 	bl	8003d3c <HAL_GetTick>
 8007ebe:	0003      	movs	r3, r0
 8007ec0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ec4:	f7fb ff3a 	bl	8003d3c <HAL_GetTick>
 8007ec8:	0002      	movs	r2, r0
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e0b4      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ed6:	4b38      	ldr	r3, [pc, #224]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	2380      	movs	r3, #128	; 0x80
 8007edc:	049b      	lsls	r3, r3, #18
 8007ede:	4013      	ands	r3, r2
 8007ee0:	d1f0      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ee2:	4b35      	ldr	r3, [pc, #212]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	4a3a      	ldr	r2, [pc, #232]	; (8007fd0 <HAL_RCC_OscConfig+0x650>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	0019      	movs	r1, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efa:	021b      	lsls	r3, r3, #8
 8007efc:	431a      	orrs	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f02:	431a      	orrs	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	4b29      	ldr	r3, [pc, #164]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f12:	430a      	orrs	r2, r1
 8007f14:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f16:	4b28      	ldr	r3, [pc, #160]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	4b27      	ldr	r3, [pc, #156]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f1c:	2180      	movs	r1, #128	; 0x80
 8007f1e:	0449      	lsls	r1, r1, #17
 8007f20:	430a      	orrs	r2, r1
 8007f22:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007f24:	4b24      	ldr	r3, [pc, #144]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	4b23      	ldr	r3, [pc, #140]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f2a:	2180      	movs	r1, #128	; 0x80
 8007f2c:	0549      	lsls	r1, r1, #21
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f32:	f7fb ff03 	bl	8003d3c <HAL_GetTick>
 8007f36:	0003      	movs	r3, r0
 8007f38:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f3a:	e008      	b.n	8007f4e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f3c:	f7fb fefe 	bl	8003d3c <HAL_GetTick>
 8007f40:	0002      	movs	r2, r0
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e078      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f4e:	4b1a      	ldr	r3, [pc, #104]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	2380      	movs	r3, #128	; 0x80
 8007f54:	049b      	lsls	r3, r3, #18
 8007f56:	4013      	ands	r3, r2
 8007f58:	d0f0      	beq.n	8007f3c <HAL_RCC_OscConfig+0x5bc>
 8007f5a:	e070      	b.n	800803e <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f5c:	4b16      	ldr	r3, [pc, #88]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f62:	491a      	ldr	r1, [pc, #104]	; (8007fcc <HAL_RCC_OscConfig+0x64c>)
 8007f64:	400a      	ands	r2, r1
 8007f66:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007f68:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f6a:	68da      	ldr	r2, [r3, #12]
 8007f6c:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f6e:	2103      	movs	r1, #3
 8007f70:	438a      	bics	r2, r1
 8007f72:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8007f74:	4b10      	ldr	r3, [pc, #64]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f76:	68da      	ldr	r2, [r3, #12]
 8007f78:	4b0f      	ldr	r3, [pc, #60]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f7a:	4916      	ldr	r1, [pc, #88]	; (8007fd4 <HAL_RCC_OscConfig+0x654>)
 8007f7c:	400a      	ands	r2, r1
 8007f7e:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f80:	f7fb fedc 	bl	8003d3c <HAL_GetTick>
 8007f84:	0003      	movs	r3, r0
 8007f86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f88:	e008      	b.n	8007f9c <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f8a:	f7fb fed7 	bl	8003d3c <HAL_GetTick>
 8007f8e:	0002      	movs	r2, r0
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d901      	bls.n	8007f9c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e051      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f9c:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <HAL_RCC_OscConfig+0x638>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	2380      	movs	r3, #128	; 0x80
 8007fa2:	049b      	lsls	r3, r3, #18
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	d1f0      	bne.n	8007f8a <HAL_RCC_OscConfig+0x60a>
 8007fa8:	e049      	b.n	800803e <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d112      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e044      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	40021000 	.word	0x40021000
 8007fbc:	40007000 	.word	0x40007000
 8007fc0:	00001388 	.word	0x00001388
 8007fc4:	efffffff 	.word	0xefffffff
 8007fc8:	ffbfffff 	.word	0xffbfffff
 8007fcc:	feffffff 	.word	0xfeffffff
 8007fd0:	11c1808c 	.word	0x11c1808c
 8007fd4:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007fd8:	4b1b      	ldr	r3, [pc, #108]	; (8008048 <HAL_RCC_OscConfig+0x6c8>)
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2203      	movs	r2, #3
 8007fe2:	401a      	ands	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d126      	bne.n	800803a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2270      	movs	r2, #112	; 0x70
 8007ff0:	401a      	ands	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d11f      	bne.n	800803a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	23fe      	movs	r3, #254	; 0xfe
 8007ffe:	01db      	lsls	r3, r3, #7
 8008000:	401a      	ands	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008006:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008008:	429a      	cmp	r2, r3
 800800a:	d116      	bne.n	800803a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	23f8      	movs	r3, #248	; 0xf8
 8008010:	039b      	lsls	r3, r3, #14
 8008012:	401a      	ands	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008018:	429a      	cmp	r2, r3
 800801a:	d10e      	bne.n	800803a <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	23e0      	movs	r3, #224	; 0xe0
 8008020:	051b      	lsls	r3, r3, #20
 8008022:	401a      	ands	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008028:	429a      	cmp	r2, r3
 800802a:	d106      	bne.n	800803a <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	0f5b      	lsrs	r3, r3, #29
 8008030:	075a      	lsls	r2, r3, #29
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008036:	429a      	cmp	r2, r3
 8008038:	d001      	beq.n	800803e <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e000      	b.n	8008040 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	0018      	movs	r0, r3
 8008042:	46bd      	mov	sp, r7
 8008044:	b008      	add	sp, #32
 8008046:	bd80      	pop	{r7, pc}
 8008048:	40021000 	.word	0x40021000

0800804c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e0e9      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008060:	4b76      	ldr	r3, [pc, #472]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2207      	movs	r2, #7
 8008066:	4013      	ands	r3, r2
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d91e      	bls.n	80080ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800806e:	4b73      	ldr	r3, [pc, #460]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2207      	movs	r2, #7
 8008074:	4393      	bics	r3, r2
 8008076:	0019      	movs	r1, r3
 8008078:	4b70      	ldr	r3, [pc, #448]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008080:	f7fb fe5c 	bl	8003d3c <HAL_GetTick>
 8008084:	0003      	movs	r3, r0
 8008086:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008088:	e009      	b.n	800809e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800808a:	f7fb fe57 	bl	8003d3c <HAL_GetTick>
 800808e:	0002      	movs	r2, r0
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	4a6a      	ldr	r2, [pc, #424]	; (8008240 <HAL_RCC_ClockConfig+0x1f4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d901      	bls.n	800809e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e0ca      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800809e:	4b67      	ldr	r3, [pc, #412]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2207      	movs	r2, #7
 80080a4:	4013      	ands	r3, r2
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d1ee      	bne.n	800808a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2202      	movs	r2, #2
 80080b2:	4013      	ands	r3, r2
 80080b4:	d015      	beq.n	80080e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2204      	movs	r2, #4
 80080bc:	4013      	ands	r3, r2
 80080be:	d006      	beq.n	80080ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80080c0:	4b60      	ldr	r3, [pc, #384]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	4b5f      	ldr	r3, [pc, #380]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 80080c6:	21e0      	movs	r1, #224	; 0xe0
 80080c8:	01c9      	lsls	r1, r1, #7
 80080ca:	430a      	orrs	r2, r1
 80080cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080ce:	4b5d      	ldr	r3, [pc, #372]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	4a5d      	ldr	r2, [pc, #372]	; (8008248 <HAL_RCC_ClockConfig+0x1fc>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	0019      	movs	r1, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	4b59      	ldr	r3, [pc, #356]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 80080de:	430a      	orrs	r2, r1
 80080e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2201      	movs	r2, #1
 80080e8:	4013      	ands	r3, r2
 80080ea:	d057      	beq.n	800819c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d107      	bne.n	8008104 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080f4:	4b53      	ldr	r3, [pc, #332]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	2380      	movs	r3, #128	; 0x80
 80080fa:	029b      	lsls	r3, r3, #10
 80080fc:	4013      	ands	r3, r2
 80080fe:	d12b      	bne.n	8008158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e097      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2b02      	cmp	r3, #2
 800810a:	d107      	bne.n	800811c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800810c:	4b4d      	ldr	r3, [pc, #308]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	2380      	movs	r3, #128	; 0x80
 8008112:	049b      	lsls	r3, r3, #18
 8008114:	4013      	ands	r3, r2
 8008116:	d11f      	bne.n	8008158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e08b      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d107      	bne.n	8008134 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008124:	4b47      	ldr	r3, [pc, #284]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	2380      	movs	r3, #128	; 0x80
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	4013      	ands	r3, r2
 800812e:	d113      	bne.n	8008158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e07f      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2b03      	cmp	r3, #3
 800813a:	d106      	bne.n	800814a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800813c:	4b41      	ldr	r3, [pc, #260]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 800813e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008140:	2202      	movs	r2, #2
 8008142:	4013      	ands	r3, r2
 8008144:	d108      	bne.n	8008158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e074      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800814a:	4b3e      	ldr	r3, [pc, #248]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 800814c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814e:	2202      	movs	r2, #2
 8008150:	4013      	ands	r3, r2
 8008152:	d101      	bne.n	8008158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e06d      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008158:	4b3a      	ldr	r3, [pc, #232]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	2207      	movs	r2, #7
 800815e:	4393      	bics	r3, r2
 8008160:	0019      	movs	r1, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	4b37      	ldr	r3, [pc, #220]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 8008168:	430a      	orrs	r2, r1
 800816a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816c:	f7fb fde6 	bl	8003d3c <HAL_GetTick>
 8008170:	0003      	movs	r3, r0
 8008172:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008174:	e009      	b.n	800818a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008176:	f7fb fde1 	bl	8003d3c <HAL_GetTick>
 800817a:	0002      	movs	r2, r0
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	4a2f      	ldr	r2, [pc, #188]	; (8008240 <HAL_RCC_ClockConfig+0x1f4>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d901      	bls.n	800818a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e054      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800818a:	4b2e      	ldr	r3, [pc, #184]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2238      	movs	r2, #56	; 0x38
 8008190:	401a      	ands	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	429a      	cmp	r2, r3
 800819a:	d1ec      	bne.n	8008176 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800819c:	4b27      	ldr	r3, [pc, #156]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2207      	movs	r2, #7
 80081a2:	4013      	ands	r3, r2
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d21e      	bcs.n	80081e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081aa:	4b24      	ldr	r3, [pc, #144]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2207      	movs	r2, #7
 80081b0:	4393      	bics	r3, r2
 80081b2:	0019      	movs	r1, r3
 80081b4:	4b21      	ldr	r3, [pc, #132]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80081bc:	f7fb fdbe 	bl	8003d3c <HAL_GetTick>
 80081c0:	0003      	movs	r3, r0
 80081c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80081c4:	e009      	b.n	80081da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081c6:	f7fb fdb9 	bl	8003d3c <HAL_GetTick>
 80081ca:	0002      	movs	r2, r0
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	4a1b      	ldr	r2, [pc, #108]	; (8008240 <HAL_RCC_ClockConfig+0x1f4>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d901      	bls.n	80081da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e02c      	b.n	8008234 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80081da:	4b18      	ldr	r3, [pc, #96]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2207      	movs	r2, #7
 80081e0:	4013      	ands	r3, r2
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d1ee      	bne.n	80081c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2204      	movs	r2, #4
 80081ee:	4013      	ands	r3, r2
 80081f0:	d009      	beq.n	8008206 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80081f2:	4b14      	ldr	r3, [pc, #80]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	4a15      	ldr	r2, [pc, #84]	; (800824c <HAL_RCC_ClockConfig+0x200>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	0019      	movs	r1, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	4b10      	ldr	r3, [pc, #64]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 8008202:	430a      	orrs	r2, r1
 8008204:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008206:	f000 f829 	bl	800825c <HAL_RCC_GetSysClockFreq>
 800820a:	0001      	movs	r1, r0
 800820c:	4b0d      	ldr	r3, [pc, #52]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	0a1b      	lsrs	r3, r3, #8
 8008212:	220f      	movs	r2, #15
 8008214:	401a      	ands	r2, r3
 8008216:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <HAL_RCC_ClockConfig+0x204>)
 8008218:	0092      	lsls	r2, r2, #2
 800821a:	58d3      	ldr	r3, [r2, r3]
 800821c:	221f      	movs	r2, #31
 800821e:	4013      	ands	r3, r2
 8008220:	000a      	movs	r2, r1
 8008222:	40da      	lsrs	r2, r3
 8008224:	4b0b      	ldr	r3, [pc, #44]	; (8008254 <HAL_RCC_ClockConfig+0x208>)
 8008226:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008228:	4b0b      	ldr	r3, [pc, #44]	; (8008258 <HAL_RCC_ClockConfig+0x20c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	0018      	movs	r0, r3
 800822e:	f7fb fd29 	bl	8003c84 <HAL_InitTick>
 8008232:	0003      	movs	r3, r0
}
 8008234:	0018      	movs	r0, r3
 8008236:	46bd      	mov	sp, r7
 8008238:	b004      	add	sp, #16
 800823a:	bd80      	pop	{r7, pc}
 800823c:	40022000 	.word	0x40022000
 8008240:	00001388 	.word	0x00001388
 8008244:	40021000 	.word	0x40021000
 8008248:	fffff0ff 	.word	0xfffff0ff
 800824c:	ffff8fff 	.word	0xffff8fff
 8008250:	0800e6c4 	.word	0x0800e6c4
 8008254:	20000020 	.word	0x20000020
 8008258:	20000024 	.word	0x20000024

0800825c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008262:	4b3c      	ldr	r3, [pc, #240]	; (8008354 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	2238      	movs	r2, #56	; 0x38
 8008268:	4013      	ands	r3, r2
 800826a:	d10f      	bne.n	800828c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800826c:	4b39      	ldr	r3, [pc, #228]	; (8008354 <HAL_RCC_GetSysClockFreq+0xf8>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	0adb      	lsrs	r3, r3, #11
 8008272:	2207      	movs	r2, #7
 8008274:	4013      	ands	r3, r2
 8008276:	2201      	movs	r2, #1
 8008278:	409a      	lsls	r2, r3
 800827a:	0013      	movs	r3, r2
 800827c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	4835      	ldr	r0, [pc, #212]	; (8008358 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008282:	f7f7 ff5b 	bl	800013c <__udivsi3>
 8008286:	0003      	movs	r3, r0
 8008288:	613b      	str	r3, [r7, #16]
 800828a:	e05d      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800828c:	4b31      	ldr	r3, [pc, #196]	; (8008354 <HAL_RCC_GetSysClockFreq+0xf8>)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2238      	movs	r2, #56	; 0x38
 8008292:	4013      	ands	r3, r2
 8008294:	2b08      	cmp	r3, #8
 8008296:	d102      	bne.n	800829e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008298:	4b30      	ldr	r3, [pc, #192]	; (800835c <HAL_RCC_GetSysClockFreq+0x100>)
 800829a:	613b      	str	r3, [r7, #16]
 800829c:	e054      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800829e:	4b2d      	ldr	r3, [pc, #180]	; (8008354 <HAL_RCC_GetSysClockFreq+0xf8>)
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	2238      	movs	r2, #56	; 0x38
 80082a4:	4013      	ands	r3, r2
 80082a6:	2b10      	cmp	r3, #16
 80082a8:	d138      	bne.n	800831c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80082aa:	4b2a      	ldr	r3, [pc, #168]	; (8008354 <HAL_RCC_GetSysClockFreq+0xf8>)
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	2203      	movs	r2, #3
 80082b0:	4013      	ands	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80082b4:	4b27      	ldr	r3, [pc, #156]	; (8008354 <HAL_RCC_GetSysClockFreq+0xf8>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	091b      	lsrs	r3, r3, #4
 80082ba:	2207      	movs	r2, #7
 80082bc:	4013      	ands	r3, r2
 80082be:	3301      	adds	r3, #1
 80082c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d10d      	bne.n	80082e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082c8:	68b9      	ldr	r1, [r7, #8]
 80082ca:	4824      	ldr	r0, [pc, #144]	; (800835c <HAL_RCC_GetSysClockFreq+0x100>)
 80082cc:	f7f7 ff36 	bl	800013c <__udivsi3>
 80082d0:	0003      	movs	r3, r0
 80082d2:	0019      	movs	r1, r3
 80082d4:	4b1f      	ldr	r3, [pc, #124]	; (8008354 <HAL_RCC_GetSysClockFreq+0xf8>)
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	0a1b      	lsrs	r3, r3, #8
 80082da:	227f      	movs	r2, #127	; 0x7f
 80082dc:	4013      	ands	r3, r2
 80082de:	434b      	muls	r3, r1
 80082e0:	617b      	str	r3, [r7, #20]
        break;
 80082e2:	e00d      	b.n	8008300 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80082e4:	68b9      	ldr	r1, [r7, #8]
 80082e6:	481c      	ldr	r0, [pc, #112]	; (8008358 <HAL_RCC_GetSysClockFreq+0xfc>)
 80082e8:	f7f7 ff28 	bl	800013c <__udivsi3>
 80082ec:	0003      	movs	r3, r0
 80082ee:	0019      	movs	r1, r3
 80082f0:	4b18      	ldr	r3, [pc, #96]	; (8008354 <HAL_RCC_GetSysClockFreq+0xf8>)
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	0a1b      	lsrs	r3, r3, #8
 80082f6:	227f      	movs	r2, #127	; 0x7f
 80082f8:	4013      	ands	r3, r2
 80082fa:	434b      	muls	r3, r1
 80082fc:	617b      	str	r3, [r7, #20]
        break;
 80082fe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008300:	4b14      	ldr	r3, [pc, #80]	; (8008354 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	0f5b      	lsrs	r3, r3, #29
 8008306:	2207      	movs	r2, #7
 8008308:	4013      	ands	r3, r2
 800830a:	3301      	adds	r3, #1
 800830c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	6978      	ldr	r0, [r7, #20]
 8008312:	f7f7 ff13 	bl	800013c <__udivsi3>
 8008316:	0003      	movs	r3, r0
 8008318:	613b      	str	r3, [r7, #16]
 800831a:	e015      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800831c:	4b0d      	ldr	r3, [pc, #52]	; (8008354 <HAL_RCC_GetSysClockFreq+0xf8>)
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	2238      	movs	r2, #56	; 0x38
 8008322:	4013      	ands	r3, r2
 8008324:	2b20      	cmp	r3, #32
 8008326:	d103      	bne.n	8008330 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008328:	2380      	movs	r3, #128	; 0x80
 800832a:	021b      	lsls	r3, r3, #8
 800832c:	613b      	str	r3, [r7, #16]
 800832e:	e00b      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008330:	4b08      	ldr	r3, [pc, #32]	; (8008354 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2238      	movs	r2, #56	; 0x38
 8008336:	4013      	ands	r3, r2
 8008338:	2b18      	cmp	r3, #24
 800833a:	d103      	bne.n	8008344 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800833c:	23fa      	movs	r3, #250	; 0xfa
 800833e:	01db      	lsls	r3, r3, #7
 8008340:	613b      	str	r3, [r7, #16]
 8008342:	e001      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008348:	693b      	ldr	r3, [r7, #16]
}
 800834a:	0018      	movs	r0, r3
 800834c:	46bd      	mov	sp, r7
 800834e:	b006      	add	sp, #24
 8008350:	bd80      	pop	{r7, pc}
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	40021000 	.word	0x40021000
 8008358:	00f42400 	.word	0x00f42400
 800835c:	007a1200 	.word	0x007a1200

08008360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008364:	4b02      	ldr	r3, [pc, #8]	; (8008370 <HAL_RCC_GetHCLKFreq+0x10>)
 8008366:	681b      	ldr	r3, [r3, #0]
}
 8008368:	0018      	movs	r0, r3
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	46c0      	nop			; (mov r8, r8)
 8008370:	20000020 	.word	0x20000020

08008374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008374:	b5b0      	push	{r4, r5, r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008378:	f7ff fff2 	bl	8008360 <HAL_RCC_GetHCLKFreq>
 800837c:	0004      	movs	r4, r0
 800837e:	f7ff faf3 	bl	8007968 <LL_RCC_GetAPB1Prescaler>
 8008382:	0003      	movs	r3, r0
 8008384:	0b1a      	lsrs	r2, r3, #12
 8008386:	4b05      	ldr	r3, [pc, #20]	; (800839c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008388:	0092      	lsls	r2, r2, #2
 800838a:	58d3      	ldr	r3, [r2, r3]
 800838c:	221f      	movs	r2, #31
 800838e:	4013      	ands	r3, r2
 8008390:	40dc      	lsrs	r4, r3
 8008392:	0023      	movs	r3, r4
}
 8008394:	0018      	movs	r0, r3
 8008396:	46bd      	mov	sp, r7
 8008398:	bdb0      	pop	{r4, r5, r7, pc}
 800839a:	46c0      	nop			; (mov r8, r8)
 800839c:	0800e704 	.word	0x0800e704

080083a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80083a8:	2313      	movs	r3, #19
 80083aa:	18fb      	adds	r3, r7, r3
 80083ac:	2200      	movs	r2, #0
 80083ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083b0:	2312      	movs	r3, #18
 80083b2:	18fb      	adds	r3, r7, r3
 80083b4:	2200      	movs	r2, #0
 80083b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	2380      	movs	r3, #128	; 0x80
 80083be:	029b      	lsls	r3, r3, #10
 80083c0:	4013      	ands	r3, r2
 80083c2:	d100      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80083c4:	e0ad      	b.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083c6:	2011      	movs	r0, #17
 80083c8:	183b      	adds	r3, r7, r0
 80083ca:	2200      	movs	r2, #0
 80083cc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083ce:	4b47      	ldr	r3, [pc, #284]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80083d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083d2:	2380      	movs	r3, #128	; 0x80
 80083d4:	055b      	lsls	r3, r3, #21
 80083d6:	4013      	ands	r3, r2
 80083d8:	d110      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083da:	4b44      	ldr	r3, [pc, #272]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80083dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083de:	4b43      	ldr	r3, [pc, #268]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80083e0:	2180      	movs	r1, #128	; 0x80
 80083e2:	0549      	lsls	r1, r1, #21
 80083e4:	430a      	orrs	r2, r1
 80083e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80083e8:	4b40      	ldr	r3, [pc, #256]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80083ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083ec:	2380      	movs	r3, #128	; 0x80
 80083ee:	055b      	lsls	r3, r3, #21
 80083f0:	4013      	ands	r3, r2
 80083f2:	60bb      	str	r3, [r7, #8]
 80083f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083f6:	183b      	adds	r3, r7, r0
 80083f8:	2201      	movs	r2, #1
 80083fa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083fc:	4b3c      	ldr	r3, [pc, #240]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	4b3b      	ldr	r3, [pc, #236]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008402:	2180      	movs	r1, #128	; 0x80
 8008404:	0049      	lsls	r1, r1, #1
 8008406:	430a      	orrs	r2, r1
 8008408:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800840a:	f7fb fc97 	bl	8003d3c <HAL_GetTick>
 800840e:	0003      	movs	r3, r0
 8008410:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008412:	e00b      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008414:	f7fb fc92 	bl	8003d3c <HAL_GetTick>
 8008418:	0002      	movs	r2, r0
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	2b02      	cmp	r3, #2
 8008420:	d904      	bls.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008422:	2313      	movs	r3, #19
 8008424:	18fb      	adds	r3, r7, r3
 8008426:	2203      	movs	r2, #3
 8008428:	701a      	strb	r2, [r3, #0]
        break;
 800842a:	e005      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800842c:	4b30      	ldr	r3, [pc, #192]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	2380      	movs	r3, #128	; 0x80
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	4013      	ands	r3, r2
 8008436:	d0ed      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008438:	2313      	movs	r3, #19
 800843a:	18fb      	adds	r3, r7, r3
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d15e      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008442:	4b2a      	ldr	r3, [pc, #168]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008444:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008446:	23c0      	movs	r3, #192	; 0xc0
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4013      	ands	r3, r2
 800844c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d019      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	429a      	cmp	r2, r3
 800845c:	d014      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800845e:	4b23      	ldr	r3, [pc, #140]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008462:	4a24      	ldr	r2, [pc, #144]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8008464:	4013      	ands	r3, r2
 8008466:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008468:	4b20      	ldr	r3, [pc, #128]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800846a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800846c:	4b1f      	ldr	r3, [pc, #124]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800846e:	2180      	movs	r1, #128	; 0x80
 8008470:	0249      	lsls	r1, r1, #9
 8008472:	430a      	orrs	r2, r1
 8008474:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008476:	4b1d      	ldr	r3, [pc, #116]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008478:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800847a:	4b1c      	ldr	r3, [pc, #112]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800847c:	491e      	ldr	r1, [pc, #120]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800847e:	400a      	ands	r2, r1
 8008480:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008482:	4b1a      	ldr	r3, [pc, #104]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2201      	movs	r2, #1
 800848c:	4013      	ands	r3, r2
 800848e:	d016      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008490:	f7fb fc54 	bl	8003d3c <HAL_GetTick>
 8008494:	0003      	movs	r3, r0
 8008496:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008498:	e00c      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800849a:	f7fb fc4f 	bl	8003d3c <HAL_GetTick>
 800849e:	0002      	movs	r2, r0
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	4a15      	ldr	r2, [pc, #84]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d904      	bls.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80084aa:	2313      	movs	r3, #19
 80084ac:	18fb      	adds	r3, r7, r3
 80084ae:	2203      	movs	r2, #3
 80084b0:	701a      	strb	r2, [r3, #0]
            break;
 80084b2:	e004      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084b4:	4b0d      	ldr	r3, [pc, #52]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80084b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b8:	2202      	movs	r2, #2
 80084ba:	4013      	ands	r3, r2
 80084bc:	d0ed      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80084be:	2313      	movs	r3, #19
 80084c0:	18fb      	adds	r3, r7, r3
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084c8:	4b08      	ldr	r3, [pc, #32]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80084ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084cc:	4a09      	ldr	r2, [pc, #36]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80084ce:	4013      	ands	r3, r2
 80084d0:	0019      	movs	r1, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084d6:	4b05      	ldr	r3, [pc, #20]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80084d8:	430a      	orrs	r2, r1
 80084da:	65da      	str	r2, [r3, #92]	; 0x5c
 80084dc:	e016      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084de:	2312      	movs	r3, #18
 80084e0:	18fb      	adds	r3, r7, r3
 80084e2:	2213      	movs	r2, #19
 80084e4:	18ba      	adds	r2, r7, r2
 80084e6:	7812      	ldrb	r2, [r2, #0]
 80084e8:	701a      	strb	r2, [r3, #0]
 80084ea:	e00f      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80084ec:	40021000 	.word	0x40021000
 80084f0:	40007000 	.word	0x40007000
 80084f4:	fffffcff 	.word	0xfffffcff
 80084f8:	fffeffff 	.word	0xfffeffff
 80084fc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008500:	2312      	movs	r3, #18
 8008502:	18fb      	adds	r3, r7, r3
 8008504:	2213      	movs	r2, #19
 8008506:	18ba      	adds	r2, r7, r2
 8008508:	7812      	ldrb	r2, [r2, #0]
 800850a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800850c:	2311      	movs	r3, #17
 800850e:	18fb      	adds	r3, r7, r3
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d105      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008516:	4bb6      	ldr	r3, [pc, #728]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800851a:	4bb5      	ldr	r3, [pc, #724]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800851c:	49b5      	ldr	r1, [pc, #724]	; (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800851e:	400a      	ands	r2, r1
 8008520:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2201      	movs	r2, #1
 8008528:	4013      	ands	r3, r2
 800852a:	d009      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800852c:	4bb0      	ldr	r3, [pc, #704]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800852e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008530:	2203      	movs	r2, #3
 8008532:	4393      	bics	r3, r2
 8008534:	0019      	movs	r1, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	4bad      	ldr	r3, [pc, #692]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800853c:	430a      	orrs	r2, r1
 800853e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2202      	movs	r2, #2
 8008546:	4013      	ands	r3, r2
 8008548:	d009      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800854a:	4ba9      	ldr	r3, [pc, #676]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800854c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854e:	220c      	movs	r2, #12
 8008550:	4393      	bics	r3, r2
 8008552:	0019      	movs	r1, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	4ba5      	ldr	r3, [pc, #660]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800855a:	430a      	orrs	r2, r1
 800855c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2204      	movs	r2, #4
 8008564:	4013      	ands	r3, r2
 8008566:	d009      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008568:	4ba1      	ldr	r3, [pc, #644]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800856a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800856c:	2230      	movs	r2, #48	; 0x30
 800856e:	4393      	bics	r3, r2
 8008570:	0019      	movs	r1, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	4b9e      	ldr	r3, [pc, #632]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008578:	430a      	orrs	r2, r1
 800857a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2210      	movs	r2, #16
 8008582:	4013      	ands	r3, r2
 8008584:	d009      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008586:	4b9a      	ldr	r3, [pc, #616]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858a:	4a9b      	ldr	r2, [pc, #620]	; (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800858c:	4013      	ands	r3, r2
 800858e:	0019      	movs	r1, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691a      	ldr	r2, [r3, #16]
 8008594:	4b96      	ldr	r3, [pc, #600]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008596:	430a      	orrs	r2, r1
 8008598:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	2380      	movs	r3, #128	; 0x80
 80085a0:	015b      	lsls	r3, r3, #5
 80085a2:	4013      	ands	r3, r2
 80085a4:	d009      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80085a6:	4b92      	ldr	r3, [pc, #584]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80085a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085aa:	4a94      	ldr	r2, [pc, #592]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80085ac:	4013      	ands	r3, r2
 80085ae:	0019      	movs	r1, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	695a      	ldr	r2, [r3, #20]
 80085b4:	4b8e      	ldr	r3, [pc, #568]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80085b6:	430a      	orrs	r2, r1
 80085b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	2380      	movs	r3, #128	; 0x80
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4013      	ands	r3, r2
 80085c4:	d009      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085c6:	4b8a      	ldr	r3, [pc, #552]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80085c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ca:	4a8d      	ldr	r2, [pc, #564]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	0019      	movs	r1, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085d4:	4b86      	ldr	r3, [pc, #536]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80085d6:	430a      	orrs	r2, r1
 80085d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	2380      	movs	r3, #128	; 0x80
 80085e0:	00db      	lsls	r3, r3, #3
 80085e2:	4013      	ands	r3, r2
 80085e4:	d009      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80085e6:	4b82      	ldr	r3, [pc, #520]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80085e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ea:	4a86      	ldr	r2, [pc, #536]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80085ec:	4013      	ands	r3, r2
 80085ee:	0019      	movs	r1, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f4:	4b7e      	ldr	r3, [pc, #504]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80085f6:	430a      	orrs	r2, r1
 80085f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2220      	movs	r2, #32
 8008600:	4013      	ands	r3, r2
 8008602:	d009      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008604:	4b7a      	ldr	r3, [pc, #488]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008608:	4a7f      	ldr	r2, [pc, #508]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800860a:	4013      	ands	r3, r2
 800860c:	0019      	movs	r1, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699a      	ldr	r2, [r3, #24]
 8008612:	4b77      	ldr	r3, [pc, #476]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008614:	430a      	orrs	r2, r1
 8008616:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2240      	movs	r2, #64	; 0x40
 800861e:	4013      	ands	r3, r2
 8008620:	d009      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008622:	4b73      	ldr	r3, [pc, #460]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008626:	4a79      	ldr	r2, [pc, #484]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8008628:	4013      	ands	r3, r2
 800862a:	0019      	movs	r1, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	69da      	ldr	r2, [r3, #28]
 8008630:	4b6f      	ldr	r3, [pc, #444]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008632:	430a      	orrs	r2, r1
 8008634:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	2380      	movs	r3, #128	; 0x80
 800863c:	01db      	lsls	r3, r3, #7
 800863e:	4013      	ands	r3, r2
 8008640:	d015      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008642:	4b6b      	ldr	r3, [pc, #428]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	0899      	lsrs	r1, r3, #2
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800864e:	4b68      	ldr	r3, [pc, #416]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008650:	430a      	orrs	r2, r1
 8008652:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008658:	2380      	movs	r3, #128	; 0x80
 800865a:	05db      	lsls	r3, r3, #23
 800865c:	429a      	cmp	r2, r3
 800865e:	d106      	bne.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008660:	4b63      	ldr	r3, [pc, #396]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	4b62      	ldr	r3, [pc, #392]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008666:	2180      	movs	r1, #128	; 0x80
 8008668:	0249      	lsls	r1, r1, #9
 800866a:	430a      	orrs	r2, r1
 800866c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	2380      	movs	r3, #128	; 0x80
 8008674:	031b      	lsls	r3, r3, #12
 8008676:	4013      	ands	r3, r2
 8008678:	d009      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800867a:	4b5d      	ldr	r3, [pc, #372]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800867c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867e:	2240      	movs	r2, #64	; 0x40
 8008680:	4393      	bics	r3, r2
 8008682:	0019      	movs	r1, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008688:	4b59      	ldr	r3, [pc, #356]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800868a:	430a      	orrs	r2, r1
 800868c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	2380      	movs	r3, #128	; 0x80
 8008694:	039b      	lsls	r3, r3, #14
 8008696:	4013      	ands	r3, r2
 8008698:	d016      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800869a:	4b55      	ldr	r3, [pc, #340]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800869c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869e:	4a5c      	ldr	r2, [pc, #368]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80086a0:	4013      	ands	r3, r2
 80086a2:	0019      	movs	r1, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a8:	4b51      	ldr	r3, [pc, #324]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80086aa:	430a      	orrs	r2, r1
 80086ac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086b2:	2380      	movs	r3, #128	; 0x80
 80086b4:	03db      	lsls	r3, r3, #15
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d106      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80086ba:	4b4d      	ldr	r3, [pc, #308]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80086bc:	68da      	ldr	r2, [r3, #12]
 80086be:	4b4c      	ldr	r3, [pc, #304]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80086c0:	2180      	movs	r1, #128	; 0x80
 80086c2:	0449      	lsls	r1, r1, #17
 80086c4:	430a      	orrs	r2, r1
 80086c6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	2380      	movs	r3, #128	; 0x80
 80086ce:	03db      	lsls	r3, r3, #15
 80086d0:	4013      	ands	r3, r2
 80086d2:	d016      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80086d4:	4b46      	ldr	r3, [pc, #280]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80086d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d8:	4a4e      	ldr	r2, [pc, #312]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80086da:	4013      	ands	r3, r2
 80086dc:	0019      	movs	r1, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086e2:	4b43      	ldr	r3, [pc, #268]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80086e4:	430a      	orrs	r2, r1
 80086e6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086ec:	2380      	movs	r3, #128	; 0x80
 80086ee:	045b      	lsls	r3, r3, #17
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d106      	bne.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80086f4:	4b3e      	ldr	r3, [pc, #248]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80086f6:	68da      	ldr	r2, [r3, #12]
 80086f8:	4b3d      	ldr	r3, [pc, #244]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80086fa:	2180      	movs	r1, #128	; 0x80
 80086fc:	0449      	lsls	r1, r1, #17
 80086fe:	430a      	orrs	r2, r1
 8008700:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	2380      	movs	r3, #128	; 0x80
 8008708:	011b      	lsls	r3, r3, #4
 800870a:	4013      	ands	r3, r2
 800870c:	d014      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800870e:	4b38      	ldr	r3, [pc, #224]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008712:	2203      	movs	r2, #3
 8008714:	4393      	bics	r3, r2
 8008716:	0019      	movs	r1, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a1a      	ldr	r2, [r3, #32]
 800871c:	4b34      	ldr	r3, [pc, #208]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800871e:	430a      	orrs	r2, r1
 8008720:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d106      	bne.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800872a:	4b31      	ldr	r3, [pc, #196]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	4b30      	ldr	r3, [pc, #192]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008730:	2180      	movs	r1, #128	; 0x80
 8008732:	0249      	lsls	r1, r1, #9
 8008734:	430a      	orrs	r2, r1
 8008736:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	2380      	movs	r3, #128	; 0x80
 800873e:	019b      	lsls	r3, r3, #6
 8008740:	4013      	ands	r3, r2
 8008742:	d014      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008744:	4b2a      	ldr	r3, [pc, #168]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008748:	220c      	movs	r2, #12
 800874a:	4393      	bics	r3, r2
 800874c:	0019      	movs	r1, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008752:	4b27      	ldr	r3, [pc, #156]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008754:	430a      	orrs	r2, r1
 8008756:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b04      	cmp	r3, #4
 800875e:	d106      	bne.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008760:	4b23      	ldr	r3, [pc, #140]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008762:	68da      	ldr	r2, [r3, #12]
 8008764:	4b22      	ldr	r3, [pc, #136]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008766:	2180      	movs	r1, #128	; 0x80
 8008768:	0249      	lsls	r1, r1, #9
 800876a:	430a      	orrs	r2, r1
 800876c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	2380      	movs	r3, #128	; 0x80
 8008774:	045b      	lsls	r3, r3, #17
 8008776:	4013      	ands	r3, r2
 8008778:	d016      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800877a:	4b1d      	ldr	r3, [pc, #116]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800877c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800877e:	4a22      	ldr	r2, [pc, #136]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008780:	4013      	ands	r3, r2
 8008782:	0019      	movs	r1, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008788:	4b19      	ldr	r3, [pc, #100]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800878a:	430a      	orrs	r2, r1
 800878c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008792:	2380      	movs	r3, #128	; 0x80
 8008794:	019b      	lsls	r3, r3, #6
 8008796:	429a      	cmp	r2, r3
 8008798:	d106      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800879a:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	4b14      	ldr	r3, [pc, #80]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80087a0:	2180      	movs	r1, #128	; 0x80
 80087a2:	0449      	lsls	r1, r1, #17
 80087a4:	430a      	orrs	r2, r1
 80087a6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	2380      	movs	r3, #128	; 0x80
 80087ae:	049b      	lsls	r3, r3, #18
 80087b0:	4013      	ands	r3, r2
 80087b2:	d016      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80087b4:	4b0e      	ldr	r3, [pc, #56]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80087b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b8:	4a10      	ldr	r2, [pc, #64]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80087ba:	4013      	ands	r3, r2
 80087bc:	0019      	movs	r1, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087c2:	4b0b      	ldr	r3, [pc, #44]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80087c4:	430a      	orrs	r2, r1
 80087c6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087cc:	2380      	movs	r3, #128	; 0x80
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d106      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80087d4:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80087d6:	68da      	ldr	r2, [r3, #12]
 80087d8:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80087da:	2180      	movs	r1, #128	; 0x80
 80087dc:	0449      	lsls	r1, r1, #17
 80087de:	430a      	orrs	r2, r1
 80087e0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80087e2:	2312      	movs	r3, #18
 80087e4:	18fb      	adds	r3, r7, r3
 80087e6:	781b      	ldrb	r3, [r3, #0]
}
 80087e8:	0018      	movs	r0, r3
 80087ea:	46bd      	mov	sp, r7
 80087ec:	b006      	add	sp, #24
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	40021000 	.word	0x40021000
 80087f4:	efffffff 	.word	0xefffffff
 80087f8:	fffff3ff 	.word	0xfffff3ff
 80087fc:	fffffcff 	.word	0xfffffcff
 8008800:	fff3ffff 	.word	0xfff3ffff
 8008804:	ffcfffff 	.word	0xffcfffff
 8008808:	ffffcfff 	.word	0xffffcfff
 800880c:	ffff3fff 	.word	0xffff3fff
 8008810:	ffbfffff 	.word	0xffbfffff
 8008814:	feffffff 	.word	0xfeffffff

08008818 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e04a      	b.n	80088c0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	223d      	movs	r2, #61	; 0x3d
 800882e:	5c9b      	ldrb	r3, [r3, r2]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d107      	bne.n	8008846 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	223c      	movs	r2, #60	; 0x3c
 800883a:	2100      	movs	r1, #0
 800883c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	0018      	movs	r0, r3
 8008842:	f7fa fd9d 	bl	8003380 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	223d      	movs	r2, #61	; 0x3d
 800884a:	2102      	movs	r1, #2
 800884c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	3304      	adds	r3, #4
 8008856:	0019      	movs	r1, r3
 8008858:	0010      	movs	r0, r2
 800885a:	f000 f92b 	bl	8008ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2248      	movs	r2, #72	; 0x48
 8008862:	2101      	movs	r1, #1
 8008864:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	223e      	movs	r2, #62	; 0x3e
 800886a:	2101      	movs	r1, #1
 800886c:	5499      	strb	r1, [r3, r2]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	223f      	movs	r2, #63	; 0x3f
 8008872:	2101      	movs	r1, #1
 8008874:	5499      	strb	r1, [r3, r2]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2240      	movs	r2, #64	; 0x40
 800887a:	2101      	movs	r1, #1
 800887c:	5499      	strb	r1, [r3, r2]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2241      	movs	r2, #65	; 0x41
 8008882:	2101      	movs	r1, #1
 8008884:	5499      	strb	r1, [r3, r2]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2242      	movs	r2, #66	; 0x42
 800888a:	2101      	movs	r1, #1
 800888c:	5499      	strb	r1, [r3, r2]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2243      	movs	r2, #67	; 0x43
 8008892:	2101      	movs	r1, #1
 8008894:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2244      	movs	r2, #68	; 0x44
 800889a:	2101      	movs	r1, #1
 800889c:	5499      	strb	r1, [r3, r2]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2245      	movs	r2, #69	; 0x45
 80088a2:	2101      	movs	r1, #1
 80088a4:	5499      	strb	r1, [r3, r2]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2246      	movs	r2, #70	; 0x46
 80088aa:	2101      	movs	r1, #1
 80088ac:	5499      	strb	r1, [r3, r2]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2247      	movs	r2, #71	; 0x47
 80088b2:	2101      	movs	r1, #1
 80088b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	223d      	movs	r2, #61	; 0x3d
 80088ba:	2101      	movs	r1, #1
 80088bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	0018      	movs	r0, r3
 80088c2:	46bd      	mov	sp, r7
 80088c4:	b002      	add	sp, #8
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	223c      	movs	r2, #60	; 0x3c
 80088d8:	5c9b      	ldrb	r3, [r3, r2]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d101      	bne.n	80088e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80088de:	2302      	movs	r3, #2
 80088e0:	e0df      	b.n	8008aa2 <HAL_TIM_PWM_ConfigChannel+0x1da>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	223c      	movs	r2, #60	; 0x3c
 80088e6:	2101      	movs	r1, #1
 80088e8:	5499      	strb	r1, [r3, r2]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b14      	cmp	r3, #20
 80088ee:	d900      	bls.n	80088f2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80088f0:	e0d1      	b.n	8008a96 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	009a      	lsls	r2, r3, #2
 80088f6:	4b6d      	ldr	r3, [pc, #436]	; (8008aac <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80088f8:	18d3      	adds	r3, r2, r3
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	0011      	movs	r1, r2
 8008906:	0018      	movs	r0, r3
 8008908:	f000 f95e 	bl	8008bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2108      	movs	r1, #8
 8008918:	430a      	orrs	r2, r1
 800891a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2104      	movs	r1, #4
 8008928:	438a      	bics	r2, r1
 800892a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6999      	ldr	r1, [r3, #24]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	619a      	str	r2, [r3, #24]
      break;
 800893e:	e0ab      	b.n	8008a98 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	0011      	movs	r1, r2
 8008948:	0018      	movs	r0, r3
 800894a:	f000 f9c7 	bl	8008cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	699a      	ldr	r2, [r3, #24]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2180      	movs	r1, #128	; 0x80
 800895a:	0109      	lsls	r1, r1, #4
 800895c:	430a      	orrs	r2, r1
 800895e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699a      	ldr	r2, [r3, #24]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4951      	ldr	r1, [pc, #324]	; (8008ab0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800896c:	400a      	ands	r2, r1
 800896e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6999      	ldr	r1, [r3, #24]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	021a      	lsls	r2, r3, #8
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	619a      	str	r2, [r3, #24]
      break;
 8008984:	e088      	b.n	8008a98 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	0011      	movs	r1, r2
 800898e:	0018      	movs	r0, r3
 8008990:	f000 fa28 	bl	8008de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	69da      	ldr	r2, [r3, #28]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2108      	movs	r1, #8
 80089a0:	430a      	orrs	r2, r1
 80089a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	69da      	ldr	r2, [r3, #28]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2104      	movs	r1, #4
 80089b0:	438a      	bics	r2, r1
 80089b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69d9      	ldr	r1, [r3, #28]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	691a      	ldr	r2, [r3, #16]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	61da      	str	r2, [r3, #28]
      break;
 80089c6:	e067      	b.n	8008a98 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	0011      	movs	r1, r2
 80089d0:	0018      	movs	r0, r3
 80089d2:	f000 fa8f 	bl	8008ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69da      	ldr	r2, [r3, #28]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2180      	movs	r1, #128	; 0x80
 80089e2:	0109      	lsls	r1, r1, #4
 80089e4:	430a      	orrs	r2, r1
 80089e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	69da      	ldr	r2, [r3, #28]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	492f      	ldr	r1, [pc, #188]	; (8008ab0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80089f4:	400a      	ands	r2, r1
 80089f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69d9      	ldr	r1, [r3, #28]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	021a      	lsls	r2, r3, #8
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	61da      	str	r2, [r3, #28]
      break;
 8008a0c:	e044      	b.n	8008a98 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	0011      	movs	r1, r2
 8008a16:	0018      	movs	r0, r3
 8008a18:	f000 fad6 	bl	8008fc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2108      	movs	r1, #8
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2104      	movs	r1, #4
 8008a38:	438a      	bics	r2, r1
 8008a3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	691a      	ldr	r2, [r3, #16]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a4e:	e023      	b.n	8008a98 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	0011      	movs	r1, r2
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f000 fb15 	bl	8009088 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2180      	movs	r1, #128	; 0x80
 8008a6a:	0109      	lsls	r1, r1, #4
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	490d      	ldr	r1, [pc, #52]	; (8008ab0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008a7c:	400a      	ands	r2, r1
 8008a7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	021a      	lsls	r2, r3, #8
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	430a      	orrs	r2, r1
 8008a92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a94:	e000      	b.n	8008a98 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8008a96:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	223c      	movs	r2, #60	; 0x3c
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	b004      	add	sp, #16
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	46c0      	nop			; (mov r8, r8)
 8008aac:	0800e724 	.word	0x0800e724
 8008ab0:	fffffbff 	.word	0xfffffbff

08008ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a38      	ldr	r2, [pc, #224]	; (8008ba8 <TIM_Base_SetConfig+0xf4>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d00c      	beq.n	8008ae6 <TIM_Base_SetConfig+0x32>
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	2380      	movs	r3, #128	; 0x80
 8008ad0:	05db      	lsls	r3, r3, #23
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d007      	beq.n	8008ae6 <TIM_Base_SetConfig+0x32>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a34      	ldr	r2, [pc, #208]	; (8008bac <TIM_Base_SetConfig+0xf8>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d003      	beq.n	8008ae6 <TIM_Base_SetConfig+0x32>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a33      	ldr	r2, [pc, #204]	; (8008bb0 <TIM_Base_SetConfig+0xfc>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d108      	bne.n	8008af8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2270      	movs	r2, #112	; 0x70
 8008aea:	4393      	bics	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a2b      	ldr	r2, [pc, #172]	; (8008ba8 <TIM_Base_SetConfig+0xf4>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d01c      	beq.n	8008b3a <TIM_Base_SetConfig+0x86>
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	2380      	movs	r3, #128	; 0x80
 8008b04:	05db      	lsls	r3, r3, #23
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d017      	beq.n	8008b3a <TIM_Base_SetConfig+0x86>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a27      	ldr	r2, [pc, #156]	; (8008bac <TIM_Base_SetConfig+0xf8>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d013      	beq.n	8008b3a <TIM_Base_SetConfig+0x86>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a26      	ldr	r2, [pc, #152]	; (8008bb0 <TIM_Base_SetConfig+0xfc>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00f      	beq.n	8008b3a <TIM_Base_SetConfig+0x86>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a25      	ldr	r2, [pc, #148]	; (8008bb4 <TIM_Base_SetConfig+0x100>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00b      	beq.n	8008b3a <TIM_Base_SetConfig+0x86>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a24      	ldr	r2, [pc, #144]	; (8008bb8 <TIM_Base_SetConfig+0x104>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d007      	beq.n	8008b3a <TIM_Base_SetConfig+0x86>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a23      	ldr	r2, [pc, #140]	; (8008bbc <TIM_Base_SetConfig+0x108>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d003      	beq.n	8008b3a <TIM_Base_SetConfig+0x86>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a22      	ldr	r2, [pc, #136]	; (8008bc0 <TIM_Base_SetConfig+0x10c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d108      	bne.n	8008b4c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	4a21      	ldr	r2, [pc, #132]	; (8008bc4 <TIM_Base_SetConfig+0x110>)
 8008b3e:	4013      	ands	r3, r2
 8008b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2280      	movs	r2, #128	; 0x80
 8008b50:	4393      	bics	r3, r2
 8008b52:	001a      	movs	r2, r3
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689a      	ldr	r2, [r3, #8]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a0c      	ldr	r2, [pc, #48]	; (8008ba8 <TIM_Base_SetConfig+0xf4>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d00b      	beq.n	8008b92 <TIM_Base_SetConfig+0xde>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a0e      	ldr	r2, [pc, #56]	; (8008bb8 <TIM_Base_SetConfig+0x104>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d007      	beq.n	8008b92 <TIM_Base_SetConfig+0xde>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a0d      	ldr	r2, [pc, #52]	; (8008bbc <TIM_Base_SetConfig+0x108>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d003      	beq.n	8008b92 <TIM_Base_SetConfig+0xde>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a0c      	ldr	r2, [pc, #48]	; (8008bc0 <TIM_Base_SetConfig+0x10c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d103      	bne.n	8008b9a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	691a      	ldr	r2, [r3, #16]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	615a      	str	r2, [r3, #20]
}
 8008ba0:	46c0      	nop			; (mov r8, r8)
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	b004      	add	sp, #16
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	40012c00 	.word	0x40012c00
 8008bac:	40000400 	.word	0x40000400
 8008bb0:	40000800 	.word	0x40000800
 8008bb4:	40002000 	.word	0x40002000
 8008bb8:	40014000 	.word	0x40014000
 8008bbc:	40014400 	.word	0x40014400
 8008bc0:	40014800 	.word	0x40014800
 8008bc4:	fffffcff 	.word	0xfffffcff

08008bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	4393      	bics	r3, r2
 8008bda:	001a      	movs	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	4a32      	ldr	r2, [pc, #200]	; (8008cc0 <TIM_OC1_SetConfig+0xf8>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2203      	movs	r2, #3
 8008bfe:	4393      	bics	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	4393      	bics	r3, r2
 8008c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a28      	ldr	r2, [pc, #160]	; (8008cc4 <TIM_OC1_SetConfig+0xfc>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00b      	beq.n	8008c3e <TIM_OC1_SetConfig+0x76>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a27      	ldr	r2, [pc, #156]	; (8008cc8 <TIM_OC1_SetConfig+0x100>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d007      	beq.n	8008c3e <TIM_OC1_SetConfig+0x76>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a26      	ldr	r2, [pc, #152]	; (8008ccc <TIM_OC1_SetConfig+0x104>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d003      	beq.n	8008c3e <TIM_OC1_SetConfig+0x76>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a25      	ldr	r2, [pc, #148]	; (8008cd0 <TIM_OC1_SetConfig+0x108>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d10c      	bne.n	8008c58 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2208      	movs	r2, #8
 8008c42:	4393      	bics	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2204      	movs	r2, #4
 8008c54:	4393      	bics	r3, r2
 8008c56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a1a      	ldr	r2, [pc, #104]	; (8008cc4 <TIM_OC1_SetConfig+0xfc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d00b      	beq.n	8008c78 <TIM_OC1_SetConfig+0xb0>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a19      	ldr	r2, [pc, #100]	; (8008cc8 <TIM_OC1_SetConfig+0x100>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d007      	beq.n	8008c78 <TIM_OC1_SetConfig+0xb0>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a18      	ldr	r2, [pc, #96]	; (8008ccc <TIM_OC1_SetConfig+0x104>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d003      	beq.n	8008c78 <TIM_OC1_SetConfig+0xb0>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a17      	ldr	r2, [pc, #92]	; (8008cd0 <TIM_OC1_SetConfig+0x108>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d111      	bne.n	8008c9c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	4a16      	ldr	r2, [pc, #88]	; (8008cd4 <TIM_OC1_SetConfig+0x10c>)
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	4a15      	ldr	r2, [pc, #84]	; (8008cd8 <TIM_OC1_SetConfig+0x110>)
 8008c84:	4013      	ands	r3, r2
 8008c86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	695b      	ldr	r3, [r3, #20]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	621a      	str	r2, [r3, #32]
}
 8008cb6:	46c0      	nop			; (mov r8, r8)
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	b006      	add	sp, #24
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	46c0      	nop			; (mov r8, r8)
 8008cc0:	fffeff8f 	.word	0xfffeff8f
 8008cc4:	40012c00 	.word	0x40012c00
 8008cc8:	40014000 	.word	0x40014000
 8008ccc:	40014400 	.word	0x40014400
 8008cd0:	40014800 	.word	0x40014800
 8008cd4:	fffffeff 	.word	0xfffffeff
 8008cd8:	fffffdff 	.word	0xfffffdff

08008cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	2210      	movs	r2, #16
 8008cec:	4393      	bics	r3, r2
 8008cee:	001a      	movs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4a2e      	ldr	r2, [pc, #184]	; (8008dc4 <TIM_OC2_SetConfig+0xe8>)
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	4a2d      	ldr	r2, [pc, #180]	; (8008dc8 <TIM_OC2_SetConfig+0xec>)
 8008d12:	4013      	ands	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2220      	movs	r2, #32
 8008d26:	4393      	bics	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	011b      	lsls	r3, r3, #4
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a24      	ldr	r2, [pc, #144]	; (8008dcc <TIM_OC2_SetConfig+0xf0>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d10d      	bne.n	8008d5a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2280      	movs	r2, #128	; 0x80
 8008d42:	4393      	bics	r3, r2
 8008d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	011b      	lsls	r3, r3, #4
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2240      	movs	r2, #64	; 0x40
 8008d56:	4393      	bics	r3, r2
 8008d58:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a1b      	ldr	r2, [pc, #108]	; (8008dcc <TIM_OC2_SetConfig+0xf0>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d00b      	beq.n	8008d7a <TIM_OC2_SetConfig+0x9e>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a1a      	ldr	r2, [pc, #104]	; (8008dd0 <TIM_OC2_SetConfig+0xf4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d007      	beq.n	8008d7a <TIM_OC2_SetConfig+0x9e>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a19      	ldr	r2, [pc, #100]	; (8008dd4 <TIM_OC2_SetConfig+0xf8>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d003      	beq.n	8008d7a <TIM_OC2_SetConfig+0x9e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a18      	ldr	r2, [pc, #96]	; (8008dd8 <TIM_OC2_SetConfig+0xfc>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d113      	bne.n	8008da2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	4a17      	ldr	r2, [pc, #92]	; (8008ddc <TIM_OC2_SetConfig+0x100>)
 8008d7e:	4013      	ands	r3, r2
 8008d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	4a16      	ldr	r2, [pc, #88]	; (8008de0 <TIM_OC2_SetConfig+0x104>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	621a      	str	r2, [r3, #32]
}
 8008dbc:	46c0      	nop			; (mov r8, r8)
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	b006      	add	sp, #24
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	feff8fff 	.word	0xfeff8fff
 8008dc8:	fffffcff 	.word	0xfffffcff
 8008dcc:	40012c00 	.word	0x40012c00
 8008dd0:	40014000 	.word	0x40014000
 8008dd4:	40014400 	.word	0x40014400
 8008dd8:	40014800 	.word	0x40014800
 8008ddc:	fffffbff 	.word	0xfffffbff
 8008de0:	fffff7ff 	.word	0xfffff7ff

08008de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	4a35      	ldr	r2, [pc, #212]	; (8008ec8 <TIM_OC3_SetConfig+0xe4>)
 8008df4:	401a      	ands	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4a2f      	ldr	r2, [pc, #188]	; (8008ecc <TIM_OC3_SetConfig+0xe8>)
 8008e10:	4013      	ands	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2203      	movs	r2, #3
 8008e18:	4393      	bics	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	4a29      	ldr	r2, [pc, #164]	; (8008ed0 <TIM_OC3_SetConfig+0xec>)
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	021b      	lsls	r3, r3, #8
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a25      	ldr	r2, [pc, #148]	; (8008ed4 <TIM_OC3_SetConfig+0xf0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d10d      	bne.n	8008e5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	4a24      	ldr	r2, [pc, #144]	; (8008ed8 <TIM_OC3_SetConfig+0xf4>)
 8008e46:	4013      	ands	r3, r2
 8008e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	021b      	lsls	r3, r3, #8
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	4a20      	ldr	r2, [pc, #128]	; (8008edc <TIM_OC3_SetConfig+0xf8>)
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a1c      	ldr	r2, [pc, #112]	; (8008ed4 <TIM_OC3_SetConfig+0xf0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d00b      	beq.n	8008e7e <TIM_OC3_SetConfig+0x9a>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a1d      	ldr	r2, [pc, #116]	; (8008ee0 <TIM_OC3_SetConfig+0xfc>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d007      	beq.n	8008e7e <TIM_OC3_SetConfig+0x9a>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a1c      	ldr	r2, [pc, #112]	; (8008ee4 <TIM_OC3_SetConfig+0x100>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d003      	beq.n	8008e7e <TIM_OC3_SetConfig+0x9a>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a1b      	ldr	r2, [pc, #108]	; (8008ee8 <TIM_OC3_SetConfig+0x104>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d113      	bne.n	8008ea6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	4a1a      	ldr	r2, [pc, #104]	; (8008eec <TIM_OC3_SetConfig+0x108>)
 8008e82:	4013      	ands	r3, r2
 8008e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	4a19      	ldr	r2, [pc, #100]	; (8008ef0 <TIM_OC3_SetConfig+0x10c>)
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	011b      	lsls	r3, r3, #4
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	685a      	ldr	r2, [r3, #4]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	621a      	str	r2, [r3, #32]
}
 8008ec0:	46c0      	nop			; (mov r8, r8)
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	b006      	add	sp, #24
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	fffffeff 	.word	0xfffffeff
 8008ecc:	fffeff8f 	.word	0xfffeff8f
 8008ed0:	fffffdff 	.word	0xfffffdff
 8008ed4:	40012c00 	.word	0x40012c00
 8008ed8:	fffff7ff 	.word	0xfffff7ff
 8008edc:	fffffbff 	.word	0xfffffbff
 8008ee0:	40014000 	.word	0x40014000
 8008ee4:	40014400 	.word	0x40014400
 8008ee8:	40014800 	.word	0x40014800
 8008eec:	ffffefff 	.word	0xffffefff
 8008ef0:	ffffdfff 	.word	0xffffdfff

08008ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	4a28      	ldr	r2, [pc, #160]	; (8008fa4 <TIM_OC4_SetConfig+0xb0>)
 8008f04:	401a      	ands	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4a22      	ldr	r2, [pc, #136]	; (8008fa8 <TIM_OC4_SetConfig+0xb4>)
 8008f20:	4013      	ands	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4a21      	ldr	r2, [pc, #132]	; (8008fac <TIM_OC4_SetConfig+0xb8>)
 8008f28:	4013      	ands	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	021b      	lsls	r3, r3, #8
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	4a1d      	ldr	r2, [pc, #116]	; (8008fb0 <TIM_OC4_SetConfig+0xbc>)
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	031b      	lsls	r3, r3, #12
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a19      	ldr	r2, [pc, #100]	; (8008fb4 <TIM_OC4_SetConfig+0xc0>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00b      	beq.n	8008f6c <TIM_OC4_SetConfig+0x78>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a18      	ldr	r2, [pc, #96]	; (8008fb8 <TIM_OC4_SetConfig+0xc4>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d007      	beq.n	8008f6c <TIM_OC4_SetConfig+0x78>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a17      	ldr	r2, [pc, #92]	; (8008fbc <TIM_OC4_SetConfig+0xc8>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d003      	beq.n	8008f6c <TIM_OC4_SetConfig+0x78>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a16      	ldr	r2, [pc, #88]	; (8008fc0 <TIM_OC4_SetConfig+0xcc>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d109      	bne.n	8008f80 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	4a15      	ldr	r2, [pc, #84]	; (8008fc4 <TIM_OC4_SetConfig+0xd0>)
 8008f70:	4013      	ands	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	019b      	lsls	r3, r3, #6
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	621a      	str	r2, [r3, #32]
}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	b006      	add	sp, #24
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	46c0      	nop			; (mov r8, r8)
 8008fa4:	ffffefff 	.word	0xffffefff
 8008fa8:	feff8fff 	.word	0xfeff8fff
 8008fac:	fffffcff 	.word	0xfffffcff
 8008fb0:	ffffdfff 	.word	0xffffdfff
 8008fb4:	40012c00 	.word	0x40012c00
 8008fb8:	40014000 	.word	0x40014000
 8008fbc:	40014400 	.word	0x40014400
 8008fc0:	40014800 	.word	0x40014800
 8008fc4:	ffffbfff 	.word	0xffffbfff

08008fc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	4a25      	ldr	r2, [pc, #148]	; (800906c <TIM_OC5_SetConfig+0xa4>)
 8008fd8:	401a      	ands	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4a1f      	ldr	r2, [pc, #124]	; (8009070 <TIM_OC5_SetConfig+0xa8>)
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	4a1b      	ldr	r2, [pc, #108]	; (8009074 <TIM_OC5_SetConfig+0xac>)
 8009006:	4013      	ands	r3, r2
 8009008:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	041b      	lsls	r3, r3, #16
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	4313      	orrs	r3, r2
 8009014:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a17      	ldr	r2, [pc, #92]	; (8009078 <TIM_OC5_SetConfig+0xb0>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d00b      	beq.n	8009036 <TIM_OC5_SetConfig+0x6e>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a16      	ldr	r2, [pc, #88]	; (800907c <TIM_OC5_SetConfig+0xb4>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d007      	beq.n	8009036 <TIM_OC5_SetConfig+0x6e>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a15      	ldr	r2, [pc, #84]	; (8009080 <TIM_OC5_SetConfig+0xb8>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d003      	beq.n	8009036 <TIM_OC5_SetConfig+0x6e>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a14      	ldr	r2, [pc, #80]	; (8009084 <TIM_OC5_SetConfig+0xbc>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d109      	bne.n	800904a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	4a0c      	ldr	r2, [pc, #48]	; (800906c <TIM_OC5_SetConfig+0xa4>)
 800903a:	4013      	ands	r3, r2
 800903c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	021b      	lsls	r3, r3, #8
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	4313      	orrs	r3, r2
 8009048:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	621a      	str	r2, [r3, #32]
}
 8009064:	46c0      	nop			; (mov r8, r8)
 8009066:	46bd      	mov	sp, r7
 8009068:	b006      	add	sp, #24
 800906a:	bd80      	pop	{r7, pc}
 800906c:	fffeffff 	.word	0xfffeffff
 8009070:	fffeff8f 	.word	0xfffeff8f
 8009074:	fffdffff 	.word	0xfffdffff
 8009078:	40012c00 	.word	0x40012c00
 800907c:	40014000 	.word	0x40014000
 8009080:	40014400 	.word	0x40014400
 8009084:	40014800 	.word	0x40014800

08009088 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	4a26      	ldr	r2, [pc, #152]	; (8009130 <TIM_OC6_SetConfig+0xa8>)
 8009098:	401a      	ands	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4a20      	ldr	r2, [pc, #128]	; (8009134 <TIM_OC6_SetConfig+0xac>)
 80090b4:	4013      	ands	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	4a1c      	ldr	r2, [pc, #112]	; (8009138 <TIM_OC6_SetConfig+0xb0>)
 80090c8:	4013      	ands	r3, r2
 80090ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	051b      	lsls	r3, r3, #20
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a18      	ldr	r2, [pc, #96]	; (800913c <TIM_OC6_SetConfig+0xb4>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d00b      	beq.n	80090f8 <TIM_OC6_SetConfig+0x70>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a17      	ldr	r2, [pc, #92]	; (8009140 <TIM_OC6_SetConfig+0xb8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d007      	beq.n	80090f8 <TIM_OC6_SetConfig+0x70>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a16      	ldr	r2, [pc, #88]	; (8009144 <TIM_OC6_SetConfig+0xbc>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d003      	beq.n	80090f8 <TIM_OC6_SetConfig+0x70>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a15      	ldr	r2, [pc, #84]	; (8009148 <TIM_OC6_SetConfig+0xc0>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d109      	bne.n	800910c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	4a14      	ldr	r2, [pc, #80]	; (800914c <TIM_OC6_SetConfig+0xc4>)
 80090fc:	4013      	ands	r3, r2
 80090fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	029b      	lsls	r3, r3, #10
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	4313      	orrs	r3, r2
 800910a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	621a      	str	r2, [r3, #32]
}
 8009126:	46c0      	nop			; (mov r8, r8)
 8009128:	46bd      	mov	sp, r7
 800912a:	b006      	add	sp, #24
 800912c:	bd80      	pop	{r7, pc}
 800912e:	46c0      	nop			; (mov r8, r8)
 8009130:	ffefffff 	.word	0xffefffff
 8009134:	feff8fff 	.word	0xfeff8fff
 8009138:	ffdfffff 	.word	0xffdfffff
 800913c:	40012c00 	.word	0x40012c00
 8009140:	40014000 	.word	0x40014000
 8009144:	40014400 	.word	0x40014400
 8009148:	40014800 	.word	0x40014800
 800914c:	fffbffff 	.word	0xfffbffff

08009150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	223c      	movs	r2, #60	; 0x3c
 800915e:	5c9b      	ldrb	r3, [r3, r2]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d101      	bne.n	8009168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009164:	2302      	movs	r3, #2
 8009166:	e05a      	b.n	800921e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	223c      	movs	r2, #60	; 0x3c
 800916c:	2101      	movs	r1, #1
 800916e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	223d      	movs	r2, #61	; 0x3d
 8009174:	2102      	movs	r1, #2
 8009176:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a26      	ldr	r2, [pc, #152]	; (8009228 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d108      	bne.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4a25      	ldr	r2, [pc, #148]	; (800922c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009196:	4013      	ands	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2270      	movs	r2, #112	; 0x70
 80091a8:	4393      	bics	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a19      	ldr	r2, [pc, #100]	; (8009228 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d014      	beq.n	80091f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	2380      	movs	r3, #128	; 0x80
 80091ce:	05db      	lsls	r3, r3, #23
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d00e      	beq.n	80091f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a15      	ldr	r2, [pc, #84]	; (8009230 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d009      	beq.n	80091f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a14      	ldr	r2, [pc, #80]	; (8009234 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d004      	beq.n	80091f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a12      	ldr	r2, [pc, #72]	; (8009238 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d10c      	bne.n	800920c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2280      	movs	r2, #128	; 0x80
 80091f6:	4393      	bics	r3, r2
 80091f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	4313      	orrs	r3, r2
 8009202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	223d      	movs	r2, #61	; 0x3d
 8009210:	2101      	movs	r1, #1
 8009212:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	223c      	movs	r2, #60	; 0x3c
 8009218:	2100      	movs	r1, #0
 800921a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	0018      	movs	r0, r3
 8009220:	46bd      	mov	sp, r7
 8009222:	b004      	add	sp, #16
 8009224:	bd80      	pop	{r7, pc}
 8009226:	46c0      	nop			; (mov r8, r8)
 8009228:	40012c00 	.word	0x40012c00
 800922c:	ff0fffff 	.word	0xff0fffff
 8009230:	40000400 	.word	0x40000400
 8009234:	40000800 	.word	0x40000800
 8009238:	40014000 	.word	0x40014000

0800923c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	223c      	movs	r2, #60	; 0x3c
 800924e:	5c9b      	ldrb	r3, [r3, r2]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d101      	bne.n	8009258 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009254:	2302      	movs	r3, #2
 8009256:	e079      	b.n	800934c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	223c      	movs	r2, #60	; 0x3c
 800925c:	2101      	movs	r1, #1
 800925e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	22ff      	movs	r2, #255	; 0xff
 8009264:	4393      	bics	r3, r2
 8009266:	001a      	movs	r2, r3
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	4313      	orrs	r3, r2
 800926e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4a38      	ldr	r2, [pc, #224]	; (8009354 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8009274:	401a      	ands	r2, r3
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	4313      	orrs	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	4a35      	ldr	r2, [pc, #212]	; (8009358 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009282:	401a      	ands	r2, r3
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	4313      	orrs	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4a33      	ldr	r2, [pc, #204]	; (800935c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009290:	401a      	ands	r2, r3
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4313      	orrs	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4a30      	ldr	r2, [pc, #192]	; (8009360 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800929e:	401a      	ands	r2, r3
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4a2e      	ldr	r2, [pc, #184]	; (8009364 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80092ac:	401a      	ands	r2, r3
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4a2b      	ldr	r2, [pc, #172]	; (8009368 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80092ba:	401a      	ands	r2, r3
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c0:	4313      	orrs	r3, r2
 80092c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4a29      	ldr	r2, [pc, #164]	; (800936c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80092c8:	401a      	ands	r2, r3
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	041b      	lsls	r3, r3, #16
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a25      	ldr	r2, [pc, #148]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d106      	bne.n	80092ec <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	4a24      	ldr	r2, [pc, #144]	; (8009374 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80092e2:	401a      	ands	r2, r3
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a1f      	ldr	r2, [pc, #124]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d121      	bne.n	800933a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4a1f      	ldr	r2, [pc, #124]	; (8009378 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80092fa:	401a      	ands	r2, r3
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009300:	051b      	lsls	r3, r3, #20
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	4a1c      	ldr	r2, [pc, #112]	; (800937c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800930a:	401a      	ands	r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	4313      	orrs	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4a1a      	ldr	r2, [pc, #104]	; (8009380 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8009318:	401a      	ands	r2, r3
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	4313      	orrs	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a12      	ldr	r2, [pc, #72]	; (8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d106      	bne.n	800933a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4a15      	ldr	r2, [pc, #84]	; (8009384 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8009330:	401a      	ands	r2, r3
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009336:	4313      	orrs	r3, r2
 8009338:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	223c      	movs	r2, #60	; 0x3c
 8009346:	2100      	movs	r1, #0
 8009348:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	0018      	movs	r0, r3
 800934e:	46bd      	mov	sp, r7
 8009350:	b004      	add	sp, #16
 8009352:	bd80      	pop	{r7, pc}
 8009354:	fffffcff 	.word	0xfffffcff
 8009358:	fffffbff 	.word	0xfffffbff
 800935c:	fffff7ff 	.word	0xfffff7ff
 8009360:	ffffefff 	.word	0xffffefff
 8009364:	ffffdfff 	.word	0xffffdfff
 8009368:	ffffbfff 	.word	0xffffbfff
 800936c:	fff0ffff 	.word	0xfff0ffff
 8009370:	40012c00 	.word	0x40012c00
 8009374:	efffffff 	.word	0xefffffff
 8009378:	ff0fffff 	.word	0xff0fffff
 800937c:	feffffff 	.word	0xfeffffff
 8009380:	fdffffff 	.word	0xfdffffff
 8009384:	dfffffff 	.word	0xdfffffff

08009388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e046      	b.n	8009428 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2284      	movs	r2, #132	; 0x84
 800939e:	589b      	ldr	r3, [r3, r2]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d107      	bne.n	80093b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2280      	movs	r2, #128	; 0x80
 80093a8:	2100      	movs	r1, #0
 80093aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	0018      	movs	r0, r3
 80093b0:	f7fa f8ca 	bl	8003548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2284      	movs	r2, #132	; 0x84
 80093b8:	2124      	movs	r1, #36	; 0x24
 80093ba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2101      	movs	r1, #1
 80093c8:	438a      	bics	r2, r1
 80093ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	0018      	movs	r0, r3
 80093d0:	f000 fe74 	bl	800a0bc <UART_SetConfig>
 80093d4:	0003      	movs	r3, r0
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d101      	bne.n	80093de <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e024      	b.n	8009428 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d003      	beq.n	80093ee <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	0018      	movs	r0, r3
 80093ea:	f001 f9e7 	bl	800a7bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	490d      	ldr	r1, [pc, #52]	; (8009430 <HAL_UART_Init+0xa8>)
 80093fa:	400a      	ands	r2, r1
 80093fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	212a      	movs	r1, #42	; 0x2a
 800940a:	438a      	bics	r2, r1
 800940c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2101      	movs	r1, #1
 800941a:	430a      	orrs	r2, r1
 800941c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	0018      	movs	r0, r3
 8009422:	f001 fa7f 	bl	800a924 <UART_CheckIdleState>
 8009426:	0003      	movs	r3, r0
}
 8009428:	0018      	movs	r0, r3
 800942a:	46bd      	mov	sp, r7
 800942c:	b002      	add	sp, #8
 800942e:	bd80      	pop	{r7, pc}
 8009430:	ffffb7ff 	.word	0xffffb7ff

08009434 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08a      	sub	sp, #40	; 0x28
 8009438:	af02      	add	r7, sp, #8
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	1dbb      	adds	r3, r7, #6
 8009442:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2284      	movs	r2, #132	; 0x84
 8009448:	589b      	ldr	r3, [r3, r2]
 800944a:	2b20      	cmp	r3, #32
 800944c:	d000      	beq.n	8009450 <HAL_UART_Transmit+0x1c>
 800944e:	e097      	b.n	8009580 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <HAL_UART_Transmit+0x2a>
 8009456:	1dbb      	adds	r3, r7, #6
 8009458:	881b      	ldrh	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e08f      	b.n	8009582 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	689a      	ldr	r2, [r3, #8]
 8009466:	2380      	movs	r3, #128	; 0x80
 8009468:	015b      	lsls	r3, r3, #5
 800946a:	429a      	cmp	r2, r3
 800946c:	d109      	bne.n	8009482 <HAL_UART_Transmit+0x4e>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d105      	bne.n	8009482 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2201      	movs	r2, #1
 800947a:	4013      	ands	r3, r2
 800947c:	d001      	beq.n	8009482 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e07f      	b.n	8009582 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2280      	movs	r2, #128	; 0x80
 8009486:	5c9b      	ldrb	r3, [r3, r2]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d101      	bne.n	8009490 <HAL_UART_Transmit+0x5c>
 800948c:	2302      	movs	r3, #2
 800948e:	e078      	b.n	8009582 <HAL_UART_Transmit+0x14e>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2280      	movs	r2, #128	; 0x80
 8009494:	2101      	movs	r1, #1
 8009496:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	228c      	movs	r2, #140	; 0x8c
 800949c:	2100      	movs	r1, #0
 800949e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2284      	movs	r2, #132	; 0x84
 80094a4:	2121      	movs	r1, #33	; 0x21
 80094a6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094a8:	f7fa fc48 	bl	8003d3c <HAL_GetTick>
 80094ac:	0003      	movs	r3, r0
 80094ae:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	1dba      	adds	r2, r7, #6
 80094b4:	2154      	movs	r1, #84	; 0x54
 80094b6:	8812      	ldrh	r2, [r2, #0]
 80094b8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	1dba      	adds	r2, r7, #6
 80094be:	2156      	movs	r1, #86	; 0x56
 80094c0:	8812      	ldrh	r2, [r2, #0]
 80094c2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	2380      	movs	r3, #128	; 0x80
 80094ca:	015b      	lsls	r3, r3, #5
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d108      	bne.n	80094e2 <HAL_UART_Transmit+0xae>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d104      	bne.n	80094e2 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80094d8:	2300      	movs	r3, #0
 80094da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	61bb      	str	r3, [r7, #24]
 80094e0:	e003      	b.n	80094ea <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2280      	movs	r2, #128	; 0x80
 80094ee:	2100      	movs	r1, #0
 80094f0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80094f2:	e02c      	b.n	800954e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	0013      	movs	r3, r2
 80094fe:	2200      	movs	r2, #0
 8009500:	2180      	movs	r1, #128	; 0x80
 8009502:	f001 fa59 	bl	800a9b8 <UART_WaitOnFlagUntilTimeout>
 8009506:	1e03      	subs	r3, r0, #0
 8009508:	d001      	beq.n	800950e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800950a:	2303      	movs	r3, #3
 800950c:	e039      	b.n	8009582 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10b      	bne.n	800952c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	881b      	ldrh	r3, [r3, #0]
 8009518:	001a      	movs	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	05d2      	lsls	r2, r2, #23
 8009520:	0dd2      	lsrs	r2, r2, #23
 8009522:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	3302      	adds	r3, #2
 8009528:	61bb      	str	r3, [r7, #24]
 800952a:	e007      	b.n	800953c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	781a      	ldrb	r2, [r3, #0]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	3301      	adds	r3, #1
 800953a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2256      	movs	r2, #86	; 0x56
 8009540:	5a9b      	ldrh	r3, [r3, r2]
 8009542:	b29b      	uxth	r3, r3
 8009544:	3b01      	subs	r3, #1
 8009546:	b299      	uxth	r1, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2256      	movs	r2, #86	; 0x56
 800954c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2256      	movs	r2, #86	; 0x56
 8009552:	5a9b      	ldrh	r3, [r3, r2]
 8009554:	b29b      	uxth	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1cc      	bne.n	80094f4 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	0013      	movs	r3, r2
 8009564:	2200      	movs	r2, #0
 8009566:	2140      	movs	r1, #64	; 0x40
 8009568:	f001 fa26 	bl	800a9b8 <UART_WaitOnFlagUntilTimeout>
 800956c:	1e03      	subs	r3, r0, #0
 800956e:	d001      	beq.n	8009574 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	e006      	b.n	8009582 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2284      	movs	r2, #132	; 0x84
 8009578:	2120      	movs	r1, #32
 800957a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	e000      	b.n	8009582 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8009580:	2302      	movs	r3, #2
  }
}
 8009582:	0018      	movs	r0, r3
 8009584:	46bd      	mov	sp, r7
 8009586:	b008      	add	sp, #32
 8009588:	bd80      	pop	{r7, pc}
	...

0800958c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08c      	sub	sp, #48	; 0x30
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	1dbb      	adds	r3, r7, #6
 8009598:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2284      	movs	r2, #132	; 0x84
 800959e:	589b      	ldr	r3, [r3, r2]
 80095a0:	2b20      	cmp	r3, #32
 80095a2:	d000      	beq.n	80095a6 <HAL_UART_Transmit_IT+0x1a>
 80095a4:	e0a0      	b.n	80096e8 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d003      	beq.n	80095b4 <HAL_UART_Transmit_IT+0x28>
 80095ac:	1dbb      	adds	r3, r7, #6
 80095ae:	881b      	ldrh	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d101      	bne.n	80095b8 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e098      	b.n	80096ea <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	2380      	movs	r3, #128	; 0x80
 80095be:	015b      	lsls	r3, r3, #5
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d109      	bne.n	80095d8 <HAL_UART_Transmit_IT+0x4c>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d105      	bne.n	80095d8 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2201      	movs	r2, #1
 80095d0:	4013      	ands	r3, r2
 80095d2:	d001      	beq.n	80095d8 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e088      	b.n	80096ea <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2280      	movs	r2, #128	; 0x80
 80095dc:	5c9b      	ldrb	r3, [r3, r2]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d101      	bne.n	80095e6 <HAL_UART_Transmit_IT+0x5a>
 80095e2:	2302      	movs	r3, #2
 80095e4:	e081      	b.n	80096ea <HAL_UART_Transmit_IT+0x15e>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2280      	movs	r2, #128	; 0x80
 80095ea:	2101      	movs	r1, #1
 80095ec:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	1dba      	adds	r2, r7, #6
 80095f8:	2154      	movs	r1, #84	; 0x54
 80095fa:	8812      	ldrh	r2, [r2, #0]
 80095fc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	1dba      	adds	r2, r7, #6
 8009602:	2156      	movs	r1, #86	; 0x56
 8009604:	8812      	ldrh	r2, [r2, #0]
 8009606:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	228c      	movs	r2, #140	; 0x8c
 8009612:	2100      	movs	r1, #0
 8009614:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2284      	movs	r2, #132	; 0x84
 800961a:	2121      	movs	r1, #33	; 0x21
 800961c:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009622:	2380      	movs	r3, #128	; 0x80
 8009624:	059b      	lsls	r3, r3, #22
 8009626:	429a      	cmp	r2, r3
 8009628:	d12e      	bne.n	8009688 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	689a      	ldr	r2, [r3, #8]
 800962e:	2380      	movs	r3, #128	; 0x80
 8009630:	015b      	lsls	r3, r3, #5
 8009632:	429a      	cmp	r2, r3
 8009634:	d107      	bne.n	8009646 <HAL_UART_Transmit_IT+0xba>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d103      	bne.n	8009646 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4a2c      	ldr	r2, [pc, #176]	; (80096f4 <HAL_UART_Transmit_IT+0x168>)
 8009642:	675a      	str	r2, [r3, #116]	; 0x74
 8009644:	e002      	b.n	800964c <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	4a2b      	ldr	r2, [pc, #172]	; (80096f8 <HAL_UART_Transmit_IT+0x16c>)
 800964a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2280      	movs	r2, #128	; 0x80
 8009650:	2100      	movs	r1, #0
 8009652:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009654:	f3ef 8310 	mrs	r3, PRIMASK
 8009658:	61fb      	str	r3, [r7, #28]
  return(result);
 800965a:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800965c:	62bb      	str	r3, [r7, #40]	; 0x28
 800965e:	2301      	movs	r3, #1
 8009660:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	f383 8810 	msr	PRIMASK, r3
}
 8009668:	46c0      	nop			; (mov r8, r8)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689a      	ldr	r2, [r3, #8]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2180      	movs	r1, #128	; 0x80
 8009676:	0409      	lsls	r1, r1, #16
 8009678:	430a      	orrs	r2, r1
 800967a:	609a      	str	r2, [r3, #8]
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	f383 8810 	msr	PRIMASK, r3
}
 8009686:	e02d      	b.n	80096e4 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	2380      	movs	r3, #128	; 0x80
 800968e:	015b      	lsls	r3, r3, #5
 8009690:	429a      	cmp	r2, r3
 8009692:	d107      	bne.n	80096a4 <HAL_UART_Transmit_IT+0x118>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d103      	bne.n	80096a4 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4a17      	ldr	r2, [pc, #92]	; (80096fc <HAL_UART_Transmit_IT+0x170>)
 80096a0:	675a      	str	r2, [r3, #116]	; 0x74
 80096a2:	e002      	b.n	80096aa <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4a16      	ldr	r2, [pc, #88]	; (8009700 <HAL_UART_Transmit_IT+0x174>)
 80096a8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2280      	movs	r2, #128	; 0x80
 80096ae:	2100      	movs	r1, #0
 80096b0:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096b2:	f3ef 8310 	mrs	r3, PRIMASK
 80096b6:	613b      	str	r3, [r7, #16]
  return(result);
 80096b8:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80096ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096bc:	2301      	movs	r3, #1
 80096be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f383 8810 	msr	PRIMASK, r3
}
 80096c6:	46c0      	nop			; (mov r8, r8)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2180      	movs	r1, #128	; 0x80
 80096d4:	430a      	orrs	r2, r1
 80096d6:	601a      	str	r2, [r3, #0]
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	f383 8810 	msr	PRIMASK, r3
}
 80096e2:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	e000      	b.n	80096ea <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 80096e8:	2302      	movs	r3, #2
  }
}
 80096ea:	0018      	movs	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	b00c      	add	sp, #48	; 0x30
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	46c0      	nop			; (mov r8, r8)
 80096f4:	0800b361 	.word	0x0800b361
 80096f8:	0800b275 	.word	0x0800b275
 80096fc:	0800b1b5 	.word	0x0800b1b5
 8009700:	0800b101 	.word	0x0800b101

08009704 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b088      	sub	sp, #32
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	1dbb      	adds	r3, r7, #6
 8009710:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2288      	movs	r2, #136	; 0x88
 8009716:	589b      	ldr	r3, [r3, r2]
 8009718:	2b20      	cmp	r3, #32
 800971a:	d15a      	bne.n	80097d2 <HAL_UART_Receive_DMA+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <HAL_UART_Receive_DMA+0x26>
 8009722:	1dbb      	adds	r3, r7, #6
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e052      	b.n	80097d4 <HAL_UART_Receive_DMA+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	689a      	ldr	r2, [r3, #8]
 8009732:	2380      	movs	r3, #128	; 0x80
 8009734:	015b      	lsls	r3, r3, #5
 8009736:	429a      	cmp	r2, r3
 8009738:	d109      	bne.n	800974e <HAL_UART_Receive_DMA+0x4a>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d105      	bne.n	800974e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2201      	movs	r2, #1
 8009746:	4013      	ands	r3, r2
 8009748:	d001      	beq.n	800974e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e042      	b.n	80097d4 <HAL_UART_Receive_DMA+0xd0>
      }
    }

    __HAL_LOCK(huart);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2280      	movs	r2, #128	; 0x80
 8009752:	5c9b      	ldrb	r3, [r3, r2]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d101      	bne.n	800975c <HAL_UART_Receive_DMA+0x58>
 8009758:	2302      	movs	r3, #2
 800975a:	e03b      	b.n	80097d4 <HAL_UART_Receive_DMA+0xd0>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2280      	movs	r2, #128	; 0x80
 8009760:	2101      	movs	r1, #1
 8009762:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a1b      	ldr	r2, [pc, #108]	; (80097dc <HAL_UART_Receive_DMA+0xd8>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d025      	beq.n	80097c0 <HAL_UART_Receive_DMA+0xbc>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a19      	ldr	r2, [pc, #100]	; (80097e0 <HAL_UART_Receive_DMA+0xdc>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d020      	beq.n	80097c0 <HAL_UART_Receive_DMA+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	2380      	movs	r3, #128	; 0x80
 8009786:	041b      	lsls	r3, r3, #16
 8009788:	4013      	ands	r3, r2
 800978a:	d019      	beq.n	80097c0 <HAL_UART_Receive_DMA+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800978c:	f3ef 8310 	mrs	r3, PRIMASK
 8009790:	613b      	str	r3, [r7, #16]
  return(result);
 8009792:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009794:	61fb      	str	r3, [r7, #28]
 8009796:	2301      	movs	r3, #1
 8009798:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	f383 8810 	msr	PRIMASK, r3
}
 80097a0:	46c0      	nop			; (mov r8, r8)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2180      	movs	r1, #128	; 0x80
 80097ae:	04c9      	lsls	r1, r1, #19
 80097b0:	430a      	orrs	r2, r1
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	f383 8810 	msr	PRIMASK, r3
}
 80097be:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80097c0:	1dbb      	adds	r3, r7, #6
 80097c2:	881a      	ldrh	r2, [r3, #0]
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	0018      	movs	r0, r3
 80097ca:	f001 f9bd 	bl	800ab48 <UART_Start_Receive_DMA>
 80097ce:	0003      	movs	r3, r0
 80097d0:	e000      	b.n	80097d4 <HAL_UART_Receive_DMA+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80097d2:	2302      	movs	r3, #2
  }
}
 80097d4:	0018      	movs	r0, r3
 80097d6:	46bd      	mov	sp, r7
 80097d8:	b008      	add	sp, #32
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	40008000 	.word	0x40008000
 80097e0:	40008400 	.word	0x40008400

080097e4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b098      	sub	sp, #96	; 0x60
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 80097ec:	2301      	movs	r3, #1
 80097ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097f0:	f3ef 8310 	mrs	r3, PRIMASK
 80097f4:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 80097f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80097fa:	2301      	movs	r3, #1
 80097fc:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009800:	f383 8810 	msr	PRIMASK, r3
}
 8009804:	46c0      	nop			; (mov r8, r8)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4987      	ldr	r1, [pc, #540]	; (8009a30 <HAL_UART_Abort_IT+0x24c>)
 8009812:	400a      	ands	r2, r1
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009818:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981c:	f383 8810 	msr	PRIMASK, r3
}
 8009820:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009822:	f3ef 8310 	mrs	r3, PRIMASK
 8009826:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800982a:	657b      	str	r3, [r7, #84]	; 0x54
 800982c:	2301      	movs	r3, #1
 800982e:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009832:	f383 8810 	msr	PRIMASK, r3
}
 8009836:	46c0      	nop			; (mov r8, r8)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689a      	ldr	r2, [r3, #8]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	497c      	ldr	r1, [pc, #496]	; (8009a34 <HAL_UART_Abort_IT+0x250>)
 8009844:	400a      	ands	r2, r1
 8009846:	609a      	str	r2, [r3, #8]
 8009848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800984a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800984c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800984e:	f383 8810 	msr	PRIMASK, r3
}
 8009852:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009858:	2b01      	cmp	r3, #1
 800985a:	d118      	bne.n	800988e <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800985c:	f3ef 8310 	mrs	r3, PRIMASK
 8009860:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009864:	653b      	str	r3, [r7, #80]	; 0x50
 8009866:	2301      	movs	r3, #1
 8009868:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986c:	f383 8810 	msr	PRIMASK, r3
}
 8009870:	46c0      	nop			; (mov r8, r8)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2110      	movs	r1, #16
 800987e:	438a      	bics	r2, r1
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009884:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009888:	f383 8810 	msr	PRIMASK, r3
}
 800988c:	46c0      	nop			; (mov r8, r8)
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00f      	beq.n	80098b6 <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	2280      	movs	r2, #128	; 0x80
 800989e:	4013      	ands	r3, r2
 80098a0:	2b80      	cmp	r3, #128	; 0x80
 80098a2:	d104      	bne.n	80098ae <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098a8:	4a63      	ldr	r2, [pc, #396]	; (8009a38 <HAL_UART_Abort_IT+0x254>)
 80098aa:	639a      	str	r2, [r3, #56]	; 0x38
 80098ac:	e003      	b.n	80098b6 <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098b2:	2200      	movs	r2, #0
 80098b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00f      	beq.n	80098de <HAL_UART_Abort_IT+0xfa>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	2240      	movs	r2, #64	; 0x40
 80098c6:	4013      	ands	r3, r2
 80098c8:	2b40      	cmp	r3, #64	; 0x40
 80098ca:	d104      	bne.n	80098d6 <HAL_UART_Abort_IT+0xf2>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098d0:	4a5a      	ldr	r2, [pc, #360]	; (8009a3c <HAL_UART_Abort_IT+0x258>)
 80098d2:	639a      	str	r2, [r3, #56]	; 0x38
 80098d4:	e003      	b.n	80098de <HAL_UART_Abort_IT+0xfa>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098da:	2200      	movs	r2, #0
 80098dc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	2280      	movs	r2, #128	; 0x80
 80098e6:	4013      	ands	r3, r2
 80098e8:	2b80      	cmp	r3, #128	; 0x80
 80098ea:	d12a      	bne.n	8009942 <HAL_UART_Abort_IT+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098ec:	f3ef 8310 	mrs	r3, PRIMASK
 80098f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80098f2:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80098f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098f6:	2301      	movs	r3, #1
 80098f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	f383 8810 	msr	PRIMASK, r3
}
 8009900:	46c0      	nop			; (mov r8, r8)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2180      	movs	r1, #128	; 0x80
 800990e:	438a      	bics	r2, r1
 8009910:	609a      	str	r2, [r3, #8]
 8009912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009914:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	f383 8810 	msr	PRIMASK, r3
}
 800991c:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00d      	beq.n	8009942 <HAL_UART_Abort_IT+0x15e>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800992a:	0018      	movs	r0, r3
 800992c:	f7fb f9b6 	bl	8004c9c <HAL_DMA_Abort_IT>
 8009930:	1e03      	subs	r3, r0, #0
 8009932:	d004      	beq.n	800993e <HAL_UART_Abort_IT+0x15a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009938:	2200      	movs	r2, #0
 800993a:	639a      	str	r2, [r3, #56]	; 0x38
 800993c:	e001      	b.n	8009942 <HAL_UART_Abort_IT+0x15e>
      }
      else
      {
        abortcplt = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	2240      	movs	r2, #64	; 0x40
 800994a:	4013      	ands	r3, r2
 800994c:	2b40      	cmp	r3, #64	; 0x40
 800994e:	d12c      	bne.n	80099aa <HAL_UART_Abort_IT+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009950:	f3ef 8310 	mrs	r3, PRIMASK
 8009954:	60fb      	str	r3, [r7, #12]
  return(result);
 8009956:	68fb      	ldr	r3, [r7, #12]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009958:	64bb      	str	r3, [r7, #72]	; 0x48
 800995a:	2301      	movs	r3, #1
 800995c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f383 8810 	msr	PRIMASK, r3
}
 8009964:	46c0      	nop			; (mov r8, r8)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2140      	movs	r1, #64	; 0x40
 8009972:	438a      	bics	r2, r1
 8009974:	609a      	str	r2, [r3, #8]
 8009976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009978:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f383 8810 	msr	PRIMASK, r3
}
 8009980:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00f      	beq.n	80099aa <HAL_UART_Abort_IT+0x1c6>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800998e:	0018      	movs	r0, r3
 8009990:	f7fb f984 	bl	8004c9c <HAL_DMA_Abort_IT>
 8009994:	1e03      	subs	r3, r0, #0
 8009996:	d006      	beq.n	80099a6 <HAL_UART_Abort_IT+0x1c2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800999c:	2200      	movs	r2, #0
 800999e:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 80099a0:	2301      	movs	r3, #1
 80099a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099a4:	e001      	b.n	80099aa <HAL_UART_Abort_IT+0x1c6>
      }
      else
      {
        abortcplt = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 80099aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d13a      	bne.n	8009a26 <HAL_UART_Abort_IT+0x242>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2256      	movs	r2, #86	; 0x56
 80099b4:	2100      	movs	r1, #0
 80099b6:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	225e      	movs	r2, #94	; 0x5e
 80099bc:	2100      	movs	r1, #0
 80099be:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	228c      	movs	r2, #140	; 0x8c
 80099d0:	2100      	movs	r1, #0
 80099d2:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	220f      	movs	r2, #15
 80099da:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80099e0:	2380      	movs	r3, #128	; 0x80
 80099e2:	059b      	lsls	r3, r3, #22
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d107      	bne.n	80099f8 <HAL_UART_Abort_IT+0x214>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699a      	ldr	r2, [r3, #24]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2110      	movs	r1, #16
 80099f4:	430a      	orrs	r2, r1
 80099f6:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	699a      	ldr	r2, [r3, #24]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2108      	movs	r1, #8
 8009a04:	430a      	orrs	r2, r1
 8009a06:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2284      	movs	r2, #132	; 0x84
 8009a0c:	2120      	movs	r1, #32
 8009a0e:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2288      	movs	r2, #136	; 0x88
 8009a14:	2120      	movs	r1, #32
 8009a16:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	0018      	movs	r0, r3
 8009a22:	f000 fb37 	bl	800a094 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	0018      	movs	r0, r3
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	b018      	add	sp, #96	; 0x60
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	fffffe1f 	.word	0xfffffe1f
 8009a34:	ef7ffffe 	.word	0xef7ffffe
 8009a38:	0800aff5 	.word	0x0800aff5
 8009a3c:	0800b081 	.word	0x0800b081

08009a40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a40:	b5b0      	push	{r4, r5, r7, lr}
 8009a42:	b0aa      	sub	sp, #168	; 0xa8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	69db      	ldr	r3, [r3, #28]
 8009a4e:	22a4      	movs	r2, #164	; 0xa4
 8009a50:	18b9      	adds	r1, r7, r2
 8009a52:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	20a0      	movs	r0, #160	; 0xa0
 8009a5c:	1839      	adds	r1, r7, r0
 8009a5e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	249c      	movs	r4, #156	; 0x9c
 8009a68:	1939      	adds	r1, r7, r4
 8009a6a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a6c:	0011      	movs	r1, r2
 8009a6e:	18bb      	adds	r3, r7, r2
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4aa0      	ldr	r2, [pc, #640]	; (8009cf4 <HAL_UART_IRQHandler+0x2b4>)
 8009a74:	4013      	ands	r3, r2
 8009a76:	2298      	movs	r2, #152	; 0x98
 8009a78:	18bd      	adds	r5, r7, r2
 8009a7a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8009a7c:	18bb      	adds	r3, r7, r2
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d11a      	bne.n	8009aba <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a84:	187b      	adds	r3, r7, r1
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2220      	movs	r2, #32
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	d015      	beq.n	8009aba <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a8e:	183b      	adds	r3, r7, r0
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2220      	movs	r2, #32
 8009a94:	4013      	ands	r3, r2
 8009a96:	d105      	bne.n	8009aa4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a98:	193b      	adds	r3, r7, r4
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	2380      	movs	r3, #128	; 0x80
 8009a9e:	055b      	lsls	r3, r3, #21
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	d00a      	beq.n	8009aba <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d100      	bne.n	8009aae <HAL_UART_IRQHandler+0x6e>
 8009aac:	e2cf      	b.n	800a04e <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	0010      	movs	r0, r2
 8009ab6:	4798      	blx	r3
      }
      return;
 8009ab8:	e2c9      	b.n	800a04e <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009aba:	2398      	movs	r3, #152	; 0x98
 8009abc:	18fb      	adds	r3, r7, r3
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d100      	bne.n	8009ac6 <HAL_UART_IRQHandler+0x86>
 8009ac4:	e11e      	b.n	8009d04 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009ac6:	239c      	movs	r3, #156	; 0x9c
 8009ac8:	18fb      	adds	r3, r7, r3
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a8a      	ldr	r2, [pc, #552]	; (8009cf8 <HAL_UART_IRQHandler+0x2b8>)
 8009ace:	4013      	ands	r3, r2
 8009ad0:	d106      	bne.n	8009ae0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ad2:	23a0      	movs	r3, #160	; 0xa0
 8009ad4:	18fb      	adds	r3, r7, r3
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a88      	ldr	r2, [pc, #544]	; (8009cfc <HAL_UART_IRQHandler+0x2bc>)
 8009ada:	4013      	ands	r3, r2
 8009adc:	d100      	bne.n	8009ae0 <HAL_UART_IRQHandler+0xa0>
 8009ade:	e111      	b.n	8009d04 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ae0:	23a4      	movs	r3, #164	; 0xa4
 8009ae2:	18fb      	adds	r3, r7, r3
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	4013      	ands	r3, r2
 8009aea:	d012      	beq.n	8009b12 <HAL_UART_IRQHandler+0xd2>
 8009aec:	23a0      	movs	r3, #160	; 0xa0
 8009aee:	18fb      	adds	r3, r7, r3
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	2380      	movs	r3, #128	; 0x80
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	4013      	ands	r3, r2
 8009af8:	d00b      	beq.n	8009b12 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2201      	movs	r2, #1
 8009b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	228c      	movs	r2, #140	; 0x8c
 8009b06:	589b      	ldr	r3, [r3, r2]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	431a      	orrs	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	218c      	movs	r1, #140	; 0x8c
 8009b10:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b12:	23a4      	movs	r3, #164	; 0xa4
 8009b14:	18fb      	adds	r3, r7, r3
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2202      	movs	r2, #2
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	d011      	beq.n	8009b42 <HAL_UART_IRQHandler+0x102>
 8009b1e:	239c      	movs	r3, #156	; 0x9c
 8009b20:	18fb      	adds	r3, r7, r3
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2201      	movs	r2, #1
 8009b26:	4013      	ands	r3, r2
 8009b28:	d00b      	beq.n	8009b42 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2202      	movs	r2, #2
 8009b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	228c      	movs	r2, #140	; 0x8c
 8009b36:	589b      	ldr	r3, [r3, r2]
 8009b38:	2204      	movs	r2, #4
 8009b3a:	431a      	orrs	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	218c      	movs	r1, #140	; 0x8c
 8009b40:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b42:	23a4      	movs	r3, #164	; 0xa4
 8009b44:	18fb      	adds	r3, r7, r3
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2204      	movs	r2, #4
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	d011      	beq.n	8009b72 <HAL_UART_IRQHandler+0x132>
 8009b4e:	239c      	movs	r3, #156	; 0x9c
 8009b50:	18fb      	adds	r3, r7, r3
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2201      	movs	r2, #1
 8009b56:	4013      	ands	r3, r2
 8009b58:	d00b      	beq.n	8009b72 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2204      	movs	r2, #4
 8009b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	228c      	movs	r2, #140	; 0x8c
 8009b66:	589b      	ldr	r3, [r3, r2]
 8009b68:	2202      	movs	r2, #2
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	218c      	movs	r1, #140	; 0x8c
 8009b70:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b72:	23a4      	movs	r3, #164	; 0xa4
 8009b74:	18fb      	adds	r3, r7, r3
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2208      	movs	r2, #8
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	d017      	beq.n	8009bae <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b7e:	23a0      	movs	r3, #160	; 0xa0
 8009b80:	18fb      	adds	r3, r7, r3
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2220      	movs	r2, #32
 8009b86:	4013      	ands	r3, r2
 8009b88:	d105      	bne.n	8009b96 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b8a:	239c      	movs	r3, #156	; 0x9c
 8009b8c:	18fb      	adds	r3, r7, r3
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a59      	ldr	r2, [pc, #356]	; (8009cf8 <HAL_UART_IRQHandler+0x2b8>)
 8009b92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b94:	d00b      	beq.n	8009bae <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	228c      	movs	r2, #140	; 0x8c
 8009ba2:	589b      	ldr	r3, [r3, r2]
 8009ba4:	2208      	movs	r2, #8
 8009ba6:	431a      	orrs	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	218c      	movs	r1, #140	; 0x8c
 8009bac:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009bae:	23a4      	movs	r3, #164	; 0xa4
 8009bb0:	18fb      	adds	r3, r7, r3
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	2380      	movs	r3, #128	; 0x80
 8009bb6:	011b      	lsls	r3, r3, #4
 8009bb8:	4013      	ands	r3, r2
 8009bba:	d013      	beq.n	8009be4 <HAL_UART_IRQHandler+0x1a4>
 8009bbc:	23a0      	movs	r3, #160	; 0xa0
 8009bbe:	18fb      	adds	r3, r7, r3
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	2380      	movs	r3, #128	; 0x80
 8009bc4:	04db      	lsls	r3, r3, #19
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	d00c      	beq.n	8009be4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2280      	movs	r2, #128	; 0x80
 8009bd0:	0112      	lsls	r2, r2, #4
 8009bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	228c      	movs	r2, #140	; 0x8c
 8009bd8:	589b      	ldr	r3, [r3, r2]
 8009bda:	2220      	movs	r2, #32
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	218c      	movs	r1, #140	; 0x8c
 8009be2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	228c      	movs	r2, #140	; 0x8c
 8009be8:	589b      	ldr	r3, [r3, r2]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d100      	bne.n	8009bf0 <HAL_UART_IRQHandler+0x1b0>
 8009bee:	e230      	b.n	800a052 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009bf0:	23a4      	movs	r3, #164	; 0xa4
 8009bf2:	18fb      	adds	r3, r7, r3
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	d015      	beq.n	8009c28 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009bfc:	23a0      	movs	r3, #160	; 0xa0
 8009bfe:	18fb      	adds	r3, r7, r3
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2220      	movs	r2, #32
 8009c04:	4013      	ands	r3, r2
 8009c06:	d106      	bne.n	8009c16 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c08:	239c      	movs	r3, #156	; 0x9c
 8009c0a:	18fb      	adds	r3, r7, r3
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	2380      	movs	r3, #128	; 0x80
 8009c10:	055b      	lsls	r3, r3, #21
 8009c12:	4013      	ands	r3, r2
 8009c14:	d008      	beq.n	8009c28 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d004      	beq.n	8009c28 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	0010      	movs	r0, r2
 8009c26:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	228c      	movs	r2, #140	; 0x8c
 8009c2c:	589b      	ldr	r3, [r3, r2]
 8009c2e:	2194      	movs	r1, #148	; 0x94
 8009c30:	187a      	adds	r2, r7, r1
 8009c32:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	2240      	movs	r2, #64	; 0x40
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	2b40      	cmp	r3, #64	; 0x40
 8009c40:	d004      	beq.n	8009c4c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c42:	187b      	adds	r3, r7, r1
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2228      	movs	r2, #40	; 0x28
 8009c48:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c4a:	d047      	beq.n	8009cdc <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	0018      	movs	r0, r3
 8009c50:	f001 f85e 	bl	800ad10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	2240      	movs	r2, #64	; 0x40
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	2b40      	cmp	r3, #64	; 0x40
 8009c60:	d137      	bne.n	8009cd2 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c62:	f3ef 8310 	mrs	r3, PRIMASK
 8009c66:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8009c68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c6a:	2090      	movs	r0, #144	; 0x90
 8009c6c:	183a      	adds	r2, r7, r0
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	2301      	movs	r3, #1
 8009c72:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c76:	f383 8810 	msr	PRIMASK, r3
}
 8009c7a:	46c0      	nop			; (mov r8, r8)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	689a      	ldr	r2, [r3, #8]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2140      	movs	r1, #64	; 0x40
 8009c88:	438a      	bics	r2, r1
 8009c8a:	609a      	str	r2, [r3, #8]
 8009c8c:	183b      	adds	r3, r7, r0
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c94:	f383 8810 	msr	PRIMASK, r3
}
 8009c98:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d012      	beq.n	8009cc8 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ca6:	4a16      	ldr	r2, [pc, #88]	; (8009d00 <HAL_UART_IRQHandler+0x2c0>)
 8009ca8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cae:	0018      	movs	r0, r3
 8009cb0:	f7fa fff4 	bl	8004c9c <HAL_DMA_Abort_IT>
 8009cb4:	1e03      	subs	r3, r0, #0
 8009cb6:	d01a      	beq.n	8009cee <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc6:	e012      	b.n	8009cee <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	0018      	movs	r0, r3
 8009ccc:	f000 f9da 	bl	800a084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cd0:	e00d      	b.n	8009cee <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	0018      	movs	r0, r3
 8009cd6:	f000 f9d5 	bl	800a084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cda:	e008      	b.n	8009cee <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	0018      	movs	r0, r3
 8009ce0:	f000 f9d0 	bl	800a084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	228c      	movs	r2, #140	; 0x8c
 8009ce8:	2100      	movs	r1, #0
 8009cea:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009cec:	e1b1      	b.n	800a052 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cee:	46c0      	nop			; (mov r8, r8)
    return;
 8009cf0:	e1af      	b.n	800a052 <HAL_UART_IRQHandler+0x612>
 8009cf2:	46c0      	nop			; (mov r8, r8)
 8009cf4:	0000080f 	.word	0x0000080f
 8009cf8:	10000001 	.word	0x10000001
 8009cfc:	04000120 	.word	0x04000120
 8009d00:	0800afc7 	.word	0x0800afc7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d000      	beq.n	8009d0e <HAL_UART_IRQHandler+0x2ce>
 8009d0c:	e135      	b.n	8009f7a <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d0e:	23a4      	movs	r3, #164	; 0xa4
 8009d10:	18fb      	adds	r3, r7, r3
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2210      	movs	r2, #16
 8009d16:	4013      	ands	r3, r2
 8009d18:	d100      	bne.n	8009d1c <HAL_UART_IRQHandler+0x2dc>
 8009d1a:	e12e      	b.n	8009f7a <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d1c:	23a0      	movs	r3, #160	; 0xa0
 8009d1e:	18fb      	adds	r3, r7, r3
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2210      	movs	r2, #16
 8009d24:	4013      	ands	r3, r2
 8009d26:	d100      	bne.n	8009d2a <HAL_UART_IRQHandler+0x2ea>
 8009d28:	e127      	b.n	8009f7a <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2210      	movs	r2, #16
 8009d30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	2240      	movs	r2, #64	; 0x40
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	2b40      	cmp	r3, #64	; 0x40
 8009d3e:	d000      	beq.n	8009d42 <HAL_UART_IRQHandler+0x302>
 8009d40:	e09e      	b.n	8009e80 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	217e      	movs	r1, #126	; 0x7e
 8009d4c:	187b      	adds	r3, r7, r1
 8009d4e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8009d50:	187b      	adds	r3, r7, r1
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d100      	bne.n	8009d5a <HAL_UART_IRQHandler+0x31a>
 8009d58:	e17d      	b.n	800a056 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	225c      	movs	r2, #92	; 0x5c
 8009d5e:	5a9b      	ldrh	r3, [r3, r2]
 8009d60:	187a      	adds	r2, r7, r1
 8009d62:	8812      	ldrh	r2, [r2, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d300      	bcc.n	8009d6a <HAL_UART_IRQHandler+0x32a>
 8009d68:	e175      	b.n	800a056 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	187a      	adds	r2, r7, r1
 8009d6e:	215e      	movs	r1, #94	; 0x5e
 8009d70:	8812      	ldrh	r2, [r2, #0]
 8009d72:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2220      	movs	r2, #32
 8009d7e:	4013      	ands	r3, r2
 8009d80:	d16f      	bne.n	8009e62 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d82:	f3ef 8310 	mrs	r3, PRIMASK
 8009d86:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d92:	f383 8810 	msr	PRIMASK, r3
}
 8009d96:	46c0      	nop			; (mov r8, r8)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	49b1      	ldr	r1, [pc, #708]	; (800a068 <HAL_UART_IRQHandler+0x628>)
 8009da4:	400a      	ands	r2, r1
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009daa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dae:	f383 8810 	msr	PRIMASK, r3
}
 8009db2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009db4:	f3ef 8310 	mrs	r3, PRIMASK
 8009db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dbc:	677b      	str	r3, [r7, #116]	; 0x74
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dc4:	f383 8810 	msr	PRIMASK, r3
}
 8009dc8:	46c0      	nop			; (mov r8, r8)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689a      	ldr	r2, [r3, #8]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	438a      	bics	r2, r1
 8009dd8:	609a      	str	r2, [r3, #8]
 8009dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ddc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de0:	f383 8810 	msr	PRIMASK, r3
}
 8009de4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de6:	f3ef 8310 	mrs	r3, PRIMASK
 8009dea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8009dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dee:	673b      	str	r3, [r7, #112]	; 0x70
 8009df0:	2301      	movs	r3, #1
 8009df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009df6:	f383 8810 	msr	PRIMASK, r3
}
 8009dfa:	46c0      	nop			; (mov r8, r8)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	689a      	ldr	r2, [r3, #8]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2140      	movs	r1, #64	; 0x40
 8009e08:	438a      	bics	r2, r1
 8009e0a:	609a      	str	r2, [r3, #8]
 8009e0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e0e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e12:	f383 8810 	msr	PRIMASK, r3
}
 8009e16:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2288      	movs	r2, #136	; 0x88
 8009e1c:	2120      	movs	r1, #32
 8009e1e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e26:	f3ef 8310 	mrs	r3, PRIMASK
 8009e2a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8009e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e30:	2301      	movs	r3, #1
 8009e32:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e36:	f383 8810 	msr	PRIMASK, r3
}
 8009e3a:	46c0      	nop			; (mov r8, r8)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2110      	movs	r1, #16
 8009e48:	438a      	bics	r2, r1
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e52:	f383 8810 	msr	PRIMASK, r3
}
 8009e56:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e5c:	0018      	movs	r0, r3
 8009e5e:	f7fa febd 	bl	8004bdc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	225c      	movs	r2, #92	; 0x5c
 8009e66:	5a9a      	ldrh	r2, [r3, r2]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	215e      	movs	r1, #94	; 0x5e
 8009e6c:	5a5b      	ldrh	r3, [r3, r1]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	0011      	movs	r1, r2
 8009e78:	0018      	movs	r0, r3
 8009e7a:	f000 f913 	bl	800a0a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e7e:	e0ea      	b.n	800a056 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	225c      	movs	r2, #92	; 0x5c
 8009e84:	5a99      	ldrh	r1, [r3, r2]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	225e      	movs	r2, #94	; 0x5e
 8009e8a:	5a9b      	ldrh	r3, [r3, r2]
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	208e      	movs	r0, #142	; 0x8e
 8009e90:	183b      	adds	r3, r7, r0
 8009e92:	1a8a      	subs	r2, r1, r2
 8009e94:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	225e      	movs	r2, #94	; 0x5e
 8009e9a:	5a9b      	ldrh	r3, [r3, r2]
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d100      	bne.n	8009ea4 <HAL_UART_IRQHandler+0x464>
 8009ea2:	e0da      	b.n	800a05a <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8009ea4:	183b      	adds	r3, r7, r0
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d100      	bne.n	8009eae <HAL_UART_IRQHandler+0x46e>
 8009eac:	e0d5      	b.n	800a05a <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eae:	f3ef 8310 	mrs	r3, PRIMASK
 8009eb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009eb6:	2488      	movs	r4, #136	; 0x88
 8009eb8:	193a      	adds	r2, r7, r4
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	f383 8810 	msr	PRIMASK, r3
}
 8009ec6:	46c0      	nop			; (mov r8, r8)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4966      	ldr	r1, [pc, #408]	; (800a06c <HAL_UART_IRQHandler+0x62c>)
 8009ed4:	400a      	ands	r2, r1
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	193b      	adds	r3, r7, r4
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f383 8810 	msr	PRIMASK, r3
}
 8009ee4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8009eea:	61bb      	str	r3, [r7, #24]
  return(result);
 8009eec:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009eee:	2484      	movs	r4, #132	; 0x84
 8009ef0:	193a      	adds	r2, r7, r4
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	f383 8810 	msr	PRIMASK, r3
}
 8009efe:	46c0      	nop			; (mov r8, r8)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	689a      	ldr	r2, [r3, #8]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4959      	ldr	r1, [pc, #356]	; (800a070 <HAL_UART_IRQHandler+0x630>)
 8009f0c:	400a      	ands	r2, r1
 8009f0e:	609a      	str	r2, [r3, #8]
 8009f10:	193b      	adds	r3, r7, r4
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	f383 8810 	msr	PRIMASK, r3
}
 8009f1c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2288      	movs	r2, #136	; 0x88
 8009f22:	2120      	movs	r1, #32
 8009f24:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f32:	f3ef 8310 	mrs	r3, PRIMASK
 8009f36:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f3a:	2480      	movs	r4, #128	; 0x80
 8009f3c:	193a      	adds	r2, r7, r4
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	2301      	movs	r3, #1
 8009f42:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	f383 8810 	msr	PRIMASK, r3
}
 8009f4a:	46c0      	nop			; (mov r8, r8)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2110      	movs	r1, #16
 8009f58:	438a      	bics	r2, r1
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	193b      	adds	r3, r7, r4
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f64:	f383 8810 	msr	PRIMASK, r3
}
 8009f68:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f6a:	183b      	adds	r3, r7, r0
 8009f6c:	881a      	ldrh	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	0011      	movs	r1, r2
 8009f72:	0018      	movs	r0, r3
 8009f74:	f000 f896 	bl	800a0a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f78:	e06f      	b.n	800a05a <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f7a:	23a4      	movs	r3, #164	; 0xa4
 8009f7c:	18fb      	adds	r3, r7, r3
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	2380      	movs	r3, #128	; 0x80
 8009f82:	035b      	lsls	r3, r3, #13
 8009f84:	4013      	ands	r3, r2
 8009f86:	d010      	beq.n	8009faa <HAL_UART_IRQHandler+0x56a>
 8009f88:	239c      	movs	r3, #156	; 0x9c
 8009f8a:	18fb      	adds	r3, r7, r3
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	2380      	movs	r3, #128	; 0x80
 8009f90:	03db      	lsls	r3, r3, #15
 8009f92:	4013      	ands	r3, r2
 8009f94:	d009      	beq.n	8009faa <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2280      	movs	r2, #128	; 0x80
 8009f9c:	0352      	lsls	r2, r2, #13
 8009f9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f001 fa82 	bl	800b4ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fa8:	e05a      	b.n	800a060 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009faa:	23a4      	movs	r3, #164	; 0xa4
 8009fac:	18fb      	adds	r3, r7, r3
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2280      	movs	r2, #128	; 0x80
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	d016      	beq.n	8009fe4 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009fb6:	23a0      	movs	r3, #160	; 0xa0
 8009fb8:	18fb      	adds	r3, r7, r3
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2280      	movs	r2, #128	; 0x80
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	d106      	bne.n	8009fd0 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009fc2:	239c      	movs	r3, #156	; 0x9c
 8009fc4:	18fb      	adds	r3, r7, r3
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	2380      	movs	r3, #128	; 0x80
 8009fca:	041b      	lsls	r3, r3, #16
 8009fcc:	4013      	ands	r3, r2
 8009fce:	d009      	beq.n	8009fe4 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d042      	beq.n	800a05e <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	0010      	movs	r0, r2
 8009fe0:	4798      	blx	r3
    }
    return;
 8009fe2:	e03c      	b.n	800a05e <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009fe4:	23a4      	movs	r3, #164	; 0xa4
 8009fe6:	18fb      	adds	r3, r7, r3
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2240      	movs	r2, #64	; 0x40
 8009fec:	4013      	ands	r3, r2
 8009fee:	d00a      	beq.n	800a006 <HAL_UART_IRQHandler+0x5c6>
 8009ff0:	23a0      	movs	r3, #160	; 0xa0
 8009ff2:	18fb      	adds	r3, r7, r3
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2240      	movs	r2, #64	; 0x40
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	d004      	beq.n	800a006 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	0018      	movs	r0, r3
 800a000:	f001 fa28 	bl	800b454 <UART_EndTransmit_IT>
    return;
 800a004:	e02c      	b.n	800a060 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a006:	23a4      	movs	r3, #164	; 0xa4
 800a008:	18fb      	adds	r3, r7, r3
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	2380      	movs	r3, #128	; 0x80
 800a00e:	041b      	lsls	r3, r3, #16
 800a010:	4013      	ands	r3, r2
 800a012:	d00b      	beq.n	800a02c <HAL_UART_IRQHandler+0x5ec>
 800a014:	23a0      	movs	r3, #160	; 0xa0
 800a016:	18fb      	adds	r3, r7, r3
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	2380      	movs	r3, #128	; 0x80
 800a01c:	05db      	lsls	r3, r3, #23
 800a01e:	4013      	ands	r3, r2
 800a020:	d004      	beq.n	800a02c <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	0018      	movs	r0, r3
 800a026:	f001 fa51 	bl	800b4cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a02a:	e019      	b.n	800a060 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a02c:	23a4      	movs	r3, #164	; 0xa4
 800a02e:	18fb      	adds	r3, r7, r3
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	2380      	movs	r3, #128	; 0x80
 800a034:	045b      	lsls	r3, r3, #17
 800a036:	4013      	ands	r3, r2
 800a038:	d012      	beq.n	800a060 <HAL_UART_IRQHandler+0x620>
 800a03a:	23a0      	movs	r3, #160	; 0xa0
 800a03c:	18fb      	adds	r3, r7, r3
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	da0d      	bge.n	800a060 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	0018      	movs	r0, r3
 800a048:	f001 fa38 	bl	800b4bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a04c:	e008      	b.n	800a060 <HAL_UART_IRQHandler+0x620>
      return;
 800a04e:	46c0      	nop			; (mov r8, r8)
 800a050:	e006      	b.n	800a060 <HAL_UART_IRQHandler+0x620>
    return;
 800a052:	46c0      	nop			; (mov r8, r8)
 800a054:	e004      	b.n	800a060 <HAL_UART_IRQHandler+0x620>
      return;
 800a056:	46c0      	nop			; (mov r8, r8)
 800a058:	e002      	b.n	800a060 <HAL_UART_IRQHandler+0x620>
      return;
 800a05a:	46c0      	nop			; (mov r8, r8)
 800a05c:	e000      	b.n	800a060 <HAL_UART_IRQHandler+0x620>
    return;
 800a05e:	46c0      	nop			; (mov r8, r8)
  }
}
 800a060:	46bd      	mov	sp, r7
 800a062:	b02a      	add	sp, #168	; 0xa8
 800a064:	bdb0      	pop	{r4, r5, r7, pc}
 800a066:	46c0      	nop			; (mov r8, r8)
 800a068:	fffffeff 	.word	0xfffffeff
 800a06c:	fffffedf 	.word	0xfffffedf
 800a070:	effffffe 	.word	0xeffffffe

0800a074 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a07c:	46c0      	nop			; (mov r8, r8)
 800a07e:	46bd      	mov	sp, r7
 800a080:	b002      	add	sp, #8
 800a082:	bd80      	pop	{r7, pc}

0800a084 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a08c:	46c0      	nop			; (mov r8, r8)
 800a08e:	46bd      	mov	sp, r7
 800a090:	b002      	add	sp, #8
 800a092:	bd80      	pop	{r7, pc}

0800a094 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a09c:	46c0      	nop			; (mov r8, r8)
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	b002      	add	sp, #8
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	000a      	movs	r2, r1
 800a0ae:	1cbb      	adds	r3, r7, #2
 800a0b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a0b2:	46c0      	nop			; (mov r8, r8)
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	b002      	add	sp, #8
 800a0b8:	bd80      	pop	{r7, pc}
	...

0800a0bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0bc:	b5b0      	push	{r4, r5, r7, lr}
 800a0be:	b090      	sub	sp, #64	; 0x40
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0c4:	231a      	movs	r3, #26
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	4694      	mov	ip, r2
 800a0ca:	44bc      	add	ip, r7
 800a0cc:	4463      	add	r3, ip
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	431a      	orrs	r2, r3
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	431a      	orrs	r2, r3
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	69db      	ldr	r3, [r3, #28]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4ac1      	ldr	r2, [pc, #772]	; (800a3f8 <UART_SetConfig+0x33c>)
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	0019      	movs	r1, r3
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0fc:	430b      	orrs	r3, r1
 800a0fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	4abd      	ldr	r2, [pc, #756]	; (800a3fc <UART_SetConfig+0x340>)
 800a108:	4013      	ands	r3, r2
 800a10a:	0018      	movs	r0, r3
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	68d9      	ldr	r1, [r3, #12]
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	0003      	movs	r3, r0
 800a116:	430b      	orrs	r3, r1
 800a118:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4ab6      	ldr	r2, [pc, #728]	; (800a400 <UART_SetConfig+0x344>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d009      	beq.n	800a13e <UART_SetConfig+0x82>
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4ab5      	ldr	r2, [pc, #724]	; (800a404 <UART_SetConfig+0x348>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d004      	beq.n	800a13e <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	6a1b      	ldr	r3, [r3, #32]
 800a138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a13a:	4313      	orrs	r3, r2
 800a13c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	4ab0      	ldr	r2, [pc, #704]	; (800a408 <UART_SetConfig+0x34c>)
 800a146:	4013      	ands	r3, r2
 800a148:	0019      	movs	r1, r3
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a150:	430b      	orrs	r3, r1
 800a152:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15a:	220f      	movs	r2, #15
 800a15c:	4393      	bics	r3, r2
 800a15e:	0018      	movs	r0, r3
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	0003      	movs	r3, r0
 800a16a:	430b      	orrs	r3, r1
 800a16c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4aa6      	ldr	r2, [pc, #664]	; (800a40c <UART_SetConfig+0x350>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d136      	bne.n	800a1e6 <UART_SetConfig+0x12a>
 800a178:	4ba5      	ldr	r3, [pc, #660]	; (800a410 <UART_SetConfig+0x354>)
 800a17a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a17c:	2203      	movs	r2, #3
 800a17e:	4013      	ands	r3, r2
 800a180:	2b03      	cmp	r3, #3
 800a182:	d020      	beq.n	800a1c6 <UART_SetConfig+0x10a>
 800a184:	d827      	bhi.n	800a1d6 <UART_SetConfig+0x11a>
 800a186:	2b02      	cmp	r3, #2
 800a188:	d00d      	beq.n	800a1a6 <UART_SetConfig+0xea>
 800a18a:	d824      	bhi.n	800a1d6 <UART_SetConfig+0x11a>
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <UART_SetConfig+0xda>
 800a190:	2b01      	cmp	r3, #1
 800a192:	d010      	beq.n	800a1b6 <UART_SetConfig+0xfa>
 800a194:	e01f      	b.n	800a1d6 <UART_SetConfig+0x11a>
 800a196:	231b      	movs	r3, #27
 800a198:	2220      	movs	r2, #32
 800a19a:	4694      	mov	ip, r2
 800a19c:	44bc      	add	ip, r7
 800a19e:	4463      	add	r3, ip
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	701a      	strb	r2, [r3, #0]
 800a1a4:	e16f      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a1a6:	231b      	movs	r3, #27
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	4694      	mov	ip, r2
 800a1ac:	44bc      	add	ip, r7
 800a1ae:	4463      	add	r3, ip
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	701a      	strb	r2, [r3, #0]
 800a1b4:	e167      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a1b6:	231b      	movs	r3, #27
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	4694      	mov	ip, r2
 800a1bc:	44bc      	add	ip, r7
 800a1be:	4463      	add	r3, ip
 800a1c0:	2204      	movs	r2, #4
 800a1c2:	701a      	strb	r2, [r3, #0]
 800a1c4:	e15f      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a1c6:	231b      	movs	r3, #27
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	4694      	mov	ip, r2
 800a1cc:	44bc      	add	ip, r7
 800a1ce:	4463      	add	r3, ip
 800a1d0:	2208      	movs	r2, #8
 800a1d2:	701a      	strb	r2, [r3, #0]
 800a1d4:	e157      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a1d6:	231b      	movs	r3, #27
 800a1d8:	2220      	movs	r2, #32
 800a1da:	4694      	mov	ip, r2
 800a1dc:	44bc      	add	ip, r7
 800a1de:	4463      	add	r3, ip
 800a1e0:	2210      	movs	r2, #16
 800a1e2:	701a      	strb	r2, [r3, #0]
 800a1e4:	e14f      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a8a      	ldr	r2, [pc, #552]	; (800a414 <UART_SetConfig+0x358>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d136      	bne.n	800a25e <UART_SetConfig+0x1a2>
 800a1f0:	4b87      	ldr	r3, [pc, #540]	; (800a410 <UART_SetConfig+0x354>)
 800a1f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f4:	220c      	movs	r2, #12
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	2b0c      	cmp	r3, #12
 800a1fa:	d020      	beq.n	800a23e <UART_SetConfig+0x182>
 800a1fc:	d827      	bhi.n	800a24e <UART_SetConfig+0x192>
 800a1fe:	2b08      	cmp	r3, #8
 800a200:	d00d      	beq.n	800a21e <UART_SetConfig+0x162>
 800a202:	d824      	bhi.n	800a24e <UART_SetConfig+0x192>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <UART_SetConfig+0x152>
 800a208:	2b04      	cmp	r3, #4
 800a20a:	d010      	beq.n	800a22e <UART_SetConfig+0x172>
 800a20c:	e01f      	b.n	800a24e <UART_SetConfig+0x192>
 800a20e:	231b      	movs	r3, #27
 800a210:	2220      	movs	r2, #32
 800a212:	4694      	mov	ip, r2
 800a214:	44bc      	add	ip, r7
 800a216:	4463      	add	r3, ip
 800a218:	2200      	movs	r2, #0
 800a21a:	701a      	strb	r2, [r3, #0]
 800a21c:	e133      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a21e:	231b      	movs	r3, #27
 800a220:	2220      	movs	r2, #32
 800a222:	4694      	mov	ip, r2
 800a224:	44bc      	add	ip, r7
 800a226:	4463      	add	r3, ip
 800a228:	2202      	movs	r2, #2
 800a22a:	701a      	strb	r2, [r3, #0]
 800a22c:	e12b      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a22e:	231b      	movs	r3, #27
 800a230:	2220      	movs	r2, #32
 800a232:	4694      	mov	ip, r2
 800a234:	44bc      	add	ip, r7
 800a236:	4463      	add	r3, ip
 800a238:	2204      	movs	r2, #4
 800a23a:	701a      	strb	r2, [r3, #0]
 800a23c:	e123      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a23e:	231b      	movs	r3, #27
 800a240:	2220      	movs	r2, #32
 800a242:	4694      	mov	ip, r2
 800a244:	44bc      	add	ip, r7
 800a246:	4463      	add	r3, ip
 800a248:	2208      	movs	r2, #8
 800a24a:	701a      	strb	r2, [r3, #0]
 800a24c:	e11b      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a24e:	231b      	movs	r3, #27
 800a250:	2220      	movs	r2, #32
 800a252:	4694      	mov	ip, r2
 800a254:	44bc      	add	ip, r7
 800a256:	4463      	add	r3, ip
 800a258:	2210      	movs	r2, #16
 800a25a:	701a      	strb	r2, [r3, #0]
 800a25c:	e113      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a6d      	ldr	r2, [pc, #436]	; (800a418 <UART_SetConfig+0x35c>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d136      	bne.n	800a2d6 <UART_SetConfig+0x21a>
 800a268:	4b69      	ldr	r3, [pc, #420]	; (800a410 <UART_SetConfig+0x354>)
 800a26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26c:	2230      	movs	r2, #48	; 0x30
 800a26e:	4013      	ands	r3, r2
 800a270:	2b30      	cmp	r3, #48	; 0x30
 800a272:	d020      	beq.n	800a2b6 <UART_SetConfig+0x1fa>
 800a274:	d827      	bhi.n	800a2c6 <UART_SetConfig+0x20a>
 800a276:	2b20      	cmp	r3, #32
 800a278:	d00d      	beq.n	800a296 <UART_SetConfig+0x1da>
 800a27a:	d824      	bhi.n	800a2c6 <UART_SetConfig+0x20a>
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <UART_SetConfig+0x1ca>
 800a280:	2b10      	cmp	r3, #16
 800a282:	d010      	beq.n	800a2a6 <UART_SetConfig+0x1ea>
 800a284:	e01f      	b.n	800a2c6 <UART_SetConfig+0x20a>
 800a286:	231b      	movs	r3, #27
 800a288:	2220      	movs	r2, #32
 800a28a:	4694      	mov	ip, r2
 800a28c:	44bc      	add	ip, r7
 800a28e:	4463      	add	r3, ip
 800a290:	2200      	movs	r2, #0
 800a292:	701a      	strb	r2, [r3, #0]
 800a294:	e0f7      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a296:	231b      	movs	r3, #27
 800a298:	2220      	movs	r2, #32
 800a29a:	4694      	mov	ip, r2
 800a29c:	44bc      	add	ip, r7
 800a29e:	4463      	add	r3, ip
 800a2a0:	2202      	movs	r2, #2
 800a2a2:	701a      	strb	r2, [r3, #0]
 800a2a4:	e0ef      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a2a6:	231b      	movs	r3, #27
 800a2a8:	2220      	movs	r2, #32
 800a2aa:	4694      	mov	ip, r2
 800a2ac:	44bc      	add	ip, r7
 800a2ae:	4463      	add	r3, ip
 800a2b0:	2204      	movs	r2, #4
 800a2b2:	701a      	strb	r2, [r3, #0]
 800a2b4:	e0e7      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a2b6:	231b      	movs	r3, #27
 800a2b8:	2220      	movs	r2, #32
 800a2ba:	4694      	mov	ip, r2
 800a2bc:	44bc      	add	ip, r7
 800a2be:	4463      	add	r3, ip
 800a2c0:	2208      	movs	r2, #8
 800a2c2:	701a      	strb	r2, [r3, #0]
 800a2c4:	e0df      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a2c6:	231b      	movs	r3, #27
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	4694      	mov	ip, r2
 800a2cc:	44bc      	add	ip, r7
 800a2ce:	4463      	add	r3, ip
 800a2d0:	2210      	movs	r2, #16
 800a2d2:	701a      	strb	r2, [r3, #0]
 800a2d4:	e0d7      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a50      	ldr	r2, [pc, #320]	; (800a41c <UART_SetConfig+0x360>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d107      	bne.n	800a2f0 <UART_SetConfig+0x234>
 800a2e0:	231b      	movs	r3, #27
 800a2e2:	2220      	movs	r2, #32
 800a2e4:	4694      	mov	ip, r2
 800a2e6:	44bc      	add	ip, r7
 800a2e8:	4463      	add	r3, ip
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	701a      	strb	r2, [r3, #0]
 800a2ee:	e0ca      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a4a      	ldr	r2, [pc, #296]	; (800a420 <UART_SetConfig+0x364>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d107      	bne.n	800a30a <UART_SetConfig+0x24e>
 800a2fa:	231b      	movs	r3, #27
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	4694      	mov	ip, r2
 800a300:	44bc      	add	ip, r7
 800a302:	4463      	add	r3, ip
 800a304:	2200      	movs	r2, #0
 800a306:	701a      	strb	r2, [r3, #0]
 800a308:	e0bd      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a45      	ldr	r2, [pc, #276]	; (800a424 <UART_SetConfig+0x368>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d107      	bne.n	800a324 <UART_SetConfig+0x268>
 800a314:	231b      	movs	r3, #27
 800a316:	2220      	movs	r2, #32
 800a318:	4694      	mov	ip, r2
 800a31a:	44bc      	add	ip, r7
 800a31c:	4463      	add	r3, ip
 800a31e:	2200      	movs	r2, #0
 800a320:	701a      	strb	r2, [r3, #0]
 800a322:	e0b0      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a35      	ldr	r2, [pc, #212]	; (800a400 <UART_SetConfig+0x344>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d143      	bne.n	800a3b6 <UART_SetConfig+0x2fa>
 800a32e:	4b38      	ldr	r3, [pc, #224]	; (800a410 <UART_SetConfig+0x354>)
 800a330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a332:	23c0      	movs	r3, #192	; 0xc0
 800a334:	011b      	lsls	r3, r3, #4
 800a336:	4013      	ands	r3, r2
 800a338:	22c0      	movs	r2, #192	; 0xc0
 800a33a:	0112      	lsls	r2, r2, #4
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d02a      	beq.n	800a396 <UART_SetConfig+0x2da>
 800a340:	22c0      	movs	r2, #192	; 0xc0
 800a342:	0112      	lsls	r2, r2, #4
 800a344:	4293      	cmp	r3, r2
 800a346:	d82e      	bhi.n	800a3a6 <UART_SetConfig+0x2ea>
 800a348:	2280      	movs	r2, #128	; 0x80
 800a34a:	0112      	lsls	r2, r2, #4
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d012      	beq.n	800a376 <UART_SetConfig+0x2ba>
 800a350:	2280      	movs	r2, #128	; 0x80
 800a352:	0112      	lsls	r2, r2, #4
 800a354:	4293      	cmp	r3, r2
 800a356:	d826      	bhi.n	800a3a6 <UART_SetConfig+0x2ea>
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d004      	beq.n	800a366 <UART_SetConfig+0x2aa>
 800a35c:	2280      	movs	r2, #128	; 0x80
 800a35e:	00d2      	lsls	r2, r2, #3
 800a360:	4293      	cmp	r3, r2
 800a362:	d010      	beq.n	800a386 <UART_SetConfig+0x2ca>
 800a364:	e01f      	b.n	800a3a6 <UART_SetConfig+0x2ea>
 800a366:	231b      	movs	r3, #27
 800a368:	2220      	movs	r2, #32
 800a36a:	4694      	mov	ip, r2
 800a36c:	44bc      	add	ip, r7
 800a36e:	4463      	add	r3, ip
 800a370:	2200      	movs	r2, #0
 800a372:	701a      	strb	r2, [r3, #0]
 800a374:	e087      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a376:	231b      	movs	r3, #27
 800a378:	2220      	movs	r2, #32
 800a37a:	4694      	mov	ip, r2
 800a37c:	44bc      	add	ip, r7
 800a37e:	4463      	add	r3, ip
 800a380:	2202      	movs	r2, #2
 800a382:	701a      	strb	r2, [r3, #0]
 800a384:	e07f      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a386:	231b      	movs	r3, #27
 800a388:	2220      	movs	r2, #32
 800a38a:	4694      	mov	ip, r2
 800a38c:	44bc      	add	ip, r7
 800a38e:	4463      	add	r3, ip
 800a390:	2204      	movs	r2, #4
 800a392:	701a      	strb	r2, [r3, #0]
 800a394:	e077      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a396:	231b      	movs	r3, #27
 800a398:	2220      	movs	r2, #32
 800a39a:	4694      	mov	ip, r2
 800a39c:	44bc      	add	ip, r7
 800a39e:	4463      	add	r3, ip
 800a3a0:	2208      	movs	r2, #8
 800a3a2:	701a      	strb	r2, [r3, #0]
 800a3a4:	e06f      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a3a6:	231b      	movs	r3, #27
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	4694      	mov	ip, r2
 800a3ac:	44bc      	add	ip, r7
 800a3ae:	4463      	add	r3, ip
 800a3b0:	2210      	movs	r2, #16
 800a3b2:	701a      	strb	r2, [r3, #0]
 800a3b4:	e067      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a12      	ldr	r2, [pc, #72]	; (800a404 <UART_SetConfig+0x348>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d15b      	bne.n	800a478 <UART_SetConfig+0x3bc>
 800a3c0:	4b13      	ldr	r3, [pc, #76]	; (800a410 <UART_SetConfig+0x354>)
 800a3c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3c4:	23c0      	movs	r3, #192	; 0xc0
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	22c0      	movs	r2, #192	; 0xc0
 800a3cc:	0092      	lsls	r2, r2, #2
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d042      	beq.n	800a458 <UART_SetConfig+0x39c>
 800a3d2:	22c0      	movs	r2, #192	; 0xc0
 800a3d4:	0092      	lsls	r2, r2, #2
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d846      	bhi.n	800a468 <UART_SetConfig+0x3ac>
 800a3da:	2280      	movs	r2, #128	; 0x80
 800a3dc:	0092      	lsls	r2, r2, #2
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d02a      	beq.n	800a438 <UART_SetConfig+0x37c>
 800a3e2:	2280      	movs	r2, #128	; 0x80
 800a3e4:	0092      	lsls	r2, r2, #2
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d83e      	bhi.n	800a468 <UART_SetConfig+0x3ac>
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d01c      	beq.n	800a428 <UART_SetConfig+0x36c>
 800a3ee:	2280      	movs	r2, #128	; 0x80
 800a3f0:	0052      	lsls	r2, r2, #1
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d028      	beq.n	800a448 <UART_SetConfig+0x38c>
 800a3f6:	e037      	b.n	800a468 <UART_SetConfig+0x3ac>
 800a3f8:	cfff69f3 	.word	0xcfff69f3
 800a3fc:	ffffcfff 	.word	0xffffcfff
 800a400:	40008000 	.word	0x40008000
 800a404:	40008400 	.word	0x40008400
 800a408:	11fff4ff 	.word	0x11fff4ff
 800a40c:	40013800 	.word	0x40013800
 800a410:	40021000 	.word	0x40021000
 800a414:	40004400 	.word	0x40004400
 800a418:	40004800 	.word	0x40004800
 800a41c:	40004c00 	.word	0x40004c00
 800a420:	40005000 	.word	0x40005000
 800a424:	40013c00 	.word	0x40013c00
 800a428:	231b      	movs	r3, #27
 800a42a:	2220      	movs	r2, #32
 800a42c:	4694      	mov	ip, r2
 800a42e:	44bc      	add	ip, r7
 800a430:	4463      	add	r3, ip
 800a432:	2200      	movs	r2, #0
 800a434:	701a      	strb	r2, [r3, #0]
 800a436:	e026      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a438:	231b      	movs	r3, #27
 800a43a:	2220      	movs	r2, #32
 800a43c:	4694      	mov	ip, r2
 800a43e:	44bc      	add	ip, r7
 800a440:	4463      	add	r3, ip
 800a442:	2202      	movs	r2, #2
 800a444:	701a      	strb	r2, [r3, #0]
 800a446:	e01e      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a448:	231b      	movs	r3, #27
 800a44a:	2220      	movs	r2, #32
 800a44c:	4694      	mov	ip, r2
 800a44e:	44bc      	add	ip, r7
 800a450:	4463      	add	r3, ip
 800a452:	2204      	movs	r2, #4
 800a454:	701a      	strb	r2, [r3, #0]
 800a456:	e016      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a458:	231b      	movs	r3, #27
 800a45a:	2220      	movs	r2, #32
 800a45c:	4694      	mov	ip, r2
 800a45e:	44bc      	add	ip, r7
 800a460:	4463      	add	r3, ip
 800a462:	2208      	movs	r2, #8
 800a464:	701a      	strb	r2, [r3, #0]
 800a466:	e00e      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a468:	231b      	movs	r3, #27
 800a46a:	2220      	movs	r2, #32
 800a46c:	4694      	mov	ip, r2
 800a46e:	44bc      	add	ip, r7
 800a470:	4463      	add	r3, ip
 800a472:	2210      	movs	r2, #16
 800a474:	701a      	strb	r2, [r3, #0]
 800a476:	e006      	b.n	800a486 <UART_SetConfig+0x3ca>
 800a478:	231b      	movs	r3, #27
 800a47a:	2220      	movs	r2, #32
 800a47c:	4694      	mov	ip, r2
 800a47e:	44bc      	add	ip, r7
 800a480:	4463      	add	r3, ip
 800a482:	2210      	movs	r2, #16
 800a484:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4ab8      	ldr	r2, [pc, #736]	; (800a76c <UART_SetConfig+0x6b0>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d005      	beq.n	800a49c <UART_SetConfig+0x3e0>
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4ab6      	ldr	r2, [pc, #728]	; (800a770 <UART_SetConfig+0x6b4>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d000      	beq.n	800a49c <UART_SetConfig+0x3e0>
 800a49a:	e097      	b.n	800a5cc <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a49c:	231b      	movs	r3, #27
 800a49e:	2220      	movs	r2, #32
 800a4a0:	4694      	mov	ip, r2
 800a4a2:	44bc      	add	ip, r7
 800a4a4:	4463      	add	r3, ip
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b08      	cmp	r3, #8
 800a4aa:	d015      	beq.n	800a4d8 <UART_SetConfig+0x41c>
 800a4ac:	dc18      	bgt.n	800a4e0 <UART_SetConfig+0x424>
 800a4ae:	2b04      	cmp	r3, #4
 800a4b0:	d00d      	beq.n	800a4ce <UART_SetConfig+0x412>
 800a4b2:	dc15      	bgt.n	800a4e0 <UART_SetConfig+0x424>
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <UART_SetConfig+0x402>
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d005      	beq.n	800a4c8 <UART_SetConfig+0x40c>
 800a4bc:	e010      	b.n	800a4e0 <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4be:	f7fd ff59 	bl	8008374 <HAL_RCC_GetPCLK1Freq>
 800a4c2:	0003      	movs	r3, r0
 800a4c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a4c6:	e015      	b.n	800a4f4 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4c8:	4baa      	ldr	r3, [pc, #680]	; (800a774 <UART_SetConfig+0x6b8>)
 800a4ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a4cc:	e012      	b.n	800a4f4 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4ce:	f7fd fec5 	bl	800825c <HAL_RCC_GetSysClockFreq>
 800a4d2:	0003      	movs	r3, r0
 800a4d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a4d6:	e00d      	b.n	800a4f4 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4d8:	2380      	movs	r3, #128	; 0x80
 800a4da:	021b      	lsls	r3, r3, #8
 800a4dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a4de:	e009      	b.n	800a4f4 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800a4e4:	231a      	movs	r3, #26
 800a4e6:	2220      	movs	r2, #32
 800a4e8:	4694      	mov	ip, r2
 800a4ea:	44bc      	add	ip, r7
 800a4ec:	4463      	add	r3, ip
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	701a      	strb	r2, [r3, #0]
        break;
 800a4f2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d100      	bne.n	800a4fc <UART_SetConfig+0x440>
 800a4fa:	e146      	b.n	800a78a <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a500:	4b9d      	ldr	r3, [pc, #628]	; (800a778 <UART_SetConfig+0x6bc>)
 800a502:	0052      	lsls	r2, r2, #1
 800a504:	5ad3      	ldrh	r3, [r2, r3]
 800a506:	0019      	movs	r1, r3
 800a508:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a50a:	f7f5 fe17 	bl	800013c <__udivsi3>
 800a50e:	0003      	movs	r3, r0
 800a510:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	0013      	movs	r3, r2
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	189b      	adds	r3, r3, r2
 800a51c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a51e:	429a      	cmp	r2, r3
 800a520:	d305      	bcc.n	800a52e <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d907      	bls.n	800a53e <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 800a52e:	231a      	movs	r3, #26
 800a530:	2220      	movs	r2, #32
 800a532:	4694      	mov	ip, r2
 800a534:	44bc      	add	ip, r7
 800a536:	4463      	add	r3, ip
 800a538:	2201      	movs	r2, #1
 800a53a:	701a      	strb	r2, [r3, #0]
 800a53c:	e045      	b.n	800a5ca <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a540:	61bb      	str	r3, [r7, #24]
 800a542:	2300      	movs	r3, #0
 800a544:	61fb      	str	r3, [r7, #28]
 800a546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a54a:	4b8b      	ldr	r3, [pc, #556]	; (800a778 <UART_SetConfig+0x6bc>)
 800a54c:	0052      	lsls	r2, r2, #1
 800a54e:	5ad3      	ldrh	r3, [r2, r3]
 800a550:	613b      	str	r3, [r7, #16]
 800a552:	2300      	movs	r3, #0
 800a554:	617b      	str	r3, [r7, #20]
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	69b8      	ldr	r0, [r7, #24]
 800a55c:	69f9      	ldr	r1, [r7, #28]
 800a55e:	f7f5 ffa1 	bl	80004a4 <__aeabi_uldivmod>
 800a562:	0002      	movs	r2, r0
 800a564:	000b      	movs	r3, r1
 800a566:	0e11      	lsrs	r1, r2, #24
 800a568:	021d      	lsls	r5, r3, #8
 800a56a:	430d      	orrs	r5, r1
 800a56c:	0214      	lsls	r4, r2, #8
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	085b      	lsrs	r3, r3, #1
 800a574:	60bb      	str	r3, [r7, #8]
 800a576:	2300      	movs	r3, #0
 800a578:	60fb      	str	r3, [r7, #12]
 800a57a:	68b8      	ldr	r0, [r7, #8]
 800a57c:	68f9      	ldr	r1, [r7, #12]
 800a57e:	1900      	adds	r0, r0, r4
 800a580:	4169      	adcs	r1, r5
 800a582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	603b      	str	r3, [r7, #0]
 800a588:	2300      	movs	r3, #0
 800a58a:	607b      	str	r3, [r7, #4]
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f7f5 ff88 	bl	80004a4 <__aeabi_uldivmod>
 800a594:	0002      	movs	r2, r0
 800a596:	000b      	movs	r3, r1
 800a598:	0013      	movs	r3, r2
 800a59a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59e:	23c0      	movs	r3, #192	; 0xc0
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d309      	bcc.n	800a5ba <UART_SetConfig+0x4fe>
 800a5a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5a8:	2380      	movs	r3, #128	; 0x80
 800a5aa:	035b      	lsls	r3, r3, #13
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d204      	bcs.n	800a5ba <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5b6:	60da      	str	r2, [r3, #12]
 800a5b8:	e007      	b.n	800a5ca <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 800a5ba:	231a      	movs	r3, #26
 800a5bc:	2220      	movs	r2, #32
 800a5be:	4694      	mov	ip, r2
 800a5c0:	44bc      	add	ip, r7
 800a5c2:	4463      	add	r3, ip
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800a5c8:	e0df      	b.n	800a78a <UART_SetConfig+0x6ce>
 800a5ca:	e0de      	b.n	800a78a <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ce:	69da      	ldr	r2, [r3, #28]
 800a5d0:	2380      	movs	r3, #128	; 0x80
 800a5d2:	021b      	lsls	r3, r3, #8
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d000      	beq.n	800a5da <UART_SetConfig+0x51e>
 800a5d8:	e074      	b.n	800a6c4 <UART_SetConfig+0x608>
  {
    switch (clocksource)
 800a5da:	231b      	movs	r3, #27
 800a5dc:	2220      	movs	r2, #32
 800a5de:	4694      	mov	ip, r2
 800a5e0:	44bc      	add	ip, r7
 800a5e2:	4463      	add	r3, ip
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	2b08      	cmp	r3, #8
 800a5e8:	d015      	beq.n	800a616 <UART_SetConfig+0x55a>
 800a5ea:	dc18      	bgt.n	800a61e <UART_SetConfig+0x562>
 800a5ec:	2b04      	cmp	r3, #4
 800a5ee:	d00d      	beq.n	800a60c <UART_SetConfig+0x550>
 800a5f0:	dc15      	bgt.n	800a61e <UART_SetConfig+0x562>
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <UART_SetConfig+0x540>
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d005      	beq.n	800a606 <UART_SetConfig+0x54a>
 800a5fa:	e010      	b.n	800a61e <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5fc:	f7fd feba 	bl	8008374 <HAL_RCC_GetPCLK1Freq>
 800a600:	0003      	movs	r3, r0
 800a602:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a604:	e015      	b.n	800a632 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a606:	4b5b      	ldr	r3, [pc, #364]	; (800a774 <UART_SetConfig+0x6b8>)
 800a608:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a60a:	e012      	b.n	800a632 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a60c:	f7fd fe26 	bl	800825c <HAL_RCC_GetSysClockFreq>
 800a610:	0003      	movs	r3, r0
 800a612:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a614:	e00d      	b.n	800a632 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a616:	2380      	movs	r3, #128	; 0x80
 800a618:	021b      	lsls	r3, r3, #8
 800a61a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a61c:	e009      	b.n	800a632 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a61e:	2300      	movs	r3, #0
 800a620:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800a622:	231a      	movs	r3, #26
 800a624:	2220      	movs	r2, #32
 800a626:	4694      	mov	ip, r2
 800a628:	44bc      	add	ip, r7
 800a62a:	4463      	add	r3, ip
 800a62c:	2201      	movs	r2, #1
 800a62e:	701a      	strb	r2, [r3, #0]
        break;
 800a630:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a634:	2b00      	cmp	r3, #0
 800a636:	d100      	bne.n	800a63a <UART_SetConfig+0x57e>
 800a638:	e0a7      	b.n	800a78a <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a63e:	4b4e      	ldr	r3, [pc, #312]	; (800a778 <UART_SetConfig+0x6bc>)
 800a640:	0052      	lsls	r2, r2, #1
 800a642:	5ad3      	ldrh	r3, [r2, r3]
 800a644:	0019      	movs	r1, r3
 800a646:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a648:	f7f5 fd78 	bl	800013c <__udivsi3>
 800a64c:	0003      	movs	r3, r0
 800a64e:	005a      	lsls	r2, r3, #1
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	085b      	lsrs	r3, r3, #1
 800a656:	18d2      	adds	r2, r2, r3
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	0019      	movs	r1, r3
 800a65e:	0010      	movs	r0, r2
 800a660:	f7f5 fd6c 	bl	800013c <__udivsi3>
 800a664:	0003      	movs	r3, r0
 800a666:	b29b      	uxth	r3, r3
 800a668:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66c:	2b0f      	cmp	r3, #15
 800a66e:	d921      	bls.n	800a6b4 <UART_SetConfig+0x5f8>
 800a670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a672:	2380      	movs	r3, #128	; 0x80
 800a674:	025b      	lsls	r3, r3, #9
 800a676:	429a      	cmp	r2, r3
 800a678:	d21c      	bcs.n	800a6b4 <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	200e      	movs	r0, #14
 800a680:	2420      	movs	r4, #32
 800a682:	193b      	adds	r3, r7, r4
 800a684:	181b      	adds	r3, r3, r0
 800a686:	210f      	movs	r1, #15
 800a688:	438a      	bics	r2, r1
 800a68a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	085b      	lsrs	r3, r3, #1
 800a690:	b29b      	uxth	r3, r3
 800a692:	2207      	movs	r2, #7
 800a694:	4013      	ands	r3, r2
 800a696:	b299      	uxth	r1, r3
 800a698:	193b      	adds	r3, r7, r4
 800a69a:	181b      	adds	r3, r3, r0
 800a69c:	193a      	adds	r2, r7, r4
 800a69e:	1812      	adds	r2, r2, r0
 800a6a0:	8812      	ldrh	r2, [r2, #0]
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	193a      	adds	r2, r7, r4
 800a6ac:	1812      	adds	r2, r2, r0
 800a6ae:	8812      	ldrh	r2, [r2, #0]
 800a6b0:	60da      	str	r2, [r3, #12]
 800a6b2:	e06a      	b.n	800a78a <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a6b4:	231a      	movs	r3, #26
 800a6b6:	2220      	movs	r2, #32
 800a6b8:	4694      	mov	ip, r2
 800a6ba:	44bc      	add	ip, r7
 800a6bc:	4463      	add	r3, ip
 800a6be:	2201      	movs	r2, #1
 800a6c0:	701a      	strb	r2, [r3, #0]
 800a6c2:	e062      	b.n	800a78a <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6c4:	231b      	movs	r3, #27
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	4694      	mov	ip, r2
 800a6ca:	44bc      	add	ip, r7
 800a6cc:	4463      	add	r3, ip
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b08      	cmp	r3, #8
 800a6d2:	d015      	beq.n	800a700 <UART_SetConfig+0x644>
 800a6d4:	dc18      	bgt.n	800a708 <UART_SetConfig+0x64c>
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	d00d      	beq.n	800a6f6 <UART_SetConfig+0x63a>
 800a6da:	dc15      	bgt.n	800a708 <UART_SetConfig+0x64c>
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <UART_SetConfig+0x62a>
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d005      	beq.n	800a6f0 <UART_SetConfig+0x634>
 800a6e4:	e010      	b.n	800a708 <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6e6:	f7fd fe45 	bl	8008374 <HAL_RCC_GetPCLK1Freq>
 800a6ea:	0003      	movs	r3, r0
 800a6ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6ee:	e015      	b.n	800a71c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6f0:	4b20      	ldr	r3, [pc, #128]	; (800a774 <UART_SetConfig+0x6b8>)
 800a6f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6f4:	e012      	b.n	800a71c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6f6:	f7fd fdb1 	bl	800825c <HAL_RCC_GetSysClockFreq>
 800a6fa:	0003      	movs	r3, r0
 800a6fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6fe:	e00d      	b.n	800a71c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a700:	2380      	movs	r3, #128	; 0x80
 800a702:	021b      	lsls	r3, r3, #8
 800a704:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a706:	e009      	b.n	800a71c <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 800a708:	2300      	movs	r3, #0
 800a70a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800a70c:	231a      	movs	r3, #26
 800a70e:	2220      	movs	r2, #32
 800a710:	4694      	mov	ip, r2
 800a712:	44bc      	add	ip, r7
 800a714:	4463      	add	r3, ip
 800a716:	2201      	movs	r2, #1
 800a718:	701a      	strb	r2, [r3, #0]
        break;
 800a71a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800a71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d033      	beq.n	800a78a <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a726:	4b14      	ldr	r3, [pc, #80]	; (800a778 <UART_SetConfig+0x6bc>)
 800a728:	0052      	lsls	r2, r2, #1
 800a72a:	5ad3      	ldrh	r3, [r2, r3]
 800a72c:	0019      	movs	r1, r3
 800a72e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a730:	f7f5 fd04 	bl	800013c <__udivsi3>
 800a734:	0003      	movs	r3, r0
 800a736:	001a      	movs	r2, r3
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	085b      	lsrs	r3, r3, #1
 800a73e:	18d2      	adds	r2, r2, r3
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	0019      	movs	r1, r3
 800a746:	0010      	movs	r0, r2
 800a748:	f7f5 fcf8 	bl	800013c <__udivsi3>
 800a74c:	0003      	movs	r3, r0
 800a74e:	b29b      	uxth	r3, r3
 800a750:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	2b0f      	cmp	r3, #15
 800a756:	d911      	bls.n	800a77c <UART_SetConfig+0x6c0>
 800a758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a75a:	2380      	movs	r3, #128	; 0x80
 800a75c:	025b      	lsls	r3, r3, #9
 800a75e:	429a      	cmp	r2, r3
 800a760:	d20c      	bcs.n	800a77c <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 800a762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a768:	60da      	str	r2, [r3, #12]
 800a76a:	e00e      	b.n	800a78a <UART_SetConfig+0x6ce>
 800a76c:	40008000 	.word	0x40008000
 800a770:	40008400 	.word	0x40008400
 800a774:	00f42400 	.word	0x00f42400
 800a778:	0800e778 	.word	0x0800e778
      }
      else
      {
        ret = HAL_ERROR;
 800a77c:	231a      	movs	r3, #26
 800a77e:	2220      	movs	r2, #32
 800a780:	4694      	mov	ip, r2
 800a782:	44bc      	add	ip, r7
 800a784:	4463      	add	r3, ip
 800a786:	2201      	movs	r2, #1
 800a788:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	226a      	movs	r2, #106	; 0x6a
 800a78e:	2101      	movs	r1, #1
 800a790:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	2268      	movs	r2, #104	; 0x68
 800a796:	2101      	movs	r1, #1
 800a798:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	2200      	movs	r2, #0
 800a79e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a7a6:	231a      	movs	r3, #26
 800a7a8:	2220      	movs	r2, #32
 800a7aa:	4694      	mov	ip, r2
 800a7ac:	44bc      	add	ip, r7
 800a7ae:	4463      	add	r3, ip
 800a7b0:	781b      	ldrb	r3, [r3, #0]
}
 800a7b2:	0018      	movs	r0, r3
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	b010      	add	sp, #64	; 0x40
 800a7b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a7ba:	46c0      	nop			; (mov r8, r8)

0800a7bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	d00b      	beq.n	800a7e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	4a4a      	ldr	r2, [pc, #296]	; (800a900 <UART_AdvFeatureConfig+0x144>)
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	0019      	movs	r1, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	430a      	orrs	r2, r1
 800a7e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	4013      	ands	r3, r2
 800a7ee:	d00b      	beq.n	800a808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	4a43      	ldr	r2, [pc, #268]	; (800a904 <UART_AdvFeatureConfig+0x148>)
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	0019      	movs	r1, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	430a      	orrs	r2, r1
 800a806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80c:	2204      	movs	r2, #4
 800a80e:	4013      	ands	r3, r2
 800a810:	d00b      	beq.n	800a82a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	4a3b      	ldr	r2, [pc, #236]	; (800a908 <UART_AdvFeatureConfig+0x14c>)
 800a81a:	4013      	ands	r3, r2
 800a81c:	0019      	movs	r1, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	430a      	orrs	r2, r1
 800a828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a82e:	2208      	movs	r2, #8
 800a830:	4013      	ands	r3, r2
 800a832:	d00b      	beq.n	800a84c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	4a34      	ldr	r2, [pc, #208]	; (800a90c <UART_AdvFeatureConfig+0x150>)
 800a83c:	4013      	ands	r3, r2
 800a83e:	0019      	movs	r1, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	430a      	orrs	r2, r1
 800a84a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a850:	2210      	movs	r2, #16
 800a852:	4013      	ands	r3, r2
 800a854:	d00b      	beq.n	800a86e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	4a2c      	ldr	r2, [pc, #176]	; (800a910 <UART_AdvFeatureConfig+0x154>)
 800a85e:	4013      	ands	r3, r2
 800a860:	0019      	movs	r1, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	430a      	orrs	r2, r1
 800a86c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a872:	2220      	movs	r2, #32
 800a874:	4013      	ands	r3, r2
 800a876:	d00b      	beq.n	800a890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	4a25      	ldr	r2, [pc, #148]	; (800a914 <UART_AdvFeatureConfig+0x158>)
 800a880:	4013      	ands	r3, r2
 800a882:	0019      	movs	r1, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	430a      	orrs	r2, r1
 800a88e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a894:	2240      	movs	r2, #64	; 0x40
 800a896:	4013      	ands	r3, r2
 800a898:	d01d      	beq.n	800a8d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	4a1d      	ldr	r2, [pc, #116]	; (800a918 <UART_AdvFeatureConfig+0x15c>)
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	0019      	movs	r1, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8b6:	2380      	movs	r3, #128	; 0x80
 800a8b8:	035b      	lsls	r3, r3, #13
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d10b      	bne.n	800a8d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	4a15      	ldr	r2, [pc, #84]	; (800a91c <UART_AdvFeatureConfig+0x160>)
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	0019      	movs	r1, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8da:	2280      	movs	r2, #128	; 0x80
 800a8dc:	4013      	ands	r3, r2
 800a8de:	d00b      	beq.n	800a8f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	4a0e      	ldr	r2, [pc, #56]	; (800a920 <UART_AdvFeatureConfig+0x164>)
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	0019      	movs	r1, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	605a      	str	r2, [r3, #4]
  }
}
 800a8f8:	46c0      	nop			; (mov r8, r8)
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	b002      	add	sp, #8
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	fffdffff 	.word	0xfffdffff
 800a904:	fffeffff 	.word	0xfffeffff
 800a908:	fffbffff 	.word	0xfffbffff
 800a90c:	ffff7fff 	.word	0xffff7fff
 800a910:	ffffefff 	.word	0xffffefff
 800a914:	ffffdfff 	.word	0xffffdfff
 800a918:	ffefffff 	.word	0xffefffff
 800a91c:	ff9fffff 	.word	0xff9fffff
 800a920:	fff7ffff 	.word	0xfff7ffff

0800a924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af02      	add	r7, sp, #8
 800a92a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	228c      	movs	r2, #140	; 0x8c
 800a930:	2100      	movs	r1, #0
 800a932:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a934:	f7f9 fa02 	bl	8003d3c <HAL_GetTick>
 800a938:	0003      	movs	r3, r0
 800a93a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2208      	movs	r2, #8
 800a944:	4013      	ands	r3, r2
 800a946:	2b08      	cmp	r3, #8
 800a948:	d10c      	bne.n	800a964 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2280      	movs	r2, #128	; 0x80
 800a94e:	0391      	lsls	r1, r2, #14
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	4a18      	ldr	r2, [pc, #96]	; (800a9b4 <UART_CheckIdleState+0x90>)
 800a954:	9200      	str	r2, [sp, #0]
 800a956:	2200      	movs	r2, #0
 800a958:	f000 f82e 	bl	800a9b8 <UART_WaitOnFlagUntilTimeout>
 800a95c:	1e03      	subs	r3, r0, #0
 800a95e:	d001      	beq.n	800a964 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a960:	2303      	movs	r3, #3
 800a962:	e023      	b.n	800a9ac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2204      	movs	r2, #4
 800a96c:	4013      	ands	r3, r2
 800a96e:	2b04      	cmp	r3, #4
 800a970:	d10c      	bne.n	800a98c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2280      	movs	r2, #128	; 0x80
 800a976:	03d1      	lsls	r1, r2, #15
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	4a0e      	ldr	r2, [pc, #56]	; (800a9b4 <UART_CheckIdleState+0x90>)
 800a97c:	9200      	str	r2, [sp, #0]
 800a97e:	2200      	movs	r2, #0
 800a980:	f000 f81a 	bl	800a9b8 <UART_WaitOnFlagUntilTimeout>
 800a984:	1e03      	subs	r3, r0, #0
 800a986:	d001      	beq.n	800a98c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a988:	2303      	movs	r3, #3
 800a98a:	e00f      	b.n	800a9ac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2284      	movs	r2, #132	; 0x84
 800a990:	2120      	movs	r1, #32
 800a992:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2288      	movs	r2, #136	; 0x88
 800a998:	2120      	movs	r1, #32
 800a99a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2280      	movs	r2, #128	; 0x80
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	b004      	add	sp, #16
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	01ffffff 	.word	0x01ffffff

0800a9b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b094      	sub	sp, #80	; 0x50
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	603b      	str	r3, [r7, #0]
 800a9c4:	1dfb      	adds	r3, r7, #7
 800a9c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9c8:	e0a7      	b.n	800ab1a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	d100      	bne.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 800a9d0:	e0a3      	b.n	800ab1a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9d2:	f7f9 f9b3 	bl	8003d3c <HAL_GetTick>
 800a9d6:	0002      	movs	r2, r0
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d302      	bcc.n	800a9e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a9e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d13f      	bne.n	800aa68 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a9ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a9f0:	647b      	str	r3, [r7, #68]	; 0x44
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f8:	f383 8810 	msr	PRIMASK, r3
}
 800a9fc:	46c0      	nop			; (mov r8, r8)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	494e      	ldr	r1, [pc, #312]	; (800ab44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800aa0a:	400a      	ands	r2, r1
 800aa0c:	601a      	str	r2, [r3, #0]
 800aa0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	f383 8810 	msr	PRIMASK, r3
}
 800aa18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa1a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800aa20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa22:	643b      	str	r3, [r7, #64]	; 0x40
 800aa24:	2301      	movs	r3, #1
 800aa26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2a:	f383 8810 	msr	PRIMASK, r3
}
 800aa2e:	46c0      	nop			; (mov r8, r8)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689a      	ldr	r2, [r3, #8]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	438a      	bics	r2, r1
 800aa3e:	609a      	str	r2, [r3, #8]
 800aa40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa46:	f383 8810 	msr	PRIMASK, r3
}
 800aa4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2284      	movs	r2, #132	; 0x84
 800aa50:	2120      	movs	r1, #32
 800aa52:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2288      	movs	r2, #136	; 0x88
 800aa58:	2120      	movs	r1, #32
 800aa5a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2280      	movs	r2, #128	; 0x80
 800aa60:	2100      	movs	r1, #0
 800aa62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800aa64:	2303      	movs	r3, #3
 800aa66:	e069      	b.n	800ab3c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2204      	movs	r2, #4
 800aa70:	4013      	ands	r3, r2
 800aa72:	d052      	beq.n	800ab1a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	69da      	ldr	r2, [r3, #28]
 800aa7a:	2380      	movs	r3, #128	; 0x80
 800aa7c:	011b      	lsls	r3, r3, #4
 800aa7e:	401a      	ands	r2, r3
 800aa80:	2380      	movs	r3, #128	; 0x80
 800aa82:	011b      	lsls	r3, r3, #4
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d148      	bne.n	800ab1a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2280      	movs	r2, #128	; 0x80
 800aa8e:	0112      	lsls	r2, r2, #4
 800aa90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa92:	f3ef 8310 	mrs	r3, PRIMASK
 800aa96:	613b      	str	r3, [r7, #16]
  return(result);
 800aa98:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aa9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	f383 8810 	msr	PRIMASK, r3
}
 800aaa6:	46c0      	nop			; (mov r8, r8)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4924      	ldr	r1, [pc, #144]	; (800ab44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800aab4:	400a      	ands	r2, r1
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	f383 8810 	msr	PRIMASK, r3
}
 800aac2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aac4:	f3ef 8310 	mrs	r3, PRIMASK
 800aac8:	61fb      	str	r3, [r7, #28]
  return(result);
 800aaca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aacc:	64bb      	str	r3, [r7, #72]	; 0x48
 800aace:	2301      	movs	r3, #1
 800aad0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	f383 8810 	msr	PRIMASK, r3
}
 800aad8:	46c0      	nop			; (mov r8, r8)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	689a      	ldr	r2, [r3, #8]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2101      	movs	r1, #1
 800aae6:	438a      	bics	r2, r1
 800aae8:	609a      	str	r2, [r3, #8]
 800aaea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf0:	f383 8810 	msr	PRIMASK, r3
}
 800aaf4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2284      	movs	r2, #132	; 0x84
 800aafa:	2120      	movs	r1, #32
 800aafc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2288      	movs	r2, #136	; 0x88
 800ab02:	2120      	movs	r1, #32
 800ab04:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	228c      	movs	r2, #140	; 0x8c
 800ab0a:	2120      	movs	r1, #32
 800ab0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2280      	movs	r2, #128	; 0x80
 800ab12:	2100      	movs	r1, #0
 800ab14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ab16:	2303      	movs	r3, #3
 800ab18:	e010      	b.n	800ab3c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	69db      	ldr	r3, [r3, #28]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	4013      	ands	r3, r2
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	425a      	negs	r2, r3
 800ab2a:	4153      	adcs	r3, r2
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	001a      	movs	r2, r3
 800ab30:	1dfb      	adds	r3, r7, #7
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d100      	bne.n	800ab3a <UART_WaitOnFlagUntilTimeout+0x182>
 800ab38:	e747      	b.n	800a9ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	b014      	add	sp, #80	; 0x50
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	fffffe5f 	.word	0xfffffe5f

0800ab48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b090      	sub	sp, #64	; 0x40
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	1dbb      	adds	r3, r7, #6
 800ab54:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	1dba      	adds	r2, r7, #6
 800ab60:	215c      	movs	r1, #92	; 0x5c
 800ab62:	8812      	ldrh	r2, [r2, #0]
 800ab64:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	228c      	movs	r2, #140	; 0x8c
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2288      	movs	r2, #136	; 0x88
 800ab72:	2122      	movs	r1, #34	; 0x22
 800ab74:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d02c      	beq.n	800abd8 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab82:	4a40      	ldr	r2, [pc, #256]	; (800ac84 <UART_Start_Receive_DMA+0x13c>)
 800ab84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab8a:	4a3f      	ldr	r2, [pc, #252]	; (800ac88 <UART_Start_Receive_DMA+0x140>)
 800ab8c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab92:	4a3e      	ldr	r2, [pc, #248]	; (800ac8c <UART_Start_Receive_DMA+0x144>)
 800ab94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	3324      	adds	r3, #36	; 0x24
 800aba8:	0019      	movs	r1, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abae:	001a      	movs	r2, r3
 800abb0:	1dbb      	adds	r3, r7, #6
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	f7f9 ff8c 	bl	8004ad0 <HAL_DMA_Start_IT>
 800abb8:	1e03      	subs	r3, r0, #0
 800abba:	d00d      	beq.n	800abd8 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	228c      	movs	r2, #140	; 0x8c
 800abc0:	2110      	movs	r1, #16
 800abc2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2280      	movs	r2, #128	; 0x80
 800abc8:	2100      	movs	r1, #0
 800abca:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2288      	movs	r2, #136	; 0x88
 800abd0:	2120      	movs	r1, #32
 800abd2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e050      	b.n	800ac7a <UART_Start_Receive_DMA+0x132>
    }
  }
  __HAL_UNLOCK(huart);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2280      	movs	r2, #128	; 0x80
 800abdc:	2100      	movs	r1, #0
 800abde:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abe0:	f3ef 8310 	mrs	r3, PRIMASK
 800abe4:	613b      	str	r3, [r7, #16]
  return(result);
 800abe6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abea:	2301      	movs	r3, #1
 800abec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f383 8810 	msr	PRIMASK, r3
}
 800abf4:	46c0      	nop			; (mov r8, r8)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2180      	movs	r1, #128	; 0x80
 800ac02:	0049      	lsls	r1, r1, #1
 800ac04:	430a      	orrs	r2, r1
 800ac06:	601a      	str	r2, [r3, #0]
 800ac08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	f383 8810 	msr	PRIMASK, r3
}
 800ac12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac14:	f3ef 8310 	mrs	r3, PRIMASK
 800ac18:	61fb      	str	r3, [r7, #28]
  return(result);
 800ac1a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac1c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac1e:	2301      	movs	r3, #1
 800ac20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac22:	6a3b      	ldr	r3, [r7, #32]
 800ac24:	f383 8810 	msr	PRIMASK, r3
}
 800ac28:	46c0      	nop			; (mov r8, r8)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2101      	movs	r1, #1
 800ac36:	430a      	orrs	r2, r1
 800ac38:	609a      	str	r2, [r3, #8]
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac40:	f383 8810 	msr	PRIMASK, r3
}
 800ac44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac46:	f3ef 8310 	mrs	r3, PRIMASK
 800ac4a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800ac4c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac4e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac50:	2301      	movs	r3, #1
 800ac52:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac56:	f383 8810 	msr	PRIMASK, r3
}
 800ac5a:	46c0      	nop			; (mov r8, r8)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	689a      	ldr	r2, [r3, #8]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2140      	movs	r1, #64	; 0x40
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	609a      	str	r2, [r3, #8]
 800ac6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac72:	f383 8810 	msr	PRIMASK, r3
}
 800ac76:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	0018      	movs	r0, r3
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	b010      	add	sp, #64	; 0x40
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	46c0      	nop			; (mov r8, r8)
 800ac84:	0800addd 	.word	0x0800addd
 800ac88:	0800af05 	.word	0x0800af05
 800ac8c:	0800af41 	.word	0x0800af41

0800ac90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b08a      	sub	sp, #40	; 0x28
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac98:	f3ef 8310 	mrs	r3, PRIMASK
 800ac9c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac9e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aca0:	627b      	str	r3, [r7, #36]	; 0x24
 800aca2:	2301      	movs	r3, #1
 800aca4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f383 8810 	msr	PRIMASK, r3
}
 800acac:	46c0      	nop			; (mov r8, r8)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	21c0      	movs	r1, #192	; 0xc0
 800acba:	438a      	bics	r2, r1
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	f383 8810 	msr	PRIMASK, r3
}
 800acc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acca:	f3ef 8310 	mrs	r3, PRIMASK
 800acce:	617b      	str	r3, [r7, #20]
  return(result);
 800acd0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800acd2:	623b      	str	r3, [r7, #32]
 800acd4:	2301      	movs	r3, #1
 800acd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	f383 8810 	msr	PRIMASK, r3
}
 800acde:	46c0      	nop			; (mov r8, r8)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	689a      	ldr	r2, [r3, #8]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4908      	ldr	r1, [pc, #32]	; (800ad0c <UART_EndTxTransfer+0x7c>)
 800acec:	400a      	ands	r2, r1
 800acee:	609a      	str	r2, [r3, #8]
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	f383 8810 	msr	PRIMASK, r3
}
 800acfa:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2284      	movs	r2, #132	; 0x84
 800ad00:	2120      	movs	r1, #32
 800ad02:	5099      	str	r1, [r3, r2]
}
 800ad04:	46c0      	nop			; (mov r8, r8)
 800ad06:	46bd      	mov	sp, r7
 800ad08:	b00a      	add	sp, #40	; 0x28
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	ff7fffff 	.word	0xff7fffff

0800ad10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08e      	sub	sp, #56	; 0x38
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad18:	f3ef 8310 	mrs	r3, PRIMASK
 800ad1c:	617b      	str	r3, [r7, #20]
  return(result);
 800ad1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad20:	637b      	str	r3, [r7, #52]	; 0x34
 800ad22:	2301      	movs	r3, #1
 800ad24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	f383 8810 	msr	PRIMASK, r3
}
 800ad2c:	46c0      	nop			; (mov r8, r8)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4926      	ldr	r1, [pc, #152]	; (800add4 <UART_EndRxTransfer+0xc4>)
 800ad3a:	400a      	ands	r2, r1
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	f383 8810 	msr	PRIMASK, r3
}
 800ad48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad4a:	f3ef 8310 	mrs	r3, PRIMASK
 800ad4e:	623b      	str	r3, [r7, #32]
  return(result);
 800ad50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad52:	633b      	str	r3, [r7, #48]	; 0x30
 800ad54:	2301      	movs	r3, #1
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	f383 8810 	msr	PRIMASK, r3
}
 800ad5e:	46c0      	nop			; (mov r8, r8)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	689a      	ldr	r2, [r3, #8]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	491b      	ldr	r1, [pc, #108]	; (800add8 <UART_EndRxTransfer+0xc8>)
 800ad6c:	400a      	ands	r2, r1
 800ad6e:	609a      	str	r2, [r3, #8]
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	f383 8810 	msr	PRIMASK, r3
}
 800ad7a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d118      	bne.n	800adb6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad84:	f3ef 8310 	mrs	r3, PRIMASK
 800ad88:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad8e:	2301      	movs	r3, #1
 800ad90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f383 8810 	msr	PRIMASK, r3
}
 800ad98:	46c0      	nop			; (mov r8, r8)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2110      	movs	r1, #16
 800ada6:	438a      	bics	r2, r1
 800ada8:	601a      	str	r2, [r3, #0]
 800adaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f383 8810 	msr	PRIMASK, r3
}
 800adb4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2288      	movs	r2, #136	; 0x88
 800adba:	2120      	movs	r1, #32
 800adbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	671a      	str	r2, [r3, #112]	; 0x70
}
 800adca:	46c0      	nop			; (mov r8, r8)
 800adcc:	46bd      	mov	sp, r7
 800adce:	b00e      	add	sp, #56	; 0x38
 800add0:	bd80      	pop	{r7, pc}
 800add2:	46c0      	nop			; (mov r8, r8)
 800add4:	fffffedf 	.word	0xfffffedf
 800add8:	effffffe 	.word	0xeffffffe

0800addc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b094      	sub	sp, #80	; 0x50
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2220      	movs	r2, #32
 800adf2:	4013      	ands	r3, r2
 800adf4:	d16f      	bne.n	800aed6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800adf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf8:	225e      	movs	r2, #94	; 0x5e
 800adfa:	2100      	movs	r1, #0
 800adfc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adfe:	f3ef 8310 	mrs	r3, PRIMASK
 800ae02:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae04:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae06:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae08:	2301      	movs	r3, #1
 800ae0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	f383 8810 	msr	PRIMASK, r3
}
 800ae12:	46c0      	nop			; (mov r8, r8)
 800ae14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4938      	ldr	r1, [pc, #224]	; (800af00 <UART_DMAReceiveCplt+0x124>)
 800ae20:	400a      	ands	r2, r1
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae28:	6a3b      	ldr	r3, [r7, #32]
 800ae2a:	f383 8810 	msr	PRIMASK, r3
}
 800ae2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae30:	f3ef 8310 	mrs	r3, PRIMASK
 800ae34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae38:	647b      	str	r3, [r7, #68]	; 0x44
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae40:	f383 8810 	msr	PRIMASK, r3
}
 800ae44:	46c0      	nop			; (mov r8, r8)
 800ae46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689a      	ldr	r2, [r3, #8]
 800ae4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2101      	movs	r1, #1
 800ae52:	438a      	bics	r2, r1
 800ae54:	609a      	str	r2, [r3, #8]
 800ae56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae58:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5c:	f383 8810 	msr	PRIMASK, r3
}
 800ae60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae62:	f3ef 8310 	mrs	r3, PRIMASK
 800ae66:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae6a:	643b      	str	r3, [r7, #64]	; 0x40
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae72:	f383 8810 	msr	PRIMASK, r3
}
 800ae76:	46c0      	nop			; (mov r8, r8)
 800ae78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	689a      	ldr	r2, [r3, #8]
 800ae7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2140      	movs	r1, #64	; 0x40
 800ae84:	438a      	bics	r2, r1
 800ae86:	609a      	str	r2, [r3, #8]
 800ae88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae8a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8e:	f383 8810 	msr	PRIMASK, r3
}
 800ae92:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae96:	2288      	movs	r2, #136	; 0x88
 800ae98:	2120      	movs	r1, #32
 800ae9a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d118      	bne.n	800aed6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aea4:	f3ef 8310 	mrs	r3, PRIMASK
 800aea8:	60fb      	str	r3, [r7, #12]
  return(result);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeae:	2301      	movs	r3, #1
 800aeb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	f383 8810 	msr	PRIMASK, r3
}
 800aeb8:	46c0      	nop			; (mov r8, r8)
 800aeba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2110      	movs	r1, #16
 800aec6:	438a      	bics	r2, r1
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f383 8810 	msr	PRIMASK, r3
}
 800aed4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d108      	bne.n	800aef0 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aee0:	225c      	movs	r2, #92	; 0x5c
 800aee2:	5a9a      	ldrh	r2, [r3, r2]
 800aee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aee6:	0011      	movs	r1, r2
 800aee8:	0018      	movs	r0, r3
 800aeea:	f7ff f8db 	bl	800a0a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aeee:	e003      	b.n	800aef8 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800aef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aef2:	0018      	movs	r0, r3
 800aef4:	f7f7 fa88 	bl	8002408 <HAL_UART_RxCpltCallback>
}
 800aef8:	46c0      	nop			; (mov r8, r8)
 800aefa:	46bd      	mov	sp, r7
 800aefc:	b014      	add	sp, #80	; 0x50
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	fffffeff 	.word	0xfffffeff

0800af04 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af10:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af16:	2b01      	cmp	r3, #1
 800af18:	d10a      	bne.n	800af30 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	225c      	movs	r2, #92	; 0x5c
 800af1e:	5a9b      	ldrh	r3, [r3, r2]
 800af20:	085b      	lsrs	r3, r3, #1
 800af22:	b29a      	uxth	r2, r3
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	0011      	movs	r1, r2
 800af28:	0018      	movs	r0, r3
 800af2a:	f7ff f8bb 	bl	800a0a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af2e:	e003      	b.n	800af38 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	0018      	movs	r0, r3
 800af34:	f7ff f89e 	bl	800a074 <HAL_UART_RxHalfCpltCallback>
}
 800af38:	46c0      	nop			; (mov r8, r8)
 800af3a:	46bd      	mov	sp, r7
 800af3c:	b004      	add	sp, #16
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2284      	movs	r2, #132	; 0x84
 800af52:	589b      	ldr	r3, [r3, r2]
 800af54:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2288      	movs	r2, #136	; 0x88
 800af5a:	589b      	ldr	r3, [r3, r2]
 800af5c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	2280      	movs	r2, #128	; 0x80
 800af66:	4013      	ands	r3, r2
 800af68:	2b80      	cmp	r3, #128	; 0x80
 800af6a:	d10a      	bne.n	800af82 <UART_DMAError+0x42>
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	2b21      	cmp	r3, #33	; 0x21
 800af70:	d107      	bne.n	800af82 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	2256      	movs	r2, #86	; 0x56
 800af76:	2100      	movs	r1, #0
 800af78:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	0018      	movs	r0, r3
 800af7e:	f7ff fe87 	bl	800ac90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	2240      	movs	r2, #64	; 0x40
 800af8a:	4013      	ands	r3, r2
 800af8c:	2b40      	cmp	r3, #64	; 0x40
 800af8e:	d10a      	bne.n	800afa6 <UART_DMAError+0x66>
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2b22      	cmp	r3, #34	; 0x22
 800af94:	d107      	bne.n	800afa6 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	225e      	movs	r2, #94	; 0x5e
 800af9a:	2100      	movs	r1, #0
 800af9c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	0018      	movs	r0, r3
 800afa2:	f7ff feb5 	bl	800ad10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	228c      	movs	r2, #140	; 0x8c
 800afaa:	589b      	ldr	r3, [r3, r2]
 800afac:	2210      	movs	r2, #16
 800afae:	431a      	orrs	r2, r3
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	218c      	movs	r1, #140	; 0x8c
 800afb4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	0018      	movs	r0, r3
 800afba:	f7ff f863 	bl	800a084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afbe:	46c0      	nop			; (mov r8, r8)
 800afc0:	46bd      	mov	sp, r7
 800afc2:	b006      	add	sp, #24
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	225e      	movs	r2, #94	; 0x5e
 800afd8:	2100      	movs	r1, #0
 800afda:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2256      	movs	r2, #86	; 0x56
 800afe0:	2100      	movs	r1, #0
 800afe2:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	0018      	movs	r0, r3
 800afe8:	f7ff f84c 	bl	800a084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afec:	46c0      	nop			; (mov r8, r8)
 800afee:	46bd      	mov	sp, r7
 800aff0:	b004      	add	sp, #16
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b000:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b006:	2200      	movs	r2, #0
 800b008:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d004      	beq.n	800b01c <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d12d      	bne.n	800b078 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2256      	movs	r2, #86	; 0x56
 800b020:	2100      	movs	r1, #0
 800b022:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	225e      	movs	r2, #94	; 0x5e
 800b028:	2100      	movs	r1, #0
 800b02a:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	228c      	movs	r2, #140	; 0x8c
 800b030:	2100      	movs	r1, #0
 800b032:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	220f      	movs	r2, #15
 800b03a:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b040:	2380      	movs	r3, #128	; 0x80
 800b042:	059b      	lsls	r3, r3, #22
 800b044:	429a      	cmp	r2, r3
 800b046:	d107      	bne.n	800b058 <UART_DMATxAbortCallback+0x64>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	699a      	ldr	r2, [r3, #24]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2110      	movs	r1, #16
 800b054:	430a      	orrs	r2, r1
 800b056:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2284      	movs	r2, #132	; 0x84
 800b05c:	2120      	movs	r1, #32
 800b05e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2288      	movs	r2, #136	; 0x88
 800b064:	2120      	movs	r1, #32
 800b066:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	0018      	movs	r0, r3
 800b072:	f7ff f80f 	bl	800a094 <HAL_UART_AbortCpltCallback>
 800b076:	e000      	b.n	800b07a <UART_DMATxAbortCallback+0x86>
      return;
 800b078:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b07a:	46bd      	mov	sp, r7
 800b07c:	b004      	add	sp, #16
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08c:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b092:	2200      	movs	r2, #0
 800b094:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d004      	beq.n	800b0a8 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d127      	bne.n	800b0f8 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2256      	movs	r2, #86	; 0x56
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	225e      	movs	r2, #94	; 0x5e
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	228c      	movs	r2, #140	; 0x8c
 800b0bc:	2100      	movs	r1, #0
 800b0be:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	220f      	movs	r2, #15
 800b0c6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	699a      	ldr	r2, [r3, #24]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2108      	movs	r1, #8
 800b0d4:	430a      	orrs	r2, r1
 800b0d6:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2284      	movs	r2, #132	; 0x84
 800b0dc:	2120      	movs	r1, #32
 800b0de:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2288      	movs	r2, #136	; 0x88
 800b0e4:	2120      	movs	r1, #32
 800b0e6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	0018      	movs	r0, r3
 800b0f2:	f7fe ffcf 	bl	800a094 <HAL_UART_AbortCpltCallback>
 800b0f6:	e000      	b.n	800b0fa <UART_DMARxAbortCallback+0x7a>
      return;
 800b0f8:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	b004      	add	sp, #16
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b08a      	sub	sp, #40	; 0x28
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2284      	movs	r2, #132	; 0x84
 800b10c:	589b      	ldr	r3, [r3, r2]
 800b10e:	2b21      	cmp	r3, #33	; 0x21
 800b110:	d14c      	bne.n	800b1ac <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2256      	movs	r2, #86	; 0x56
 800b116:	5a9b      	ldrh	r3, [r3, r2]
 800b118:	b29b      	uxth	r3, r3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d132      	bne.n	800b184 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b11e:	f3ef 8310 	mrs	r3, PRIMASK
 800b122:	60bb      	str	r3, [r7, #8]
  return(result);
 800b124:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b126:	627b      	str	r3, [r7, #36]	; 0x24
 800b128:	2301      	movs	r3, #1
 800b12a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f383 8810 	msr	PRIMASK, r3
}
 800b132:	46c0      	nop			; (mov r8, r8)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2180      	movs	r1, #128	; 0x80
 800b140:	438a      	bics	r2, r1
 800b142:	601a      	str	r2, [r3, #0]
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	f383 8810 	msr	PRIMASK, r3
}
 800b14e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b150:	f3ef 8310 	mrs	r3, PRIMASK
 800b154:	617b      	str	r3, [r7, #20]
  return(result);
 800b156:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b158:	623b      	str	r3, [r7, #32]
 800b15a:	2301      	movs	r3, #1
 800b15c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	f383 8810 	msr	PRIMASK, r3
}
 800b164:	46c0      	nop			; (mov r8, r8)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2140      	movs	r1, #64	; 0x40
 800b172:	430a      	orrs	r2, r1
 800b174:	601a      	str	r2, [r3, #0]
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	f383 8810 	msr	PRIMASK, r3
}
 800b180:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b182:	e013      	b.n	800b1ac <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b188:	781a      	ldrb	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b194:	1c5a      	adds	r2, r3, #1
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2256      	movs	r2, #86	; 0x56
 800b19e:	5a9b      	ldrh	r3, [r3, r2]
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	b299      	uxth	r1, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2256      	movs	r2, #86	; 0x56
 800b1aa:	5299      	strh	r1, [r3, r2]
}
 800b1ac:	46c0      	nop			; (mov r8, r8)
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	b00a      	add	sp, #40	; 0x28
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b08c      	sub	sp, #48	; 0x30
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2284      	movs	r2, #132	; 0x84
 800b1c0:	589b      	ldr	r3, [r3, r2]
 800b1c2:	2b21      	cmp	r3, #33	; 0x21
 800b1c4:	d151      	bne.n	800b26a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2256      	movs	r2, #86	; 0x56
 800b1ca:	5a9b      	ldrh	r3, [r3, r2]
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d132      	bne.n	800b238 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1d2:	f3ef 8310 	mrs	r3, PRIMASK
 800b1d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b1da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1dc:	2301      	movs	r3, #1
 800b1de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	f383 8810 	msr	PRIMASK, r3
}
 800b1e6:	46c0      	nop			; (mov r8, r8)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2180      	movs	r1, #128	; 0x80
 800b1f4:	438a      	bics	r2, r1
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	f383 8810 	msr	PRIMASK, r3
}
 800b202:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b204:	f3ef 8310 	mrs	r3, PRIMASK
 800b208:	61bb      	str	r3, [r7, #24]
  return(result);
 800b20a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b20c:	627b      	str	r3, [r7, #36]	; 0x24
 800b20e:	2301      	movs	r3, #1
 800b210:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	f383 8810 	msr	PRIMASK, r3
}
 800b218:	46c0      	nop			; (mov r8, r8)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2140      	movs	r1, #64	; 0x40
 800b226:	430a      	orrs	r2, r1
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	f383 8810 	msr	PRIMASK, r3
}
 800b234:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b236:	e018      	b.n	800b26a <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b23c:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	001a      	movs	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	05d2      	lsls	r2, r2, #23
 800b24a:	0dd2      	lsrs	r2, r2, #23
 800b24c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b252:	1c9a      	adds	r2, r3, #2
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2256      	movs	r2, #86	; 0x56
 800b25c:	5a9b      	ldrh	r3, [r3, r2]
 800b25e:	b29b      	uxth	r3, r3
 800b260:	3b01      	subs	r3, #1
 800b262:	b299      	uxth	r1, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2256      	movs	r2, #86	; 0x56
 800b268:	5299      	strh	r1, [r3, r2]
}
 800b26a:	46c0      	nop			; (mov r8, r8)
 800b26c:	46bd      	mov	sp, r7
 800b26e:	b00c      	add	sp, #48	; 0x30
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08c      	sub	sp, #48	; 0x30
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2284      	movs	r2, #132	; 0x84
 800b280:	589b      	ldr	r3, [r3, r2]
 800b282:	2b21      	cmp	r3, #33	; 0x21
 800b284:	d165      	bne.n	800b352 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b286:	232e      	movs	r3, #46	; 0x2e
 800b288:	18fb      	adds	r3, r7, r3
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	216a      	movs	r1, #106	; 0x6a
 800b28e:	5a52      	ldrh	r2, [r2, r1]
 800b290:	801a      	strh	r2, [r3, #0]
 800b292:	e059      	b.n	800b348 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2256      	movs	r2, #86	; 0x56
 800b298:	5a9b      	ldrh	r3, [r3, r2]
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d133      	bne.n	800b308 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2a0:	f3ef 8310 	mrs	r3, PRIMASK
 800b2a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b2a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	f383 8810 	msr	PRIMASK, r3
}
 800b2b4:	46c0      	nop			; (mov r8, r8)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	689a      	ldr	r2, [r3, #8]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4926      	ldr	r1, [pc, #152]	; (800b35c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800b2c2:	400a      	ands	r2, r1
 800b2c4:	609a      	str	r2, [r3, #8]
 800b2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f383 8810 	msr	PRIMASK, r3
}
 800b2d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2d2:	f3ef 8310 	mrs	r3, PRIMASK
 800b2d6:	61bb      	str	r3, [r7, #24]
  return(result);
 800b2d8:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2da:	627b      	str	r3, [r7, #36]	; 0x24
 800b2dc:	2301      	movs	r3, #1
 800b2de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	f383 8810 	msr	PRIMASK, r3
}
 800b2e6:	46c0      	nop			; (mov r8, r8)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2140      	movs	r1, #64	; 0x40
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	601a      	str	r2, [r3, #0]
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	f383 8810 	msr	PRIMASK, r3
}
 800b302:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800b304:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800b306:	e024      	b.n	800b352 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	69db      	ldr	r3, [r3, #28]
 800b30e:	2280      	movs	r2, #128	; 0x80
 800b310:	4013      	ands	r3, r2
 800b312:	d013      	beq.n	800b33c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b318:	781a      	ldrb	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b324:	1c5a      	adds	r2, r3, #1
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2256      	movs	r2, #86	; 0x56
 800b32e:	5a9b      	ldrh	r3, [r3, r2]
 800b330:	b29b      	uxth	r3, r3
 800b332:	3b01      	subs	r3, #1
 800b334:	b299      	uxth	r1, r3
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2256      	movs	r2, #86	; 0x56
 800b33a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b33c:	212e      	movs	r1, #46	; 0x2e
 800b33e:	187b      	adds	r3, r7, r1
 800b340:	881a      	ldrh	r2, [r3, #0]
 800b342:	187b      	adds	r3, r7, r1
 800b344:	3a01      	subs	r2, #1
 800b346:	801a      	strh	r2, [r3, #0]
 800b348:	232e      	movs	r3, #46	; 0x2e
 800b34a:	18fb      	adds	r3, r7, r3
 800b34c:	881b      	ldrh	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1a0      	bne.n	800b294 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800b352:	46c0      	nop			; (mov r8, r8)
 800b354:	46bd      	mov	sp, r7
 800b356:	b00c      	add	sp, #48	; 0x30
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	46c0      	nop			; (mov r8, r8)
 800b35c:	ff7fffff 	.word	0xff7fffff

0800b360 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b08c      	sub	sp, #48	; 0x30
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2284      	movs	r2, #132	; 0x84
 800b36c:	589b      	ldr	r3, [r3, r2]
 800b36e:	2b21      	cmp	r3, #33	; 0x21
 800b370:	d16a      	bne.n	800b448 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b372:	232e      	movs	r3, #46	; 0x2e
 800b374:	18fb      	adds	r3, r7, r3
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	216a      	movs	r1, #106	; 0x6a
 800b37a:	5a52      	ldrh	r2, [r2, r1]
 800b37c:	801a      	strh	r2, [r3, #0]
 800b37e:	e05e      	b.n	800b43e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2256      	movs	r2, #86	; 0x56
 800b384:	5a9b      	ldrh	r3, [r3, r2]
 800b386:	b29b      	uxth	r3, r3
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d133      	bne.n	800b3f4 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b38c:	f3ef 8310 	mrs	r3, PRIMASK
 800b390:	60bb      	str	r3, [r7, #8]
  return(result);
 800b392:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b394:	627b      	str	r3, [r7, #36]	; 0x24
 800b396:	2301      	movs	r3, #1
 800b398:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f383 8810 	msr	PRIMASK, r3
}
 800b3a0:	46c0      	nop			; (mov r8, r8)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	689a      	ldr	r2, [r3, #8]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4928      	ldr	r1, [pc, #160]	; (800b450 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800b3ae:	400a      	ands	r2, r1
 800b3b0:	609a      	str	r2, [r3, #8]
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	f383 8810 	msr	PRIMASK, r3
}
 800b3bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3be:	f3ef 8310 	mrs	r3, PRIMASK
 800b3c2:	617b      	str	r3, [r7, #20]
  return(result);
 800b3c4:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3c6:	623b      	str	r3, [r7, #32]
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	f383 8810 	msr	PRIMASK, r3
}
 800b3d2:	46c0      	nop			; (mov r8, r8)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2140      	movs	r1, #64	; 0x40
 800b3e0:	430a      	orrs	r2, r1
 800b3e2:	601a      	str	r2, [r3, #0]
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
 800b3e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	f383 8810 	msr	PRIMASK, r3
}
 800b3ee:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800b3f0:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800b3f2:	e029      	b.n	800b448 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	69db      	ldr	r3, [r3, #28]
 800b3fa:	2280      	movs	r2, #128	; 0x80
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	d018      	beq.n	800b432 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b404:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b408:	881b      	ldrh	r3, [r3, #0]
 800b40a:	001a      	movs	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	05d2      	lsls	r2, r2, #23
 800b412:	0dd2      	lsrs	r2, r2, #23
 800b414:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b41a:	1c9a      	adds	r2, r3, #2
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2256      	movs	r2, #86	; 0x56
 800b424:	5a9b      	ldrh	r3, [r3, r2]
 800b426:	b29b      	uxth	r3, r3
 800b428:	3b01      	subs	r3, #1
 800b42a:	b299      	uxth	r1, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2256      	movs	r2, #86	; 0x56
 800b430:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b432:	212e      	movs	r1, #46	; 0x2e
 800b434:	187b      	adds	r3, r7, r1
 800b436:	881a      	ldrh	r2, [r3, #0]
 800b438:	187b      	adds	r3, r7, r1
 800b43a:	3a01      	subs	r2, #1
 800b43c:	801a      	strh	r2, [r3, #0]
 800b43e:	232e      	movs	r3, #46	; 0x2e
 800b440:	18fb      	adds	r3, r7, r3
 800b442:	881b      	ldrh	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d19b      	bne.n	800b380 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800b448:	46c0      	nop			; (mov r8, r8)
 800b44a:	46bd      	mov	sp, r7
 800b44c:	b00c      	add	sp, #48	; 0x30
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	ff7fffff 	.word	0xff7fffff

0800b454 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b45c:	f3ef 8310 	mrs	r3, PRIMASK
 800b460:	60bb      	str	r3, [r7, #8]
  return(result);
 800b462:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b464:	617b      	str	r3, [r7, #20]
 800b466:	2301      	movs	r3, #1
 800b468:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f383 8810 	msr	PRIMASK, r3
}
 800b470:	46c0      	nop			; (mov r8, r8)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2140      	movs	r1, #64	; 0x40
 800b47e:	438a      	bics	r2, r1
 800b480:	601a      	str	r2, [r3, #0]
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	f383 8810 	msr	PRIMASK, r3
}
 800b48c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2284      	movs	r2, #132	; 0x84
 800b492:	2120      	movs	r1, #32
 800b494:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	0018      	movs	r0, r3
 800b4a0:	f7f7 f800 	bl	80024a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4a4:	46c0      	nop			; (mov r8, r8)
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	b006      	add	sp, #24
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b4b4:	46c0      	nop			; (mov r8, r8)
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	b002      	add	sp, #8
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b4c4:	46c0      	nop			; (mov r8, r8)
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	b002      	add	sp, #8
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b4d4:	46c0      	nop			; (mov r8, r8)
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	b002      	add	sp, #8
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2280      	movs	r2, #128	; 0x80
 800b4e8:	5c9b      	ldrb	r3, [r3, r2]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d101      	bne.n	800b4f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b4ee:	2302      	movs	r3, #2
 800b4f0:	e027      	b.n	800b542 <HAL_UARTEx_DisableFifoMode+0x66>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2280      	movs	r2, #128	; 0x80
 800b4f6:	2101      	movs	r1, #1
 800b4f8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2284      	movs	r2, #132	; 0x84
 800b4fe:	2124      	movs	r1, #36	; 0x24
 800b500:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2101      	movs	r1, #1
 800b516:	438a      	bics	r2, r1
 800b518:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	4a0b      	ldr	r2, [pc, #44]	; (800b54c <HAL_UARTEx_DisableFifoMode+0x70>)
 800b51e:	4013      	ands	r3, r2
 800b520:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2284      	movs	r2, #132	; 0x84
 800b534:	2120      	movs	r1, #32
 800b536:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2280      	movs	r2, #128	; 0x80
 800b53c:	2100      	movs	r1, #0
 800b53e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	0018      	movs	r0, r3
 800b544:	46bd      	mov	sp, r7
 800b546:	b004      	add	sp, #16
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	46c0      	nop			; (mov r8, r8)
 800b54c:	dfffffff 	.word	0xdfffffff

0800b550 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2280      	movs	r2, #128	; 0x80
 800b55e:	5c9b      	ldrb	r3, [r3, r2]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d101      	bne.n	800b568 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b564:	2302      	movs	r3, #2
 800b566:	e02e      	b.n	800b5c6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2280      	movs	r2, #128	; 0x80
 800b56c:	2101      	movs	r1, #1
 800b56e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2284      	movs	r2, #132	; 0x84
 800b574:	2124      	movs	r1, #36	; 0x24
 800b576:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2101      	movs	r1, #1
 800b58c:	438a      	bics	r2, r1
 800b58e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	00db      	lsls	r3, r3, #3
 800b598:	08d9      	lsrs	r1, r3, #3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	683a      	ldr	r2, [r7, #0]
 800b5a0:	430a      	orrs	r2, r1
 800b5a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	0018      	movs	r0, r3
 800b5a8:	f000 f854 	bl	800b654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2284      	movs	r2, #132	; 0x84
 800b5b8:	2120      	movs	r1, #32
 800b5ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2280      	movs	r2, #128	; 0x80
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	0018      	movs	r0, r3
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	b004      	add	sp, #16
 800b5cc:	bd80      	pop	{r7, pc}
	...

0800b5d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2280      	movs	r2, #128	; 0x80
 800b5de:	5c9b      	ldrb	r3, [r3, r2]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d101      	bne.n	800b5e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5e4:	2302      	movs	r3, #2
 800b5e6:	e02f      	b.n	800b648 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2280      	movs	r2, #128	; 0x80
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2284      	movs	r2, #132	; 0x84
 800b5f4:	2124      	movs	r1, #36	; 0x24
 800b5f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2101      	movs	r1, #1
 800b60c:	438a      	bics	r2, r1
 800b60e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	4a0e      	ldr	r2, [pc, #56]	; (800b650 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800b618:	4013      	ands	r3, r2
 800b61a:	0019      	movs	r1, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	430a      	orrs	r2, r1
 800b624:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	0018      	movs	r0, r3
 800b62a:	f000 f813 	bl	800b654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2284      	movs	r2, #132	; 0x84
 800b63a:	2120      	movs	r1, #32
 800b63c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2280      	movs	r2, #128	; 0x80
 800b642:	2100      	movs	r1, #0
 800b644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	0018      	movs	r0, r3
 800b64a:	46bd      	mov	sp, r7
 800b64c:	b004      	add	sp, #16
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	f1ffffff 	.word	0xf1ffffff

0800b654 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b660:	2b00      	cmp	r3, #0
 800b662:	d108      	bne.n	800b676 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	226a      	movs	r2, #106	; 0x6a
 800b668:	2101      	movs	r1, #1
 800b66a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2268      	movs	r2, #104	; 0x68
 800b670:	2101      	movs	r1, #1
 800b672:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b674:	e043      	b.n	800b6fe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b676:	260f      	movs	r6, #15
 800b678:	19bb      	adds	r3, r7, r6
 800b67a:	2208      	movs	r2, #8
 800b67c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b67e:	200e      	movs	r0, #14
 800b680:	183b      	adds	r3, r7, r0
 800b682:	2208      	movs	r2, #8
 800b684:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	0e5b      	lsrs	r3, r3, #25
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	240d      	movs	r4, #13
 800b692:	193b      	adds	r3, r7, r4
 800b694:	2107      	movs	r1, #7
 800b696:	400a      	ands	r2, r1
 800b698:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	0f5b      	lsrs	r3, r3, #29
 800b6a2:	b2da      	uxtb	r2, r3
 800b6a4:	250c      	movs	r5, #12
 800b6a6:	197b      	adds	r3, r7, r5
 800b6a8:	2107      	movs	r1, #7
 800b6aa:	400a      	ands	r2, r1
 800b6ac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6ae:	183b      	adds	r3, r7, r0
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	197a      	adds	r2, r7, r5
 800b6b4:	7812      	ldrb	r2, [r2, #0]
 800b6b6:	4914      	ldr	r1, [pc, #80]	; (800b708 <UARTEx_SetNbDataToProcess+0xb4>)
 800b6b8:	5c8a      	ldrb	r2, [r1, r2]
 800b6ba:	435a      	muls	r2, r3
 800b6bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6be:	197b      	adds	r3, r7, r5
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	4a12      	ldr	r2, [pc, #72]	; (800b70c <UARTEx_SetNbDataToProcess+0xb8>)
 800b6c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6c6:	0019      	movs	r1, r3
 800b6c8:	f7f4 fdc2 	bl	8000250 <__divsi3>
 800b6cc:	0003      	movs	r3, r0
 800b6ce:	b299      	uxth	r1, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	226a      	movs	r2, #106	; 0x6a
 800b6d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6d6:	19bb      	adds	r3, r7, r6
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	193a      	adds	r2, r7, r4
 800b6dc:	7812      	ldrb	r2, [r2, #0]
 800b6de:	490a      	ldr	r1, [pc, #40]	; (800b708 <UARTEx_SetNbDataToProcess+0xb4>)
 800b6e0:	5c8a      	ldrb	r2, [r1, r2]
 800b6e2:	435a      	muls	r2, r3
 800b6e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800b6e6:	193b      	adds	r3, r7, r4
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	4a08      	ldr	r2, [pc, #32]	; (800b70c <UARTEx_SetNbDataToProcess+0xb8>)
 800b6ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6ee:	0019      	movs	r1, r3
 800b6f0:	f7f4 fdae 	bl	8000250 <__divsi3>
 800b6f4:	0003      	movs	r3, r0
 800b6f6:	b299      	uxth	r1, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2268      	movs	r2, #104	; 0x68
 800b6fc:	5299      	strh	r1, [r3, r2]
}
 800b6fe:	46c0      	nop			; (mov r8, r8)
 800b700:	46bd      	mov	sp, r7
 800b702:	b005      	add	sp, #20
 800b704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b706:	46c0      	nop			; (mov r8, r8)
 800b708:	0800e790 	.word	0x0800e790
 800b70c:	0800e798 	.word	0x0800e798

0800b710 <__errno>:
 800b710:	4b01      	ldr	r3, [pc, #4]	; (800b718 <__errno+0x8>)
 800b712:	6818      	ldr	r0, [r3, #0]
 800b714:	4770      	bx	lr
 800b716:	46c0      	nop			; (mov r8, r8)
 800b718:	2000002c 	.word	0x2000002c

0800b71c <__libc_init_array>:
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	2600      	movs	r6, #0
 800b720:	4d0c      	ldr	r5, [pc, #48]	; (800b754 <__libc_init_array+0x38>)
 800b722:	4c0d      	ldr	r4, [pc, #52]	; (800b758 <__libc_init_array+0x3c>)
 800b724:	1b64      	subs	r4, r4, r5
 800b726:	10a4      	asrs	r4, r4, #2
 800b728:	42a6      	cmp	r6, r4
 800b72a:	d109      	bne.n	800b740 <__libc_init_array+0x24>
 800b72c:	2600      	movs	r6, #0
 800b72e:	f002 ff6f 	bl	800e610 <_init>
 800b732:	4d0a      	ldr	r5, [pc, #40]	; (800b75c <__libc_init_array+0x40>)
 800b734:	4c0a      	ldr	r4, [pc, #40]	; (800b760 <__libc_init_array+0x44>)
 800b736:	1b64      	subs	r4, r4, r5
 800b738:	10a4      	asrs	r4, r4, #2
 800b73a:	42a6      	cmp	r6, r4
 800b73c:	d105      	bne.n	800b74a <__libc_init_array+0x2e>
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	00b3      	lsls	r3, r6, #2
 800b742:	58eb      	ldr	r3, [r5, r3]
 800b744:	4798      	blx	r3
 800b746:	3601      	adds	r6, #1
 800b748:	e7ee      	b.n	800b728 <__libc_init_array+0xc>
 800b74a:	00b3      	lsls	r3, r6, #2
 800b74c:	58eb      	ldr	r3, [r5, r3]
 800b74e:	4798      	blx	r3
 800b750:	3601      	adds	r6, #1
 800b752:	e7f2      	b.n	800b73a <__libc_init_array+0x1e>
 800b754:	0800eb90 	.word	0x0800eb90
 800b758:	0800eb90 	.word	0x0800eb90
 800b75c:	0800eb90 	.word	0x0800eb90
 800b760:	0800eb94 	.word	0x0800eb94

0800b764 <malloc>:
 800b764:	b510      	push	{r4, lr}
 800b766:	4b03      	ldr	r3, [pc, #12]	; (800b774 <malloc+0x10>)
 800b768:	0001      	movs	r1, r0
 800b76a:	6818      	ldr	r0, [r3, #0]
 800b76c:	f000 f860 	bl	800b830 <_malloc_r>
 800b770:	bd10      	pop	{r4, pc}
 800b772:	46c0      	nop			; (mov r8, r8)
 800b774:	2000002c 	.word	0x2000002c

0800b778 <memcpy>:
 800b778:	2300      	movs	r3, #0
 800b77a:	b510      	push	{r4, lr}
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d100      	bne.n	800b782 <memcpy+0xa>
 800b780:	bd10      	pop	{r4, pc}
 800b782:	5ccc      	ldrb	r4, [r1, r3]
 800b784:	54c4      	strb	r4, [r0, r3]
 800b786:	3301      	adds	r3, #1
 800b788:	e7f8      	b.n	800b77c <memcpy+0x4>

0800b78a <memset>:
 800b78a:	0003      	movs	r3, r0
 800b78c:	1882      	adds	r2, r0, r2
 800b78e:	4293      	cmp	r3, r2
 800b790:	d100      	bne.n	800b794 <memset+0xa>
 800b792:	4770      	bx	lr
 800b794:	7019      	strb	r1, [r3, #0]
 800b796:	3301      	adds	r3, #1
 800b798:	e7f9      	b.n	800b78e <memset+0x4>
	...

0800b79c <_free_r>:
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	0005      	movs	r5, r0
 800b7a0:	2900      	cmp	r1, #0
 800b7a2:	d010      	beq.n	800b7c6 <_free_r+0x2a>
 800b7a4:	1f0c      	subs	r4, r1, #4
 800b7a6:	6823      	ldr	r3, [r4, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	da00      	bge.n	800b7ae <_free_r+0x12>
 800b7ac:	18e4      	adds	r4, r4, r3
 800b7ae:	0028      	movs	r0, r5
 800b7b0:	f001 fc42 	bl	800d038 <__malloc_lock>
 800b7b4:	4a1d      	ldr	r2, [pc, #116]	; (800b82c <_free_r+0x90>)
 800b7b6:	6813      	ldr	r3, [r2, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d105      	bne.n	800b7c8 <_free_r+0x2c>
 800b7bc:	6063      	str	r3, [r4, #4]
 800b7be:	6014      	str	r4, [r2, #0]
 800b7c0:	0028      	movs	r0, r5
 800b7c2:	f001 fc41 	bl	800d048 <__malloc_unlock>
 800b7c6:	bd70      	pop	{r4, r5, r6, pc}
 800b7c8:	42a3      	cmp	r3, r4
 800b7ca:	d908      	bls.n	800b7de <_free_r+0x42>
 800b7cc:	6821      	ldr	r1, [r4, #0]
 800b7ce:	1860      	adds	r0, r4, r1
 800b7d0:	4283      	cmp	r3, r0
 800b7d2:	d1f3      	bne.n	800b7bc <_free_r+0x20>
 800b7d4:	6818      	ldr	r0, [r3, #0]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	1841      	adds	r1, r0, r1
 800b7da:	6021      	str	r1, [r4, #0]
 800b7dc:	e7ee      	b.n	800b7bc <_free_r+0x20>
 800b7de:	001a      	movs	r2, r3
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <_free_r+0x4e>
 800b7e6:	42a3      	cmp	r3, r4
 800b7e8:	d9f9      	bls.n	800b7de <_free_r+0x42>
 800b7ea:	6811      	ldr	r1, [r2, #0]
 800b7ec:	1850      	adds	r0, r2, r1
 800b7ee:	42a0      	cmp	r0, r4
 800b7f0:	d10b      	bne.n	800b80a <_free_r+0x6e>
 800b7f2:	6820      	ldr	r0, [r4, #0]
 800b7f4:	1809      	adds	r1, r1, r0
 800b7f6:	1850      	adds	r0, r2, r1
 800b7f8:	6011      	str	r1, [r2, #0]
 800b7fa:	4283      	cmp	r3, r0
 800b7fc:	d1e0      	bne.n	800b7c0 <_free_r+0x24>
 800b7fe:	6818      	ldr	r0, [r3, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	1841      	adds	r1, r0, r1
 800b804:	6011      	str	r1, [r2, #0]
 800b806:	6053      	str	r3, [r2, #4]
 800b808:	e7da      	b.n	800b7c0 <_free_r+0x24>
 800b80a:	42a0      	cmp	r0, r4
 800b80c:	d902      	bls.n	800b814 <_free_r+0x78>
 800b80e:	230c      	movs	r3, #12
 800b810:	602b      	str	r3, [r5, #0]
 800b812:	e7d5      	b.n	800b7c0 <_free_r+0x24>
 800b814:	6821      	ldr	r1, [r4, #0]
 800b816:	1860      	adds	r0, r4, r1
 800b818:	4283      	cmp	r3, r0
 800b81a:	d103      	bne.n	800b824 <_free_r+0x88>
 800b81c:	6818      	ldr	r0, [r3, #0]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	1841      	adds	r1, r0, r1
 800b822:	6021      	str	r1, [r4, #0]
 800b824:	6063      	str	r3, [r4, #4]
 800b826:	6054      	str	r4, [r2, #4]
 800b828:	e7ca      	b.n	800b7c0 <_free_r+0x24>
 800b82a:	46c0      	nop			; (mov r8, r8)
 800b82c:	20000220 	.word	0x20000220

0800b830 <_malloc_r>:
 800b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b832:	2303      	movs	r3, #3
 800b834:	1ccd      	adds	r5, r1, #3
 800b836:	439d      	bics	r5, r3
 800b838:	3508      	adds	r5, #8
 800b83a:	0006      	movs	r6, r0
 800b83c:	2d0c      	cmp	r5, #12
 800b83e:	d21f      	bcs.n	800b880 <_malloc_r+0x50>
 800b840:	250c      	movs	r5, #12
 800b842:	42a9      	cmp	r1, r5
 800b844:	d81e      	bhi.n	800b884 <_malloc_r+0x54>
 800b846:	0030      	movs	r0, r6
 800b848:	f001 fbf6 	bl	800d038 <__malloc_lock>
 800b84c:	4925      	ldr	r1, [pc, #148]	; (800b8e4 <_malloc_r+0xb4>)
 800b84e:	680a      	ldr	r2, [r1, #0]
 800b850:	0014      	movs	r4, r2
 800b852:	2c00      	cmp	r4, #0
 800b854:	d11a      	bne.n	800b88c <_malloc_r+0x5c>
 800b856:	4f24      	ldr	r7, [pc, #144]	; (800b8e8 <_malloc_r+0xb8>)
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d104      	bne.n	800b868 <_malloc_r+0x38>
 800b85e:	0021      	movs	r1, r4
 800b860:	0030      	movs	r0, r6
 800b862:	f000 fcbd 	bl	800c1e0 <_sbrk_r>
 800b866:	6038      	str	r0, [r7, #0]
 800b868:	0029      	movs	r1, r5
 800b86a:	0030      	movs	r0, r6
 800b86c:	f000 fcb8 	bl	800c1e0 <_sbrk_r>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d12b      	bne.n	800b8cc <_malloc_r+0x9c>
 800b874:	230c      	movs	r3, #12
 800b876:	0030      	movs	r0, r6
 800b878:	6033      	str	r3, [r6, #0]
 800b87a:	f001 fbe5 	bl	800d048 <__malloc_unlock>
 800b87e:	e003      	b.n	800b888 <_malloc_r+0x58>
 800b880:	2d00      	cmp	r5, #0
 800b882:	dade      	bge.n	800b842 <_malloc_r+0x12>
 800b884:	230c      	movs	r3, #12
 800b886:	6033      	str	r3, [r6, #0]
 800b888:	2000      	movs	r0, #0
 800b88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	1b5b      	subs	r3, r3, r5
 800b890:	d419      	bmi.n	800b8c6 <_malloc_r+0x96>
 800b892:	2b0b      	cmp	r3, #11
 800b894:	d903      	bls.n	800b89e <_malloc_r+0x6e>
 800b896:	6023      	str	r3, [r4, #0]
 800b898:	18e4      	adds	r4, r4, r3
 800b89a:	6025      	str	r5, [r4, #0]
 800b89c:	e003      	b.n	800b8a6 <_malloc_r+0x76>
 800b89e:	6863      	ldr	r3, [r4, #4]
 800b8a0:	42a2      	cmp	r2, r4
 800b8a2:	d10e      	bne.n	800b8c2 <_malloc_r+0x92>
 800b8a4:	600b      	str	r3, [r1, #0]
 800b8a6:	0030      	movs	r0, r6
 800b8a8:	f001 fbce 	bl	800d048 <__malloc_unlock>
 800b8ac:	0020      	movs	r0, r4
 800b8ae:	2207      	movs	r2, #7
 800b8b0:	300b      	adds	r0, #11
 800b8b2:	1d23      	adds	r3, r4, #4
 800b8b4:	4390      	bics	r0, r2
 800b8b6:	1ac2      	subs	r2, r0, r3
 800b8b8:	4298      	cmp	r0, r3
 800b8ba:	d0e6      	beq.n	800b88a <_malloc_r+0x5a>
 800b8bc:	1a1b      	subs	r3, r3, r0
 800b8be:	50a3      	str	r3, [r4, r2]
 800b8c0:	e7e3      	b.n	800b88a <_malloc_r+0x5a>
 800b8c2:	6053      	str	r3, [r2, #4]
 800b8c4:	e7ef      	b.n	800b8a6 <_malloc_r+0x76>
 800b8c6:	0022      	movs	r2, r4
 800b8c8:	6864      	ldr	r4, [r4, #4]
 800b8ca:	e7c2      	b.n	800b852 <_malloc_r+0x22>
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	1cc4      	adds	r4, r0, #3
 800b8d0:	439c      	bics	r4, r3
 800b8d2:	42a0      	cmp	r0, r4
 800b8d4:	d0e1      	beq.n	800b89a <_malloc_r+0x6a>
 800b8d6:	1a21      	subs	r1, r4, r0
 800b8d8:	0030      	movs	r0, r6
 800b8da:	f000 fc81 	bl	800c1e0 <_sbrk_r>
 800b8de:	1c43      	adds	r3, r0, #1
 800b8e0:	d1db      	bne.n	800b89a <_malloc_r+0x6a>
 800b8e2:	e7c7      	b.n	800b874 <_malloc_r+0x44>
 800b8e4:	20000220 	.word	0x20000220
 800b8e8:	20000224 	.word	0x20000224

0800b8ec <__cvt>:
 800b8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ee:	001e      	movs	r6, r3
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	0014      	movs	r4, r2
 800b8f4:	b08b      	sub	sp, #44	; 0x2c
 800b8f6:	429e      	cmp	r6, r3
 800b8f8:	da04      	bge.n	800b904 <__cvt+0x18>
 800b8fa:	2180      	movs	r1, #128	; 0x80
 800b8fc:	0609      	lsls	r1, r1, #24
 800b8fe:	1873      	adds	r3, r6, r1
 800b900:	001e      	movs	r6, r3
 800b902:	232d      	movs	r3, #45	; 0x2d
 800b904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b906:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b908:	7013      	strb	r3, [r2, #0]
 800b90a:	2320      	movs	r3, #32
 800b90c:	2203      	movs	r2, #3
 800b90e:	439f      	bics	r7, r3
 800b910:	2f46      	cmp	r7, #70	; 0x46
 800b912:	d007      	beq.n	800b924 <__cvt+0x38>
 800b914:	003b      	movs	r3, r7
 800b916:	3b45      	subs	r3, #69	; 0x45
 800b918:	4259      	negs	r1, r3
 800b91a:	414b      	adcs	r3, r1
 800b91c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b91e:	3a01      	subs	r2, #1
 800b920:	18cb      	adds	r3, r1, r3
 800b922:	9310      	str	r3, [sp, #64]	; 0x40
 800b924:	ab09      	add	r3, sp, #36	; 0x24
 800b926:	9304      	str	r3, [sp, #16]
 800b928:	ab08      	add	r3, sp, #32
 800b92a:	9303      	str	r3, [sp, #12]
 800b92c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b92e:	9200      	str	r2, [sp, #0]
 800b930:	9302      	str	r3, [sp, #8]
 800b932:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b934:	0022      	movs	r2, r4
 800b936:	9301      	str	r3, [sp, #4]
 800b938:	0033      	movs	r3, r6
 800b93a:	f000 fd2d 	bl	800c398 <_dtoa_r>
 800b93e:	0005      	movs	r5, r0
 800b940:	2f47      	cmp	r7, #71	; 0x47
 800b942:	d102      	bne.n	800b94a <__cvt+0x5e>
 800b944:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b946:	07db      	lsls	r3, r3, #31
 800b948:	d528      	bpl.n	800b99c <__cvt+0xb0>
 800b94a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b94c:	18eb      	adds	r3, r5, r3
 800b94e:	9307      	str	r3, [sp, #28]
 800b950:	2f46      	cmp	r7, #70	; 0x46
 800b952:	d114      	bne.n	800b97e <__cvt+0x92>
 800b954:	782b      	ldrb	r3, [r5, #0]
 800b956:	2b30      	cmp	r3, #48	; 0x30
 800b958:	d10c      	bne.n	800b974 <__cvt+0x88>
 800b95a:	2200      	movs	r2, #0
 800b95c:	2300      	movs	r3, #0
 800b95e:	0020      	movs	r0, r4
 800b960:	0031      	movs	r1, r6
 800b962:	f7f4 fd71 	bl	8000448 <__aeabi_dcmpeq>
 800b966:	2800      	cmp	r0, #0
 800b968:	d104      	bne.n	800b974 <__cvt+0x88>
 800b96a:	2301      	movs	r3, #1
 800b96c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b96e:	1a9b      	subs	r3, r3, r2
 800b970:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b972:	6013      	str	r3, [r2, #0]
 800b974:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b976:	9a07      	ldr	r2, [sp, #28]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	18d3      	adds	r3, r2, r3
 800b97c:	9307      	str	r3, [sp, #28]
 800b97e:	2200      	movs	r2, #0
 800b980:	2300      	movs	r3, #0
 800b982:	0020      	movs	r0, r4
 800b984:	0031      	movs	r1, r6
 800b986:	f7f4 fd5f 	bl	8000448 <__aeabi_dcmpeq>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d001      	beq.n	800b992 <__cvt+0xa6>
 800b98e:	9b07      	ldr	r3, [sp, #28]
 800b990:	9309      	str	r3, [sp, #36]	; 0x24
 800b992:	2230      	movs	r2, #48	; 0x30
 800b994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b996:	9907      	ldr	r1, [sp, #28]
 800b998:	428b      	cmp	r3, r1
 800b99a:	d306      	bcc.n	800b9aa <__cvt+0xbe>
 800b99c:	0028      	movs	r0, r5
 800b99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b9a2:	1b5b      	subs	r3, r3, r5
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	b00b      	add	sp, #44	; 0x2c
 800b9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9aa:	1c59      	adds	r1, r3, #1
 800b9ac:	9109      	str	r1, [sp, #36]	; 0x24
 800b9ae:	701a      	strb	r2, [r3, #0]
 800b9b0:	e7f0      	b.n	800b994 <__cvt+0xa8>

0800b9b2 <__exponent>:
 800b9b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9b4:	1c83      	adds	r3, r0, #2
 800b9b6:	b087      	sub	sp, #28
 800b9b8:	9303      	str	r3, [sp, #12]
 800b9ba:	0005      	movs	r5, r0
 800b9bc:	000c      	movs	r4, r1
 800b9be:	232b      	movs	r3, #43	; 0x2b
 800b9c0:	7002      	strb	r2, [r0, #0]
 800b9c2:	2900      	cmp	r1, #0
 800b9c4:	da01      	bge.n	800b9ca <__exponent+0x18>
 800b9c6:	424c      	negs	r4, r1
 800b9c8:	3302      	adds	r3, #2
 800b9ca:	706b      	strb	r3, [r5, #1]
 800b9cc:	2c09      	cmp	r4, #9
 800b9ce:	dd31      	ble.n	800ba34 <__exponent+0x82>
 800b9d0:	270a      	movs	r7, #10
 800b9d2:	ab04      	add	r3, sp, #16
 800b9d4:	1dde      	adds	r6, r3, #7
 800b9d6:	0020      	movs	r0, r4
 800b9d8:	0039      	movs	r1, r7
 800b9da:	9601      	str	r6, [sp, #4]
 800b9dc:	f7f4 fd1e 	bl	800041c <__aeabi_idivmod>
 800b9e0:	3e01      	subs	r6, #1
 800b9e2:	3130      	adds	r1, #48	; 0x30
 800b9e4:	0020      	movs	r0, r4
 800b9e6:	7031      	strb	r1, [r6, #0]
 800b9e8:	0039      	movs	r1, r7
 800b9ea:	9402      	str	r4, [sp, #8]
 800b9ec:	f7f4 fc30 	bl	8000250 <__divsi3>
 800b9f0:	9b02      	ldr	r3, [sp, #8]
 800b9f2:	0004      	movs	r4, r0
 800b9f4:	2b63      	cmp	r3, #99	; 0x63
 800b9f6:	dcee      	bgt.n	800b9d6 <__exponent+0x24>
 800b9f8:	9b01      	ldr	r3, [sp, #4]
 800b9fa:	3430      	adds	r4, #48	; 0x30
 800b9fc:	1e9a      	subs	r2, r3, #2
 800b9fe:	0013      	movs	r3, r2
 800ba00:	9903      	ldr	r1, [sp, #12]
 800ba02:	7014      	strb	r4, [r2, #0]
 800ba04:	a804      	add	r0, sp, #16
 800ba06:	3007      	adds	r0, #7
 800ba08:	4298      	cmp	r0, r3
 800ba0a:	d80e      	bhi.n	800ba2a <__exponent+0x78>
 800ba0c:	ab04      	add	r3, sp, #16
 800ba0e:	3307      	adds	r3, #7
 800ba10:	2000      	movs	r0, #0
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d804      	bhi.n	800ba20 <__exponent+0x6e>
 800ba16:	ab04      	add	r3, sp, #16
 800ba18:	3009      	adds	r0, #9
 800ba1a:	18c0      	adds	r0, r0, r3
 800ba1c:	9b01      	ldr	r3, [sp, #4]
 800ba1e:	1ac0      	subs	r0, r0, r3
 800ba20:	9b03      	ldr	r3, [sp, #12]
 800ba22:	1818      	adds	r0, r3, r0
 800ba24:	1b40      	subs	r0, r0, r5
 800ba26:	b007      	add	sp, #28
 800ba28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba2a:	7818      	ldrb	r0, [r3, #0]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	7008      	strb	r0, [r1, #0]
 800ba30:	3101      	adds	r1, #1
 800ba32:	e7e7      	b.n	800ba04 <__exponent+0x52>
 800ba34:	2330      	movs	r3, #48	; 0x30
 800ba36:	18e4      	adds	r4, r4, r3
 800ba38:	70ab      	strb	r3, [r5, #2]
 800ba3a:	1d28      	adds	r0, r5, #4
 800ba3c:	70ec      	strb	r4, [r5, #3]
 800ba3e:	e7f1      	b.n	800ba24 <__exponent+0x72>

0800ba40 <_printf_float>:
 800ba40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba42:	b095      	sub	sp, #84	; 0x54
 800ba44:	000c      	movs	r4, r1
 800ba46:	9208      	str	r2, [sp, #32]
 800ba48:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ba4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba4c:	0007      	movs	r7, r0
 800ba4e:	f001 fad1 	bl	800cff4 <_localeconv_r>
 800ba52:	6803      	ldr	r3, [r0, #0]
 800ba54:	0018      	movs	r0, r3
 800ba56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba58:	f7f4 fb54 	bl	8000104 <strlen>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9312      	str	r3, [sp, #72]	; 0x48
 800ba60:	7e23      	ldrb	r3, [r4, #24]
 800ba62:	2207      	movs	r2, #7
 800ba64:	001e      	movs	r6, r3
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	900d      	str	r0, [sp, #52]	; 0x34
 800ba6a:	930c      	str	r3, [sp, #48]	; 0x30
 800ba6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba6e:	682b      	ldr	r3, [r5, #0]
 800ba70:	05c9      	lsls	r1, r1, #23
 800ba72:	d547      	bpl.n	800bb04 <_printf_float+0xc4>
 800ba74:	189b      	adds	r3, r3, r2
 800ba76:	4393      	bics	r3, r2
 800ba78:	001a      	movs	r2, r3
 800ba7a:	3208      	adds	r2, #8
 800ba7c:	602a      	str	r2, [r5, #0]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	64a2      	str	r2, [r4, #72]	; 0x48
 800ba84:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ba86:	2201      	movs	r2, #1
 800ba88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ba8a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800ba8c:	930a      	str	r3, [sp, #40]	; 0x28
 800ba8e:	006b      	lsls	r3, r5, #1
 800ba90:	085b      	lsrs	r3, r3, #1
 800ba92:	930e      	str	r3, [sp, #56]	; 0x38
 800ba94:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ba96:	4ba8      	ldr	r3, [pc, #672]	; (800bd38 <_printf_float+0x2f8>)
 800ba98:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ba9a:	4252      	negs	r2, r2
 800ba9c:	f7f6 fb98 	bl	80021d0 <__aeabi_dcmpun>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d131      	bne.n	800bb08 <_printf_float+0xc8>
 800baa4:	2201      	movs	r2, #1
 800baa6:	4ba4      	ldr	r3, [pc, #656]	; (800bd38 <_printf_float+0x2f8>)
 800baa8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800baaa:	990e      	ldr	r1, [sp, #56]	; 0x38
 800baac:	4252      	negs	r2, r2
 800baae:	f7f4 fcdb 	bl	8000468 <__aeabi_dcmple>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d128      	bne.n	800bb08 <_printf_float+0xc8>
 800bab6:	2200      	movs	r2, #0
 800bab8:	2300      	movs	r3, #0
 800baba:	0029      	movs	r1, r5
 800babc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800babe:	f7f4 fcc9 	bl	8000454 <__aeabi_dcmplt>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d003      	beq.n	800bace <_printf_float+0x8e>
 800bac6:	0023      	movs	r3, r4
 800bac8:	222d      	movs	r2, #45	; 0x2d
 800baca:	3343      	adds	r3, #67	; 0x43
 800bacc:	701a      	strb	r2, [r3, #0]
 800bace:	4d9b      	ldr	r5, [pc, #620]	; (800bd3c <_printf_float+0x2fc>)
 800bad0:	2e47      	cmp	r6, #71	; 0x47
 800bad2:	d900      	bls.n	800bad6 <_printf_float+0x96>
 800bad4:	4d9a      	ldr	r5, [pc, #616]	; (800bd40 <_printf_float+0x300>)
 800bad6:	2303      	movs	r3, #3
 800bad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bada:	6123      	str	r3, [r4, #16]
 800badc:	3301      	adds	r3, #1
 800bade:	439a      	bics	r2, r3
 800bae0:	2300      	movs	r3, #0
 800bae2:	6022      	str	r2, [r4, #0]
 800bae4:	930a      	str	r3, [sp, #40]	; 0x28
 800bae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae8:	0021      	movs	r1, r4
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	0038      	movs	r0, r7
 800baee:	9b08      	ldr	r3, [sp, #32]
 800baf0:	aa13      	add	r2, sp, #76	; 0x4c
 800baf2:	f000 f9f3 	bl	800bedc <_printf_common>
 800baf6:	1c43      	adds	r3, r0, #1
 800baf8:	d000      	beq.n	800bafc <_printf_float+0xbc>
 800bafa:	e09e      	b.n	800bc3a <_printf_float+0x1fa>
 800bafc:	2001      	movs	r0, #1
 800bafe:	4240      	negs	r0, r0
 800bb00:	b015      	add	sp, #84	; 0x54
 800bb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb04:	3307      	adds	r3, #7
 800bb06:	e7b6      	b.n	800ba76 <_printf_float+0x36>
 800bb08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb0a:	002b      	movs	r3, r5
 800bb0c:	0010      	movs	r0, r2
 800bb0e:	0029      	movs	r1, r5
 800bb10:	f7f6 fb5e 	bl	80021d0 <__aeabi_dcmpun>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d00a      	beq.n	800bb2e <_printf_float+0xee>
 800bb18:	2d00      	cmp	r5, #0
 800bb1a:	da03      	bge.n	800bb24 <_printf_float+0xe4>
 800bb1c:	0023      	movs	r3, r4
 800bb1e:	222d      	movs	r2, #45	; 0x2d
 800bb20:	3343      	adds	r3, #67	; 0x43
 800bb22:	701a      	strb	r2, [r3, #0]
 800bb24:	4d87      	ldr	r5, [pc, #540]	; (800bd44 <_printf_float+0x304>)
 800bb26:	2e47      	cmp	r6, #71	; 0x47
 800bb28:	d9d5      	bls.n	800bad6 <_printf_float+0x96>
 800bb2a:	4d87      	ldr	r5, [pc, #540]	; (800bd48 <_printf_float+0x308>)
 800bb2c:	e7d3      	b.n	800bad6 <_printf_float+0x96>
 800bb2e:	2220      	movs	r2, #32
 800bb30:	0031      	movs	r1, r6
 800bb32:	6863      	ldr	r3, [r4, #4]
 800bb34:	4391      	bics	r1, r2
 800bb36:	910e      	str	r1, [sp, #56]	; 0x38
 800bb38:	1c5a      	adds	r2, r3, #1
 800bb3a:	d147      	bne.n	800bbcc <_printf_float+0x18c>
 800bb3c:	3307      	adds	r3, #7
 800bb3e:	6063      	str	r3, [r4, #4]
 800bb40:	2380      	movs	r3, #128	; 0x80
 800bb42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb44:	00db      	lsls	r3, r3, #3
 800bb46:	4313      	orrs	r3, r2
 800bb48:	2200      	movs	r2, #0
 800bb4a:	9206      	str	r2, [sp, #24]
 800bb4c:	aa12      	add	r2, sp, #72	; 0x48
 800bb4e:	9205      	str	r2, [sp, #20]
 800bb50:	aa11      	add	r2, sp, #68	; 0x44
 800bb52:	9203      	str	r2, [sp, #12]
 800bb54:	2223      	movs	r2, #35	; 0x23
 800bb56:	a908      	add	r1, sp, #32
 800bb58:	6023      	str	r3, [r4, #0]
 800bb5a:	9301      	str	r3, [sp, #4]
 800bb5c:	6863      	ldr	r3, [r4, #4]
 800bb5e:	1852      	adds	r2, r2, r1
 800bb60:	9202      	str	r2, [sp, #8]
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	0038      	movs	r0, r7
 800bb66:	002b      	movs	r3, r5
 800bb68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb6a:	9604      	str	r6, [sp, #16]
 800bb6c:	f7ff febe 	bl	800b8ec <__cvt>
 800bb70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb72:	0005      	movs	r5, r0
 800bb74:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb76:	2b47      	cmp	r3, #71	; 0x47
 800bb78:	d108      	bne.n	800bb8c <_printf_float+0x14c>
 800bb7a:	1ccb      	adds	r3, r1, #3
 800bb7c:	db02      	blt.n	800bb84 <_printf_float+0x144>
 800bb7e:	6863      	ldr	r3, [r4, #4]
 800bb80:	4299      	cmp	r1, r3
 800bb82:	dd46      	ble.n	800bc12 <_printf_float+0x1d2>
 800bb84:	0033      	movs	r3, r6
 800bb86:	3b02      	subs	r3, #2
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	001e      	movs	r6, r3
 800bb8c:	2e65      	cmp	r6, #101	; 0x65
 800bb8e:	d824      	bhi.n	800bbda <_printf_float+0x19a>
 800bb90:	0020      	movs	r0, r4
 800bb92:	0032      	movs	r2, r6
 800bb94:	3901      	subs	r1, #1
 800bb96:	3050      	adds	r0, #80	; 0x50
 800bb98:	9111      	str	r1, [sp, #68]	; 0x44
 800bb9a:	f7ff ff0a 	bl	800b9b2 <__exponent>
 800bb9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bba0:	900a      	str	r0, [sp, #40]	; 0x28
 800bba2:	1813      	adds	r3, r2, r0
 800bba4:	6123      	str	r3, [r4, #16]
 800bba6:	2a01      	cmp	r2, #1
 800bba8:	dc02      	bgt.n	800bbb0 <_printf_float+0x170>
 800bbaa:	6822      	ldr	r2, [r4, #0]
 800bbac:	07d2      	lsls	r2, r2, #31
 800bbae:	d501      	bpl.n	800bbb4 <_printf_float+0x174>
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	6123      	str	r3, [r4, #16]
 800bbb4:	2323      	movs	r3, #35	; 0x23
 800bbb6:	aa08      	add	r2, sp, #32
 800bbb8:	189b      	adds	r3, r3, r2
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d100      	bne.n	800bbc2 <_printf_float+0x182>
 800bbc0:	e791      	b.n	800bae6 <_printf_float+0xa6>
 800bbc2:	0023      	movs	r3, r4
 800bbc4:	222d      	movs	r2, #45	; 0x2d
 800bbc6:	3343      	adds	r3, #67	; 0x43
 800bbc8:	701a      	strb	r2, [r3, #0]
 800bbca:	e78c      	b.n	800bae6 <_printf_float+0xa6>
 800bbcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbce:	2a47      	cmp	r2, #71	; 0x47
 800bbd0:	d1b6      	bne.n	800bb40 <_printf_float+0x100>
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1b4      	bne.n	800bb40 <_printf_float+0x100>
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	e7b1      	b.n	800bb3e <_printf_float+0xfe>
 800bbda:	2e66      	cmp	r6, #102	; 0x66
 800bbdc:	d11b      	bne.n	800bc16 <_printf_float+0x1d6>
 800bbde:	6863      	ldr	r3, [r4, #4]
 800bbe0:	2900      	cmp	r1, #0
 800bbe2:	dd0d      	ble.n	800bc00 <_printf_float+0x1c0>
 800bbe4:	6121      	str	r1, [r4, #16]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d102      	bne.n	800bbf0 <_printf_float+0x1b0>
 800bbea:	6822      	ldr	r2, [r4, #0]
 800bbec:	07d2      	lsls	r2, r2, #31
 800bbee:	d502      	bpl.n	800bbf6 <_printf_float+0x1b6>
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	1859      	adds	r1, r3, r1
 800bbf4:	6121      	str	r1, [r4, #16]
 800bbf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbf8:	65a3      	str	r3, [r4, #88]	; 0x58
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	930a      	str	r3, [sp, #40]	; 0x28
 800bbfe:	e7d9      	b.n	800bbb4 <_printf_float+0x174>
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d103      	bne.n	800bc0c <_printf_float+0x1cc>
 800bc04:	2201      	movs	r2, #1
 800bc06:	6821      	ldr	r1, [r4, #0]
 800bc08:	4211      	tst	r1, r2
 800bc0a:	d000      	beq.n	800bc0e <_printf_float+0x1ce>
 800bc0c:	1c9a      	adds	r2, r3, #2
 800bc0e:	6122      	str	r2, [r4, #16]
 800bc10:	e7f1      	b.n	800bbf6 <_printf_float+0x1b6>
 800bc12:	2367      	movs	r3, #103	; 0x67
 800bc14:	001e      	movs	r6, r3
 800bc16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	db06      	blt.n	800bc2c <_printf_float+0x1ec>
 800bc1e:	6822      	ldr	r2, [r4, #0]
 800bc20:	6123      	str	r3, [r4, #16]
 800bc22:	07d2      	lsls	r2, r2, #31
 800bc24:	d5e7      	bpl.n	800bbf6 <_printf_float+0x1b6>
 800bc26:	3301      	adds	r3, #1
 800bc28:	6123      	str	r3, [r4, #16]
 800bc2a:	e7e4      	b.n	800bbf6 <_printf_float+0x1b6>
 800bc2c:	2101      	movs	r1, #1
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	dc01      	bgt.n	800bc36 <_printf_float+0x1f6>
 800bc32:	1849      	adds	r1, r1, r1
 800bc34:	1ac9      	subs	r1, r1, r3
 800bc36:	1852      	adds	r2, r2, r1
 800bc38:	e7e9      	b.n	800bc0e <_printf_float+0x1ce>
 800bc3a:	6822      	ldr	r2, [r4, #0]
 800bc3c:	0553      	lsls	r3, r2, #21
 800bc3e:	d408      	bmi.n	800bc52 <_printf_float+0x212>
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	002a      	movs	r2, r5
 800bc44:	0038      	movs	r0, r7
 800bc46:	9908      	ldr	r1, [sp, #32]
 800bc48:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bc4a:	47a8      	blx	r5
 800bc4c:	1c43      	adds	r3, r0, #1
 800bc4e:	d129      	bne.n	800bca4 <_printf_float+0x264>
 800bc50:	e754      	b.n	800bafc <_printf_float+0xbc>
 800bc52:	2e65      	cmp	r6, #101	; 0x65
 800bc54:	d800      	bhi.n	800bc58 <_printf_float+0x218>
 800bc56:	e0ec      	b.n	800be32 <_printf_float+0x3f2>
 800bc58:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bc5a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f7f4 fbf2 	bl	8000448 <__aeabi_dcmpeq>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d034      	beq.n	800bcd2 <_printf_float+0x292>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	0038      	movs	r0, r7
 800bc6c:	4a37      	ldr	r2, [pc, #220]	; (800bd4c <_printf_float+0x30c>)
 800bc6e:	9908      	ldr	r1, [sp, #32]
 800bc70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bc72:	47a8      	blx	r5
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d100      	bne.n	800bc7a <_printf_float+0x23a>
 800bc78:	e740      	b.n	800bafc <_printf_float+0xbc>
 800bc7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	db02      	blt.n	800bc88 <_printf_float+0x248>
 800bc82:	6823      	ldr	r3, [r4, #0]
 800bc84:	07db      	lsls	r3, r3, #31
 800bc86:	d50d      	bpl.n	800bca4 <_printf_float+0x264>
 800bc88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bc8a:	0038      	movs	r0, r7
 800bc8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc90:	9908      	ldr	r1, [sp, #32]
 800bc92:	47a8      	blx	r5
 800bc94:	2500      	movs	r5, #0
 800bc96:	1c43      	adds	r3, r0, #1
 800bc98:	d100      	bne.n	800bc9c <_printf_float+0x25c>
 800bc9a:	e72f      	b.n	800bafc <_printf_float+0xbc>
 800bc9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	42ab      	cmp	r3, r5
 800bca2:	dc0a      	bgt.n	800bcba <_printf_float+0x27a>
 800bca4:	6823      	ldr	r3, [r4, #0]
 800bca6:	079b      	lsls	r3, r3, #30
 800bca8:	d500      	bpl.n	800bcac <_printf_float+0x26c>
 800bcaa:	e114      	b.n	800bed6 <_printf_float+0x496>
 800bcac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bcae:	68e0      	ldr	r0, [r4, #12]
 800bcb0:	4298      	cmp	r0, r3
 800bcb2:	db00      	blt.n	800bcb6 <_printf_float+0x276>
 800bcb4:	e724      	b.n	800bb00 <_printf_float+0xc0>
 800bcb6:	0018      	movs	r0, r3
 800bcb8:	e722      	b.n	800bb00 <_printf_float+0xc0>
 800bcba:	0022      	movs	r2, r4
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	0038      	movs	r0, r7
 800bcc0:	9908      	ldr	r1, [sp, #32]
 800bcc2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bcc4:	321a      	adds	r2, #26
 800bcc6:	47b0      	blx	r6
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	d100      	bne.n	800bcce <_printf_float+0x28e>
 800bccc:	e716      	b.n	800bafc <_printf_float+0xbc>
 800bcce:	3501      	adds	r5, #1
 800bcd0:	e7e4      	b.n	800bc9c <_printf_float+0x25c>
 800bcd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	dc3b      	bgt.n	800bd50 <_printf_float+0x310>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	0038      	movs	r0, r7
 800bcdc:	4a1b      	ldr	r2, [pc, #108]	; (800bd4c <_printf_float+0x30c>)
 800bcde:	9908      	ldr	r1, [sp, #32]
 800bce0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bce2:	47b0      	blx	r6
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d100      	bne.n	800bcea <_printf_float+0x2aa>
 800bce8:	e708      	b.n	800bafc <_printf_float+0xbc>
 800bcea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	d102      	bne.n	800bcf8 <_printf_float+0x2b8>
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	07db      	lsls	r3, r3, #31
 800bcf6:	d5d5      	bpl.n	800bca4 <_printf_float+0x264>
 800bcf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcfa:	0038      	movs	r0, r7
 800bcfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bcfe:	9908      	ldr	r1, [sp, #32]
 800bd00:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bd02:	47b0      	blx	r6
 800bd04:	1c43      	adds	r3, r0, #1
 800bd06:	d100      	bne.n	800bd0a <_printf_float+0x2ca>
 800bd08:	e6f8      	b.n	800bafc <_printf_float+0xbc>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	930a      	str	r3, [sp, #40]	; 0x28
 800bd0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd12:	425b      	negs	r3, r3
 800bd14:	4293      	cmp	r3, r2
 800bd16:	dc01      	bgt.n	800bd1c <_printf_float+0x2dc>
 800bd18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd1a:	e792      	b.n	800bc42 <_printf_float+0x202>
 800bd1c:	0022      	movs	r2, r4
 800bd1e:	2301      	movs	r3, #1
 800bd20:	0038      	movs	r0, r7
 800bd22:	9908      	ldr	r1, [sp, #32]
 800bd24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bd26:	321a      	adds	r2, #26
 800bd28:	47b0      	blx	r6
 800bd2a:	1c43      	adds	r3, r0, #1
 800bd2c:	d100      	bne.n	800bd30 <_printf_float+0x2f0>
 800bd2e:	e6e5      	b.n	800bafc <_printf_float+0xbc>
 800bd30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd32:	3301      	adds	r3, #1
 800bd34:	e7ea      	b.n	800bd0c <_printf_float+0x2cc>
 800bd36:	46c0      	nop			; (mov r8, r8)
 800bd38:	7fefffff 	.word	0x7fefffff
 800bd3c:	0800e7a4 	.word	0x0800e7a4
 800bd40:	0800e7a8 	.word	0x0800e7a8
 800bd44:	0800e7ac 	.word	0x0800e7ac
 800bd48:	0800e7b0 	.word	0x0800e7b0
 800bd4c:	0800e7b4 	.word	0x0800e7b4
 800bd50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd54:	920a      	str	r2, [sp, #40]	; 0x28
 800bd56:	429a      	cmp	r2, r3
 800bd58:	dd00      	ble.n	800bd5c <_printf_float+0x31c>
 800bd5a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	dc3d      	bgt.n	800bdde <_printf_float+0x39e>
 800bd62:	2300      	movs	r3, #0
 800bd64:	930e      	str	r3, [sp, #56]	; 0x38
 800bd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd68:	43db      	mvns	r3, r3
 800bd6a:	17db      	asrs	r3, r3, #31
 800bd6c:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd72:	930c      	str	r3, [sp, #48]	; 0x30
 800bd74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd76:	4013      	ands	r3, r2
 800bd78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	dc36      	bgt.n	800bdf0 <_printf_float+0x3b0>
 800bd82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd86:	4293      	cmp	r3, r2
 800bd88:	db40      	blt.n	800be0c <_printf_float+0x3cc>
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	07db      	lsls	r3, r3, #31
 800bd8e:	d43d      	bmi.n	800be0c <_printf_float+0x3cc>
 800bd90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd94:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	1a52      	subs	r2, r2, r1
 800bd9a:	920a      	str	r2, [sp, #40]	; 0x28
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	dd00      	ble.n	800bda2 <_printf_float+0x362>
 800bda0:	930a      	str	r3, [sp, #40]	; 0x28
 800bda2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	dc3a      	bgt.n	800be1e <_printf_float+0x3de>
 800bda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdaa:	2500      	movs	r5, #0
 800bdac:	43db      	mvns	r3, r3
 800bdae:	17db      	asrs	r3, r3, #31
 800bdb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bdb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdb8:	1a9b      	subs	r3, r3, r2
 800bdba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdbc:	400a      	ands	r2, r1
 800bdbe:	1a9b      	subs	r3, r3, r2
 800bdc0:	42ab      	cmp	r3, r5
 800bdc2:	dc00      	bgt.n	800bdc6 <_printf_float+0x386>
 800bdc4:	e76e      	b.n	800bca4 <_printf_float+0x264>
 800bdc6:	0022      	movs	r2, r4
 800bdc8:	2301      	movs	r3, #1
 800bdca:	0038      	movs	r0, r7
 800bdcc:	9908      	ldr	r1, [sp, #32]
 800bdce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bdd0:	321a      	adds	r2, #26
 800bdd2:	47b0      	blx	r6
 800bdd4:	1c43      	adds	r3, r0, #1
 800bdd6:	d100      	bne.n	800bdda <_printf_float+0x39a>
 800bdd8:	e690      	b.n	800bafc <_printf_float+0xbc>
 800bdda:	3501      	adds	r5, #1
 800bddc:	e7e9      	b.n	800bdb2 <_printf_float+0x372>
 800bdde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bde0:	002a      	movs	r2, r5
 800bde2:	0038      	movs	r0, r7
 800bde4:	9908      	ldr	r1, [sp, #32]
 800bde6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bde8:	47b0      	blx	r6
 800bdea:	1c43      	adds	r3, r0, #1
 800bdec:	d1b9      	bne.n	800bd62 <_printf_float+0x322>
 800bdee:	e685      	b.n	800bafc <_printf_float+0xbc>
 800bdf0:	0022      	movs	r2, r4
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	0038      	movs	r0, r7
 800bdf6:	9908      	ldr	r1, [sp, #32]
 800bdf8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bdfa:	321a      	adds	r2, #26
 800bdfc:	47b0      	blx	r6
 800bdfe:	1c43      	adds	r3, r0, #1
 800be00:	d100      	bne.n	800be04 <_printf_float+0x3c4>
 800be02:	e67b      	b.n	800bafc <_printf_float+0xbc>
 800be04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be06:	3301      	adds	r3, #1
 800be08:	930e      	str	r3, [sp, #56]	; 0x38
 800be0a:	e7b0      	b.n	800bd6e <_printf_float+0x32e>
 800be0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be0e:	0038      	movs	r0, r7
 800be10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be12:	9908      	ldr	r1, [sp, #32]
 800be14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800be16:	47b0      	blx	r6
 800be18:	1c43      	adds	r3, r0, #1
 800be1a:	d1b9      	bne.n	800bd90 <_printf_float+0x350>
 800be1c:	e66e      	b.n	800bafc <_printf_float+0xbc>
 800be1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be20:	0038      	movs	r0, r7
 800be22:	18ea      	adds	r2, r5, r3
 800be24:	9908      	ldr	r1, [sp, #32]
 800be26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800be2a:	47a8      	blx	r5
 800be2c:	1c43      	adds	r3, r0, #1
 800be2e:	d1bb      	bne.n	800bda8 <_printf_float+0x368>
 800be30:	e664      	b.n	800bafc <_printf_float+0xbc>
 800be32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be34:	2b01      	cmp	r3, #1
 800be36:	dc02      	bgt.n	800be3e <_printf_float+0x3fe>
 800be38:	2301      	movs	r3, #1
 800be3a:	421a      	tst	r2, r3
 800be3c:	d038      	beq.n	800beb0 <_printf_float+0x470>
 800be3e:	2301      	movs	r3, #1
 800be40:	002a      	movs	r2, r5
 800be42:	0038      	movs	r0, r7
 800be44:	9908      	ldr	r1, [sp, #32]
 800be46:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800be48:	47b0      	blx	r6
 800be4a:	1c43      	adds	r3, r0, #1
 800be4c:	d100      	bne.n	800be50 <_printf_float+0x410>
 800be4e:	e655      	b.n	800bafc <_printf_float+0xbc>
 800be50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be52:	0038      	movs	r0, r7
 800be54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be56:	9908      	ldr	r1, [sp, #32]
 800be58:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800be5a:	47b0      	blx	r6
 800be5c:	1c43      	adds	r3, r0, #1
 800be5e:	d100      	bne.n	800be62 <_printf_float+0x422>
 800be60:	e64c      	b.n	800bafc <_printf_float+0xbc>
 800be62:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800be64:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800be66:	2200      	movs	r2, #0
 800be68:	2300      	movs	r3, #0
 800be6a:	f7f4 faed 	bl	8000448 <__aeabi_dcmpeq>
 800be6e:	2800      	cmp	r0, #0
 800be70:	d11c      	bne.n	800beac <_printf_float+0x46c>
 800be72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be74:	1c6a      	adds	r2, r5, #1
 800be76:	3b01      	subs	r3, #1
 800be78:	0038      	movs	r0, r7
 800be7a:	9908      	ldr	r1, [sp, #32]
 800be7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800be7e:	47a8      	blx	r5
 800be80:	1c43      	adds	r3, r0, #1
 800be82:	d10f      	bne.n	800bea4 <_printf_float+0x464>
 800be84:	e63a      	b.n	800bafc <_printf_float+0xbc>
 800be86:	0022      	movs	r2, r4
 800be88:	2301      	movs	r3, #1
 800be8a:	0038      	movs	r0, r7
 800be8c:	9908      	ldr	r1, [sp, #32]
 800be8e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800be90:	321a      	adds	r2, #26
 800be92:	47b0      	blx	r6
 800be94:	1c43      	adds	r3, r0, #1
 800be96:	d100      	bne.n	800be9a <_printf_float+0x45a>
 800be98:	e630      	b.n	800bafc <_printf_float+0xbc>
 800be9a:	3501      	adds	r5, #1
 800be9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be9e:	3b01      	subs	r3, #1
 800bea0:	42ab      	cmp	r3, r5
 800bea2:	dcf0      	bgt.n	800be86 <_printf_float+0x446>
 800bea4:	0022      	movs	r2, r4
 800bea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bea8:	3250      	adds	r2, #80	; 0x50
 800beaa:	e6cb      	b.n	800bc44 <_printf_float+0x204>
 800beac:	2500      	movs	r5, #0
 800beae:	e7f5      	b.n	800be9c <_printf_float+0x45c>
 800beb0:	002a      	movs	r2, r5
 800beb2:	e7e1      	b.n	800be78 <_printf_float+0x438>
 800beb4:	0022      	movs	r2, r4
 800beb6:	2301      	movs	r3, #1
 800beb8:	0038      	movs	r0, r7
 800beba:	9908      	ldr	r1, [sp, #32]
 800bebc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bebe:	3219      	adds	r2, #25
 800bec0:	47b0      	blx	r6
 800bec2:	1c43      	adds	r3, r0, #1
 800bec4:	d100      	bne.n	800bec8 <_printf_float+0x488>
 800bec6:	e619      	b.n	800bafc <_printf_float+0xbc>
 800bec8:	3501      	adds	r5, #1
 800beca:	68e3      	ldr	r3, [r4, #12]
 800becc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bece:	1a9b      	subs	r3, r3, r2
 800bed0:	42ab      	cmp	r3, r5
 800bed2:	dcef      	bgt.n	800beb4 <_printf_float+0x474>
 800bed4:	e6ea      	b.n	800bcac <_printf_float+0x26c>
 800bed6:	2500      	movs	r5, #0
 800bed8:	e7f7      	b.n	800beca <_printf_float+0x48a>
 800beda:	46c0      	nop			; (mov r8, r8)

0800bedc <_printf_common>:
 800bedc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bede:	0015      	movs	r5, r2
 800bee0:	9301      	str	r3, [sp, #4]
 800bee2:	688a      	ldr	r2, [r1, #8]
 800bee4:	690b      	ldr	r3, [r1, #16]
 800bee6:	000c      	movs	r4, r1
 800bee8:	9000      	str	r0, [sp, #0]
 800beea:	4293      	cmp	r3, r2
 800beec:	da00      	bge.n	800bef0 <_printf_common+0x14>
 800beee:	0013      	movs	r3, r2
 800bef0:	0022      	movs	r2, r4
 800bef2:	602b      	str	r3, [r5, #0]
 800bef4:	3243      	adds	r2, #67	; 0x43
 800bef6:	7812      	ldrb	r2, [r2, #0]
 800bef8:	2a00      	cmp	r2, #0
 800befa:	d001      	beq.n	800bf00 <_printf_common+0x24>
 800befc:	3301      	adds	r3, #1
 800befe:	602b      	str	r3, [r5, #0]
 800bf00:	6823      	ldr	r3, [r4, #0]
 800bf02:	069b      	lsls	r3, r3, #26
 800bf04:	d502      	bpl.n	800bf0c <_printf_common+0x30>
 800bf06:	682b      	ldr	r3, [r5, #0]
 800bf08:	3302      	adds	r3, #2
 800bf0a:	602b      	str	r3, [r5, #0]
 800bf0c:	6822      	ldr	r2, [r4, #0]
 800bf0e:	2306      	movs	r3, #6
 800bf10:	0017      	movs	r7, r2
 800bf12:	401f      	ands	r7, r3
 800bf14:	421a      	tst	r2, r3
 800bf16:	d027      	beq.n	800bf68 <_printf_common+0x8c>
 800bf18:	0023      	movs	r3, r4
 800bf1a:	3343      	adds	r3, #67	; 0x43
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	1e5a      	subs	r2, r3, #1
 800bf20:	4193      	sbcs	r3, r2
 800bf22:	6822      	ldr	r2, [r4, #0]
 800bf24:	0692      	lsls	r2, r2, #26
 800bf26:	d430      	bmi.n	800bf8a <_printf_common+0xae>
 800bf28:	0022      	movs	r2, r4
 800bf2a:	9901      	ldr	r1, [sp, #4]
 800bf2c:	9800      	ldr	r0, [sp, #0]
 800bf2e:	9e08      	ldr	r6, [sp, #32]
 800bf30:	3243      	adds	r2, #67	; 0x43
 800bf32:	47b0      	blx	r6
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d025      	beq.n	800bf84 <_printf_common+0xa8>
 800bf38:	2306      	movs	r3, #6
 800bf3a:	6820      	ldr	r0, [r4, #0]
 800bf3c:	682a      	ldr	r2, [r5, #0]
 800bf3e:	68e1      	ldr	r1, [r4, #12]
 800bf40:	2500      	movs	r5, #0
 800bf42:	4003      	ands	r3, r0
 800bf44:	2b04      	cmp	r3, #4
 800bf46:	d103      	bne.n	800bf50 <_printf_common+0x74>
 800bf48:	1a8d      	subs	r5, r1, r2
 800bf4a:	43eb      	mvns	r3, r5
 800bf4c:	17db      	asrs	r3, r3, #31
 800bf4e:	401d      	ands	r5, r3
 800bf50:	68a3      	ldr	r3, [r4, #8]
 800bf52:	6922      	ldr	r2, [r4, #16]
 800bf54:	4293      	cmp	r3, r2
 800bf56:	dd01      	ble.n	800bf5c <_printf_common+0x80>
 800bf58:	1a9b      	subs	r3, r3, r2
 800bf5a:	18ed      	adds	r5, r5, r3
 800bf5c:	2700      	movs	r7, #0
 800bf5e:	42bd      	cmp	r5, r7
 800bf60:	d120      	bne.n	800bfa4 <_printf_common+0xc8>
 800bf62:	2000      	movs	r0, #0
 800bf64:	e010      	b.n	800bf88 <_printf_common+0xac>
 800bf66:	3701      	adds	r7, #1
 800bf68:	68e3      	ldr	r3, [r4, #12]
 800bf6a:	682a      	ldr	r2, [r5, #0]
 800bf6c:	1a9b      	subs	r3, r3, r2
 800bf6e:	42bb      	cmp	r3, r7
 800bf70:	ddd2      	ble.n	800bf18 <_printf_common+0x3c>
 800bf72:	0022      	movs	r2, r4
 800bf74:	2301      	movs	r3, #1
 800bf76:	9901      	ldr	r1, [sp, #4]
 800bf78:	9800      	ldr	r0, [sp, #0]
 800bf7a:	9e08      	ldr	r6, [sp, #32]
 800bf7c:	3219      	adds	r2, #25
 800bf7e:	47b0      	blx	r6
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	d1f0      	bne.n	800bf66 <_printf_common+0x8a>
 800bf84:	2001      	movs	r0, #1
 800bf86:	4240      	negs	r0, r0
 800bf88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bf8a:	2030      	movs	r0, #48	; 0x30
 800bf8c:	18e1      	adds	r1, r4, r3
 800bf8e:	3143      	adds	r1, #67	; 0x43
 800bf90:	7008      	strb	r0, [r1, #0]
 800bf92:	0021      	movs	r1, r4
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	3145      	adds	r1, #69	; 0x45
 800bf98:	7809      	ldrb	r1, [r1, #0]
 800bf9a:	18a2      	adds	r2, r4, r2
 800bf9c:	3243      	adds	r2, #67	; 0x43
 800bf9e:	3302      	adds	r3, #2
 800bfa0:	7011      	strb	r1, [r2, #0]
 800bfa2:	e7c1      	b.n	800bf28 <_printf_common+0x4c>
 800bfa4:	0022      	movs	r2, r4
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	9901      	ldr	r1, [sp, #4]
 800bfaa:	9800      	ldr	r0, [sp, #0]
 800bfac:	9e08      	ldr	r6, [sp, #32]
 800bfae:	321a      	adds	r2, #26
 800bfb0:	47b0      	blx	r6
 800bfb2:	1c43      	adds	r3, r0, #1
 800bfb4:	d0e6      	beq.n	800bf84 <_printf_common+0xa8>
 800bfb6:	3701      	adds	r7, #1
 800bfb8:	e7d1      	b.n	800bf5e <_printf_common+0x82>
	...

0800bfbc <_printf_i>:
 800bfbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfbe:	b08b      	sub	sp, #44	; 0x2c
 800bfc0:	9206      	str	r2, [sp, #24]
 800bfc2:	000a      	movs	r2, r1
 800bfc4:	3243      	adds	r2, #67	; 0x43
 800bfc6:	9307      	str	r3, [sp, #28]
 800bfc8:	9005      	str	r0, [sp, #20]
 800bfca:	9204      	str	r2, [sp, #16]
 800bfcc:	7e0a      	ldrb	r2, [r1, #24]
 800bfce:	000c      	movs	r4, r1
 800bfd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfd2:	2a78      	cmp	r2, #120	; 0x78
 800bfd4:	d806      	bhi.n	800bfe4 <_printf_i+0x28>
 800bfd6:	2a62      	cmp	r2, #98	; 0x62
 800bfd8:	d808      	bhi.n	800bfec <_printf_i+0x30>
 800bfda:	2a00      	cmp	r2, #0
 800bfdc:	d100      	bne.n	800bfe0 <_printf_i+0x24>
 800bfde:	e0c0      	b.n	800c162 <_printf_i+0x1a6>
 800bfe0:	2a58      	cmp	r2, #88	; 0x58
 800bfe2:	d052      	beq.n	800c08a <_printf_i+0xce>
 800bfe4:	0026      	movs	r6, r4
 800bfe6:	3642      	adds	r6, #66	; 0x42
 800bfe8:	7032      	strb	r2, [r6, #0]
 800bfea:	e022      	b.n	800c032 <_printf_i+0x76>
 800bfec:	0010      	movs	r0, r2
 800bfee:	3863      	subs	r0, #99	; 0x63
 800bff0:	2815      	cmp	r0, #21
 800bff2:	d8f7      	bhi.n	800bfe4 <_printf_i+0x28>
 800bff4:	f7f4 f898 	bl	8000128 <__gnu_thumb1_case_shi>
 800bff8:	001f0016 	.word	0x001f0016
 800bffc:	fff6fff6 	.word	0xfff6fff6
 800c000:	fff6fff6 	.word	0xfff6fff6
 800c004:	fff6001f 	.word	0xfff6001f
 800c008:	fff6fff6 	.word	0xfff6fff6
 800c00c:	00a8fff6 	.word	0x00a8fff6
 800c010:	009a0036 	.word	0x009a0036
 800c014:	fff6fff6 	.word	0xfff6fff6
 800c018:	fff600b9 	.word	0xfff600b9
 800c01c:	fff60036 	.word	0xfff60036
 800c020:	009efff6 	.word	0x009efff6
 800c024:	0026      	movs	r6, r4
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	3642      	adds	r6, #66	; 0x42
 800c02a:	1d11      	adds	r1, r2, #4
 800c02c:	6019      	str	r1, [r3, #0]
 800c02e:	6813      	ldr	r3, [r2, #0]
 800c030:	7033      	strb	r3, [r6, #0]
 800c032:	2301      	movs	r3, #1
 800c034:	e0a7      	b.n	800c186 <_printf_i+0x1ca>
 800c036:	6808      	ldr	r0, [r1, #0]
 800c038:	6819      	ldr	r1, [r3, #0]
 800c03a:	1d0a      	adds	r2, r1, #4
 800c03c:	0605      	lsls	r5, r0, #24
 800c03e:	d50b      	bpl.n	800c058 <_printf_i+0x9c>
 800c040:	680d      	ldr	r5, [r1, #0]
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	2d00      	cmp	r5, #0
 800c046:	da03      	bge.n	800c050 <_printf_i+0x94>
 800c048:	232d      	movs	r3, #45	; 0x2d
 800c04a:	9a04      	ldr	r2, [sp, #16]
 800c04c:	426d      	negs	r5, r5
 800c04e:	7013      	strb	r3, [r2, #0]
 800c050:	4b61      	ldr	r3, [pc, #388]	; (800c1d8 <_printf_i+0x21c>)
 800c052:	270a      	movs	r7, #10
 800c054:	9303      	str	r3, [sp, #12]
 800c056:	e032      	b.n	800c0be <_printf_i+0x102>
 800c058:	680d      	ldr	r5, [r1, #0]
 800c05a:	601a      	str	r2, [r3, #0]
 800c05c:	0641      	lsls	r1, r0, #25
 800c05e:	d5f1      	bpl.n	800c044 <_printf_i+0x88>
 800c060:	b22d      	sxth	r5, r5
 800c062:	e7ef      	b.n	800c044 <_printf_i+0x88>
 800c064:	680d      	ldr	r5, [r1, #0]
 800c066:	6819      	ldr	r1, [r3, #0]
 800c068:	1d08      	adds	r0, r1, #4
 800c06a:	6018      	str	r0, [r3, #0]
 800c06c:	062e      	lsls	r6, r5, #24
 800c06e:	d501      	bpl.n	800c074 <_printf_i+0xb8>
 800c070:	680d      	ldr	r5, [r1, #0]
 800c072:	e003      	b.n	800c07c <_printf_i+0xc0>
 800c074:	066d      	lsls	r5, r5, #25
 800c076:	d5fb      	bpl.n	800c070 <_printf_i+0xb4>
 800c078:	680d      	ldr	r5, [r1, #0]
 800c07a:	b2ad      	uxth	r5, r5
 800c07c:	4b56      	ldr	r3, [pc, #344]	; (800c1d8 <_printf_i+0x21c>)
 800c07e:	270a      	movs	r7, #10
 800c080:	9303      	str	r3, [sp, #12]
 800c082:	2a6f      	cmp	r2, #111	; 0x6f
 800c084:	d117      	bne.n	800c0b6 <_printf_i+0xfa>
 800c086:	2708      	movs	r7, #8
 800c088:	e015      	b.n	800c0b6 <_printf_i+0xfa>
 800c08a:	3145      	adds	r1, #69	; 0x45
 800c08c:	700a      	strb	r2, [r1, #0]
 800c08e:	4a52      	ldr	r2, [pc, #328]	; (800c1d8 <_printf_i+0x21c>)
 800c090:	9203      	str	r2, [sp, #12]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	6821      	ldr	r1, [r4, #0]
 800c096:	ca20      	ldmia	r2!, {r5}
 800c098:	601a      	str	r2, [r3, #0]
 800c09a:	0608      	lsls	r0, r1, #24
 800c09c:	d550      	bpl.n	800c140 <_printf_i+0x184>
 800c09e:	07cb      	lsls	r3, r1, #31
 800c0a0:	d502      	bpl.n	800c0a8 <_printf_i+0xec>
 800c0a2:	2320      	movs	r3, #32
 800c0a4:	4319      	orrs	r1, r3
 800c0a6:	6021      	str	r1, [r4, #0]
 800c0a8:	2710      	movs	r7, #16
 800c0aa:	2d00      	cmp	r5, #0
 800c0ac:	d103      	bne.n	800c0b6 <_printf_i+0xfa>
 800c0ae:	2320      	movs	r3, #32
 800c0b0:	6822      	ldr	r2, [r4, #0]
 800c0b2:	439a      	bics	r2, r3
 800c0b4:	6022      	str	r2, [r4, #0]
 800c0b6:	0023      	movs	r3, r4
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	3343      	adds	r3, #67	; 0x43
 800c0bc:	701a      	strb	r2, [r3, #0]
 800c0be:	6863      	ldr	r3, [r4, #4]
 800c0c0:	60a3      	str	r3, [r4, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	db03      	blt.n	800c0ce <_printf_i+0x112>
 800c0c6:	2204      	movs	r2, #4
 800c0c8:	6821      	ldr	r1, [r4, #0]
 800c0ca:	4391      	bics	r1, r2
 800c0cc:	6021      	str	r1, [r4, #0]
 800c0ce:	2d00      	cmp	r5, #0
 800c0d0:	d102      	bne.n	800c0d8 <_printf_i+0x11c>
 800c0d2:	9e04      	ldr	r6, [sp, #16]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00c      	beq.n	800c0f2 <_printf_i+0x136>
 800c0d8:	9e04      	ldr	r6, [sp, #16]
 800c0da:	0028      	movs	r0, r5
 800c0dc:	0039      	movs	r1, r7
 800c0de:	f7f4 f8b3 	bl	8000248 <__aeabi_uidivmod>
 800c0e2:	9b03      	ldr	r3, [sp, #12]
 800c0e4:	3e01      	subs	r6, #1
 800c0e6:	5c5b      	ldrb	r3, [r3, r1]
 800c0e8:	7033      	strb	r3, [r6, #0]
 800c0ea:	002b      	movs	r3, r5
 800c0ec:	0005      	movs	r5, r0
 800c0ee:	429f      	cmp	r7, r3
 800c0f0:	d9f3      	bls.n	800c0da <_printf_i+0x11e>
 800c0f2:	2f08      	cmp	r7, #8
 800c0f4:	d109      	bne.n	800c10a <_printf_i+0x14e>
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	07db      	lsls	r3, r3, #31
 800c0fa:	d506      	bpl.n	800c10a <_printf_i+0x14e>
 800c0fc:	6863      	ldr	r3, [r4, #4]
 800c0fe:	6922      	ldr	r2, [r4, #16]
 800c100:	4293      	cmp	r3, r2
 800c102:	dc02      	bgt.n	800c10a <_printf_i+0x14e>
 800c104:	2330      	movs	r3, #48	; 0x30
 800c106:	3e01      	subs	r6, #1
 800c108:	7033      	strb	r3, [r6, #0]
 800c10a:	9b04      	ldr	r3, [sp, #16]
 800c10c:	1b9b      	subs	r3, r3, r6
 800c10e:	6123      	str	r3, [r4, #16]
 800c110:	9b07      	ldr	r3, [sp, #28]
 800c112:	0021      	movs	r1, r4
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	9805      	ldr	r0, [sp, #20]
 800c118:	9b06      	ldr	r3, [sp, #24]
 800c11a:	aa09      	add	r2, sp, #36	; 0x24
 800c11c:	f7ff fede 	bl	800bedc <_printf_common>
 800c120:	1c43      	adds	r3, r0, #1
 800c122:	d135      	bne.n	800c190 <_printf_i+0x1d4>
 800c124:	2001      	movs	r0, #1
 800c126:	4240      	negs	r0, r0
 800c128:	b00b      	add	sp, #44	; 0x2c
 800c12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c12c:	2220      	movs	r2, #32
 800c12e:	6809      	ldr	r1, [r1, #0]
 800c130:	430a      	orrs	r2, r1
 800c132:	6022      	str	r2, [r4, #0]
 800c134:	0022      	movs	r2, r4
 800c136:	2178      	movs	r1, #120	; 0x78
 800c138:	3245      	adds	r2, #69	; 0x45
 800c13a:	7011      	strb	r1, [r2, #0]
 800c13c:	4a27      	ldr	r2, [pc, #156]	; (800c1dc <_printf_i+0x220>)
 800c13e:	e7a7      	b.n	800c090 <_printf_i+0xd4>
 800c140:	0648      	lsls	r0, r1, #25
 800c142:	d5ac      	bpl.n	800c09e <_printf_i+0xe2>
 800c144:	b2ad      	uxth	r5, r5
 800c146:	e7aa      	b.n	800c09e <_printf_i+0xe2>
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	680d      	ldr	r5, [r1, #0]
 800c14c:	1d10      	adds	r0, r2, #4
 800c14e:	6949      	ldr	r1, [r1, #20]
 800c150:	6018      	str	r0, [r3, #0]
 800c152:	6813      	ldr	r3, [r2, #0]
 800c154:	062e      	lsls	r6, r5, #24
 800c156:	d501      	bpl.n	800c15c <_printf_i+0x1a0>
 800c158:	6019      	str	r1, [r3, #0]
 800c15a:	e002      	b.n	800c162 <_printf_i+0x1a6>
 800c15c:	066d      	lsls	r5, r5, #25
 800c15e:	d5fb      	bpl.n	800c158 <_printf_i+0x19c>
 800c160:	8019      	strh	r1, [r3, #0]
 800c162:	2300      	movs	r3, #0
 800c164:	9e04      	ldr	r6, [sp, #16]
 800c166:	6123      	str	r3, [r4, #16]
 800c168:	e7d2      	b.n	800c110 <_printf_i+0x154>
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	1d11      	adds	r1, r2, #4
 800c16e:	6019      	str	r1, [r3, #0]
 800c170:	6816      	ldr	r6, [r2, #0]
 800c172:	2100      	movs	r1, #0
 800c174:	0030      	movs	r0, r6
 800c176:	6862      	ldr	r2, [r4, #4]
 800c178:	f000 ff52 	bl	800d020 <memchr>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d001      	beq.n	800c184 <_printf_i+0x1c8>
 800c180:	1b80      	subs	r0, r0, r6
 800c182:	6060      	str	r0, [r4, #4]
 800c184:	6863      	ldr	r3, [r4, #4]
 800c186:	6123      	str	r3, [r4, #16]
 800c188:	2300      	movs	r3, #0
 800c18a:	9a04      	ldr	r2, [sp, #16]
 800c18c:	7013      	strb	r3, [r2, #0]
 800c18e:	e7bf      	b.n	800c110 <_printf_i+0x154>
 800c190:	6923      	ldr	r3, [r4, #16]
 800c192:	0032      	movs	r2, r6
 800c194:	9906      	ldr	r1, [sp, #24]
 800c196:	9805      	ldr	r0, [sp, #20]
 800c198:	9d07      	ldr	r5, [sp, #28]
 800c19a:	47a8      	blx	r5
 800c19c:	1c43      	adds	r3, r0, #1
 800c19e:	d0c1      	beq.n	800c124 <_printf_i+0x168>
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	079b      	lsls	r3, r3, #30
 800c1a4:	d415      	bmi.n	800c1d2 <_printf_i+0x216>
 800c1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a8:	68e0      	ldr	r0, [r4, #12]
 800c1aa:	4298      	cmp	r0, r3
 800c1ac:	dabc      	bge.n	800c128 <_printf_i+0x16c>
 800c1ae:	0018      	movs	r0, r3
 800c1b0:	e7ba      	b.n	800c128 <_printf_i+0x16c>
 800c1b2:	0022      	movs	r2, r4
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	9906      	ldr	r1, [sp, #24]
 800c1b8:	9805      	ldr	r0, [sp, #20]
 800c1ba:	9e07      	ldr	r6, [sp, #28]
 800c1bc:	3219      	adds	r2, #25
 800c1be:	47b0      	blx	r6
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	d0af      	beq.n	800c124 <_printf_i+0x168>
 800c1c4:	3501      	adds	r5, #1
 800c1c6:	68e3      	ldr	r3, [r4, #12]
 800c1c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1ca:	1a9b      	subs	r3, r3, r2
 800c1cc:	42ab      	cmp	r3, r5
 800c1ce:	dcf0      	bgt.n	800c1b2 <_printf_i+0x1f6>
 800c1d0:	e7e9      	b.n	800c1a6 <_printf_i+0x1ea>
 800c1d2:	2500      	movs	r5, #0
 800c1d4:	e7f7      	b.n	800c1c6 <_printf_i+0x20a>
 800c1d6:	46c0      	nop			; (mov r8, r8)
 800c1d8:	0800e7b6 	.word	0x0800e7b6
 800c1dc:	0800e7c7 	.word	0x0800e7c7

0800c1e0 <_sbrk_r>:
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	b570      	push	{r4, r5, r6, lr}
 800c1e4:	4d06      	ldr	r5, [pc, #24]	; (800c200 <_sbrk_r+0x20>)
 800c1e6:	0004      	movs	r4, r0
 800c1e8:	0008      	movs	r0, r1
 800c1ea:	602b      	str	r3, [r5, #0]
 800c1ec:	f7f7 fb88 	bl	8003900 <_sbrk>
 800c1f0:	1c43      	adds	r3, r0, #1
 800c1f2:	d103      	bne.n	800c1fc <_sbrk_r+0x1c>
 800c1f4:	682b      	ldr	r3, [r5, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d000      	beq.n	800c1fc <_sbrk_r+0x1c>
 800c1fa:	6023      	str	r3, [r4, #0]
 800c1fc:	bd70      	pop	{r4, r5, r6, pc}
 800c1fe:	46c0      	nop			; (mov r8, r8)
 800c200:	200005dc 	.word	0x200005dc

0800c204 <siprintf>:
 800c204:	b40e      	push	{r1, r2, r3}
 800c206:	b500      	push	{lr}
 800c208:	490b      	ldr	r1, [pc, #44]	; (800c238 <siprintf+0x34>)
 800c20a:	b09c      	sub	sp, #112	; 0x70
 800c20c:	ab1d      	add	r3, sp, #116	; 0x74
 800c20e:	9002      	str	r0, [sp, #8]
 800c210:	9006      	str	r0, [sp, #24]
 800c212:	9107      	str	r1, [sp, #28]
 800c214:	9104      	str	r1, [sp, #16]
 800c216:	4809      	ldr	r0, [pc, #36]	; (800c23c <siprintf+0x38>)
 800c218:	4909      	ldr	r1, [pc, #36]	; (800c240 <siprintf+0x3c>)
 800c21a:	cb04      	ldmia	r3!, {r2}
 800c21c:	9105      	str	r1, [sp, #20]
 800c21e:	6800      	ldr	r0, [r0, #0]
 800c220:	a902      	add	r1, sp, #8
 800c222:	9301      	str	r3, [sp, #4]
 800c224:	f001 fb26 	bl	800d874 <_svfiprintf_r>
 800c228:	2300      	movs	r3, #0
 800c22a:	9a02      	ldr	r2, [sp, #8]
 800c22c:	7013      	strb	r3, [r2, #0]
 800c22e:	b01c      	add	sp, #112	; 0x70
 800c230:	bc08      	pop	{r3}
 800c232:	b003      	add	sp, #12
 800c234:	4718      	bx	r3
 800c236:	46c0      	nop			; (mov r8, r8)
 800c238:	7fffffff 	.word	0x7fffffff
 800c23c:	2000002c 	.word	0x2000002c
 800c240:	ffff0208 	.word	0xffff0208

0800c244 <__assert_func>:
 800c244:	b530      	push	{r4, r5, lr}
 800c246:	0014      	movs	r4, r2
 800c248:	001a      	movs	r2, r3
 800c24a:	4b09      	ldr	r3, [pc, #36]	; (800c270 <__assert_func+0x2c>)
 800c24c:	0005      	movs	r5, r0
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	b085      	sub	sp, #20
 800c252:	68d8      	ldr	r0, [r3, #12]
 800c254:	4b07      	ldr	r3, [pc, #28]	; (800c274 <__assert_func+0x30>)
 800c256:	2c00      	cmp	r4, #0
 800c258:	d101      	bne.n	800c25e <__assert_func+0x1a>
 800c25a:	4b07      	ldr	r3, [pc, #28]	; (800c278 <__assert_func+0x34>)
 800c25c:	001c      	movs	r4, r3
 800c25e:	9301      	str	r3, [sp, #4]
 800c260:	9100      	str	r1, [sp, #0]
 800c262:	002b      	movs	r3, r5
 800c264:	4905      	ldr	r1, [pc, #20]	; (800c27c <__assert_func+0x38>)
 800c266:	9402      	str	r4, [sp, #8]
 800c268:	f000 feb4 	bl	800cfd4 <fiprintf>
 800c26c:	f001 fe40 	bl	800def0 <abort>
 800c270:	2000002c 	.word	0x2000002c
 800c274:	0800e7d8 	.word	0x0800e7d8
 800c278:	0800e813 	.word	0x0800e813
 800c27c:	0800e7e5 	.word	0x0800e7e5

0800c280 <quorem>:
 800c280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c282:	0006      	movs	r6, r0
 800c284:	690d      	ldr	r5, [r1, #16]
 800c286:	6933      	ldr	r3, [r6, #16]
 800c288:	b087      	sub	sp, #28
 800c28a:	2000      	movs	r0, #0
 800c28c:	9102      	str	r1, [sp, #8]
 800c28e:	42ab      	cmp	r3, r5
 800c290:	db6b      	blt.n	800c36a <quorem+0xea>
 800c292:	000b      	movs	r3, r1
 800c294:	3d01      	subs	r5, #1
 800c296:	00ac      	lsls	r4, r5, #2
 800c298:	3314      	adds	r3, #20
 800c29a:	9305      	str	r3, [sp, #20]
 800c29c:	191b      	adds	r3, r3, r4
 800c29e:	9303      	str	r3, [sp, #12]
 800c2a0:	0033      	movs	r3, r6
 800c2a2:	3314      	adds	r3, #20
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	191c      	adds	r4, r3, r4
 800c2a8:	9b03      	ldr	r3, [sp, #12]
 800c2aa:	6827      	ldr	r7, [r4, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	0038      	movs	r0, r7
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	0019      	movs	r1, r3
 800c2b6:	9304      	str	r3, [sp, #16]
 800c2b8:	f7f3 ff40 	bl	800013c <__udivsi3>
 800c2bc:	9b04      	ldr	r3, [sp, #16]
 800c2be:	9000      	str	r0, [sp, #0]
 800c2c0:	429f      	cmp	r7, r3
 800c2c2:	d329      	bcc.n	800c318 <quorem+0x98>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	469c      	mov	ip, r3
 800c2c8:	9801      	ldr	r0, [sp, #4]
 800c2ca:	9f05      	ldr	r7, [sp, #20]
 800c2cc:	9304      	str	r3, [sp, #16]
 800c2ce:	cf08      	ldmia	r7!, {r3}
 800c2d0:	9a00      	ldr	r2, [sp, #0]
 800c2d2:	b299      	uxth	r1, r3
 800c2d4:	4351      	muls	r1, r2
 800c2d6:	0c1b      	lsrs	r3, r3, #16
 800c2d8:	4353      	muls	r3, r2
 800c2da:	4461      	add	r1, ip
 800c2dc:	0c0a      	lsrs	r2, r1, #16
 800c2de:	189b      	adds	r3, r3, r2
 800c2e0:	0c1a      	lsrs	r2, r3, #16
 800c2e2:	9305      	str	r3, [sp, #20]
 800c2e4:	6803      	ldr	r3, [r0, #0]
 800c2e6:	4694      	mov	ip, r2
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	9b04      	ldr	r3, [sp, #16]
 800c2ec:	b289      	uxth	r1, r1
 800c2ee:	18d2      	adds	r2, r2, r3
 800c2f0:	6803      	ldr	r3, [r0, #0]
 800c2f2:	1a52      	subs	r2, r2, r1
 800c2f4:	0c19      	lsrs	r1, r3, #16
 800c2f6:	466b      	mov	r3, sp
 800c2f8:	8a9b      	ldrh	r3, [r3, #20]
 800c2fa:	1acb      	subs	r3, r1, r3
 800c2fc:	1411      	asrs	r1, r2, #16
 800c2fe:	185b      	adds	r3, r3, r1
 800c300:	1419      	asrs	r1, r3, #16
 800c302:	b292      	uxth	r2, r2
 800c304:	041b      	lsls	r3, r3, #16
 800c306:	431a      	orrs	r2, r3
 800c308:	9b03      	ldr	r3, [sp, #12]
 800c30a:	9104      	str	r1, [sp, #16]
 800c30c:	c004      	stmia	r0!, {r2}
 800c30e:	42bb      	cmp	r3, r7
 800c310:	d2dd      	bcs.n	800c2ce <quorem+0x4e>
 800c312:	6823      	ldr	r3, [r4, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d02e      	beq.n	800c376 <quorem+0xf6>
 800c318:	0030      	movs	r0, r6
 800c31a:	9902      	ldr	r1, [sp, #8]
 800c31c:	f001 f922 	bl	800d564 <__mcmp>
 800c320:	2800      	cmp	r0, #0
 800c322:	db21      	blt.n	800c368 <quorem+0xe8>
 800c324:	0030      	movs	r0, r6
 800c326:	2400      	movs	r4, #0
 800c328:	9b00      	ldr	r3, [sp, #0]
 800c32a:	9902      	ldr	r1, [sp, #8]
 800c32c:	3301      	adds	r3, #1
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	3014      	adds	r0, #20
 800c332:	3114      	adds	r1, #20
 800c334:	6802      	ldr	r2, [r0, #0]
 800c336:	c908      	ldmia	r1!, {r3}
 800c338:	b292      	uxth	r2, r2
 800c33a:	1914      	adds	r4, r2, r4
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	1aa2      	subs	r2, r4, r2
 800c340:	6804      	ldr	r4, [r0, #0]
 800c342:	0c1b      	lsrs	r3, r3, #16
 800c344:	0c24      	lsrs	r4, r4, #16
 800c346:	1ae3      	subs	r3, r4, r3
 800c348:	1414      	asrs	r4, r2, #16
 800c34a:	191b      	adds	r3, r3, r4
 800c34c:	141c      	asrs	r4, r3, #16
 800c34e:	b292      	uxth	r2, r2
 800c350:	041b      	lsls	r3, r3, #16
 800c352:	4313      	orrs	r3, r2
 800c354:	c008      	stmia	r0!, {r3}
 800c356:	9b03      	ldr	r3, [sp, #12]
 800c358:	428b      	cmp	r3, r1
 800c35a:	d2eb      	bcs.n	800c334 <quorem+0xb4>
 800c35c:	9a01      	ldr	r2, [sp, #4]
 800c35e:	00ab      	lsls	r3, r5, #2
 800c360:	18d3      	adds	r3, r2, r3
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	2a00      	cmp	r2, #0
 800c366:	d010      	beq.n	800c38a <quorem+0x10a>
 800c368:	9800      	ldr	r0, [sp, #0]
 800c36a:	b007      	add	sp, #28
 800c36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d104      	bne.n	800c37e <quorem+0xfe>
 800c374:	3d01      	subs	r5, #1
 800c376:	9b01      	ldr	r3, [sp, #4]
 800c378:	3c04      	subs	r4, #4
 800c37a:	42a3      	cmp	r3, r4
 800c37c:	d3f7      	bcc.n	800c36e <quorem+0xee>
 800c37e:	6135      	str	r5, [r6, #16]
 800c380:	e7ca      	b.n	800c318 <quorem+0x98>
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	2a00      	cmp	r2, #0
 800c386:	d104      	bne.n	800c392 <quorem+0x112>
 800c388:	3d01      	subs	r5, #1
 800c38a:	9a01      	ldr	r2, [sp, #4]
 800c38c:	3b04      	subs	r3, #4
 800c38e:	429a      	cmp	r2, r3
 800c390:	d3f7      	bcc.n	800c382 <quorem+0x102>
 800c392:	6135      	str	r5, [r6, #16]
 800c394:	e7e8      	b.n	800c368 <quorem+0xe8>
	...

0800c398 <_dtoa_r>:
 800c398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c39a:	b09d      	sub	sp, #116	; 0x74
 800c39c:	9202      	str	r2, [sp, #8]
 800c39e:	9303      	str	r3, [sp, #12]
 800c3a0:	9b02      	ldr	r3, [sp, #8]
 800c3a2:	9c03      	ldr	r4, [sp, #12]
 800c3a4:	930a      	str	r3, [sp, #40]	; 0x28
 800c3a6:	940b      	str	r4, [sp, #44]	; 0x2c
 800c3a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c3aa:	0007      	movs	r7, r0
 800c3ac:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800c3ae:	2c00      	cmp	r4, #0
 800c3b0:	d10e      	bne.n	800c3d0 <_dtoa_r+0x38>
 800c3b2:	2010      	movs	r0, #16
 800c3b4:	f7ff f9d6 	bl	800b764 <malloc>
 800c3b8:	1e02      	subs	r2, r0, #0
 800c3ba:	6278      	str	r0, [r7, #36]	; 0x24
 800c3bc:	d104      	bne.n	800c3c8 <_dtoa_r+0x30>
 800c3be:	21ea      	movs	r1, #234	; 0xea
 800c3c0:	4bc0      	ldr	r3, [pc, #768]	; (800c6c4 <_dtoa_r+0x32c>)
 800c3c2:	48c1      	ldr	r0, [pc, #772]	; (800c6c8 <_dtoa_r+0x330>)
 800c3c4:	f7ff ff3e 	bl	800c244 <__assert_func>
 800c3c8:	6044      	str	r4, [r0, #4]
 800c3ca:	6084      	str	r4, [r0, #8]
 800c3cc:	6004      	str	r4, [r0, #0]
 800c3ce:	60c4      	str	r4, [r0, #12]
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	6819      	ldr	r1, [r3, #0]
 800c3d4:	2900      	cmp	r1, #0
 800c3d6:	d00a      	beq.n	800c3ee <_dtoa_r+0x56>
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	2301      	movs	r3, #1
 800c3dc:	4093      	lsls	r3, r2
 800c3de:	604a      	str	r2, [r1, #4]
 800c3e0:	608b      	str	r3, [r1, #8]
 800c3e2:	0038      	movs	r0, r7
 800c3e4:	f000 fe7c 	bl	800d0e0 <_Bfree>
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	9b03      	ldr	r3, [sp, #12]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	da21      	bge.n	800c438 <_dtoa_r+0xa0>
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	602b      	str	r3, [r5, #0]
 800c3f8:	9b03      	ldr	r3, [sp, #12]
 800c3fa:	005b      	lsls	r3, r3, #1
 800c3fc:	085b      	lsrs	r3, r3, #1
 800c3fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800c400:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c402:	4bb2      	ldr	r3, [pc, #712]	; (800c6cc <_dtoa_r+0x334>)
 800c404:	002a      	movs	r2, r5
 800c406:	9318      	str	r3, [sp, #96]	; 0x60
 800c408:	401a      	ands	r2, r3
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d117      	bne.n	800c43e <_dtoa_r+0xa6>
 800c40e:	4bb0      	ldr	r3, [pc, #704]	; (800c6d0 <_dtoa_r+0x338>)
 800c410:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c412:	0328      	lsls	r0, r5, #12
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	9b02      	ldr	r3, [sp, #8]
 800c418:	0b00      	lsrs	r0, r0, #12
 800c41a:	4318      	orrs	r0, r3
 800c41c:	d101      	bne.n	800c422 <_dtoa_r+0x8a>
 800c41e:	f000 fdc3 	bl	800cfa8 <_dtoa_r+0xc10>
 800c422:	48ac      	ldr	r0, [pc, #688]	; (800c6d4 <_dtoa_r+0x33c>)
 800c424:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c426:	9005      	str	r0, [sp, #20]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d002      	beq.n	800c432 <_dtoa_r+0x9a>
 800c42c:	4baa      	ldr	r3, [pc, #680]	; (800c6d8 <_dtoa_r+0x340>)
 800c42e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c430:	6013      	str	r3, [r2, #0]
 800c432:	9805      	ldr	r0, [sp, #20]
 800c434:	b01d      	add	sp, #116	; 0x74
 800c436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c438:	2300      	movs	r3, #0
 800c43a:	602b      	str	r3, [r5, #0]
 800c43c:	e7e0      	b.n	800c400 <_dtoa_r+0x68>
 800c43e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c440:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c442:	9312      	str	r3, [sp, #72]	; 0x48
 800c444:	9413      	str	r4, [sp, #76]	; 0x4c
 800c446:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c448:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c44a:	2200      	movs	r2, #0
 800c44c:	2300      	movs	r3, #0
 800c44e:	f7f3 fffb 	bl	8000448 <__aeabi_dcmpeq>
 800c452:	1e04      	subs	r4, r0, #0
 800c454:	d00b      	beq.n	800c46e <_dtoa_r+0xd6>
 800c456:	2301      	movs	r3, #1
 800c458:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c45a:	6013      	str	r3, [r2, #0]
 800c45c:	4b9f      	ldr	r3, [pc, #636]	; (800c6dc <_dtoa_r+0x344>)
 800c45e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c460:	9305      	str	r3, [sp, #20]
 800c462:	2a00      	cmp	r2, #0
 800c464:	d0e5      	beq.n	800c432 <_dtoa_r+0x9a>
 800c466:	4a9e      	ldr	r2, [pc, #632]	; (800c6e0 <_dtoa_r+0x348>)
 800c468:	9926      	ldr	r1, [sp, #152]	; 0x98
 800c46a:	600a      	str	r2, [r1, #0]
 800c46c:	e7e1      	b.n	800c432 <_dtoa_r+0x9a>
 800c46e:	ab1a      	add	r3, sp, #104	; 0x68
 800c470:	9301      	str	r3, [sp, #4]
 800c472:	ab1b      	add	r3, sp, #108	; 0x6c
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	0038      	movs	r0, r7
 800c478:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c47a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c47c:	f001 f926 	bl	800d6cc <__d2b>
 800c480:	006e      	lsls	r6, r5, #1
 800c482:	9004      	str	r0, [sp, #16]
 800c484:	0d76      	lsrs	r6, r6, #21
 800c486:	d100      	bne.n	800c48a <_dtoa_r+0xf2>
 800c488:	e07c      	b.n	800c584 <_dtoa_r+0x1ec>
 800c48a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c48c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c48e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c490:	4a94      	ldr	r2, [pc, #592]	; (800c6e4 <_dtoa_r+0x34c>)
 800c492:	031b      	lsls	r3, r3, #12
 800c494:	0b1b      	lsrs	r3, r3, #12
 800c496:	431a      	orrs	r2, r3
 800c498:	0011      	movs	r1, r2
 800c49a:	4b93      	ldr	r3, [pc, #588]	; (800c6e8 <_dtoa_r+0x350>)
 800c49c:	9416      	str	r4, [sp, #88]	; 0x58
 800c49e:	18f6      	adds	r6, r6, r3
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	4b92      	ldr	r3, [pc, #584]	; (800c6ec <_dtoa_r+0x354>)
 800c4a4:	f7f5 fb02 	bl	8001aac <__aeabi_dsub>
 800c4a8:	4a91      	ldr	r2, [pc, #580]	; (800c6f0 <_dtoa_r+0x358>)
 800c4aa:	4b92      	ldr	r3, [pc, #584]	; (800c6f4 <_dtoa_r+0x35c>)
 800c4ac:	f7f5 f892 	bl	80015d4 <__aeabi_dmul>
 800c4b0:	4a91      	ldr	r2, [pc, #580]	; (800c6f8 <_dtoa_r+0x360>)
 800c4b2:	4b92      	ldr	r3, [pc, #584]	; (800c6fc <_dtoa_r+0x364>)
 800c4b4:	f7f4 f91e 	bl	80006f4 <__aeabi_dadd>
 800c4b8:	0004      	movs	r4, r0
 800c4ba:	0030      	movs	r0, r6
 800c4bc:	000d      	movs	r5, r1
 800c4be:	f7f5 fedb 	bl	8002278 <__aeabi_i2d>
 800c4c2:	4a8f      	ldr	r2, [pc, #572]	; (800c700 <_dtoa_r+0x368>)
 800c4c4:	4b8f      	ldr	r3, [pc, #572]	; (800c704 <_dtoa_r+0x36c>)
 800c4c6:	f7f5 f885 	bl	80015d4 <__aeabi_dmul>
 800c4ca:	0002      	movs	r2, r0
 800c4cc:	000b      	movs	r3, r1
 800c4ce:	0020      	movs	r0, r4
 800c4d0:	0029      	movs	r1, r5
 800c4d2:	f7f4 f90f 	bl	80006f4 <__aeabi_dadd>
 800c4d6:	0004      	movs	r4, r0
 800c4d8:	000d      	movs	r5, r1
 800c4da:	f7f5 fe97 	bl	800220c <__aeabi_d2iz>
 800c4de:	2200      	movs	r2, #0
 800c4e0:	9002      	str	r0, [sp, #8]
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	0020      	movs	r0, r4
 800c4e6:	0029      	movs	r1, r5
 800c4e8:	f7f3 ffb4 	bl	8000454 <__aeabi_dcmplt>
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	d00b      	beq.n	800c508 <_dtoa_r+0x170>
 800c4f0:	9802      	ldr	r0, [sp, #8]
 800c4f2:	f7f5 fec1 	bl	8002278 <__aeabi_i2d>
 800c4f6:	002b      	movs	r3, r5
 800c4f8:	0022      	movs	r2, r4
 800c4fa:	f7f3 ffa5 	bl	8000448 <__aeabi_dcmpeq>
 800c4fe:	4243      	negs	r3, r0
 800c500:	4158      	adcs	r0, r3
 800c502:	9b02      	ldr	r3, [sp, #8]
 800c504:	1a1b      	subs	r3, r3, r0
 800c506:	9302      	str	r3, [sp, #8]
 800c508:	2301      	movs	r3, #1
 800c50a:	9315      	str	r3, [sp, #84]	; 0x54
 800c50c:	9b02      	ldr	r3, [sp, #8]
 800c50e:	2b16      	cmp	r3, #22
 800c510:	d80f      	bhi.n	800c532 <_dtoa_r+0x19a>
 800c512:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c514:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c516:	00da      	lsls	r2, r3, #3
 800c518:	4b7b      	ldr	r3, [pc, #492]	; (800c708 <_dtoa_r+0x370>)
 800c51a:	189b      	adds	r3, r3, r2
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	f7f3 ff98 	bl	8000454 <__aeabi_dcmplt>
 800c524:	2800      	cmp	r0, #0
 800c526:	d049      	beq.n	800c5bc <_dtoa_r+0x224>
 800c528:	9b02      	ldr	r3, [sp, #8]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	9302      	str	r3, [sp, #8]
 800c52e:	2300      	movs	r3, #0
 800c530:	9315      	str	r3, [sp, #84]	; 0x54
 800c532:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c534:	1b9e      	subs	r6, r3, r6
 800c536:	2300      	movs	r3, #0
 800c538:	9308      	str	r3, [sp, #32]
 800c53a:	0033      	movs	r3, r6
 800c53c:	3b01      	subs	r3, #1
 800c53e:	930d      	str	r3, [sp, #52]	; 0x34
 800c540:	d504      	bpl.n	800c54c <_dtoa_r+0x1b4>
 800c542:	2301      	movs	r3, #1
 800c544:	1b9b      	subs	r3, r3, r6
 800c546:	9308      	str	r3, [sp, #32]
 800c548:	2300      	movs	r3, #0
 800c54a:	930d      	str	r3, [sp, #52]	; 0x34
 800c54c:	9b02      	ldr	r3, [sp, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	db36      	blt.n	800c5c0 <_dtoa_r+0x228>
 800c552:	9a02      	ldr	r2, [sp, #8]
 800c554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c556:	4694      	mov	ip, r2
 800c558:	4463      	add	r3, ip
 800c55a:	930d      	str	r3, [sp, #52]	; 0x34
 800c55c:	2300      	movs	r3, #0
 800c55e:	9214      	str	r2, [sp, #80]	; 0x50
 800c560:	930e      	str	r3, [sp, #56]	; 0x38
 800c562:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c564:	2401      	movs	r4, #1
 800c566:	2b09      	cmp	r3, #9
 800c568:	d862      	bhi.n	800c630 <_dtoa_r+0x298>
 800c56a:	2b05      	cmp	r3, #5
 800c56c:	dd02      	ble.n	800c574 <_dtoa_r+0x1dc>
 800c56e:	2400      	movs	r4, #0
 800c570:	3b04      	subs	r3, #4
 800c572:	9322      	str	r3, [sp, #136]	; 0x88
 800c574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c576:	1e98      	subs	r0, r3, #2
 800c578:	2803      	cmp	r0, #3
 800c57a:	d862      	bhi.n	800c642 <_dtoa_r+0x2aa>
 800c57c:	f7f3 fdca 	bl	8000114 <__gnu_thumb1_case_uqi>
 800c580:	56343629 	.word	0x56343629
 800c584:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c586:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c588:	189e      	adds	r6, r3, r2
 800c58a:	4b60      	ldr	r3, [pc, #384]	; (800c70c <_dtoa_r+0x374>)
 800c58c:	18f2      	adds	r2, r6, r3
 800c58e:	2a20      	cmp	r2, #32
 800c590:	dd0f      	ble.n	800c5b2 <_dtoa_r+0x21a>
 800c592:	2340      	movs	r3, #64	; 0x40
 800c594:	1a9b      	subs	r3, r3, r2
 800c596:	409d      	lsls	r5, r3
 800c598:	4b5d      	ldr	r3, [pc, #372]	; (800c710 <_dtoa_r+0x378>)
 800c59a:	9802      	ldr	r0, [sp, #8]
 800c59c:	18f3      	adds	r3, r6, r3
 800c59e:	40d8      	lsrs	r0, r3
 800c5a0:	4328      	orrs	r0, r5
 800c5a2:	f7f5 fe99 	bl	80022d8 <__aeabi_ui2d>
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	4c5a      	ldr	r4, [pc, #360]	; (800c714 <_dtoa_r+0x37c>)
 800c5aa:	3e01      	subs	r6, #1
 800c5ac:	1909      	adds	r1, r1, r4
 800c5ae:	9316      	str	r3, [sp, #88]	; 0x58
 800c5b0:	e776      	b.n	800c4a0 <_dtoa_r+0x108>
 800c5b2:	2320      	movs	r3, #32
 800c5b4:	9802      	ldr	r0, [sp, #8]
 800c5b6:	1a9b      	subs	r3, r3, r2
 800c5b8:	4098      	lsls	r0, r3
 800c5ba:	e7f2      	b.n	800c5a2 <_dtoa_r+0x20a>
 800c5bc:	9015      	str	r0, [sp, #84]	; 0x54
 800c5be:	e7b8      	b.n	800c532 <_dtoa_r+0x19a>
 800c5c0:	9b08      	ldr	r3, [sp, #32]
 800c5c2:	9a02      	ldr	r2, [sp, #8]
 800c5c4:	1a9b      	subs	r3, r3, r2
 800c5c6:	9308      	str	r3, [sp, #32]
 800c5c8:	4253      	negs	r3, r2
 800c5ca:	930e      	str	r3, [sp, #56]	; 0x38
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	9314      	str	r3, [sp, #80]	; 0x50
 800c5d0:	e7c7      	b.n	800c562 <_dtoa_r+0x1ca>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	dc36      	bgt.n	800c64a <_dtoa_r+0x2b2>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	001a      	movs	r2, r3
 800c5e0:	930c      	str	r3, [sp, #48]	; 0x30
 800c5e2:	9306      	str	r3, [sp, #24]
 800c5e4:	9223      	str	r2, [sp, #140]	; 0x8c
 800c5e6:	e00d      	b.n	800c604 <_dtoa_r+0x26c>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e7f3      	b.n	800c5d4 <_dtoa_r+0x23c>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c5f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5f2:	4694      	mov	ip, r2
 800c5f4:	9b02      	ldr	r3, [sp, #8]
 800c5f6:	4463      	add	r3, ip
 800c5f8:	930c      	str	r3, [sp, #48]	; 0x30
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	9306      	str	r3, [sp, #24]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	dc00      	bgt.n	800c604 <_dtoa_r+0x26c>
 800c602:	2301      	movs	r3, #1
 800c604:	2200      	movs	r2, #0
 800c606:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c608:	6042      	str	r2, [r0, #4]
 800c60a:	3204      	adds	r2, #4
 800c60c:	0015      	movs	r5, r2
 800c60e:	3514      	adds	r5, #20
 800c610:	6841      	ldr	r1, [r0, #4]
 800c612:	429d      	cmp	r5, r3
 800c614:	d91d      	bls.n	800c652 <_dtoa_r+0x2ba>
 800c616:	0038      	movs	r0, r7
 800c618:	f000 fd1e 	bl	800d058 <_Balloc>
 800c61c:	9005      	str	r0, [sp, #20]
 800c61e:	2800      	cmp	r0, #0
 800c620:	d11b      	bne.n	800c65a <_dtoa_r+0x2c2>
 800c622:	21d5      	movs	r1, #213	; 0xd5
 800c624:	0002      	movs	r2, r0
 800c626:	4b3c      	ldr	r3, [pc, #240]	; (800c718 <_dtoa_r+0x380>)
 800c628:	0049      	lsls	r1, r1, #1
 800c62a:	e6ca      	b.n	800c3c2 <_dtoa_r+0x2a>
 800c62c:	2301      	movs	r3, #1
 800c62e:	e7de      	b.n	800c5ee <_dtoa_r+0x256>
 800c630:	2300      	movs	r3, #0
 800c632:	940f      	str	r4, [sp, #60]	; 0x3c
 800c634:	9322      	str	r3, [sp, #136]	; 0x88
 800c636:	3b01      	subs	r3, #1
 800c638:	930c      	str	r3, [sp, #48]	; 0x30
 800c63a:	9306      	str	r3, [sp, #24]
 800c63c:	2200      	movs	r2, #0
 800c63e:	3313      	adds	r3, #19
 800c640:	e7d0      	b.n	800c5e4 <_dtoa_r+0x24c>
 800c642:	2301      	movs	r3, #1
 800c644:	930f      	str	r3, [sp, #60]	; 0x3c
 800c646:	3b02      	subs	r3, #2
 800c648:	e7f6      	b.n	800c638 <_dtoa_r+0x2a0>
 800c64a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c64c:	930c      	str	r3, [sp, #48]	; 0x30
 800c64e:	9306      	str	r3, [sp, #24]
 800c650:	e7d8      	b.n	800c604 <_dtoa_r+0x26c>
 800c652:	3101      	adds	r1, #1
 800c654:	6041      	str	r1, [r0, #4]
 800c656:	0052      	lsls	r2, r2, #1
 800c658:	e7d8      	b.n	800c60c <_dtoa_r+0x274>
 800c65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65c:	9a05      	ldr	r2, [sp, #20]
 800c65e:	601a      	str	r2, [r3, #0]
 800c660:	9b06      	ldr	r3, [sp, #24]
 800c662:	2b0e      	cmp	r3, #14
 800c664:	d900      	bls.n	800c668 <_dtoa_r+0x2d0>
 800c666:	e0eb      	b.n	800c840 <_dtoa_r+0x4a8>
 800c668:	2c00      	cmp	r4, #0
 800c66a:	d100      	bne.n	800c66e <_dtoa_r+0x2d6>
 800c66c:	e0e8      	b.n	800c840 <_dtoa_r+0x4a8>
 800c66e:	9b02      	ldr	r3, [sp, #8]
 800c670:	2b00      	cmp	r3, #0
 800c672:	dd68      	ble.n	800c746 <_dtoa_r+0x3ae>
 800c674:	001a      	movs	r2, r3
 800c676:	210f      	movs	r1, #15
 800c678:	4b23      	ldr	r3, [pc, #140]	; (800c708 <_dtoa_r+0x370>)
 800c67a:	400a      	ands	r2, r1
 800c67c:	00d2      	lsls	r2, r2, #3
 800c67e:	189b      	adds	r3, r3, r2
 800c680:	681d      	ldr	r5, [r3, #0]
 800c682:	685e      	ldr	r6, [r3, #4]
 800c684:	9b02      	ldr	r3, [sp, #8]
 800c686:	111c      	asrs	r4, r3, #4
 800c688:	2302      	movs	r3, #2
 800c68a:	9310      	str	r3, [sp, #64]	; 0x40
 800c68c:	9b02      	ldr	r3, [sp, #8]
 800c68e:	05db      	lsls	r3, r3, #23
 800c690:	d50b      	bpl.n	800c6aa <_dtoa_r+0x312>
 800c692:	4b22      	ldr	r3, [pc, #136]	; (800c71c <_dtoa_r+0x384>)
 800c694:	400c      	ands	r4, r1
 800c696:	6a1a      	ldr	r2, [r3, #32]
 800c698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c69c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c69e:	f7f4 fb93 	bl	8000dc8 <__aeabi_ddiv>
 800c6a2:	2303      	movs	r3, #3
 800c6a4:	900a      	str	r0, [sp, #40]	; 0x28
 800c6a6:	910b      	str	r1, [sp, #44]	; 0x2c
 800c6a8:	9310      	str	r3, [sp, #64]	; 0x40
 800c6aa:	4b1c      	ldr	r3, [pc, #112]	; (800c71c <_dtoa_r+0x384>)
 800c6ac:	9307      	str	r3, [sp, #28]
 800c6ae:	2c00      	cmp	r4, #0
 800c6b0:	d136      	bne.n	800c720 <_dtoa_r+0x388>
 800c6b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c6b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c6b6:	002a      	movs	r2, r5
 800c6b8:	0033      	movs	r3, r6
 800c6ba:	f7f4 fb85 	bl	8000dc8 <__aeabi_ddiv>
 800c6be:	900a      	str	r0, [sp, #40]	; 0x28
 800c6c0:	910b      	str	r1, [sp, #44]	; 0x2c
 800c6c2:	e05c      	b.n	800c77e <_dtoa_r+0x3e6>
 800c6c4:	0800e922 	.word	0x0800e922
 800c6c8:	0800e939 	.word	0x0800e939
 800c6cc:	7ff00000 	.word	0x7ff00000
 800c6d0:	0000270f 	.word	0x0000270f
 800c6d4:	0800e91e 	.word	0x0800e91e
 800c6d8:	0800e921 	.word	0x0800e921
 800c6dc:	0800e7b4 	.word	0x0800e7b4
 800c6e0:	0800e7b5 	.word	0x0800e7b5
 800c6e4:	3ff00000 	.word	0x3ff00000
 800c6e8:	fffffc01 	.word	0xfffffc01
 800c6ec:	3ff80000 	.word	0x3ff80000
 800c6f0:	636f4361 	.word	0x636f4361
 800c6f4:	3fd287a7 	.word	0x3fd287a7
 800c6f8:	8b60c8b3 	.word	0x8b60c8b3
 800c6fc:	3fc68a28 	.word	0x3fc68a28
 800c700:	509f79fb 	.word	0x509f79fb
 800c704:	3fd34413 	.word	0x3fd34413
 800c708:	0800ea40 	.word	0x0800ea40
 800c70c:	00000432 	.word	0x00000432
 800c710:	00000412 	.word	0x00000412
 800c714:	fe100000 	.word	0xfe100000
 800c718:	0800e998 	.word	0x0800e998
 800c71c:	0800ea18 	.word	0x0800ea18
 800c720:	2301      	movs	r3, #1
 800c722:	421c      	tst	r4, r3
 800c724:	d00b      	beq.n	800c73e <_dtoa_r+0x3a6>
 800c726:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c728:	0028      	movs	r0, r5
 800c72a:	3301      	adds	r3, #1
 800c72c:	9310      	str	r3, [sp, #64]	; 0x40
 800c72e:	9b07      	ldr	r3, [sp, #28]
 800c730:	0031      	movs	r1, r6
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f7f4 ff4d 	bl	80015d4 <__aeabi_dmul>
 800c73a:	0005      	movs	r5, r0
 800c73c:	000e      	movs	r6, r1
 800c73e:	9b07      	ldr	r3, [sp, #28]
 800c740:	1064      	asrs	r4, r4, #1
 800c742:	3308      	adds	r3, #8
 800c744:	e7b2      	b.n	800c6ac <_dtoa_r+0x314>
 800c746:	2302      	movs	r3, #2
 800c748:	9310      	str	r3, [sp, #64]	; 0x40
 800c74a:	9b02      	ldr	r3, [sp, #8]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d016      	beq.n	800c77e <_dtoa_r+0x3e6>
 800c750:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c752:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c754:	425c      	negs	r4, r3
 800c756:	230f      	movs	r3, #15
 800c758:	4ab5      	ldr	r2, [pc, #724]	; (800ca30 <_dtoa_r+0x698>)
 800c75a:	4023      	ands	r3, r4
 800c75c:	00db      	lsls	r3, r3, #3
 800c75e:	18d3      	adds	r3, r2, r3
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	f7f4 ff36 	bl	80015d4 <__aeabi_dmul>
 800c768:	2601      	movs	r6, #1
 800c76a:	2300      	movs	r3, #0
 800c76c:	900a      	str	r0, [sp, #40]	; 0x28
 800c76e:	910b      	str	r1, [sp, #44]	; 0x2c
 800c770:	4db0      	ldr	r5, [pc, #704]	; (800ca34 <_dtoa_r+0x69c>)
 800c772:	1124      	asrs	r4, r4, #4
 800c774:	2c00      	cmp	r4, #0
 800c776:	d000      	beq.n	800c77a <_dtoa_r+0x3e2>
 800c778:	e094      	b.n	800c8a4 <_dtoa_r+0x50c>
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d19f      	bne.n	800c6be <_dtoa_r+0x326>
 800c77e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c780:	2b00      	cmp	r3, #0
 800c782:	d100      	bne.n	800c786 <_dtoa_r+0x3ee>
 800c784:	e09b      	b.n	800c8be <_dtoa_r+0x526>
 800c786:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c788:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c78a:	2200      	movs	r2, #0
 800c78c:	0020      	movs	r0, r4
 800c78e:	0029      	movs	r1, r5
 800c790:	4ba9      	ldr	r3, [pc, #676]	; (800ca38 <_dtoa_r+0x6a0>)
 800c792:	f7f3 fe5f 	bl	8000454 <__aeabi_dcmplt>
 800c796:	2800      	cmp	r0, #0
 800c798:	d100      	bne.n	800c79c <_dtoa_r+0x404>
 800c79a:	e090      	b.n	800c8be <_dtoa_r+0x526>
 800c79c:	9b06      	ldr	r3, [sp, #24]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d100      	bne.n	800c7a4 <_dtoa_r+0x40c>
 800c7a2:	e08c      	b.n	800c8be <_dtoa_r+0x526>
 800c7a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	dd46      	ble.n	800c838 <_dtoa_r+0x4a0>
 800c7aa:	9b02      	ldr	r3, [sp, #8]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	0020      	movs	r0, r4
 800c7b0:	0029      	movs	r1, r5
 800c7b2:	1e5e      	subs	r6, r3, #1
 800c7b4:	4ba1      	ldr	r3, [pc, #644]	; (800ca3c <_dtoa_r+0x6a4>)
 800c7b6:	f7f4 ff0d 	bl	80015d4 <__aeabi_dmul>
 800c7ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7bc:	900a      	str	r0, [sp, #40]	; 0x28
 800c7be:	910b      	str	r1, [sp, #44]	; 0x2c
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	9310      	str	r3, [sp, #64]	; 0x40
 800c7c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c7c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c7ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c7cc:	9307      	str	r3, [sp, #28]
 800c7ce:	f7f5 fd53 	bl	8002278 <__aeabi_i2d>
 800c7d2:	0022      	movs	r2, r4
 800c7d4:	002b      	movs	r3, r5
 800c7d6:	f7f4 fefd 	bl	80015d4 <__aeabi_dmul>
 800c7da:	2200      	movs	r2, #0
 800c7dc:	4b98      	ldr	r3, [pc, #608]	; (800ca40 <_dtoa_r+0x6a8>)
 800c7de:	f7f3 ff89 	bl	80006f4 <__aeabi_dadd>
 800c7e2:	9010      	str	r0, [sp, #64]	; 0x40
 800c7e4:	9111      	str	r1, [sp, #68]	; 0x44
 800c7e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7ea:	920a      	str	r2, [sp, #40]	; 0x28
 800c7ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7ee:	4a95      	ldr	r2, [pc, #596]	; (800ca44 <_dtoa_r+0x6ac>)
 800c7f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7f2:	4694      	mov	ip, r2
 800c7f4:	4463      	add	r3, ip
 800c7f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c7f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7fa:	9b07      	ldr	r3, [sp, #28]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d161      	bne.n	800c8c4 <_dtoa_r+0x52c>
 800c800:	2200      	movs	r2, #0
 800c802:	0020      	movs	r0, r4
 800c804:	0029      	movs	r1, r5
 800c806:	4b90      	ldr	r3, [pc, #576]	; (800ca48 <_dtoa_r+0x6b0>)
 800c808:	f7f5 f950 	bl	8001aac <__aeabi_dsub>
 800c80c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c80e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c810:	0004      	movs	r4, r0
 800c812:	000d      	movs	r5, r1
 800c814:	f7f3 fe32 	bl	800047c <__aeabi_dcmpgt>
 800c818:	2800      	cmp	r0, #0
 800c81a:	d000      	beq.n	800c81e <_dtoa_r+0x486>
 800c81c:	e2b5      	b.n	800cd8a <_dtoa_r+0x9f2>
 800c81e:	488b      	ldr	r0, [pc, #556]	; (800ca4c <_dtoa_r+0x6b4>)
 800c820:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c822:	4684      	mov	ip, r0
 800c824:	4461      	add	r1, ip
 800c826:	000b      	movs	r3, r1
 800c828:	0020      	movs	r0, r4
 800c82a:	0029      	movs	r1, r5
 800c82c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c82e:	f7f3 fe11 	bl	8000454 <__aeabi_dcmplt>
 800c832:	2800      	cmp	r0, #0
 800c834:	d000      	beq.n	800c838 <_dtoa_r+0x4a0>
 800c836:	e2a5      	b.n	800cd84 <_dtoa_r+0x9ec>
 800c838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c83a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c83c:	930a      	str	r3, [sp, #40]	; 0x28
 800c83e:	940b      	str	r4, [sp, #44]	; 0x2c
 800c840:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c842:	2b00      	cmp	r3, #0
 800c844:	da00      	bge.n	800c848 <_dtoa_r+0x4b0>
 800c846:	e171      	b.n	800cb2c <_dtoa_r+0x794>
 800c848:	9a02      	ldr	r2, [sp, #8]
 800c84a:	2a0e      	cmp	r2, #14
 800c84c:	dd00      	ble.n	800c850 <_dtoa_r+0x4b8>
 800c84e:	e16d      	b.n	800cb2c <_dtoa_r+0x794>
 800c850:	4b77      	ldr	r3, [pc, #476]	; (800ca30 <_dtoa_r+0x698>)
 800c852:	00d2      	lsls	r2, r2, #3
 800c854:	189b      	adds	r3, r3, r2
 800c856:	685c      	ldr	r4, [r3, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	9308      	str	r3, [sp, #32]
 800c85c:	9409      	str	r4, [sp, #36]	; 0x24
 800c85e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c860:	2b00      	cmp	r3, #0
 800c862:	db00      	blt.n	800c866 <_dtoa_r+0x4ce>
 800c864:	e0f6      	b.n	800ca54 <_dtoa_r+0x6bc>
 800c866:	9b06      	ldr	r3, [sp, #24]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	dd00      	ble.n	800c86e <_dtoa_r+0x4d6>
 800c86c:	e0f2      	b.n	800ca54 <_dtoa_r+0x6bc>
 800c86e:	d000      	beq.n	800c872 <_dtoa_r+0x4da>
 800c870:	e288      	b.n	800cd84 <_dtoa_r+0x9ec>
 800c872:	9808      	ldr	r0, [sp, #32]
 800c874:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c876:	2200      	movs	r2, #0
 800c878:	4b73      	ldr	r3, [pc, #460]	; (800ca48 <_dtoa_r+0x6b0>)
 800c87a:	f7f4 feab 	bl	80015d4 <__aeabi_dmul>
 800c87e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c882:	f7f3 fe05 	bl	8000490 <__aeabi_dcmpge>
 800c886:	9e06      	ldr	r6, [sp, #24]
 800c888:	0035      	movs	r5, r6
 800c88a:	2800      	cmp	r0, #0
 800c88c:	d000      	beq.n	800c890 <_dtoa_r+0x4f8>
 800c88e:	e25f      	b.n	800cd50 <_dtoa_r+0x9b8>
 800c890:	9b05      	ldr	r3, [sp, #20]
 800c892:	9a05      	ldr	r2, [sp, #20]
 800c894:	3301      	adds	r3, #1
 800c896:	9307      	str	r3, [sp, #28]
 800c898:	2331      	movs	r3, #49	; 0x31
 800c89a:	7013      	strb	r3, [r2, #0]
 800c89c:	9b02      	ldr	r3, [sp, #8]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	9302      	str	r3, [sp, #8]
 800c8a2:	e25a      	b.n	800cd5a <_dtoa_r+0x9c2>
 800c8a4:	4234      	tst	r4, r6
 800c8a6:	d007      	beq.n	800c8b8 <_dtoa_r+0x520>
 800c8a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	9310      	str	r3, [sp, #64]	; 0x40
 800c8ae:	682a      	ldr	r2, [r5, #0]
 800c8b0:	686b      	ldr	r3, [r5, #4]
 800c8b2:	f7f4 fe8f 	bl	80015d4 <__aeabi_dmul>
 800c8b6:	0033      	movs	r3, r6
 800c8b8:	1064      	asrs	r4, r4, #1
 800c8ba:	3508      	adds	r5, #8
 800c8bc:	e75a      	b.n	800c774 <_dtoa_r+0x3dc>
 800c8be:	9e02      	ldr	r6, [sp, #8]
 800c8c0:	9b06      	ldr	r3, [sp, #24]
 800c8c2:	e780      	b.n	800c7c6 <_dtoa_r+0x42e>
 800c8c4:	9b07      	ldr	r3, [sp, #28]
 800c8c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c8c8:	1e5a      	subs	r2, r3, #1
 800c8ca:	4b59      	ldr	r3, [pc, #356]	; (800ca30 <_dtoa_r+0x698>)
 800c8cc:	00d2      	lsls	r2, r2, #3
 800c8ce:	189b      	adds	r3, r3, r2
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	2900      	cmp	r1, #0
 800c8d6:	d051      	beq.n	800c97c <_dtoa_r+0x5e4>
 800c8d8:	2000      	movs	r0, #0
 800c8da:	495d      	ldr	r1, [pc, #372]	; (800ca50 <_dtoa_r+0x6b8>)
 800c8dc:	f7f4 fa74 	bl	8000dc8 <__aeabi_ddiv>
 800c8e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8e4:	f7f5 f8e2 	bl	8001aac <__aeabi_dsub>
 800c8e8:	9a05      	ldr	r2, [sp, #20]
 800c8ea:	9b05      	ldr	r3, [sp, #20]
 800c8ec:	4694      	mov	ip, r2
 800c8ee:	9310      	str	r3, [sp, #64]	; 0x40
 800c8f0:	9b07      	ldr	r3, [sp, #28]
 800c8f2:	900a      	str	r0, [sp, #40]	; 0x28
 800c8f4:	910b      	str	r1, [sp, #44]	; 0x2c
 800c8f6:	4463      	add	r3, ip
 800c8f8:	9319      	str	r3, [sp, #100]	; 0x64
 800c8fa:	0029      	movs	r1, r5
 800c8fc:	0020      	movs	r0, r4
 800c8fe:	f7f5 fc85 	bl	800220c <__aeabi_d2iz>
 800c902:	9017      	str	r0, [sp, #92]	; 0x5c
 800c904:	f7f5 fcb8 	bl	8002278 <__aeabi_i2d>
 800c908:	0002      	movs	r2, r0
 800c90a:	000b      	movs	r3, r1
 800c90c:	0020      	movs	r0, r4
 800c90e:	0029      	movs	r1, r5
 800c910:	f7f5 f8cc 	bl	8001aac <__aeabi_dsub>
 800c914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c916:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c918:	3301      	adds	r3, #1
 800c91a:	9307      	str	r3, [sp, #28]
 800c91c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c91e:	0004      	movs	r4, r0
 800c920:	3330      	adds	r3, #48	; 0x30
 800c922:	7013      	strb	r3, [r2, #0]
 800c924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c928:	000d      	movs	r5, r1
 800c92a:	f7f3 fd93 	bl	8000454 <__aeabi_dcmplt>
 800c92e:	2800      	cmp	r0, #0
 800c930:	d175      	bne.n	800ca1e <_dtoa_r+0x686>
 800c932:	0022      	movs	r2, r4
 800c934:	002b      	movs	r3, r5
 800c936:	2000      	movs	r0, #0
 800c938:	493f      	ldr	r1, [pc, #252]	; (800ca38 <_dtoa_r+0x6a0>)
 800c93a:	f7f5 f8b7 	bl	8001aac <__aeabi_dsub>
 800c93e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c942:	f7f3 fd87 	bl	8000454 <__aeabi_dcmplt>
 800c946:	2800      	cmp	r0, #0
 800c948:	d000      	beq.n	800c94c <_dtoa_r+0x5b4>
 800c94a:	e0d1      	b.n	800caf0 <_dtoa_r+0x758>
 800c94c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c94e:	9a07      	ldr	r2, [sp, #28]
 800c950:	4293      	cmp	r3, r2
 800c952:	d100      	bne.n	800c956 <_dtoa_r+0x5be>
 800c954:	e770      	b.n	800c838 <_dtoa_r+0x4a0>
 800c956:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c958:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c95a:	2200      	movs	r2, #0
 800c95c:	4b37      	ldr	r3, [pc, #220]	; (800ca3c <_dtoa_r+0x6a4>)
 800c95e:	f7f4 fe39 	bl	80015d4 <__aeabi_dmul>
 800c962:	4b36      	ldr	r3, [pc, #216]	; (800ca3c <_dtoa_r+0x6a4>)
 800c964:	900a      	str	r0, [sp, #40]	; 0x28
 800c966:	910b      	str	r1, [sp, #44]	; 0x2c
 800c968:	2200      	movs	r2, #0
 800c96a:	0020      	movs	r0, r4
 800c96c:	0029      	movs	r1, r5
 800c96e:	f7f4 fe31 	bl	80015d4 <__aeabi_dmul>
 800c972:	9b07      	ldr	r3, [sp, #28]
 800c974:	0004      	movs	r4, r0
 800c976:	000d      	movs	r5, r1
 800c978:	9310      	str	r3, [sp, #64]	; 0x40
 800c97a:	e7be      	b.n	800c8fa <_dtoa_r+0x562>
 800c97c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c97e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c980:	f7f4 fe28 	bl	80015d4 <__aeabi_dmul>
 800c984:	9a05      	ldr	r2, [sp, #20]
 800c986:	9b05      	ldr	r3, [sp, #20]
 800c988:	4694      	mov	ip, r2
 800c98a:	930a      	str	r3, [sp, #40]	; 0x28
 800c98c:	9b07      	ldr	r3, [sp, #28]
 800c98e:	9010      	str	r0, [sp, #64]	; 0x40
 800c990:	9111      	str	r1, [sp, #68]	; 0x44
 800c992:	4463      	add	r3, ip
 800c994:	9319      	str	r3, [sp, #100]	; 0x64
 800c996:	0029      	movs	r1, r5
 800c998:	0020      	movs	r0, r4
 800c99a:	f7f5 fc37 	bl	800220c <__aeabi_d2iz>
 800c99e:	9017      	str	r0, [sp, #92]	; 0x5c
 800c9a0:	f7f5 fc6a 	bl	8002278 <__aeabi_i2d>
 800c9a4:	0002      	movs	r2, r0
 800c9a6:	000b      	movs	r3, r1
 800c9a8:	0020      	movs	r0, r4
 800c9aa:	0029      	movs	r1, r5
 800c9ac:	f7f5 f87e 	bl	8001aac <__aeabi_dsub>
 800c9b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9b4:	3330      	adds	r3, #48	; 0x30
 800c9b6:	7013      	strb	r3, [r2, #0]
 800c9b8:	0013      	movs	r3, r2
 800c9ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c9bc:	3301      	adds	r3, #1
 800c9be:	0004      	movs	r4, r0
 800c9c0:	000d      	movs	r5, r1
 800c9c2:	930a      	str	r3, [sp, #40]	; 0x28
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d12c      	bne.n	800ca22 <_dtoa_r+0x68a>
 800c9c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c9ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c9cc:	9a05      	ldr	r2, [sp, #20]
 800c9ce:	9b07      	ldr	r3, [sp, #28]
 800c9d0:	4694      	mov	ip, r2
 800c9d2:	4463      	add	r3, ip
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	9307      	str	r3, [sp, #28]
 800c9d8:	4b1d      	ldr	r3, [pc, #116]	; (800ca50 <_dtoa_r+0x6b8>)
 800c9da:	f7f3 fe8b 	bl	80006f4 <__aeabi_dadd>
 800c9de:	0002      	movs	r2, r0
 800c9e0:	000b      	movs	r3, r1
 800c9e2:	0020      	movs	r0, r4
 800c9e4:	0029      	movs	r1, r5
 800c9e6:	f7f3 fd49 	bl	800047c <__aeabi_dcmpgt>
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d000      	beq.n	800c9f0 <_dtoa_r+0x658>
 800c9ee:	e07f      	b.n	800caf0 <_dtoa_r+0x758>
 800c9f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	4916      	ldr	r1, [pc, #88]	; (800ca50 <_dtoa_r+0x6b8>)
 800c9f8:	f7f5 f858 	bl	8001aac <__aeabi_dsub>
 800c9fc:	0002      	movs	r2, r0
 800c9fe:	000b      	movs	r3, r1
 800ca00:	0020      	movs	r0, r4
 800ca02:	0029      	movs	r1, r5
 800ca04:	f7f3 fd26 	bl	8000454 <__aeabi_dcmplt>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d100      	bne.n	800ca0e <_dtoa_r+0x676>
 800ca0c:	e714      	b.n	800c838 <_dtoa_r+0x4a0>
 800ca0e:	9b07      	ldr	r3, [sp, #28]
 800ca10:	001a      	movs	r2, r3
 800ca12:	3a01      	subs	r2, #1
 800ca14:	9207      	str	r2, [sp, #28]
 800ca16:	7812      	ldrb	r2, [r2, #0]
 800ca18:	2a30      	cmp	r2, #48	; 0x30
 800ca1a:	d0f8      	beq.n	800ca0e <_dtoa_r+0x676>
 800ca1c:	9307      	str	r3, [sp, #28]
 800ca1e:	9602      	str	r6, [sp, #8]
 800ca20:	e054      	b.n	800cacc <_dtoa_r+0x734>
 800ca22:	2200      	movs	r2, #0
 800ca24:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <_dtoa_r+0x6a4>)
 800ca26:	f7f4 fdd5 	bl	80015d4 <__aeabi_dmul>
 800ca2a:	0004      	movs	r4, r0
 800ca2c:	000d      	movs	r5, r1
 800ca2e:	e7b2      	b.n	800c996 <_dtoa_r+0x5fe>
 800ca30:	0800ea40 	.word	0x0800ea40
 800ca34:	0800ea18 	.word	0x0800ea18
 800ca38:	3ff00000 	.word	0x3ff00000
 800ca3c:	40240000 	.word	0x40240000
 800ca40:	401c0000 	.word	0x401c0000
 800ca44:	fcc00000 	.word	0xfcc00000
 800ca48:	40140000 	.word	0x40140000
 800ca4c:	7cc00000 	.word	0x7cc00000
 800ca50:	3fe00000 	.word	0x3fe00000
 800ca54:	9b06      	ldr	r3, [sp, #24]
 800ca56:	9e05      	ldr	r6, [sp, #20]
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	199b      	adds	r3, r3, r6
 800ca5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ca5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ca60:	930a      	str	r3, [sp, #40]	; 0x28
 800ca62:	9a08      	ldr	r2, [sp, #32]
 800ca64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca66:	0020      	movs	r0, r4
 800ca68:	0029      	movs	r1, r5
 800ca6a:	f7f4 f9ad 	bl	8000dc8 <__aeabi_ddiv>
 800ca6e:	f7f5 fbcd 	bl	800220c <__aeabi_d2iz>
 800ca72:	9006      	str	r0, [sp, #24]
 800ca74:	f7f5 fc00 	bl	8002278 <__aeabi_i2d>
 800ca78:	9a08      	ldr	r2, [sp, #32]
 800ca7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca7c:	f7f4 fdaa 	bl	80015d4 <__aeabi_dmul>
 800ca80:	0002      	movs	r2, r0
 800ca82:	000b      	movs	r3, r1
 800ca84:	0020      	movs	r0, r4
 800ca86:	0029      	movs	r1, r5
 800ca88:	f7f5 f810 	bl	8001aac <__aeabi_dsub>
 800ca8c:	0033      	movs	r3, r6
 800ca8e:	9a06      	ldr	r2, [sp, #24]
 800ca90:	3601      	adds	r6, #1
 800ca92:	3230      	adds	r2, #48	; 0x30
 800ca94:	701a      	strb	r2, [r3, #0]
 800ca96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca98:	9607      	str	r6, [sp, #28]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d139      	bne.n	800cb12 <_dtoa_r+0x77a>
 800ca9e:	0002      	movs	r2, r0
 800caa0:	000b      	movs	r3, r1
 800caa2:	f7f3 fe27 	bl	80006f4 <__aeabi_dadd>
 800caa6:	9a08      	ldr	r2, [sp, #32]
 800caa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caaa:	0004      	movs	r4, r0
 800caac:	000d      	movs	r5, r1
 800caae:	f7f3 fce5 	bl	800047c <__aeabi_dcmpgt>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d11b      	bne.n	800caee <_dtoa_r+0x756>
 800cab6:	9a08      	ldr	r2, [sp, #32]
 800cab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caba:	0020      	movs	r0, r4
 800cabc:	0029      	movs	r1, r5
 800cabe:	f7f3 fcc3 	bl	8000448 <__aeabi_dcmpeq>
 800cac2:	2800      	cmp	r0, #0
 800cac4:	d002      	beq.n	800cacc <_dtoa_r+0x734>
 800cac6:	9b06      	ldr	r3, [sp, #24]
 800cac8:	07db      	lsls	r3, r3, #31
 800caca:	d410      	bmi.n	800caee <_dtoa_r+0x756>
 800cacc:	0038      	movs	r0, r7
 800cace:	9904      	ldr	r1, [sp, #16]
 800cad0:	f000 fb06 	bl	800d0e0 <_Bfree>
 800cad4:	2300      	movs	r3, #0
 800cad6:	9a07      	ldr	r2, [sp, #28]
 800cad8:	9802      	ldr	r0, [sp, #8]
 800cada:	7013      	strb	r3, [r2, #0]
 800cadc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cade:	3001      	adds	r0, #1
 800cae0:	6018      	str	r0, [r3, #0]
 800cae2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d100      	bne.n	800caea <_dtoa_r+0x752>
 800cae8:	e4a3      	b.n	800c432 <_dtoa_r+0x9a>
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	e4a1      	b.n	800c432 <_dtoa_r+0x9a>
 800caee:	9e02      	ldr	r6, [sp, #8]
 800caf0:	9b07      	ldr	r3, [sp, #28]
 800caf2:	9307      	str	r3, [sp, #28]
 800caf4:	3b01      	subs	r3, #1
 800caf6:	781a      	ldrb	r2, [r3, #0]
 800caf8:	2a39      	cmp	r2, #57	; 0x39
 800cafa:	d106      	bne.n	800cb0a <_dtoa_r+0x772>
 800cafc:	9a05      	ldr	r2, [sp, #20]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d1f7      	bne.n	800caf2 <_dtoa_r+0x75a>
 800cb02:	2230      	movs	r2, #48	; 0x30
 800cb04:	9905      	ldr	r1, [sp, #20]
 800cb06:	3601      	adds	r6, #1
 800cb08:	700a      	strb	r2, [r1, #0]
 800cb0a:	781a      	ldrb	r2, [r3, #0]
 800cb0c:	3201      	adds	r2, #1
 800cb0e:	701a      	strb	r2, [r3, #0]
 800cb10:	e785      	b.n	800ca1e <_dtoa_r+0x686>
 800cb12:	2200      	movs	r2, #0
 800cb14:	4bad      	ldr	r3, [pc, #692]	; (800cdcc <_dtoa_r+0xa34>)
 800cb16:	f7f4 fd5d 	bl	80015d4 <__aeabi_dmul>
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	0004      	movs	r4, r0
 800cb20:	000d      	movs	r5, r1
 800cb22:	f7f3 fc91 	bl	8000448 <__aeabi_dcmpeq>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d09b      	beq.n	800ca62 <_dtoa_r+0x6ca>
 800cb2a:	e7cf      	b.n	800cacc <_dtoa_r+0x734>
 800cb2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb2e:	2a00      	cmp	r2, #0
 800cb30:	d100      	bne.n	800cb34 <_dtoa_r+0x79c>
 800cb32:	e082      	b.n	800cc3a <_dtoa_r+0x8a2>
 800cb34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cb36:	2a01      	cmp	r2, #1
 800cb38:	dc66      	bgt.n	800cc08 <_dtoa_r+0x870>
 800cb3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cb3c:	2a00      	cmp	r2, #0
 800cb3e:	d05f      	beq.n	800cc00 <_dtoa_r+0x868>
 800cb40:	4aa3      	ldr	r2, [pc, #652]	; (800cdd0 <_dtoa_r+0xa38>)
 800cb42:	189b      	adds	r3, r3, r2
 800cb44:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800cb46:	9c08      	ldr	r4, [sp, #32]
 800cb48:	9a08      	ldr	r2, [sp, #32]
 800cb4a:	2101      	movs	r1, #1
 800cb4c:	18d2      	adds	r2, r2, r3
 800cb4e:	9208      	str	r2, [sp, #32]
 800cb50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb52:	0038      	movs	r0, r7
 800cb54:	18d3      	adds	r3, r2, r3
 800cb56:	930d      	str	r3, [sp, #52]	; 0x34
 800cb58:	f000 fb72 	bl	800d240 <__i2b>
 800cb5c:	0005      	movs	r5, r0
 800cb5e:	2c00      	cmp	r4, #0
 800cb60:	dd0e      	ble.n	800cb80 <_dtoa_r+0x7e8>
 800cb62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	dd0b      	ble.n	800cb80 <_dtoa_r+0x7e8>
 800cb68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb6a:	0023      	movs	r3, r4
 800cb6c:	4294      	cmp	r4, r2
 800cb6e:	dd00      	ble.n	800cb72 <_dtoa_r+0x7da>
 800cb70:	0013      	movs	r3, r2
 800cb72:	9a08      	ldr	r2, [sp, #32]
 800cb74:	1ae4      	subs	r4, r4, r3
 800cb76:	1ad2      	subs	r2, r2, r3
 800cb78:	9208      	str	r2, [sp, #32]
 800cb7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	930d      	str	r3, [sp, #52]	; 0x34
 800cb80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d01f      	beq.n	800cbc6 <_dtoa_r+0x82e>
 800cb86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d05a      	beq.n	800cc42 <_dtoa_r+0x8aa>
 800cb8c:	2e00      	cmp	r6, #0
 800cb8e:	dd11      	ble.n	800cbb4 <_dtoa_r+0x81c>
 800cb90:	0029      	movs	r1, r5
 800cb92:	0032      	movs	r2, r6
 800cb94:	0038      	movs	r0, r7
 800cb96:	f000 fc19 	bl	800d3cc <__pow5mult>
 800cb9a:	9a04      	ldr	r2, [sp, #16]
 800cb9c:	0001      	movs	r1, r0
 800cb9e:	0005      	movs	r5, r0
 800cba0:	0038      	movs	r0, r7
 800cba2:	f000 fb63 	bl	800d26c <__multiply>
 800cba6:	9904      	ldr	r1, [sp, #16]
 800cba8:	9007      	str	r0, [sp, #28]
 800cbaa:	0038      	movs	r0, r7
 800cbac:	f000 fa98 	bl	800d0e0 <_Bfree>
 800cbb0:	9b07      	ldr	r3, [sp, #28]
 800cbb2:	9304      	str	r3, [sp, #16]
 800cbb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbb6:	1b9a      	subs	r2, r3, r6
 800cbb8:	42b3      	cmp	r3, r6
 800cbba:	d004      	beq.n	800cbc6 <_dtoa_r+0x82e>
 800cbbc:	0038      	movs	r0, r7
 800cbbe:	9904      	ldr	r1, [sp, #16]
 800cbc0:	f000 fc04 	bl	800d3cc <__pow5mult>
 800cbc4:	9004      	str	r0, [sp, #16]
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	0038      	movs	r0, r7
 800cbca:	f000 fb39 	bl	800d240 <__i2b>
 800cbce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbd0:	0006      	movs	r6, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	dd37      	ble.n	800cc46 <_dtoa_r+0x8ae>
 800cbd6:	001a      	movs	r2, r3
 800cbd8:	0001      	movs	r1, r0
 800cbda:	0038      	movs	r0, r7
 800cbdc:	f000 fbf6 	bl	800d3cc <__pow5mult>
 800cbe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cbe2:	0006      	movs	r6, r0
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	dd33      	ble.n	800cc50 <_dtoa_r+0x8b8>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	9307      	str	r3, [sp, #28]
 800cbec:	6933      	ldr	r3, [r6, #16]
 800cbee:	3303      	adds	r3, #3
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	18f3      	adds	r3, r6, r3
 800cbf4:	6858      	ldr	r0, [r3, #4]
 800cbf6:	f000 fadb 	bl	800d1b0 <__hi0bits>
 800cbfa:	2320      	movs	r3, #32
 800cbfc:	1a18      	subs	r0, r3, r0
 800cbfe:	e03f      	b.n	800cc80 <_dtoa_r+0x8e8>
 800cc00:	2336      	movs	r3, #54	; 0x36
 800cc02:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cc04:	1a9b      	subs	r3, r3, r2
 800cc06:	e79d      	b.n	800cb44 <_dtoa_r+0x7ac>
 800cc08:	9b06      	ldr	r3, [sp, #24]
 800cc0a:	1e5e      	subs	r6, r3, #1
 800cc0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc0e:	42b3      	cmp	r3, r6
 800cc10:	db08      	blt.n	800cc24 <_dtoa_r+0x88c>
 800cc12:	1b9e      	subs	r6, r3, r6
 800cc14:	9b06      	ldr	r3, [sp, #24]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	da0c      	bge.n	800cc34 <_dtoa_r+0x89c>
 800cc1a:	9b08      	ldr	r3, [sp, #32]
 800cc1c:	9a06      	ldr	r2, [sp, #24]
 800cc1e:	1a9c      	subs	r4, r3, r2
 800cc20:	2300      	movs	r3, #0
 800cc22:	e791      	b.n	800cb48 <_dtoa_r+0x7b0>
 800cc24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc28:	1af3      	subs	r3, r6, r3
 800cc2a:	18d3      	adds	r3, r2, r3
 800cc2c:	960e      	str	r6, [sp, #56]	; 0x38
 800cc2e:	9314      	str	r3, [sp, #80]	; 0x50
 800cc30:	2600      	movs	r6, #0
 800cc32:	e7ef      	b.n	800cc14 <_dtoa_r+0x87c>
 800cc34:	9c08      	ldr	r4, [sp, #32]
 800cc36:	9b06      	ldr	r3, [sp, #24]
 800cc38:	e786      	b.n	800cb48 <_dtoa_r+0x7b0>
 800cc3a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800cc3c:	9c08      	ldr	r4, [sp, #32]
 800cc3e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc40:	e78d      	b.n	800cb5e <_dtoa_r+0x7c6>
 800cc42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc44:	e7ba      	b.n	800cbbc <_dtoa_r+0x824>
 800cc46:	2300      	movs	r3, #0
 800cc48:	9307      	str	r3, [sp, #28]
 800cc4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	dc13      	bgt.n	800cc78 <_dtoa_r+0x8e0>
 800cc50:	2300      	movs	r3, #0
 800cc52:	9307      	str	r3, [sp, #28]
 800cc54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d10e      	bne.n	800cc78 <_dtoa_r+0x8e0>
 800cc5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc5c:	031b      	lsls	r3, r3, #12
 800cc5e:	d10b      	bne.n	800cc78 <_dtoa_r+0x8e0>
 800cc60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cc62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc64:	4213      	tst	r3, r2
 800cc66:	d007      	beq.n	800cc78 <_dtoa_r+0x8e0>
 800cc68:	9b08      	ldr	r3, [sp, #32]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	9308      	str	r3, [sp, #32]
 800cc6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc70:	3301      	adds	r3, #1
 800cc72:	930d      	str	r3, [sp, #52]	; 0x34
 800cc74:	2301      	movs	r3, #1
 800cc76:	9307      	str	r3, [sp, #28]
 800cc78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc7a:	2001      	movs	r0, #1
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d1b5      	bne.n	800cbec <_dtoa_r+0x854>
 800cc80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc82:	221f      	movs	r2, #31
 800cc84:	1818      	adds	r0, r3, r0
 800cc86:	0003      	movs	r3, r0
 800cc88:	4013      	ands	r3, r2
 800cc8a:	4210      	tst	r0, r2
 800cc8c:	d046      	beq.n	800cd1c <_dtoa_r+0x984>
 800cc8e:	3201      	adds	r2, #1
 800cc90:	1ad2      	subs	r2, r2, r3
 800cc92:	2a04      	cmp	r2, #4
 800cc94:	dd3f      	ble.n	800cd16 <_dtoa_r+0x97e>
 800cc96:	221c      	movs	r2, #28
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	9a08      	ldr	r2, [sp, #32]
 800cc9c:	18e4      	adds	r4, r4, r3
 800cc9e:	18d2      	adds	r2, r2, r3
 800cca0:	9208      	str	r2, [sp, #32]
 800cca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cca4:	18d3      	adds	r3, r2, r3
 800cca6:	930d      	str	r3, [sp, #52]	; 0x34
 800cca8:	9b08      	ldr	r3, [sp, #32]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	dd05      	ble.n	800ccba <_dtoa_r+0x922>
 800ccae:	001a      	movs	r2, r3
 800ccb0:	0038      	movs	r0, r7
 800ccb2:	9904      	ldr	r1, [sp, #16]
 800ccb4:	f000 fbe6 	bl	800d484 <__lshift>
 800ccb8:	9004      	str	r0, [sp, #16]
 800ccba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	dd05      	ble.n	800cccc <_dtoa_r+0x934>
 800ccc0:	0031      	movs	r1, r6
 800ccc2:	001a      	movs	r2, r3
 800ccc4:	0038      	movs	r0, r7
 800ccc6:	f000 fbdd 	bl	800d484 <__lshift>
 800ccca:	0006      	movs	r6, r0
 800cccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d026      	beq.n	800cd20 <_dtoa_r+0x988>
 800ccd2:	0031      	movs	r1, r6
 800ccd4:	9804      	ldr	r0, [sp, #16]
 800ccd6:	f000 fc45 	bl	800d564 <__mcmp>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	da20      	bge.n	800cd20 <_dtoa_r+0x988>
 800ccde:	9b02      	ldr	r3, [sp, #8]
 800cce0:	220a      	movs	r2, #10
 800cce2:	3b01      	subs	r3, #1
 800cce4:	9302      	str	r3, [sp, #8]
 800cce6:	0038      	movs	r0, r7
 800cce8:	2300      	movs	r3, #0
 800ccea:	9904      	ldr	r1, [sp, #16]
 800ccec:	f000 fa1c 	bl	800d128 <__multadd>
 800ccf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccf2:	9004      	str	r0, [sp, #16]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d100      	bne.n	800ccfa <_dtoa_r+0x962>
 800ccf8:	e160      	b.n	800cfbc <_dtoa_r+0xc24>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	0029      	movs	r1, r5
 800ccfe:	220a      	movs	r2, #10
 800cd00:	0038      	movs	r0, r7
 800cd02:	f000 fa11 	bl	800d128 <__multadd>
 800cd06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd08:	0005      	movs	r5, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	dc47      	bgt.n	800cd9e <_dtoa_r+0xa06>
 800cd0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd10:	2b02      	cmp	r3, #2
 800cd12:	dc0d      	bgt.n	800cd30 <_dtoa_r+0x998>
 800cd14:	e043      	b.n	800cd9e <_dtoa_r+0xa06>
 800cd16:	2a04      	cmp	r2, #4
 800cd18:	d0c6      	beq.n	800cca8 <_dtoa_r+0x910>
 800cd1a:	0013      	movs	r3, r2
 800cd1c:	331c      	adds	r3, #28
 800cd1e:	e7bc      	b.n	800cc9a <_dtoa_r+0x902>
 800cd20:	9b06      	ldr	r3, [sp, #24]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	dc35      	bgt.n	800cd92 <_dtoa_r+0x9fa>
 800cd26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd28:	2b02      	cmp	r3, #2
 800cd2a:	dd32      	ble.n	800cd92 <_dtoa_r+0x9fa>
 800cd2c:	9b06      	ldr	r3, [sp, #24]
 800cd2e:	930c      	str	r3, [sp, #48]	; 0x30
 800cd30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d10c      	bne.n	800cd50 <_dtoa_r+0x9b8>
 800cd36:	0031      	movs	r1, r6
 800cd38:	2205      	movs	r2, #5
 800cd3a:	0038      	movs	r0, r7
 800cd3c:	f000 f9f4 	bl	800d128 <__multadd>
 800cd40:	0006      	movs	r6, r0
 800cd42:	0001      	movs	r1, r0
 800cd44:	9804      	ldr	r0, [sp, #16]
 800cd46:	f000 fc0d 	bl	800d564 <__mcmp>
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	dd00      	ble.n	800cd50 <_dtoa_r+0x9b8>
 800cd4e:	e59f      	b.n	800c890 <_dtoa_r+0x4f8>
 800cd50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cd52:	43db      	mvns	r3, r3
 800cd54:	9302      	str	r3, [sp, #8]
 800cd56:	9b05      	ldr	r3, [sp, #20]
 800cd58:	9307      	str	r3, [sp, #28]
 800cd5a:	2400      	movs	r4, #0
 800cd5c:	0031      	movs	r1, r6
 800cd5e:	0038      	movs	r0, r7
 800cd60:	f000 f9be 	bl	800d0e0 <_Bfree>
 800cd64:	2d00      	cmp	r5, #0
 800cd66:	d100      	bne.n	800cd6a <_dtoa_r+0x9d2>
 800cd68:	e6b0      	b.n	800cacc <_dtoa_r+0x734>
 800cd6a:	2c00      	cmp	r4, #0
 800cd6c:	d005      	beq.n	800cd7a <_dtoa_r+0x9e2>
 800cd6e:	42ac      	cmp	r4, r5
 800cd70:	d003      	beq.n	800cd7a <_dtoa_r+0x9e2>
 800cd72:	0021      	movs	r1, r4
 800cd74:	0038      	movs	r0, r7
 800cd76:	f000 f9b3 	bl	800d0e0 <_Bfree>
 800cd7a:	0029      	movs	r1, r5
 800cd7c:	0038      	movs	r0, r7
 800cd7e:	f000 f9af 	bl	800d0e0 <_Bfree>
 800cd82:	e6a3      	b.n	800cacc <_dtoa_r+0x734>
 800cd84:	2600      	movs	r6, #0
 800cd86:	0035      	movs	r5, r6
 800cd88:	e7e2      	b.n	800cd50 <_dtoa_r+0x9b8>
 800cd8a:	9602      	str	r6, [sp, #8]
 800cd8c:	9e07      	ldr	r6, [sp, #28]
 800cd8e:	0035      	movs	r5, r6
 800cd90:	e57e      	b.n	800c890 <_dtoa_r+0x4f8>
 800cd92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d100      	bne.n	800cd9a <_dtoa_r+0xa02>
 800cd98:	e0c8      	b.n	800cf2c <_dtoa_r+0xb94>
 800cd9a:	9b06      	ldr	r3, [sp, #24]
 800cd9c:	930c      	str	r3, [sp, #48]	; 0x30
 800cd9e:	2c00      	cmp	r4, #0
 800cda0:	dd05      	ble.n	800cdae <_dtoa_r+0xa16>
 800cda2:	0029      	movs	r1, r5
 800cda4:	0022      	movs	r2, r4
 800cda6:	0038      	movs	r0, r7
 800cda8:	f000 fb6c 	bl	800d484 <__lshift>
 800cdac:	0005      	movs	r5, r0
 800cdae:	9b07      	ldr	r3, [sp, #28]
 800cdb0:	0028      	movs	r0, r5
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d01f      	beq.n	800cdf6 <_dtoa_r+0xa5e>
 800cdb6:	0038      	movs	r0, r7
 800cdb8:	6869      	ldr	r1, [r5, #4]
 800cdba:	f000 f94d 	bl	800d058 <_Balloc>
 800cdbe:	1e04      	subs	r4, r0, #0
 800cdc0:	d10c      	bne.n	800cddc <_dtoa_r+0xa44>
 800cdc2:	0002      	movs	r2, r0
 800cdc4:	4b03      	ldr	r3, [pc, #12]	; (800cdd4 <_dtoa_r+0xa3c>)
 800cdc6:	4904      	ldr	r1, [pc, #16]	; (800cdd8 <_dtoa_r+0xa40>)
 800cdc8:	f7ff fafb 	bl	800c3c2 <_dtoa_r+0x2a>
 800cdcc:	40240000 	.word	0x40240000
 800cdd0:	00000433 	.word	0x00000433
 800cdd4:	0800e998 	.word	0x0800e998
 800cdd8:	000002ea 	.word	0x000002ea
 800cddc:	0029      	movs	r1, r5
 800cdde:	692b      	ldr	r3, [r5, #16]
 800cde0:	310c      	adds	r1, #12
 800cde2:	1c9a      	adds	r2, r3, #2
 800cde4:	0092      	lsls	r2, r2, #2
 800cde6:	300c      	adds	r0, #12
 800cde8:	f7fe fcc6 	bl	800b778 <memcpy>
 800cdec:	2201      	movs	r2, #1
 800cdee:	0021      	movs	r1, r4
 800cdf0:	0038      	movs	r0, r7
 800cdf2:	f000 fb47 	bl	800d484 <__lshift>
 800cdf6:	002c      	movs	r4, r5
 800cdf8:	0005      	movs	r5, r0
 800cdfa:	9b05      	ldr	r3, [sp, #20]
 800cdfc:	9308      	str	r3, [sp, #32]
 800cdfe:	0031      	movs	r1, r6
 800ce00:	9804      	ldr	r0, [sp, #16]
 800ce02:	f7ff fa3d 	bl	800c280 <quorem>
 800ce06:	0003      	movs	r3, r0
 800ce08:	0021      	movs	r1, r4
 800ce0a:	3330      	adds	r3, #48	; 0x30
 800ce0c:	900e      	str	r0, [sp, #56]	; 0x38
 800ce0e:	9804      	ldr	r0, [sp, #16]
 800ce10:	9306      	str	r3, [sp, #24]
 800ce12:	f000 fba7 	bl	800d564 <__mcmp>
 800ce16:	002a      	movs	r2, r5
 800ce18:	900f      	str	r0, [sp, #60]	; 0x3c
 800ce1a:	0031      	movs	r1, r6
 800ce1c:	0038      	movs	r0, r7
 800ce1e:	f000 fbbd 	bl	800d59c <__mdiff>
 800ce22:	68c3      	ldr	r3, [r0, #12]
 800ce24:	9007      	str	r0, [sp, #28]
 800ce26:	9310      	str	r3, [sp, #64]	; 0x40
 800ce28:	2301      	movs	r3, #1
 800ce2a:	930d      	str	r3, [sp, #52]	; 0x34
 800ce2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d104      	bne.n	800ce3c <_dtoa_r+0xaa4>
 800ce32:	0001      	movs	r1, r0
 800ce34:	9804      	ldr	r0, [sp, #16]
 800ce36:	f000 fb95 	bl	800d564 <__mcmp>
 800ce3a:	900d      	str	r0, [sp, #52]	; 0x34
 800ce3c:	0038      	movs	r0, r7
 800ce3e:	9907      	ldr	r1, [sp, #28]
 800ce40:	f000 f94e 	bl	800d0e0 <_Bfree>
 800ce44:	2301      	movs	r3, #1
 800ce46:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce4a:	4018      	ands	r0, r3
 800ce4c:	9b08      	ldr	r3, [sp, #32]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	9307      	str	r3, [sp, #28]
 800ce52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce54:	4313      	orrs	r3, r2
 800ce56:	4303      	orrs	r3, r0
 800ce58:	d10c      	bne.n	800ce74 <_dtoa_r+0xadc>
 800ce5a:	9b06      	ldr	r3, [sp, #24]
 800ce5c:	2b39      	cmp	r3, #57	; 0x39
 800ce5e:	d025      	beq.n	800ceac <_dtoa_r+0xb14>
 800ce60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	dd02      	ble.n	800ce6c <_dtoa_r+0xad4>
 800ce66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce68:	3331      	adds	r3, #49	; 0x31
 800ce6a:	9306      	str	r3, [sp, #24]
 800ce6c:	9b08      	ldr	r3, [sp, #32]
 800ce6e:	9a06      	ldr	r2, [sp, #24]
 800ce70:	701a      	strb	r2, [r3, #0]
 800ce72:	e773      	b.n	800cd5c <_dtoa_r+0x9c4>
 800ce74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	db03      	blt.n	800ce82 <_dtoa_r+0xaea>
 800ce7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	4303      	orrs	r3, r0
 800ce80:	d11f      	bne.n	800cec2 <_dtoa_r+0xb2a>
 800ce82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	ddf1      	ble.n	800ce6c <_dtoa_r+0xad4>
 800ce88:	9904      	ldr	r1, [sp, #16]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	0038      	movs	r0, r7
 800ce8e:	f000 faf9 	bl	800d484 <__lshift>
 800ce92:	0031      	movs	r1, r6
 800ce94:	9004      	str	r0, [sp, #16]
 800ce96:	f000 fb65 	bl	800d564 <__mcmp>
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	dc03      	bgt.n	800cea6 <_dtoa_r+0xb0e>
 800ce9e:	d1e5      	bne.n	800ce6c <_dtoa_r+0xad4>
 800cea0:	9b06      	ldr	r3, [sp, #24]
 800cea2:	07db      	lsls	r3, r3, #31
 800cea4:	d5e2      	bpl.n	800ce6c <_dtoa_r+0xad4>
 800cea6:	9b06      	ldr	r3, [sp, #24]
 800cea8:	2b39      	cmp	r3, #57	; 0x39
 800ceaa:	d1dc      	bne.n	800ce66 <_dtoa_r+0xace>
 800ceac:	2339      	movs	r3, #57	; 0x39
 800ceae:	9a08      	ldr	r2, [sp, #32]
 800ceb0:	7013      	strb	r3, [r2, #0]
 800ceb2:	9b07      	ldr	r3, [sp, #28]
 800ceb4:	9307      	str	r3, [sp, #28]
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	781a      	ldrb	r2, [r3, #0]
 800ceba:	2a39      	cmp	r2, #57	; 0x39
 800cebc:	d06c      	beq.n	800cf98 <_dtoa_r+0xc00>
 800cebe:	3201      	adds	r2, #1
 800cec0:	e7d6      	b.n	800ce70 <_dtoa_r+0xad8>
 800cec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	dd07      	ble.n	800ced8 <_dtoa_r+0xb40>
 800cec8:	9b06      	ldr	r3, [sp, #24]
 800ceca:	2b39      	cmp	r3, #57	; 0x39
 800cecc:	d0ee      	beq.n	800ceac <_dtoa_r+0xb14>
 800cece:	9b06      	ldr	r3, [sp, #24]
 800ced0:	9a08      	ldr	r2, [sp, #32]
 800ced2:	3301      	adds	r3, #1
 800ced4:	7013      	strb	r3, [r2, #0]
 800ced6:	e741      	b.n	800cd5c <_dtoa_r+0x9c4>
 800ced8:	9b08      	ldr	r3, [sp, #32]
 800ceda:	9a06      	ldr	r2, [sp, #24]
 800cedc:	701a      	strb	r2, [r3, #0]
 800cede:	2301      	movs	r3, #1
 800cee0:	9a05      	ldr	r2, [sp, #20]
 800cee2:	1a9b      	subs	r3, r3, r2
 800cee4:	9a08      	ldr	r2, [sp, #32]
 800cee6:	189b      	adds	r3, r3, r2
 800cee8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d03e      	beq.n	800cf6c <_dtoa_r+0xbd4>
 800ceee:	2300      	movs	r3, #0
 800cef0:	220a      	movs	r2, #10
 800cef2:	9904      	ldr	r1, [sp, #16]
 800cef4:	0038      	movs	r0, r7
 800cef6:	f000 f917 	bl	800d128 <__multadd>
 800cefa:	2300      	movs	r3, #0
 800cefc:	9004      	str	r0, [sp, #16]
 800cefe:	220a      	movs	r2, #10
 800cf00:	0021      	movs	r1, r4
 800cf02:	0038      	movs	r0, r7
 800cf04:	42ac      	cmp	r4, r5
 800cf06:	d106      	bne.n	800cf16 <_dtoa_r+0xb7e>
 800cf08:	f000 f90e 	bl	800d128 <__multadd>
 800cf0c:	0004      	movs	r4, r0
 800cf0e:	0005      	movs	r5, r0
 800cf10:	9b07      	ldr	r3, [sp, #28]
 800cf12:	9308      	str	r3, [sp, #32]
 800cf14:	e773      	b.n	800cdfe <_dtoa_r+0xa66>
 800cf16:	f000 f907 	bl	800d128 <__multadd>
 800cf1a:	0029      	movs	r1, r5
 800cf1c:	0004      	movs	r4, r0
 800cf1e:	2300      	movs	r3, #0
 800cf20:	220a      	movs	r2, #10
 800cf22:	0038      	movs	r0, r7
 800cf24:	f000 f900 	bl	800d128 <__multadd>
 800cf28:	0005      	movs	r5, r0
 800cf2a:	e7f1      	b.n	800cf10 <_dtoa_r+0xb78>
 800cf2c:	9b06      	ldr	r3, [sp, #24]
 800cf2e:	930c      	str	r3, [sp, #48]	; 0x30
 800cf30:	2400      	movs	r4, #0
 800cf32:	0031      	movs	r1, r6
 800cf34:	9804      	ldr	r0, [sp, #16]
 800cf36:	f7ff f9a3 	bl	800c280 <quorem>
 800cf3a:	9b05      	ldr	r3, [sp, #20]
 800cf3c:	3030      	adds	r0, #48	; 0x30
 800cf3e:	5518      	strb	r0, [r3, r4]
 800cf40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf42:	3401      	adds	r4, #1
 800cf44:	9006      	str	r0, [sp, #24]
 800cf46:	42a3      	cmp	r3, r4
 800cf48:	dd07      	ble.n	800cf5a <_dtoa_r+0xbc2>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	220a      	movs	r2, #10
 800cf4e:	0038      	movs	r0, r7
 800cf50:	9904      	ldr	r1, [sp, #16]
 800cf52:	f000 f8e9 	bl	800d128 <__multadd>
 800cf56:	9004      	str	r0, [sp, #16]
 800cf58:	e7eb      	b.n	800cf32 <_dtoa_r+0xb9a>
 800cf5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf5c:	2001      	movs	r0, #1
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	dd00      	ble.n	800cf64 <_dtoa_r+0xbcc>
 800cf62:	0018      	movs	r0, r3
 800cf64:	2400      	movs	r4, #0
 800cf66:	9b05      	ldr	r3, [sp, #20]
 800cf68:	181b      	adds	r3, r3, r0
 800cf6a:	9307      	str	r3, [sp, #28]
 800cf6c:	9904      	ldr	r1, [sp, #16]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	0038      	movs	r0, r7
 800cf72:	f000 fa87 	bl	800d484 <__lshift>
 800cf76:	0031      	movs	r1, r6
 800cf78:	9004      	str	r0, [sp, #16]
 800cf7a:	f000 faf3 	bl	800d564 <__mcmp>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	dc97      	bgt.n	800ceb2 <_dtoa_r+0xb1a>
 800cf82:	d102      	bne.n	800cf8a <_dtoa_r+0xbf2>
 800cf84:	9b06      	ldr	r3, [sp, #24]
 800cf86:	07db      	lsls	r3, r3, #31
 800cf88:	d493      	bmi.n	800ceb2 <_dtoa_r+0xb1a>
 800cf8a:	9b07      	ldr	r3, [sp, #28]
 800cf8c:	9307      	str	r3, [sp, #28]
 800cf8e:	3b01      	subs	r3, #1
 800cf90:	781a      	ldrb	r2, [r3, #0]
 800cf92:	2a30      	cmp	r2, #48	; 0x30
 800cf94:	d0fa      	beq.n	800cf8c <_dtoa_r+0xbf4>
 800cf96:	e6e1      	b.n	800cd5c <_dtoa_r+0x9c4>
 800cf98:	9a05      	ldr	r2, [sp, #20]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d18a      	bne.n	800ceb4 <_dtoa_r+0xb1c>
 800cf9e:	9b02      	ldr	r3, [sp, #8]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	9302      	str	r3, [sp, #8]
 800cfa4:	2331      	movs	r3, #49	; 0x31
 800cfa6:	e795      	b.n	800ced4 <_dtoa_r+0xb3c>
 800cfa8:	4b08      	ldr	r3, [pc, #32]	; (800cfcc <_dtoa_r+0xc34>)
 800cfaa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cfac:	9305      	str	r3, [sp, #20]
 800cfae:	4b08      	ldr	r3, [pc, #32]	; (800cfd0 <_dtoa_r+0xc38>)
 800cfb0:	2a00      	cmp	r2, #0
 800cfb2:	d001      	beq.n	800cfb8 <_dtoa_r+0xc20>
 800cfb4:	f7ff fa3b 	bl	800c42e <_dtoa_r+0x96>
 800cfb8:	f7ff fa3b 	bl	800c432 <_dtoa_r+0x9a>
 800cfbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	dcb6      	bgt.n	800cf30 <_dtoa_r+0xb98>
 800cfc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	dd00      	ble.n	800cfca <_dtoa_r+0xc32>
 800cfc8:	e6b2      	b.n	800cd30 <_dtoa_r+0x998>
 800cfca:	e7b1      	b.n	800cf30 <_dtoa_r+0xb98>
 800cfcc:	0800e915 	.word	0x0800e915
 800cfd0:	0800e91d 	.word	0x0800e91d

0800cfd4 <fiprintf>:
 800cfd4:	b40e      	push	{r1, r2, r3}
 800cfd6:	b503      	push	{r0, r1, lr}
 800cfd8:	0001      	movs	r1, r0
 800cfda:	ab03      	add	r3, sp, #12
 800cfdc:	4804      	ldr	r0, [pc, #16]	; (800cff0 <fiprintf+0x1c>)
 800cfde:	cb04      	ldmia	r3!, {r2}
 800cfe0:	6800      	ldr	r0, [r0, #0]
 800cfe2:	9301      	str	r3, [sp, #4]
 800cfe4:	f000 fd6e 	bl	800dac4 <_vfiprintf_r>
 800cfe8:	b002      	add	sp, #8
 800cfea:	bc08      	pop	{r3}
 800cfec:	b003      	add	sp, #12
 800cfee:	4718      	bx	r3
 800cff0:	2000002c 	.word	0x2000002c

0800cff4 <_localeconv_r>:
 800cff4:	4800      	ldr	r0, [pc, #0]	; (800cff8 <_localeconv_r+0x4>)
 800cff6:	4770      	bx	lr
 800cff8:	20000180 	.word	0x20000180

0800cffc <__ascii_mbtowc>:
 800cffc:	b082      	sub	sp, #8
 800cffe:	2900      	cmp	r1, #0
 800d000:	d100      	bne.n	800d004 <__ascii_mbtowc+0x8>
 800d002:	a901      	add	r1, sp, #4
 800d004:	1e10      	subs	r0, r2, #0
 800d006:	d006      	beq.n	800d016 <__ascii_mbtowc+0x1a>
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d006      	beq.n	800d01a <__ascii_mbtowc+0x1e>
 800d00c:	7813      	ldrb	r3, [r2, #0]
 800d00e:	600b      	str	r3, [r1, #0]
 800d010:	7810      	ldrb	r0, [r2, #0]
 800d012:	1e43      	subs	r3, r0, #1
 800d014:	4198      	sbcs	r0, r3
 800d016:	b002      	add	sp, #8
 800d018:	4770      	bx	lr
 800d01a:	2002      	movs	r0, #2
 800d01c:	4240      	negs	r0, r0
 800d01e:	e7fa      	b.n	800d016 <__ascii_mbtowc+0x1a>

0800d020 <memchr>:
 800d020:	b2c9      	uxtb	r1, r1
 800d022:	1882      	adds	r2, r0, r2
 800d024:	4290      	cmp	r0, r2
 800d026:	d101      	bne.n	800d02c <memchr+0xc>
 800d028:	2000      	movs	r0, #0
 800d02a:	4770      	bx	lr
 800d02c:	7803      	ldrb	r3, [r0, #0]
 800d02e:	428b      	cmp	r3, r1
 800d030:	d0fb      	beq.n	800d02a <memchr+0xa>
 800d032:	3001      	adds	r0, #1
 800d034:	e7f6      	b.n	800d024 <memchr+0x4>
	...

0800d038 <__malloc_lock>:
 800d038:	b510      	push	{r4, lr}
 800d03a:	4802      	ldr	r0, [pc, #8]	; (800d044 <__malloc_lock+0xc>)
 800d03c:	f001 f92f 	bl	800e29e <__retarget_lock_acquire_recursive>
 800d040:	bd10      	pop	{r4, pc}
 800d042:	46c0      	nop			; (mov r8, r8)
 800d044:	200005e4 	.word	0x200005e4

0800d048 <__malloc_unlock>:
 800d048:	b510      	push	{r4, lr}
 800d04a:	4802      	ldr	r0, [pc, #8]	; (800d054 <__malloc_unlock+0xc>)
 800d04c:	f001 f928 	bl	800e2a0 <__retarget_lock_release_recursive>
 800d050:	bd10      	pop	{r4, pc}
 800d052:	46c0      	nop			; (mov r8, r8)
 800d054:	200005e4 	.word	0x200005e4

0800d058 <_Balloc>:
 800d058:	b570      	push	{r4, r5, r6, lr}
 800d05a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d05c:	0006      	movs	r6, r0
 800d05e:	000c      	movs	r4, r1
 800d060:	2d00      	cmp	r5, #0
 800d062:	d10e      	bne.n	800d082 <_Balloc+0x2a>
 800d064:	2010      	movs	r0, #16
 800d066:	f7fe fb7d 	bl	800b764 <malloc>
 800d06a:	1e02      	subs	r2, r0, #0
 800d06c:	6270      	str	r0, [r6, #36]	; 0x24
 800d06e:	d104      	bne.n	800d07a <_Balloc+0x22>
 800d070:	2166      	movs	r1, #102	; 0x66
 800d072:	4b19      	ldr	r3, [pc, #100]	; (800d0d8 <_Balloc+0x80>)
 800d074:	4819      	ldr	r0, [pc, #100]	; (800d0dc <_Balloc+0x84>)
 800d076:	f7ff f8e5 	bl	800c244 <__assert_func>
 800d07a:	6045      	str	r5, [r0, #4]
 800d07c:	6085      	str	r5, [r0, #8]
 800d07e:	6005      	str	r5, [r0, #0]
 800d080:	60c5      	str	r5, [r0, #12]
 800d082:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800d084:	68eb      	ldr	r3, [r5, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d013      	beq.n	800d0b2 <_Balloc+0x5a>
 800d08a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d08c:	00a2      	lsls	r2, r4, #2
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	189b      	adds	r3, r3, r2
 800d092:	6818      	ldr	r0, [r3, #0]
 800d094:	2800      	cmp	r0, #0
 800d096:	d118      	bne.n	800d0ca <_Balloc+0x72>
 800d098:	2101      	movs	r1, #1
 800d09a:	000d      	movs	r5, r1
 800d09c:	40a5      	lsls	r5, r4
 800d09e:	1d6a      	adds	r2, r5, #5
 800d0a0:	0030      	movs	r0, r6
 800d0a2:	0092      	lsls	r2, r2, #2
 800d0a4:	f000 fb76 	bl	800d794 <_calloc_r>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d00c      	beq.n	800d0c6 <_Balloc+0x6e>
 800d0ac:	6044      	str	r4, [r0, #4]
 800d0ae:	6085      	str	r5, [r0, #8]
 800d0b0:	e00d      	b.n	800d0ce <_Balloc+0x76>
 800d0b2:	2221      	movs	r2, #33	; 0x21
 800d0b4:	2104      	movs	r1, #4
 800d0b6:	0030      	movs	r0, r6
 800d0b8:	f000 fb6c 	bl	800d794 <_calloc_r>
 800d0bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d0be:	60e8      	str	r0, [r5, #12]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1e1      	bne.n	800d08a <_Balloc+0x32>
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	bd70      	pop	{r4, r5, r6, pc}
 800d0ca:	6802      	ldr	r2, [r0, #0]
 800d0cc:	601a      	str	r2, [r3, #0]
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	6103      	str	r3, [r0, #16]
 800d0d2:	60c3      	str	r3, [r0, #12]
 800d0d4:	e7f8      	b.n	800d0c8 <_Balloc+0x70>
 800d0d6:	46c0      	nop			; (mov r8, r8)
 800d0d8:	0800e922 	.word	0x0800e922
 800d0dc:	0800e9b3 	.word	0x0800e9b3

0800d0e0 <_Bfree>:
 800d0e0:	b570      	push	{r4, r5, r6, lr}
 800d0e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0e4:	0005      	movs	r5, r0
 800d0e6:	000c      	movs	r4, r1
 800d0e8:	2e00      	cmp	r6, #0
 800d0ea:	d10e      	bne.n	800d10a <_Bfree+0x2a>
 800d0ec:	2010      	movs	r0, #16
 800d0ee:	f7fe fb39 	bl	800b764 <malloc>
 800d0f2:	1e02      	subs	r2, r0, #0
 800d0f4:	6268      	str	r0, [r5, #36]	; 0x24
 800d0f6:	d104      	bne.n	800d102 <_Bfree+0x22>
 800d0f8:	218a      	movs	r1, #138	; 0x8a
 800d0fa:	4b09      	ldr	r3, [pc, #36]	; (800d120 <_Bfree+0x40>)
 800d0fc:	4809      	ldr	r0, [pc, #36]	; (800d124 <_Bfree+0x44>)
 800d0fe:	f7ff f8a1 	bl	800c244 <__assert_func>
 800d102:	6046      	str	r6, [r0, #4]
 800d104:	6086      	str	r6, [r0, #8]
 800d106:	6006      	str	r6, [r0, #0]
 800d108:	60c6      	str	r6, [r0, #12]
 800d10a:	2c00      	cmp	r4, #0
 800d10c:	d007      	beq.n	800d11e <_Bfree+0x3e>
 800d10e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d110:	6862      	ldr	r2, [r4, #4]
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	0092      	lsls	r2, r2, #2
 800d116:	189b      	adds	r3, r3, r2
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	6022      	str	r2, [r4, #0]
 800d11c:	601c      	str	r4, [r3, #0]
 800d11e:	bd70      	pop	{r4, r5, r6, pc}
 800d120:	0800e922 	.word	0x0800e922
 800d124:	0800e9b3 	.word	0x0800e9b3

0800d128 <__multadd>:
 800d128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d12a:	000e      	movs	r6, r1
 800d12c:	9001      	str	r0, [sp, #4]
 800d12e:	000c      	movs	r4, r1
 800d130:	001d      	movs	r5, r3
 800d132:	2000      	movs	r0, #0
 800d134:	690f      	ldr	r7, [r1, #16]
 800d136:	3614      	adds	r6, #20
 800d138:	6833      	ldr	r3, [r6, #0]
 800d13a:	3001      	adds	r0, #1
 800d13c:	b299      	uxth	r1, r3
 800d13e:	4351      	muls	r1, r2
 800d140:	0c1b      	lsrs	r3, r3, #16
 800d142:	4353      	muls	r3, r2
 800d144:	1949      	adds	r1, r1, r5
 800d146:	0c0d      	lsrs	r5, r1, #16
 800d148:	195b      	adds	r3, r3, r5
 800d14a:	0c1d      	lsrs	r5, r3, #16
 800d14c:	b289      	uxth	r1, r1
 800d14e:	041b      	lsls	r3, r3, #16
 800d150:	185b      	adds	r3, r3, r1
 800d152:	c608      	stmia	r6!, {r3}
 800d154:	4287      	cmp	r7, r0
 800d156:	dcef      	bgt.n	800d138 <__multadd+0x10>
 800d158:	2d00      	cmp	r5, #0
 800d15a:	d022      	beq.n	800d1a2 <__multadd+0x7a>
 800d15c:	68a3      	ldr	r3, [r4, #8]
 800d15e:	42bb      	cmp	r3, r7
 800d160:	dc19      	bgt.n	800d196 <__multadd+0x6e>
 800d162:	6863      	ldr	r3, [r4, #4]
 800d164:	9801      	ldr	r0, [sp, #4]
 800d166:	1c59      	adds	r1, r3, #1
 800d168:	f7ff ff76 	bl	800d058 <_Balloc>
 800d16c:	1e06      	subs	r6, r0, #0
 800d16e:	d105      	bne.n	800d17c <__multadd+0x54>
 800d170:	0002      	movs	r2, r0
 800d172:	21b5      	movs	r1, #181	; 0xb5
 800d174:	4b0c      	ldr	r3, [pc, #48]	; (800d1a8 <__multadd+0x80>)
 800d176:	480d      	ldr	r0, [pc, #52]	; (800d1ac <__multadd+0x84>)
 800d178:	f7ff f864 	bl	800c244 <__assert_func>
 800d17c:	0021      	movs	r1, r4
 800d17e:	6923      	ldr	r3, [r4, #16]
 800d180:	310c      	adds	r1, #12
 800d182:	1c9a      	adds	r2, r3, #2
 800d184:	0092      	lsls	r2, r2, #2
 800d186:	300c      	adds	r0, #12
 800d188:	f7fe faf6 	bl	800b778 <memcpy>
 800d18c:	0021      	movs	r1, r4
 800d18e:	9801      	ldr	r0, [sp, #4]
 800d190:	f7ff ffa6 	bl	800d0e0 <_Bfree>
 800d194:	0034      	movs	r4, r6
 800d196:	1d3b      	adds	r3, r7, #4
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	18e3      	adds	r3, r4, r3
 800d19c:	605d      	str	r5, [r3, #4]
 800d19e:	1c7b      	adds	r3, r7, #1
 800d1a0:	6123      	str	r3, [r4, #16]
 800d1a2:	0020      	movs	r0, r4
 800d1a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d1a6:	46c0      	nop			; (mov r8, r8)
 800d1a8:	0800e998 	.word	0x0800e998
 800d1ac:	0800e9b3 	.word	0x0800e9b3

0800d1b0 <__hi0bits>:
 800d1b0:	0003      	movs	r3, r0
 800d1b2:	0c02      	lsrs	r2, r0, #16
 800d1b4:	2000      	movs	r0, #0
 800d1b6:	4282      	cmp	r2, r0
 800d1b8:	d101      	bne.n	800d1be <__hi0bits+0xe>
 800d1ba:	041b      	lsls	r3, r3, #16
 800d1bc:	3010      	adds	r0, #16
 800d1be:	0e1a      	lsrs	r2, r3, #24
 800d1c0:	d101      	bne.n	800d1c6 <__hi0bits+0x16>
 800d1c2:	3008      	adds	r0, #8
 800d1c4:	021b      	lsls	r3, r3, #8
 800d1c6:	0f1a      	lsrs	r2, r3, #28
 800d1c8:	d101      	bne.n	800d1ce <__hi0bits+0x1e>
 800d1ca:	3004      	adds	r0, #4
 800d1cc:	011b      	lsls	r3, r3, #4
 800d1ce:	0f9a      	lsrs	r2, r3, #30
 800d1d0:	d101      	bne.n	800d1d6 <__hi0bits+0x26>
 800d1d2:	3002      	adds	r0, #2
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	db03      	blt.n	800d1e2 <__hi0bits+0x32>
 800d1da:	3001      	adds	r0, #1
 800d1dc:	005b      	lsls	r3, r3, #1
 800d1de:	d400      	bmi.n	800d1e2 <__hi0bits+0x32>
 800d1e0:	2020      	movs	r0, #32
 800d1e2:	4770      	bx	lr

0800d1e4 <__lo0bits>:
 800d1e4:	6803      	ldr	r3, [r0, #0]
 800d1e6:	0002      	movs	r2, r0
 800d1e8:	2107      	movs	r1, #7
 800d1ea:	0018      	movs	r0, r3
 800d1ec:	4008      	ands	r0, r1
 800d1ee:	420b      	tst	r3, r1
 800d1f0:	d00d      	beq.n	800d20e <__lo0bits+0x2a>
 800d1f2:	3906      	subs	r1, #6
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	420b      	tst	r3, r1
 800d1f8:	d105      	bne.n	800d206 <__lo0bits+0x22>
 800d1fa:	3002      	adds	r0, #2
 800d1fc:	4203      	tst	r3, r0
 800d1fe:	d003      	beq.n	800d208 <__lo0bits+0x24>
 800d200:	40cb      	lsrs	r3, r1
 800d202:	0008      	movs	r0, r1
 800d204:	6013      	str	r3, [r2, #0]
 800d206:	4770      	bx	lr
 800d208:	089b      	lsrs	r3, r3, #2
 800d20a:	6013      	str	r3, [r2, #0]
 800d20c:	e7fb      	b.n	800d206 <__lo0bits+0x22>
 800d20e:	b299      	uxth	r1, r3
 800d210:	2900      	cmp	r1, #0
 800d212:	d101      	bne.n	800d218 <__lo0bits+0x34>
 800d214:	2010      	movs	r0, #16
 800d216:	0c1b      	lsrs	r3, r3, #16
 800d218:	b2d9      	uxtb	r1, r3
 800d21a:	2900      	cmp	r1, #0
 800d21c:	d101      	bne.n	800d222 <__lo0bits+0x3e>
 800d21e:	3008      	adds	r0, #8
 800d220:	0a1b      	lsrs	r3, r3, #8
 800d222:	0719      	lsls	r1, r3, #28
 800d224:	d101      	bne.n	800d22a <__lo0bits+0x46>
 800d226:	3004      	adds	r0, #4
 800d228:	091b      	lsrs	r3, r3, #4
 800d22a:	0799      	lsls	r1, r3, #30
 800d22c:	d101      	bne.n	800d232 <__lo0bits+0x4e>
 800d22e:	3002      	adds	r0, #2
 800d230:	089b      	lsrs	r3, r3, #2
 800d232:	07d9      	lsls	r1, r3, #31
 800d234:	d4e9      	bmi.n	800d20a <__lo0bits+0x26>
 800d236:	3001      	adds	r0, #1
 800d238:	085b      	lsrs	r3, r3, #1
 800d23a:	d1e6      	bne.n	800d20a <__lo0bits+0x26>
 800d23c:	2020      	movs	r0, #32
 800d23e:	e7e2      	b.n	800d206 <__lo0bits+0x22>

0800d240 <__i2b>:
 800d240:	b510      	push	{r4, lr}
 800d242:	000c      	movs	r4, r1
 800d244:	2101      	movs	r1, #1
 800d246:	f7ff ff07 	bl	800d058 <_Balloc>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d106      	bne.n	800d25c <__i2b+0x1c>
 800d24e:	21a0      	movs	r1, #160	; 0xa0
 800d250:	0002      	movs	r2, r0
 800d252:	4b04      	ldr	r3, [pc, #16]	; (800d264 <__i2b+0x24>)
 800d254:	4804      	ldr	r0, [pc, #16]	; (800d268 <__i2b+0x28>)
 800d256:	0049      	lsls	r1, r1, #1
 800d258:	f7fe fff4 	bl	800c244 <__assert_func>
 800d25c:	2301      	movs	r3, #1
 800d25e:	6144      	str	r4, [r0, #20]
 800d260:	6103      	str	r3, [r0, #16]
 800d262:	bd10      	pop	{r4, pc}
 800d264:	0800e998 	.word	0x0800e998
 800d268:	0800e9b3 	.word	0x0800e9b3

0800d26c <__multiply>:
 800d26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d26e:	690b      	ldr	r3, [r1, #16]
 800d270:	0014      	movs	r4, r2
 800d272:	6912      	ldr	r2, [r2, #16]
 800d274:	000d      	movs	r5, r1
 800d276:	b089      	sub	sp, #36	; 0x24
 800d278:	4293      	cmp	r3, r2
 800d27a:	da01      	bge.n	800d280 <__multiply+0x14>
 800d27c:	0025      	movs	r5, r4
 800d27e:	000c      	movs	r4, r1
 800d280:	692f      	ldr	r7, [r5, #16]
 800d282:	6926      	ldr	r6, [r4, #16]
 800d284:	6869      	ldr	r1, [r5, #4]
 800d286:	19bb      	adds	r3, r7, r6
 800d288:	9302      	str	r3, [sp, #8]
 800d28a:	68ab      	ldr	r3, [r5, #8]
 800d28c:	19ba      	adds	r2, r7, r6
 800d28e:	4293      	cmp	r3, r2
 800d290:	da00      	bge.n	800d294 <__multiply+0x28>
 800d292:	3101      	adds	r1, #1
 800d294:	f7ff fee0 	bl	800d058 <_Balloc>
 800d298:	9001      	str	r0, [sp, #4]
 800d29a:	2800      	cmp	r0, #0
 800d29c:	d106      	bne.n	800d2ac <__multiply+0x40>
 800d29e:	215e      	movs	r1, #94	; 0x5e
 800d2a0:	0002      	movs	r2, r0
 800d2a2:	4b48      	ldr	r3, [pc, #288]	; (800d3c4 <__multiply+0x158>)
 800d2a4:	4848      	ldr	r0, [pc, #288]	; (800d3c8 <__multiply+0x15c>)
 800d2a6:	31ff      	adds	r1, #255	; 0xff
 800d2a8:	f7fe ffcc 	bl	800c244 <__assert_func>
 800d2ac:	9b01      	ldr	r3, [sp, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	3314      	adds	r3, #20
 800d2b2:	469c      	mov	ip, r3
 800d2b4:	19bb      	adds	r3, r7, r6
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	4463      	add	r3, ip
 800d2ba:	9303      	str	r3, [sp, #12]
 800d2bc:	4663      	mov	r3, ip
 800d2be:	9903      	ldr	r1, [sp, #12]
 800d2c0:	428b      	cmp	r3, r1
 800d2c2:	d32c      	bcc.n	800d31e <__multiply+0xb2>
 800d2c4:	002b      	movs	r3, r5
 800d2c6:	0022      	movs	r2, r4
 800d2c8:	3314      	adds	r3, #20
 800d2ca:	00bf      	lsls	r7, r7, #2
 800d2cc:	3214      	adds	r2, #20
 800d2ce:	9306      	str	r3, [sp, #24]
 800d2d0:	00b6      	lsls	r6, r6, #2
 800d2d2:	19db      	adds	r3, r3, r7
 800d2d4:	9304      	str	r3, [sp, #16]
 800d2d6:	1993      	adds	r3, r2, r6
 800d2d8:	9307      	str	r3, [sp, #28]
 800d2da:	2304      	movs	r3, #4
 800d2dc:	9305      	str	r3, [sp, #20]
 800d2de:	002b      	movs	r3, r5
 800d2e0:	9904      	ldr	r1, [sp, #16]
 800d2e2:	3315      	adds	r3, #21
 800d2e4:	9200      	str	r2, [sp, #0]
 800d2e6:	4299      	cmp	r1, r3
 800d2e8:	d305      	bcc.n	800d2f6 <__multiply+0x8a>
 800d2ea:	1b4b      	subs	r3, r1, r5
 800d2ec:	3b15      	subs	r3, #21
 800d2ee:	089b      	lsrs	r3, r3, #2
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	9305      	str	r3, [sp, #20]
 800d2f6:	9b07      	ldr	r3, [sp, #28]
 800d2f8:	9a00      	ldr	r2, [sp, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d311      	bcc.n	800d322 <__multiply+0xb6>
 800d2fe:	9b02      	ldr	r3, [sp, #8]
 800d300:	2b00      	cmp	r3, #0
 800d302:	dd06      	ble.n	800d312 <__multiply+0xa6>
 800d304:	9b03      	ldr	r3, [sp, #12]
 800d306:	3b04      	subs	r3, #4
 800d308:	9303      	str	r3, [sp, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d054      	beq.n	800d3bc <__multiply+0x150>
 800d312:	9b01      	ldr	r3, [sp, #4]
 800d314:	9a02      	ldr	r2, [sp, #8]
 800d316:	0018      	movs	r0, r3
 800d318:	611a      	str	r2, [r3, #16]
 800d31a:	b009      	add	sp, #36	; 0x24
 800d31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d31e:	c304      	stmia	r3!, {r2}
 800d320:	e7cd      	b.n	800d2be <__multiply+0x52>
 800d322:	9b00      	ldr	r3, [sp, #0]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	b298      	uxth	r0, r3
 800d328:	2800      	cmp	r0, #0
 800d32a:	d01c      	beq.n	800d366 <__multiply+0xfa>
 800d32c:	4667      	mov	r7, ip
 800d32e:	2400      	movs	r4, #0
 800d330:	9e06      	ldr	r6, [sp, #24]
 800d332:	ce02      	ldmia	r6!, {r1}
 800d334:	683a      	ldr	r2, [r7, #0]
 800d336:	b28b      	uxth	r3, r1
 800d338:	4343      	muls	r3, r0
 800d33a:	0c09      	lsrs	r1, r1, #16
 800d33c:	4341      	muls	r1, r0
 800d33e:	b292      	uxth	r2, r2
 800d340:	189b      	adds	r3, r3, r2
 800d342:	191b      	adds	r3, r3, r4
 800d344:	000c      	movs	r4, r1
 800d346:	683a      	ldr	r2, [r7, #0]
 800d348:	0c11      	lsrs	r1, r2, #16
 800d34a:	1861      	adds	r1, r4, r1
 800d34c:	0c1c      	lsrs	r4, r3, #16
 800d34e:	1909      	adds	r1, r1, r4
 800d350:	0c0c      	lsrs	r4, r1, #16
 800d352:	b29b      	uxth	r3, r3
 800d354:	0409      	lsls	r1, r1, #16
 800d356:	430b      	orrs	r3, r1
 800d358:	c708      	stmia	r7!, {r3}
 800d35a:	9b04      	ldr	r3, [sp, #16]
 800d35c:	42b3      	cmp	r3, r6
 800d35e:	d8e8      	bhi.n	800d332 <__multiply+0xc6>
 800d360:	4663      	mov	r3, ip
 800d362:	9a05      	ldr	r2, [sp, #20]
 800d364:	509c      	str	r4, [r3, r2]
 800d366:	9b00      	ldr	r3, [sp, #0]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	0c1e      	lsrs	r6, r3, #16
 800d36c:	d020      	beq.n	800d3b0 <__multiply+0x144>
 800d36e:	4663      	mov	r3, ip
 800d370:	002c      	movs	r4, r5
 800d372:	4660      	mov	r0, ip
 800d374:	2700      	movs	r7, #0
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	3414      	adds	r4, #20
 800d37a:	6822      	ldr	r2, [r4, #0]
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	b291      	uxth	r1, r2
 800d380:	4371      	muls	r1, r6
 800d382:	6802      	ldr	r2, [r0, #0]
 800d384:	0c12      	lsrs	r2, r2, #16
 800d386:	1889      	adds	r1, r1, r2
 800d388:	19cf      	adds	r7, r1, r7
 800d38a:	0439      	lsls	r1, r7, #16
 800d38c:	430b      	orrs	r3, r1
 800d38e:	6003      	str	r3, [r0, #0]
 800d390:	cc02      	ldmia	r4!, {r1}
 800d392:	6843      	ldr	r3, [r0, #4]
 800d394:	0c09      	lsrs	r1, r1, #16
 800d396:	4371      	muls	r1, r6
 800d398:	b29b      	uxth	r3, r3
 800d39a:	0c3f      	lsrs	r7, r7, #16
 800d39c:	18cb      	adds	r3, r1, r3
 800d39e:	9a04      	ldr	r2, [sp, #16]
 800d3a0:	19db      	adds	r3, r3, r7
 800d3a2:	0c1f      	lsrs	r7, r3, #16
 800d3a4:	3004      	adds	r0, #4
 800d3a6:	42a2      	cmp	r2, r4
 800d3a8:	d8e7      	bhi.n	800d37a <__multiply+0x10e>
 800d3aa:	4662      	mov	r2, ip
 800d3ac:	9905      	ldr	r1, [sp, #20]
 800d3ae:	5053      	str	r3, [r2, r1]
 800d3b0:	9b00      	ldr	r3, [sp, #0]
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	2304      	movs	r3, #4
 800d3b8:	449c      	add	ip, r3
 800d3ba:	e79c      	b.n	800d2f6 <__multiply+0x8a>
 800d3bc:	9b02      	ldr	r3, [sp, #8]
 800d3be:	3b01      	subs	r3, #1
 800d3c0:	9302      	str	r3, [sp, #8]
 800d3c2:	e79c      	b.n	800d2fe <__multiply+0x92>
 800d3c4:	0800e998 	.word	0x0800e998
 800d3c8:	0800e9b3 	.word	0x0800e9b3

0800d3cc <__pow5mult>:
 800d3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3ce:	2303      	movs	r3, #3
 800d3d0:	0015      	movs	r5, r2
 800d3d2:	0007      	movs	r7, r0
 800d3d4:	000e      	movs	r6, r1
 800d3d6:	401a      	ands	r2, r3
 800d3d8:	421d      	tst	r5, r3
 800d3da:	d008      	beq.n	800d3ee <__pow5mult+0x22>
 800d3dc:	4925      	ldr	r1, [pc, #148]	; (800d474 <__pow5mult+0xa8>)
 800d3de:	3a01      	subs	r2, #1
 800d3e0:	0092      	lsls	r2, r2, #2
 800d3e2:	5852      	ldr	r2, [r2, r1]
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	0031      	movs	r1, r6
 800d3e8:	f7ff fe9e 	bl	800d128 <__multadd>
 800d3ec:	0006      	movs	r6, r0
 800d3ee:	10ad      	asrs	r5, r5, #2
 800d3f0:	d03d      	beq.n	800d46e <__pow5mult+0xa2>
 800d3f2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d3f4:	2c00      	cmp	r4, #0
 800d3f6:	d10f      	bne.n	800d418 <__pow5mult+0x4c>
 800d3f8:	2010      	movs	r0, #16
 800d3fa:	f7fe f9b3 	bl	800b764 <malloc>
 800d3fe:	1e02      	subs	r2, r0, #0
 800d400:	6278      	str	r0, [r7, #36]	; 0x24
 800d402:	d105      	bne.n	800d410 <__pow5mult+0x44>
 800d404:	21d7      	movs	r1, #215	; 0xd7
 800d406:	4b1c      	ldr	r3, [pc, #112]	; (800d478 <__pow5mult+0xac>)
 800d408:	481c      	ldr	r0, [pc, #112]	; (800d47c <__pow5mult+0xb0>)
 800d40a:	0049      	lsls	r1, r1, #1
 800d40c:	f7fe ff1a 	bl	800c244 <__assert_func>
 800d410:	6044      	str	r4, [r0, #4]
 800d412:	6084      	str	r4, [r0, #8]
 800d414:	6004      	str	r4, [r0, #0]
 800d416:	60c4      	str	r4, [r0, #12]
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	689c      	ldr	r4, [r3, #8]
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	2c00      	cmp	r4, #0
 800d420:	d108      	bne.n	800d434 <__pow5mult+0x68>
 800d422:	0038      	movs	r0, r7
 800d424:	4916      	ldr	r1, [pc, #88]	; (800d480 <__pow5mult+0xb4>)
 800d426:	f7ff ff0b 	bl	800d240 <__i2b>
 800d42a:	9b01      	ldr	r3, [sp, #4]
 800d42c:	0004      	movs	r4, r0
 800d42e:	6098      	str	r0, [r3, #8]
 800d430:	2300      	movs	r3, #0
 800d432:	6003      	str	r3, [r0, #0]
 800d434:	2301      	movs	r3, #1
 800d436:	421d      	tst	r5, r3
 800d438:	d00a      	beq.n	800d450 <__pow5mult+0x84>
 800d43a:	0031      	movs	r1, r6
 800d43c:	0022      	movs	r2, r4
 800d43e:	0038      	movs	r0, r7
 800d440:	f7ff ff14 	bl	800d26c <__multiply>
 800d444:	0031      	movs	r1, r6
 800d446:	9001      	str	r0, [sp, #4]
 800d448:	0038      	movs	r0, r7
 800d44a:	f7ff fe49 	bl	800d0e0 <_Bfree>
 800d44e:	9e01      	ldr	r6, [sp, #4]
 800d450:	106d      	asrs	r5, r5, #1
 800d452:	d00c      	beq.n	800d46e <__pow5mult+0xa2>
 800d454:	6820      	ldr	r0, [r4, #0]
 800d456:	2800      	cmp	r0, #0
 800d458:	d107      	bne.n	800d46a <__pow5mult+0x9e>
 800d45a:	0022      	movs	r2, r4
 800d45c:	0021      	movs	r1, r4
 800d45e:	0038      	movs	r0, r7
 800d460:	f7ff ff04 	bl	800d26c <__multiply>
 800d464:	2300      	movs	r3, #0
 800d466:	6020      	str	r0, [r4, #0]
 800d468:	6003      	str	r3, [r0, #0]
 800d46a:	0004      	movs	r4, r0
 800d46c:	e7e2      	b.n	800d434 <__pow5mult+0x68>
 800d46e:	0030      	movs	r0, r6
 800d470:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d472:	46c0      	nop			; (mov r8, r8)
 800d474:	0800eb08 	.word	0x0800eb08
 800d478:	0800e922 	.word	0x0800e922
 800d47c:	0800e9b3 	.word	0x0800e9b3
 800d480:	00000271 	.word	0x00000271

0800d484 <__lshift>:
 800d484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d486:	000c      	movs	r4, r1
 800d488:	0017      	movs	r7, r2
 800d48a:	6923      	ldr	r3, [r4, #16]
 800d48c:	1155      	asrs	r5, r2, #5
 800d48e:	b087      	sub	sp, #28
 800d490:	18eb      	adds	r3, r5, r3
 800d492:	9302      	str	r3, [sp, #8]
 800d494:	3301      	adds	r3, #1
 800d496:	9301      	str	r3, [sp, #4]
 800d498:	6849      	ldr	r1, [r1, #4]
 800d49a:	68a3      	ldr	r3, [r4, #8]
 800d49c:	9004      	str	r0, [sp, #16]
 800d49e:	9a01      	ldr	r2, [sp, #4]
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	db11      	blt.n	800d4c8 <__lshift+0x44>
 800d4a4:	9804      	ldr	r0, [sp, #16]
 800d4a6:	f7ff fdd7 	bl	800d058 <_Balloc>
 800d4aa:	0002      	movs	r2, r0
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	3214      	adds	r2, #20
 800d4b0:	0006      	movs	r6, r0
 800d4b2:	0011      	movs	r1, r2
 800d4b4:	9203      	str	r2, [sp, #12]
 800d4b6:	4298      	cmp	r0, r3
 800d4b8:	d10d      	bne.n	800d4d6 <__lshift+0x52>
 800d4ba:	21da      	movs	r1, #218	; 0xda
 800d4bc:	0002      	movs	r2, r0
 800d4be:	4b27      	ldr	r3, [pc, #156]	; (800d55c <__lshift+0xd8>)
 800d4c0:	4827      	ldr	r0, [pc, #156]	; (800d560 <__lshift+0xdc>)
 800d4c2:	31ff      	adds	r1, #255	; 0xff
 800d4c4:	f7fe febe 	bl	800c244 <__assert_func>
 800d4c8:	3101      	adds	r1, #1
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	e7e7      	b.n	800d49e <__lshift+0x1a>
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	0098      	lsls	r0, r3, #2
 800d4d2:	500a      	str	r2, [r1, r0]
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	42ab      	cmp	r3, r5
 800d4d8:	dbf9      	blt.n	800d4ce <__lshift+0x4a>
 800d4da:	43eb      	mvns	r3, r5
 800d4dc:	17db      	asrs	r3, r3, #31
 800d4de:	401d      	ands	r5, r3
 800d4e0:	9b03      	ldr	r3, [sp, #12]
 800d4e2:	00ad      	lsls	r5, r5, #2
 800d4e4:	211f      	movs	r1, #31
 800d4e6:	0038      	movs	r0, r7
 800d4e8:	195d      	adds	r5, r3, r5
 800d4ea:	0023      	movs	r3, r4
 800d4ec:	6922      	ldr	r2, [r4, #16]
 800d4ee:	3314      	adds	r3, #20
 800d4f0:	0092      	lsls	r2, r2, #2
 800d4f2:	4008      	ands	r0, r1
 800d4f4:	4684      	mov	ip, r0
 800d4f6:	189a      	adds	r2, r3, r2
 800d4f8:	420f      	tst	r7, r1
 800d4fa:	d02a      	beq.n	800d552 <__lshift+0xce>
 800d4fc:	3101      	adds	r1, #1
 800d4fe:	1a09      	subs	r1, r1, r0
 800d500:	9105      	str	r1, [sp, #20]
 800d502:	2100      	movs	r1, #0
 800d504:	9503      	str	r5, [sp, #12]
 800d506:	4667      	mov	r7, ip
 800d508:	6818      	ldr	r0, [r3, #0]
 800d50a:	40b8      	lsls	r0, r7
 800d50c:	4301      	orrs	r1, r0
 800d50e:	9803      	ldr	r0, [sp, #12]
 800d510:	c002      	stmia	r0!, {r1}
 800d512:	cb02      	ldmia	r3!, {r1}
 800d514:	9003      	str	r0, [sp, #12]
 800d516:	9805      	ldr	r0, [sp, #20]
 800d518:	40c1      	lsrs	r1, r0
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d8f3      	bhi.n	800d506 <__lshift+0x82>
 800d51e:	0020      	movs	r0, r4
 800d520:	3015      	adds	r0, #21
 800d522:	2304      	movs	r3, #4
 800d524:	4282      	cmp	r2, r0
 800d526:	d304      	bcc.n	800d532 <__lshift+0xae>
 800d528:	1b13      	subs	r3, r2, r4
 800d52a:	3b15      	subs	r3, #21
 800d52c:	089b      	lsrs	r3, r3, #2
 800d52e:	3301      	adds	r3, #1
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	50e9      	str	r1, [r5, r3]
 800d534:	2900      	cmp	r1, #0
 800d536:	d002      	beq.n	800d53e <__lshift+0xba>
 800d538:	9b02      	ldr	r3, [sp, #8]
 800d53a:	3302      	adds	r3, #2
 800d53c:	9301      	str	r3, [sp, #4]
 800d53e:	9b01      	ldr	r3, [sp, #4]
 800d540:	9804      	ldr	r0, [sp, #16]
 800d542:	3b01      	subs	r3, #1
 800d544:	0021      	movs	r1, r4
 800d546:	6133      	str	r3, [r6, #16]
 800d548:	f7ff fdca 	bl	800d0e0 <_Bfree>
 800d54c:	0030      	movs	r0, r6
 800d54e:	b007      	add	sp, #28
 800d550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d552:	cb02      	ldmia	r3!, {r1}
 800d554:	c502      	stmia	r5!, {r1}
 800d556:	429a      	cmp	r2, r3
 800d558:	d8fb      	bhi.n	800d552 <__lshift+0xce>
 800d55a:	e7f0      	b.n	800d53e <__lshift+0xba>
 800d55c:	0800e998 	.word	0x0800e998
 800d560:	0800e9b3 	.word	0x0800e9b3

0800d564 <__mcmp>:
 800d564:	6902      	ldr	r2, [r0, #16]
 800d566:	690b      	ldr	r3, [r1, #16]
 800d568:	b530      	push	{r4, r5, lr}
 800d56a:	0004      	movs	r4, r0
 800d56c:	1ad0      	subs	r0, r2, r3
 800d56e:	429a      	cmp	r2, r3
 800d570:	d10d      	bne.n	800d58e <__mcmp+0x2a>
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	3414      	adds	r4, #20
 800d576:	3114      	adds	r1, #20
 800d578:	18e2      	adds	r2, r4, r3
 800d57a:	18c9      	adds	r1, r1, r3
 800d57c:	3a04      	subs	r2, #4
 800d57e:	3904      	subs	r1, #4
 800d580:	6815      	ldr	r5, [r2, #0]
 800d582:	680b      	ldr	r3, [r1, #0]
 800d584:	429d      	cmp	r5, r3
 800d586:	d003      	beq.n	800d590 <__mcmp+0x2c>
 800d588:	2001      	movs	r0, #1
 800d58a:	429d      	cmp	r5, r3
 800d58c:	d303      	bcc.n	800d596 <__mcmp+0x32>
 800d58e:	bd30      	pop	{r4, r5, pc}
 800d590:	4294      	cmp	r4, r2
 800d592:	d3f3      	bcc.n	800d57c <__mcmp+0x18>
 800d594:	e7fb      	b.n	800d58e <__mcmp+0x2a>
 800d596:	4240      	negs	r0, r0
 800d598:	e7f9      	b.n	800d58e <__mcmp+0x2a>
	...

0800d59c <__mdiff>:
 800d59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d59e:	000e      	movs	r6, r1
 800d5a0:	0007      	movs	r7, r0
 800d5a2:	0011      	movs	r1, r2
 800d5a4:	0030      	movs	r0, r6
 800d5a6:	b087      	sub	sp, #28
 800d5a8:	0014      	movs	r4, r2
 800d5aa:	f7ff ffdb 	bl	800d564 <__mcmp>
 800d5ae:	1e05      	subs	r5, r0, #0
 800d5b0:	d110      	bne.n	800d5d4 <__mdiff+0x38>
 800d5b2:	0001      	movs	r1, r0
 800d5b4:	0038      	movs	r0, r7
 800d5b6:	f7ff fd4f 	bl	800d058 <_Balloc>
 800d5ba:	1e02      	subs	r2, r0, #0
 800d5bc:	d104      	bne.n	800d5c8 <__mdiff+0x2c>
 800d5be:	4b40      	ldr	r3, [pc, #256]	; (800d6c0 <__mdiff+0x124>)
 800d5c0:	4940      	ldr	r1, [pc, #256]	; (800d6c4 <__mdiff+0x128>)
 800d5c2:	4841      	ldr	r0, [pc, #260]	; (800d6c8 <__mdiff+0x12c>)
 800d5c4:	f7fe fe3e 	bl	800c244 <__assert_func>
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	6145      	str	r5, [r0, #20]
 800d5cc:	6103      	str	r3, [r0, #16]
 800d5ce:	0010      	movs	r0, r2
 800d5d0:	b007      	add	sp, #28
 800d5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	9301      	str	r3, [sp, #4]
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	db04      	blt.n	800d5e6 <__mdiff+0x4a>
 800d5dc:	0023      	movs	r3, r4
 800d5de:	0034      	movs	r4, r6
 800d5e0:	001e      	movs	r6, r3
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	9301      	str	r3, [sp, #4]
 800d5e6:	0038      	movs	r0, r7
 800d5e8:	6861      	ldr	r1, [r4, #4]
 800d5ea:	f7ff fd35 	bl	800d058 <_Balloc>
 800d5ee:	1e02      	subs	r2, r0, #0
 800d5f0:	d103      	bne.n	800d5fa <__mdiff+0x5e>
 800d5f2:	2190      	movs	r1, #144	; 0x90
 800d5f4:	4b32      	ldr	r3, [pc, #200]	; (800d6c0 <__mdiff+0x124>)
 800d5f6:	0089      	lsls	r1, r1, #2
 800d5f8:	e7e3      	b.n	800d5c2 <__mdiff+0x26>
 800d5fa:	9b01      	ldr	r3, [sp, #4]
 800d5fc:	2700      	movs	r7, #0
 800d5fe:	60c3      	str	r3, [r0, #12]
 800d600:	6920      	ldr	r0, [r4, #16]
 800d602:	3414      	adds	r4, #20
 800d604:	9401      	str	r4, [sp, #4]
 800d606:	9b01      	ldr	r3, [sp, #4]
 800d608:	0084      	lsls	r4, r0, #2
 800d60a:	191b      	adds	r3, r3, r4
 800d60c:	0034      	movs	r4, r6
 800d60e:	9302      	str	r3, [sp, #8]
 800d610:	6933      	ldr	r3, [r6, #16]
 800d612:	3414      	adds	r4, #20
 800d614:	0099      	lsls	r1, r3, #2
 800d616:	1863      	adds	r3, r4, r1
 800d618:	9303      	str	r3, [sp, #12]
 800d61a:	0013      	movs	r3, r2
 800d61c:	3314      	adds	r3, #20
 800d61e:	469c      	mov	ip, r3
 800d620:	9305      	str	r3, [sp, #20]
 800d622:	9b01      	ldr	r3, [sp, #4]
 800d624:	9304      	str	r3, [sp, #16]
 800d626:	9b04      	ldr	r3, [sp, #16]
 800d628:	cc02      	ldmia	r4!, {r1}
 800d62a:	cb20      	ldmia	r3!, {r5}
 800d62c:	9304      	str	r3, [sp, #16]
 800d62e:	b2ab      	uxth	r3, r5
 800d630:	19df      	adds	r7, r3, r7
 800d632:	b28b      	uxth	r3, r1
 800d634:	1afb      	subs	r3, r7, r3
 800d636:	0c2d      	lsrs	r5, r5, #16
 800d638:	0c09      	lsrs	r1, r1, #16
 800d63a:	1a69      	subs	r1, r5, r1
 800d63c:	141d      	asrs	r5, r3, #16
 800d63e:	1949      	adds	r1, r1, r5
 800d640:	140f      	asrs	r7, r1, #16
 800d642:	b29b      	uxth	r3, r3
 800d644:	0409      	lsls	r1, r1, #16
 800d646:	430b      	orrs	r3, r1
 800d648:	4661      	mov	r1, ip
 800d64a:	c108      	stmia	r1!, {r3}
 800d64c:	9b03      	ldr	r3, [sp, #12]
 800d64e:	468c      	mov	ip, r1
 800d650:	42a3      	cmp	r3, r4
 800d652:	d8e8      	bhi.n	800d626 <__mdiff+0x8a>
 800d654:	0031      	movs	r1, r6
 800d656:	9c03      	ldr	r4, [sp, #12]
 800d658:	3115      	adds	r1, #21
 800d65a:	2304      	movs	r3, #4
 800d65c:	428c      	cmp	r4, r1
 800d65e:	d304      	bcc.n	800d66a <__mdiff+0xce>
 800d660:	1ba3      	subs	r3, r4, r6
 800d662:	3b15      	subs	r3, #21
 800d664:	089b      	lsrs	r3, r3, #2
 800d666:	3301      	adds	r3, #1
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	9901      	ldr	r1, [sp, #4]
 800d66c:	18cc      	adds	r4, r1, r3
 800d66e:	9905      	ldr	r1, [sp, #20]
 800d670:	0026      	movs	r6, r4
 800d672:	18cb      	adds	r3, r1, r3
 800d674:	469c      	mov	ip, r3
 800d676:	9902      	ldr	r1, [sp, #8]
 800d678:	428e      	cmp	r6, r1
 800d67a:	d310      	bcc.n	800d69e <__mdiff+0x102>
 800d67c:	9e02      	ldr	r6, [sp, #8]
 800d67e:	1ee5      	subs	r5, r4, #3
 800d680:	2100      	movs	r1, #0
 800d682:	42ae      	cmp	r6, r5
 800d684:	d304      	bcc.n	800d690 <__mdiff+0xf4>
 800d686:	0031      	movs	r1, r6
 800d688:	3103      	adds	r1, #3
 800d68a:	1b09      	subs	r1, r1, r4
 800d68c:	0889      	lsrs	r1, r1, #2
 800d68e:	0089      	lsls	r1, r1, #2
 800d690:	185b      	adds	r3, r3, r1
 800d692:	3b04      	subs	r3, #4
 800d694:	6819      	ldr	r1, [r3, #0]
 800d696:	2900      	cmp	r1, #0
 800d698:	d00f      	beq.n	800d6ba <__mdiff+0x11e>
 800d69a:	6110      	str	r0, [r2, #16]
 800d69c:	e797      	b.n	800d5ce <__mdiff+0x32>
 800d69e:	ce02      	ldmia	r6!, {r1}
 800d6a0:	b28d      	uxth	r5, r1
 800d6a2:	19ed      	adds	r5, r5, r7
 800d6a4:	0c0f      	lsrs	r7, r1, #16
 800d6a6:	1429      	asrs	r1, r5, #16
 800d6a8:	1879      	adds	r1, r7, r1
 800d6aa:	140f      	asrs	r7, r1, #16
 800d6ac:	b2ad      	uxth	r5, r5
 800d6ae:	0409      	lsls	r1, r1, #16
 800d6b0:	430d      	orrs	r5, r1
 800d6b2:	4661      	mov	r1, ip
 800d6b4:	c120      	stmia	r1!, {r5}
 800d6b6:	468c      	mov	ip, r1
 800d6b8:	e7dd      	b.n	800d676 <__mdiff+0xda>
 800d6ba:	3801      	subs	r0, #1
 800d6bc:	e7e9      	b.n	800d692 <__mdiff+0xf6>
 800d6be:	46c0      	nop			; (mov r8, r8)
 800d6c0:	0800e998 	.word	0x0800e998
 800d6c4:	00000232 	.word	0x00000232
 800d6c8:	0800e9b3 	.word	0x0800e9b3

0800d6cc <__d2b>:
 800d6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6ce:	2101      	movs	r1, #1
 800d6d0:	0014      	movs	r4, r2
 800d6d2:	001e      	movs	r6, r3
 800d6d4:	9f08      	ldr	r7, [sp, #32]
 800d6d6:	f7ff fcbf 	bl	800d058 <_Balloc>
 800d6da:	1e05      	subs	r5, r0, #0
 800d6dc:	d105      	bne.n	800d6ea <__d2b+0x1e>
 800d6de:	0002      	movs	r2, r0
 800d6e0:	4b26      	ldr	r3, [pc, #152]	; (800d77c <__d2b+0xb0>)
 800d6e2:	4927      	ldr	r1, [pc, #156]	; (800d780 <__d2b+0xb4>)
 800d6e4:	4827      	ldr	r0, [pc, #156]	; (800d784 <__d2b+0xb8>)
 800d6e6:	f7fe fdad 	bl	800c244 <__assert_func>
 800d6ea:	0333      	lsls	r3, r6, #12
 800d6ec:	0076      	lsls	r6, r6, #1
 800d6ee:	0b1b      	lsrs	r3, r3, #12
 800d6f0:	0d76      	lsrs	r6, r6, #21
 800d6f2:	d124      	bne.n	800d73e <__d2b+0x72>
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	2c00      	cmp	r4, #0
 800d6f8:	d027      	beq.n	800d74a <__d2b+0x7e>
 800d6fa:	4668      	mov	r0, sp
 800d6fc:	9400      	str	r4, [sp, #0]
 800d6fe:	f7ff fd71 	bl	800d1e4 <__lo0bits>
 800d702:	9c00      	ldr	r4, [sp, #0]
 800d704:	2800      	cmp	r0, #0
 800d706:	d01e      	beq.n	800d746 <__d2b+0x7a>
 800d708:	9b01      	ldr	r3, [sp, #4]
 800d70a:	2120      	movs	r1, #32
 800d70c:	001a      	movs	r2, r3
 800d70e:	1a09      	subs	r1, r1, r0
 800d710:	408a      	lsls	r2, r1
 800d712:	40c3      	lsrs	r3, r0
 800d714:	4322      	orrs	r2, r4
 800d716:	616a      	str	r2, [r5, #20]
 800d718:	9301      	str	r3, [sp, #4]
 800d71a:	9c01      	ldr	r4, [sp, #4]
 800d71c:	61ac      	str	r4, [r5, #24]
 800d71e:	1e63      	subs	r3, r4, #1
 800d720:	419c      	sbcs	r4, r3
 800d722:	3401      	adds	r4, #1
 800d724:	612c      	str	r4, [r5, #16]
 800d726:	2e00      	cmp	r6, #0
 800d728:	d018      	beq.n	800d75c <__d2b+0x90>
 800d72a:	4b17      	ldr	r3, [pc, #92]	; (800d788 <__d2b+0xbc>)
 800d72c:	18f6      	adds	r6, r6, r3
 800d72e:	2335      	movs	r3, #53	; 0x35
 800d730:	1836      	adds	r6, r6, r0
 800d732:	1a18      	subs	r0, r3, r0
 800d734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d736:	603e      	str	r6, [r7, #0]
 800d738:	6018      	str	r0, [r3, #0]
 800d73a:	0028      	movs	r0, r5
 800d73c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d73e:	2280      	movs	r2, #128	; 0x80
 800d740:	0352      	lsls	r2, r2, #13
 800d742:	4313      	orrs	r3, r2
 800d744:	e7d6      	b.n	800d6f4 <__d2b+0x28>
 800d746:	616c      	str	r4, [r5, #20]
 800d748:	e7e7      	b.n	800d71a <__d2b+0x4e>
 800d74a:	a801      	add	r0, sp, #4
 800d74c:	f7ff fd4a 	bl	800d1e4 <__lo0bits>
 800d750:	2401      	movs	r4, #1
 800d752:	9b01      	ldr	r3, [sp, #4]
 800d754:	612c      	str	r4, [r5, #16]
 800d756:	616b      	str	r3, [r5, #20]
 800d758:	3020      	adds	r0, #32
 800d75a:	e7e4      	b.n	800d726 <__d2b+0x5a>
 800d75c:	4b0b      	ldr	r3, [pc, #44]	; (800d78c <__d2b+0xc0>)
 800d75e:	18c0      	adds	r0, r0, r3
 800d760:	4b0b      	ldr	r3, [pc, #44]	; (800d790 <__d2b+0xc4>)
 800d762:	6038      	str	r0, [r7, #0]
 800d764:	18e3      	adds	r3, r4, r3
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	18eb      	adds	r3, r5, r3
 800d76a:	6958      	ldr	r0, [r3, #20]
 800d76c:	f7ff fd20 	bl	800d1b0 <__hi0bits>
 800d770:	0164      	lsls	r4, r4, #5
 800d772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d774:	1a24      	subs	r4, r4, r0
 800d776:	601c      	str	r4, [r3, #0]
 800d778:	e7df      	b.n	800d73a <__d2b+0x6e>
 800d77a:	46c0      	nop			; (mov r8, r8)
 800d77c:	0800e998 	.word	0x0800e998
 800d780:	0000030a 	.word	0x0000030a
 800d784:	0800e9b3 	.word	0x0800e9b3
 800d788:	fffffbcd 	.word	0xfffffbcd
 800d78c:	fffffbce 	.word	0xfffffbce
 800d790:	3fffffff 	.word	0x3fffffff

0800d794 <_calloc_r>:
 800d794:	434a      	muls	r2, r1
 800d796:	b570      	push	{r4, r5, r6, lr}
 800d798:	0011      	movs	r1, r2
 800d79a:	0015      	movs	r5, r2
 800d79c:	f7fe f848 	bl	800b830 <_malloc_r>
 800d7a0:	1e04      	subs	r4, r0, #0
 800d7a2:	d003      	beq.n	800d7ac <_calloc_r+0x18>
 800d7a4:	002a      	movs	r2, r5
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	f7fd ffef 	bl	800b78a <memset>
 800d7ac:	0020      	movs	r0, r4
 800d7ae:	bd70      	pop	{r4, r5, r6, pc}

0800d7b0 <__ssputs_r>:
 800d7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7b2:	688e      	ldr	r6, [r1, #8]
 800d7b4:	b085      	sub	sp, #20
 800d7b6:	0007      	movs	r7, r0
 800d7b8:	000c      	movs	r4, r1
 800d7ba:	9203      	str	r2, [sp, #12]
 800d7bc:	9301      	str	r3, [sp, #4]
 800d7be:	429e      	cmp	r6, r3
 800d7c0:	d83c      	bhi.n	800d83c <__ssputs_r+0x8c>
 800d7c2:	2390      	movs	r3, #144	; 0x90
 800d7c4:	898a      	ldrh	r2, [r1, #12]
 800d7c6:	00db      	lsls	r3, r3, #3
 800d7c8:	421a      	tst	r2, r3
 800d7ca:	d034      	beq.n	800d836 <__ssputs_r+0x86>
 800d7cc:	2503      	movs	r5, #3
 800d7ce:	6909      	ldr	r1, [r1, #16]
 800d7d0:	6823      	ldr	r3, [r4, #0]
 800d7d2:	1a5b      	subs	r3, r3, r1
 800d7d4:	9302      	str	r3, [sp, #8]
 800d7d6:	6963      	ldr	r3, [r4, #20]
 800d7d8:	9802      	ldr	r0, [sp, #8]
 800d7da:	435d      	muls	r5, r3
 800d7dc:	0feb      	lsrs	r3, r5, #31
 800d7de:	195d      	adds	r5, r3, r5
 800d7e0:	9b01      	ldr	r3, [sp, #4]
 800d7e2:	106d      	asrs	r5, r5, #1
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	181b      	adds	r3, r3, r0
 800d7e8:	42ab      	cmp	r3, r5
 800d7ea:	d900      	bls.n	800d7ee <__ssputs_r+0x3e>
 800d7ec:	001d      	movs	r5, r3
 800d7ee:	0553      	lsls	r3, r2, #21
 800d7f0:	d532      	bpl.n	800d858 <__ssputs_r+0xa8>
 800d7f2:	0029      	movs	r1, r5
 800d7f4:	0038      	movs	r0, r7
 800d7f6:	f7fe f81b 	bl	800b830 <_malloc_r>
 800d7fa:	1e06      	subs	r6, r0, #0
 800d7fc:	d109      	bne.n	800d812 <__ssputs_r+0x62>
 800d7fe:	230c      	movs	r3, #12
 800d800:	603b      	str	r3, [r7, #0]
 800d802:	2340      	movs	r3, #64	; 0x40
 800d804:	2001      	movs	r0, #1
 800d806:	89a2      	ldrh	r2, [r4, #12]
 800d808:	4240      	negs	r0, r0
 800d80a:	4313      	orrs	r3, r2
 800d80c:	81a3      	strh	r3, [r4, #12]
 800d80e:	b005      	add	sp, #20
 800d810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d812:	9a02      	ldr	r2, [sp, #8]
 800d814:	6921      	ldr	r1, [r4, #16]
 800d816:	f7fd ffaf 	bl	800b778 <memcpy>
 800d81a:	89a3      	ldrh	r3, [r4, #12]
 800d81c:	4a14      	ldr	r2, [pc, #80]	; (800d870 <__ssputs_r+0xc0>)
 800d81e:	401a      	ands	r2, r3
 800d820:	2380      	movs	r3, #128	; 0x80
 800d822:	4313      	orrs	r3, r2
 800d824:	81a3      	strh	r3, [r4, #12]
 800d826:	9b02      	ldr	r3, [sp, #8]
 800d828:	6126      	str	r6, [r4, #16]
 800d82a:	18f6      	adds	r6, r6, r3
 800d82c:	6026      	str	r6, [r4, #0]
 800d82e:	6165      	str	r5, [r4, #20]
 800d830:	9e01      	ldr	r6, [sp, #4]
 800d832:	1aed      	subs	r5, r5, r3
 800d834:	60a5      	str	r5, [r4, #8]
 800d836:	9b01      	ldr	r3, [sp, #4]
 800d838:	429e      	cmp	r6, r3
 800d83a:	d900      	bls.n	800d83e <__ssputs_r+0x8e>
 800d83c:	9e01      	ldr	r6, [sp, #4]
 800d83e:	0032      	movs	r2, r6
 800d840:	9903      	ldr	r1, [sp, #12]
 800d842:	6820      	ldr	r0, [r4, #0]
 800d844:	f000 fd9a 	bl	800e37c <memmove>
 800d848:	68a3      	ldr	r3, [r4, #8]
 800d84a:	2000      	movs	r0, #0
 800d84c:	1b9b      	subs	r3, r3, r6
 800d84e:	60a3      	str	r3, [r4, #8]
 800d850:	6823      	ldr	r3, [r4, #0]
 800d852:	199e      	adds	r6, r3, r6
 800d854:	6026      	str	r6, [r4, #0]
 800d856:	e7da      	b.n	800d80e <__ssputs_r+0x5e>
 800d858:	002a      	movs	r2, r5
 800d85a:	0038      	movs	r0, r7
 800d85c:	f000 fda1 	bl	800e3a2 <_realloc_r>
 800d860:	1e06      	subs	r6, r0, #0
 800d862:	d1e0      	bne.n	800d826 <__ssputs_r+0x76>
 800d864:	0038      	movs	r0, r7
 800d866:	6921      	ldr	r1, [r4, #16]
 800d868:	f7fd ff98 	bl	800b79c <_free_r>
 800d86c:	e7c7      	b.n	800d7fe <__ssputs_r+0x4e>
 800d86e:	46c0      	nop			; (mov r8, r8)
 800d870:	fffffb7f 	.word	0xfffffb7f

0800d874 <_svfiprintf_r>:
 800d874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d876:	b0a1      	sub	sp, #132	; 0x84
 800d878:	9003      	str	r0, [sp, #12]
 800d87a:	001d      	movs	r5, r3
 800d87c:	898b      	ldrh	r3, [r1, #12]
 800d87e:	000f      	movs	r7, r1
 800d880:	0016      	movs	r6, r2
 800d882:	061b      	lsls	r3, r3, #24
 800d884:	d511      	bpl.n	800d8aa <_svfiprintf_r+0x36>
 800d886:	690b      	ldr	r3, [r1, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d10e      	bne.n	800d8aa <_svfiprintf_r+0x36>
 800d88c:	2140      	movs	r1, #64	; 0x40
 800d88e:	f7fd ffcf 	bl	800b830 <_malloc_r>
 800d892:	6038      	str	r0, [r7, #0]
 800d894:	6138      	str	r0, [r7, #16]
 800d896:	2800      	cmp	r0, #0
 800d898:	d105      	bne.n	800d8a6 <_svfiprintf_r+0x32>
 800d89a:	230c      	movs	r3, #12
 800d89c:	9a03      	ldr	r2, [sp, #12]
 800d89e:	3801      	subs	r0, #1
 800d8a0:	6013      	str	r3, [r2, #0]
 800d8a2:	b021      	add	sp, #132	; 0x84
 800d8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8a6:	2340      	movs	r3, #64	; 0x40
 800d8a8:	617b      	str	r3, [r7, #20]
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	ac08      	add	r4, sp, #32
 800d8ae:	6163      	str	r3, [r4, #20]
 800d8b0:	3320      	adds	r3, #32
 800d8b2:	7663      	strb	r3, [r4, #25]
 800d8b4:	3310      	adds	r3, #16
 800d8b6:	76a3      	strb	r3, [r4, #26]
 800d8b8:	9507      	str	r5, [sp, #28]
 800d8ba:	0035      	movs	r5, r6
 800d8bc:	782b      	ldrb	r3, [r5, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d001      	beq.n	800d8c6 <_svfiprintf_r+0x52>
 800d8c2:	2b25      	cmp	r3, #37	; 0x25
 800d8c4:	d147      	bne.n	800d956 <_svfiprintf_r+0xe2>
 800d8c6:	1bab      	subs	r3, r5, r6
 800d8c8:	9305      	str	r3, [sp, #20]
 800d8ca:	42b5      	cmp	r5, r6
 800d8cc:	d00c      	beq.n	800d8e8 <_svfiprintf_r+0x74>
 800d8ce:	0032      	movs	r2, r6
 800d8d0:	0039      	movs	r1, r7
 800d8d2:	9803      	ldr	r0, [sp, #12]
 800d8d4:	f7ff ff6c 	bl	800d7b0 <__ssputs_r>
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	d100      	bne.n	800d8de <_svfiprintf_r+0x6a>
 800d8dc:	e0ae      	b.n	800da3c <_svfiprintf_r+0x1c8>
 800d8de:	6962      	ldr	r2, [r4, #20]
 800d8e0:	9b05      	ldr	r3, [sp, #20]
 800d8e2:	4694      	mov	ip, r2
 800d8e4:	4463      	add	r3, ip
 800d8e6:	6163      	str	r3, [r4, #20]
 800d8e8:	782b      	ldrb	r3, [r5, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d100      	bne.n	800d8f0 <_svfiprintf_r+0x7c>
 800d8ee:	e0a5      	b.n	800da3c <_svfiprintf_r+0x1c8>
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	4252      	negs	r2, r2
 800d8f6:	6062      	str	r2, [r4, #4]
 800d8f8:	a904      	add	r1, sp, #16
 800d8fa:	3254      	adds	r2, #84	; 0x54
 800d8fc:	1852      	adds	r2, r2, r1
 800d8fe:	1c6e      	adds	r6, r5, #1
 800d900:	6023      	str	r3, [r4, #0]
 800d902:	60e3      	str	r3, [r4, #12]
 800d904:	60a3      	str	r3, [r4, #8]
 800d906:	7013      	strb	r3, [r2, #0]
 800d908:	65a3      	str	r3, [r4, #88]	; 0x58
 800d90a:	2205      	movs	r2, #5
 800d90c:	7831      	ldrb	r1, [r6, #0]
 800d90e:	4854      	ldr	r0, [pc, #336]	; (800da60 <_svfiprintf_r+0x1ec>)
 800d910:	f7ff fb86 	bl	800d020 <memchr>
 800d914:	1c75      	adds	r5, r6, #1
 800d916:	2800      	cmp	r0, #0
 800d918:	d11f      	bne.n	800d95a <_svfiprintf_r+0xe6>
 800d91a:	6822      	ldr	r2, [r4, #0]
 800d91c:	06d3      	lsls	r3, r2, #27
 800d91e:	d504      	bpl.n	800d92a <_svfiprintf_r+0xb6>
 800d920:	2353      	movs	r3, #83	; 0x53
 800d922:	a904      	add	r1, sp, #16
 800d924:	185b      	adds	r3, r3, r1
 800d926:	2120      	movs	r1, #32
 800d928:	7019      	strb	r1, [r3, #0]
 800d92a:	0713      	lsls	r3, r2, #28
 800d92c:	d504      	bpl.n	800d938 <_svfiprintf_r+0xc4>
 800d92e:	2353      	movs	r3, #83	; 0x53
 800d930:	a904      	add	r1, sp, #16
 800d932:	185b      	adds	r3, r3, r1
 800d934:	212b      	movs	r1, #43	; 0x2b
 800d936:	7019      	strb	r1, [r3, #0]
 800d938:	7833      	ldrb	r3, [r6, #0]
 800d93a:	2b2a      	cmp	r3, #42	; 0x2a
 800d93c:	d016      	beq.n	800d96c <_svfiprintf_r+0xf8>
 800d93e:	0035      	movs	r5, r6
 800d940:	2100      	movs	r1, #0
 800d942:	200a      	movs	r0, #10
 800d944:	68e3      	ldr	r3, [r4, #12]
 800d946:	782a      	ldrb	r2, [r5, #0]
 800d948:	1c6e      	adds	r6, r5, #1
 800d94a:	3a30      	subs	r2, #48	; 0x30
 800d94c:	2a09      	cmp	r2, #9
 800d94e:	d94e      	bls.n	800d9ee <_svfiprintf_r+0x17a>
 800d950:	2900      	cmp	r1, #0
 800d952:	d111      	bne.n	800d978 <_svfiprintf_r+0x104>
 800d954:	e017      	b.n	800d986 <_svfiprintf_r+0x112>
 800d956:	3501      	adds	r5, #1
 800d958:	e7b0      	b.n	800d8bc <_svfiprintf_r+0x48>
 800d95a:	4b41      	ldr	r3, [pc, #260]	; (800da60 <_svfiprintf_r+0x1ec>)
 800d95c:	6822      	ldr	r2, [r4, #0]
 800d95e:	1ac0      	subs	r0, r0, r3
 800d960:	2301      	movs	r3, #1
 800d962:	4083      	lsls	r3, r0
 800d964:	4313      	orrs	r3, r2
 800d966:	002e      	movs	r6, r5
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	e7ce      	b.n	800d90a <_svfiprintf_r+0x96>
 800d96c:	9b07      	ldr	r3, [sp, #28]
 800d96e:	1d19      	adds	r1, r3, #4
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	9107      	str	r1, [sp, #28]
 800d974:	2b00      	cmp	r3, #0
 800d976:	db01      	blt.n	800d97c <_svfiprintf_r+0x108>
 800d978:	930b      	str	r3, [sp, #44]	; 0x2c
 800d97a:	e004      	b.n	800d986 <_svfiprintf_r+0x112>
 800d97c:	425b      	negs	r3, r3
 800d97e:	60e3      	str	r3, [r4, #12]
 800d980:	2302      	movs	r3, #2
 800d982:	4313      	orrs	r3, r2
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	782b      	ldrb	r3, [r5, #0]
 800d988:	2b2e      	cmp	r3, #46	; 0x2e
 800d98a:	d10a      	bne.n	800d9a2 <_svfiprintf_r+0x12e>
 800d98c:	786b      	ldrb	r3, [r5, #1]
 800d98e:	2b2a      	cmp	r3, #42	; 0x2a
 800d990:	d135      	bne.n	800d9fe <_svfiprintf_r+0x18a>
 800d992:	9b07      	ldr	r3, [sp, #28]
 800d994:	3502      	adds	r5, #2
 800d996:	1d1a      	adds	r2, r3, #4
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	9207      	str	r2, [sp, #28]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	db2b      	blt.n	800d9f8 <_svfiprintf_r+0x184>
 800d9a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d9a2:	4e30      	ldr	r6, [pc, #192]	; (800da64 <_svfiprintf_r+0x1f0>)
 800d9a4:	2203      	movs	r2, #3
 800d9a6:	0030      	movs	r0, r6
 800d9a8:	7829      	ldrb	r1, [r5, #0]
 800d9aa:	f7ff fb39 	bl	800d020 <memchr>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	d006      	beq.n	800d9c0 <_svfiprintf_r+0x14c>
 800d9b2:	2340      	movs	r3, #64	; 0x40
 800d9b4:	1b80      	subs	r0, r0, r6
 800d9b6:	4083      	lsls	r3, r0
 800d9b8:	6822      	ldr	r2, [r4, #0]
 800d9ba:	3501      	adds	r5, #1
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	6023      	str	r3, [r4, #0]
 800d9c0:	7829      	ldrb	r1, [r5, #0]
 800d9c2:	2206      	movs	r2, #6
 800d9c4:	4828      	ldr	r0, [pc, #160]	; (800da68 <_svfiprintf_r+0x1f4>)
 800d9c6:	1c6e      	adds	r6, r5, #1
 800d9c8:	7621      	strb	r1, [r4, #24]
 800d9ca:	f7ff fb29 	bl	800d020 <memchr>
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	d03c      	beq.n	800da4c <_svfiprintf_r+0x1d8>
 800d9d2:	4b26      	ldr	r3, [pc, #152]	; (800da6c <_svfiprintf_r+0x1f8>)
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d125      	bne.n	800da24 <_svfiprintf_r+0x1b0>
 800d9d8:	2207      	movs	r2, #7
 800d9da:	9b07      	ldr	r3, [sp, #28]
 800d9dc:	3307      	adds	r3, #7
 800d9de:	4393      	bics	r3, r2
 800d9e0:	3308      	adds	r3, #8
 800d9e2:	9307      	str	r3, [sp, #28]
 800d9e4:	6963      	ldr	r3, [r4, #20]
 800d9e6:	9a04      	ldr	r2, [sp, #16]
 800d9e8:	189b      	adds	r3, r3, r2
 800d9ea:	6163      	str	r3, [r4, #20]
 800d9ec:	e765      	b.n	800d8ba <_svfiprintf_r+0x46>
 800d9ee:	4343      	muls	r3, r0
 800d9f0:	0035      	movs	r5, r6
 800d9f2:	2101      	movs	r1, #1
 800d9f4:	189b      	adds	r3, r3, r2
 800d9f6:	e7a6      	b.n	800d946 <_svfiprintf_r+0xd2>
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	425b      	negs	r3, r3
 800d9fc:	e7d0      	b.n	800d9a0 <_svfiprintf_r+0x12c>
 800d9fe:	2300      	movs	r3, #0
 800da00:	200a      	movs	r0, #10
 800da02:	001a      	movs	r2, r3
 800da04:	3501      	adds	r5, #1
 800da06:	6063      	str	r3, [r4, #4]
 800da08:	7829      	ldrb	r1, [r5, #0]
 800da0a:	1c6e      	adds	r6, r5, #1
 800da0c:	3930      	subs	r1, #48	; 0x30
 800da0e:	2909      	cmp	r1, #9
 800da10:	d903      	bls.n	800da1a <_svfiprintf_r+0x1a6>
 800da12:	2b00      	cmp	r3, #0
 800da14:	d0c5      	beq.n	800d9a2 <_svfiprintf_r+0x12e>
 800da16:	9209      	str	r2, [sp, #36]	; 0x24
 800da18:	e7c3      	b.n	800d9a2 <_svfiprintf_r+0x12e>
 800da1a:	4342      	muls	r2, r0
 800da1c:	0035      	movs	r5, r6
 800da1e:	2301      	movs	r3, #1
 800da20:	1852      	adds	r2, r2, r1
 800da22:	e7f1      	b.n	800da08 <_svfiprintf_r+0x194>
 800da24:	ab07      	add	r3, sp, #28
 800da26:	9300      	str	r3, [sp, #0]
 800da28:	003a      	movs	r2, r7
 800da2a:	0021      	movs	r1, r4
 800da2c:	4b10      	ldr	r3, [pc, #64]	; (800da70 <_svfiprintf_r+0x1fc>)
 800da2e:	9803      	ldr	r0, [sp, #12]
 800da30:	f7fe f806 	bl	800ba40 <_printf_float>
 800da34:	9004      	str	r0, [sp, #16]
 800da36:	9b04      	ldr	r3, [sp, #16]
 800da38:	3301      	adds	r3, #1
 800da3a:	d1d3      	bne.n	800d9e4 <_svfiprintf_r+0x170>
 800da3c:	89bb      	ldrh	r3, [r7, #12]
 800da3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800da40:	065b      	lsls	r3, r3, #25
 800da42:	d400      	bmi.n	800da46 <_svfiprintf_r+0x1d2>
 800da44:	e72d      	b.n	800d8a2 <_svfiprintf_r+0x2e>
 800da46:	2001      	movs	r0, #1
 800da48:	4240      	negs	r0, r0
 800da4a:	e72a      	b.n	800d8a2 <_svfiprintf_r+0x2e>
 800da4c:	ab07      	add	r3, sp, #28
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	003a      	movs	r2, r7
 800da52:	0021      	movs	r1, r4
 800da54:	4b06      	ldr	r3, [pc, #24]	; (800da70 <_svfiprintf_r+0x1fc>)
 800da56:	9803      	ldr	r0, [sp, #12]
 800da58:	f7fe fab0 	bl	800bfbc <_printf_i>
 800da5c:	e7ea      	b.n	800da34 <_svfiprintf_r+0x1c0>
 800da5e:	46c0      	nop			; (mov r8, r8)
 800da60:	0800eb14 	.word	0x0800eb14
 800da64:	0800eb1a 	.word	0x0800eb1a
 800da68:	0800eb1e 	.word	0x0800eb1e
 800da6c:	0800ba41 	.word	0x0800ba41
 800da70:	0800d7b1 	.word	0x0800d7b1

0800da74 <__sfputc_r>:
 800da74:	6893      	ldr	r3, [r2, #8]
 800da76:	b510      	push	{r4, lr}
 800da78:	3b01      	subs	r3, #1
 800da7a:	6093      	str	r3, [r2, #8]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	da04      	bge.n	800da8a <__sfputc_r+0x16>
 800da80:	6994      	ldr	r4, [r2, #24]
 800da82:	42a3      	cmp	r3, r4
 800da84:	db07      	blt.n	800da96 <__sfputc_r+0x22>
 800da86:	290a      	cmp	r1, #10
 800da88:	d005      	beq.n	800da96 <__sfputc_r+0x22>
 800da8a:	6813      	ldr	r3, [r2, #0]
 800da8c:	1c58      	adds	r0, r3, #1
 800da8e:	6010      	str	r0, [r2, #0]
 800da90:	7019      	strb	r1, [r3, #0]
 800da92:	0008      	movs	r0, r1
 800da94:	bd10      	pop	{r4, pc}
 800da96:	f000 f94f 	bl	800dd38 <__swbuf_r>
 800da9a:	0001      	movs	r1, r0
 800da9c:	e7f9      	b.n	800da92 <__sfputc_r+0x1e>

0800da9e <__sfputs_r>:
 800da9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa0:	0006      	movs	r6, r0
 800daa2:	000f      	movs	r7, r1
 800daa4:	0014      	movs	r4, r2
 800daa6:	18d5      	adds	r5, r2, r3
 800daa8:	42ac      	cmp	r4, r5
 800daaa:	d101      	bne.n	800dab0 <__sfputs_r+0x12>
 800daac:	2000      	movs	r0, #0
 800daae:	e007      	b.n	800dac0 <__sfputs_r+0x22>
 800dab0:	7821      	ldrb	r1, [r4, #0]
 800dab2:	003a      	movs	r2, r7
 800dab4:	0030      	movs	r0, r6
 800dab6:	f7ff ffdd 	bl	800da74 <__sfputc_r>
 800daba:	3401      	adds	r4, #1
 800dabc:	1c43      	adds	r3, r0, #1
 800dabe:	d1f3      	bne.n	800daa8 <__sfputs_r+0xa>
 800dac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dac4 <_vfiprintf_r>:
 800dac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dac6:	b0a1      	sub	sp, #132	; 0x84
 800dac8:	0006      	movs	r6, r0
 800daca:	000c      	movs	r4, r1
 800dacc:	001f      	movs	r7, r3
 800dace:	9203      	str	r2, [sp, #12]
 800dad0:	2800      	cmp	r0, #0
 800dad2:	d004      	beq.n	800dade <_vfiprintf_r+0x1a>
 800dad4:	6983      	ldr	r3, [r0, #24]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <_vfiprintf_r+0x1a>
 800dada:	f000 fb3f 	bl	800e15c <__sinit>
 800dade:	4b8e      	ldr	r3, [pc, #568]	; (800dd18 <_vfiprintf_r+0x254>)
 800dae0:	429c      	cmp	r4, r3
 800dae2:	d11c      	bne.n	800db1e <_vfiprintf_r+0x5a>
 800dae4:	6874      	ldr	r4, [r6, #4]
 800dae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dae8:	07db      	lsls	r3, r3, #31
 800daea:	d405      	bmi.n	800daf8 <_vfiprintf_r+0x34>
 800daec:	89a3      	ldrh	r3, [r4, #12]
 800daee:	059b      	lsls	r3, r3, #22
 800daf0:	d402      	bmi.n	800daf8 <_vfiprintf_r+0x34>
 800daf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daf4:	f000 fbd3 	bl	800e29e <__retarget_lock_acquire_recursive>
 800daf8:	89a3      	ldrh	r3, [r4, #12]
 800dafa:	071b      	lsls	r3, r3, #28
 800dafc:	d502      	bpl.n	800db04 <_vfiprintf_r+0x40>
 800dafe:	6923      	ldr	r3, [r4, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d11d      	bne.n	800db40 <_vfiprintf_r+0x7c>
 800db04:	0021      	movs	r1, r4
 800db06:	0030      	movs	r0, r6
 800db08:	f000 f97a 	bl	800de00 <__swsetup_r>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d017      	beq.n	800db40 <_vfiprintf_r+0x7c>
 800db10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db12:	07db      	lsls	r3, r3, #31
 800db14:	d50d      	bpl.n	800db32 <_vfiprintf_r+0x6e>
 800db16:	2001      	movs	r0, #1
 800db18:	4240      	negs	r0, r0
 800db1a:	b021      	add	sp, #132	; 0x84
 800db1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db1e:	4b7f      	ldr	r3, [pc, #508]	; (800dd1c <_vfiprintf_r+0x258>)
 800db20:	429c      	cmp	r4, r3
 800db22:	d101      	bne.n	800db28 <_vfiprintf_r+0x64>
 800db24:	68b4      	ldr	r4, [r6, #8]
 800db26:	e7de      	b.n	800dae6 <_vfiprintf_r+0x22>
 800db28:	4b7d      	ldr	r3, [pc, #500]	; (800dd20 <_vfiprintf_r+0x25c>)
 800db2a:	429c      	cmp	r4, r3
 800db2c:	d1db      	bne.n	800dae6 <_vfiprintf_r+0x22>
 800db2e:	68f4      	ldr	r4, [r6, #12]
 800db30:	e7d9      	b.n	800dae6 <_vfiprintf_r+0x22>
 800db32:	89a3      	ldrh	r3, [r4, #12]
 800db34:	059b      	lsls	r3, r3, #22
 800db36:	d4ee      	bmi.n	800db16 <_vfiprintf_r+0x52>
 800db38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db3a:	f000 fbb1 	bl	800e2a0 <__retarget_lock_release_recursive>
 800db3e:	e7ea      	b.n	800db16 <_vfiprintf_r+0x52>
 800db40:	2300      	movs	r3, #0
 800db42:	ad08      	add	r5, sp, #32
 800db44:	616b      	str	r3, [r5, #20]
 800db46:	3320      	adds	r3, #32
 800db48:	766b      	strb	r3, [r5, #25]
 800db4a:	3310      	adds	r3, #16
 800db4c:	76ab      	strb	r3, [r5, #26]
 800db4e:	9707      	str	r7, [sp, #28]
 800db50:	9f03      	ldr	r7, [sp, #12]
 800db52:	783b      	ldrb	r3, [r7, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <_vfiprintf_r+0x98>
 800db58:	2b25      	cmp	r3, #37	; 0x25
 800db5a:	d14e      	bne.n	800dbfa <_vfiprintf_r+0x136>
 800db5c:	9b03      	ldr	r3, [sp, #12]
 800db5e:	1afb      	subs	r3, r7, r3
 800db60:	9305      	str	r3, [sp, #20]
 800db62:	9b03      	ldr	r3, [sp, #12]
 800db64:	429f      	cmp	r7, r3
 800db66:	d00d      	beq.n	800db84 <_vfiprintf_r+0xc0>
 800db68:	9b05      	ldr	r3, [sp, #20]
 800db6a:	0021      	movs	r1, r4
 800db6c:	0030      	movs	r0, r6
 800db6e:	9a03      	ldr	r2, [sp, #12]
 800db70:	f7ff ff95 	bl	800da9e <__sfputs_r>
 800db74:	1c43      	adds	r3, r0, #1
 800db76:	d100      	bne.n	800db7a <_vfiprintf_r+0xb6>
 800db78:	e0b5      	b.n	800dce6 <_vfiprintf_r+0x222>
 800db7a:	696a      	ldr	r2, [r5, #20]
 800db7c:	9b05      	ldr	r3, [sp, #20]
 800db7e:	4694      	mov	ip, r2
 800db80:	4463      	add	r3, ip
 800db82:	616b      	str	r3, [r5, #20]
 800db84:	783b      	ldrb	r3, [r7, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d100      	bne.n	800db8c <_vfiprintf_r+0xc8>
 800db8a:	e0ac      	b.n	800dce6 <_vfiprintf_r+0x222>
 800db8c:	2201      	movs	r2, #1
 800db8e:	1c7b      	adds	r3, r7, #1
 800db90:	9303      	str	r3, [sp, #12]
 800db92:	2300      	movs	r3, #0
 800db94:	4252      	negs	r2, r2
 800db96:	606a      	str	r2, [r5, #4]
 800db98:	a904      	add	r1, sp, #16
 800db9a:	3254      	adds	r2, #84	; 0x54
 800db9c:	1852      	adds	r2, r2, r1
 800db9e:	602b      	str	r3, [r5, #0]
 800dba0:	60eb      	str	r3, [r5, #12]
 800dba2:	60ab      	str	r3, [r5, #8]
 800dba4:	7013      	strb	r3, [r2, #0]
 800dba6:	65ab      	str	r3, [r5, #88]	; 0x58
 800dba8:	9b03      	ldr	r3, [sp, #12]
 800dbaa:	2205      	movs	r2, #5
 800dbac:	7819      	ldrb	r1, [r3, #0]
 800dbae:	485d      	ldr	r0, [pc, #372]	; (800dd24 <_vfiprintf_r+0x260>)
 800dbb0:	f7ff fa36 	bl	800d020 <memchr>
 800dbb4:	9b03      	ldr	r3, [sp, #12]
 800dbb6:	1c5f      	adds	r7, r3, #1
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d120      	bne.n	800dbfe <_vfiprintf_r+0x13a>
 800dbbc:	682a      	ldr	r2, [r5, #0]
 800dbbe:	06d3      	lsls	r3, r2, #27
 800dbc0:	d504      	bpl.n	800dbcc <_vfiprintf_r+0x108>
 800dbc2:	2353      	movs	r3, #83	; 0x53
 800dbc4:	a904      	add	r1, sp, #16
 800dbc6:	185b      	adds	r3, r3, r1
 800dbc8:	2120      	movs	r1, #32
 800dbca:	7019      	strb	r1, [r3, #0]
 800dbcc:	0713      	lsls	r3, r2, #28
 800dbce:	d504      	bpl.n	800dbda <_vfiprintf_r+0x116>
 800dbd0:	2353      	movs	r3, #83	; 0x53
 800dbd2:	a904      	add	r1, sp, #16
 800dbd4:	185b      	adds	r3, r3, r1
 800dbd6:	212b      	movs	r1, #43	; 0x2b
 800dbd8:	7019      	strb	r1, [r3, #0]
 800dbda:	9b03      	ldr	r3, [sp, #12]
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	2b2a      	cmp	r3, #42	; 0x2a
 800dbe0:	d016      	beq.n	800dc10 <_vfiprintf_r+0x14c>
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	68eb      	ldr	r3, [r5, #12]
 800dbe6:	9f03      	ldr	r7, [sp, #12]
 800dbe8:	783a      	ldrb	r2, [r7, #0]
 800dbea:	1c78      	adds	r0, r7, #1
 800dbec:	3a30      	subs	r2, #48	; 0x30
 800dbee:	4684      	mov	ip, r0
 800dbf0:	2a09      	cmp	r2, #9
 800dbf2:	d94f      	bls.n	800dc94 <_vfiprintf_r+0x1d0>
 800dbf4:	2900      	cmp	r1, #0
 800dbf6:	d111      	bne.n	800dc1c <_vfiprintf_r+0x158>
 800dbf8:	e017      	b.n	800dc2a <_vfiprintf_r+0x166>
 800dbfa:	3701      	adds	r7, #1
 800dbfc:	e7a9      	b.n	800db52 <_vfiprintf_r+0x8e>
 800dbfe:	4b49      	ldr	r3, [pc, #292]	; (800dd24 <_vfiprintf_r+0x260>)
 800dc00:	682a      	ldr	r2, [r5, #0]
 800dc02:	1ac0      	subs	r0, r0, r3
 800dc04:	2301      	movs	r3, #1
 800dc06:	4083      	lsls	r3, r0
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	602b      	str	r3, [r5, #0]
 800dc0c:	9703      	str	r7, [sp, #12]
 800dc0e:	e7cb      	b.n	800dba8 <_vfiprintf_r+0xe4>
 800dc10:	9b07      	ldr	r3, [sp, #28]
 800dc12:	1d19      	adds	r1, r3, #4
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	9107      	str	r1, [sp, #28]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	db01      	blt.n	800dc20 <_vfiprintf_r+0x15c>
 800dc1c:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc1e:	e004      	b.n	800dc2a <_vfiprintf_r+0x166>
 800dc20:	425b      	negs	r3, r3
 800dc22:	60eb      	str	r3, [r5, #12]
 800dc24:	2302      	movs	r3, #2
 800dc26:	4313      	orrs	r3, r2
 800dc28:	602b      	str	r3, [r5, #0]
 800dc2a:	783b      	ldrb	r3, [r7, #0]
 800dc2c:	2b2e      	cmp	r3, #46	; 0x2e
 800dc2e:	d10a      	bne.n	800dc46 <_vfiprintf_r+0x182>
 800dc30:	787b      	ldrb	r3, [r7, #1]
 800dc32:	2b2a      	cmp	r3, #42	; 0x2a
 800dc34:	d137      	bne.n	800dca6 <_vfiprintf_r+0x1e2>
 800dc36:	9b07      	ldr	r3, [sp, #28]
 800dc38:	3702      	adds	r7, #2
 800dc3a:	1d1a      	adds	r2, r3, #4
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	9207      	str	r2, [sp, #28]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	db2d      	blt.n	800dca0 <_vfiprintf_r+0x1dc>
 800dc44:	9309      	str	r3, [sp, #36]	; 0x24
 800dc46:	2203      	movs	r2, #3
 800dc48:	7839      	ldrb	r1, [r7, #0]
 800dc4a:	4837      	ldr	r0, [pc, #220]	; (800dd28 <_vfiprintf_r+0x264>)
 800dc4c:	f7ff f9e8 	bl	800d020 <memchr>
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d007      	beq.n	800dc64 <_vfiprintf_r+0x1a0>
 800dc54:	4b34      	ldr	r3, [pc, #208]	; (800dd28 <_vfiprintf_r+0x264>)
 800dc56:	682a      	ldr	r2, [r5, #0]
 800dc58:	1ac0      	subs	r0, r0, r3
 800dc5a:	2340      	movs	r3, #64	; 0x40
 800dc5c:	4083      	lsls	r3, r0
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	3701      	adds	r7, #1
 800dc62:	602b      	str	r3, [r5, #0]
 800dc64:	7839      	ldrb	r1, [r7, #0]
 800dc66:	1c7b      	adds	r3, r7, #1
 800dc68:	2206      	movs	r2, #6
 800dc6a:	4830      	ldr	r0, [pc, #192]	; (800dd2c <_vfiprintf_r+0x268>)
 800dc6c:	9303      	str	r3, [sp, #12]
 800dc6e:	7629      	strb	r1, [r5, #24]
 800dc70:	f7ff f9d6 	bl	800d020 <memchr>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	d045      	beq.n	800dd04 <_vfiprintf_r+0x240>
 800dc78:	4b2d      	ldr	r3, [pc, #180]	; (800dd30 <_vfiprintf_r+0x26c>)
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d127      	bne.n	800dcce <_vfiprintf_r+0x20a>
 800dc7e:	2207      	movs	r2, #7
 800dc80:	9b07      	ldr	r3, [sp, #28]
 800dc82:	3307      	adds	r3, #7
 800dc84:	4393      	bics	r3, r2
 800dc86:	3308      	adds	r3, #8
 800dc88:	9307      	str	r3, [sp, #28]
 800dc8a:	696b      	ldr	r3, [r5, #20]
 800dc8c:	9a04      	ldr	r2, [sp, #16]
 800dc8e:	189b      	adds	r3, r3, r2
 800dc90:	616b      	str	r3, [r5, #20]
 800dc92:	e75d      	b.n	800db50 <_vfiprintf_r+0x8c>
 800dc94:	210a      	movs	r1, #10
 800dc96:	434b      	muls	r3, r1
 800dc98:	4667      	mov	r7, ip
 800dc9a:	189b      	adds	r3, r3, r2
 800dc9c:	3909      	subs	r1, #9
 800dc9e:	e7a3      	b.n	800dbe8 <_vfiprintf_r+0x124>
 800dca0:	2301      	movs	r3, #1
 800dca2:	425b      	negs	r3, r3
 800dca4:	e7ce      	b.n	800dc44 <_vfiprintf_r+0x180>
 800dca6:	2300      	movs	r3, #0
 800dca8:	001a      	movs	r2, r3
 800dcaa:	3701      	adds	r7, #1
 800dcac:	606b      	str	r3, [r5, #4]
 800dcae:	7839      	ldrb	r1, [r7, #0]
 800dcb0:	1c78      	adds	r0, r7, #1
 800dcb2:	3930      	subs	r1, #48	; 0x30
 800dcb4:	4684      	mov	ip, r0
 800dcb6:	2909      	cmp	r1, #9
 800dcb8:	d903      	bls.n	800dcc2 <_vfiprintf_r+0x1fe>
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d0c3      	beq.n	800dc46 <_vfiprintf_r+0x182>
 800dcbe:	9209      	str	r2, [sp, #36]	; 0x24
 800dcc0:	e7c1      	b.n	800dc46 <_vfiprintf_r+0x182>
 800dcc2:	230a      	movs	r3, #10
 800dcc4:	435a      	muls	r2, r3
 800dcc6:	4667      	mov	r7, ip
 800dcc8:	1852      	adds	r2, r2, r1
 800dcca:	3b09      	subs	r3, #9
 800dccc:	e7ef      	b.n	800dcae <_vfiprintf_r+0x1ea>
 800dcce:	ab07      	add	r3, sp, #28
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	0022      	movs	r2, r4
 800dcd4:	0029      	movs	r1, r5
 800dcd6:	0030      	movs	r0, r6
 800dcd8:	4b16      	ldr	r3, [pc, #88]	; (800dd34 <_vfiprintf_r+0x270>)
 800dcda:	f7fd feb1 	bl	800ba40 <_printf_float>
 800dcde:	9004      	str	r0, [sp, #16]
 800dce0:	9b04      	ldr	r3, [sp, #16]
 800dce2:	3301      	adds	r3, #1
 800dce4:	d1d1      	bne.n	800dc8a <_vfiprintf_r+0x1c6>
 800dce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dce8:	07db      	lsls	r3, r3, #31
 800dcea:	d405      	bmi.n	800dcf8 <_vfiprintf_r+0x234>
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	059b      	lsls	r3, r3, #22
 800dcf0:	d402      	bmi.n	800dcf8 <_vfiprintf_r+0x234>
 800dcf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcf4:	f000 fad4 	bl	800e2a0 <__retarget_lock_release_recursive>
 800dcf8:	89a3      	ldrh	r3, [r4, #12]
 800dcfa:	065b      	lsls	r3, r3, #25
 800dcfc:	d500      	bpl.n	800dd00 <_vfiprintf_r+0x23c>
 800dcfe:	e70a      	b.n	800db16 <_vfiprintf_r+0x52>
 800dd00:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dd02:	e70a      	b.n	800db1a <_vfiprintf_r+0x56>
 800dd04:	ab07      	add	r3, sp, #28
 800dd06:	9300      	str	r3, [sp, #0]
 800dd08:	0022      	movs	r2, r4
 800dd0a:	0029      	movs	r1, r5
 800dd0c:	0030      	movs	r0, r6
 800dd0e:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <_vfiprintf_r+0x270>)
 800dd10:	f7fe f954 	bl	800bfbc <_printf_i>
 800dd14:	e7e3      	b.n	800dcde <_vfiprintf_r+0x21a>
 800dd16:	46c0      	nop			; (mov r8, r8)
 800dd18:	0800eb48 	.word	0x0800eb48
 800dd1c:	0800eb68 	.word	0x0800eb68
 800dd20:	0800eb28 	.word	0x0800eb28
 800dd24:	0800eb14 	.word	0x0800eb14
 800dd28:	0800eb1a 	.word	0x0800eb1a
 800dd2c:	0800eb1e 	.word	0x0800eb1e
 800dd30:	0800ba41 	.word	0x0800ba41
 800dd34:	0800da9f 	.word	0x0800da9f

0800dd38 <__swbuf_r>:
 800dd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3a:	0005      	movs	r5, r0
 800dd3c:	000e      	movs	r6, r1
 800dd3e:	0014      	movs	r4, r2
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d004      	beq.n	800dd4e <__swbuf_r+0x16>
 800dd44:	6983      	ldr	r3, [r0, #24]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d101      	bne.n	800dd4e <__swbuf_r+0x16>
 800dd4a:	f000 fa07 	bl	800e15c <__sinit>
 800dd4e:	4b22      	ldr	r3, [pc, #136]	; (800ddd8 <__swbuf_r+0xa0>)
 800dd50:	429c      	cmp	r4, r3
 800dd52:	d12e      	bne.n	800ddb2 <__swbuf_r+0x7a>
 800dd54:	686c      	ldr	r4, [r5, #4]
 800dd56:	69a3      	ldr	r3, [r4, #24]
 800dd58:	60a3      	str	r3, [r4, #8]
 800dd5a:	89a3      	ldrh	r3, [r4, #12]
 800dd5c:	071b      	lsls	r3, r3, #28
 800dd5e:	d532      	bpl.n	800ddc6 <__swbuf_r+0x8e>
 800dd60:	6923      	ldr	r3, [r4, #16]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d02f      	beq.n	800ddc6 <__swbuf_r+0x8e>
 800dd66:	6823      	ldr	r3, [r4, #0]
 800dd68:	6922      	ldr	r2, [r4, #16]
 800dd6a:	b2f7      	uxtb	r7, r6
 800dd6c:	1a98      	subs	r0, r3, r2
 800dd6e:	6963      	ldr	r3, [r4, #20]
 800dd70:	b2f6      	uxtb	r6, r6
 800dd72:	4283      	cmp	r3, r0
 800dd74:	dc05      	bgt.n	800dd82 <__swbuf_r+0x4a>
 800dd76:	0021      	movs	r1, r4
 800dd78:	0028      	movs	r0, r5
 800dd7a:	f000 f94d 	bl	800e018 <_fflush_r>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	d127      	bne.n	800ddd2 <__swbuf_r+0x9a>
 800dd82:	68a3      	ldr	r3, [r4, #8]
 800dd84:	3001      	adds	r0, #1
 800dd86:	3b01      	subs	r3, #1
 800dd88:	60a3      	str	r3, [r4, #8]
 800dd8a:	6823      	ldr	r3, [r4, #0]
 800dd8c:	1c5a      	adds	r2, r3, #1
 800dd8e:	6022      	str	r2, [r4, #0]
 800dd90:	701f      	strb	r7, [r3, #0]
 800dd92:	6963      	ldr	r3, [r4, #20]
 800dd94:	4283      	cmp	r3, r0
 800dd96:	d004      	beq.n	800dda2 <__swbuf_r+0x6a>
 800dd98:	89a3      	ldrh	r3, [r4, #12]
 800dd9a:	07db      	lsls	r3, r3, #31
 800dd9c:	d507      	bpl.n	800ddae <__swbuf_r+0x76>
 800dd9e:	2e0a      	cmp	r6, #10
 800dda0:	d105      	bne.n	800ddae <__swbuf_r+0x76>
 800dda2:	0021      	movs	r1, r4
 800dda4:	0028      	movs	r0, r5
 800dda6:	f000 f937 	bl	800e018 <_fflush_r>
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	d111      	bne.n	800ddd2 <__swbuf_r+0x9a>
 800ddae:	0030      	movs	r0, r6
 800ddb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddb2:	4b0a      	ldr	r3, [pc, #40]	; (800dddc <__swbuf_r+0xa4>)
 800ddb4:	429c      	cmp	r4, r3
 800ddb6:	d101      	bne.n	800ddbc <__swbuf_r+0x84>
 800ddb8:	68ac      	ldr	r4, [r5, #8]
 800ddba:	e7cc      	b.n	800dd56 <__swbuf_r+0x1e>
 800ddbc:	4b08      	ldr	r3, [pc, #32]	; (800dde0 <__swbuf_r+0xa8>)
 800ddbe:	429c      	cmp	r4, r3
 800ddc0:	d1c9      	bne.n	800dd56 <__swbuf_r+0x1e>
 800ddc2:	68ec      	ldr	r4, [r5, #12]
 800ddc4:	e7c7      	b.n	800dd56 <__swbuf_r+0x1e>
 800ddc6:	0021      	movs	r1, r4
 800ddc8:	0028      	movs	r0, r5
 800ddca:	f000 f819 	bl	800de00 <__swsetup_r>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d0c9      	beq.n	800dd66 <__swbuf_r+0x2e>
 800ddd2:	2601      	movs	r6, #1
 800ddd4:	4276      	negs	r6, r6
 800ddd6:	e7ea      	b.n	800ddae <__swbuf_r+0x76>
 800ddd8:	0800eb48 	.word	0x0800eb48
 800dddc:	0800eb68 	.word	0x0800eb68
 800dde0:	0800eb28 	.word	0x0800eb28

0800dde4 <__ascii_wctomb>:
 800dde4:	0003      	movs	r3, r0
 800dde6:	1e08      	subs	r0, r1, #0
 800dde8:	d005      	beq.n	800ddf6 <__ascii_wctomb+0x12>
 800ddea:	2aff      	cmp	r2, #255	; 0xff
 800ddec:	d904      	bls.n	800ddf8 <__ascii_wctomb+0x14>
 800ddee:	228a      	movs	r2, #138	; 0x8a
 800ddf0:	2001      	movs	r0, #1
 800ddf2:	601a      	str	r2, [r3, #0]
 800ddf4:	4240      	negs	r0, r0
 800ddf6:	4770      	bx	lr
 800ddf8:	2001      	movs	r0, #1
 800ddfa:	700a      	strb	r2, [r1, #0]
 800ddfc:	e7fb      	b.n	800ddf6 <__ascii_wctomb+0x12>
	...

0800de00 <__swsetup_r>:
 800de00:	4b37      	ldr	r3, [pc, #220]	; (800dee0 <__swsetup_r+0xe0>)
 800de02:	b570      	push	{r4, r5, r6, lr}
 800de04:	681d      	ldr	r5, [r3, #0]
 800de06:	0006      	movs	r6, r0
 800de08:	000c      	movs	r4, r1
 800de0a:	2d00      	cmp	r5, #0
 800de0c:	d005      	beq.n	800de1a <__swsetup_r+0x1a>
 800de0e:	69ab      	ldr	r3, [r5, #24]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d102      	bne.n	800de1a <__swsetup_r+0x1a>
 800de14:	0028      	movs	r0, r5
 800de16:	f000 f9a1 	bl	800e15c <__sinit>
 800de1a:	4b32      	ldr	r3, [pc, #200]	; (800dee4 <__swsetup_r+0xe4>)
 800de1c:	429c      	cmp	r4, r3
 800de1e:	d10f      	bne.n	800de40 <__swsetup_r+0x40>
 800de20:	686c      	ldr	r4, [r5, #4]
 800de22:	230c      	movs	r3, #12
 800de24:	5ee2      	ldrsh	r2, [r4, r3]
 800de26:	b293      	uxth	r3, r2
 800de28:	0711      	lsls	r1, r2, #28
 800de2a:	d42d      	bmi.n	800de88 <__swsetup_r+0x88>
 800de2c:	06d9      	lsls	r1, r3, #27
 800de2e:	d411      	bmi.n	800de54 <__swsetup_r+0x54>
 800de30:	2309      	movs	r3, #9
 800de32:	2001      	movs	r0, #1
 800de34:	6033      	str	r3, [r6, #0]
 800de36:	3337      	adds	r3, #55	; 0x37
 800de38:	4313      	orrs	r3, r2
 800de3a:	81a3      	strh	r3, [r4, #12]
 800de3c:	4240      	negs	r0, r0
 800de3e:	bd70      	pop	{r4, r5, r6, pc}
 800de40:	4b29      	ldr	r3, [pc, #164]	; (800dee8 <__swsetup_r+0xe8>)
 800de42:	429c      	cmp	r4, r3
 800de44:	d101      	bne.n	800de4a <__swsetup_r+0x4a>
 800de46:	68ac      	ldr	r4, [r5, #8]
 800de48:	e7eb      	b.n	800de22 <__swsetup_r+0x22>
 800de4a:	4b28      	ldr	r3, [pc, #160]	; (800deec <__swsetup_r+0xec>)
 800de4c:	429c      	cmp	r4, r3
 800de4e:	d1e8      	bne.n	800de22 <__swsetup_r+0x22>
 800de50:	68ec      	ldr	r4, [r5, #12]
 800de52:	e7e6      	b.n	800de22 <__swsetup_r+0x22>
 800de54:	075b      	lsls	r3, r3, #29
 800de56:	d513      	bpl.n	800de80 <__swsetup_r+0x80>
 800de58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de5a:	2900      	cmp	r1, #0
 800de5c:	d008      	beq.n	800de70 <__swsetup_r+0x70>
 800de5e:	0023      	movs	r3, r4
 800de60:	3344      	adds	r3, #68	; 0x44
 800de62:	4299      	cmp	r1, r3
 800de64:	d002      	beq.n	800de6c <__swsetup_r+0x6c>
 800de66:	0030      	movs	r0, r6
 800de68:	f7fd fc98 	bl	800b79c <_free_r>
 800de6c:	2300      	movs	r3, #0
 800de6e:	6363      	str	r3, [r4, #52]	; 0x34
 800de70:	2224      	movs	r2, #36	; 0x24
 800de72:	89a3      	ldrh	r3, [r4, #12]
 800de74:	4393      	bics	r3, r2
 800de76:	81a3      	strh	r3, [r4, #12]
 800de78:	2300      	movs	r3, #0
 800de7a:	6063      	str	r3, [r4, #4]
 800de7c:	6923      	ldr	r3, [r4, #16]
 800de7e:	6023      	str	r3, [r4, #0]
 800de80:	2308      	movs	r3, #8
 800de82:	89a2      	ldrh	r2, [r4, #12]
 800de84:	4313      	orrs	r3, r2
 800de86:	81a3      	strh	r3, [r4, #12]
 800de88:	6923      	ldr	r3, [r4, #16]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d10b      	bne.n	800dea6 <__swsetup_r+0xa6>
 800de8e:	21a0      	movs	r1, #160	; 0xa0
 800de90:	2280      	movs	r2, #128	; 0x80
 800de92:	89a3      	ldrh	r3, [r4, #12]
 800de94:	0089      	lsls	r1, r1, #2
 800de96:	0092      	lsls	r2, r2, #2
 800de98:	400b      	ands	r3, r1
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d003      	beq.n	800dea6 <__swsetup_r+0xa6>
 800de9e:	0021      	movs	r1, r4
 800dea0:	0030      	movs	r0, r6
 800dea2:	f000 fa27 	bl	800e2f4 <__smakebuf_r>
 800dea6:	220c      	movs	r2, #12
 800dea8:	5ea3      	ldrsh	r3, [r4, r2]
 800deaa:	2001      	movs	r0, #1
 800deac:	001a      	movs	r2, r3
 800deae:	b299      	uxth	r1, r3
 800deb0:	4002      	ands	r2, r0
 800deb2:	4203      	tst	r3, r0
 800deb4:	d00f      	beq.n	800ded6 <__swsetup_r+0xd6>
 800deb6:	2200      	movs	r2, #0
 800deb8:	60a2      	str	r2, [r4, #8]
 800deba:	6962      	ldr	r2, [r4, #20]
 800debc:	4252      	negs	r2, r2
 800debe:	61a2      	str	r2, [r4, #24]
 800dec0:	2000      	movs	r0, #0
 800dec2:	6922      	ldr	r2, [r4, #16]
 800dec4:	4282      	cmp	r2, r0
 800dec6:	d1ba      	bne.n	800de3e <__swsetup_r+0x3e>
 800dec8:	060a      	lsls	r2, r1, #24
 800deca:	d5b8      	bpl.n	800de3e <__swsetup_r+0x3e>
 800decc:	2240      	movs	r2, #64	; 0x40
 800dece:	4313      	orrs	r3, r2
 800ded0:	81a3      	strh	r3, [r4, #12]
 800ded2:	3801      	subs	r0, #1
 800ded4:	e7b3      	b.n	800de3e <__swsetup_r+0x3e>
 800ded6:	0788      	lsls	r0, r1, #30
 800ded8:	d400      	bmi.n	800dedc <__swsetup_r+0xdc>
 800deda:	6962      	ldr	r2, [r4, #20]
 800dedc:	60a2      	str	r2, [r4, #8]
 800dede:	e7ef      	b.n	800dec0 <__swsetup_r+0xc0>
 800dee0:	2000002c 	.word	0x2000002c
 800dee4:	0800eb48 	.word	0x0800eb48
 800dee8:	0800eb68 	.word	0x0800eb68
 800deec:	0800eb28 	.word	0x0800eb28

0800def0 <abort>:
 800def0:	2006      	movs	r0, #6
 800def2:	b510      	push	{r4, lr}
 800def4:	f000 faa6 	bl	800e444 <raise>
 800def8:	2001      	movs	r0, #1
 800defa:	f7f5 fc8f 	bl	800381c <_exit>
	...

0800df00 <__sflush_r>:
 800df00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df02:	898b      	ldrh	r3, [r1, #12]
 800df04:	0005      	movs	r5, r0
 800df06:	000c      	movs	r4, r1
 800df08:	071a      	lsls	r2, r3, #28
 800df0a:	d45f      	bmi.n	800dfcc <__sflush_r+0xcc>
 800df0c:	684a      	ldr	r2, [r1, #4]
 800df0e:	2a00      	cmp	r2, #0
 800df10:	dc04      	bgt.n	800df1c <__sflush_r+0x1c>
 800df12:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800df14:	2a00      	cmp	r2, #0
 800df16:	dc01      	bgt.n	800df1c <__sflush_r+0x1c>
 800df18:	2000      	movs	r0, #0
 800df1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df1c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800df1e:	2f00      	cmp	r7, #0
 800df20:	d0fa      	beq.n	800df18 <__sflush_r+0x18>
 800df22:	2200      	movs	r2, #0
 800df24:	2180      	movs	r1, #128	; 0x80
 800df26:	682e      	ldr	r6, [r5, #0]
 800df28:	602a      	str	r2, [r5, #0]
 800df2a:	001a      	movs	r2, r3
 800df2c:	0149      	lsls	r1, r1, #5
 800df2e:	400a      	ands	r2, r1
 800df30:	420b      	tst	r3, r1
 800df32:	d034      	beq.n	800df9e <__sflush_r+0x9e>
 800df34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df36:	89a3      	ldrh	r3, [r4, #12]
 800df38:	075b      	lsls	r3, r3, #29
 800df3a:	d506      	bpl.n	800df4a <__sflush_r+0x4a>
 800df3c:	6863      	ldr	r3, [r4, #4]
 800df3e:	1ac0      	subs	r0, r0, r3
 800df40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df42:	2b00      	cmp	r3, #0
 800df44:	d001      	beq.n	800df4a <__sflush_r+0x4a>
 800df46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df48:	1ac0      	subs	r0, r0, r3
 800df4a:	0002      	movs	r2, r0
 800df4c:	6a21      	ldr	r1, [r4, #32]
 800df4e:	2300      	movs	r3, #0
 800df50:	0028      	movs	r0, r5
 800df52:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800df54:	47b8      	blx	r7
 800df56:	89a1      	ldrh	r1, [r4, #12]
 800df58:	1c43      	adds	r3, r0, #1
 800df5a:	d106      	bne.n	800df6a <__sflush_r+0x6a>
 800df5c:	682b      	ldr	r3, [r5, #0]
 800df5e:	2b1d      	cmp	r3, #29
 800df60:	d831      	bhi.n	800dfc6 <__sflush_r+0xc6>
 800df62:	4a2c      	ldr	r2, [pc, #176]	; (800e014 <__sflush_r+0x114>)
 800df64:	40da      	lsrs	r2, r3
 800df66:	07d3      	lsls	r3, r2, #31
 800df68:	d52d      	bpl.n	800dfc6 <__sflush_r+0xc6>
 800df6a:	2300      	movs	r3, #0
 800df6c:	6063      	str	r3, [r4, #4]
 800df6e:	6923      	ldr	r3, [r4, #16]
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	04cb      	lsls	r3, r1, #19
 800df74:	d505      	bpl.n	800df82 <__sflush_r+0x82>
 800df76:	1c43      	adds	r3, r0, #1
 800df78:	d102      	bne.n	800df80 <__sflush_r+0x80>
 800df7a:	682b      	ldr	r3, [r5, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d100      	bne.n	800df82 <__sflush_r+0x82>
 800df80:	6560      	str	r0, [r4, #84]	; 0x54
 800df82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df84:	602e      	str	r6, [r5, #0]
 800df86:	2900      	cmp	r1, #0
 800df88:	d0c6      	beq.n	800df18 <__sflush_r+0x18>
 800df8a:	0023      	movs	r3, r4
 800df8c:	3344      	adds	r3, #68	; 0x44
 800df8e:	4299      	cmp	r1, r3
 800df90:	d002      	beq.n	800df98 <__sflush_r+0x98>
 800df92:	0028      	movs	r0, r5
 800df94:	f7fd fc02 	bl	800b79c <_free_r>
 800df98:	2000      	movs	r0, #0
 800df9a:	6360      	str	r0, [r4, #52]	; 0x34
 800df9c:	e7bd      	b.n	800df1a <__sflush_r+0x1a>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	0028      	movs	r0, r5
 800dfa2:	6a21      	ldr	r1, [r4, #32]
 800dfa4:	47b8      	blx	r7
 800dfa6:	1c43      	adds	r3, r0, #1
 800dfa8:	d1c5      	bne.n	800df36 <__sflush_r+0x36>
 800dfaa:	682b      	ldr	r3, [r5, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d0c2      	beq.n	800df36 <__sflush_r+0x36>
 800dfb0:	2b1d      	cmp	r3, #29
 800dfb2:	d001      	beq.n	800dfb8 <__sflush_r+0xb8>
 800dfb4:	2b16      	cmp	r3, #22
 800dfb6:	d101      	bne.n	800dfbc <__sflush_r+0xbc>
 800dfb8:	602e      	str	r6, [r5, #0]
 800dfba:	e7ad      	b.n	800df18 <__sflush_r+0x18>
 800dfbc:	2340      	movs	r3, #64	; 0x40
 800dfbe:	89a2      	ldrh	r2, [r4, #12]
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	81a3      	strh	r3, [r4, #12]
 800dfc4:	e7a9      	b.n	800df1a <__sflush_r+0x1a>
 800dfc6:	2340      	movs	r3, #64	; 0x40
 800dfc8:	430b      	orrs	r3, r1
 800dfca:	e7fa      	b.n	800dfc2 <__sflush_r+0xc2>
 800dfcc:	690f      	ldr	r7, [r1, #16]
 800dfce:	2f00      	cmp	r7, #0
 800dfd0:	d0a2      	beq.n	800df18 <__sflush_r+0x18>
 800dfd2:	680a      	ldr	r2, [r1, #0]
 800dfd4:	600f      	str	r7, [r1, #0]
 800dfd6:	1bd2      	subs	r2, r2, r7
 800dfd8:	9201      	str	r2, [sp, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	079b      	lsls	r3, r3, #30
 800dfde:	d100      	bne.n	800dfe2 <__sflush_r+0xe2>
 800dfe0:	694a      	ldr	r2, [r1, #20]
 800dfe2:	60a2      	str	r2, [r4, #8]
 800dfe4:	9b01      	ldr	r3, [sp, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	dc00      	bgt.n	800dfec <__sflush_r+0xec>
 800dfea:	e795      	b.n	800df18 <__sflush_r+0x18>
 800dfec:	003a      	movs	r2, r7
 800dfee:	0028      	movs	r0, r5
 800dff0:	9b01      	ldr	r3, [sp, #4]
 800dff2:	6a21      	ldr	r1, [r4, #32]
 800dff4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dff6:	47b0      	blx	r6
 800dff8:	2800      	cmp	r0, #0
 800dffa:	dc06      	bgt.n	800e00a <__sflush_r+0x10a>
 800dffc:	2340      	movs	r3, #64	; 0x40
 800dffe:	2001      	movs	r0, #1
 800e000:	89a2      	ldrh	r2, [r4, #12]
 800e002:	4240      	negs	r0, r0
 800e004:	4313      	orrs	r3, r2
 800e006:	81a3      	strh	r3, [r4, #12]
 800e008:	e787      	b.n	800df1a <__sflush_r+0x1a>
 800e00a:	9b01      	ldr	r3, [sp, #4]
 800e00c:	183f      	adds	r7, r7, r0
 800e00e:	1a1b      	subs	r3, r3, r0
 800e010:	9301      	str	r3, [sp, #4]
 800e012:	e7e7      	b.n	800dfe4 <__sflush_r+0xe4>
 800e014:	20400001 	.word	0x20400001

0800e018 <_fflush_r>:
 800e018:	690b      	ldr	r3, [r1, #16]
 800e01a:	b570      	push	{r4, r5, r6, lr}
 800e01c:	0005      	movs	r5, r0
 800e01e:	000c      	movs	r4, r1
 800e020:	2b00      	cmp	r3, #0
 800e022:	d102      	bne.n	800e02a <_fflush_r+0x12>
 800e024:	2500      	movs	r5, #0
 800e026:	0028      	movs	r0, r5
 800e028:	bd70      	pop	{r4, r5, r6, pc}
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d004      	beq.n	800e038 <_fflush_r+0x20>
 800e02e:	6983      	ldr	r3, [r0, #24]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d101      	bne.n	800e038 <_fflush_r+0x20>
 800e034:	f000 f892 	bl	800e15c <__sinit>
 800e038:	4b14      	ldr	r3, [pc, #80]	; (800e08c <_fflush_r+0x74>)
 800e03a:	429c      	cmp	r4, r3
 800e03c:	d11b      	bne.n	800e076 <_fflush_r+0x5e>
 800e03e:	686c      	ldr	r4, [r5, #4]
 800e040:	220c      	movs	r2, #12
 800e042:	5ea3      	ldrsh	r3, [r4, r2]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d0ed      	beq.n	800e024 <_fflush_r+0xc>
 800e048:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e04a:	07d2      	lsls	r2, r2, #31
 800e04c:	d404      	bmi.n	800e058 <_fflush_r+0x40>
 800e04e:	059b      	lsls	r3, r3, #22
 800e050:	d402      	bmi.n	800e058 <_fflush_r+0x40>
 800e052:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e054:	f000 f923 	bl	800e29e <__retarget_lock_acquire_recursive>
 800e058:	0028      	movs	r0, r5
 800e05a:	0021      	movs	r1, r4
 800e05c:	f7ff ff50 	bl	800df00 <__sflush_r>
 800e060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e062:	0005      	movs	r5, r0
 800e064:	07db      	lsls	r3, r3, #31
 800e066:	d4de      	bmi.n	800e026 <_fflush_r+0xe>
 800e068:	89a3      	ldrh	r3, [r4, #12]
 800e06a:	059b      	lsls	r3, r3, #22
 800e06c:	d4db      	bmi.n	800e026 <_fflush_r+0xe>
 800e06e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e070:	f000 f916 	bl	800e2a0 <__retarget_lock_release_recursive>
 800e074:	e7d7      	b.n	800e026 <_fflush_r+0xe>
 800e076:	4b06      	ldr	r3, [pc, #24]	; (800e090 <_fflush_r+0x78>)
 800e078:	429c      	cmp	r4, r3
 800e07a:	d101      	bne.n	800e080 <_fflush_r+0x68>
 800e07c:	68ac      	ldr	r4, [r5, #8]
 800e07e:	e7df      	b.n	800e040 <_fflush_r+0x28>
 800e080:	4b04      	ldr	r3, [pc, #16]	; (800e094 <_fflush_r+0x7c>)
 800e082:	429c      	cmp	r4, r3
 800e084:	d1dc      	bne.n	800e040 <_fflush_r+0x28>
 800e086:	68ec      	ldr	r4, [r5, #12]
 800e088:	e7da      	b.n	800e040 <_fflush_r+0x28>
 800e08a:	46c0      	nop			; (mov r8, r8)
 800e08c:	0800eb48 	.word	0x0800eb48
 800e090:	0800eb68 	.word	0x0800eb68
 800e094:	0800eb28 	.word	0x0800eb28

0800e098 <std>:
 800e098:	2300      	movs	r3, #0
 800e09a:	b510      	push	{r4, lr}
 800e09c:	0004      	movs	r4, r0
 800e09e:	6003      	str	r3, [r0, #0]
 800e0a0:	6043      	str	r3, [r0, #4]
 800e0a2:	6083      	str	r3, [r0, #8]
 800e0a4:	8181      	strh	r1, [r0, #12]
 800e0a6:	6643      	str	r3, [r0, #100]	; 0x64
 800e0a8:	0019      	movs	r1, r3
 800e0aa:	81c2      	strh	r2, [r0, #14]
 800e0ac:	6103      	str	r3, [r0, #16]
 800e0ae:	6143      	str	r3, [r0, #20]
 800e0b0:	6183      	str	r3, [r0, #24]
 800e0b2:	2208      	movs	r2, #8
 800e0b4:	305c      	adds	r0, #92	; 0x5c
 800e0b6:	f7fd fb68 	bl	800b78a <memset>
 800e0ba:	4b05      	ldr	r3, [pc, #20]	; (800e0d0 <std+0x38>)
 800e0bc:	6263      	str	r3, [r4, #36]	; 0x24
 800e0be:	4b05      	ldr	r3, [pc, #20]	; (800e0d4 <std+0x3c>)
 800e0c0:	6224      	str	r4, [r4, #32]
 800e0c2:	62a3      	str	r3, [r4, #40]	; 0x28
 800e0c4:	4b04      	ldr	r3, [pc, #16]	; (800e0d8 <std+0x40>)
 800e0c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e0c8:	4b04      	ldr	r3, [pc, #16]	; (800e0dc <std+0x44>)
 800e0ca:	6323      	str	r3, [r4, #48]	; 0x30
 800e0cc:	bd10      	pop	{r4, pc}
 800e0ce:	46c0      	nop			; (mov r8, r8)
 800e0d0:	0800e485 	.word	0x0800e485
 800e0d4:	0800e4ad 	.word	0x0800e4ad
 800e0d8:	0800e4e5 	.word	0x0800e4e5
 800e0dc:	0800e511 	.word	0x0800e511

0800e0e0 <_cleanup_r>:
 800e0e0:	b510      	push	{r4, lr}
 800e0e2:	4902      	ldr	r1, [pc, #8]	; (800e0ec <_cleanup_r+0xc>)
 800e0e4:	f000 f8ba 	bl	800e25c <_fwalk_reent>
 800e0e8:	bd10      	pop	{r4, pc}
 800e0ea:	46c0      	nop			; (mov r8, r8)
 800e0ec:	0800e019 	.word	0x0800e019

0800e0f0 <__sfmoreglue>:
 800e0f0:	b570      	push	{r4, r5, r6, lr}
 800e0f2:	2568      	movs	r5, #104	; 0x68
 800e0f4:	1e4a      	subs	r2, r1, #1
 800e0f6:	4355      	muls	r5, r2
 800e0f8:	000e      	movs	r6, r1
 800e0fa:	0029      	movs	r1, r5
 800e0fc:	3174      	adds	r1, #116	; 0x74
 800e0fe:	f7fd fb97 	bl	800b830 <_malloc_r>
 800e102:	1e04      	subs	r4, r0, #0
 800e104:	d008      	beq.n	800e118 <__sfmoreglue+0x28>
 800e106:	2100      	movs	r1, #0
 800e108:	002a      	movs	r2, r5
 800e10a:	6001      	str	r1, [r0, #0]
 800e10c:	6046      	str	r6, [r0, #4]
 800e10e:	300c      	adds	r0, #12
 800e110:	60a0      	str	r0, [r4, #8]
 800e112:	3268      	adds	r2, #104	; 0x68
 800e114:	f7fd fb39 	bl	800b78a <memset>
 800e118:	0020      	movs	r0, r4
 800e11a:	bd70      	pop	{r4, r5, r6, pc}

0800e11c <__sfp_lock_acquire>:
 800e11c:	b510      	push	{r4, lr}
 800e11e:	4802      	ldr	r0, [pc, #8]	; (800e128 <__sfp_lock_acquire+0xc>)
 800e120:	f000 f8bd 	bl	800e29e <__retarget_lock_acquire_recursive>
 800e124:	bd10      	pop	{r4, pc}
 800e126:	46c0      	nop			; (mov r8, r8)
 800e128:	200005e8 	.word	0x200005e8

0800e12c <__sfp_lock_release>:
 800e12c:	b510      	push	{r4, lr}
 800e12e:	4802      	ldr	r0, [pc, #8]	; (800e138 <__sfp_lock_release+0xc>)
 800e130:	f000 f8b6 	bl	800e2a0 <__retarget_lock_release_recursive>
 800e134:	bd10      	pop	{r4, pc}
 800e136:	46c0      	nop			; (mov r8, r8)
 800e138:	200005e8 	.word	0x200005e8

0800e13c <__sinit_lock_acquire>:
 800e13c:	b510      	push	{r4, lr}
 800e13e:	4802      	ldr	r0, [pc, #8]	; (800e148 <__sinit_lock_acquire+0xc>)
 800e140:	f000 f8ad 	bl	800e29e <__retarget_lock_acquire_recursive>
 800e144:	bd10      	pop	{r4, pc}
 800e146:	46c0      	nop			; (mov r8, r8)
 800e148:	200005e3 	.word	0x200005e3

0800e14c <__sinit_lock_release>:
 800e14c:	b510      	push	{r4, lr}
 800e14e:	4802      	ldr	r0, [pc, #8]	; (800e158 <__sinit_lock_release+0xc>)
 800e150:	f000 f8a6 	bl	800e2a0 <__retarget_lock_release_recursive>
 800e154:	bd10      	pop	{r4, pc}
 800e156:	46c0      	nop			; (mov r8, r8)
 800e158:	200005e3 	.word	0x200005e3

0800e15c <__sinit>:
 800e15c:	b513      	push	{r0, r1, r4, lr}
 800e15e:	0004      	movs	r4, r0
 800e160:	f7ff ffec 	bl	800e13c <__sinit_lock_acquire>
 800e164:	69a3      	ldr	r3, [r4, #24]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <__sinit+0x14>
 800e16a:	f7ff ffef 	bl	800e14c <__sinit_lock_release>
 800e16e:	bd13      	pop	{r0, r1, r4, pc}
 800e170:	64a3      	str	r3, [r4, #72]	; 0x48
 800e172:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e174:	6523      	str	r3, [r4, #80]	; 0x50
 800e176:	4b13      	ldr	r3, [pc, #76]	; (800e1c4 <__sinit+0x68>)
 800e178:	4a13      	ldr	r2, [pc, #76]	; (800e1c8 <__sinit+0x6c>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e17e:	9301      	str	r3, [sp, #4]
 800e180:	42a3      	cmp	r3, r4
 800e182:	d101      	bne.n	800e188 <__sinit+0x2c>
 800e184:	2301      	movs	r3, #1
 800e186:	61a3      	str	r3, [r4, #24]
 800e188:	0020      	movs	r0, r4
 800e18a:	f000 f81f 	bl	800e1cc <__sfp>
 800e18e:	6060      	str	r0, [r4, #4]
 800e190:	0020      	movs	r0, r4
 800e192:	f000 f81b 	bl	800e1cc <__sfp>
 800e196:	60a0      	str	r0, [r4, #8]
 800e198:	0020      	movs	r0, r4
 800e19a:	f000 f817 	bl	800e1cc <__sfp>
 800e19e:	2200      	movs	r2, #0
 800e1a0:	2104      	movs	r1, #4
 800e1a2:	60e0      	str	r0, [r4, #12]
 800e1a4:	6860      	ldr	r0, [r4, #4]
 800e1a6:	f7ff ff77 	bl	800e098 <std>
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	2109      	movs	r1, #9
 800e1ae:	68a0      	ldr	r0, [r4, #8]
 800e1b0:	f7ff ff72 	bl	800e098 <std>
 800e1b4:	2202      	movs	r2, #2
 800e1b6:	2112      	movs	r1, #18
 800e1b8:	68e0      	ldr	r0, [r4, #12]
 800e1ba:	f7ff ff6d 	bl	800e098 <std>
 800e1be:	2301      	movs	r3, #1
 800e1c0:	61a3      	str	r3, [r4, #24]
 800e1c2:	e7d2      	b.n	800e16a <__sinit+0xe>
 800e1c4:	0800e7a0 	.word	0x0800e7a0
 800e1c8:	0800e0e1 	.word	0x0800e0e1

0800e1cc <__sfp>:
 800e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ce:	0007      	movs	r7, r0
 800e1d0:	f7ff ffa4 	bl	800e11c <__sfp_lock_acquire>
 800e1d4:	4b1f      	ldr	r3, [pc, #124]	; (800e254 <__sfp+0x88>)
 800e1d6:	681e      	ldr	r6, [r3, #0]
 800e1d8:	69b3      	ldr	r3, [r6, #24]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d102      	bne.n	800e1e4 <__sfp+0x18>
 800e1de:	0030      	movs	r0, r6
 800e1e0:	f7ff ffbc 	bl	800e15c <__sinit>
 800e1e4:	3648      	adds	r6, #72	; 0x48
 800e1e6:	68b4      	ldr	r4, [r6, #8]
 800e1e8:	6873      	ldr	r3, [r6, #4]
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	d504      	bpl.n	800e1f8 <__sfp+0x2c>
 800e1ee:	6833      	ldr	r3, [r6, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d022      	beq.n	800e23a <__sfp+0x6e>
 800e1f4:	6836      	ldr	r6, [r6, #0]
 800e1f6:	e7f6      	b.n	800e1e6 <__sfp+0x1a>
 800e1f8:	220c      	movs	r2, #12
 800e1fa:	5ea5      	ldrsh	r5, [r4, r2]
 800e1fc:	2d00      	cmp	r5, #0
 800e1fe:	d11a      	bne.n	800e236 <__sfp+0x6a>
 800e200:	0020      	movs	r0, r4
 800e202:	4b15      	ldr	r3, [pc, #84]	; (800e258 <__sfp+0x8c>)
 800e204:	3058      	adds	r0, #88	; 0x58
 800e206:	60e3      	str	r3, [r4, #12]
 800e208:	6665      	str	r5, [r4, #100]	; 0x64
 800e20a:	f000 f847 	bl	800e29c <__retarget_lock_init_recursive>
 800e20e:	f7ff ff8d 	bl	800e12c <__sfp_lock_release>
 800e212:	0020      	movs	r0, r4
 800e214:	2208      	movs	r2, #8
 800e216:	0029      	movs	r1, r5
 800e218:	6025      	str	r5, [r4, #0]
 800e21a:	60a5      	str	r5, [r4, #8]
 800e21c:	6065      	str	r5, [r4, #4]
 800e21e:	6125      	str	r5, [r4, #16]
 800e220:	6165      	str	r5, [r4, #20]
 800e222:	61a5      	str	r5, [r4, #24]
 800e224:	305c      	adds	r0, #92	; 0x5c
 800e226:	f7fd fab0 	bl	800b78a <memset>
 800e22a:	6365      	str	r5, [r4, #52]	; 0x34
 800e22c:	63a5      	str	r5, [r4, #56]	; 0x38
 800e22e:	64a5      	str	r5, [r4, #72]	; 0x48
 800e230:	64e5      	str	r5, [r4, #76]	; 0x4c
 800e232:	0020      	movs	r0, r4
 800e234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e236:	3468      	adds	r4, #104	; 0x68
 800e238:	e7d7      	b.n	800e1ea <__sfp+0x1e>
 800e23a:	2104      	movs	r1, #4
 800e23c:	0038      	movs	r0, r7
 800e23e:	f7ff ff57 	bl	800e0f0 <__sfmoreglue>
 800e242:	1e04      	subs	r4, r0, #0
 800e244:	6030      	str	r0, [r6, #0]
 800e246:	d1d5      	bne.n	800e1f4 <__sfp+0x28>
 800e248:	f7ff ff70 	bl	800e12c <__sfp_lock_release>
 800e24c:	230c      	movs	r3, #12
 800e24e:	603b      	str	r3, [r7, #0]
 800e250:	e7ef      	b.n	800e232 <__sfp+0x66>
 800e252:	46c0      	nop			; (mov r8, r8)
 800e254:	0800e7a0 	.word	0x0800e7a0
 800e258:	ffff0001 	.word	0xffff0001

0800e25c <_fwalk_reent>:
 800e25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e25e:	0004      	movs	r4, r0
 800e260:	0006      	movs	r6, r0
 800e262:	2700      	movs	r7, #0
 800e264:	9101      	str	r1, [sp, #4]
 800e266:	3448      	adds	r4, #72	; 0x48
 800e268:	6863      	ldr	r3, [r4, #4]
 800e26a:	68a5      	ldr	r5, [r4, #8]
 800e26c:	9300      	str	r3, [sp, #0]
 800e26e:	9b00      	ldr	r3, [sp, #0]
 800e270:	3b01      	subs	r3, #1
 800e272:	9300      	str	r3, [sp, #0]
 800e274:	d504      	bpl.n	800e280 <_fwalk_reent+0x24>
 800e276:	6824      	ldr	r4, [r4, #0]
 800e278:	2c00      	cmp	r4, #0
 800e27a:	d1f5      	bne.n	800e268 <_fwalk_reent+0xc>
 800e27c:	0038      	movs	r0, r7
 800e27e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e280:	89ab      	ldrh	r3, [r5, #12]
 800e282:	2b01      	cmp	r3, #1
 800e284:	d908      	bls.n	800e298 <_fwalk_reent+0x3c>
 800e286:	220e      	movs	r2, #14
 800e288:	5eab      	ldrsh	r3, [r5, r2]
 800e28a:	3301      	adds	r3, #1
 800e28c:	d004      	beq.n	800e298 <_fwalk_reent+0x3c>
 800e28e:	0029      	movs	r1, r5
 800e290:	0030      	movs	r0, r6
 800e292:	9b01      	ldr	r3, [sp, #4]
 800e294:	4798      	blx	r3
 800e296:	4307      	orrs	r7, r0
 800e298:	3568      	adds	r5, #104	; 0x68
 800e29a:	e7e8      	b.n	800e26e <_fwalk_reent+0x12>

0800e29c <__retarget_lock_init_recursive>:
 800e29c:	4770      	bx	lr

0800e29e <__retarget_lock_acquire_recursive>:
 800e29e:	4770      	bx	lr

0800e2a0 <__retarget_lock_release_recursive>:
 800e2a0:	4770      	bx	lr
	...

0800e2a4 <__swhatbuf_r>:
 800e2a4:	b570      	push	{r4, r5, r6, lr}
 800e2a6:	000e      	movs	r6, r1
 800e2a8:	001d      	movs	r5, r3
 800e2aa:	230e      	movs	r3, #14
 800e2ac:	5ec9      	ldrsh	r1, [r1, r3]
 800e2ae:	0014      	movs	r4, r2
 800e2b0:	b096      	sub	sp, #88	; 0x58
 800e2b2:	2900      	cmp	r1, #0
 800e2b4:	da07      	bge.n	800e2c6 <__swhatbuf_r+0x22>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	602b      	str	r3, [r5, #0]
 800e2ba:	89b3      	ldrh	r3, [r6, #12]
 800e2bc:	061b      	lsls	r3, r3, #24
 800e2be:	d411      	bmi.n	800e2e4 <__swhatbuf_r+0x40>
 800e2c0:	2380      	movs	r3, #128	; 0x80
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	e00f      	b.n	800e2e6 <__swhatbuf_r+0x42>
 800e2c6:	466a      	mov	r2, sp
 800e2c8:	f000 f94e 	bl	800e568 <_fstat_r>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	dbf2      	blt.n	800e2b6 <__swhatbuf_r+0x12>
 800e2d0:	23f0      	movs	r3, #240	; 0xf0
 800e2d2:	9901      	ldr	r1, [sp, #4]
 800e2d4:	021b      	lsls	r3, r3, #8
 800e2d6:	4019      	ands	r1, r3
 800e2d8:	4b05      	ldr	r3, [pc, #20]	; (800e2f0 <__swhatbuf_r+0x4c>)
 800e2da:	18c9      	adds	r1, r1, r3
 800e2dc:	424b      	negs	r3, r1
 800e2de:	4159      	adcs	r1, r3
 800e2e0:	6029      	str	r1, [r5, #0]
 800e2e2:	e7ed      	b.n	800e2c0 <__swhatbuf_r+0x1c>
 800e2e4:	2340      	movs	r3, #64	; 0x40
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	6023      	str	r3, [r4, #0]
 800e2ea:	b016      	add	sp, #88	; 0x58
 800e2ec:	bd70      	pop	{r4, r5, r6, pc}
 800e2ee:	46c0      	nop			; (mov r8, r8)
 800e2f0:	ffffe000 	.word	0xffffe000

0800e2f4 <__smakebuf_r>:
 800e2f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2f6:	2602      	movs	r6, #2
 800e2f8:	898b      	ldrh	r3, [r1, #12]
 800e2fa:	0005      	movs	r5, r0
 800e2fc:	000c      	movs	r4, r1
 800e2fe:	4233      	tst	r3, r6
 800e300:	d006      	beq.n	800e310 <__smakebuf_r+0x1c>
 800e302:	0023      	movs	r3, r4
 800e304:	3347      	adds	r3, #71	; 0x47
 800e306:	6023      	str	r3, [r4, #0]
 800e308:	6123      	str	r3, [r4, #16]
 800e30a:	2301      	movs	r3, #1
 800e30c:	6163      	str	r3, [r4, #20]
 800e30e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e310:	466a      	mov	r2, sp
 800e312:	ab01      	add	r3, sp, #4
 800e314:	f7ff ffc6 	bl	800e2a4 <__swhatbuf_r>
 800e318:	9900      	ldr	r1, [sp, #0]
 800e31a:	0007      	movs	r7, r0
 800e31c:	0028      	movs	r0, r5
 800e31e:	f7fd fa87 	bl	800b830 <_malloc_r>
 800e322:	2800      	cmp	r0, #0
 800e324:	d108      	bne.n	800e338 <__smakebuf_r+0x44>
 800e326:	220c      	movs	r2, #12
 800e328:	5ea3      	ldrsh	r3, [r4, r2]
 800e32a:	059a      	lsls	r2, r3, #22
 800e32c:	d4ef      	bmi.n	800e30e <__smakebuf_r+0x1a>
 800e32e:	2203      	movs	r2, #3
 800e330:	4393      	bics	r3, r2
 800e332:	431e      	orrs	r6, r3
 800e334:	81a6      	strh	r6, [r4, #12]
 800e336:	e7e4      	b.n	800e302 <__smakebuf_r+0xe>
 800e338:	4b0f      	ldr	r3, [pc, #60]	; (800e378 <__smakebuf_r+0x84>)
 800e33a:	62ab      	str	r3, [r5, #40]	; 0x28
 800e33c:	2380      	movs	r3, #128	; 0x80
 800e33e:	89a2      	ldrh	r2, [r4, #12]
 800e340:	6020      	str	r0, [r4, #0]
 800e342:	4313      	orrs	r3, r2
 800e344:	81a3      	strh	r3, [r4, #12]
 800e346:	9b00      	ldr	r3, [sp, #0]
 800e348:	6120      	str	r0, [r4, #16]
 800e34a:	6163      	str	r3, [r4, #20]
 800e34c:	9b01      	ldr	r3, [sp, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d00d      	beq.n	800e36e <__smakebuf_r+0x7a>
 800e352:	0028      	movs	r0, r5
 800e354:	230e      	movs	r3, #14
 800e356:	5ee1      	ldrsh	r1, [r4, r3]
 800e358:	f000 f918 	bl	800e58c <_isatty_r>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d006      	beq.n	800e36e <__smakebuf_r+0x7a>
 800e360:	2203      	movs	r2, #3
 800e362:	89a3      	ldrh	r3, [r4, #12]
 800e364:	4393      	bics	r3, r2
 800e366:	001a      	movs	r2, r3
 800e368:	2301      	movs	r3, #1
 800e36a:	4313      	orrs	r3, r2
 800e36c:	81a3      	strh	r3, [r4, #12]
 800e36e:	89a0      	ldrh	r0, [r4, #12]
 800e370:	4307      	orrs	r7, r0
 800e372:	81a7      	strh	r7, [r4, #12]
 800e374:	e7cb      	b.n	800e30e <__smakebuf_r+0x1a>
 800e376:	46c0      	nop			; (mov r8, r8)
 800e378:	0800e0e1 	.word	0x0800e0e1

0800e37c <memmove>:
 800e37c:	b510      	push	{r4, lr}
 800e37e:	4288      	cmp	r0, r1
 800e380:	d902      	bls.n	800e388 <memmove+0xc>
 800e382:	188b      	adds	r3, r1, r2
 800e384:	4298      	cmp	r0, r3
 800e386:	d303      	bcc.n	800e390 <memmove+0x14>
 800e388:	2300      	movs	r3, #0
 800e38a:	e007      	b.n	800e39c <memmove+0x20>
 800e38c:	5c8b      	ldrb	r3, [r1, r2]
 800e38e:	5483      	strb	r3, [r0, r2]
 800e390:	3a01      	subs	r2, #1
 800e392:	d2fb      	bcs.n	800e38c <memmove+0x10>
 800e394:	bd10      	pop	{r4, pc}
 800e396:	5ccc      	ldrb	r4, [r1, r3]
 800e398:	54c4      	strb	r4, [r0, r3]
 800e39a:	3301      	adds	r3, #1
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d1fa      	bne.n	800e396 <memmove+0x1a>
 800e3a0:	e7f8      	b.n	800e394 <memmove+0x18>

0800e3a2 <_realloc_r>:
 800e3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a4:	0007      	movs	r7, r0
 800e3a6:	000d      	movs	r5, r1
 800e3a8:	0016      	movs	r6, r2
 800e3aa:	2900      	cmp	r1, #0
 800e3ac:	d105      	bne.n	800e3ba <_realloc_r+0x18>
 800e3ae:	0011      	movs	r1, r2
 800e3b0:	f7fd fa3e 	bl	800b830 <_malloc_r>
 800e3b4:	0004      	movs	r4, r0
 800e3b6:	0020      	movs	r0, r4
 800e3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3ba:	2a00      	cmp	r2, #0
 800e3bc:	d103      	bne.n	800e3c6 <_realloc_r+0x24>
 800e3be:	f7fd f9ed 	bl	800b79c <_free_r>
 800e3c2:	0034      	movs	r4, r6
 800e3c4:	e7f7      	b.n	800e3b6 <_realloc_r+0x14>
 800e3c6:	f000 f907 	bl	800e5d8 <_malloc_usable_size_r>
 800e3ca:	002c      	movs	r4, r5
 800e3cc:	42b0      	cmp	r0, r6
 800e3ce:	d2f2      	bcs.n	800e3b6 <_realloc_r+0x14>
 800e3d0:	0031      	movs	r1, r6
 800e3d2:	0038      	movs	r0, r7
 800e3d4:	f7fd fa2c 	bl	800b830 <_malloc_r>
 800e3d8:	1e04      	subs	r4, r0, #0
 800e3da:	d0ec      	beq.n	800e3b6 <_realloc_r+0x14>
 800e3dc:	0029      	movs	r1, r5
 800e3de:	0032      	movs	r2, r6
 800e3e0:	f7fd f9ca 	bl	800b778 <memcpy>
 800e3e4:	0029      	movs	r1, r5
 800e3e6:	0038      	movs	r0, r7
 800e3e8:	f7fd f9d8 	bl	800b79c <_free_r>
 800e3ec:	e7e3      	b.n	800e3b6 <_realloc_r+0x14>

0800e3ee <_raise_r>:
 800e3ee:	b570      	push	{r4, r5, r6, lr}
 800e3f0:	0004      	movs	r4, r0
 800e3f2:	000d      	movs	r5, r1
 800e3f4:	291f      	cmp	r1, #31
 800e3f6:	d904      	bls.n	800e402 <_raise_r+0x14>
 800e3f8:	2316      	movs	r3, #22
 800e3fa:	6003      	str	r3, [r0, #0]
 800e3fc:	2001      	movs	r0, #1
 800e3fe:	4240      	negs	r0, r0
 800e400:	bd70      	pop	{r4, r5, r6, pc}
 800e402:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e404:	2b00      	cmp	r3, #0
 800e406:	d004      	beq.n	800e412 <_raise_r+0x24>
 800e408:	008a      	lsls	r2, r1, #2
 800e40a:	189b      	adds	r3, r3, r2
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	2a00      	cmp	r2, #0
 800e410:	d108      	bne.n	800e424 <_raise_r+0x36>
 800e412:	0020      	movs	r0, r4
 800e414:	f000 f832 	bl	800e47c <_getpid_r>
 800e418:	002a      	movs	r2, r5
 800e41a:	0001      	movs	r1, r0
 800e41c:	0020      	movs	r0, r4
 800e41e:	f000 f81b 	bl	800e458 <_kill_r>
 800e422:	e7ed      	b.n	800e400 <_raise_r+0x12>
 800e424:	2000      	movs	r0, #0
 800e426:	2a01      	cmp	r2, #1
 800e428:	d0ea      	beq.n	800e400 <_raise_r+0x12>
 800e42a:	1c51      	adds	r1, r2, #1
 800e42c:	d103      	bne.n	800e436 <_raise_r+0x48>
 800e42e:	2316      	movs	r3, #22
 800e430:	3001      	adds	r0, #1
 800e432:	6023      	str	r3, [r4, #0]
 800e434:	e7e4      	b.n	800e400 <_raise_r+0x12>
 800e436:	2400      	movs	r4, #0
 800e438:	0028      	movs	r0, r5
 800e43a:	601c      	str	r4, [r3, #0]
 800e43c:	4790      	blx	r2
 800e43e:	0020      	movs	r0, r4
 800e440:	e7de      	b.n	800e400 <_raise_r+0x12>
	...

0800e444 <raise>:
 800e444:	b510      	push	{r4, lr}
 800e446:	4b03      	ldr	r3, [pc, #12]	; (800e454 <raise+0x10>)
 800e448:	0001      	movs	r1, r0
 800e44a:	6818      	ldr	r0, [r3, #0]
 800e44c:	f7ff ffcf 	bl	800e3ee <_raise_r>
 800e450:	bd10      	pop	{r4, pc}
 800e452:	46c0      	nop			; (mov r8, r8)
 800e454:	2000002c 	.word	0x2000002c

0800e458 <_kill_r>:
 800e458:	2300      	movs	r3, #0
 800e45a:	b570      	push	{r4, r5, r6, lr}
 800e45c:	4d06      	ldr	r5, [pc, #24]	; (800e478 <_kill_r+0x20>)
 800e45e:	0004      	movs	r4, r0
 800e460:	0008      	movs	r0, r1
 800e462:	0011      	movs	r1, r2
 800e464:	602b      	str	r3, [r5, #0]
 800e466:	f7f5 f9c9 	bl	80037fc <_kill>
 800e46a:	1c43      	adds	r3, r0, #1
 800e46c:	d103      	bne.n	800e476 <_kill_r+0x1e>
 800e46e:	682b      	ldr	r3, [r5, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d000      	beq.n	800e476 <_kill_r+0x1e>
 800e474:	6023      	str	r3, [r4, #0]
 800e476:	bd70      	pop	{r4, r5, r6, pc}
 800e478:	200005dc 	.word	0x200005dc

0800e47c <_getpid_r>:
 800e47c:	b510      	push	{r4, lr}
 800e47e:	f7f5 f9b7 	bl	80037f0 <_getpid>
 800e482:	bd10      	pop	{r4, pc}

0800e484 <__sread>:
 800e484:	b570      	push	{r4, r5, r6, lr}
 800e486:	000c      	movs	r4, r1
 800e488:	250e      	movs	r5, #14
 800e48a:	5f49      	ldrsh	r1, [r1, r5]
 800e48c:	f000 f8ac 	bl	800e5e8 <_read_r>
 800e490:	2800      	cmp	r0, #0
 800e492:	db03      	blt.n	800e49c <__sread+0x18>
 800e494:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e496:	181b      	adds	r3, r3, r0
 800e498:	6563      	str	r3, [r4, #84]	; 0x54
 800e49a:	bd70      	pop	{r4, r5, r6, pc}
 800e49c:	89a3      	ldrh	r3, [r4, #12]
 800e49e:	4a02      	ldr	r2, [pc, #8]	; (800e4a8 <__sread+0x24>)
 800e4a0:	4013      	ands	r3, r2
 800e4a2:	81a3      	strh	r3, [r4, #12]
 800e4a4:	e7f9      	b.n	800e49a <__sread+0x16>
 800e4a6:	46c0      	nop			; (mov r8, r8)
 800e4a8:	ffffefff 	.word	0xffffefff

0800e4ac <__swrite>:
 800e4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ae:	001f      	movs	r7, r3
 800e4b0:	898b      	ldrh	r3, [r1, #12]
 800e4b2:	0005      	movs	r5, r0
 800e4b4:	000c      	movs	r4, r1
 800e4b6:	0016      	movs	r6, r2
 800e4b8:	05db      	lsls	r3, r3, #23
 800e4ba:	d505      	bpl.n	800e4c8 <__swrite+0x1c>
 800e4bc:	230e      	movs	r3, #14
 800e4be:	5ec9      	ldrsh	r1, [r1, r3]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	2302      	movs	r3, #2
 800e4c4:	f000 f874 	bl	800e5b0 <_lseek_r>
 800e4c8:	89a3      	ldrh	r3, [r4, #12]
 800e4ca:	4a05      	ldr	r2, [pc, #20]	; (800e4e0 <__swrite+0x34>)
 800e4cc:	0028      	movs	r0, r5
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	81a3      	strh	r3, [r4, #12]
 800e4d2:	0032      	movs	r2, r6
 800e4d4:	230e      	movs	r3, #14
 800e4d6:	5ee1      	ldrsh	r1, [r4, r3]
 800e4d8:	003b      	movs	r3, r7
 800e4da:	f000 f81f 	bl	800e51c <_write_r>
 800e4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4e0:	ffffefff 	.word	0xffffefff

0800e4e4 <__sseek>:
 800e4e4:	b570      	push	{r4, r5, r6, lr}
 800e4e6:	000c      	movs	r4, r1
 800e4e8:	250e      	movs	r5, #14
 800e4ea:	5f49      	ldrsh	r1, [r1, r5]
 800e4ec:	f000 f860 	bl	800e5b0 <_lseek_r>
 800e4f0:	89a3      	ldrh	r3, [r4, #12]
 800e4f2:	1c42      	adds	r2, r0, #1
 800e4f4:	d103      	bne.n	800e4fe <__sseek+0x1a>
 800e4f6:	4a05      	ldr	r2, [pc, #20]	; (800e50c <__sseek+0x28>)
 800e4f8:	4013      	ands	r3, r2
 800e4fa:	81a3      	strh	r3, [r4, #12]
 800e4fc:	bd70      	pop	{r4, r5, r6, pc}
 800e4fe:	2280      	movs	r2, #128	; 0x80
 800e500:	0152      	lsls	r2, r2, #5
 800e502:	4313      	orrs	r3, r2
 800e504:	81a3      	strh	r3, [r4, #12]
 800e506:	6560      	str	r0, [r4, #84]	; 0x54
 800e508:	e7f8      	b.n	800e4fc <__sseek+0x18>
 800e50a:	46c0      	nop			; (mov r8, r8)
 800e50c:	ffffefff 	.word	0xffffefff

0800e510 <__sclose>:
 800e510:	b510      	push	{r4, lr}
 800e512:	230e      	movs	r3, #14
 800e514:	5ec9      	ldrsh	r1, [r1, r3]
 800e516:	f000 f815 	bl	800e544 <_close_r>
 800e51a:	bd10      	pop	{r4, pc}

0800e51c <_write_r>:
 800e51c:	b570      	push	{r4, r5, r6, lr}
 800e51e:	0004      	movs	r4, r0
 800e520:	0008      	movs	r0, r1
 800e522:	0011      	movs	r1, r2
 800e524:	001a      	movs	r2, r3
 800e526:	2300      	movs	r3, #0
 800e528:	4d05      	ldr	r5, [pc, #20]	; (800e540 <_write_r+0x24>)
 800e52a:	602b      	str	r3, [r5, #0]
 800e52c:	f7f5 f99f 	bl	800386e <_write>
 800e530:	1c43      	adds	r3, r0, #1
 800e532:	d103      	bne.n	800e53c <_write_r+0x20>
 800e534:	682b      	ldr	r3, [r5, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d000      	beq.n	800e53c <_write_r+0x20>
 800e53a:	6023      	str	r3, [r4, #0]
 800e53c:	bd70      	pop	{r4, r5, r6, pc}
 800e53e:	46c0      	nop			; (mov r8, r8)
 800e540:	200005dc 	.word	0x200005dc

0800e544 <_close_r>:
 800e544:	2300      	movs	r3, #0
 800e546:	b570      	push	{r4, r5, r6, lr}
 800e548:	4d06      	ldr	r5, [pc, #24]	; (800e564 <_close_r+0x20>)
 800e54a:	0004      	movs	r4, r0
 800e54c:	0008      	movs	r0, r1
 800e54e:	602b      	str	r3, [r5, #0]
 800e550:	f7f5 f9a9 	bl	80038a6 <_close>
 800e554:	1c43      	adds	r3, r0, #1
 800e556:	d103      	bne.n	800e560 <_close_r+0x1c>
 800e558:	682b      	ldr	r3, [r5, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d000      	beq.n	800e560 <_close_r+0x1c>
 800e55e:	6023      	str	r3, [r4, #0]
 800e560:	bd70      	pop	{r4, r5, r6, pc}
 800e562:	46c0      	nop			; (mov r8, r8)
 800e564:	200005dc 	.word	0x200005dc

0800e568 <_fstat_r>:
 800e568:	2300      	movs	r3, #0
 800e56a:	b570      	push	{r4, r5, r6, lr}
 800e56c:	4d06      	ldr	r5, [pc, #24]	; (800e588 <_fstat_r+0x20>)
 800e56e:	0004      	movs	r4, r0
 800e570:	0008      	movs	r0, r1
 800e572:	0011      	movs	r1, r2
 800e574:	602b      	str	r3, [r5, #0]
 800e576:	f7f5 f9a0 	bl	80038ba <_fstat>
 800e57a:	1c43      	adds	r3, r0, #1
 800e57c:	d103      	bne.n	800e586 <_fstat_r+0x1e>
 800e57e:	682b      	ldr	r3, [r5, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d000      	beq.n	800e586 <_fstat_r+0x1e>
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	bd70      	pop	{r4, r5, r6, pc}
 800e588:	200005dc 	.word	0x200005dc

0800e58c <_isatty_r>:
 800e58c:	2300      	movs	r3, #0
 800e58e:	b570      	push	{r4, r5, r6, lr}
 800e590:	4d06      	ldr	r5, [pc, #24]	; (800e5ac <_isatty_r+0x20>)
 800e592:	0004      	movs	r4, r0
 800e594:	0008      	movs	r0, r1
 800e596:	602b      	str	r3, [r5, #0]
 800e598:	f7f5 f99d 	bl	80038d6 <_isatty>
 800e59c:	1c43      	adds	r3, r0, #1
 800e59e:	d103      	bne.n	800e5a8 <_isatty_r+0x1c>
 800e5a0:	682b      	ldr	r3, [r5, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d000      	beq.n	800e5a8 <_isatty_r+0x1c>
 800e5a6:	6023      	str	r3, [r4, #0]
 800e5a8:	bd70      	pop	{r4, r5, r6, pc}
 800e5aa:	46c0      	nop			; (mov r8, r8)
 800e5ac:	200005dc 	.word	0x200005dc

0800e5b0 <_lseek_r>:
 800e5b0:	b570      	push	{r4, r5, r6, lr}
 800e5b2:	0004      	movs	r4, r0
 800e5b4:	0008      	movs	r0, r1
 800e5b6:	0011      	movs	r1, r2
 800e5b8:	001a      	movs	r2, r3
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	4d05      	ldr	r5, [pc, #20]	; (800e5d4 <_lseek_r+0x24>)
 800e5be:	602b      	str	r3, [r5, #0]
 800e5c0:	f7f5 f992 	bl	80038e8 <_lseek>
 800e5c4:	1c43      	adds	r3, r0, #1
 800e5c6:	d103      	bne.n	800e5d0 <_lseek_r+0x20>
 800e5c8:	682b      	ldr	r3, [r5, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d000      	beq.n	800e5d0 <_lseek_r+0x20>
 800e5ce:	6023      	str	r3, [r4, #0]
 800e5d0:	bd70      	pop	{r4, r5, r6, pc}
 800e5d2:	46c0      	nop			; (mov r8, r8)
 800e5d4:	200005dc 	.word	0x200005dc

0800e5d8 <_malloc_usable_size_r>:
 800e5d8:	1f0b      	subs	r3, r1, #4
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	1f18      	subs	r0, r3, #4
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	da01      	bge.n	800e5e6 <_malloc_usable_size_r+0xe>
 800e5e2:	580b      	ldr	r3, [r1, r0]
 800e5e4:	18c0      	adds	r0, r0, r3
 800e5e6:	4770      	bx	lr

0800e5e8 <_read_r>:
 800e5e8:	b570      	push	{r4, r5, r6, lr}
 800e5ea:	0004      	movs	r4, r0
 800e5ec:	0008      	movs	r0, r1
 800e5ee:	0011      	movs	r1, r2
 800e5f0:	001a      	movs	r2, r3
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	4d05      	ldr	r5, [pc, #20]	; (800e60c <_read_r+0x24>)
 800e5f6:	602b      	str	r3, [r5, #0]
 800e5f8:	f7f5 f91c 	bl	8003834 <_read>
 800e5fc:	1c43      	adds	r3, r0, #1
 800e5fe:	d103      	bne.n	800e608 <_read_r+0x20>
 800e600:	682b      	ldr	r3, [r5, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d000      	beq.n	800e608 <_read_r+0x20>
 800e606:	6023      	str	r3, [r4, #0]
 800e608:	bd70      	pop	{r4, r5, r6, pc}
 800e60a:	46c0      	nop			; (mov r8, r8)
 800e60c:	200005dc 	.word	0x200005dc

0800e610 <_init>:
 800e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e612:	46c0      	nop			; (mov r8, r8)
 800e614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e616:	bc08      	pop	{r3}
 800e618:	469e      	mov	lr, r3
 800e61a:	4770      	bx	lr

0800e61c <_fini>:
 800e61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61e:	46c0      	nop			; (mov r8, r8)
 800e620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e622:	bc08      	pop	{r3}
 800e624:	469e      	mov	lr, r3
 800e626:	4770      	bx	lr
