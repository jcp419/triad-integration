
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08009464  08009464  00019464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095f0  080095f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080095f0  080095f0  000195f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095f8  080095f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000070  08009670  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08009670  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022990  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003726  00000000  00000000  00042a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  00046150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  000476d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044c7  00000000  00000000  00048b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b912  00000000  00000000  0004cfcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9435  00000000  00000000  000688e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131d16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f0  00000000  00000000  00131d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800944c 	.word	0x0800944c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800944c 	.word	0x0800944c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	1c08      	adds	r0, r1, #0
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f95c 	bl	8000730 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f957 	bl	8000730 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__aeabi_ui2f>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	1e05      	subs	r5, r0, #0
 80005f0:	d00e      	beq.n	8000610 <__aeabi_ui2f+0x24>
 80005f2:	f000 f87f 	bl	80006f4 <__clzsi2>
 80005f6:	239e      	movs	r3, #158	; 0x9e
 80005f8:	0004      	movs	r4, r0
 80005fa:	1a1b      	subs	r3, r3, r0
 80005fc:	2b96      	cmp	r3, #150	; 0x96
 80005fe:	dc0c      	bgt.n	800061a <__aeabi_ui2f+0x2e>
 8000600:	2808      	cmp	r0, #8
 8000602:	dd01      	ble.n	8000608 <__aeabi_ui2f+0x1c>
 8000604:	3c08      	subs	r4, #8
 8000606:	40a5      	lsls	r5, r4
 8000608:	026d      	lsls	r5, r5, #9
 800060a:	0a6d      	lsrs	r5, r5, #9
 800060c:	b2d8      	uxtb	r0, r3
 800060e:	e001      	b.n	8000614 <__aeabi_ui2f+0x28>
 8000610:	2000      	movs	r0, #0
 8000612:	2500      	movs	r5, #0
 8000614:	05c0      	lsls	r0, r0, #23
 8000616:	4328      	orrs	r0, r5
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	2b99      	cmp	r3, #153	; 0x99
 800061c:	dd09      	ble.n	8000632 <__aeabi_ui2f+0x46>
 800061e:	0002      	movs	r2, r0
 8000620:	0029      	movs	r1, r5
 8000622:	321b      	adds	r2, #27
 8000624:	4091      	lsls	r1, r2
 8000626:	1e4a      	subs	r2, r1, #1
 8000628:	4191      	sbcs	r1, r2
 800062a:	2205      	movs	r2, #5
 800062c:	1a12      	subs	r2, r2, r0
 800062e:	40d5      	lsrs	r5, r2
 8000630:	430d      	orrs	r5, r1
 8000632:	2c05      	cmp	r4, #5
 8000634:	dd01      	ble.n	800063a <__aeabi_ui2f+0x4e>
 8000636:	1f62      	subs	r2, r4, #5
 8000638:	4095      	lsls	r5, r2
 800063a:	0029      	movs	r1, r5
 800063c:	4e08      	ldr	r6, [pc, #32]	; (8000660 <__aeabi_ui2f+0x74>)
 800063e:	4031      	ands	r1, r6
 8000640:	076a      	lsls	r2, r5, #29
 8000642:	d009      	beq.n	8000658 <__aeabi_ui2f+0x6c>
 8000644:	200f      	movs	r0, #15
 8000646:	4028      	ands	r0, r5
 8000648:	2804      	cmp	r0, #4
 800064a:	d005      	beq.n	8000658 <__aeabi_ui2f+0x6c>
 800064c:	3104      	adds	r1, #4
 800064e:	014a      	lsls	r2, r1, #5
 8000650:	d502      	bpl.n	8000658 <__aeabi_ui2f+0x6c>
 8000652:	239f      	movs	r3, #159	; 0x9f
 8000654:	4031      	ands	r1, r6
 8000656:	1b1b      	subs	r3, r3, r4
 8000658:	0189      	lsls	r1, r1, #6
 800065a:	0a4d      	lsrs	r5, r1, #9
 800065c:	b2d8      	uxtb	r0, r3
 800065e:	e7d9      	b.n	8000614 <__aeabi_ui2f+0x28>
 8000660:	fbffffff 	.word	0xfbffffff

08000664 <__aeabi_f2d>:
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	0043      	lsls	r3, r0, #1
 8000668:	0246      	lsls	r6, r0, #9
 800066a:	0fc4      	lsrs	r4, r0, #31
 800066c:	20fe      	movs	r0, #254	; 0xfe
 800066e:	0e1b      	lsrs	r3, r3, #24
 8000670:	1c59      	adds	r1, r3, #1
 8000672:	0a75      	lsrs	r5, r6, #9
 8000674:	4208      	tst	r0, r1
 8000676:	d00c      	beq.n	8000692 <__aeabi_f2d+0x2e>
 8000678:	22e0      	movs	r2, #224	; 0xe0
 800067a:	0092      	lsls	r2, r2, #2
 800067c:	4694      	mov	ip, r2
 800067e:	076d      	lsls	r5, r5, #29
 8000680:	0b36      	lsrs	r6, r6, #12
 8000682:	4463      	add	r3, ip
 8000684:	051b      	lsls	r3, r3, #20
 8000686:	4333      	orrs	r3, r6
 8000688:	07e4      	lsls	r4, r4, #31
 800068a:	4323      	orrs	r3, r4
 800068c:	0028      	movs	r0, r5
 800068e:	0019      	movs	r1, r3
 8000690:	bd70      	pop	{r4, r5, r6, pc}
 8000692:	2b00      	cmp	r3, #0
 8000694:	d114      	bne.n	80006c0 <__aeabi_f2d+0x5c>
 8000696:	2d00      	cmp	r5, #0
 8000698:	d01b      	beq.n	80006d2 <__aeabi_f2d+0x6e>
 800069a:	0028      	movs	r0, r5
 800069c:	f000 f82a 	bl	80006f4 <__clzsi2>
 80006a0:	280a      	cmp	r0, #10
 80006a2:	dc1c      	bgt.n	80006de <__aeabi_f2d+0x7a>
 80006a4:	230b      	movs	r3, #11
 80006a6:	002a      	movs	r2, r5
 80006a8:	1a1b      	subs	r3, r3, r0
 80006aa:	40da      	lsrs	r2, r3
 80006ac:	0003      	movs	r3, r0
 80006ae:	3315      	adds	r3, #21
 80006b0:	409d      	lsls	r5, r3
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <__aeabi_f2d+0x88>)
 80006b4:	0312      	lsls	r2, r2, #12
 80006b6:	1a1b      	subs	r3, r3, r0
 80006b8:	055b      	lsls	r3, r3, #21
 80006ba:	0b16      	lsrs	r6, r2, #12
 80006bc:	0d5b      	lsrs	r3, r3, #21
 80006be:	e7e1      	b.n	8000684 <__aeabi_f2d+0x20>
 80006c0:	2d00      	cmp	r5, #0
 80006c2:	d009      	beq.n	80006d8 <__aeabi_f2d+0x74>
 80006c4:	0b32      	lsrs	r2, r6, #12
 80006c6:	2680      	movs	r6, #128	; 0x80
 80006c8:	0336      	lsls	r6, r6, #12
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <__aeabi_f2d+0x8c>)
 80006cc:	076d      	lsls	r5, r5, #29
 80006ce:	4316      	orrs	r6, r2
 80006d0:	e7d8      	b.n	8000684 <__aeabi_f2d+0x20>
 80006d2:	2300      	movs	r3, #0
 80006d4:	2600      	movs	r6, #0
 80006d6:	e7d5      	b.n	8000684 <__aeabi_f2d+0x20>
 80006d8:	2600      	movs	r6, #0
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <__aeabi_f2d+0x8c>)
 80006dc:	e7d2      	b.n	8000684 <__aeabi_f2d+0x20>
 80006de:	0003      	movs	r3, r0
 80006e0:	002a      	movs	r2, r5
 80006e2:	3b0b      	subs	r3, #11
 80006e4:	409a      	lsls	r2, r3
 80006e6:	2500      	movs	r5, #0
 80006e8:	e7e3      	b.n	80006b2 <__aeabi_f2d+0x4e>
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	00000389 	.word	0x00000389
 80006f0:	000007ff 	.word	0x000007ff

080006f4 <__clzsi2>:
 80006f4:	211c      	movs	r1, #28
 80006f6:	2301      	movs	r3, #1
 80006f8:	041b      	lsls	r3, r3, #16
 80006fa:	4298      	cmp	r0, r3
 80006fc:	d301      	bcc.n	8000702 <__clzsi2+0xe>
 80006fe:	0c00      	lsrs	r0, r0, #16
 8000700:	3910      	subs	r1, #16
 8000702:	0a1b      	lsrs	r3, r3, #8
 8000704:	4298      	cmp	r0, r3
 8000706:	d301      	bcc.n	800070c <__clzsi2+0x18>
 8000708:	0a00      	lsrs	r0, r0, #8
 800070a:	3908      	subs	r1, #8
 800070c:	091b      	lsrs	r3, r3, #4
 800070e:	4298      	cmp	r0, r3
 8000710:	d301      	bcc.n	8000716 <__clzsi2+0x22>
 8000712:	0900      	lsrs	r0, r0, #4
 8000714:	3904      	subs	r1, #4
 8000716:	a202      	add	r2, pc, #8	; (adr r2, 8000720 <__clzsi2+0x2c>)
 8000718:	5c10      	ldrb	r0, [r2, r0]
 800071a:	1840      	adds	r0, r0, r1
 800071c:	4770      	bx	lr
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	02020304 	.word	0x02020304
 8000724:	01010101 	.word	0x01010101
	...

08000730 <__clzdi2>:
 8000730:	b510      	push	{r4, lr}
 8000732:	2900      	cmp	r1, #0
 8000734:	d103      	bne.n	800073e <__clzdi2+0xe>
 8000736:	f7ff ffdd 	bl	80006f4 <__clzsi2>
 800073a:	3020      	adds	r0, #32
 800073c:	e002      	b.n	8000744 <__clzdi2+0x14>
 800073e:	1c08      	adds	r0, r1, #0
 8000740:	f7ff ffd8 	bl	80006f4 <__clzsi2>
 8000744:	bd10      	pop	{r4, pc}
 8000746:	46c0      	nop			; (mov r8, r8)

08000748 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Callback to be called after HAL_UART_RECEIVE_IT finishes getting data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	// Disable Interrupts
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000750:	201b      	movs	r0, #27
 8000752:	f002 f95a 	bl	8002a0a <HAL_NVIC_DisableIRQ>
	// Set received flag
	cmd_received = 1;
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <HAL_UART_RxCpltCallback+0x84>)
 8000758:	2201      	movs	r2, #1
 800075a:	601a      	str	r2, [r3, #0]
	// Copy the receive buffer into the command buffer.
	memcpy(cmd_data,Rx_data,20);
 800075c:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <HAL_UART_RxCpltCallback+0x88>)
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000760:	0010      	movs	r0, r2
 8000762:	0019      	movs	r1, r3
 8000764:	2314      	movs	r3, #20
 8000766:	001a      	movs	r2, r3
 8000768:	f008 fa42 	bl	8008bf0 <memcpy>
	// Save the last command
	// Enable Interrupts
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800076c:	201b      	movs	r0, #27
 800076e:	f002 f93c 	bl	80029ea <HAL_NVIC_EnableIRQ>
	ret = HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 8000772:	4918      	ldr	r1, [pc, #96]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 8000776:	2214      	movs	r2, #20
 8000778:	0018      	movs	r0, r3
 800077a:	f006 ff1d 	bl	80075b8 <HAL_UART_Receive_DMA>
 800077e:	0003      	movs	r3, r0
 8000780:	001a      	movs	r2, r3
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <HAL_UART_RxCpltCallback+0x94>)
 8000784:	701a      	strb	r2, [r3, #0]

	//__HAL_UART_CLEAR_FLAG(JETSON_UART, UART_CLEAR_OREF);
	//__HAL_UART_SEND_REQ(JETSON_UART, UART_RXDATA_FLUSH_REQUEST);

	if (ret != HAL_OK) {
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_UART_RxCpltCallback+0x94>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d01a      	beq.n	80007c4 <HAL_UART_RxCpltCallback+0x7c>
		Error_Handler();
 800078e:	f000 fc19 	bl	8000fc4 <Error_Handler>
		HAL_UART_Abort_IT(&huart1);
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <HAL_UART_RxCpltCallback+0x98>)
 8000794:	0018      	movs	r0, r3
 8000796:	f006 ff7f 	bl	8007698 <HAL_UART_Abort_IT>
	    SET_BIT(huart1.Instance->CR3, USART_CR3_EIE);
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_RxCpltCallback+0x98>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	689a      	ldr	r2, [r3, #8]
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_UART_RxCpltCallback+0x98>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2101      	movs	r1, #1
 80007a6:	430a      	orrs	r2, r1
 80007a8:	609a      	str	r2, [r3, #8]
	    //This flag no longer exists
	    //SET_BIT(huart1.Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
	    HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 80007aa:	201b      	movs	r0, #27
 80007ac:	f002 f94a 	bl	8002a44 <HAL_NVIC_ClearPendingIRQ>

	    ret = HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 80007b0:	4908      	ldr	r1, [pc, #32]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 80007b4:	2214      	movs	r2, #20
 80007b6:	0018      	movs	r0, r3
 80007b8:	f006 fefe 	bl	80075b8 <HAL_UART_Receive_DMA>
 80007bc:	0003      	movs	r3, r0
 80007be:	001a      	movs	r2, r3
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_UART_RxCpltCallback+0x94>)
 80007c2:	701a      	strb	r2, [r3, #0]
	}
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	2000026c 	.word	0x2000026c
 80007d4:	20000148 	.word	0x20000148
 80007d8:	2000035c 	.word	0x2000035c
 80007dc:	200003ec 	.word	0x200003ec
 80007e0:	20000280 	.word	0x20000280

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f001 faa2 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f816 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f000 fb14 	bl	8000e1c <MX_GPIO_Init>
  MX_DMA_Init();
 80007f4:	f000 faec 	bl	8000dd0 <MX_DMA_Init>
  MX_ADC1_Init();
 80007f8:	f000 f87e 	bl	80008f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80007fc:	f000 f928 	bl	8000a50 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000800:	f000 f9de 	bl	8000bc0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000804:	f000 fa48 	bl	8000c98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000808:	f000 fa94 	bl	8000d34 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800080c:	f000 f8e0 	bl	80009d0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  main_preloop();
 8000810:	f000 fc92 	bl	8001138 <main_preloop>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  main_loop();
 8000814:	f000 fbdc 	bl	8000fd0 <main_loop>
 8000818:	e7fc      	b.n	8000814 <main+0x30>
	...

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b0a7      	sub	sp, #156	; 0x9c
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	245c      	movs	r4, #92	; 0x5c
 8000824:	193b      	adds	r3, r7, r4
 8000826:	0018      	movs	r0, r3
 8000828:	233c      	movs	r3, #60	; 0x3c
 800082a:	001a      	movs	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	f008 f9e8 	bl	8008c02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000832:	234c      	movs	r3, #76	; 0x4c
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	0018      	movs	r0, r3
 8000838:	2310      	movs	r3, #16
 800083a:	001a      	movs	r2, r3
 800083c:	2100      	movs	r1, #0
 800083e:	f008 f9e0 	bl	8008c02 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000842:	003b      	movs	r3, r7
 8000844:	0018      	movs	r0, r3
 8000846:	234c      	movs	r3, #76	; 0x4c
 8000848:	001a      	movs	r2, r3
 800084a:	2100      	movs	r1, #0
 800084c:	f008 f9d9 	bl	8008c02 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	0018      	movs	r0, r3
 8000856:	f005 f85d 	bl	8005914 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2202      	movs	r2, #2
 800085e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	0052      	lsls	r2, r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2240      	movs	r2, #64	; 0x40
 8000872:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087a:	193b      	adds	r3, r7, r4
 800087c:	0018      	movs	r0, r3
 800087e:	f005 f895 	bl	80059ac <HAL_RCC_OscConfig>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000886:	f000 fb9d 	bl	8000fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	214c      	movs	r1, #76	; 0x4c
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2207      	movs	r2, #7
 8000890:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2100      	movs	r1, #0
 80008a8:	0018      	movs	r0, r3
 80008aa:	f005 fbe5 	bl	8006078 <HAL_RCC_ClockConfig>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008b2:	f000 fb87 	bl	8000fc4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80008b6:	003b      	movs	r3, r7
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <SystemClock_Config+0xd8>)
 80008ba:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008bc:	003b      	movs	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c2:	003b      	movs	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80008c8:	003b      	movs	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80008ce:	003b      	movs	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008d4:	003b      	movs	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008da:	003b      	movs	r3, r7
 80008dc:	0018      	movs	r0, r3
 80008de:	f005 fd75 	bl	80063cc <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008e6:	f000 fb6d 	bl	8000fc4 <Error_Handler>
  }
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b027      	add	sp, #156	; 0x9c
 80008f0:	bd90      	pop	{r4, r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	00204043 	.word	0x00204043

080008f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	0018      	movs	r0, r3
 8000902:	230c      	movs	r3, #12
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f008 f97b 	bl	8008c02 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800090c:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_ADC1_Init+0xcc>)
 800090e:	4a2e      	ldr	r2, [pc, #184]	; (80009c8 <MX_ADC1_Init+0xd0>)
 8000910:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000912:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <MX_ADC1_Init+0xcc>)
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	05d2      	lsls	r2, r2, #23
 8000918:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800091a:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <MX_ADC1_Init+0xcc>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000920:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <MX_ADC1_Init+0xcc>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000926:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <MX_ADC1_Init+0xcc>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <MX_ADC1_Init+0xcc>)
 800092e:	2204      	movs	r2, #4
 8000930:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000932:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <MX_ADC1_Init+0xcc>)
 8000934:	2200      	movs	r2, #0
 8000936:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MX_ADC1_Init+0xcc>)
 800093a:	2200      	movs	r2, #0
 800093c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_ADC1_Init+0xcc>)
 8000940:	2200      	movs	r2, #0
 8000942:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_ADC1_Init+0xcc>)
 8000946:	2201      	movs	r2, #1
 8000948:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_ADC1_Init+0xcc>)
 800094c:	2220      	movs	r2, #32
 800094e:	2100      	movs	r1, #0
 8000950:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_ADC1_Init+0xcc>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_ADC1_Init+0xcc>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_ADC1_Init+0xcc>)
 8000960:	222c      	movs	r2, #44	; 0x2c
 8000962:	2100      	movs	r1, #0
 8000964:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_ADC1_Init+0xcc>)
 8000968:	2200      	movs	r2, #0
 800096a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_ADC1_Init+0xcc>)
 800096e:	2200      	movs	r2, #0
 8000970:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_ADC1_Init+0xcc>)
 8000974:	2200      	movs	r2, #0
 8000976:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_ADC1_Init+0xcc>)
 800097a:	223c      	movs	r2, #60	; 0x3c
 800097c:	2100      	movs	r1, #0
 800097e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_ADC1_Init+0xcc>)
 8000982:	2200      	movs	r2, #0
 8000984:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_ADC1_Init+0xcc>)
 8000988:	0018      	movs	r0, r3
 800098a:	f001 fb79 	bl	8002080 <HAL_ADC_Init>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000992:	f000 fb17 	bl	8000fc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <MX_ADC1_Init+0xd4>)
 800099a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	1d3a      	adds	r2, r7, #4
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_ADC1_Init+0xcc>)
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 fd44 	bl	800243c <HAL_ADC_ConfigChannel>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80009b8:	f000 fb04 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b004      	add	sp, #16
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200001a8 	.word	0x200001a8
 80009c8:	40012400 	.word	0x40012400
 80009cc:	0c000008 	.word	0x0c000008

080009d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_I2C2_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <MX_I2C2_Init+0x7c>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 fcc7 	bl	80033a0 <HAL_I2C_Init>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 fad5 	bl	8000fc4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f004 fee0 	bl	80057e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 facc 	bl	8000fc4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	0018      	movs	r0, r3
 8000a32:	f004 ff23 	bl	800587c <HAL_I2CEx_ConfigDigitalFilter>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fac3 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000fc 	.word	0x200000fc
 8000a48:	40005800 	.word	0x40005800
 8000a4c:	00303d5b 	.word	0x00303d5b

08000a50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b098      	sub	sp, #96	; 0x60
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a56:	2354      	movs	r3, #84	; 0x54
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	001a      	movs	r2, r3
 8000a60:	2100      	movs	r1, #0
 8000a62:	f008 f8ce 	bl	8008c02 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	2338      	movs	r3, #56	; 0x38
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	231c      	movs	r3, #28
 8000a6e:	001a      	movs	r2, r3
 8000a70:	2100      	movs	r1, #0
 8000a72:	f008 f8c6 	bl	8008c02 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	0018      	movs	r0, r3
 8000a7a:	2334      	movs	r3, #52	; 0x34
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	f008 f8bf 	bl	8008c02 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a84:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000a86:	4a4c      	ldr	r2, [pc, #304]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000a88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a8a:	4b4a      	ldr	r3, [pc, #296]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b48      	ldr	r3, [pc, #288]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a96:	4b47      	ldr	r3, [pc, #284]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000a98:	4a48      	ldr	r2, [pc, #288]	; (8000bbc <MX_TIM1_Init+0x16c>)
 8000a9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b45      	ldr	r3, [pc, #276]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aa2:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aae:	4b41      	ldr	r3, [pc, #260]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f005 fec7 	bl	8006844 <HAL_TIM_PWM_Init>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000aba:	f000 fa83 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abe:	2154      	movs	r1, #84	; 0x54
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ad2:	187a      	adds	r2, r7, r1
 8000ad4:	4b37      	ldr	r3, [pc, #220]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f006 fb4f 	bl	800717c <HAL_TIMEx_MasterConfigSynchronization>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ae2:	f000 fa6f 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae6:	2138      	movs	r1, #56	; 0x38
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2260      	movs	r2, #96	; 0x60
 8000aec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b12:	1879      	adds	r1, r7, r1
 8000b14:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f005 feeb 	bl	80068f4 <HAL_TIM_PWM_ConfigChannel>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b22:	f000 fa4f 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b26:	2338      	movs	r3, #56	; 0x38
 8000b28:	18f9      	adds	r1, r7, r3
 8000b2a:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f005 fee0 	bl	80068f4 <HAL_TIM_PWM_ConfigChannel>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000b38:	f000 fa44 	bl	8000fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	0192      	lsls	r2, r2, #6
 8000b60:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	0492      	lsls	r2, r2, #18
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b8e:	1d3a      	adds	r2, r7, #4
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f006 fb67 	bl	8007268 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000b9e:	f000 fa11 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <MX_TIM1_Init+0x164>)
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fd31 	bl	800160c <HAL_TIM_MspPostInit>

}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b018      	add	sp, #96	; 0x60
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	20000310 	.word	0x20000310
 8000bb8:	40012c00 	.word	0x40012c00
 8000bbc:	0000ffff 	.word	0x0000ffff

08000bc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc6:	231c      	movs	r3, #28
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	0018      	movs	r0, r3
 8000bcc:	230c      	movs	r3, #12
 8000bce:	001a      	movs	r2, r3
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	f008 f816 	bl	8008c02 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd6:	003b      	movs	r3, r7
 8000bd8:	0018      	movs	r0, r3
 8000bda:	231c      	movs	r3, #28
 8000bdc:	001a      	movs	r2, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	f008 f80f 	bl	8008c02 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000be4:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_TIM3_Init+0xcc>)
 8000be6:	4a2a      	ldr	r2, [pc, #168]	; (8000c90 <MX_TIM3_Init+0xd0>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <MX_TIM3_Init+0xcc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_TIM3_Init+0xcc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bf6:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <MX_TIM3_Init+0xcc>)
 8000bf8:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <MX_TIM3_Init+0xd4>)
 8000bfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <MX_TIM3_Init+0xcc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_TIM3_Init+0xcc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <MX_TIM3_Init+0xcc>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f005 fe1a 	bl	8006844 <HAL_TIM_PWM_Init>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c14:	f000 f9d6 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	211c      	movs	r1, #28
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c26:	187a      	adds	r2, r7, r1
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_TIM3_Init+0xcc>)
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f006 faa5 	bl	800717c <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000c36:	f000 f9c5 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3a:	003b      	movs	r3, r7
 8000c3c:	2260      	movs	r2, #96	; 0x60
 8000c3e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c40:	003b      	movs	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c46:	003b      	movs	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4c:	003b      	movs	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c52:	0039      	movs	r1, r7
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <MX_TIM3_Init+0xcc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f005 fe4b 	bl	80068f4 <HAL_TIM_PWM_ConfigChannel>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000c62:	f000 f9af 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c66:	0039      	movs	r1, r7
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_TIM3_Init+0xcc>)
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f005 fe41 	bl	80068f4 <HAL_TIM_PWM_ConfigChannel>
 8000c72:	1e03      	subs	r3, r0, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000c76:	f000 f9a5 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <MX_TIM3_Init+0xcc>)
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 fcc5 	bl	800160c <HAL_TIM_MspPostInit>

}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b00a      	add	sp, #40	; 0x28
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	2000015c 	.word	0x2000015c
 8000c90:	40000400 	.word	0x40000400
 8000c94:	0000ffff 	.word	0x0000ffff

08000c98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000c9e:	4a24      	ldr	r2, [pc, #144]	; (8000d30 <MX_USART1_UART_Init+0x98>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000ca4:	2296      	movs	r2, #150	; 0x96
 8000ca6:	0212      	lsls	r2, r2, #8
 8000ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_CTS;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	0092      	lsls	r2, r2, #2
 8000cc8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f006 fb65 	bl	80073b4 <HAL_UART_Init>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000cee:	f000 f969 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f007 fe66 	bl	80089c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000d00:	f000 f960 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f007 fe9d 	bl	8008a48 <HAL_UARTEx_SetRxFifoThreshold>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000d12:	f000 f957 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <MX_USART1_UART_Init+0x94>)
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f007 fe1b 	bl	8008954 <HAL_UARTEx_DisableFifoMode>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000d22:	f000 f94f 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000280 	.word	0x20000280
 8000d30:	40013800 	.word	0x40013800

08000d34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d38:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d3a:	4a24      	ldr	r2, [pc, #144]	; (8000dcc <MX_USART2_UART_Init+0x98>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d40:	2296      	movs	r2, #150	; 0x96
 8000d42:	0212      	lsls	r2, r2, #8
 8000d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f006 fb18 	bl	80073b4 <HAL_UART_Init>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d88:	f000 f91c 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	0018      	movs	r0, r3
 8000d92:	f007 fe19 	bl	80089c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d9a:	f000 f913 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000da0:	2100      	movs	r1, #0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f007 fe50 	bl	8008a48 <HAL_UARTEx_SetRxFifoThreshold>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d001      	beq.n	8000db0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000dac:	f000 f90a 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000db2:	0018      	movs	r0, r3
 8000db4:	f007 fdce 	bl	8008954 <HAL_UARTEx_DisableFifoMode>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000dbc:	f000 f902 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	2000035c 	.word	0x2000035c
 8000dcc:	40004400 	.word	0x40004400

08000dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_DMA_Init+0x48>)
 8000dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_DMA_Init+0x48>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	430a      	orrs	r2, r1
 8000de0:	639a      	str	r2, [r3, #56]	; 0x38
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <MX_DMA_Init+0x48>)
 8000de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de6:	2201      	movs	r2, #1
 8000de8:	4013      	ands	r3, r2
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2009      	movs	r0, #9
 8000df4:	f001 fde4 	bl	80029c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000df8:	2009      	movs	r0, #9
 8000dfa:	f001 fdf6 	bl	80029ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	200a      	movs	r0, #10
 8000e04:	f001 fddc 	bl	80029c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f001 fdee 	bl	80029ea <HAL_NVIC_EnableIRQ>

}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	40021000 	.word	0x40021000

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b08b      	sub	sp, #44	; 0x2c
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	2414      	movs	r4, #20
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	0018      	movs	r0, r3
 8000e28:	2314      	movs	r3, #20
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f007 fee8 	bl	8008c02 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b5e      	ldr	r3, [pc, #376]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e36:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e38:	2104      	movs	r1, #4
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e3e:	4b5b      	ldr	r3, [pc, #364]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e42:	2204      	movs	r2, #4
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4a:	4b58      	ldr	r3, [pc, #352]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e4e:	4b57      	ldr	r3, [pc, #348]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e50:	2120      	movs	r1, #32
 8000e52:	430a      	orrs	r2, r1
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
 8000e56:	4b55      	ldr	r3, [pc, #340]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b52      	ldr	r3, [pc, #328]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e66:	4b51      	ldr	r3, [pc, #324]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e68:	2101      	movs	r1, #1
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e6e:	4b4f      	ldr	r3, [pc, #316]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e72:	2201      	movs	r2, #1
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b4c      	ldr	r3, [pc, #304]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e7e:	4b4b      	ldr	r3, [pc, #300]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e80:	2102      	movs	r1, #2
 8000e82:	430a      	orrs	r2, r1
 8000e84:	635a      	str	r2, [r3, #52]	; 0x34
 8000e86:	4b49      	ldr	r3, [pc, #292]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	4b46      	ldr	r3, [pc, #280]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e96:	4b45      	ldr	r3, [pc, #276]	; (8000fac <MX_GPIO_Init+0x190>)
 8000e98:	2108      	movs	r1, #8
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e9e:	4b43      	ldr	r3, [pc, #268]	; (8000fac <MX_GPIO_Init+0x190>)
 8000ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HBRIDGE_BWD_Pin|LIMIT_SWITCH_0_Pin, GPIO_PIN_RESET);
 8000eaa:	23c0      	movs	r3, #192	; 0xc0
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	4840      	ldr	r0, [pc, #256]	; (8000fb0 <MX_GPIO_Init+0x194>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	f002 fa56 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIMIT_SWITCH_1_GPIO_Port, LIMIT_SWITCH_1_Pin, GPIO_PIN_RESET);
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f002 fa50 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIMIT_SWITCH_2_GPIO_Port, LIMIT_SWITCH_2_Pin, GPIO_PIN_RESET);
 8000ec4:	23a0      	movs	r3, #160	; 0xa0
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2101      	movs	r1, #1
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f002 fa49 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WHITE_LED_Pin|UV_BULB_Pin|RAMAN_LASER_Pin|NICHROME_WIRE_0_Pin
 8000ed2:	4939      	ldr	r1, [pc, #228]	; (8000fb8 <MX_GPIO_Init+0x19c>)
 8000ed4:	4b39      	ldr	r3, [pc, #228]	; (8000fbc <MX_GPIO_Init+0x1a0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f002 fa43 	bl	8003364 <HAL_GPIO_WritePin>
                          |AUTON_LED_1_AND_LASER_Pin|AUTON_LED_0_Pin|SERVO_PWM_2_Pin|AUTON_LED_2_AND_UV_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NICHROME_WIRE_1_Pin|NICHROME_WIRE_2_Pin, GPIO_PIN_RESET);
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <MX_GPIO_Init+0x1a4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	210a      	movs	r1, #10
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f002 fa3d 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HBRIDGE_BWD_Pin LIMIT_SWITCH_0_Pin */
  GPIO_InitStruct.Pin = HBRIDGE_BWD_Pin|LIMIT_SWITCH_0_Pin;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	22c0      	movs	r2, #192	; 0xc0
 8000eee:	0212      	lsls	r2, r2, #8
 8000ef0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	4a2a      	ldr	r2, [pc, #168]	; (8000fb0 <MX_GPIO_Init+0x194>)
 8000f08:	0019      	movs	r1, r3
 8000f0a:	0010      	movs	r0, r2
 8000f0c:	f002 f8be 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_SWITCH_1_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_1_Pin;
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	2202      	movs	r2, #2
 8000f14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	2201      	movs	r2, #1
 8000f1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	193b      	adds	r3, r7, r4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIMIT_SWITCH_1_GPIO_Port, &GPIO_InitStruct);
 8000f28:	193b      	adds	r3, r7, r4
 8000f2a:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <MX_GPIO_Init+0x198>)
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	0010      	movs	r0, r2
 8000f30:	f002 f8ac 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pin : LIMIT_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_2_Pin;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIMIT_SWITCH_2_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	193a      	adds	r2, r7, r4
 8000f4e:	23a0      	movs	r3, #160	; 0xa0
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	0011      	movs	r1, r2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f002 f899 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pins : WHITE_LED_Pin UV_BULB_Pin RAMAN_LASER_Pin NICHROME_WIRE_0_Pin
                           AUTON_LED_1_AND_LASER_Pin AUTON_LED_0_Pin SERVO_PWM_2_Pin AUTON_LED_2_AND_UV_LED_Pin */
  GPIO_InitStruct.Pin = WHITE_LED_Pin|UV_BULB_Pin|RAMAN_LASER_Pin|NICHROME_WIRE_0_Pin
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <MX_GPIO_Init+0x19c>)
 8000f5e:	601a      	str	r2, [r3, #0]
                          |AUTON_LED_1_AND_LASER_Pin|AUTON_LED_0_Pin|SERVO_PWM_2_Pin|AUTON_LED_2_AND_UV_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	2201      	movs	r2, #1
 8000f64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <MX_GPIO_Init+0x1a0>)
 8000f76:	0019      	movs	r1, r3
 8000f78:	0010      	movs	r0, r2
 8000f7a:	f002 f887 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pins : NICHROME_WIRE_1_Pin NICHROME_WIRE_2_Pin */
  GPIO_InitStruct.Pin = NICHROME_WIRE_1_Pin|NICHROME_WIRE_2_Pin;
 8000f7e:	0021      	movs	r1, r4
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	220a      	movs	r2, #10
 8000f84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2201      	movs	r2, #1
 8000f8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <MX_GPIO_Init+0x1a4>)
 8000f9c:	0019      	movs	r1, r3
 8000f9e:	0010      	movs	r0, r2
 8000fa0:	f002 f874 	bl	800308c <HAL_GPIO_Init>

}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b00b      	add	sp, #44	; 0x2c
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	50000800 	.word	0x50000800
 8000fb4:	50001400 	.word	0x50001400
 8000fb8:	00003e70 	.word	0x00003e70
 8000fbc:	50000400 	.word	0x50000400
 8000fc0:	50000c00 	.word	0x50000c00

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <main_loop>:
extern SMBus *i2cBus;
extern Device *triad[3];

#define JETSON_UART &huart2

int main_loop(){
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af02      	add	r7, sp, #8
	// Read and send all thermistor data over Jetson UART
	send_thermistor_data(thermistors, JETSON_UART);
#endif

	//Disable interrupts
	    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000fd6:	201b      	movs	r0, #27
 8000fd8:	f001 fd17 	bl	8002a0a <HAL_NVIC_DisableIRQ>
	   	uint8_t message[20];
	   	for(int i = 0; i< 20; ++i){
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	e007      	b.n	8000ff2 <main_loop+0x22>
	   		message[i] = 0;
 8000fe2:	003a      	movs	r2, r7
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	18d3      	adds	r3, r2, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
	   	for(int i = 0; i< 20; ++i){
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	2b13      	cmp	r3, #19
 8000ff6:	ddf4      	ble.n	8000fe2 <main_loop+0x12>
	   	}
	   	if(cmd_received == 1){
 8000ff8:	4b49      	ldr	r3, [pc, #292]	; (8001120 <main_loop+0x150>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d10a      	bne.n	8001016 <main_loop+0x46>
	   		cmd_received = 0;
 8001000:	4b47      	ldr	r3, [pc, #284]	; (8001120 <main_loop+0x150>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
	   		memcpy(message,cmd_data,20);
 8001006:	003a      	movs	r2, r7
 8001008:	4b46      	ldr	r3, [pc, #280]	; (8001124 <main_loop+0x154>)
 800100a:	0010      	movs	r0, r2
 800100c:	0019      	movs	r1, r3
 800100e:	2314      	movs	r3, #20
 8001010:	001a      	movs	r2, r3
 8001012:	f007 fded 	bl	8008bf0 <memcpy>
	   	}
	   	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001016:	201b      	movs	r0, #27
 8001018:	f001 fce7 	bl	80029ea <HAL_NVIC_EnableIRQ>

#ifdef TRIAD_ENABLE
	// strcpy((char*)buf, "Hello!\r\n");
	// HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	// HAL_Delay(500);
	Channel *channel = new_channel(0, 0);
 800101c:	2100      	movs	r1, #0
 800101e:	2000      	movs	r0, #0
 8001020:	f000 fe3e 	bl	8001ca0 <new_channel>
 8001024:	0003      	movs	r3, r0
 8001026:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < 3; ++i) {
 8001028:	231b      	movs	r3, #27
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	e066      	b.n	8001100 <main_loop+0x130>
	  virtual_write(DEV_SEL, triad[i]->dev_register);
 8001032:	231b      	movs	r3, #27
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	4b3b      	ldr	r3, [pc, #236]	; (8001128 <main_loop+0x158>)
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	58d3      	ldr	r3, [r2, r3]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	0019      	movs	r1, r3
 8001042:	204f      	movs	r0, #79	; 0x4f
 8001044:	f000 fdde 	bl	8001c04 <virtual_write>
	  for (uint8_t j = 0; j < CHANNELS; ++j) {
 8001048:	231a      	movs	r3, #26
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e04b      	b.n	80010ea <main_loop+0x11a>
		  channel = triad[i]->channels[j];
 8001052:	251b      	movs	r5, #27
 8001054:	197b      	adds	r3, r7, r5
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <main_loop+0x158>)
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	58d2      	ldr	r2, [r2, r3]
 800105e:	241a      	movs	r4, #26
 8001060:	193b      	adds	r3, r7, r4
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	18d3      	adds	r3, r2, r3
 8001068:	3304      	adds	r3, #4
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	617b      	str	r3, [r7, #20]
		  channel->color_data = get_decimal(channel->lsb_register, channel->msb_register);
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	0019      	movs	r1, r3
 8001078:	0010      	movs	r0, r2
 800107a:	f000 fcf2 	bl	8001a62 <get_decimal>
 800107e:	0003      	movs	r3, r0
 8001080:	001a      	movs	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	805a      	strh	r2, [r3, #2]

		  //complicated way to print "channel {x} : {data}"
		  sprintf((char*)buf_triad , "channel %u : %f \r\n", (unsigned int)((i*CHANNELS) + j), (float)channel->color_data);
 8001086:	197b      	adds	r3, r7, r5
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	0013      	movs	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	189b      	adds	r3, r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	001a      	movs	r2, r3
 8001094:	0025      	movs	r5, r4
 8001096:	193b      	adds	r3, r7, r4
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	18d3      	adds	r3, r2, r3
 800109c:	001c      	movs	r4, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	885b      	ldrh	r3, [r3, #2]
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff faa2 	bl	80005ec <__aeabi_ui2f>
 80010a8:	1c03      	adds	r3, r0, #0
 80010aa:	1c18      	adds	r0, r3, #0
 80010ac:	f7ff fada 	bl	8000664 <__aeabi_f2d>
 80010b0:	0002      	movs	r2, r0
 80010b2:	000b      	movs	r3, r1
 80010b4:	491d      	ldr	r1, [pc, #116]	; (800112c <main_loop+0x15c>)
 80010b6:	481e      	ldr	r0, [pc, #120]	; (8001130 <main_loop+0x160>)
 80010b8:	9200      	str	r2, [sp, #0]
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	0022      	movs	r2, r4
 80010be:	f007 fe63 	bl	8008d88 <siprintf>

		  HAL_UART_Transmit(&huart1, buf_triad, strlen((char*)buf_triad), HAL_MAX_DELAY);
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <main_loop+0x160>)
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff f81d 	bl	8000104 <strlen>
 80010ca:	0003      	movs	r3, r0
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	2301      	movs	r3, #1
 80010d0:	425b      	negs	r3, r3
 80010d2:	4917      	ldr	r1, [pc, #92]	; (8001130 <main_loop+0x160>)
 80010d4:	4817      	ldr	r0, [pc, #92]	; (8001134 <main_loop+0x164>)
 80010d6:	f006 f9c3 	bl	8007460 <HAL_UART_Transmit>
		  HAL_Delay(10);
 80010da:	200a      	movs	r0, #10
 80010dc:	f000 feae 	bl	8001e3c <HAL_Delay>
	  for (uint8_t j = 0; j < CHANNELS; ++j) {
 80010e0:	197b      	adds	r3, r7, r5
 80010e2:	197a      	adds	r2, r7, r5
 80010e4:	7812      	ldrb	r2, [r2, #0]
 80010e6:	3201      	adds	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	231a      	movs	r3, #26
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d9ae      	bls.n	8001052 <main_loop+0x82>
	for (uint8_t i = 0; i < 3; ++i) {
 80010f4:	221b      	movs	r2, #27
 80010f6:	18bb      	adds	r3, r7, r2
 80010f8:	18ba      	adds	r2, r7, r2
 80010fa:	7812      	ldrb	r2, [r2, #0]
 80010fc:	3201      	adds	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	231b      	movs	r3, #27
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d993      	bls.n	8001032 <main_loop+0x62>
	  }
	}
	HAL_Delay(1000);
 800110a:	23fa      	movs	r3, #250	; 0xfa
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	0018      	movs	r0, r3
 8001110:	f000 fe94 	bl	8001e3c <HAL_Delay>
#endif

	return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	0018      	movs	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	b008      	add	sp, #32
 800111c:	bdb0      	pop	{r4, r5, r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	2000008c 	.word	0x2000008c
 8001124:	2000026c 	.word	0x2000026c
 8001128:	20000440 	.word	0x20000440
 800112c:	08009464 	.word	0x08009464
 8001130:	20000420 	.word	0x20000420
 8001134:	20000280 	.word	0x20000280

08001138 <main_preloop>:
#include "main.h"
#include "main_loop.h"

#define JETSON_UART &huart2

int main_preloop(){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(JETSON_UART,Rx_data,20);
 800113c:	4918      	ldr	r1, [pc, #96]	; (80011a0 <main_preloop+0x68>)
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <main_preloop+0x6c>)
 8001140:	2214      	movs	r2, #20
 8001142:	0018      	movs	r0, r3
 8001144:	f006 fa38 	bl	80075b8 <HAL_UART_Receive_DMA>
	start(hbridge_motor, TIM_CHANNEL_1);

#endif

#ifdef TRIAD_ENABLE
	i2cBus = new_smbus(&hi2c2, &huart2);
 8001148:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <main_preloop+0x6c>)
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <main_preloop+0x70>)
 800114c:	0011      	movs	r1, r2
 800114e:	0018      	movs	r0, r3
 8001150:	f000 f830 	bl	80011b4 <new_smbus>
 8001154:	0002      	movs	r2, r0
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <main_preloop+0x74>)
 8001158:	601a      	str	r2, [r3, #0]

	triad[0] = new_device(0x00);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 fca4 	bl	8001aa8 <new_device>
 8001160:	0002      	movs	r2, r0
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <main_preloop+0x78>)
 8001164:	601a      	str	r2, [r3, #0]
	triad[1] = new_device(0x01);
 8001166:	2001      	movs	r0, #1
 8001168:	f000 fc9e 	bl	8001aa8 <new_device>
 800116c:	0002      	movs	r2, r0
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <main_preloop+0x78>)
 8001170:	605a      	str	r2, [r3, #4]
	triad[2] = new_device(0x02);
 8001172:	2002      	movs	r0, #2
 8001174:	f000 fc98 	bl	8001aa8 <new_device>
 8001178:	0002      	movs	r2, r0
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <main_preloop+0x78>)
 800117c:	609a      	str	r2, [r3, #8]

	virtual_write(0x04, 0x28);
 800117e:	2128      	movs	r1, #40	; 0x28
 8001180:	2004      	movs	r0, #4
 8001182:	f000 fd3f 	bl	8001c04 <virtual_write>
	virtual_write(0x04, 0x28);
 8001186:	2128      	movs	r1, #40	; 0x28
 8001188:	2004      	movs	r0, #4
 800118a:	f000 fd3b 	bl	8001c04 <virtual_write>
	virtual_write(0x05, 0xFF);
 800118e:	21ff      	movs	r1, #255	; 0xff
 8001190:	2005      	movs	r0, #5
 8001192:	f000 fd37 	bl	8001c04 <virtual_write>

#endif

	return 0;
 8001196:	2300      	movs	r3, #0
}
 8001198:	0018      	movs	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	20000148 	.word	0x20000148
 80011a4:	2000035c 	.word	0x2000035c
 80011a8:	200000fc 	.word	0x200000fc
 80011ac:	20000414 	.word	0x20000414
 80011b0:	20000440 	.word	0x20000440

080011b4 <new_smbus>:
#include "smbus.h"


SMBus *new_smbus(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    SMBus *smbus = malloc(sizeof(SMBus));
 80011be:	2028      	movs	r0, #40	; 0x28
 80011c0:	f007 fd0c 	bl	8008bdc <malloc>
 80011c4:	0003      	movs	r3, r0
 80011c6:	60fb      	str	r3, [r7, #12]
    smbus->i2c = hi2c;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
    smbus->uart = huart;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	605a      	str	r2, [r3, #4]
    smbus->DMA = TRUE;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2227      	movs	r2, #39	; 0x27
 80011d8:	2101      	movs	r1, #1
 80011da:	5499      	strb	r1, [r3, r2]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3309      	adds	r3, #9
 80011e0:	221e      	movs	r2, #30
 80011e2:	2100      	movs	r1, #0
 80011e4:	0018      	movs	r0, r3
 80011e6:	f007 fd0c 	bl	8008c02 <memset>

    return smbus;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b004      	add	sp, #16
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <read_byte_data>:
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
    }
    _check_error(smbus);
}

long read_byte_data(SMBus *smbus, uint8_t addr, char cmd) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	0008      	movs	r0, r1
 80011fe:	0011      	movs	r1, r2
 8001200:	1cfb      	adds	r3, r7, #3
 8001202:	1c02      	adds	r2, r0, #0
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	1cbb      	adds	r3, r7, #2
 8001208:	1c0a      	adds	r2, r1, #0
 800120a:	701a      	strb	r2, [r3, #0]
    //transmits the address to read from
    smbus->buf[0] = cmd;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	1cba      	adds	r2, r7, #2
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	725a      	strb	r2, [r3, #9]
    if (!smbus->DMA) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2227      	movs	r2, #39	; 0x27
 8001218:	5c9b      	ldrb	r3, [r3, r2]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d114      	bne.n	8001248 <read_byte_data+0x54>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, 1000);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	1cfb      	adds	r3, r7, #3
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	18db      	adds	r3, r3, r3
 800122a:	b299      	uxth	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3309      	adds	r3, #9
 8001230:	001a      	movs	r2, r3
 8001232:	23fa      	movs	r3, #250	; 0xfa
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	f002 f947 	bl	80034cc <HAL_I2C_Master_Transmit>
 800123e:	0003      	movs	r3, r0
 8001240:	001a      	movs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	721a      	strb	r2, [r3, #8]
 8001246:	e010      	b.n	800126a <read_byte_data+0x76>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	1cfb      	adds	r3, r7, #3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b29b      	uxth	r3, r3
 8001252:	18db      	adds	r3, r3, r3
 8001254:	b299      	uxth	r1, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3309      	adds	r3, #9
 800125a:	001a      	movs	r2, r3
 800125c:	2301      	movs	r3, #1
 800125e:	f002 fb45 	bl	80038ec <HAL_I2C_Master_Transmit_DMA>
 8001262:	0003      	movs	r3, r0
 8001264:	001a      	movs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	0018      	movs	r0, r3
 800126e:	f000 f887 	bl	8001380 <_check_error>
    
    //reads from address sent above
    if (!smbus->DMA) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2227      	movs	r2, #39	; 0x27
 8001276:	5c9b      	ldrb	r3, [r3, r2]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d117      	bne.n	80012ac <read_byte_data+0xb8>
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 1, 1000);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	1cfb      	adds	r3, r7, #3
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	b21b      	sxth	r3, r3
 8001288:	2201      	movs	r2, #1
 800128a:	4313      	orrs	r3, r2
 800128c:	b21b      	sxth	r3, r3
 800128e:	b299      	uxth	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3309      	adds	r3, #9
 8001294:	001a      	movs	r2, r3
 8001296:	23fa      	movs	r3, #250	; 0xfa
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2301      	movs	r3, #1
 800129e:	f002 fa1d 	bl	80036dc <HAL_I2C_Master_Receive>
 80012a2:	0003      	movs	r3, r0
 80012a4:	001a      	movs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	721a      	strb	r2, [r3, #8]
 80012aa:	e013      	b.n	80012d4 <read_byte_data+0xe0>
    }
    else {
        smbus->ret = HAL_I2C_Master_Receive_DMA(smbus->i2c, (addr << 1) | 1, smbus->buf, 1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	1cfb      	adds	r3, r7, #3
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	2201      	movs	r2, #1
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b21b      	sxth	r3, r3
 80012be:	b299      	uxth	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3309      	adds	r3, #9
 80012c4:	001a      	movs	r2, r3
 80012c6:	2301      	movs	r3, #1
 80012c8:	f002 fc16 	bl	8003af8 <HAL_I2C_Master_Receive_DMA>
 80012cc:	0003      	movs	r3, r0
 80012ce:	001a      	movs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 f852 	bl	8001380 <_check_error>
    return smbus->buf[0];
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	7a5b      	ldrb	r3, [r3, #9]
}
 80012e0:	0018      	movs	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b002      	add	sp, #8
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <write_byte_data>:

void write_byte_data(SMBus *smbus, uint8_t addr, char cmd, uint8_t data) {
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	000c      	movs	r4, r1
 80012f2:	0010      	movs	r0, r2
 80012f4:	0019      	movs	r1, r3
 80012f6:	1cfb      	adds	r3, r7, #3
 80012f8:	1c22      	adds	r2, r4, #0
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	1cbb      	adds	r3, r7, #2
 80012fe:	1c02      	adds	r2, r0, #0
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	1c7b      	adds	r3, r7, #1
 8001304:	1c0a      	adds	r2, r1, #0
 8001306:	701a      	strb	r2, [r3, #0]
    smbus->buf[0] = cmd;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	1cba      	adds	r2, r7, #2
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	725a      	strb	r2, [r3, #9]
    smbus->buf[1] = data;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	1c7a      	adds	r2, r7, #1
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	729a      	strb	r2, [r3, #10]

    //SMBUS docs first byte is cmd to write, second is data
    if (!smbus->DMA) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2227      	movs	r2, #39	; 0x27
 800131c:	5c9b      	ldrb	r3, [r3, r2]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d114      	bne.n	800134c <write_byte_data+0x64>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 2, 1000);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	1cfb      	adds	r3, r7, #3
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	18db      	adds	r3, r3, r3
 800132e:	b299      	uxth	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3309      	adds	r3, #9
 8001334:	001a      	movs	r2, r3
 8001336:	23fa      	movs	r3, #250	; 0xfa
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2302      	movs	r3, #2
 800133e:	f002 f8c5 	bl	80034cc <HAL_I2C_Master_Transmit>
 8001342:	0003      	movs	r3, r0
 8001344:	001a      	movs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	721a      	strb	r2, [r3, #8]
 800134a:	e010      	b.n	800136e <write_byte_data+0x86>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 2);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	1cfb      	adds	r3, r7, #3
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	18db      	adds	r3, r3, r3
 8001358:	b299      	uxth	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3309      	adds	r3, #9
 800135e:	001a      	movs	r2, r3
 8001360:	2302      	movs	r3, #2
 8001362:	f002 fac3 	bl	80038ec <HAL_I2C_Master_Transmit_DMA>
 8001366:	0003      	movs	r3, r0
 8001368:	001a      	movs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	0018      	movs	r0, r3
 8001372:	f000 f805 	bl	8001380 <_check_error>
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b003      	add	sp, #12
 800137c:	bd90      	pop	{r4, r7, pc}
	...

08001380 <_check_error>:
    }
    
    _check_error(smbus);
}

int _check_error(SMBus *smbus) {
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    if (smbus->ret != HAL_OK) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7a1b      	ldrb	r3, [r3, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <_check_error+0x52>
        strcpy((char*)smbus->buf, "Err \r\n");
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3309      	adds	r3, #9
 8001394:	001a      	movs	r2, r3
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_check_error+0x5c>)
 8001398:	0010      	movs	r0, r2
 800139a:	0019      	movs	r1, r3
 800139c:	2307      	movs	r3, #7
 800139e:	001a      	movs	r2, r3
 80013a0:	f007 fc26 	bl	8008bf0 <memcpy>

        HAL_UART_Transmit(smbus->uart, smbus->buf, strlen((char*)smbus->buf), 1000);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685c      	ldr	r4, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3309      	adds	r3, #9
 80013ac:	001d      	movs	r5, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3309      	adds	r3, #9
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7fe fea6 	bl	8000104 <strlen>
 80013b8:	0003      	movs	r3, r0
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	23fa      	movs	r3, #250	; 0xfa
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	0029      	movs	r1, r5
 80013c2:	0020      	movs	r0, r4
 80013c4:	f006 f84c 	bl	8007460 <HAL_UART_Transmit>
        HAL_Delay(10);
 80013c8:	200a      	movs	r0, #10
 80013ca:	f000 fd37 	bl	8001e3c <HAL_Delay>
        return FALSE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <_check_error+0x54>
    }
    return TRUE;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bdb0      	pop	{r4, r5, r7, pc}
 80013dc:	08009478 	.word	0x08009478

080013e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_MspInit+0x4c>)
 80013e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_MspInit+0x4c>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	430a      	orrs	r2, r1
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	2201      	movs	r2, #1
 80013f8:	4013      	ands	r3, r2
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_MspInit+0x4c>)
 8001400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_MspInit+0x4c>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0549      	lsls	r1, r1, #21
 8001408:	430a      	orrs	r2, r1
 800140a:	63da      	str	r2, [r3, #60]	; 0x3c
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_MspInit+0x4c>)
 800140e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	055b      	lsls	r3, r3, #21
 8001414:	4013      	ands	r3, r2
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800141a:	23c0      	movs	r3, #192	; 0xc0
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	0018      	movs	r0, r3
 8001420:	f000 fd30 	bl	8001e84 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b08b      	sub	sp, #44	; 0x2c
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	2414      	movs	r4, #20
 800143a:	193b      	adds	r3, r7, r4
 800143c:	0018      	movs	r0, r3
 800143e:	2314      	movs	r3, #20
 8001440:	001a      	movs	r2, r3
 8001442:	2100      	movs	r1, #0
 8001444:	f007 fbdd 	bl	8008c02 <memset>
  if(hadc->Instance==ADC1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <HAL_ADC_MspInit+0x80>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d129      	bne.n	80014a6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_ADC_MspInit+0x84>)
 8001454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_ADC_MspInit+0x84>)
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0349      	lsls	r1, r1, #13
 800145c:	430a      	orrs	r2, r1
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_ADC_MspInit+0x84>)
 8001462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	035b      	lsls	r3, r3, #13
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_ADC_MspInit+0x84>)
 8001470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_ADC_MspInit+0x84>)
 8001474:	2101      	movs	r1, #1
 8001476:	430a      	orrs	r2, r1
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_ADC_MspInit+0x84>)
 800147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147e:	2201      	movs	r2, #1
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = THERMISTOR_1_Pin|THERMISTOR_2_Pin|THERMISTOR_0_Pin;
 8001486:	193b      	adds	r3, r7, r4
 8001488:	2238      	movs	r2, #56	; 0x38
 800148a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148c:	193b      	adds	r3, r7, r4
 800148e:	2203      	movs	r2, #3
 8001490:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	193b      	adds	r3, r7, r4
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	193a      	adds	r2, r7, r4
 800149a:	23a0      	movs	r3, #160	; 0xa0
 800149c:	05db      	lsls	r3, r3, #23
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f001 fdf3 	bl	800308c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b00b      	add	sp, #44	; 0x2c
 80014ac:	bd90      	pop	{r4, r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	40012400 	.word	0x40012400
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b08b      	sub	sp, #44	; 0x2c
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	2414      	movs	r4, #20
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	0018      	movs	r0, r3
 80014c6:	2314      	movs	r3, #20
 80014c8:	001a      	movs	r2, r3
 80014ca:	2100      	movs	r1, #0
 80014cc:	f007 fb99 	bl	8008c02 <memset>
  if(hi2c->Instance==I2C2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a30      	ldr	r2, [pc, #192]	; (8001598 <HAL_I2C_MspInit+0xe0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d15a      	bne.n	8001590 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <HAL_I2C_MspInit+0xe4>)
 80014dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014de:	4b2f      	ldr	r3, [pc, #188]	; (800159c <HAL_I2C_MspInit+0xe4>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <HAL_I2C_MspInit+0xe4>)
 80014e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ea:	2201      	movs	r2, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b2a      	ldr	r3, [pc, #168]	; (800159c <HAL_I2C_MspInit+0xe4>)
 80014f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <HAL_I2C_MspInit+0xe4>)
 80014f8:	2102      	movs	r1, #2
 80014fa:	430a      	orrs	r2, r1
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_I2C_MspInit+0xe4>)
 8001500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001502:	2202      	movs	r2, #2
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA7     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MUX_SCL_Pin;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001510:	193b      	adds	r3, r7, r4
 8001512:	2212      	movs	r2, #18
 8001514:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	193b      	adds	r3, r7, r4
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	193b      	adds	r3, r7, r4
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 8001522:	193b      	adds	r3, r7, r4
 8001524:	2208      	movs	r2, #8
 8001526:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MUX_SCL_GPIO_Port, &GPIO_InitStruct);
 8001528:	193a      	adds	r2, r7, r4
 800152a:	23a0      	movs	r3, #160	; 0xa0
 800152c:	05db      	lsls	r3, r3, #23
 800152e:	0011      	movs	r1, r2
 8001530:	0018      	movs	r0, r3
 8001532:	f001 fdab 	bl	800308c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MUX_SDA_Pin;
 8001536:	0021      	movs	r1, r4
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2280      	movs	r2, #128	; 0x80
 800153c:	01d2      	lsls	r2, r2, #7
 800153e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001540:	187b      	adds	r3, r7, r1
 8001542:	2212      	movs	r2, #18
 8001544:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2206      	movs	r2, #6
 8001556:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MUX_SDA_GPIO_Port, &GPIO_InitStruct);
 8001558:	187b      	adds	r3, r7, r1
 800155a:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <HAL_I2C_MspInit+0xe8>)
 800155c:	0019      	movs	r1, r3
 800155e:	0010      	movs	r0, r2
 8001560:	f001 fd94 	bl	800308c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_I2C_MspInit+0xe4>)
 8001566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_I2C_MspInit+0xe4>)
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	03c9      	lsls	r1, r1, #15
 800156e:	430a      	orrs	r2, r1
 8001570:	63da      	str	r2, [r3, #60]	; 0x3c
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_I2C_MspInit+0xe4>)
 8001574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	03db      	lsls	r3, r3, #15
 800157a:	4013      	ands	r3, r2
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_3_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2018      	movs	r0, #24
 8001586:	f001 fa1b 	bl	80029c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_3_IRQn);
 800158a:	2018      	movs	r0, #24
 800158c:	f001 fa2d 	bl	80029ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b00b      	add	sp, #44	; 0x2c
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	40005800 	.word	0x40005800
 800159c:	40021000 	.word	0x40021000
 80015a0:	50000400 	.word	0x50000400

080015a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a13      	ldr	r2, [pc, #76]	; (8001600 <HAL_TIM_PWM_MspInit+0x5c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10e      	bne.n	80015d4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_TIM_PWM_MspInit+0x60>)
 80015b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_TIM_PWM_MspInit+0x60>)
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	0109      	lsls	r1, r1, #4
 80015c0:	430a      	orrs	r2, r1
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <HAL_TIM_PWM_MspInit+0x60>)
 80015c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4013      	ands	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015d2:	e010      	b.n	80015f6 <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM3)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <HAL_TIM_PWM_MspInit+0x64>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10b      	bne.n	80015f6 <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_TIM_PWM_MspInit+0x60>)
 80015e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_TIM_PWM_MspInit+0x60>)
 80015e4:	2102      	movs	r1, #2
 80015e6:	430a      	orrs	r2, r1
 80015e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_TIM_PWM_MspInit+0x60>)
 80015ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ee:	2202      	movs	r2, #2
 80015f0:	4013      	ands	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b004      	add	sp, #16
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	40012c00 	.word	0x40012c00
 8001604:	40021000 	.word	0x40021000
 8001608:	40000400 	.word	0x40000400

0800160c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b08d      	sub	sp, #52	; 0x34
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	241c      	movs	r4, #28
 8001616:	193b      	adds	r3, r7, r4
 8001618:	0018      	movs	r0, r3
 800161a:	2314      	movs	r3, #20
 800161c:	001a      	movs	r2, r3
 800161e:	2100      	movs	r1, #0
 8001620:	f007 faef 	bl	8008c02 <memset>
  if(htim->Instance==TIM1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a4b      	ldr	r2, [pc, #300]	; (8001758 <HAL_TIM_MspPostInit+0x14c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d145      	bne.n	80016ba <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	4b4b      	ldr	r3, [pc, #300]	; (800175c <HAL_TIM_MspPostInit+0x150>)
 8001630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001632:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_TIM_MspPostInit+0x150>)
 8001634:	2101      	movs	r1, #1
 8001636:	430a      	orrs	r2, r1
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
 800163a:	4b48      	ldr	r3, [pc, #288]	; (800175c <HAL_TIM_MspPostInit+0x150>)
 800163c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163e:	2201      	movs	r2, #1
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b45      	ldr	r3, [pc, #276]	; (800175c <HAL_TIM_MspPostInit+0x150>)
 8001648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <HAL_TIM_MspPostInit+0x150>)
 800164c:	2102      	movs	r1, #2
 800164e:	430a      	orrs	r2, r1
 8001650:	635a      	str	r2, [r3, #52]	; 0x34
 8001652:	4b42      	ldr	r3, [pc, #264]	; (800175c <HAL_TIM_MspPostInit+0x150>)
 8001654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001656:	2202      	movs	r2, #2
 8001658:	4013      	ands	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_0_Pin;
 800165e:	193b      	adds	r3, r7, r4
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	0052      	lsls	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	193b      	adds	r3, r7, r4
 8001668:	2202      	movs	r2, #2
 800166a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	193b      	adds	r3, r7, r4
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	193b      	adds	r3, r7, r4
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001678:	193b      	adds	r3, r7, r4
 800167a:	2202      	movs	r2, #2
 800167c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_0_GPIO_Port, &GPIO_InitStruct);
 800167e:	193a      	adds	r2, r7, r4
 8001680:	23a0      	movs	r3, #160	; 0xa0
 8001682:	05db      	lsls	r3, r3, #23
 8001684:	0011      	movs	r1, r2
 8001686:	0018      	movs	r0, r3
 8001688:	f001 fd00 	bl	800308c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 800168c:	0021      	movs	r1, r4
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2208      	movs	r2, #8
 8001692:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2202      	movs	r2, #2
 8001698:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	2201      	movs	r2, #1
 80016aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	4a2c      	ldr	r2, [pc, #176]	; (8001760 <HAL_TIM_MspPostInit+0x154>)
 80016b0:	0019      	movs	r1, r3
 80016b2:	0010      	movs	r0, r2
 80016b4:	f001 fcea 	bl	800308c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016b8:	e049      	b.n	800174e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM3)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a29      	ldr	r2, [pc, #164]	; (8001764 <HAL_TIM_MspPostInit+0x158>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d144      	bne.n	800174e <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <HAL_TIM_MspPostInit+0x150>)
 80016c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_TIM_MspPostInit+0x150>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	430a      	orrs	r2, r1
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_TIM_MspPostInit+0x150>)
 80016d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d4:	2201      	movs	r2, #1
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <HAL_TIM_MspPostInit+0x150>)
 80016de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <HAL_TIM_MspPostInit+0x150>)
 80016e2:	2104      	movs	r1, #4
 80016e4:	430a      	orrs	r2, r1
 80016e6:	635a      	str	r2, [r3, #52]	; 0x34
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_TIM_MspPostInit+0x150>)
 80016ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ec:	2204      	movs	r2, #4
 80016ee:	4013      	ands	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HBRIDGE_PWM_Pin;
 80016f4:	241c      	movs	r4, #28
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	2240      	movs	r2, #64	; 0x40
 80016fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	2202      	movs	r2, #2
 8001700:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	193b      	adds	r3, r7, r4
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	193b      	adds	r3, r7, r4
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800170e:	193b      	adds	r3, r7, r4
 8001710:	2201      	movs	r2, #1
 8001712:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HBRIDGE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001714:	193a      	adds	r2, r7, r4
 8001716:	23a0      	movs	r3, #160	; 0xa0
 8001718:	05db      	lsls	r3, r3, #23
 800171a:	0011      	movs	r1, r2
 800171c:	0018      	movs	r0, r3
 800171e:	f001 fcb5 	bl	800308c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HBRIDGE_FWD_Pin;
 8001722:	0021      	movs	r1, r4
 8001724:	187b      	adds	r3, r7, r1
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	187b      	adds	r3, r7, r1
 800172c:	2202      	movs	r2, #2
 800172e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	187b      	adds	r3, r7, r1
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800173c:	187b      	adds	r3, r7, r1
 800173e:	2201      	movs	r2, #1
 8001740:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(HBRIDGE_FWD_GPIO_Port, &GPIO_InitStruct);
 8001742:	187b      	adds	r3, r7, r1
 8001744:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_TIM_MspPostInit+0x15c>)
 8001746:	0019      	movs	r1, r3
 8001748:	0010      	movs	r0, r2
 800174a:	f001 fc9f 	bl	800308c <HAL_GPIO_Init>
}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b00d      	add	sp, #52	; 0x34
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	40012c00 	.word	0x40012c00
 800175c:	40021000 	.word	0x40021000
 8001760:	50000400 	.word	0x50000400
 8001764:	40000400 	.word	0x40000400
 8001768:	50000800 	.word	0x50000800

0800176c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b08d      	sub	sp, #52	; 0x34
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	241c      	movs	r4, #28
 8001776:	193b      	adds	r3, r7, r4
 8001778:	0018      	movs	r0, r3
 800177a:	2314      	movs	r3, #20
 800177c:	001a      	movs	r2, r3
 800177e:	2100      	movs	r1, #0
 8001780:	f007 fa3f 	bl	8008c02 <memset>
  if(huart->Instance==USART1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a6c      	ldr	r2, [pc, #432]	; (800193c <HAL_UART_MspInit+0x1d0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d172      	bne.n	8001874 <HAL_UART_MspInit+0x108>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800178e:	4b6c      	ldr	r3, [pc, #432]	; (8001940 <HAL_UART_MspInit+0x1d4>)
 8001790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001792:	4b6b      	ldr	r3, [pc, #428]	; (8001940 <HAL_UART_MspInit+0x1d4>)
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	01c9      	lsls	r1, r1, #7
 8001798:	430a      	orrs	r2, r1
 800179a:	641a      	str	r2, [r3, #64]	; 0x40
 800179c:	4b68      	ldr	r3, [pc, #416]	; (8001940 <HAL_UART_MspInit+0x1d4>)
 800179e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	01db      	lsls	r3, r3, #7
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b65      	ldr	r3, [pc, #404]	; (8001940 <HAL_UART_MspInit+0x1d4>)
 80017ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ae:	4b64      	ldr	r3, [pc, #400]	; (8001940 <HAL_UART_MspInit+0x1d4>)
 80017b0:	2101      	movs	r1, #1
 80017b2:	430a      	orrs	r2, r1
 80017b4:	635a      	str	r2, [r3, #52]	; 0x34
 80017b6:	4b62      	ldr	r3, [pc, #392]	; (8001940 <HAL_UART_MspInit+0x1d4>)
 80017b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ba:	2201      	movs	r2, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11 [PA9]     ------> USART1_CTS
    */
    GPIO_InitStruct.Pin = JETSON_UART_TX_Pin|JETSON_UART_RX_Pin;
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	22c0      	movs	r2, #192	; 0xc0
 80017c6:	00d2      	lsls	r2, r2, #3
 80017c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	193b      	adds	r3, r7, r4
 80017cc:	2202      	movs	r2, #2
 80017ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	193b      	adds	r3, r7, r4
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d6:	193b      	adds	r3, r7, r4
 80017d8:	2202      	movs	r2, #2
 80017da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80017dc:	193b      	adds	r3, r7, r4
 80017de:	2201      	movs	r2, #1
 80017e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	193a      	adds	r2, r7, r4
 80017e4:	23a0      	movs	r3, #160	; 0xa0
 80017e6:	05db      	lsls	r3, r3, #23
 80017e8:	0011      	movs	r1, r2
 80017ea:	0018      	movs	r0, r3
 80017ec:	f001 fc4e 	bl	800308c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JETSON_UART_CTS_Pin;
 80017f0:	0021      	movs	r1, r4
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	2202      	movs	r2, #2
 80017fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	187b      	adds	r3, r7, r1
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	187b      	adds	r3, r7, r1
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800180c:	187b      	adds	r3, r7, r1
 800180e:	2201      	movs	r2, #1
 8001810:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(JETSON_UART_CTS_GPIO_Port, &GPIO_InitStruct);
 8001812:	187a      	adds	r2, r7, r1
 8001814:	23a0      	movs	r3, #160	; 0xa0
 8001816:	05db      	lsls	r3, r3, #23
 8001818:	0011      	movs	r1, r2
 800181a:	0018      	movs	r0, r3
 800181c:	f001 fc36 	bl	800308c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001820:	4b48      	ldr	r3, [pc, #288]	; (8001944 <HAL_UART_MspInit+0x1d8>)
 8001822:	4a49      	ldr	r2, [pc, #292]	; (8001948 <HAL_UART_MspInit+0x1dc>)
 8001824:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_UART_MspInit+0x1d8>)
 8001828:	2232      	movs	r2, #50	; 0x32
 800182a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800182c:	4b45      	ldr	r3, [pc, #276]	; (8001944 <HAL_UART_MspInit+0x1d8>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001832:	4b44      	ldr	r3, [pc, #272]	; (8001944 <HAL_UART_MspInit+0x1d8>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001838:	4b42      	ldr	r3, [pc, #264]	; (8001944 <HAL_UART_MspInit+0x1d8>)
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <HAL_UART_MspInit+0x1d8>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001844:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <HAL_UART_MspInit+0x1d8>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800184a:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <HAL_UART_MspInit+0x1d8>)
 800184c:	2200      	movs	r2, #0
 800184e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001850:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <HAL_UART_MspInit+0x1d8>)
 8001852:	2200      	movs	r2, #0
 8001854:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_UART_MspInit+0x1d8>)
 8001858:	0018      	movs	r0, r3
 800185a:	f001 f903 	bl	8002a64 <HAL_DMA_Init>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d001      	beq.n	8001866 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001862:	f7ff fbaf 	bl	8000fc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a36      	ldr	r2, [pc, #216]	; (8001944 <HAL_UART_MspInit+0x1d8>)
 800186a:	67da      	str	r2, [r3, #124]	; 0x7c
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <HAL_UART_MspInit+0x1d8>)
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001872:	e05e      	b.n	8001932 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a34      	ldr	r2, [pc, #208]	; (800194c <HAL_UART_MspInit+0x1e0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d159      	bne.n	8001932 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <HAL_UART_MspInit+0x1d4>)
 8001880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001882:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <HAL_UART_MspInit+0x1d4>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0289      	lsls	r1, r1, #10
 8001888:	430a      	orrs	r2, r1
 800188a:	63da      	str	r2, [r3, #60]	; 0x3c
 800188c:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <HAL_UART_MspInit+0x1d4>)
 800188e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_UART_MspInit+0x1d4>)
 800189c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_UART_MspInit+0x1d4>)
 80018a0:	2101      	movs	r1, #1
 80018a2:	430a      	orrs	r2, r1
 80018a4:	635a      	str	r2, [r3, #52]	; 0x34
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_UART_MspInit+0x1d4>)
 80018a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018aa:	2201      	movs	r2, #1
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80018b2:	211c      	movs	r1, #28
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	4a26      	ldr	r2, [pc, #152]	; (8001950 <HAL_UART_MspInit+0x1e4>)
 80018b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	187b      	adds	r3, r7, r1
 80018bc:	2202      	movs	r2, #2
 80018be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	187b      	adds	r3, r7, r1
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	2201      	movs	r2, #1
 80018d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	187a      	adds	r2, r7, r1
 80018d4:	23a0      	movs	r3, #160	; 0xa0
 80018d6:	05db      	lsls	r3, r3, #23
 80018d8:	0011      	movs	r1, r2
 80018da:	0018      	movs	r0, r3
 80018dc:	f001 fbd6 	bl	800308c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_UART_MspInit+0x1e8>)
 80018e2:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_UART_MspInit+0x1ec>)
 80018e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_UART_MspInit+0x1e8>)
 80018e8:	2234      	movs	r2, #52	; 0x34
 80018ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_UART_MspInit+0x1e8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_UART_MspInit+0x1e8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HAL_UART_MspInit+0x1e8>)
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_UART_MspInit+0x1e8>)
 8001900:	2200      	movs	r2, #0
 8001902:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <HAL_UART_MspInit+0x1e8>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_UART_MspInit+0x1e8>)
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <HAL_UART_MspInit+0x1e8>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_UART_MspInit+0x1e8>)
 8001918:	0018      	movs	r0, r3
 800191a:	f001 f8a3 	bl	8002a64 <HAL_DMA_Init>
 800191e:	1e03      	subs	r3, r0, #0
 8001920:	d001      	beq.n	8001926 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8001922:	f7ff fb4f 	bl	8000fc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_UART_MspInit+0x1e8>)
 800192a:	67da      	str	r2, [r3, #124]	; 0x7c
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_UART_MspInit+0x1e8>)
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	b00d      	add	sp, #52	; 0x34
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	40013800 	.word	0x40013800
 8001940:	40021000 	.word	0x40021000
 8001944:	2000020c 	.word	0x2000020c
 8001948:	40020008 	.word	0x40020008
 800194c:	40004400 	.word	0x40004400
 8001950:	00008004 	.word	0x00008004
 8001954:	2000009c 	.word	0x2000009c
 8001958:	4002001c 	.word	0x4002001c

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <NMI_Handler+0x4>

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 fa40 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <DMA1_Channel1_IRQHandler+0x14>)
 8001992:	0018      	movs	r0, r3
 8001994:	f001 fa00 	bl	8002d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	2000020c 	.word	0x2000020c

080019a4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80019aa:	0018      	movs	r0, r3
 80019ac:	f001 f9f4 	bl	8002d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	2000009c 	.word	0x2000009c

080019bc <I2C2_3_IRQHandler>:

/**
  * @brief This function handles I2C2, I2C3 Interrupt (combined with EXTI 24 and EXTI 22).
  */
void I2C2_3_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_3_IRQn 0 */

  /* USER CODE END I2C2_3_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <I2C2_3_IRQHandler+0x2c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	23e0      	movs	r3, #224	; 0xe0
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4013      	ands	r3, r2
 80019cc:	d004      	beq.n	80019d8 <I2C2_3_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <I2C2_3_IRQHandler+0x2c>)
 80019d0:	0018      	movs	r0, r3
 80019d2:	f002 f9b1 	bl	8003d38 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_3_IRQn 1 */

  /* USER CODE END I2C2_3_IRQn 1 */
}
 80019d6:	e003      	b.n	80019e0 <I2C2_3_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <I2C2_3_IRQHandler+0x2c>)
 80019da:	0018      	movs	r0, r3
 80019dc:	f002 f992 	bl	8003d04 <HAL_I2C_EV_IRQHandler>
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	200000fc 	.word	0x200000fc

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	18d3      	adds	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f007 f8b4 	bl	8008b88 <__errno>
 8001a20:	0003      	movs	r3, r0
 8001a22:	220c      	movs	r2, #12
 8001a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	425b      	negs	r3, r3
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	18d2      	adds	r2, r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <_sbrk+0x64>)
 8001a3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b006      	add	sp, #24
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20024000 	.word	0x20024000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	20000090 	.word	0x20000090
 8001a54:	20000460 	.word	0x20000460

08001a58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	46c0      	nop			; (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <get_decimal>:

uint8_t buf_triad[30];
SMBus *i2cBus;
Device *triad[3];

uint16_t get_decimal(uint8_t virtual_reg_l, uint8_t virtual_reg_h) {
 8001a62:	b590      	push	{r4, r7, lr}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	0002      	movs	r2, r0
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	1dbb      	adds	r3, r7, #6
 8001a70:	1c0a      	adds	r2, r1, #0
 8001a72:	701a      	strb	r2, [r3, #0]
	uint16_t high = virtual_read(virtual_reg_h) << 8;
 8001a74:	1dbb      	adds	r3, r7, #6
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f000 f85d 	bl	8001b38 <virtual_read>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	240e      	movs	r4, #14
 8001a84:	193b      	adds	r3, r7, r4
 8001a86:	0212      	lsls	r2, r2, #8
 8001a88:	801a      	strh	r2, [r3, #0]
	return high | (virtual_read(virtual_reg_l) & 0xFF);
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 f852 	bl	8001b38 <virtual_read>
 8001a94:	0003      	movs	r3, r0
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b29b      	uxth	r3, r3
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b005      	add	sp, #20
 8001aa6:	bd90      	pop	{r4, r7, pc}

08001aa8 <new_device>:

Device* new_device(uint8_t dev_register) {
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	0002      	movs	r2, r0
 8001ab0:	1dfb      	adds	r3, r7, #7
 8001ab2:	701a      	strb	r2, [r3, #0]
	Device* dev = malloc(sizeof(Device));
 8001ab4:	201c      	movs	r0, #28
 8001ab6:	f007 f891 	bl	8008bdc <malloc>
 8001aba:	0003      	movs	r3, r0
 8001abc:	613b      	str	r3, [r7, #16]
	dev->dev_register = dev_register;
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1dfa      	adds	r2, r7, #7
 8001ac2:	7812      	ldrb	r2, [r2, #0]
 8001ac4:	701a      	strb	r2, [r3, #0]

	uint8_t START_REG = 0x08; //RAW_VALUE_RGA_LOW;
 8001ac6:	230f      	movs	r3, #15
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	2208      	movs	r2, #8
 8001acc:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < CHANNELS; ++i) {
 8001ace:	2317      	movs	r3, #23
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	e024      	b.n	8001b22 <new_device+0x7a>
		dev->channels[i] = new_channel(START_REG + (2 * i), START_REG + (2 * i) + 1);
 8001ad8:	2117      	movs	r1, #23
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	18db      	adds	r3, r3, r3
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	240f      	movs	r4, #15
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	18d3      	adds	r3, r2, r3
 8001aea:	b2d8      	uxtb	r0, r3
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	18db      	adds	r3, r3, r3
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	18d3      	adds	r3, r2, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	000d      	movs	r5, r1
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	781c      	ldrb	r4, [r3, #0]
 8001b06:	0011      	movs	r1, r2
 8001b08:	f000 f8ca 	bl	8001ca0 <new_channel>
 8001b0c:	0001      	movs	r1, r0
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	00a3      	lsls	r3, r4, #2
 8001b12:	18d3      	adds	r3, r2, r3
 8001b14:	3304      	adds	r3, #4
 8001b16:	6019      	str	r1, [r3, #0]
	for (uint8_t i = 0; i < CHANNELS; ++i) {
 8001b18:	197b      	adds	r3, r7, r5
 8001b1a:	197a      	adds	r2, r7, r5
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	3201      	adds	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	2317      	movs	r3, #23
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d9d5      	bls.n	8001ad8 <new_device+0x30>
	}
	return dev;
 8001b2c:	693b      	ldr	r3, [r7, #16]
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b006      	add	sp, #24
 8001b34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b38 <virtual_read>:

uint8_t virtual_read(uint8_t v_reg) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	0002      	movs	r2, r0
 8001b40:	1dfb      	adds	r3, r7, #7
 8001b42:	701a      	strb	r2, [r3, #0]
	uint8_t status;
	uint8_t d;

	// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
	status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <virtual_read+0xc8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2149      	movs	r1, #73	; 0x49
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff fb51 	bl	80011f4 <read_byte_data>
 8001b52:	0002      	movs	r2, r0
 8001b54:	210f      	movs	r1, #15
 8001b56:	187b      	adds	r3, r7, r1
 8001b58:	701a      	strb	r2, [r3, #0]

	if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4013      	ands	r3, r2
 8001b62:	d00a      	beq.n	8001b7a <virtual_read+0x42>
		// d = nucleo_byte_read(I2C_AS72XX_SLAVE_READ_REG);
		d = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 8001b64:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <virtual_read+0xc8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	2149      	movs	r1, #73	; 0x49
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff fb41 	bl	80011f4 <read_byte_data>
 8001b72:	0002      	movs	r2, r0
 8001b74:	230e      	movs	r3, #14
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	701a      	strb	r2, [r3, #0]
	}

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <virtual_read+0xc8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2149      	movs	r1, #73	; 0x49
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7ff fb36 	bl	80011f4 <read_byte_data>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	701a      	strb	r2, [r3, #0]

		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d003      	beq.n	8001ba2 <virtual_read+0x6a>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 8001b9a:	2005      	movs	r0, #5
 8001b9c:	f000 f94e 	bl	8001e3c <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8001ba0:	e7eb      	b.n	8001b7a <virtual_read+0x42>
			break;
 8001ba2:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <virtual_read+0xc8>)
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	1dfb      	adds	r3, r7, #7
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2201      	movs	r2, #1
 8001bae:	2149      	movs	r1, #73	; 0x49
 8001bb0:	f7ff fb9a 	bl	80012e8 <write_byte_data>

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <virtual_read+0xc8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2149      	movs	r1, #73	; 0x49
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff fb19 	bl	80011f4 <read_byte_data>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	210f      	movs	r1, #15
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	701a      	strb	r2, [r3, #0]

		if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d103      	bne.n	8001bdc <virtual_read+0xa4>
			break;
		}
		HAL_Delay(5); //delay for 5 ms
 8001bd4:	2005      	movs	r0, #5
 8001bd6:	f000 f931 	bl	8001e3c <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8001bda:	e7eb      	b.n	8001bb4 <virtual_read+0x7c>
			break;
 8001bdc:	46c0      	nop			; (mov r8, r8)
	}

	// d = nucleo_byte_read( I2C_AS72XX_SLAVE_READ_REG);

	d = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <virtual_read+0xc8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2202      	movs	r2, #2
 8001be4:	2149      	movs	r1, #73	; 0x49
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff fb04 	bl	80011f4 <read_byte_data>
 8001bec:	0002      	movs	r2, r0
 8001bee:	210e      	movs	r1, #14
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	701a      	strb	r2, [r3, #0]

	return d;
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	781b      	ldrb	r3, [r3, #0]
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b004      	add	sp, #16
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000414 	.word	0x20000414

08001c04 <virtual_write>:


void virtual_write(uint8_t v_reg, uint8_t data) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	1dfb      	adds	r3, r7, #7
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	1dbb      	adds	r3, r7, #6
 8001c12:	1c0a      	adds	r2, r1, #0
 8001c14:	701a      	strb	r2, [r3, #0]
	uint8_t status;

	while(1) {
		// status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <virtual_write+0x98>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2149      	movs	r1, #73	; 0x49
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff fae8 	bl	80011f4 <read_byte_data>
 8001c24:	0002      	movs	r2, r0
 8001c26:	210f      	movs	r1, #15
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	701a      	strb	r2, [r3, #0]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2202      	movs	r2, #2
 8001c32:	4013      	ands	r3, r2
 8001c34:	d003      	beq.n	8001c3e <virtual_write+0x3a>
			break;
		}
		HAL_Delay(5);
 8001c36:	2005      	movs	r0, #5
 8001c38:	f000 f900 	bl	8001e3c <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8001c3c:	e7eb      	b.n	8001c16 <virtual_write+0x12>
			break;
 8001c3e:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <virtual_write+0x98>)
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	1dfb      	adds	r3, r7, #7
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2280      	movs	r2, #128	; 0x80
 8001c4a:	4252      	negs	r2, r2
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2201      	movs	r2, #1
 8001c52:	2149      	movs	r1, #73	; 0x49
 8001c54:	f7ff fb48 	bl	80012e8 <write_byte_data>

	while(1) {
//		status = nucleo_byte_read(I2C_AS72XX_SLAVE_STATUS_REG);
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <virtual_write+0x98>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2149      	movs	r1, #73	; 0x49
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff fac7 	bl	80011f4 <read_byte_data>
 8001c66:	0002      	movs	r2, r0
 8001c68:	210f      	movs	r1, #15
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	701a      	strb	r2, [r3, #0]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d003      	beq.n	8001c80 <virtual_write+0x7c>
			break;
		}
		HAL_Delay(5);
 8001c78:	2005      	movs	r0, #5
 8001c7a:	f000 f8df 	bl	8001e3c <HAL_Delay>
		status = read_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8001c7e:	e7eb      	b.n	8001c58 <virtual_write+0x54>
			break;
 8001c80:	46c0      	nop			; (mov r8, r8)
	}

	// nucleo_byte_write(I2C_AS72XX_SLAVE_WRITE_REG, data);
	write_byte_data(i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, data);
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <virtual_write+0x98>)
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	1dbb      	adds	r3, r7, #6
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2149      	movs	r1, #73	; 0x49
 8001c8e:	f7ff fb2b 	bl	80012e8 <write_byte_data>
}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b004      	add	sp, #16
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	20000414 	.word	0x20000414

08001ca0 <new_channel>:

Channel* new_channel(uint8_t lsb_r, uint8_t msb_r) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	1dfb      	adds	r3, r7, #7
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	1dbb      	adds	r3, r7, #6
 8001cae:	1c0a      	adds	r2, r1, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
	Channel* ch = malloc(sizeof(Channel));
 8001cb2:	2004      	movs	r0, #4
 8001cb4:	f006 ff92 	bl	8008bdc <malloc>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	60fb      	str	r3, [r7, #12]
	ch->color_data = 0;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	805a      	strh	r2, [r3, #2]
	ch->lsb_register = lsb_r;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1dfa      	adds	r2, r7, #7
 8001cc6:	7812      	ldrb	r2, [r2, #0]
 8001cc8:	701a      	strb	r2, [r3, #0]
	ch->msb_register = msb_r;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1dba      	adds	r2, r7, #6
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	705a      	strb	r2, [r3, #1]
	return ch;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b004      	add	sp, #16
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ce0:	f7ff feba 	bl	8001a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ce6:	490d      	ldr	r1, [pc, #52]	; (8001d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <LoopForever+0xe>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cec:	e002      	b.n	8001cf4 <LoopCopyDataInit>

08001cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf2:	3304      	adds	r3, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf8:	d3f9      	bcc.n	8001cee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	; (8001d28 <LoopForever+0x16>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d00:	e001      	b.n	8001d06 <LoopFillZerobss>

08001d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d04:	3204      	adds	r2, #4

08001d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d08:	d3fb      	bcc.n	8001d02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d0a:	f006 ff43 	bl	8008b94 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d0e:	f7fe fd69 	bl	80007e4 <main>

08001d12 <LoopForever>:

LoopForever:
  b LoopForever
 8001d12:	e7fe      	b.n	8001d12 <LoopForever>
  ldr   r0, =_estack
 8001d14:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d20:	08009600 	.word	0x08009600
  ldr r2, =_sbss
 8001d24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d28:	20000460 	.word	0x20000460

08001d2c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC1_COMP_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_Init+0x3c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_Init+0x3c>)
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	0049      	lsls	r1, r1, #1
 8001d46:	430a      	orrs	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f000 f810 	bl	8001d70 <HAL_InitTick>
 8001d50:	1e03      	subs	r3, r0, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d54:	1dfb      	adds	r3, r7, #7
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e001      	b.n	8001d60 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d5c:	f7ff fb40 	bl	80013e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d60:	1dfb      	adds	r3, r7, #7
 8001d62:	781b      	ldrb	r3, [r3, #0]
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40022000 	.word	0x40022000

08001d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d78:	230f      	movs	r3, #15
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_InitTick+0x88>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d02b      	beq.n	8001de0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001d88:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <HAL_InitTick+0x8c>)
 8001d8a:	681c      	ldr	r4, [r3, #0]
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_InitTick+0x88>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	0019      	movs	r1, r3
 8001d92:	23fa      	movs	r3, #250	; 0xfa
 8001d94:	0098      	lsls	r0, r3, #2
 8001d96:	f7fe f9c7 	bl	8000128 <__udivsi3>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	0020      	movs	r0, r4
 8001da0:	f7fe f9c2 	bl	8000128 <__udivsi3>
 8001da4:	0003      	movs	r3, r0
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 fe3f 	bl	8002a2a <HAL_SYSTICK_Config>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d112      	bne.n	8001dd6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d80a      	bhi.n	8001dcc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	2301      	movs	r3, #1
 8001dba:	425b      	negs	r3, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f000 fdfe 	bl	80029c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_InitTick+0x90>)
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e00d      	b.n	8001de8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001dcc:	230f      	movs	r3, #15
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e008      	b.n	8001de8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dd6:	230f      	movs	r3, #15
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e003      	b.n	8001de8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de0:	230f      	movs	r3, #15
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001de8:	230f      	movs	r3, #15
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	781b      	ldrb	r3, [r3, #0]
}
 8001dee:	0018      	movs	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b005      	add	sp, #20
 8001df4:	bd90      	pop	{r4, r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000004 	.word	0x20000004

08001e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_IncTick+0x1c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	001a      	movs	r2, r3
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_IncTick+0x20>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	18d2      	adds	r2, r2, r3
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_IncTick+0x20>)
 8001e16:	601a      	str	r2, [r3, #0]
}
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	20000008 	.word	0x20000008
 8001e24:	2000044c 	.word	0x2000044c

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b02      	ldr	r3, [pc, #8]	; (8001e38 <HAL_GetTick+0x10>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	2000044c 	.word	0x2000044c

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff fff0 	bl	8001e28 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3301      	adds	r3, #1
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	001a      	movs	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	189b      	adds	r3, r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	f7ff ffe0 	bl	8001e28 <HAL_GetTick>
 8001e68:	0002      	movs	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b004      	add	sp, #16
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	20000008 	.word	0x20000008

08001e84 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b002      	add	sp, #8
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	fffff9ff 	.word	0xfffff9ff

08001eb0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	601a      	str	r2, [r3, #0]
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	fe3fffff 	.word	0xfe3fffff

08001ed8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	23e0      	movs	r3, #224	; 0xe0
 8001ee6:	045b      	lsls	r3, r3, #17
 8001ee8:	4013      	ands	r3, r2
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	2104      	movs	r1, #4
 8001f06:	400a      	ands	r2, r1
 8001f08:	2107      	movs	r1, #7
 8001f0a:	4091      	lsls	r1, r2
 8001f0c:	000a      	movs	r2, r1
 8001f0e:	43d2      	mvns	r2, r2
 8001f10:	401a      	ands	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2104      	movs	r1, #4
 8001f16:	400b      	ands	r3, r1
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4099      	lsls	r1, r3
 8001f1c:	000b      	movs	r3, r1
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b004      	add	sp, #16
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	211f      	movs	r1, #31
 8001f40:	400a      	ands	r2, r1
 8001f42:	210f      	movs	r1, #15
 8001f44:	4091      	lsls	r1, r2
 8001f46:	000a      	movs	r2, r1
 8001f48:	43d2      	mvns	r2, r2
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0e9b      	lsrs	r3, r3, #26
 8001f50:	210f      	movs	r1, #15
 8001f52:	4019      	ands	r1, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	201f      	movs	r0, #31
 8001f58:	4003      	ands	r3, r0
 8001f5a:	4099      	lsls	r1, r3
 8001f5c:	000b      	movs	r3, r1
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b004      	add	sp, #16
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	035b      	lsls	r3, r3, #13
 8001f7e:	0b5b      	lsrs	r3, r3, #13
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b002      	add	sp, #8
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	0352      	lsls	r2, r2, #13
 8001fa0:	0b52      	lsrs	r2, r2, #13
 8001fa2:	43d2      	mvns	r2, r2
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b002      	add	sp, #8
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	0212      	lsls	r2, r2, #8
 8001fc8:	43d2      	mvns	r2, r2
 8001fca:	401a      	ands	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	4904      	ldr	r1, [pc, #16]	; (8001fe8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b004      	add	sp, #16
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	07ffff00 	.word	0x07ffff00

08001fec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a05      	ldr	r2, [pc, #20]	; (8002010 <LL_ADC_EnableInternalRegulator+0x24>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	0552      	lsls	r2, r2, #21
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	6fffffe8 	.word	0x6fffffe8

08002014 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	055b      	lsls	r3, r3, #21
 8002024:	401a      	ands	r2, r3
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	055b      	lsls	r3, r3, #21
 800202a:	429a      	cmp	r2, r3
 800202c:	d101      	bne.n	8002032 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002032:	2300      	movs	r3, #0
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}

0800203c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2201      	movs	r2, #1
 800204a:	4013      	ands	r3, r2
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <LL_ADC_IsEnabled+0x18>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <LL_ADC_IsEnabled+0x1a>
 8002054:	2300      	movs	r3, #0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}

0800205e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2204      	movs	r2, #4
 800206c:	4013      	ands	r3, r2
 800206e:	2b04      	cmp	r3, #4
 8002070:	d101      	bne.n	8002076 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002076:	2300      	movs	r3, #0
}
 8002078:	0018      	movs	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002088:	231f      	movs	r3, #31
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1b1      	b.n	800240a <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10a      	bne.n	80020c4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff f9bd 	bl	8001430 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2254      	movs	r2, #84	; 0x54
 80020c0:	2100      	movs	r1, #0
 80020c2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff ffa3 	bl	8002014 <LL_ADC_IsInternalRegulatorEnabled>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d115      	bne.n	80020fe <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7ff ff88 	bl	8001fec <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020dc:	4bcd      	ldr	r3, [pc, #820]	; (8002414 <HAL_ADC_Init+0x394>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	49cd      	ldr	r1, [pc, #820]	; (8002418 <HAL_ADC_Init+0x398>)
 80020e2:	0018      	movs	r0, r3
 80020e4:	f7fe f820 	bl	8000128 <__udivsi3>
 80020e8:	0003      	movs	r3, r0
 80020ea:	3301      	adds	r3, #1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020f0:	e002      	b.n	80020f8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f9      	bne.n	80020f2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff ff86 	bl	8002014 <LL_ADC_IsInternalRegulatorEnabled>
 8002108:	1e03      	subs	r3, r0, #0
 800210a:	d10f      	bne.n	800212c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	2210      	movs	r2, #16
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	2201      	movs	r2, #1
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002124:	231f      	movs	r3, #31
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff ff94 	bl	800205e <LL_ADC_REG_IsConversionOngoing>
 8002136:	0003      	movs	r3, r0
 8002138:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	2210      	movs	r2, #16
 8002140:	4013      	ands	r3, r2
 8002142:	d000      	beq.n	8002146 <HAL_ADC_Init+0xc6>
 8002144:	e154      	b.n	80023f0 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d000      	beq.n	800214e <HAL_ADC_Init+0xce>
 800214c:	e150      	b.n	80023f0 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	4ab2      	ldr	r2, [pc, #712]	; (800241c <HAL_ADC_Init+0x39c>)
 8002154:	4013      	ands	r3, r2
 8002156:	2202      	movs	r2, #2
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0018      	movs	r0, r3
 8002164:	f7ff ff6a 	bl	800203c <LL_ADC_IsEnabled>
 8002168:	1e03      	subs	r3, r0, #0
 800216a:	d156      	bne.n	800221a <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2218      	movs	r2, #24
 8002174:	4393      	bics	r3, r2
 8002176:	0019      	movs	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	0f9b      	lsrs	r3, r3, #30
 800218a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002190:	4313      	orrs	r3, r2
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	223c      	movs	r2, #60	; 0x3c
 800219c:	5c9b      	ldrb	r3, [r3, r2]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d111      	bne.n	80021c6 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0f9b      	lsrs	r3, r3, #30
 80021a8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021ae:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80021b4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80021ba:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	2201      	movs	r2, #1
 80021c2:	4313      	orrs	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	4a94      	ldr	r2, [pc, #592]	; (8002420 <HAL_ADC_Init+0x3a0>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	430a      	orrs	r2, r1
 80021da:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	23c0      	movs	r3, #192	; 0xc0
 80021e2:	061b      	lsls	r3, r3, #24
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d018      	beq.n	800221a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	05db      	lsls	r3, r3, #23
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d012      	beq.n	800221a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	061b      	lsls	r3, r3, #24
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d00c      	beq.n	800221a <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002200:	4b88      	ldr	r3, [pc, #544]	; (8002424 <HAL_ADC_Init+0x3a4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a88      	ldr	r2, [pc, #544]	; (8002428 <HAL_ADC_Init+0x3a8>)
 8002206:	4013      	ands	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	23f0      	movs	r3, #240	; 0xf0
 8002210:	039b      	lsls	r3, r3, #14
 8002212:	401a      	ands	r2, r3
 8002214:	4b83      	ldr	r3, [pc, #524]	; (8002424 <HAL_ADC_Init+0x3a4>)
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7e1b      	ldrb	r3, [r3, #24]
 800221e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7e5b      	ldrb	r3, [r3, #25]
 8002224:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002226:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	7e9b      	ldrb	r3, [r3, #26]
 800222c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800222e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_ADC_Init+0x1be>
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	015b      	lsls	r3, r3, #5
 800223c:	e000      	b.n	8002240 <HAL_ADC_Init+0x1c0>
 800223e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002240:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002246:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	da04      	bge.n	800225a <HAL_ADC_Init+0x1da>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	e001      	b.n	800225e <HAL_ADC_Init+0x1de>
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800225e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	5c5b      	ldrb	r3, [r3, r1]
 8002266:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002268:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	5c9b      	ldrb	r3, [r3, r2]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d115      	bne.n	80022a6 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7e9b      	ldrb	r3, [r3, #26]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	0252      	lsls	r2, r2, #9
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	e00b      	b.n	80022a6 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	2220      	movs	r2, #32
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	2201      	movs	r2, #1
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b2:	23e0      	movs	r3, #224	; 0xe0
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80022bc:	4313      	orrs	r3, r2
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4a58      	ldr	r2, [pc, #352]	; (800242c <HAL_ADC_Init+0x3ac>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	4a53      	ldr	r2, [pc, #332]	; (8002430 <HAL_ADC_Init+0x3b0>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	0019      	movs	r1, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	001a      	movs	r2, r3
 80022fa:	2100      	movs	r1, #0
 80022fc:	f7ff fdf9 	bl	8001ef2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	494a      	ldr	r1, [pc, #296]	; (8002434 <HAL_ADC_Init+0x3b4>)
 800230a:	001a      	movs	r2, r3
 800230c:	f7ff fdf1 	bl	8001ef2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2110      	movs	r1, #16
 8002324:	4249      	negs	r1, r1
 8002326:	430a      	orrs	r2, r1
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
 800232a:	e03a      	b.n	80023a2 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	039b      	lsls	r3, r3, #14
 8002334:	429a      	cmp	r2, r3
 8002336:	d134      	bne.n	80023a2 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	e00c      	b.n	8002358 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	40da      	lsrs	r2, r3
 8002348:	0013      	movs	r3, r2
 800234a:	220f      	movs	r2, #15
 800234c:	4013      	ands	r3, r2
 800234e:	2b0f      	cmp	r3, #15
 8002350:	d006      	beq.n	8002360 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	3301      	adds	r3, #1
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b07      	cmp	r3, #7
 800235c:	d9ef      	bls.n	800233e <HAL_ADC_Init+0x2be>
 800235e:	e000      	b.n	8002362 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002360:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d109      	bne.n	800237c <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2110      	movs	r1, #16
 8002374:	4249      	negs	r1, r1
 8002376:	430a      	orrs	r2, r1
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
 800237a:	e012      	b.n	80023a2 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	3b01      	subs	r3, #1
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	221c      	movs	r2, #28
 800238c:	4013      	ands	r3, r2
 800238e:	2210      	movs	r2, #16
 8002390:	4252      	negs	r2, r2
 8002392:	409a      	lsls	r2, r3
 8002394:	0011      	movs	r1, r2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a23      	ldr	r2, [pc, #140]	; (8002438 <HAL_ADC_Init+0x3b8>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d10b      	bne.n	80023ca <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	2203      	movs	r2, #3
 80023be:	4393      	bics	r3, r2
 80023c0:	2201      	movs	r2, #1
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80023c8:	e01c      	b.n	8002404 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	2212      	movs	r2, #18
 80023d0:	4393      	bics	r3, r2
 80023d2:	2210      	movs	r2, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	2201      	movs	r2, #1
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80023e6:	231f      	movs	r3, #31
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80023ee:	e009      	b.n	8002404 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f4:	2210      	movs	r2, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023fc:	231f      	movs	r3, #31
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002404:	231f      	movs	r3, #31
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	781b      	ldrb	r3, [r3, #0]
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b008      	add	sp, #32
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	20000000 	.word	0x20000000
 8002418:	00030d40 	.word	0x00030d40
 800241c:	fffffefd 	.word	0xfffffefd
 8002420:	1ffffc02 	.word	0x1ffffc02
 8002424:	40012708 	.word	0x40012708
 8002428:	ffc3ffff 	.word	0xffc3ffff
 800242c:	fffe0219 	.word	0xfffe0219
 8002430:	dffffc02 	.word	0xdffffc02
 8002434:	07ffff04 	.word	0x07ffff04
 8002438:	833fffe7 	.word	0x833fffe7

0800243c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002446:	2317      	movs	r3, #23
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2254      	movs	r2, #84	; 0x54
 8002456:	5c9b      	ldrb	r3, [r3, r2]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x24>
 800245c:	2302      	movs	r3, #2
 800245e:	e1c0      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x3a6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2254      	movs	r2, #84	; 0x54
 8002464:	2101      	movs	r1, #1
 8002466:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0018      	movs	r0, r3
 800246e:	f7ff fdf6 	bl	800205e <LL_ADC_REG_IsConversionOngoing>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d000      	beq.n	8002478 <HAL_ADC_ConfigChannel+0x3c>
 8002476:	e1a3      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d100      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x46>
 8002480:	e143      	b.n	800270a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	061b      	lsls	r3, r3, #24
 800248a:	429a      	cmp	r2, r3
 800248c:	d004      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002492:	4ac1      	ldr	r2, [pc, #772]	; (8002798 <HAL_ADC_ConfigChannel+0x35c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d108      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0019      	movs	r1, r3
 80024a2:	0010      	movs	r0, r2
 80024a4:	f7ff fd62 	bl	8001f6c <LL_ADC_REG_SetSequencerChAdd>
 80024a8:	e0c9      	b.n	800263e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	211f      	movs	r1, #31
 80024b4:	400b      	ands	r3, r1
 80024b6:	210f      	movs	r1, #15
 80024b8:	4099      	lsls	r1, r3
 80024ba:	000b      	movs	r3, r1
 80024bc:	43db      	mvns	r3, r3
 80024be:	4013      	ands	r3, r2
 80024c0:	0019      	movs	r1, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	035b      	lsls	r3, r3, #13
 80024c8:	0b5b      	lsrs	r3, r3, #13
 80024ca:	d105      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x9c>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	221f      	movs	r2, #31
 80024d4:	4013      	ands	r3, r2
 80024d6:	e098      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2201      	movs	r2, #1
 80024de:	4013      	ands	r3, r2
 80024e0:	d000      	beq.n	80024e4 <HAL_ADC_ConfigChannel+0xa8>
 80024e2:	e091      	b.n	8002608 <HAL_ADC_ConfigChannel+0x1cc>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2202      	movs	r2, #2
 80024ea:	4013      	ands	r3, r2
 80024ec:	d000      	beq.n	80024f0 <HAL_ADC_ConfigChannel+0xb4>
 80024ee:	e089      	b.n	8002604 <HAL_ADC_ConfigChannel+0x1c8>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2204      	movs	r2, #4
 80024f6:	4013      	ands	r3, r2
 80024f8:	d000      	beq.n	80024fc <HAL_ADC_ConfigChannel+0xc0>
 80024fa:	e081      	b.n	8002600 <HAL_ADC_ConfigChannel+0x1c4>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2208      	movs	r2, #8
 8002502:	4013      	ands	r3, r2
 8002504:	d000      	beq.n	8002508 <HAL_ADC_ConfigChannel+0xcc>
 8002506:	e079      	b.n	80025fc <HAL_ADC_ConfigChannel+0x1c0>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2210      	movs	r2, #16
 800250e:	4013      	ands	r3, r2
 8002510:	d000      	beq.n	8002514 <HAL_ADC_ConfigChannel+0xd8>
 8002512:	e071      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x1bc>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2220      	movs	r2, #32
 800251a:	4013      	ands	r3, r2
 800251c:	d000      	beq.n	8002520 <HAL_ADC_ConfigChannel+0xe4>
 800251e:	e069      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x1b8>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2240      	movs	r2, #64	; 0x40
 8002526:	4013      	ands	r3, r2
 8002528:	d000      	beq.n	800252c <HAL_ADC_ConfigChannel+0xf0>
 800252a:	e061      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x1b4>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2280      	movs	r2, #128	; 0x80
 8002532:	4013      	ands	r3, r2
 8002534:	d000      	beq.n	8002538 <HAL_ADC_ConfigChannel+0xfc>
 8002536:	e059      	b.n	80025ec <HAL_ADC_ConfigChannel+0x1b0>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4013      	ands	r3, r2
 8002542:	d151      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x1ac>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d149      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1a8>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4013      	ands	r3, r2
 800255a:	d141      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1a4>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	4013      	ands	r3, r2
 8002566:	d139      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1a0>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	015b      	lsls	r3, r3, #5
 8002570:	4013      	ands	r3, r2
 8002572:	d131      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x19c>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	019b      	lsls	r3, r3, #6
 800257c:	4013      	ands	r3, r2
 800257e:	d129      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x198>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	01db      	lsls	r3, r3, #7
 8002588:	4013      	ands	r3, r2
 800258a:	d121      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x194>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	4013      	ands	r3, r2
 8002596:	d119      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x190>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	025b      	lsls	r3, r3, #9
 80025a0:	4013      	ands	r3, r2
 80025a2:	d111      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x18c>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	029b      	lsls	r3, r3, #10
 80025ac:	4013      	ands	r3, r2
 80025ae:	d109      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x188>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	02db      	lsls	r3, r3, #11
 80025b8:	4013      	ands	r3, r2
 80025ba:	d001      	beq.n	80025c0 <HAL_ADC_ConfigChannel+0x184>
 80025bc:	2312      	movs	r3, #18
 80025be:	e024      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025c0:	2300      	movs	r3, #0
 80025c2:	e022      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025c4:	2311      	movs	r3, #17
 80025c6:	e020      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025c8:	2310      	movs	r3, #16
 80025ca:	e01e      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025cc:	230f      	movs	r3, #15
 80025ce:	e01c      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025d0:	230e      	movs	r3, #14
 80025d2:	e01a      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025d4:	230d      	movs	r3, #13
 80025d6:	e018      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025d8:	230c      	movs	r3, #12
 80025da:	e016      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025dc:	230b      	movs	r3, #11
 80025de:	e014      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025e0:	230a      	movs	r3, #10
 80025e2:	e012      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025e4:	2309      	movs	r3, #9
 80025e6:	e010      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025e8:	2308      	movs	r3, #8
 80025ea:	e00e      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025ec:	2307      	movs	r3, #7
 80025ee:	e00c      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025f0:	2306      	movs	r3, #6
 80025f2:	e00a      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025f4:	2305      	movs	r3, #5
 80025f6:	e008      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025f8:	2304      	movs	r3, #4
 80025fa:	e006      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 80025fc:	2303      	movs	r3, #3
 80025fe:	e004      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 8002600:	2302      	movs	r3, #2
 8002602:	e002      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_ADC_ConfigChannel+0x1ce>
 8002608:	2300      	movs	r3, #0
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	6852      	ldr	r2, [r2, #4]
 800260e:	201f      	movs	r0, #31
 8002610:	4002      	ands	r2, r0
 8002612:	4093      	lsls	r3, r2
 8002614:	000a      	movs	r2, r1
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	429a      	cmp	r2, r3
 800262a:	d808      	bhi.n	800263e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	001a      	movs	r2, r3
 800263a:	f7ff fc77 	bl	8001f2c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	001a      	movs	r2, r3
 800264c:	f7ff fcb2 	bl	8001fb4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	db00      	blt.n	800265a <HAL_ADC_ConfigChannel+0x21e>
 8002658:	e0bc      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800265a:	4b50      	ldr	r3, [pc, #320]	; (800279c <HAL_ADC_ConfigChannel+0x360>)
 800265c:	0018      	movs	r0, r3
 800265e:	f7ff fc3b 	bl	8001ed8 <LL_ADC_GetCommonPathInternalCh>
 8002662:	0003      	movs	r3, r0
 8002664:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a4d      	ldr	r2, [pc, #308]	; (80027a0 <HAL_ADC_ConfigChannel+0x364>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d122      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	041b      	lsls	r3, r3, #16
 8002676:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002678:	d11d      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	0412      	lsls	r2, r2, #16
 8002680:	4313      	orrs	r3, r2
 8002682:	4a46      	ldr	r2, [pc, #280]	; (800279c <HAL_ADC_ConfigChannel+0x360>)
 8002684:	0019      	movs	r1, r3
 8002686:	0010      	movs	r0, r2
 8002688:	f7ff fc12 	bl	8001eb0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800268c:	4b45      	ldr	r3, [pc, #276]	; (80027a4 <HAL_ADC_ConfigChannel+0x368>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4945      	ldr	r1, [pc, #276]	; (80027a8 <HAL_ADC_ConfigChannel+0x36c>)
 8002692:	0018      	movs	r0, r3
 8002694:	f7fd fd48 	bl	8000128 <__udivsi3>
 8002698:	0003      	movs	r3, r0
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	0013      	movs	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	189b      	adds	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026a6:	e002      	b.n	80026ae <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f9      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026b4:	e08e      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3c      	ldr	r2, [pc, #240]	; (80027ac <HAL_ADC_ConfigChannel+0x370>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d10e      	bne.n	80026de <HAL_ADC_ConfigChannel+0x2a2>
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	045b      	lsls	r3, r3, #17
 80026c6:	4013      	ands	r3, r2
 80026c8:	d109      	bne.n	80026de <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	2280      	movs	r2, #128	; 0x80
 80026ce:	0452      	lsls	r2, r2, #17
 80026d0:	4313      	orrs	r3, r2
 80026d2:	4a32      	ldr	r2, [pc, #200]	; (800279c <HAL_ADC_ConfigChannel+0x360>)
 80026d4:	0019      	movs	r1, r3
 80026d6:	0010      	movs	r0, r2
 80026d8:	f7ff fbea 	bl	8001eb0 <LL_ADC_SetCommonPathInternalCh>
 80026dc:	e07a      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a33      	ldr	r2, [pc, #204]	; (80027b0 <HAL_ADC_ConfigChannel+0x374>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d000      	beq.n	80026ea <HAL_ADC_ConfigChannel+0x2ae>
 80026e8:	e074      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	03db      	lsls	r3, r3, #15
 80026f0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80026f2:	d000      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x2ba>
 80026f4:	e06e      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	03d2      	lsls	r2, r2, #15
 80026fc:	4313      	orrs	r3, r2
 80026fe:	4a27      	ldr	r2, [pc, #156]	; (800279c <HAL_ADC_ConfigChannel+0x360>)
 8002700:	0019      	movs	r1, r3
 8002702:	0010      	movs	r0, r2
 8002704:	f7ff fbd4 	bl	8001eb0 <LL_ADC_SetCommonPathInternalCh>
 8002708:	e064      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	429a      	cmp	r2, r3
 8002714:	d004      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800271a:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <HAL_ADC_ConfigChannel+0x35c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d107      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0019      	movs	r1, r3
 800272a:	0010      	movs	r0, r2
 800272c:	f7ff fc2f 	bl	8001f8e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	da4d      	bge.n	80027d4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002738:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_ADC_ConfigChannel+0x360>)
 800273a:	0018      	movs	r0, r3
 800273c:	f7ff fbcc 	bl	8001ed8 <LL_ADC_GetCommonPathInternalCh>
 8002740:	0003      	movs	r3, r0
 8002742:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <HAL_ADC_ConfigChannel+0x364>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d108      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_ADC_ConfigChannel+0x378>)
 8002752:	4013      	ands	r3, r2
 8002754:	4a11      	ldr	r2, [pc, #68]	; (800279c <HAL_ADC_ConfigChannel+0x360>)
 8002756:	0019      	movs	r1, r3
 8002758:	0010      	movs	r0, r2
 800275a:	f7ff fba9 	bl	8001eb0 <LL_ADC_SetCommonPathInternalCh>
 800275e:	e039      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a11      	ldr	r2, [pc, #68]	; (80027ac <HAL_ADC_ConfigChannel+0x370>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d108      	bne.n	800277c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <HAL_ADC_ConfigChannel+0x37c>)
 800276e:	4013      	ands	r3, r2
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <HAL_ADC_ConfigChannel+0x360>)
 8002772:	0019      	movs	r1, r3
 8002774:	0010      	movs	r0, r2
 8002776:	f7ff fb9b 	bl	8001eb0 <LL_ADC_SetCommonPathInternalCh>
 800277a:	e02b      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0b      	ldr	r2, [pc, #44]	; (80027b0 <HAL_ADC_ConfigChannel+0x374>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d126      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <HAL_ADC_ConfigChannel+0x380>)
 800278a:	4013      	ands	r3, r2
 800278c:	4a03      	ldr	r2, [pc, #12]	; (800279c <HAL_ADC_ConfigChannel+0x360>)
 800278e:	0019      	movs	r1, r3
 8002790:	0010      	movs	r0, r2
 8002792:	f7ff fb8d 	bl	8001eb0 <LL_ADC_SetCommonPathInternalCh>
 8002796:	e01d      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x398>
 8002798:	80000004 	.word	0x80000004
 800279c:	40012708 	.word	0x40012708
 80027a0:	b0001000 	.word	0xb0001000
 80027a4:	20000000 	.word	0x20000000
 80027a8:	00030d40 	.word	0x00030d40
 80027ac:	b8004000 	.word	0xb8004000
 80027b0:	b4002000 	.word	0xb4002000
 80027b4:	ff7fffff 	.word	0xff7fffff
 80027b8:	feffffff 	.word	0xfeffffff
 80027bc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	2220      	movs	r2, #32
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027cc:	2317      	movs	r3, #23
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2254      	movs	r2, #84	; 0x54
 80027d8:	2100      	movs	r1, #0
 80027da:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80027dc:	2317      	movs	r3, #23
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	781b      	ldrb	r3, [r3, #0]
}
 80027e2:	0018      	movs	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b006      	add	sp, #24
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)

080027ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	0002      	movs	r2, r0
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027f8:	1dfb      	adds	r3, r7, #7
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b7f      	cmp	r3, #127	; 0x7f
 80027fe:	d809      	bhi.n	8002814 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002800:	1dfb      	adds	r3, r7, #7
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	001a      	movs	r2, r3
 8002806:	231f      	movs	r3, #31
 8002808:	401a      	ands	r2, r3
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <__NVIC_EnableIRQ+0x30>)
 800280c:	2101      	movs	r1, #1
 800280e:	4091      	lsls	r1, r2
 8002810:	000a      	movs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}
 800281c:	e000e100 	.word	0xe000e100

08002820 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	0002      	movs	r2, r0
 8002828:	1dfb      	adds	r3, r7, #7
 800282a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800282c:	1dfb      	adds	r3, r7, #7
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b7f      	cmp	r3, #127	; 0x7f
 8002832:	d810      	bhi.n	8002856 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002834:	1dfb      	adds	r3, r7, #7
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	001a      	movs	r2, r3
 800283a:	231f      	movs	r3, #31
 800283c:	4013      	ands	r3, r2
 800283e:	4908      	ldr	r1, [pc, #32]	; (8002860 <__NVIC_DisableIRQ+0x40>)
 8002840:	2201      	movs	r2, #1
 8002842:	409a      	lsls	r2, r3
 8002844:	0013      	movs	r3, r2
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800284a:	f3bf 8f4f 	dsb	sy
}
 800284e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002850:	f3bf 8f6f 	isb	sy
}
 8002854:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	46bd      	mov	sp, r7
 800285a:	b002      	add	sp, #8
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	0002      	movs	r2, r0
 800286c:	1dfb      	adds	r3, r7, #7
 800286e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002870:	1dfb      	adds	r3, r7, #7
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b7f      	cmp	r3, #127	; 0x7f
 8002876:	d80a      	bhi.n	800288e <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002878:	1dfb      	adds	r3, r7, #7
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	001a      	movs	r2, r3
 800287e:	231f      	movs	r3, #31
 8002880:	4013      	ands	r3, r2
 8002882:	4905      	ldr	r1, [pc, #20]	; (8002898 <__NVIC_ClearPendingIRQ+0x34>)
 8002884:	2201      	movs	r2, #1
 8002886:	409a      	lsls	r2, r3
 8002888:	23c0      	movs	r3, #192	; 0xc0
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	50ca      	str	r2, [r1, r3]
  }
}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b002      	add	sp, #8
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	e000e100 	.word	0xe000e100

0800289c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	0002      	movs	r2, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028aa:	1dfb      	adds	r3, r7, #7
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b7f      	cmp	r3, #127	; 0x7f
 80028b0:	d828      	bhi.n	8002904 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028b2:	4a2f      	ldr	r2, [pc, #188]	; (8002970 <__NVIC_SetPriority+0xd4>)
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b25b      	sxtb	r3, r3
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	33c0      	adds	r3, #192	; 0xc0
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	589b      	ldr	r3, [r3, r2]
 80028c2:	1dfa      	adds	r2, r7, #7
 80028c4:	7812      	ldrb	r2, [r2, #0]
 80028c6:	0011      	movs	r1, r2
 80028c8:	2203      	movs	r2, #3
 80028ca:	400a      	ands	r2, r1
 80028cc:	00d2      	lsls	r2, r2, #3
 80028ce:	21ff      	movs	r1, #255	; 0xff
 80028d0:	4091      	lsls	r1, r2
 80028d2:	000a      	movs	r2, r1
 80028d4:	43d2      	mvns	r2, r2
 80028d6:	401a      	ands	r2, r3
 80028d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	019b      	lsls	r3, r3, #6
 80028de:	22ff      	movs	r2, #255	; 0xff
 80028e0:	401a      	ands	r2, r3
 80028e2:	1dfb      	adds	r3, r7, #7
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	0018      	movs	r0, r3
 80028e8:	2303      	movs	r3, #3
 80028ea:	4003      	ands	r3, r0
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028f0:	481f      	ldr	r0, [pc, #124]	; (8002970 <__NVIC_SetPriority+0xd4>)
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b25b      	sxtb	r3, r3
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	430a      	orrs	r2, r1
 80028fc:	33c0      	adds	r3, #192	; 0xc0
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002902:	e031      	b.n	8002968 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <__NVIC_SetPriority+0xd8>)
 8002906:	1dfb      	adds	r3, r7, #7
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	0019      	movs	r1, r3
 800290c:	230f      	movs	r3, #15
 800290e:	400b      	ands	r3, r1
 8002910:	3b08      	subs	r3, #8
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3306      	adds	r3, #6
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	18d3      	adds	r3, r2, r3
 800291a:	3304      	adds	r3, #4
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	1dfa      	adds	r2, r7, #7
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	0011      	movs	r1, r2
 8002924:	2203      	movs	r2, #3
 8002926:	400a      	ands	r2, r1
 8002928:	00d2      	lsls	r2, r2, #3
 800292a:	21ff      	movs	r1, #255	; 0xff
 800292c:	4091      	lsls	r1, r2
 800292e:	000a      	movs	r2, r1
 8002930:	43d2      	mvns	r2, r2
 8002932:	401a      	ands	r2, r3
 8002934:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	22ff      	movs	r2, #255	; 0xff
 800293c:	401a      	ands	r2, r3
 800293e:	1dfb      	adds	r3, r7, #7
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	0018      	movs	r0, r3
 8002944:	2303      	movs	r3, #3
 8002946:	4003      	ands	r3, r0
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800294c:	4809      	ldr	r0, [pc, #36]	; (8002974 <__NVIC_SetPriority+0xd8>)
 800294e:	1dfb      	adds	r3, r7, #7
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	001c      	movs	r4, r3
 8002954:	230f      	movs	r3, #15
 8002956:	4023      	ands	r3, r4
 8002958:	3b08      	subs	r3, #8
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	430a      	orrs	r2, r1
 800295e:	3306      	adds	r3, #6
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	18c3      	adds	r3, r0, r3
 8002964:	3304      	adds	r3, #4
 8002966:	601a      	str	r2, [r3, #0]
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b003      	add	sp, #12
 800296e:	bd90      	pop	{r4, r7, pc}
 8002970:	e000e100 	.word	0xe000e100
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	1e5a      	subs	r2, r3, #1
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	045b      	lsls	r3, r3, #17
 8002988:	429a      	cmp	r2, r3
 800298a:	d301      	bcc.n	8002990 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298c:	2301      	movs	r3, #1
 800298e:	e010      	b.n	80029b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <SysTick_Config+0x44>)
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	3a01      	subs	r2, #1
 8002996:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002998:	2301      	movs	r3, #1
 800299a:	425b      	negs	r3, r3
 800299c:	2103      	movs	r1, #3
 800299e:	0018      	movs	r0, r3
 80029a0:	f7ff ff7c 	bl	800289c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <SysTick_Config+0x44>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <SysTick_Config+0x44>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b002      	add	sp, #8
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	210f      	movs	r1, #15
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	1c02      	adds	r2, r0, #0
 80029d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b25b      	sxtb	r3, r3
 80029da:	0011      	movs	r1, r2
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff ff5d 	bl	800289c <__NVIC_SetPriority>
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	0002      	movs	r2, r0
 80029f2:	1dfb      	adds	r3, r7, #7
 80029f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f6:	1dfb      	adds	r3, r7, #7
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	0018      	movs	r0, r3
 80029fe:	f7ff fef5 	bl	80027ec <__NVIC_EnableIRQ>
}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	0002      	movs	r2, r0
 8002a12:	1dfb      	adds	r3, r7, #7
 8002a14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a16:	1dfb      	adds	r3, r7, #7
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	b25b      	sxtb	r3, r3
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff feff 	bl	8002820 <__NVIC_DisableIRQ>
}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b002      	add	sp, #8
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff ff9f 	bl	8002978 <SysTick_Config>
 8002a3a:	0003      	movs	r3, r0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	1dfb      	adds	r3, r7, #7
 8002a4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002a50:	1dfb      	adds	r3, r7, #7
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	0018      	movs	r0, r3
 8002a58:	f7ff ff04 	bl	8002864 <__NVIC_ClearPendingIRQ>
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b002      	add	sp, #8
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e091      	b.n	8002b9a <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	001a      	movs	r2, r3
 8002a7c:	4b49      	ldr	r3, [pc, #292]	; (8002ba4 <HAL_DMA_Init+0x140>)
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d810      	bhi.n	8002aa4 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a48      	ldr	r2, [pc, #288]	; (8002ba8 <HAL_DMA_Init+0x144>)
 8002a88:	4694      	mov	ip, r2
 8002a8a:	4463      	add	r3, ip
 8002a8c:	2114      	movs	r1, #20
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7fd fb4a 	bl	8000128 <__udivsi3>
 8002a94:	0003      	movs	r3, r0
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a43      	ldr	r2, [pc, #268]	; (8002bac <HAL_DMA_Init+0x148>)
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
 8002aa2:	e00f      	b.n	8002ac4 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a41      	ldr	r2, [pc, #260]	; (8002bb0 <HAL_DMA_Init+0x14c>)
 8002aaa:	4694      	mov	ip, r2
 8002aac:	4463      	add	r3, ip
 8002aae:	2114      	movs	r1, #20
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7fd fb39 	bl	8000128 <__udivsi3>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	009a      	lsls	r2, r3, #2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a3c      	ldr	r2, [pc, #240]	; (8002bb4 <HAL_DMA_Init+0x150>)
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2225      	movs	r2, #37	; 0x25
 8002ac8:	2102      	movs	r1, #2
 8002aca:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4938      	ldr	r1, [pc, #224]	; (8002bb8 <HAL_DMA_Init+0x154>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6819      	ldr	r1, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	0018      	movs	r0, r3
 8002b16:	f000 fa4b 	bl	8002fb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	01db      	lsls	r3, r3, #7
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d102      	bne.n	8002b2c <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b34:	217f      	movs	r1, #127	; 0x7f
 8002b36:	400a      	ands	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b42:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d011      	beq.n	8002b70 <HAL_DMA_Init+0x10c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d80d      	bhi.n	8002b70 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 fa74 	bl	8003044 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	e008      	b.n	8002b82 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2225      	movs	r2, #37	; 0x25
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	2100      	movs	r1, #0
 8002b96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b002      	add	sp, #8
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	40020407 	.word	0x40020407
 8002ba8:	bffdfff8 	.word	0xbffdfff8
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	bffdfbf8 	.word	0xbffdfbf8
 8002bb4:	40020400 	.word	0x40020400
 8002bb8:	ffff800f 	.word	0xffff800f

08002bbc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2317      	movs	r3, #23
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2224      	movs	r2, #36	; 0x24
 8002bd6:	5c9b      	ldrb	r3, [r3, r2]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_DMA_Start_IT+0x24>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e06f      	b.n	8002cc0 <HAL_DMA_Start_IT+0x104>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	2101      	movs	r1, #1
 8002be6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2225      	movs	r2, #37	; 0x25
 8002bec:	5c9b      	ldrb	r3, [r3, r2]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d157      	bne.n	8002ca4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2225      	movs	r2, #37	; 0x25
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	438a      	bics	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f98d 	bl	8002f38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	210e      	movs	r1, #14
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	e00f      	b.n	8002c58 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2104      	movs	r1, #4
 8002c44:	438a      	bics	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	210a      	movs	r1, #10
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	025b      	lsls	r3, r3, #9
 8002c62:	4013      	ands	r3, r2
 8002c64:	d008      	beq.n	8002c78 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c70:	2180      	movs	r1, #128	; 0x80
 8002c72:	0049      	lsls	r1, r1, #1
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	0049      	lsls	r1, r1, #1
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e00a      	b.n	8002cba <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2280      	movs	r2, #128	; 0x80
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2224      	movs	r2, #36	; 0x24
 8002cae:	2100      	movs	r1, #0
 8002cb0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002cb2:	2317      	movs	r3, #23
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002cba:	2317      	movs	r3, #23
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	781b      	ldrb	r3, [r3, #0]
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b006      	add	sp, #24
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd0:	210f      	movs	r1, #15
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2225      	movs	r2, #37	; 0x25
 8002cdc:	5c9b      	ldrb	r3, [r3, r2]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d006      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	e048      	b.n	8002d84 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	210e      	movs	r1, #14
 8002cfe:	438a      	bics	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	438a      	bics	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1c:	491d      	ldr	r1, [pc, #116]	; (8002d94 <HAL_DMA_Abort_IT+0xcc>)
 8002d1e:	400a      	ands	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	221c      	movs	r2, #28
 8002d28:	401a      	ands	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4091      	lsls	r1, r2
 8002d32:	000a      	movs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d3e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00c      	beq.n	8002d62 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	4910      	ldr	r1, [pc, #64]	; (8002d94 <HAL_DMA_Abort_IT+0xcc>)
 8002d54:	400a      	ands	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d60:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2225      	movs	r2, #37	; 0x25
 8002d66:	2101      	movs	r1, #1
 8002d68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2224      	movs	r2, #36	; 0x24
 8002d6e:	2100      	movs	r1, #0
 8002d70:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d004      	beq.n	8002d84 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	0010      	movs	r0, r2
 8002d82:	4798      	blx	r3
    }
  }
  return status;
 8002d84:	230f      	movs	r3, #15
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	781b      	ldrb	r3, [r3, #0]
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b004      	add	sp, #16
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	fffffeff 	.word	0xfffffeff

08002d98 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	221c      	movs	r2, #28
 8002db6:	4013      	ands	r3, r2
 8002db8:	2204      	movs	r2, #4
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	0013      	movs	r3, r2
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d026      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x7a>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d022      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d107      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2104      	movs	r1, #4
 8002de4:	438a      	bics	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dec:	221c      	movs	r2, #28
 8002dee:	401a      	ands	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	2104      	movs	r1, #4
 8002df6:	4091      	lsls	r1, r2
 8002df8:	000a      	movs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d100      	bne.n	8002e06 <HAL_DMA_IRQHandler+0x6e>
 8002e04:	e080      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	0010      	movs	r0, r2
 8002e0e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002e10:	e07a      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	221c      	movs	r2, #28
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	0013      	movs	r3, r2
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4013      	ands	r3, r2
 8002e24:	d03c      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x108>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d038      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2220      	movs	r2, #32
 8002e36:	4013      	ands	r3, r2
 8002e38:	d10b      	bne.n	8002e52 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	210a      	movs	r1, #10
 8002e46:	438a      	bics	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2225      	movs	r2, #37	; 0x25
 8002e4e:	2101      	movs	r1, #1
 8002e50:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	001a      	movs	r2, r3
 8002e58:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_DMA_IRQHandler+0x17c>)
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d909      	bls.n	8002e72 <HAL_DMA_IRQHandler+0xda>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	221c      	movs	r2, #28
 8002e64:	401a      	ands	r2, r3
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <HAL_DMA_IRQHandler+0x180>)
 8002e68:	2102      	movs	r1, #2
 8002e6a:	4091      	lsls	r1, r2
 8002e6c:	000a      	movs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	e008      	b.n	8002e84 <HAL_DMA_IRQHandler+0xec>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	221c      	movs	r2, #28
 8002e78:	401a      	ands	r2, r3
 8002e7a:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_DMA_IRQHandler+0x184>)
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	4091      	lsls	r1, r2
 8002e80:	000a      	movs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	; 0x24
 8002e88:	2100      	movs	r1, #0
 8002e8a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d039      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	0010      	movs	r0, r2
 8002e9c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002e9e:	e033      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	221c      	movs	r2, #28
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	0013      	movs	r3, r2
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d02a      	beq.n	8002f0a <HAL_DMA_IRQHandler+0x172>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d026      	beq.n	8002f0a <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	210e      	movs	r1, #14
 8002ec8:	438a      	bics	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	221c      	movs	r2, #28
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	2101      	movs	r1, #1
 8002eda:	4091      	lsls	r1, r2
 8002edc:	000a      	movs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2225      	movs	r2, #37	; 0x25
 8002eea:	2101      	movs	r1, #1
 8002eec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2224      	movs	r2, #36	; 0x24
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	0010      	movs	r0, r2
 8002f06:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46c0      	nop			; (mov r8, r8)
}
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b004      	add	sp, #16
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	40020080 	.word	0x40020080
 8002f18:	40020400 	.word	0x40020400
 8002f1c:	40020000 	.word	0x40020000

08002f20 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2225      	movs	r2, #37	; 0x25
 8002f2c:	5c9b      	ldrb	r3, [r3, r2]
 8002f2e:	b2db      	uxtb	r3, r3
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f4e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d004      	beq.n	8002f62 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f60:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	221c      	movs	r2, #28
 8002f68:	401a      	ands	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2101      	movs	r1, #1
 8002f70:	4091      	lsls	r1, r2
 8002f72:	000a      	movs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d108      	bne.n	8002f98 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f96:	e007      	b.n	8002fa8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	60da      	str	r2, [r3, #12]
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b004      	add	sp, #16
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	001a      	movs	r2, r3
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d814      	bhi.n	8002fee <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	089b      	lsrs	r3, r3, #2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002fce:	189a      	adds	r2, r3, r2
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	001a      	movs	r2, r3
 8002fda:	23ff      	movs	r3, #255	; 0xff
 8002fdc:	4013      	ands	r3, r2
 8002fde:	3b08      	subs	r3, #8
 8002fe0:	2114      	movs	r1, #20
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7fd f8a0 	bl	8000128 <__udivsi3>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e014      	b.n	8003018 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	089b      	lsrs	r3, r3, #2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4a11      	ldr	r2, [pc, #68]	; (800303c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002ff8:	189a      	adds	r2, r3, r2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	001a      	movs	r2, r3
 8003004:	23ff      	movs	r3, #255	; 0xff
 8003006:	4013      	ands	r3, r2
 8003008:	3b08      	subs	r3, #8
 800300a:	2114      	movs	r1, #20
 800300c:	0018      	movs	r0, r3
 800300e:	f7fd f88b 	bl	8000128 <__udivsi3>
 8003012:	0003      	movs	r3, r0
 8003014:	3307      	adds	r3, #7
 8003016:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800301c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	221f      	movs	r2, #31
 8003022:	4013      	ands	r3, r2
 8003024:	2201      	movs	r2, #1
 8003026:	409a      	lsls	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800302c:	46c0      	nop			; (mov r8, r8)
 800302e:	46bd      	mov	sp, r7
 8003030:	b004      	add	sp, #16
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40020407 	.word	0x40020407
 8003038:	40020800 	.word	0x40020800
 800303c:	4002081c 	.word	0x4002081c
 8003040:	40020880 	.word	0x40020880

08003044 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	227f      	movs	r2, #127	; 0x7f
 8003052:	4013      	ands	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800305a:	4694      	mov	ip, r2
 800305c:	4463      	add	r3, ip
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	001a      	movs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a07      	ldr	r2, [pc, #28]	; (8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800306a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3b01      	subs	r3, #1
 8003070:	2203      	movs	r2, #3
 8003072:	4013      	ands	r3, r2
 8003074:	2201      	movs	r2, #1
 8003076:	409a      	lsls	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b004      	add	sp, #16
 8003082:	bd80      	pop	{r7, pc}
 8003084:	1000823f 	.word	0x1000823f
 8003088:	40020940 	.word	0x40020940

0800308c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309a:	e14d      	b.n	8003338 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4091      	lsls	r1, r2
 80030a6:	000a      	movs	r2, r1
 80030a8:	4013      	ands	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d100      	bne.n	80030b4 <HAL_GPIO_Init+0x28>
 80030b2:	e13e      	b.n	8003332 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2203      	movs	r2, #3
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d005      	beq.n	80030cc <HAL_GPIO_Init+0x40>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2203      	movs	r2, #3
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d130      	bne.n	800312e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	409a      	lsls	r2, r3
 80030da:	0013      	movs	r3, r2
 80030dc:	43da      	mvns	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	409a      	lsls	r2, r3
 80030ee:	0013      	movs	r3, r2
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003102:	2201      	movs	r2, #1
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	409a      	lsls	r2, r3
 8003108:	0013      	movs	r3, r2
 800310a:	43da      	mvns	r2, r3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	2201      	movs	r2, #1
 800311a:	401a      	ands	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	409a      	lsls	r2, r3
 8003120:	0013      	movs	r3, r2
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2203      	movs	r2, #3
 8003134:	4013      	ands	r3, r2
 8003136:	2b03      	cmp	r3, #3
 8003138:	d017      	beq.n	800316a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	2203      	movs	r2, #3
 8003146:	409a      	lsls	r2, r3
 8003148:	0013      	movs	r3, r2
 800314a:	43da      	mvns	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4013      	ands	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	409a      	lsls	r2, r3
 800315c:	0013      	movs	r3, r2
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2203      	movs	r2, #3
 8003170:	4013      	ands	r3, r2
 8003172:	2b02      	cmp	r3, #2
 8003174:	d123      	bne.n	80031be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	08da      	lsrs	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3208      	adds	r2, #8
 800317e:	0092      	lsls	r2, r2, #2
 8003180:	58d3      	ldr	r3, [r2, r3]
 8003182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2207      	movs	r2, #7
 8003188:	4013      	ands	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	220f      	movs	r2, #15
 800318e:	409a      	lsls	r2, r3
 8003190:	0013      	movs	r3, r2
 8003192:	43da      	mvns	r2, r3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2107      	movs	r1, #7
 80031a2:	400b      	ands	r3, r1
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	409a      	lsls	r2, r3
 80031a8:	0013      	movs	r3, r2
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	08da      	lsrs	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3208      	adds	r2, #8
 80031b8:	0092      	lsls	r2, r2, #2
 80031ba:	6939      	ldr	r1, [r7, #16]
 80031bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	2203      	movs	r2, #3
 80031ca:	409a      	lsls	r2, r3
 80031cc:	0013      	movs	r3, r2
 80031ce:	43da      	mvns	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2203      	movs	r2, #3
 80031dc:	401a      	ands	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	409a      	lsls	r2, r3
 80031e4:	0013      	movs	r3, r2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	23c0      	movs	r3, #192	; 0xc0
 80031f8:	029b      	lsls	r3, r3, #10
 80031fa:	4013      	ands	r3, r2
 80031fc:	d100      	bne.n	8003200 <HAL_GPIO_Init+0x174>
 80031fe:	e098      	b.n	8003332 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003200:	4a53      	ldr	r2, [pc, #332]	; (8003350 <HAL_GPIO_Init+0x2c4>)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	3318      	adds	r3, #24
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	589b      	ldr	r3, [r3, r2]
 800320c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2203      	movs	r2, #3
 8003212:	4013      	ands	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	220f      	movs	r2, #15
 8003218:	409a      	lsls	r2, r3
 800321a:	0013      	movs	r3, r2
 800321c:	43da      	mvns	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	23a0      	movs	r3, #160	; 0xa0
 8003228:	05db      	lsls	r3, r3, #23
 800322a:	429a      	cmp	r2, r3
 800322c:	d019      	beq.n	8003262 <HAL_GPIO_Init+0x1d6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a48      	ldr	r2, [pc, #288]	; (8003354 <HAL_GPIO_Init+0x2c8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_GPIO_Init+0x1d2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a47      	ldr	r2, [pc, #284]	; (8003358 <HAL_GPIO_Init+0x2cc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00d      	beq.n	800325a <HAL_GPIO_Init+0x1ce>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a46      	ldr	r2, [pc, #280]	; (800335c <HAL_GPIO_Init+0x2d0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <HAL_GPIO_Init+0x1ca>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a45      	ldr	r2, [pc, #276]	; (8003360 <HAL_GPIO_Init+0x2d4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_GPIO_Init+0x1c6>
 800324e:	2304      	movs	r3, #4
 8003250:	e008      	b.n	8003264 <HAL_GPIO_Init+0x1d8>
 8003252:	2305      	movs	r3, #5
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x1d8>
 8003256:	2303      	movs	r3, #3
 8003258:	e004      	b.n	8003264 <HAL_GPIO_Init+0x1d8>
 800325a:	2302      	movs	r3, #2
 800325c:	e002      	b.n	8003264 <HAL_GPIO_Init+0x1d8>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_GPIO_Init+0x1d8>
 8003262:	2300      	movs	r3, #0
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	2103      	movs	r1, #3
 8003268:	400a      	ands	r2, r1
 800326a:	00d2      	lsls	r2, r2, #3
 800326c:	4093      	lsls	r3, r2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003274:	4936      	ldr	r1, [pc, #216]	; (8003350 <HAL_GPIO_Init+0x2c4>)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	3318      	adds	r3, #24
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003282:	4a33      	ldr	r2, [pc, #204]	; (8003350 <HAL_GPIO_Init+0x2c4>)
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	58d3      	ldr	r3, [r2, r3]
 8003288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	43da      	mvns	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	025b      	lsls	r3, r3, #9
 800329c:	4013      	ands	r3, r2
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032a8:	4929      	ldr	r1, [pc, #164]	; (8003350 <HAL_GPIO_Init+0x2c4>)
 80032aa:	2280      	movs	r2, #128	; 0x80
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80032b0:	4a27      	ldr	r2, [pc, #156]	; (8003350 <HAL_GPIO_Init+0x2c4>)
 80032b2:	2384      	movs	r3, #132	; 0x84
 80032b4:	58d3      	ldr	r3, [r2, r3]
 80032b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	43da      	mvns	r2, r3
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	029b      	lsls	r3, r3, #10
 80032ca:	4013      	ands	r3, r2
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032d6:	491e      	ldr	r1, [pc, #120]	; (8003350 <HAL_GPIO_Init+0x2c4>)
 80032d8:	2284      	movs	r2, #132	; 0x84
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032de:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <HAL_GPIO_Init+0x2c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	43da      	mvns	r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	035b      	lsls	r3, r3, #13
 80032f6:	4013      	ands	r3, r2
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003302:	4b13      	ldr	r3, [pc, #76]	; (8003350 <HAL_GPIO_Init+0x2c4>)
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_GPIO_Init+0x2c4>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43da      	mvns	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	039b      	lsls	r3, r3, #14
 8003320:	4013      	ands	r3, r2
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800332c:	4b08      	ldr	r3, [pc, #32]	; (8003350 <HAL_GPIO_Init+0x2c4>)
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3301      	adds	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	40da      	lsrs	r2, r3
 8003340:	1e13      	subs	r3, r2, #0
 8003342:	d000      	beq.n	8003346 <HAL_GPIO_Init+0x2ba>
 8003344:	e6aa      	b.n	800309c <HAL_GPIO_Init+0x10>
  }
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b006      	add	sp, #24
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021800 	.word	0x40021800
 8003354:	50000400 	.word	0x50000400
 8003358:	50000800 	.word	0x50000800
 800335c:	50000c00 	.word	0x50000c00
 8003360:	50001000 	.word	0x50001000

08003364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	0008      	movs	r0, r1
 800336e:	0011      	movs	r1, r2
 8003370:	1cbb      	adds	r3, r7, #2
 8003372:	1c02      	adds	r2, r0, #0
 8003374:	801a      	strh	r2, [r3, #0]
 8003376:	1c7b      	adds	r3, r7, #1
 8003378:	1c0a      	adds	r2, r1, #0
 800337a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800337c:	1c7b      	adds	r3, r7, #1
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003384:	1cbb      	adds	r3, r7, #2
 8003386:	881a      	ldrh	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800338c:	e003      	b.n	8003396 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800338e:	1cbb      	adds	r3, r7, #2
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	b002      	add	sp, #8
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e082      	b.n	80034b8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2241      	movs	r2, #65	; 0x41
 80033b6:	5c9b      	ldrb	r3, [r3, r2]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d107      	bne.n	80033ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2240      	movs	r2, #64	; 0x40
 80033c2:	2100      	movs	r1, #0
 80033c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7fe f875 	bl	80014b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2241      	movs	r2, #65	; 0x41
 80033d2:	2124      	movs	r1, #36	; 0x24
 80033d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2101      	movs	r1, #1
 80033e2:	438a      	bics	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4934      	ldr	r1, [pc, #208]	; (80034c0 <HAL_I2C_Init+0x120>)
 80033f0:	400a      	ands	r2, r1
 80033f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4931      	ldr	r1, [pc, #196]	; (80034c4 <HAL_I2C_Init+0x124>)
 8003400:	400a      	ands	r2, r1
 8003402:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d108      	bne.n	800341e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	0209      	lsls	r1, r1, #8
 8003418:	430a      	orrs	r2, r1
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	e007      	b.n	800342e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2184      	movs	r1, #132	; 0x84
 8003428:	0209      	lsls	r1, r1, #8
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d104      	bne.n	8003440 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	0112      	lsls	r2, r2, #4
 800343e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	491f      	ldr	r1, [pc, #124]	; (80034c8 <HAL_I2C_Init+0x128>)
 800344c:	430a      	orrs	r2, r1
 800344e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	491a      	ldr	r1, [pc, #104]	; (80034c4 <HAL_I2C_Init+0x124>)
 800345c:	400a      	ands	r2, r1
 800345e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	431a      	orrs	r2, r3
 800346a:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69d9      	ldr	r1, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1a      	ldr	r2, [r3, #32]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2101      	movs	r1, #1
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2241      	movs	r2, #65	; 0x41
 80034a4:	2120      	movs	r1, #32
 80034a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2242      	movs	r2, #66	; 0x42
 80034b2:	2100      	movs	r1, #0
 80034b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	f0ffffff 	.word	0xf0ffffff
 80034c4:	ffff7fff 	.word	0xffff7fff
 80034c8:	02008000 	.word	0x02008000

080034cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 80034cc:	b590      	push	{r4, r7, lr}
 80034ce:	b089      	sub	sp, #36	; 0x24
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	0008      	movs	r0, r1
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	0019      	movs	r1, r3
 80034da:	230a      	movs	r3, #10
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	1c02      	adds	r2, r0, #0
 80034e0:	801a      	strh	r2, [r3, #0]
 80034e2:	2308      	movs	r3, #8
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	1c0a      	adds	r2, r1, #0
 80034e8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2241      	movs	r2, #65	; 0x41
 80034ee:	5c9b      	ldrb	r3, [r3, r2]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d000      	beq.n	80034f8 <HAL_I2C_Master_Transmit+0x2c>
 80034f6:	e0e7      	b.n	80036c8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2240      	movs	r2, #64	; 0x40
 80034fc:	5c9b      	ldrb	r3, [r3, r2]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_I2C_Master_Transmit+0x3a>
 8003502:	2302      	movs	r3, #2
 8003504:	e0e1      	b.n	80036ca <HAL_I2C_Master_Transmit+0x1fe>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2240      	movs	r2, #64	; 0x40
 800350a:	2101      	movs	r1, #1
 800350c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800350e:	f7fe fc8b 	bl	8001e28 <HAL_GetTick>
 8003512:	0003      	movs	r3, r0
 8003514:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	0219      	lsls	r1, r3, #8
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	2319      	movs	r3, #25
 8003522:	2201      	movs	r2, #1
 8003524:	f001 febc 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d001      	beq.n	8003530 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0cc      	b.n	80036ca <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2241      	movs	r2, #65	; 0x41
 8003534:	2121      	movs	r1, #33	; 0x21
 8003536:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2242      	movs	r2, #66	; 0x42
 800353c:	2110      	movs	r1, #16
 800353e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2208      	movs	r2, #8
 8003550:	18ba      	adds	r2, r7, r2
 8003552:	8812      	ldrh	r2, [r2, #0]
 8003554:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2bff      	cmp	r3, #255	; 0xff
 8003564:	d911      	bls.n	800358a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	22ff      	movs	r2, #255	; 0xff
 800356a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	b2da      	uxtb	r2, r3
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	045c      	lsls	r4, r3, #17
 8003576:	230a      	movs	r3, #10
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	8819      	ldrh	r1, [r3, #0]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	4b55      	ldr	r3, [pc, #340]	; (80036d4 <HAL_I2C_Master_Transmit+0x208>)
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	0023      	movs	r3, r4
 8003584:	f002 f82c 	bl	80055e0 <I2C_TransferConfig>
 8003588:	e075      	b.n	8003676 <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	b2da      	uxtb	r2, r3
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	049c      	lsls	r4, r3, #18
 800359e:	230a      	movs	r3, #10
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	8819      	ldrh	r1, [r3, #0]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <HAL_I2C_Master_Transmit+0x208>)
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	0023      	movs	r3, r4
 80035ac:	f002 f818 	bl	80055e0 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035b0:	e061      	b.n	8003676 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f001 feb0 	bl	800531e <I2C_WaitOnTXISFlagUntilTimeout>
 80035be:	1e03      	subs	r3, r0, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e081      	b.n	80036ca <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d03a      	beq.n	8003676 <HAL_I2C_Master_Transmit+0x1aa>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	d136      	bne.n	8003676 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	0013      	movs	r3, r2
 8003612:	2200      	movs	r2, #0
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	f001 fe43 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 800361a:	1e03      	subs	r3, r0, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e053      	b.n	80036ca <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	2bff      	cmp	r3, #255	; 0xff
 800362a:	d911      	bls.n	8003650 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	22ff      	movs	r2, #255	; 0xff
 8003630:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003636:	b2da      	uxtb	r2, r3
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	045c      	lsls	r4, r3, #17
 800363c:	230a      	movs	r3, #10
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	8819      	ldrh	r1, [r3, #0]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	2300      	movs	r3, #0
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	0023      	movs	r3, r4
 800364a:	f001 ffc9 	bl	80055e0 <I2C_TransferConfig>
 800364e:	e012      	b.n	8003676 <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	b2da      	uxtb	r2, r3
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	049c      	lsls	r4, r3, #18
 8003664:	230a      	movs	r3, #10
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	8819      	ldrh	r1, [r3, #0]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	2300      	movs	r3, #0
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	0023      	movs	r3, r4
 8003672:	f001 ffb5 	bl	80055e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d198      	bne.n	80035b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	0018      	movs	r0, r3
 8003688:	f001 fe88 	bl	800539c <I2C_WaitOnSTOPFlagUntilTimeout>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e01a      	b.n	80036ca <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2220      	movs	r2, #32
 800369a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	490c      	ldr	r1, [pc, #48]	; (80036d8 <HAL_I2C_Master_Transmit+0x20c>)
 80036a8:	400a      	ands	r2, r1
 80036aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2241      	movs	r2, #65	; 0x41
 80036b0:	2120      	movs	r1, #32
 80036b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2242      	movs	r2, #66	; 0x42
 80036b8:	2100      	movs	r1, #0
 80036ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	2100      	movs	r1, #0
 80036c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	e000      	b.n	80036ca <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
  }
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b007      	add	sp, #28
 80036d0:	bd90      	pop	{r4, r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	80002000 	.word	0x80002000
 80036d8:	fe00e800 	.word	0xfe00e800

080036dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	0008      	movs	r0, r1
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	0019      	movs	r1, r3
 80036ea:	230a      	movs	r3, #10
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	1c02      	adds	r2, r0, #0
 80036f0:	801a      	strh	r2, [r3, #0]
 80036f2:	2308      	movs	r3, #8
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	1c0a      	adds	r2, r1, #0
 80036f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2241      	movs	r2, #65	; 0x41
 80036fe:	5c9b      	ldrb	r3, [r3, r2]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b20      	cmp	r3, #32
 8003704:	d000      	beq.n	8003708 <HAL_I2C_Master_Receive+0x2c>
 8003706:	e0e8      	b.n	80038da <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2240      	movs	r2, #64	; 0x40
 800370c:	5c9b      	ldrb	r3, [r3, r2]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_I2C_Master_Receive+0x3a>
 8003712:	2302      	movs	r3, #2
 8003714:	e0e2      	b.n	80038dc <HAL_I2C_Master_Receive+0x200>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2240      	movs	r2, #64	; 0x40
 800371a:	2101      	movs	r1, #1
 800371c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800371e:	f7fe fb83 	bl	8001e28 <HAL_GetTick>
 8003722:	0003      	movs	r3, r0
 8003724:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	0219      	lsls	r1, r3, #8
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	2319      	movs	r3, #25
 8003732:	2201      	movs	r2, #1
 8003734:	f001 fdb4 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 8003738:	1e03      	subs	r3, r0, #0
 800373a:	d001      	beq.n	8003740 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0cd      	b.n	80038dc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2241      	movs	r2, #65	; 0x41
 8003744:	2122      	movs	r1, #34	; 0x22
 8003746:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2242      	movs	r2, #66	; 0x42
 800374c:	2110      	movs	r1, #16
 800374e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2208      	movs	r2, #8
 8003760:	18ba      	adds	r2, r7, r2
 8003762:	8812      	ldrh	r2, [r2, #0]
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2bff      	cmp	r3, #255	; 0xff
 8003774:	d911      	bls.n	800379a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	22ff      	movs	r2, #255	; 0xff
 800377a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	b2da      	uxtb	r2, r3
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	045c      	lsls	r4, r3, #17
 8003786:	230a      	movs	r3, #10
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	8819      	ldrh	r1, [r3, #0]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	4b55      	ldr	r3, [pc, #340]	; (80038e4 <HAL_I2C_Master_Receive+0x208>)
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	0023      	movs	r3, r4
 8003794:	f001 ff24 	bl	80055e0 <I2C_TransferConfig>
 8003798:	e076      	b.n	8003888 <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	2380      	movs	r3, #128	; 0x80
 80037ac:	049c      	lsls	r4, r3, #18
 80037ae:	230a      	movs	r3, #10
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	8819      	ldrh	r1, [r3, #0]
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	4b4b      	ldr	r3, [pc, #300]	; (80038e4 <HAL_I2C_Master_Receive+0x208>)
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	0023      	movs	r3, r4
 80037bc:	f001 ff10 	bl	80055e0 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80037c0:	e062      	b.n	8003888 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f001 fe23 	bl	8005414 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ce:	1e03      	subs	r3, r0, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e082      	b.n	80038dc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03a      	beq.n	8003888 <HAL_I2C_Master_Receive+0x1ac>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003816:	2b00      	cmp	r3, #0
 8003818:	d136      	bne.n	8003888 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800381a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	0013      	movs	r3, r2
 8003824:	2200      	movs	r2, #0
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	f001 fd3a 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 800382c:	1e03      	subs	r3, r0, #0
 800382e:	d001      	beq.n	8003834 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e053      	b.n	80038dc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2bff      	cmp	r3, #255	; 0xff
 800383c:	d911      	bls.n	8003862 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	22ff      	movs	r2, #255	; 0xff
 8003842:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003848:	b2da      	uxtb	r2, r3
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	045c      	lsls	r4, r3, #17
 800384e:	230a      	movs	r3, #10
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	8819      	ldrh	r1, [r3, #0]
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	2300      	movs	r3, #0
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	0023      	movs	r3, r4
 800385c:	f001 fec0 	bl	80055e0 <I2C_TransferConfig>
 8003860:	e012      	b.n	8003888 <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003870:	b2da      	uxtb	r2, r3
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	049c      	lsls	r4, r3, #18
 8003876:	230a      	movs	r3, #10
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	8819      	ldrh	r1, [r3, #0]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	2300      	movs	r3, #0
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	0023      	movs	r3, r4
 8003884:	f001 feac 	bl	80055e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d197      	bne.n	80037c2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	0018      	movs	r0, r3
 800389a:	f001 fd7f 	bl	800539c <I2C_WaitOnSTOPFlagUntilTimeout>
 800389e:	1e03      	subs	r3, r0, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e01a      	b.n	80038dc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2220      	movs	r2, #32
 80038ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	490b      	ldr	r1, [pc, #44]	; (80038e8 <HAL_I2C_Master_Receive+0x20c>)
 80038ba:	400a      	ands	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2241      	movs	r2, #65	; 0x41
 80038c2:	2120      	movs	r1, #32
 80038c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2242      	movs	r2, #66	; 0x42
 80038ca:	2100      	movs	r1, #0
 80038cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2240      	movs	r2, #64	; 0x40
 80038d2:	2100      	movs	r1, #0
 80038d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e000      	b.n	80038dc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
  }
}
 80038dc:	0018      	movs	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	b007      	add	sp, #28
 80038e2:	bd90      	pop	{r4, r7, pc}
 80038e4:	80002400 	.word	0x80002400
 80038e8:	fe00e800 	.word	0xfe00e800

080038ec <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80038ec:	b5b0      	push	{r4, r5, r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	0008      	movs	r0, r1
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	0019      	movs	r1, r3
 80038fa:	230a      	movs	r3, #10
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	1c02      	adds	r2, r0, #0
 8003900:	801a      	strh	r2, [r3, #0]
 8003902:	2308      	movs	r3, #8
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	1c0a      	adds	r2, r1, #0
 8003908:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2241      	movs	r2, #65	; 0x41
 800390e:	5c9b      	ldrb	r3, [r3, r2]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	d000      	beq.n	8003918 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8003916:	e0dd      	b.n	8003ad4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	401a      	ands	r2, r3
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	429a      	cmp	r2, r3
 800392a:	d101      	bne.n	8003930 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
 800392e:	e0d2      	b.n	8003ad6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2240      	movs	r2, #64	; 0x40
 8003934:	5c9b      	ldrb	r3, [r3, r2]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_I2C_Master_Transmit_DMA+0x52>
 800393a:	2302      	movs	r3, #2
 800393c:	e0cb      	b.n	8003ad6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2240      	movs	r2, #64	; 0x40
 8003942:	2101      	movs	r1, #1
 8003944:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2241      	movs	r2, #65	; 0x41
 800394a:	2121      	movs	r1, #33	; 0x21
 800394c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2242      	movs	r2, #66	; 0x42
 8003952:	2110      	movs	r1, #16
 8003954:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2208      	movs	r2, #8
 8003966:	18ba      	adds	r2, r7, r2
 8003968:	8812      	ldrh	r2, [r2, #0]
 800396a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a5c      	ldr	r2, [pc, #368]	; (8003ae0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8003970:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a5b      	ldr	r2, [pc, #364]	; (8003ae4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8003976:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2bff      	cmp	r3, #255	; 0xff
 8003980:	d906      	bls.n	8003990 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	22ff      	movs	r2, #255	; 0xff
 8003986:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	045b      	lsls	r3, r3, #17
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e007      	b.n	80039a0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	049b      	lsls	r3, r3, #18
 800399e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d100      	bne.n	80039aa <HAL_I2C_Master_Transmit_DMA+0xbe>
 80039a8:	e078      	b.n	8003a9c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d023      	beq.n	80039fa <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	4a4c      	ldr	r2, [pc, #304]	; (8003ae8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	4a4b      	ldr	r2, [pc, #300]	; (8003aec <HAL_I2C_Master_Transmit_DMA+0x200>)
 80039c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	2200      	movs	r2, #0
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3328      	adds	r3, #40	; 0x28
 80039de:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80039e4:	2513      	movs	r5, #19
 80039e6:	197c      	adds	r4, r7, r5
 80039e8:	f7ff f8e8 	bl	8002bbc <HAL_DMA_Start_IT>
 80039ec:	0003      	movs	r3, r0
 80039ee:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80039f0:	197b      	adds	r3, r7, r5
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d13d      	bne.n	8003a74 <HAL_I2C_Master_Transmit_DMA+0x188>
 80039f8:	e013      	b.n	8003a22 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2241      	movs	r2, #65	; 0x41
 80039fe:	2120      	movs	r1, #32
 8003a00:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2242      	movs	r2, #66	; 0x42
 8003a06:	2100      	movs	r1, #0
 8003a08:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	431a      	orrs	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2240      	movs	r2, #64	; 0x40
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e059      	b.n	8003ad6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	697c      	ldr	r4, [r7, #20]
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	8819      	ldrh	r1, [r3, #0]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	4b2f      	ldr	r3, [pc, #188]	; (8003af0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	0023      	movs	r3, r4
 8003a38:	f001 fdd2 	bl	80055e0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2240      	movs	r2, #64	; 0x40
 8003a52:	2100      	movs	r1, #0
 8003a54:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2110      	movs	r1, #16
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f001 fdf6 	bl	800564c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2180      	movs	r1, #128	; 0x80
 8003a6c:	01c9      	lsls	r1, r1, #7
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e02d      	b.n	8003ad0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2241      	movs	r2, #65	; 0x41
 8003a78:	2120      	movs	r1, #32
 8003a7a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2242      	movs	r2, #66	; 0x42
 8003a80:	2100      	movs	r1, #0
 8003a82:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	2210      	movs	r2, #16
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2240      	movs	r2, #64	; 0x40
 8003a94:	2100      	movs	r1, #0
 8003a96:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e01c      	b.n	8003ad6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8003aa0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	049c      	lsls	r4, r3, #18
 8003aac:	230a      	movs	r3, #10
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	8819      	ldrh	r1, [r3, #0]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	0023      	movs	r3, r4
 8003aba:	f001 fd91 	bl	80055e0 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2240      	movs	r2, #64	; 0x40
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2101      	movs	r1, #1
 8003aca:	0018      	movs	r0, r3
 8003acc:	f001 fdbe 	bl	800564c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e000      	b.n	8003ad6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ad4:	2302      	movs	r3, #2
  }
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b006      	add	sp, #24
 8003adc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	ffff0000 	.word	0xffff0000
 8003ae4:	08004359 	.word	0x08004359
 8003ae8:	080050f1 	.word	0x080050f1
 8003aec:	08005231 	.word	0x08005231
 8003af0:	80002000 	.word	0x80002000
 8003af4:	08003ead 	.word	0x08003ead

08003af8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003af8:	b5b0      	push	{r4, r5, r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	0008      	movs	r0, r1
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	0019      	movs	r1, r3
 8003b06:	230a      	movs	r3, #10
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	1c02      	adds	r2, r0, #0
 8003b0c:	801a      	strh	r2, [r3, #0]
 8003b0e:	2308      	movs	r3, #8
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	1c0a      	adds	r2, r1, #0
 8003b14:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2241      	movs	r2, #65	; 0x41
 8003b1a:	5c9b      	ldrb	r3, [r3, r2]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d000      	beq.n	8003b24 <HAL_I2C_Master_Receive_DMA+0x2c>
 8003b22:	e0dd      	b.n	8003ce0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	401a      	ands	r2, r3
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d101      	bne.n	8003b3c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e0d2      	b.n	8003ce2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2240      	movs	r2, #64	; 0x40
 8003b40:	5c9b      	ldrb	r3, [r3, r2]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_I2C_Master_Receive_DMA+0x52>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e0cb      	b.n	8003ce2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2240      	movs	r2, #64	; 0x40
 8003b4e:	2101      	movs	r1, #1
 8003b50:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2241      	movs	r2, #65	; 0x41
 8003b56:	2122      	movs	r1, #34	; 0x22
 8003b58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2242      	movs	r2, #66	; 0x42
 8003b5e:	2110      	movs	r1, #16
 8003b60:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2208      	movs	r2, #8
 8003b72:	18ba      	adds	r2, r7, r2
 8003b74:	8812      	ldrh	r2, [r2, #0]
 8003b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a5c      	ldr	r2, [pc, #368]	; (8003cec <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a5b      	ldr	r2, [pc, #364]	; (8003cf0 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8003b82:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2bff      	cmp	r3, #255	; 0xff
 8003b8c:	d906      	bls.n	8003b9c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	22ff      	movs	r2, #255	; 0xff
 8003b92:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	045b      	lsls	r3, r3, #17
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	e007      	b.n	8003bac <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	049b      	lsls	r3, r3, #18
 8003baa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d100      	bne.n	8003bb6 <HAL_I2C_Master_Receive_DMA+0xbe>
 8003bb4:	e078      	b.n	8003ca8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d023      	beq.n	8003c06 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	4a4c      	ldr	r2, [pc, #304]	; (8003cf4 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8003bc4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	4a4b      	ldr	r2, [pc, #300]	; (8003cf8 <HAL_I2C_Master_Receive_DMA+0x200>)
 8003bcc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	2200      	movs	r2, #0
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3324      	adds	r3, #36	; 0x24
 8003be8:	0019      	movs	r1, r3
 8003bea:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003bf0:	2513      	movs	r5, #19
 8003bf2:	197c      	adds	r4, r7, r5
 8003bf4:	f7fe ffe2 	bl	8002bbc <HAL_DMA_Start_IT>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003bfc:	197b      	adds	r3, r7, r5
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d13d      	bne.n	8003c80 <HAL_I2C_Master_Receive_DMA+0x188>
 8003c04:	e013      	b.n	8003c2e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2241      	movs	r2, #65	; 0x41
 8003c0a:	2120      	movs	r1, #32
 8003c0c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2242      	movs	r2, #66	; 0x42
 8003c12:	2100      	movs	r1, #0
 8003c14:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2240      	movs	r2, #64	; 0x40
 8003c26:	2100      	movs	r1, #0
 8003c28:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e059      	b.n	8003ce2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	697c      	ldr	r4, [r7, #20]
 8003c36:	230a      	movs	r3, #10
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	8819      	ldrh	r1, [r3, #0]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	; (8003cfc <HAL_I2C_Master_Receive_DMA+0x204>)
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	0023      	movs	r3, r4
 8003c44:	f001 fccc 	bl	80055e0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2240      	movs	r2, #64	; 0x40
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2110      	movs	r1, #16
 8003c66:	0018      	movs	r0, r3
 8003c68:	f001 fcf0 	bl	800564c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	0209      	lsls	r1, r1, #8
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	e02d      	b.n	8003cdc <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2241      	movs	r2, #65	; 0x41
 8003c84:	2120      	movs	r1, #32
 8003c86:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2242      	movs	r2, #66	; 0x42
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	2210      	movs	r2, #16
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2240      	movs	r2, #64	; 0x40
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e01c      	b.n	8003ce2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <HAL_I2C_Master_Receive_DMA+0x208>)
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	049c      	lsls	r4, r3, #18
 8003cb8:	230a      	movs	r3, #10
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	8819      	ldrh	r1, [r3, #0]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <HAL_I2C_Master_Receive_DMA+0x204>)
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	0023      	movs	r3, r4
 8003cc6:	f001 fc8b 	bl	80055e0 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2240      	movs	r2, #64	; 0x40
 8003cce:	2100      	movs	r1, #0
 8003cd0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f001 fcb8 	bl	800564c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b006      	add	sp, #24
 8003ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	ffff0000 	.word	0xffff0000
 8003cf0:	08004359 	.word	0x08004359
 8003cf4:	08005191 	.word	0x08005191
 8003cf8:	08005231 	.word	0x08005231
 8003cfc:	80002400 	.word	0x80002400
 8003d00:	08003ead 	.word	0x08003ead

08003d04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	68f9      	ldr	r1, [r7, #12]
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
  }
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b004      	add	sp, #16
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	001a      	movs	r2, r3
 8003d56:	2301      	movs	r3, #1
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d010      	beq.n	8003d7e <HAL_I2C_ER_IRQHandler+0x46>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	09db      	lsrs	r3, r3, #7
 8003d60:	001a      	movs	r2, r3
 8003d62:	2301      	movs	r3, #1
 8003d64:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d66:	d00a      	beq.n	8003d7e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2280      	movs	r2, #128	; 0x80
 8003d7a:	0052      	lsls	r2, r2, #1
 8003d7c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	0a9b      	lsrs	r3, r3, #10
 8003d82:	001a      	movs	r2, r3
 8003d84:	2301      	movs	r3, #1
 8003d86:	4013      	ands	r3, r2
 8003d88:	d010      	beq.n	8003dac <HAL_I2C_ER_IRQHandler+0x74>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	09db      	lsrs	r3, r3, #7
 8003d8e:	001a      	movs	r2, r3
 8003d90:	2301      	movs	r3, #1
 8003d92:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003d94:	d00a      	beq.n	8003dac <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	2208      	movs	r2, #8
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2280      	movs	r2, #128	; 0x80
 8003da8:	00d2      	lsls	r2, r2, #3
 8003daa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	0a5b      	lsrs	r3, r3, #9
 8003db0:	001a      	movs	r2, r3
 8003db2:	2301      	movs	r3, #1
 8003db4:	4013      	ands	r3, r2
 8003db6:	d010      	beq.n	8003dda <HAL_I2C_ER_IRQHandler+0xa2>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	09db      	lsrs	r3, r3, #7
 8003dbc:	001a      	movs	r2, r3
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003dc2:	d00a      	beq.n	8003dda <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc8:	2202      	movs	r2, #2
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2280      	movs	r2, #128	; 0x80
 8003dd6:	0092      	lsls	r2, r2, #2
 8003dd8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	220b      	movs	r2, #11
 8003de4:	4013      	ands	r3, r2
 8003de6:	d005      	beq.n	8003df4 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0011      	movs	r1, r2
 8003dee:	0018      	movs	r0, r3
 8003df0:	f001 f850 	bl	8004e94 <I2C_ITError>
  }
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b006      	add	sp, #24
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b002      	add	sp, #8
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	0008      	movs	r0, r1
 8003e46:	0011      	movs	r1, r2
 8003e48:	1cfb      	adds	r3, r7, #3
 8003e4a:	1c02      	adds	r2, r0, #0
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	003b      	movs	r3, r7
 8003e50:	1c0a      	adds	r2, r1, #0
 8003e52:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b002      	add	sp, #8
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b002      	add	sp, #8
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b002      	add	sp, #8
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b089      	sub	sp, #36	; 0x24
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2240      	movs	r2, #64	; 0x40
 8003ec0:	5c9b      	ldrb	r3, [r3, r2]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <I2C_Master_ISR_IT+0x1e>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e12b      	b.n	8004122 <I2C_Master_ISR_IT+0x276>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2240      	movs	r2, #64	; 0x40
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	001a      	movs	r2, r3
 8003ed8:	2301      	movs	r3, #1
 8003eda:	4013      	ands	r3, r2
 8003edc:	d014      	beq.n	8003f08 <I2C_Master_ISR_IT+0x5c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	001a      	movs	r2, r3
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ee8:	d00e      	beq.n	8003f08 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2210      	movs	r2, #16
 8003ef0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	0018      	movs	r0, r3
 8003f02:	f001 f8d2 	bl	80050aa <I2C_Flush_TXDR>
 8003f06:	e0f5      	b.n	80040f4 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	089b      	lsrs	r3, r3, #2
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	2301      	movs	r3, #1
 8003f10:	4013      	ands	r3, r2
 8003f12:	d023      	beq.n	8003f5c <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	089b      	lsrs	r3, r3, #2
 8003f18:	001a      	movs	r2, r3
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f1e:	d01d      	beq.n	8003f5c <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2204      	movs	r2, #4
 8003f24:	4393      	bics	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f5a:	e0cb      	b.n	80040f4 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	001a      	movs	r2, r3
 8003f62:	2301      	movs	r3, #1
 8003f64:	4013      	ands	r3, r2
 8003f66:	d01e      	beq.n	8003fa6 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	2301      	movs	r3, #1
 8003f70:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f72:	d018      	beq.n	8003fa6 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fa4:	e0a6      	b.n	80040f4 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	09db      	lsrs	r3, r3, #7
 8003faa:	001a      	movs	r2, r3
 8003fac:	2301      	movs	r3, #1
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d100      	bne.n	8003fb4 <I2C_Master_ISR_IT+0x108>
 8003fb2:	e06b      	b.n	800408c <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	099b      	lsrs	r3, r3, #6
 8003fb8:	001a      	movs	r2, r3
 8003fba:	2301      	movs	r3, #1
 8003fbc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003fbe:	d065      	beq.n	800408c <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d04a      	beq.n	8004060 <I2C_Master_ISR_IT+0x1b4>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d146      	bne.n	8004060 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	2112      	movs	r1, #18
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	0592      	lsls	r2, r2, #22
 8003fe0:	0d92      	lsrs	r2, r2, #22
 8003fe2:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2bff      	cmp	r3, #255	; 0xff
 8003fec:	d910      	bls.n	8004010 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	22ff      	movs	r2, #255	; 0xff
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	045c      	lsls	r4, r3, #17
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	8819      	ldrh	r1, [r3, #0]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	2300      	movs	r3, #0
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	0023      	movs	r3, r4
 800400a:	f001 fae9 	bl	80055e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800400e:	e03c      	b.n	800408a <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	4a43      	ldr	r2, [pc, #268]	; (800412c <I2C_Master_ISR_IT+0x280>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800402e:	2312      	movs	r3, #18
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	8819      	ldrh	r1, [r3, #0]
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	2300      	movs	r3, #0
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	0023      	movs	r3, r4
 800403c:	f001 fad0 	bl	80055e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004040:	e023      	b.n	800408a <I2C_Master_ISR_IT+0x1de>
                                hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004046:	b2da      	uxtb	r2, r3
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	049c      	lsls	r4, r3, #18
 800404c:	2312      	movs	r3, #18
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	8819      	ldrh	r1, [r3, #0]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	2300      	movs	r3, #0
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	0023      	movs	r3, r4
 800405a:	f001 fac1 	bl	80055e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800405e:	e014      	b.n	800408a <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	049b      	lsls	r3, r3, #18
 800406a:	401a      	ands	r2, r3
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	049b      	lsls	r3, r3, #18
 8004070:	429a      	cmp	r2, r3
 8004072:	d004      	beq.n	800407e <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	0018      	movs	r0, r3
 8004078:	f000 fc14 	bl	80048a4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800407c:	e03a      	b.n	80040f4 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2140      	movs	r1, #64	; 0x40
 8004082:	0018      	movs	r0, r3
 8004084:	f000 ff06 	bl	8004e94 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004088:	e034      	b.n	80040f4 <I2C_Master_ISR_IT+0x248>
 800408a:	e033      	b.n	80040f4 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	099b      	lsrs	r3, r3, #6
 8004090:	001a      	movs	r2, r3
 8004092:	2301      	movs	r3, #1
 8004094:	4013      	ands	r3, r2
 8004096:	d02d      	beq.n	80040f4 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	099b      	lsrs	r3, r3, #6
 800409c:	001a      	movs	r2, r3
 800409e:	2301      	movs	r3, #1
 80040a0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80040a2:	d027      	beq.n	80040f4 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d11d      	bne.n	80040ea <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	049b      	lsls	r3, r3, #18
 80040b8:	401a      	ands	r2, r3
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	049b      	lsls	r3, r3, #18
 80040be:	429a      	cmp	r2, r3
 80040c0:	d018      	beq.n	80040f4 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	4a19      	ldr	r2, [pc, #100]	; (800412c <I2C_Master_ISR_IT+0x280>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d109      	bne.n	80040e0 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2180      	movs	r1, #128	; 0x80
 80040d8:	01c9      	lsls	r1, r1, #7
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	e009      	b.n	80040f4 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	0018      	movs	r0, r3
 80040e4:	f000 fbde 	bl	80048a4 <I2C_ITMasterSeqCplt>
 80040e8:	e004      	b.n	80040f4 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2140      	movs	r1, #64	; 0x40
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 fed0 	bl	8004e94 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	001a      	movs	r2, r3
 80040fa:	2301      	movs	r3, #1
 80040fc:	4013      	ands	r3, r2
 80040fe:	d00b      	beq.n	8004118 <I2C_Master_ISR_IT+0x26c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	001a      	movs	r2, r3
 8004106:	2301      	movs	r3, #1
 8004108:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800410a:	d005      	beq.n	8004118 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	0011      	movs	r1, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f000 fc6e 	bl	80049f4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2240      	movs	r2, #64	; 0x40
 800411c:	2100      	movs	r1, #0
 800411e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b007      	add	sp, #28
 8004128:	bd90      	pop	{r4, r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	ffff0000 	.word	0xffff0000

08004130 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2240      	movs	r2, #64	; 0x40
 800414a:	5c9b      	ldrb	r3, [r3, r2]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <I2C_Slave_ISR_IT+0x24>
 8004150:	2302      	movs	r3, #2
 8004152:	e0fa      	b.n	800434a <I2C_Slave_ISR_IT+0x21a>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2240      	movs	r2, #64	; 0x40
 8004158:	2101      	movs	r1, #1
 800415a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	001a      	movs	r2, r3
 8004162:	2301      	movs	r3, #1
 8004164:	4013      	ands	r3, r2
 8004166:	d00b      	beq.n	8004180 <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	001a      	movs	r2, r3
 800416e:	2301      	movs	r3, #1
 8004170:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004172:	d005      	beq.n	8004180 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	0011      	movs	r1, r2
 800417a:	0018      	movs	r0, r3
 800417c:	f000 fd0c 	bl	8004b98 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	001a      	movs	r2, r3
 8004186:	2301      	movs	r3, #1
 8004188:	4013      	ands	r3, r2
 800418a:	d054      	beq.n	8004236 <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	001a      	movs	r2, r3
 8004192:	2301      	movs	r3, #1
 8004194:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004196:	d04e      	beq.n	8004236 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d12d      	bne.n	80041fe <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2241      	movs	r2, #65	; 0x41
 80041a6:	5c9b      	ldrb	r3, [r3, r2]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b28      	cmp	r3, #40	; 0x28
 80041ac:	d10b      	bne.n	80041c6 <I2C_Slave_ISR_IT+0x96>
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	049b      	lsls	r3, r3, #18
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d106      	bne.n	80041c6 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	0011      	movs	r1, r2
 80041be:	0018      	movs	r0, r3
 80041c0:	f000 fe0e 	bl	8004de0 <I2C_ITListenCplt>
 80041c4:	e036      	b.n	8004234 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2241      	movs	r2, #65	; 0x41
 80041ca:	5c9b      	ldrb	r3, [r3, r2]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b29      	cmp	r3, #41	; 0x29
 80041d0:	d110      	bne.n	80041f4 <I2C_Slave_ISR_IT+0xc4>
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	4a5f      	ldr	r2, [pc, #380]	; (8004354 <I2C_Slave_ISR_IT+0x224>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00c      	beq.n	80041f4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2210      	movs	r2, #16
 80041e0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	0018      	movs	r0, r3
 80041e6:	f000 ff60 	bl	80050aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f000 fb9b 	bl	8004928 <I2C_ITSlaveSeqCplt>
 80041f2:	e01f      	b.n	8004234 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2210      	movs	r2, #16
 80041fa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80041fc:	e09d      	b.n	800433a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2210      	movs	r2, #16
 8004204:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	2204      	movs	r2, #4
 800420c:	431a      	orrs	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <I2C_Slave_ISR_IT+0xf4>
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	045b      	lsls	r3, r3, #17
 800421e:	429a      	cmp	r2, r3
 8004220:	d000      	beq.n	8004224 <I2C_Slave_ISR_IT+0xf4>
 8004222:	e08a      	b.n	800433a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	0011      	movs	r1, r2
 800422c:	0018      	movs	r0, r3
 800422e:	f000 fe31 	bl	8004e94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004232:	e082      	b.n	800433a <I2C_Slave_ISR_IT+0x20a>
 8004234:	e081      	b.n	800433a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	001a      	movs	r2, r3
 800423c:	2301      	movs	r3, #1
 800423e:	4013      	ands	r3, r2
 8004240:	d031      	beq.n	80042a6 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	001a      	movs	r2, r3
 8004248:	2301      	movs	r3, #1
 800424a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800424c:	d02b      	beq.n	80042a6 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d018      	beq.n	800428a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d154      	bne.n	800433e <I2C_Slave_ISR_IT+0x20e>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4a2f      	ldr	r2, [pc, #188]	; (8004354 <I2C_Slave_ISR_IT+0x224>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d050      	beq.n	800433e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	0018      	movs	r0, r3
 80042a0:	f000 fb42 	bl	8004928 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80042a4:	e04b      	b.n	800433e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	08db      	lsrs	r3, r3, #3
 80042aa:	001a      	movs	r2, r3
 80042ac:	2301      	movs	r3, #1
 80042ae:	4013      	ands	r3, r2
 80042b0:	d00c      	beq.n	80042cc <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	08db      	lsrs	r3, r3, #3
 80042b6:	001a      	movs	r2, r3
 80042b8:	2301      	movs	r3, #1
 80042ba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80042bc:	d006      	beq.n	80042cc <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	0011      	movs	r1, r2
 80042c4:	0018      	movs	r0, r3
 80042c6:	f000 fa49 	bl	800475c <I2C_ITAddrCplt>
 80042ca:	e039      	b.n	8004340 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	001a      	movs	r2, r3
 80042d2:	2301      	movs	r3, #1
 80042d4:	4013      	ands	r3, r2
 80042d6:	d033      	beq.n	8004340 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	085b      	lsrs	r3, r3, #1
 80042dc:	001a      	movs	r2, r3
 80042de:	2301      	movs	r3, #1
 80042e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042e2:	d02d      	beq.n	8004340 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d018      	beq.n	8004320 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	781a      	ldrb	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	; 0x28
 800431e:	e00f      	b.n	8004340 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	045b      	lsls	r3, r3, #17
 8004326:	429a      	cmp	r2, r3
 8004328:	d002      	beq.n	8004330 <I2C_Slave_ISR_IT+0x200>
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d107      	bne.n	8004340 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	0018      	movs	r0, r3
 8004334:	f000 faf8 	bl	8004928 <I2C_ITSlaveSeqCplt>
 8004338:	e002      	b.n	8004340 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	e000      	b.n	8004340 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800433e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2240      	movs	r2, #64	; 0x40
 8004344:	2100      	movs	r1, #0
 8004346:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b006      	add	sp, #24
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	ffff0000 	.word	0xffff0000

08004358 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                               uint32_t ITSources)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b089      	sub	sp, #36	; 0x24
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2240      	movs	r2, #64	; 0x40
 8004368:	5c9b      	ldrb	r3, [r3, r2]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <I2C_Master_ISR_DMA+0x1a>
 800436e:	2302      	movs	r3, #2
 8004370:	e0f7      	b.n	8004562 <I2C_Master_ISR_DMA+0x20a>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2240      	movs	r2, #64	; 0x40
 8004376:	2101      	movs	r1, #1
 8004378:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	001a      	movs	r2, r3
 8004380:	2301      	movs	r3, #1
 8004382:	4013      	ands	r3, r2
 8004384:	d019      	beq.n	80043ba <I2C_Master_ISR_DMA+0x62>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	001a      	movs	r2, r3
 800438c:	2301      	movs	r3, #1
 800438e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004390:	d013      	beq.n	80043ba <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2210      	movs	r2, #16
 8004398:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	2204      	movs	r2, #4
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2120      	movs	r1, #32
 80043aa:	0018      	movs	r0, r3
 80043ac:	f001 f94e 	bl	800564c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	0018      	movs	r0, r3
 80043b4:	f000 fe79 	bl	80050aa <I2C_Flush_TXDR>
 80043b8:	e0ce      	b.n	8004558 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	09db      	lsrs	r3, r3, #7
 80043be:	001a      	movs	r2, r3
 80043c0:	2301      	movs	r3, #1
 80043c2:	4013      	ands	r3, r2
 80043c4:	d100      	bne.n	80043c8 <I2C_Master_ISR_DMA+0x70>
 80043c6:	e07e      	b.n	80044c6 <I2C_Master_ISR_DMA+0x16e>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	001a      	movs	r2, r3
 80043ce:	2301      	movs	r3, #1
 80043d0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80043d2:	d100      	bne.n	80043d6 <I2C_Master_ISR_DMA+0x7e>
 80043d4:	e077      	b.n	80044c6 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2140      	movs	r1, #64	; 0x40
 80043e2:	438a      	bics	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d055      	beq.n	800449c <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	2312      	movs	r3, #18
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	0592      	lsls	r2, r2, #22
 80043fe:	0d92      	lsrs	r2, r2, #22
 8004400:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	2bff      	cmp	r3, #255	; 0xff
 800440a:	d906      	bls.n	800441a <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	22ff      	movs	r2, #255	; 0xff
 8004410:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	045b      	lsls	r3, r3, #17
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e010      	b.n	800443c <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	4a50      	ldr	r2, [pc, #320]	; (800456c <I2C_Master_ISR_DMA+0x214>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e002      	b.n	800443c <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	049b      	lsls	r3, r3, #18
 800443a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	b2da      	uxtb	r2, r3
 8004442:	697c      	ldr	r4, [r7, #20]
 8004444:	2312      	movs	r3, #18
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	8819      	ldrh	r1, [r3, #0]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	2300      	movs	r3, #0
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	0023      	movs	r3, r4
 8004452:	f001 f8c5 	bl	80055e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2241      	movs	r2, #65	; 0x41
 800446c:	5c9b      	ldrb	r3, [r3, r2]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b22      	cmp	r3, #34	; 0x22
 8004472:	d109      	bne.n	8004488 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2180      	movs	r1, #128	; 0x80
 8004480:	0209      	lsls	r1, r1, #8
 8004482:	430a      	orrs	r2, r1
 8004484:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004486:	e067      	b.n	8004558 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2180      	movs	r1, #128	; 0x80
 8004494:	01c9      	lsls	r1, r1, #7
 8004496:	430a      	orrs	r2, r1
 8004498:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800449a:	e05d      	b.n	8004558 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	049b      	lsls	r3, r3, #18
 80044a6:	401a      	ands	r2, r3
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	049b      	lsls	r3, r3, #18
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d004      	beq.n	80044ba <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	0018      	movs	r0, r3
 80044b4:	f000 f9f6 	bl	80048a4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80044b8:	e04e      	b.n	8004558 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2140      	movs	r1, #64	; 0x40
 80044be:	0018      	movs	r0, r3
 80044c0:	f000 fce8 	bl	8004e94 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80044c4:	e048      	b.n	8004558 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	099b      	lsrs	r3, r3, #6
 80044ca:	001a      	movs	r2, r3
 80044cc:	2301      	movs	r3, #1
 80044ce:	4013      	ands	r3, r2
 80044d0:	d02e      	beq.n	8004530 <I2C_Master_ISR_DMA+0x1d8>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	099b      	lsrs	r3, r3, #6
 80044d6:	001a      	movs	r2, r3
 80044d8:	2301      	movs	r3, #1
 80044da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80044dc:	d028      	beq.n	8004530 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11d      	bne.n	8004524 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	049b      	lsls	r3, r3, #18
 80044f2:	401a      	ands	r2, r3
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	049b      	lsls	r3, r3, #18
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d02c      	beq.n	8004556 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	4a1a      	ldr	r2, [pc, #104]	; (800456c <I2C_Master_ISR_DMA+0x214>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d109      	bne.n	800451a <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2180      	movs	r1, #128	; 0x80
 8004512:	01c9      	lsls	r1, r1, #7
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004518:	e01d      	b.n	8004556 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	0018      	movs	r0, r3
 800451e:	f000 f9c1 	bl	80048a4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004522:	e018      	b.n	8004556 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2140      	movs	r1, #64	; 0x40
 8004528:	0018      	movs	r0, r3
 800452a:	f000 fcb3 	bl	8004e94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800452e:	e012      	b.n	8004556 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	001a      	movs	r2, r3
 8004536:	2301      	movs	r3, #1
 8004538:	4013      	ands	r3, r2
 800453a:	d00d      	beq.n	8004558 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	001a      	movs	r2, r3
 8004542:	2301      	movs	r3, #1
 8004544:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004546:	d007      	beq.n	8004558 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	0011      	movs	r1, r2
 800454e:	0018      	movs	r0, r3
 8004550:	f000 fa50 	bl	80049f4 <I2C_ITMasterCplt>
 8004554:	e000      	b.n	8004558 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8004556:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2240      	movs	r2, #64	; 0x40
 800455c:	2100      	movs	r1, #0
 800455e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	0018      	movs	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	b007      	add	sp, #28
 8004568:	bd90      	pop	{r4, r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	ffff0000 	.word	0xffff0000

08004570 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2240      	movs	r2, #64	; 0x40
 800458a:	5c9b      	ldrb	r3, [r3, r2]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <I2C_Slave_ISR_DMA+0x24>
 8004590:	2302      	movs	r3, #2
 8004592:	e0dd      	b.n	8004750 <I2C_Slave_ISR_DMA+0x1e0>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2240      	movs	r2, #64	; 0x40
 8004598:	2101      	movs	r1, #1
 800459a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	001a      	movs	r2, r3
 80045a2:	2301      	movs	r3, #1
 80045a4:	4013      	ands	r3, r2
 80045a6:	d00b      	beq.n	80045c0 <I2C_Slave_ISR_DMA+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	001a      	movs	r2, r3
 80045ae:	2301      	movs	r3, #1
 80045b0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80045b2:	d005      	beq.n	80045c0 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	0011      	movs	r1, r2
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 faec 	bl	8004b98 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	091b      	lsrs	r3, r3, #4
 80045c4:	001a      	movs	r2, r3
 80045c6:	2301      	movs	r3, #1
 80045c8:	4013      	ands	r3, r2
 80045ca:	d100      	bne.n	80045ce <I2C_Slave_ISR_DMA+0x5e>
 80045cc:	e0a9      	b.n	8004722 <I2C_Slave_ISR_DMA+0x1b2>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	001a      	movs	r2, r3
 80045d4:	2301      	movs	r3, #1
 80045d6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80045d8:	d100      	bne.n	80045dc <I2C_Slave_ISR_DMA+0x6c>
 80045da:	e0a2      	b.n	8004722 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	0b9b      	lsrs	r3, r3, #14
 80045e0:	001a      	movs	r2, r3
 80045e2:	2301      	movs	r3, #1
 80045e4:	4013      	ands	r3, r2
 80045e6:	d106      	bne.n	80045f6 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	0bdb      	lsrs	r3, r3, #15
 80045ec:	001a      	movs	r2, r3
 80045ee:	2301      	movs	r3, #1
 80045f0:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80045f2:	d100      	bne.n	80045f6 <I2C_Slave_ISR_DMA+0x86>
 80045f4:	e08e      	b.n	8004714 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	0bdb      	lsrs	r3, r3, #15
 8004602:	001a      	movs	r2, r3
 8004604:	2301      	movs	r3, #1
 8004606:	4013      	ands	r3, r2
 8004608:	d007      	beq.n	800461a <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8004616:	2301      	movs	r3, #1
 8004618:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	0b9b      	lsrs	r3, r3, #14
 8004626:	001a      	movs	r2, r3
 8004628:	2301      	movs	r3, #1
 800462a:	4013      	ands	r3, r2
 800462c:	d007      	beq.n	800463e <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 800463a:	2301      	movs	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d12d      	bne.n	80046a0 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2241      	movs	r2, #65	; 0x41
 8004648:	5c9b      	ldrb	r3, [r3, r2]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b28      	cmp	r3, #40	; 0x28
 800464e:	d10b      	bne.n	8004668 <I2C_Slave_ISR_DMA+0xf8>
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	049b      	lsls	r3, r3, #18
 8004656:	429a      	cmp	r2, r3
 8004658:	d106      	bne.n	8004668 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	0011      	movs	r1, r2
 8004660:	0018      	movs	r0, r3
 8004662:	f000 fbbd 	bl	8004de0 <I2C_ITListenCplt>
 8004666:	e054      	b.n	8004712 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2241      	movs	r2, #65	; 0x41
 800466c:	5c9b      	ldrb	r3, [r3, r2]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b29      	cmp	r3, #41	; 0x29
 8004672:	d110      	bne.n	8004696 <I2C_Slave_ISR_DMA+0x126>
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	4a38      	ldr	r2, [pc, #224]	; (8004758 <I2C_Slave_ISR_DMA+0x1e8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00c      	beq.n	8004696 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2210      	movs	r2, #16
 8004682:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	0018      	movs	r0, r3
 8004688:	f000 fd0f 	bl	80050aa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	0018      	movs	r0, r3
 8004690:	f000 f94a 	bl	8004928 <I2C_ITSlaveSeqCplt>
 8004694:	e03d      	b.n	8004712 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2210      	movs	r2, #16
 800469c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800469e:	e03e      	b.n	800471e <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2210      	movs	r2, #16
 80046a6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ac:	2204      	movs	r2, #4
 80046ae:	431a      	orrs	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80046b4:	2317      	movs	r3, #23
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	2141      	movs	r1, #65	; 0x41
 80046bc:	5c52      	ldrb	r2, [r2, r1]
 80046be:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <I2C_Slave_ISR_DMA+0x160>
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	045b      	lsls	r3, r3, #17
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d126      	bne.n	800471e <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046d0:	2217      	movs	r2, #23
 80046d2:	18bb      	adds	r3, r7, r2
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b21      	cmp	r3, #33	; 0x21
 80046d8:	d003      	beq.n	80046e2 <I2C_Slave_ISR_DMA+0x172>
 80046da:	18bb      	adds	r3, r7, r2
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b29      	cmp	r3, #41	; 0x29
 80046e0:	d103      	bne.n	80046ea <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2221      	movs	r2, #33	; 0x21
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
 80046e8:	e00b      	b.n	8004702 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046ea:	2217      	movs	r2, #23
 80046ec:	18bb      	adds	r3, r7, r2
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b22      	cmp	r3, #34	; 0x22
 80046f2:	d003      	beq.n	80046fc <I2C_Slave_ISR_DMA+0x18c>
 80046f4:	18bb      	adds	r3, r7, r2
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b2a      	cmp	r3, #42	; 0x2a
 80046fa:	d102      	bne.n	8004702 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2222      	movs	r2, #34	; 0x22
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	0011      	movs	r1, r2
 800470a:	0018      	movs	r0, r3
 800470c:	f000 fbc2 	bl	8004e94 <I2C_ITError>
      if (treatdmanack == 1U)
 8004710:	e005      	b.n	800471e <I2C_Slave_ISR_DMA+0x1ae>
 8004712:	e004      	b.n	800471e <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2210      	movs	r2, #16
 800471a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800471c:	e013      	b.n	8004746 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 800471e:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004720:	e011      	b.n	8004746 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	08db      	lsrs	r3, r3, #3
 8004726:	001a      	movs	r2, r3
 8004728:	2301      	movs	r3, #1
 800472a:	4013      	ands	r3, r2
 800472c:	d00b      	beq.n	8004746 <I2C_Slave_ISR_DMA+0x1d6>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	001a      	movs	r2, r3
 8004734:	2301      	movs	r3, #1
 8004736:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004738:	d005      	beq.n	8004746 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	0011      	movs	r1, r2
 8004740:	0018      	movs	r0, r3
 8004742:	f000 f80b 	bl	800475c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2240      	movs	r2, #64	; 0x40
 800474a:	2100      	movs	r1, #0
 800474c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	b008      	add	sp, #32
 8004756:	bd80      	pop	{r7, pc}
 8004758:	ffff0000 	.word	0xffff0000

0800475c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800475c:	b5b0      	push	{r4, r5, r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2241      	movs	r2, #65	; 0x41
 800476a:	5c9b      	ldrb	r3, [r3, r2]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	001a      	movs	r2, r3
 8004770:	2328      	movs	r3, #40	; 0x28
 8004772:	4013      	ands	r3, r2
 8004774:	2b28      	cmp	r3, #40	; 0x28
 8004776:	d000      	beq.n	800477a <I2C_ITAddrCplt+0x1e>
 8004778:	e088      	b.n	800488c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	b2da      	uxtb	r2, r3
 8004784:	250f      	movs	r5, #15
 8004786:	197b      	adds	r3, r7, r5
 8004788:	2101      	movs	r1, #1
 800478a:	400a      	ands	r2, r1
 800478c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	b29a      	uxth	r2, r3
 8004798:	200c      	movs	r0, #12
 800479a:	183b      	adds	r3, r7, r0
 800479c:	21fe      	movs	r1, #254	; 0xfe
 800479e:	400a      	ands	r2, r1
 80047a0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	240a      	movs	r4, #10
 80047ac:	193b      	adds	r3, r7, r4
 80047ae:	0592      	lsls	r2, r2, #22
 80047b0:	0d92      	lsrs	r2, r2, #22
 80047b2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	2308      	movs	r3, #8
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	21fe      	movs	r1, #254	; 0xfe
 80047c2:	400a      	ands	r2, r1
 80047c4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d148      	bne.n	8004860 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80047ce:	0021      	movs	r1, r4
 80047d0:	187b      	adds	r3, r7, r1
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	09db      	lsrs	r3, r3, #7
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	183b      	adds	r3, r7, r0
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	4053      	eors	r3, r2
 80047de:	b29b      	uxth	r3, r3
 80047e0:	001a      	movs	r2, r3
 80047e2:	2306      	movs	r3, #6
 80047e4:	4013      	ands	r3, r2
 80047e6:	d120      	bne.n	800482a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80047e8:	183b      	adds	r3, r7, r0
 80047ea:	187a      	adds	r2, r7, r1
 80047ec:	8812      	ldrh	r2, [r2, #0]
 80047ee:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d14c      	bne.n	800489c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2208      	movs	r2, #8
 800480e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2240      	movs	r2, #64	; 0x40
 8004814:	2100      	movs	r1, #0
 8004816:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004818:	183b      	adds	r3, r7, r0
 800481a:	881a      	ldrh	r2, [r3, #0]
 800481c:	197b      	adds	r3, r7, r5
 800481e:	7819      	ldrb	r1, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0018      	movs	r0, r3
 8004824:	f7ff fb0a 	bl	8003e3c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004828:	e038      	b.n	800489c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800482a:	240c      	movs	r4, #12
 800482c:	193b      	adds	r3, r7, r4
 800482e:	2208      	movs	r2, #8
 8004830:	18ba      	adds	r2, r7, r2
 8004832:	8812      	ldrh	r2, [r2, #0]
 8004834:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004836:	2380      	movs	r3, #128	; 0x80
 8004838:	021a      	lsls	r2, r3, #8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0011      	movs	r1, r2
 800483e:	0018      	movs	r0, r3
 8004840:	f000 ff6c 	bl	800571c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2240      	movs	r2, #64	; 0x40
 8004848:	2100      	movs	r1, #0
 800484a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800484c:	193b      	adds	r3, r7, r4
 800484e:	881a      	ldrh	r2, [r3, #0]
 8004850:	230f      	movs	r3, #15
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	7819      	ldrb	r1, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f7ff faef 	bl	8003e3c <HAL_I2C_AddrCallback>
}
 800485e:	e01d      	b.n	800489c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	021a      	lsls	r2, r3, #8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0011      	movs	r1, r2
 8004868:	0018      	movs	r0, r3
 800486a:	f000 ff57 	bl	800571c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2240      	movs	r2, #64	; 0x40
 8004872:	2100      	movs	r1, #0
 8004874:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004876:	230c      	movs	r3, #12
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	881a      	ldrh	r2, [r3, #0]
 800487c:	230f      	movs	r3, #15
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	7819      	ldrb	r1, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	0018      	movs	r0, r3
 8004886:	f7ff fad9 	bl	8003e3c <HAL_I2C_AddrCallback>
}
 800488a:	e007      	b.n	800489c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2208      	movs	r2, #8
 8004892:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2240      	movs	r2, #64	; 0x40
 8004898:	2100      	movs	r1, #0
 800489a:	5499      	strb	r1, [r3, r2]
}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b004      	add	sp, #16
 80048a2:	bdb0      	pop	{r4, r5, r7, pc}

080048a4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2242      	movs	r2, #66	; 0x42
 80048b0:	2100      	movs	r1, #0
 80048b2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2241      	movs	r2, #65	; 0x41
 80048b8:	5c9b      	ldrb	r3, [r3, r2]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b21      	cmp	r3, #33	; 0x21
 80048be:	d117      	bne.n	80048f0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2241      	movs	r2, #65	; 0x41
 80048c4:	2120      	movs	r1, #32
 80048c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2211      	movs	r2, #17
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2101      	movs	r1, #1
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 ff1f 	bl	800571c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2240      	movs	r2, #64	; 0x40
 80048e2:	2100      	movs	r1, #0
 80048e4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f7ff fa87 	bl	8003dfc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048ee:	e016      	b.n	800491e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2241      	movs	r2, #65	; 0x41
 80048f4:	2120      	movs	r1, #32
 80048f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2212      	movs	r2, #18
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2102      	movs	r1, #2
 8004908:	0018      	movs	r0, r3
 800490a:	f000 ff07 	bl	800571c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2240      	movs	r2, #64	; 0x40
 8004912:	2100      	movs	r1, #0
 8004914:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	0018      	movs	r0, r3
 800491a:	f7ff fa77 	bl	8003e0c <HAL_I2C_MasterRxCpltCallback>
}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	46bd      	mov	sp, r7
 8004922:	b002      	add	sp, #8
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2242      	movs	r2, #66	; 0x42
 800493c:	2100      	movs	r1, #0
 800493e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	0b9b      	lsrs	r3, r3, #14
 8004944:	001a      	movs	r2, r3
 8004946:	2301      	movs	r3, #1
 8004948:	4013      	ands	r3, r2
 800494a:	d008      	beq.n	800495e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4925      	ldr	r1, [pc, #148]	; (80049ec <I2C_ITSlaveSeqCplt+0xc4>)
 8004958:	400a      	ands	r2, r1
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	e00d      	b.n	800497a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	0bdb      	lsrs	r3, r3, #15
 8004962:	001a      	movs	r2, r3
 8004964:	2301      	movs	r3, #1
 8004966:	4013      	ands	r3, r2
 8004968:	d007      	beq.n	800497a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	491e      	ldr	r1, [pc, #120]	; (80049f0 <I2C_ITSlaveSeqCplt+0xc8>)
 8004976:	400a      	ands	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2241      	movs	r2, #65	; 0x41
 800497e:	5c9b      	ldrb	r3, [r3, r2]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b29      	cmp	r3, #41	; 0x29
 8004984:	d114      	bne.n	80049b0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2241      	movs	r2, #65	; 0x41
 800498a:	2128      	movs	r1, #40	; 0x28
 800498c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2221      	movs	r2, #33	; 0x21
 8004992:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2101      	movs	r1, #1
 8004998:	0018      	movs	r0, r3
 800499a:	f000 febf 	bl	800571c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2240      	movs	r2, #64	; 0x40
 80049a2:	2100      	movs	r1, #0
 80049a4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7ff fa37 	bl	8003e1c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80049ae:	e019      	b.n	80049e4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2241      	movs	r2, #65	; 0x41
 80049b4:	5c9b      	ldrb	r3, [r3, r2]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b2a      	cmp	r3, #42	; 0x2a
 80049ba:	d113      	bne.n	80049e4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2241      	movs	r2, #65	; 0x41
 80049c0:	2128      	movs	r1, #40	; 0x28
 80049c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2222      	movs	r2, #34	; 0x22
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2102      	movs	r1, #2
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 fea4 	bl	800571c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2240      	movs	r2, #64	; 0x40
 80049d8:	2100      	movs	r1, #0
 80049da:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	0018      	movs	r0, r3
 80049e0:	f7ff fa24 	bl	8003e2c <HAL_I2C_SlaveRxCpltCallback>
}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b004      	add	sp, #16
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	ffffbfff 	.word	0xffffbfff
 80049f0:	ffff7fff 	.word	0xffff7fff

080049f4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2220      	movs	r2, #32
 8004a08:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2241      	movs	r2, #65	; 0x41
 8004a0e:	5c9b      	ldrb	r3, [r3, r2]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b21      	cmp	r3, #33	; 0x21
 8004a14:	d108      	bne.n	8004a28 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2101      	movs	r1, #1
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f000 fe7e 	bl	800571c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2211      	movs	r2, #17
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
 8004a26:	e00d      	b.n	8004a44 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2241      	movs	r2, #65	; 0x41
 8004a2c:	5c9b      	ldrb	r3, [r3, r2]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b22      	cmp	r3, #34	; 0x22
 8004a32:	d107      	bne.n	8004a44 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2102      	movs	r1, #2
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f000 fe6f 	bl	800571c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2212      	movs	r2, #18
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4950      	ldr	r1, [pc, #320]	; (8004b90 <I2C_ITMasterCplt+0x19c>)
 8004a50:	400a      	ands	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a4d      	ldr	r2, [pc, #308]	; (8004b94 <I2C_ITMasterCplt+0x1a0>)
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	001a      	movs	r2, r3
 8004a66:	2301      	movs	r3, #1
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2210      	movs	r2, #16
 8004a72:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	2204      	movs	r2, #4
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2241      	movs	r2, #65	; 0x41
 8004a84:	5c9b      	ldrb	r3, [r3, r2]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b60      	cmp	r3, #96	; 0x60
 8004a8a:	d10b      	bne.n	8004aa4 <I2C_ITMasterCplt+0xb0>
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	089b      	lsrs	r3, r3, #2
 8004a90:	001a      	movs	r2, r3
 8004a92:	2301      	movs	r3, #1
 8004a94:	4013      	ands	r3, r2
 8004a96:	d005      	beq.n	8004aa4 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 faff 	bl	80050aa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2241      	movs	r2, #65	; 0x41
 8004ab6:	5c9b      	ldrb	r3, [r3, r2]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b60      	cmp	r3, #96	; 0x60
 8004abc:	d002      	beq.n	8004ac4 <I2C_ITMasterCplt+0xd0>
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	0011      	movs	r1, r2
 8004acc:	0018      	movs	r0, r3
 8004ace:	f000 f9e1 	bl	8004e94 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ad2:	e058      	b.n	8004b86 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2241      	movs	r2, #65	; 0x41
 8004ad8:	5c9b      	ldrb	r3, [r3, r2]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b21      	cmp	r3, #33	; 0x21
 8004ade:	d126      	bne.n	8004b2e <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2241      	movs	r2, #65	; 0x41
 8004ae4:	2120      	movs	r1, #32
 8004ae6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2242      	movs	r2, #66	; 0x42
 8004af2:	5c9b      	ldrb	r3, [r3, r2]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d10c      	bne.n	8004b14 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2242      	movs	r2, #66	; 0x42
 8004afe:	2100      	movs	r1, #0
 8004b00:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2240      	movs	r2, #64	; 0x40
 8004b06:	2100      	movs	r1, #0
 8004b08:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7ff f9ad 	bl	8003e6c <HAL_I2C_MemTxCpltCallback>
}
 8004b12:	e038      	b.n	8004b86 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2242      	movs	r2, #66	; 0x42
 8004b18:	2100      	movs	r1, #0
 8004b1a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2240      	movs	r2, #64	; 0x40
 8004b20:	2100      	movs	r1, #0
 8004b22:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	0018      	movs	r0, r3
 8004b28:	f7ff f968 	bl	8003dfc <HAL_I2C_MasterTxCpltCallback>
}
 8004b2c:	e02b      	b.n	8004b86 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2241      	movs	r2, #65	; 0x41
 8004b32:	5c9b      	ldrb	r3, [r3, r2]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b22      	cmp	r3, #34	; 0x22
 8004b38:	d125      	bne.n	8004b86 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2241      	movs	r2, #65	; 0x41
 8004b3e:	2120      	movs	r1, #32
 8004b40:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2242      	movs	r2, #66	; 0x42
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b40      	cmp	r3, #64	; 0x40
 8004b52:	d10c      	bne.n	8004b6e <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2242      	movs	r2, #66	; 0x42
 8004b58:	2100      	movs	r1, #0
 8004b5a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2240      	movs	r2, #64	; 0x40
 8004b60:	2100      	movs	r1, #0
 8004b62:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	0018      	movs	r0, r3
 8004b68:	f7ff f988 	bl	8003e7c <HAL_I2C_MemRxCpltCallback>
}
 8004b6c:	e00b      	b.n	8004b86 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2242      	movs	r2, #66	; 0x42
 8004b72:	2100      	movs	r1, #0
 8004b74:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2240      	movs	r2, #64	; 0x40
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f7ff f943 	bl	8003e0c <HAL_I2C_MasterRxCpltCallback>
}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b006      	add	sp, #24
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	fe00e800 	.word	0xfe00e800
 8004b94:	ffff0000 	.word	0xffff0000

08004b98 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bae:	200f      	movs	r0, #15
 8004bb0:	183b      	adds	r3, r7, r0
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	2141      	movs	r1, #65	; 0x41
 8004bb6:	5c52      	ldrb	r2, [r2, r1]
 8004bb8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bc2:	183b      	adds	r3, r7, r0
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b21      	cmp	r3, #33	; 0x21
 8004bc8:	d003      	beq.n	8004bd2 <I2C_ITSlaveCplt+0x3a>
 8004bca:	183b      	adds	r3, r7, r0
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b29      	cmp	r3, #41	; 0x29
 8004bd0:	d109      	bne.n	8004be6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004bd2:	4a7d      	ldr	r2, [pc, #500]	; (8004dc8 <I2C_ITSlaveCplt+0x230>)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	0011      	movs	r1, r2
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f000 fd9f 	bl	800571c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2221      	movs	r2, #33	; 0x21
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30
 8004be4:	e011      	b.n	8004c0a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004be6:	220f      	movs	r2, #15
 8004be8:	18bb      	adds	r3, r7, r2
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b22      	cmp	r3, #34	; 0x22
 8004bee:	d003      	beq.n	8004bf8 <I2C_ITSlaveCplt+0x60>
 8004bf0:	18bb      	adds	r3, r7, r2
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf6:	d108      	bne.n	8004c0a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004bf8:	4a74      	ldr	r2, [pc, #464]	; (8004dcc <I2C_ITSlaveCplt+0x234>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	0011      	movs	r1, r2
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f000 fd8c 	bl	800571c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2222      	movs	r2, #34	; 0x22
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2180      	movs	r1, #128	; 0x80
 8004c16:	0209      	lsls	r1, r1, #8
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	496a      	ldr	r1, [pc, #424]	; (8004dd0 <I2C_ITSlaveCplt+0x238>)
 8004c28:	400a      	ands	r2, r1
 8004c2a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f000 fa3b 	bl	80050aa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	0b9b      	lsrs	r3, r3, #14
 8004c38:	001a      	movs	r2, r3
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4962      	ldr	r1, [pc, #392]	; (8004dd4 <I2C_ITSlaveCplt+0x23c>)
 8004c4c:	400a      	ands	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d020      	beq.n	8004c9a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c66:	e018      	b.n	8004c9a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	0bdb      	lsrs	r3, r3, #15
 8004c6c:	001a      	movs	r2, r3
 8004c6e:	2301      	movs	r3, #1
 8004c70:	4013      	ands	r3, r2
 8004c72:	d012      	beq.n	8004c9a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4956      	ldr	r1, [pc, #344]	; (8004dd8 <I2C_ITSlaveCplt+0x240>)
 8004c80:	400a      	ands	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d006      	beq.n	8004c9a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	089b      	lsrs	r3, r3, #2
 8004c9e:	001a      	movs	r2, r3
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d020      	beq.n	8004ce8 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2204      	movs	r2, #4
 8004caa:	4393      	bics	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2242      	movs	r2, #66	; 0x42
 8004d02:	2100      	movs	r1, #0
 8004d04:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d013      	beq.n	8004d3c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f000 f8b9 	bl	8004e94 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2241      	movs	r2, #65	; 0x41
 8004d26:	5c9b      	ldrb	r3, [r3, r2]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b28      	cmp	r3, #40	; 0x28
 8004d2c:	d147      	bne.n	8004dbe <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	0011      	movs	r1, r2
 8004d34:	0018      	movs	r0, r3
 8004d36:	f000 f853 	bl	8004de0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d3a:	e040      	b.n	8004dbe <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	4a26      	ldr	r2, [pc, #152]	; (8004ddc <I2C_ITSlaveCplt+0x244>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d016      	beq.n	8004d74 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f7ff fded 	bl	8004928 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a22      	ldr	r2, [pc, #136]	; (8004ddc <I2C_ITSlaveCplt+0x244>)
 8004d52:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2241      	movs	r2, #65	; 0x41
 8004d58:	2120      	movs	r1, #32
 8004d5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2240      	movs	r2, #64	; 0x40
 8004d66:	2100      	movs	r1, #0
 8004d68:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7ff f875 	bl	8003e5c <HAL_I2C_ListenCpltCallback>
}
 8004d72:	e024      	b.n	8004dbe <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2241      	movs	r2, #65	; 0x41
 8004d78:	5c9b      	ldrb	r3, [r3, r2]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b22      	cmp	r3, #34	; 0x22
 8004d7e:	d10f      	bne.n	8004da0 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2241      	movs	r2, #65	; 0x41
 8004d84:	2120      	movs	r1, #32
 8004d86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2240      	movs	r2, #64	; 0x40
 8004d92:	2100      	movs	r1, #0
 8004d94:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7ff f847 	bl	8003e2c <HAL_I2C_SlaveRxCpltCallback>
}
 8004d9e:	e00e      	b.n	8004dbe <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2241      	movs	r2, #65	; 0x41
 8004da4:	2120      	movs	r1, #32
 8004da6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2240      	movs	r2, #64	; 0x40
 8004db2:	2100      	movs	r1, #0
 8004db4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	0018      	movs	r0, r3
 8004dba:	f7ff f82f 	bl	8003e1c <HAL_I2C_SlaveTxCpltCallback>
}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b006      	add	sp, #24
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	00008001 	.word	0x00008001
 8004dcc:	00008002 	.word	0x00008002
 8004dd0:	fe00e800 	.word	0xfe00e800
 8004dd4:	ffffbfff 	.word	0xffffbfff
 8004dd8:	ffff7fff 	.word	0xffff7fff
 8004ddc:	ffff0000 	.word	0xffff0000

08004de0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <I2C_ITListenCplt+0xac>)
 8004dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2241      	movs	r2, #65	; 0x41
 8004dfa:	2120      	movs	r1, #32
 8004dfc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2242      	movs	r2, #66	; 0x42
 8004e02:	2100      	movs	r1, #0
 8004e04:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	089b      	lsrs	r3, r3, #2
 8004e10:	001a      	movs	r2, r3
 8004e12:	2301      	movs	r3, #1
 8004e14:	4013      	ands	r3, r2
 8004e16:	d022      	beq.n	8004e5e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d012      	beq.n	8004e5e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	2204      	movs	r2, #4
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e5e:	4a0c      	ldr	r2, [pc, #48]	; (8004e90 <I2C_ITListenCplt+0xb0>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	0011      	movs	r1, r2
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 fc59 	bl	800571c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2210      	movs	r2, #16
 8004e70:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2240      	movs	r2, #64	; 0x40
 8004e76:	2100      	movs	r1, #0
 8004e78:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f7fe ffed 	bl	8003e5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b002      	add	sp, #8
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	ffff0000 	.word	0xffff0000
 8004e90:	00008003 	.word	0x00008003

08004e94 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e9e:	200f      	movs	r0, #15
 8004ea0:	183b      	adds	r3, r7, r0
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	2141      	movs	r1, #65	; 0x41
 8004ea6:	5c52      	ldrb	r2, [r2, r1]
 8004ea8:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2242      	movs	r2, #66	; 0x42
 8004eae:	2100      	movs	r1, #0
 8004eb0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a62      	ldr	r2, [pc, #392]	; (8005040 <I2C_ITError+0x1ac>)
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004eca:	183b      	adds	r3, r7, r0
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b28      	cmp	r3, #40	; 0x28
 8004ed0:	d007      	beq.n	8004ee2 <I2C_ITError+0x4e>
 8004ed2:	183b      	adds	r3, r7, r0
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b29      	cmp	r3, #41	; 0x29
 8004ed8:	d003      	beq.n	8004ee2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004eda:	183b      	adds	r3, r7, r0
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b2a      	cmp	r3, #42	; 0x2a
 8004ee0:	d10c      	bne.n	8004efc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2103      	movs	r1, #3
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f000 fc18 	bl	800571c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2241      	movs	r2, #65	; 0x41
 8004ef0:	2128      	movs	r1, #40	; 0x28
 8004ef2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a53      	ldr	r2, [pc, #332]	; (8005044 <I2C_ITError+0x1b0>)
 8004ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8004efa:	e012      	b.n	8004f22 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004efc:	4a52      	ldr	r2, [pc, #328]	; (8005048 <I2C_ITError+0x1b4>)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0011      	movs	r1, r2
 8004f02:	0018      	movs	r0, r3
 8004f04:	f000 fc0a 	bl	800571c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2241      	movs	r2, #65	; 0x41
 8004f0c:	5c9b      	ldrb	r3, [r3, r2]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b60      	cmp	r3, #96	; 0x60
 8004f12:	d003      	beq.n	8004f1c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2241      	movs	r2, #65	; 0x41
 8004f18:	2120      	movs	r1, #32
 8004f1a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d03b      	beq.n	8004fa8 <I2C_ITError+0x114>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b11      	cmp	r3, #17
 8004f34:	d002      	beq.n	8004f3c <I2C_ITError+0xa8>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b21      	cmp	r3, #33	; 0x21
 8004f3a:	d135      	bne.n	8004fa8 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	01db      	lsls	r3, r3, #7
 8004f46:	401a      	ands	r2, r3
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	01db      	lsls	r3, r3, #7
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d107      	bne.n	8004f60 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	493c      	ldr	r1, [pc, #240]	; (800504c <I2C_ITError+0x1b8>)
 8004f5c:	400a      	ands	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	0018      	movs	r0, r3
 8004f66:	f7fd ffdb 	bl	8002f20 <HAL_DMA_GetState>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d016      	beq.n	8004f9e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	4a36      	ldr	r2, [pc, #216]	; (8005050 <I2C_ITError+0x1bc>)
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2240      	movs	r2, #64	; 0x40
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	0018      	movs	r0, r3
 8004f86:	f7fd fe9f 	bl	8002cc8 <HAL_DMA_Abort_IT>
 8004f8a:	1e03      	subs	r3, r0, #0
 8004f8c:	d051      	beq.n	8005032 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	0018      	movs	r0, r3
 8004f9a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f9c:	e049      	b.n	8005032 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f000 f859 	bl	8005058 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fa6:	e044      	b.n	8005032 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d03b      	beq.n	8005028 <I2C_ITError+0x194>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b12      	cmp	r3, #18
 8004fb4:	d002      	beq.n	8004fbc <I2C_ITError+0x128>
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b22      	cmp	r3, #34	; 0x22
 8004fba:	d135      	bne.n	8005028 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d107      	bne.n	8004fe0 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	491e      	ldr	r1, [pc, #120]	; (8005054 <I2C_ITError+0x1c0>)
 8004fdc:	400a      	ands	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f7fd ff9b 	bl	8002f20 <HAL_DMA_GetState>
 8004fea:	0003      	movs	r3, r0
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d016      	beq.n	800501e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff4:	4a16      	ldr	r2, [pc, #88]	; (8005050 <I2C_ITError+0x1bc>)
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2240      	movs	r2, #64	; 0x40
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005004:	0018      	movs	r0, r3
 8005006:	f7fd fe5f 	bl	8002cc8 <HAL_DMA_Abort_IT>
 800500a:	1e03      	subs	r3, r0, #0
 800500c:	d013      	beq.n	8005036 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005018:	0018      	movs	r0, r3
 800501a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800501c:	e00b      	b.n	8005036 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	0018      	movs	r0, r3
 8005022:	f000 f819 	bl	8005058 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005026:	e006      	b.n	8005036 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	0018      	movs	r0, r3
 800502c:	f000 f814 	bl	8005058 <I2C_TreatErrorCallback>
  }
}
 8005030:	e002      	b.n	8005038 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	e000      	b.n	8005038 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005036:	46c0      	nop			; (mov r8, r8)
}
 8005038:	46c0      	nop			; (mov r8, r8)
 800503a:	46bd      	mov	sp, r7
 800503c:	b004      	add	sp, #16
 800503e:	bd80      	pop	{r7, pc}
 8005040:	ffff0000 	.word	0xffff0000
 8005044:	08004131 	.word	0x08004131
 8005048:	00008003 	.word	0x00008003
 800504c:	ffffbfff 	.word	0xffffbfff
 8005050:	08005263 	.word	0x08005263
 8005054:	ffff7fff 	.word	0xffff7fff

08005058 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2241      	movs	r2, #65	; 0x41
 8005064:	5c9b      	ldrb	r3, [r3, r2]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b60      	cmp	r3, #96	; 0x60
 800506a:	d10f      	bne.n	800508c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2241      	movs	r2, #65	; 0x41
 8005070:	2120      	movs	r1, #32
 8005072:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2240      	movs	r2, #64	; 0x40
 800507e:	2100      	movs	r1, #0
 8005080:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	0018      	movs	r0, r3
 8005086:	f7fe ff09 	bl	8003e9c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800508a:	e00a      	b.n	80050a2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2240      	movs	r2, #64	; 0x40
 8005096:	2100      	movs	r1, #0
 8005098:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	0018      	movs	r0, r3
 800509e:	f7fe fef5 	bl	8003e8c <HAL_I2C_ErrorCallback>
}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b002      	add	sp, #8
 80050a8:	bd80      	pop	{r7, pc}

080050aa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2202      	movs	r2, #2
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d103      	bne.n	80050c8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2200      	movs	r2, #0
 80050c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	2201      	movs	r2, #1
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d007      	beq.n	80050e6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2101      	movs	r1, #1
 80050e2:	430a      	orrs	r2, r1
 80050e4:	619a      	str	r2, [r3, #24]
  }
}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b002      	add	sp, #8
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4920      	ldr	r1, [pc, #128]	; (800518c <I2C_DMAMasterTransmitCplt+0x9c>)
 800510a:	400a      	ands	r2, r1
 800510c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d105      	bne.n	8005124 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2120      	movs	r1, #32
 800511c:	0018      	movs	r0, r3
 800511e:	f000 fa95 	bl	800564c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005122:	e02e      	b.n	8005182 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800512c:	189a      	adds	r2, r3, r2
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	2bff      	cmp	r3, #255	; 0xff
 800513a:	d903      	bls.n	8005144 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	22ff      	movs	r2, #255	; 0xff
 8005140:	851a      	strh	r2, [r3, #40]	; 0x28
 8005142:	e004      	b.n	800514e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	0019      	movs	r1, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3328      	adds	r3, #40	; 0x28
 800515e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005164:	f7fd fd2a 	bl	8002bbc <HAL_DMA_Start_IT>
 8005168:	1e03      	subs	r3, r0, #0
 800516a:	d005      	beq.n	8005178 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2110      	movs	r1, #16
 8005170:	0018      	movs	r0, r3
 8005172:	f7ff fe8f 	bl	8004e94 <I2C_ITError>
}
 8005176:	e004      	b.n	8005182 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2140      	movs	r1, #64	; 0x40
 800517c:	0018      	movs	r0, r3
 800517e:	f000 fa65 	bl	800564c <I2C_Enable_IRQ>
}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	46bd      	mov	sp, r7
 8005186:	b004      	add	sp, #16
 8005188:	bd80      	pop	{r7, pc}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	ffffbfff 	.word	0xffffbfff

08005190 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4920      	ldr	r1, [pc, #128]	; (800522c <I2C_DMAMasterReceiveCplt+0x9c>)
 80051aa:	400a      	ands	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d105      	bne.n	80051c4 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2120      	movs	r1, #32
 80051bc:	0018      	movs	r0, r3
 80051be:	f000 fa45 	bl	800564c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80051c2:	e02e      	b.n	8005222 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80051cc:	189a      	adds	r2, r3, r2
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2bff      	cmp	r3, #255	; 0xff
 80051da:	d903      	bls.n	80051e4 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	22ff      	movs	r2, #255	; 0xff
 80051e0:	851a      	strh	r2, [r3, #40]	; 0x28
 80051e2:	e004      	b.n	80051ee <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3324      	adds	r3, #36	; 0x24
 80051f8:	0019      	movs	r1, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005204:	f7fd fcda 	bl	8002bbc <HAL_DMA_Start_IT>
 8005208:	1e03      	subs	r3, r0, #0
 800520a:	d005      	beq.n	8005218 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2110      	movs	r1, #16
 8005210:	0018      	movs	r0, r3
 8005212:	f7ff fe3f 	bl	8004e94 <I2C_ITError>
}
 8005216:	e004      	b.n	8005222 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2140      	movs	r1, #64	; 0x40
 800521c:	0018      	movs	r0, r3
 800521e:	f000 fa15 	bl	800564c <I2C_Enable_IRQ>
}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	46bd      	mov	sp, r7
 8005226:	b004      	add	sp, #16
 8005228:	bd80      	pop	{r7, pc}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	ffff7fff 	.word	0xffff7fff

08005230 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2180      	movs	r1, #128	; 0x80
 800524a:	0209      	lsls	r1, r1, #8
 800524c:	430a      	orrs	r2, r1
 800524e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2110      	movs	r1, #16
 8005254:	0018      	movs	r0, r3
 8005256:	f7ff fe1d 	bl	8004e94 <I2C_ITError>
}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	46bd      	mov	sp, r7
 800525e:	b004      	add	sp, #16
 8005260:	bd80      	pop	{r7, pc}

08005262 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	2200      	movs	r2, #0
 800527e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528c:	2200      	movs	r2, #0
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	0018      	movs	r0, r3
 8005294:	f7ff fee0 	bl	8005058 <I2C_TreatErrorCallback>
}
 8005298:	46c0      	nop			; (mov r8, r8)
 800529a:	46bd      	mov	sp, r7
 800529c:	b004      	add	sp, #16
 800529e:	bd80      	pop	{r7, pc}

080052a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	1dfb      	adds	r3, r7, #7
 80052ae:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b0:	e021      	b.n	80052f6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	d01e      	beq.n	80052f6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b8:	f7fc fdb6 	bl	8001e28 <HAL_GetTick>
 80052bc:	0002      	movs	r2, r0
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d302      	bcc.n	80052ce <I2C_WaitOnFlagUntilTimeout+0x2e>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d113      	bne.n	80052f6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	2220      	movs	r2, #32
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2241      	movs	r2, #65	; 0x41
 80052de:	2120      	movs	r1, #32
 80052e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2242      	movs	r2, #66	; 0x42
 80052e6:	2100      	movs	r1, #0
 80052e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2240      	movs	r2, #64	; 0x40
 80052ee:	2100      	movs	r1, #0
 80052f0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e00f      	b.n	8005316 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	4013      	ands	r3, r2
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	425a      	negs	r2, r3
 8005306:	4153      	adcs	r3, r2
 8005308:	b2db      	uxtb	r3, r3
 800530a:	001a      	movs	r2, r3
 800530c:	1dfb      	adds	r3, r7, #7
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d0ce      	beq.n	80052b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	0018      	movs	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	b004      	add	sp, #16
 800531c:	bd80      	pop	{r7, pc}

0800531e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800532a:	e02b      	b.n	8005384 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	0018      	movs	r0, r3
 8005334:	f000 f8da 	bl	80054ec <I2C_IsAcknowledgeFailed>
 8005338:	1e03      	subs	r3, r0, #0
 800533a:	d001      	beq.n	8005340 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e029      	b.n	8005394 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	3301      	adds	r3, #1
 8005344:	d01e      	beq.n	8005384 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005346:	f7fc fd6f 	bl	8001e28 <HAL_GetTick>
 800534a:	0002      	movs	r2, r0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	429a      	cmp	r2, r3
 8005354:	d302      	bcc.n	800535c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d113      	bne.n	8005384 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	2220      	movs	r2, #32
 8005362:	431a      	orrs	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2241      	movs	r2, #65	; 0x41
 800536c:	2120      	movs	r1, #32
 800536e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2242      	movs	r2, #66	; 0x42
 8005374:	2100      	movs	r1, #0
 8005376:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2240      	movs	r2, #64	; 0x40
 800537c:	2100      	movs	r1, #0
 800537e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e007      	b.n	8005394 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	2202      	movs	r2, #2
 800538c:	4013      	ands	r3, r2
 800538e:	2b02      	cmp	r3, #2
 8005390:	d1cc      	bne.n	800532c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	0018      	movs	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	b004      	add	sp, #16
 800539a:	bd80      	pop	{r7, pc}

0800539c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053a8:	e028      	b.n	80053fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	0018      	movs	r0, r3
 80053b2:	f000 f89b 	bl	80054ec <I2C_IsAcknowledgeFailed>
 80053b6:	1e03      	subs	r3, r0, #0
 80053b8:	d001      	beq.n	80053be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e026      	b.n	800540c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053be:	f7fc fd33 	bl	8001e28 <HAL_GetTick>
 80053c2:	0002      	movs	r2, r0
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d302      	bcc.n	80053d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d113      	bne.n	80053fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	2220      	movs	r2, #32
 80053da:	431a      	orrs	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2241      	movs	r2, #65	; 0x41
 80053e4:	2120      	movs	r1, #32
 80053e6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2242      	movs	r2, #66	; 0x42
 80053ec:	2100      	movs	r1, #0
 80053ee:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2240      	movs	r2, #64	; 0x40
 80053f4:	2100      	movs	r1, #0
 80053f6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e007      	b.n	800540c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2220      	movs	r2, #32
 8005404:	4013      	ands	r3, r2
 8005406:	2b20      	cmp	r3, #32
 8005408:	d1cf      	bne.n	80053aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	b004      	add	sp, #16
 8005412:	bd80      	pop	{r7, pc}

08005414 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005420:	e055      	b.n	80054ce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	0018      	movs	r0, r3
 800542a:	f000 f85f 	bl	80054ec <I2C_IsAcknowledgeFailed>
 800542e:	1e03      	subs	r3, r0, #0
 8005430:	d001      	beq.n	8005436 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e053      	b.n	80054de <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	2220      	movs	r2, #32
 800543e:	4013      	ands	r3, r2
 8005440:	2b20      	cmp	r3, #32
 8005442:	d129      	bne.n	8005498 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2204      	movs	r2, #4
 800544c:	4013      	ands	r3, r2
 800544e:	2b04      	cmp	r3, #4
 8005450:	d105      	bne.n	800545e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	e03f      	b.n	80054de <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2220      	movs	r2, #32
 8005464:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	491d      	ldr	r1, [pc, #116]	; (80054e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005472:	400a      	ands	r2, r1
 8005474:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2241      	movs	r2, #65	; 0x41
 8005480:	2120      	movs	r1, #32
 8005482:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2242      	movs	r2, #66	; 0x42
 8005488:	2100      	movs	r1, #0
 800548a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2240      	movs	r2, #64	; 0x40
 8005490:	2100      	movs	r1, #0
 8005492:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e022      	b.n	80054de <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005498:	f7fc fcc6 	bl	8001e28 <HAL_GetTick>
 800549c:	0002      	movs	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d302      	bcc.n	80054ae <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10f      	bne.n	80054ce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	2220      	movs	r2, #32
 80054b4:	431a      	orrs	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2241      	movs	r2, #65	; 0x41
 80054be:	2120      	movs	r1, #32
 80054c0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2240      	movs	r2, #64	; 0x40
 80054c6:	2100      	movs	r1, #0
 80054c8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e007      	b.n	80054de <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	2204      	movs	r2, #4
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d1a2      	bne.n	8005422 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b004      	add	sp, #16
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	fe00e800 	.word	0xfe00e800

080054ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2210      	movs	r2, #16
 8005500:	4013      	ands	r3, r2
 8005502:	2b10      	cmp	r3, #16
 8005504:	d164      	bne.n	80055d0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	049b      	lsls	r3, r3, #18
 8005510:	401a      	ands	r2, r3
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	049b      	lsls	r3, r3, #18
 8005516:	429a      	cmp	r2, r3
 8005518:	d02b      	beq.n	8005572 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2180      	movs	r1, #128	; 0x80
 8005526:	01c9      	lsls	r1, r1, #7
 8005528:	430a      	orrs	r2, r1
 800552a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800552c:	e021      	b.n	8005572 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	3301      	adds	r3, #1
 8005532:	d01e      	beq.n	8005572 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005534:	f7fc fc78 	bl	8001e28 <HAL_GetTick>
 8005538:	0002      	movs	r2, r0
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	429a      	cmp	r2, r3
 8005542:	d302      	bcc.n	800554a <I2C_IsAcknowledgeFailed+0x5e>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d113      	bne.n	8005572 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	2220      	movs	r2, #32
 8005550:	431a      	orrs	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2241      	movs	r2, #65	; 0x41
 800555a:	2120      	movs	r1, #32
 800555c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2242      	movs	r2, #66	; 0x42
 8005562:	2100      	movs	r1, #0
 8005564:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2240      	movs	r2, #64	; 0x40
 800556a:	2100      	movs	r1, #0
 800556c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e02f      	b.n	80055d2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2220      	movs	r2, #32
 800557a:	4013      	ands	r3, r2
 800557c:	2b20      	cmp	r3, #32
 800557e:	d1d6      	bne.n	800552e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2210      	movs	r2, #16
 8005586:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2220      	movs	r2, #32
 800558e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	0018      	movs	r0, r3
 8005594:	f7ff fd89 	bl	80050aa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	490e      	ldr	r1, [pc, #56]	; (80055dc <I2C_IsAcknowledgeFailed+0xf0>)
 80055a4:	400a      	ands	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	2204      	movs	r2, #4
 80055ae:	431a      	orrs	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2241      	movs	r2, #65	; 0x41
 80055b8:	2120      	movs	r1, #32
 80055ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2242      	movs	r2, #66	; 0x42
 80055c0:	2100      	movs	r1, #0
 80055c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2240      	movs	r2, #64	; 0x40
 80055c8:	2100      	movs	r1, #0
 80055ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	0018      	movs	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b004      	add	sp, #16
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	fe00e800 	.word	0xfe00e800

080055e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	0008      	movs	r0, r1
 80055ea:	0011      	movs	r1, r2
 80055ec:	607b      	str	r3, [r7, #4]
 80055ee:	240a      	movs	r4, #10
 80055f0:	193b      	adds	r3, r7, r4
 80055f2:	1c02      	adds	r2, r0, #0
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	2009      	movs	r0, #9
 80055f8:	183b      	adds	r3, r7, r0
 80055fa:	1c0a      	adds	r2, r1, #0
 80055fc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	6a3a      	ldr	r2, [r7, #32]
 8005606:	0d51      	lsrs	r1, r2, #21
 8005608:	2280      	movs	r2, #128	; 0x80
 800560a:	00d2      	lsls	r2, r2, #3
 800560c:	400a      	ands	r2, r1
 800560e:	490e      	ldr	r1, [pc, #56]	; (8005648 <I2C_TransferConfig+0x68>)
 8005610:	430a      	orrs	r2, r1
 8005612:	43d2      	mvns	r2, r2
 8005614:	401a      	ands	r2, r3
 8005616:	0011      	movs	r1, r2
 8005618:	193b      	adds	r3, r7, r4
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	059b      	lsls	r3, r3, #22
 800561e:	0d9a      	lsrs	r2, r3, #22
 8005620:	183b      	adds	r3, r7, r0
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	0418      	lsls	r0, r3, #16
 8005626:	23ff      	movs	r3, #255	; 0xff
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	4003      	ands	r3, r0
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	431a      	orrs	r2, r3
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	431a      	orrs	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	46bd      	mov	sp, r7
 8005642:	b005      	add	sp, #20
 8005644:	bd90      	pop	{r4, r7, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	03ff63ff 	.word	0x03ff63ff

0800564c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	000a      	movs	r2, r1
 8005656:	1cbb      	adds	r3, r7, #2
 8005658:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005662:	4b2c      	ldr	r3, [pc, #176]	; (8005714 <I2C_Enable_IRQ+0xc8>)
 8005664:	429a      	cmp	r2, r3
 8005666:	d004      	beq.n	8005672 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800566c:	4b2a      	ldr	r3, [pc, #168]	; (8005718 <I2C_Enable_IRQ+0xcc>)
 800566e:	429a      	cmp	r2, r3
 8005670:	d121      	bne.n	80056b6 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005672:	1cbb      	adds	r3, r7, #2
 8005674:	2200      	movs	r2, #0
 8005676:	5e9b      	ldrsh	r3, [r3, r2]
 8005678:	2b00      	cmp	r3, #0
 800567a:	da03      	bge.n	8005684 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	22b8      	movs	r2, #184	; 0xb8
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005684:	1cbb      	adds	r3, r7, #2
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	2b10      	cmp	r3, #16
 800568a:	d103      	bne.n	8005694 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2290      	movs	r2, #144	; 0x90
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005694:	1cbb      	adds	r3, r7, #2
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	2b20      	cmp	r3, #32
 800569a:	d103      	bne.n	80056a4 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2260      	movs	r2, #96	; 0x60
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80056a4:	1cbb      	adds	r3, r7, #2
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	2b40      	cmp	r3, #64	; 0x40
 80056aa:	d127      	bne.n	80056fc <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2240      	movs	r2, #64	; 0x40
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80056b4:	e022      	b.n	80056fc <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80056b6:	1cbb      	adds	r3, r7, #2
 80056b8:	2200      	movs	r2, #0
 80056ba:	5e9b      	ldrsh	r3, [r3, r2]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	da03      	bge.n	80056c8 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	22b8      	movs	r2, #184	; 0xb8
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80056c8:	1cbb      	adds	r3, r7, #2
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	2201      	movs	r2, #1
 80056ce:	4013      	ands	r3, r2
 80056d0:	d003      	beq.n	80056da <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	22f2      	movs	r2, #242	; 0xf2
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80056da:	1cbb      	adds	r3, r7, #2
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	2202      	movs	r2, #2
 80056e0:	4013      	ands	r3, r2
 80056e2:	d003      	beq.n	80056ec <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	22f4      	movs	r2, #244	; 0xf4
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80056ec:	1cbb      	adds	r3, r7, #2
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d103      	bne.n	80056fc <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6819      	ldr	r1, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	430a      	orrs	r2, r1
 800570a:	601a      	str	r2, [r3, #0]
}
 800570c:	46c0      	nop			; (mov r8, r8)
 800570e:	46bd      	mov	sp, r7
 8005710:	b004      	add	sp, #16
 8005712:	bd80      	pop	{r7, pc}
 8005714:	08004359 	.word	0x08004359
 8005718:	08004571 	.word	0x08004571

0800571c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	000a      	movs	r2, r1
 8005726:	1cbb      	adds	r3, r7, #2
 8005728:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800572e:	1cbb      	adds	r3, r7, #2
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	2201      	movs	r2, #1
 8005734:	4013      	ands	r3, r2
 8005736:	d010      	beq.n	800575a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2242      	movs	r2, #66	; 0x42
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2241      	movs	r2, #65	; 0x41
 8005744:	5c9b      	ldrb	r3, [r3, r2]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	001a      	movs	r2, r3
 800574a:	2328      	movs	r3, #40	; 0x28
 800574c:	4013      	ands	r3, r2
 800574e:	2b28      	cmp	r3, #40	; 0x28
 8005750:	d003      	beq.n	800575a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	22b0      	movs	r2, #176	; 0xb0
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800575a:	1cbb      	adds	r3, r7, #2
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	2202      	movs	r2, #2
 8005760:	4013      	ands	r3, r2
 8005762:	d010      	beq.n	8005786 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2244      	movs	r2, #68	; 0x44
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2241      	movs	r2, #65	; 0x41
 8005770:	5c9b      	ldrb	r3, [r3, r2]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	001a      	movs	r2, r3
 8005776:	2328      	movs	r3, #40	; 0x28
 8005778:	4013      	ands	r3, r2
 800577a:	2b28      	cmp	r3, #40	; 0x28
 800577c:	d003      	beq.n	8005786 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	22b0      	movs	r2, #176	; 0xb0
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005786:	1cbb      	adds	r3, r7, #2
 8005788:	2200      	movs	r2, #0
 800578a:	5e9b      	ldrsh	r3, [r3, r2]
 800578c:	2b00      	cmp	r3, #0
 800578e:	da03      	bge.n	8005798 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	22b8      	movs	r2, #184	; 0xb8
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005798:	1cbb      	adds	r3, r7, #2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	2b10      	cmp	r3, #16
 800579e:	d103      	bne.n	80057a8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2290      	movs	r2, #144	; 0x90
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80057a8:	1cbb      	adds	r3, r7, #2
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d103      	bne.n	80057b8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2220      	movs	r2, #32
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80057b8:	1cbb      	adds	r3, r7, #2
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d103      	bne.n	80057c8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2240      	movs	r2, #64	; 0x40
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	43d9      	mvns	r1, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	400a      	ands	r2, r1
 80057d8:	601a      	str	r2, [r3, #0]
}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b004      	add	sp, #16
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2241      	movs	r2, #65	; 0x41
 80057f2:	5c9b      	ldrb	r3, [r3, r2]
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d138      	bne.n	800586c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2240      	movs	r2, #64	; 0x40
 80057fe:	5c9b      	ldrb	r3, [r3, r2]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005804:	2302      	movs	r3, #2
 8005806:	e032      	b.n	800586e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2240      	movs	r2, #64	; 0x40
 800580c:	2101      	movs	r1, #1
 800580e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2241      	movs	r2, #65	; 0x41
 8005814:	2124      	movs	r1, #36	; 0x24
 8005816:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2101      	movs	r1, #1
 8005824:	438a      	bics	r2, r1
 8005826:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4911      	ldr	r1, [pc, #68]	; (8005878 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005834:	400a      	ands	r2, r1
 8005836:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6819      	ldr	r1, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2101      	movs	r1, #1
 8005854:	430a      	orrs	r2, r1
 8005856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2241      	movs	r2, #65	; 0x41
 800585c:	2120      	movs	r1, #32
 800585e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2240      	movs	r2, #64	; 0x40
 8005864:	2100      	movs	r1, #0
 8005866:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	0018      	movs	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	b002      	add	sp, #8
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	ffffefff 	.word	0xffffefff

0800587c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2241      	movs	r2, #65	; 0x41
 800588a:	5c9b      	ldrb	r3, [r3, r2]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b20      	cmp	r3, #32
 8005890:	d139      	bne.n	8005906 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2240      	movs	r2, #64	; 0x40
 8005896:	5c9b      	ldrb	r3, [r3, r2]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800589c:	2302      	movs	r3, #2
 800589e:	e033      	b.n	8005908 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2240      	movs	r2, #64	; 0x40
 80058a4:	2101      	movs	r1, #1
 80058a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2241      	movs	r2, #65	; 0x41
 80058ac:	2124      	movs	r1, #36	; 0x24
 80058ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2101      	movs	r1, #1
 80058bc:	438a      	bics	r2, r1
 80058be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4a11      	ldr	r2, [pc, #68]	; (8005910 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2101      	movs	r1, #1
 80058ee:	430a      	orrs	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2241      	movs	r2, #65	; 0x41
 80058f6:	2120      	movs	r1, #32
 80058f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2240      	movs	r2, #64	; 0x40
 80058fe:	2100      	movs	r1, #0
 8005900:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e000      	b.n	8005908 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005906:	2302      	movs	r3, #2
  }
}
 8005908:	0018      	movs	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	b004      	add	sp, #16
 800590e:	bd80      	pop	{r7, pc}
 8005910:	fffff0ff 	.word	0xfffff0ff

08005914 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800591c:	4b19      	ldr	r3, [pc, #100]	; (8005984 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a19      	ldr	r2, [pc, #100]	; (8005988 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005922:	4013      	ands	r3, r2
 8005924:	0019      	movs	r1, r3
 8005926:	4b17      	ldr	r3, [pc, #92]	; (8005984 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	430a      	orrs	r2, r1
 800592c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	429a      	cmp	r2, r3
 8005936:	d11f      	bne.n	8005978 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005938:	4b14      	ldr	r3, [pc, #80]	; (800598c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	0013      	movs	r3, r2
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	189b      	adds	r3, r3, r2
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	4912      	ldr	r1, [pc, #72]	; (8005990 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005946:	0018      	movs	r0, r3
 8005948:	f7fa fbee 	bl	8000128 <__udivsi3>
 800594c:	0003      	movs	r3, r0
 800594e:	3301      	adds	r3, #1
 8005950:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005952:	e008      	b.n	8005966 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3b01      	subs	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e001      	b.n	8005966 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e009      	b.n	800597a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005966:	4b07      	ldr	r3, [pc, #28]	; (8005984 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005968:	695a      	ldr	r2, [r3, #20]
 800596a:	2380      	movs	r3, #128	; 0x80
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	401a      	ands	r2, r3
 8005970:	2380      	movs	r3, #128	; 0x80
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	429a      	cmp	r2, r3
 8005976:	d0ed      	beq.n	8005954 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	0018      	movs	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	b004      	add	sp, #16
 8005980:	bd80      	pop	{r7, pc}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	40007000 	.word	0x40007000
 8005988:	fffff9ff 	.word	0xfffff9ff
 800598c:	20000000 	.word	0x20000000
 8005990:	000f4240 	.word	0x000f4240

08005994 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005998:	4b03      	ldr	r3, [pc, #12]	; (80059a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	23e0      	movs	r3, #224	; 0xe0
 800599e:	01db      	lsls	r3, r3, #7
 80059a0:	4013      	ands	r3, r2
}
 80059a2:	0018      	movs	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40021000 	.word	0x40021000

080059ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f000 fb56 	bl	800606c <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2201      	movs	r2, #1
 80059c6:	4013      	ands	r3, r2
 80059c8:	d100      	bne.n	80059cc <HAL_RCC_OscConfig+0x20>
 80059ca:	e07d      	b.n	8005ac8 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059cc:	4bc3      	ldr	r3, [pc, #780]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	2238      	movs	r2, #56	; 0x38
 80059d2:	4013      	ands	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059d6:	4bc1      	ldr	r3, [pc, #772]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	2203      	movs	r2, #3
 80059dc:	4013      	ands	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d102      	bne.n	80059ec <HAL_RCC_OscConfig+0x40>
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d002      	beq.n	80059f2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d10c      	bne.n	8005a0c <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f2:	4bba      	ldr	r3, [pc, #744]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	2380      	movs	r3, #128	; 0x80
 80059f8:	029b      	lsls	r3, r3, #10
 80059fa:	4013      	ands	r3, r2
 80059fc:	d063      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x11a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d15f      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f000 fb30 	bl	800606c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	2380      	movs	r3, #128	; 0x80
 8005a12:	025b      	lsls	r3, r3, #9
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d107      	bne.n	8005a28 <HAL_RCC_OscConfig+0x7c>
 8005a18:	4bb0      	ldr	r3, [pc, #704]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4baf      	ldr	r3, [pc, #700]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005a1e:	2180      	movs	r1, #128	; 0x80
 8005a20:	0249      	lsls	r1, r1, #9
 8005a22:	430a      	orrs	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	e020      	b.n	8005a6a <HAL_RCC_OscConfig+0xbe>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	23a0      	movs	r3, #160	; 0xa0
 8005a2e:	02db      	lsls	r3, r3, #11
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d10e      	bne.n	8005a52 <HAL_RCC_OscConfig+0xa6>
 8005a34:	4ba9      	ldr	r3, [pc, #676]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	4ba8      	ldr	r3, [pc, #672]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005a3a:	2180      	movs	r1, #128	; 0x80
 8005a3c:	02c9      	lsls	r1, r1, #11
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	4ba6      	ldr	r3, [pc, #664]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	4ba5      	ldr	r3, [pc, #660]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005a48:	2180      	movs	r1, #128	; 0x80
 8005a4a:	0249      	lsls	r1, r1, #9
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	e00b      	b.n	8005a6a <HAL_RCC_OscConfig+0xbe>
 8005a52:	4ba2      	ldr	r3, [pc, #648]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4ba1      	ldr	r3, [pc, #644]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005a58:	49a1      	ldr	r1, [pc, #644]	; (8005ce0 <HAL_RCC_OscConfig+0x334>)
 8005a5a:	400a      	ands	r2, r1
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	4b9f      	ldr	r3, [pc, #636]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b9e      	ldr	r3, [pc, #632]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005a64:	499f      	ldr	r1, [pc, #636]	; (8005ce4 <HAL_RCC_OscConfig+0x338>)
 8005a66:	400a      	ands	r2, r1
 8005a68:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d014      	beq.n	8005a9c <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a72:	f7fc f9d9 	bl	8001e28 <HAL_GetTick>
 8005a76:	0003      	movs	r3, r0
 8005a78:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a7c:	f7fc f9d4 	bl	8001e28 <HAL_GetTick>
 8005a80:	0002      	movs	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b64      	cmp	r3, #100	; 0x64
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e2ee      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a8e:	4b93      	ldr	r3, [pc, #588]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	2380      	movs	r3, #128	; 0x80
 8005a94:	029b      	lsls	r3, r3, #10
 8005a96:	4013      	ands	r3, r2
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCC_OscConfig+0xd0>
 8005a9a:	e015      	b.n	8005ac8 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9c:	f7fc f9c4 	bl	8001e28 <HAL_GetTick>
 8005aa0:	0003      	movs	r3, r0
 8005aa2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aa6:	f7fc f9bf 	bl	8001e28 <HAL_GetTick>
 8005aaa:	0002      	movs	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b64      	cmp	r3, #100	; 0x64
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e2d9      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ab8:	4b88      	ldr	r3, [pc, #544]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	2380      	movs	r3, #128	; 0x80
 8005abe:	029b      	lsls	r3, r3, #10
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d1f0      	bne.n	8005aa6 <HAL_RCC_OscConfig+0xfa>
 8005ac4:	e000      	b.n	8005ac8 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2202      	movs	r2, #2
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d100      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x128>
 8005ad2:	e099      	b.n	8005c08 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad4:	4b81      	ldr	r3, [pc, #516]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2238      	movs	r2, #56	; 0x38
 8005ada:	4013      	ands	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ade:	4b7f      	ldr	r3, [pc, #508]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b10      	cmp	r3, #16
 8005aec:	d102      	bne.n	8005af4 <HAL_RCC_OscConfig+0x148>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d002      	beq.n	8005afa <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d135      	bne.n	8005b66 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005afa:	4b78      	ldr	r3, [pc, #480]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	4013      	ands	r3, r2
 8005b04:	d005      	beq.n	8005b12 <HAL_RCC_OscConfig+0x166>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e2ac      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b12:	4b72      	ldr	r3, [pc, #456]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4a74      	ldr	r2, [pc, #464]	; (8005ce8 <HAL_RCC_OscConfig+0x33c>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	021a      	lsls	r2, r3, #8
 8005b22:	4b6e      	ldr	r3, [pc, #440]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d112      	bne.n	8005b54 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005b2e:	4b6b      	ldr	r3, [pc, #428]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6e      	ldr	r2, [pc, #440]	; (8005cec <HAL_RCC_OscConfig+0x340>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	0019      	movs	r1, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	4b67      	ldr	r3, [pc, #412]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005b42:	4b66      	ldr	r3, [pc, #408]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	0adb      	lsrs	r3, r3, #11
 8005b48:	2207      	movs	r2, #7
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	4a68      	ldr	r2, [pc, #416]	; (8005cf0 <HAL_RCC_OscConfig+0x344>)
 8005b4e:	40da      	lsrs	r2, r3
 8005b50:	4b68      	ldr	r3, [pc, #416]	; (8005cf4 <HAL_RCC_OscConfig+0x348>)
 8005b52:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b54:	4b68      	ldr	r3, [pc, #416]	; (8005cf8 <HAL_RCC_OscConfig+0x34c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f7fc f909 	bl	8001d70 <HAL_InitTick>
 8005b5e:	1e03      	subs	r3, r0, #0
 8005b60:	d051      	beq.n	8005c06 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e282      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d030      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005b6e:	4b5b      	ldr	r3, [pc, #364]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a5e      	ldr	r2, [pc, #376]	; (8005cec <HAL_RCC_OscConfig+0x340>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	0019      	movs	r1, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	4b57      	ldr	r3, [pc, #348]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005b82:	4b56      	ldr	r3, [pc, #344]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b55      	ldr	r3, [pc, #340]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005b88:	2180      	movs	r1, #128	; 0x80
 8005b8a:	0049      	lsls	r1, r1, #1
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fc f94a 	bl	8001e28 <HAL_GetTick>
 8005b94:	0003      	movs	r3, r0
 8005b96:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9a:	f7fc f945 	bl	8001e28 <HAL_GetTick>
 8005b9e:	0002      	movs	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e25f      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bac:	4b4b      	ldr	r3, [pc, #300]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d0f0      	beq.n	8005b9a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb8:	4b48      	ldr	r3, [pc, #288]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4a4a      	ldr	r2, [pc, #296]	; (8005ce8 <HAL_RCC_OscConfig+0x33c>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	0019      	movs	r1, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	021a      	lsls	r2, r3, #8
 8005bc8:	4b44      	ldr	r3, [pc, #272]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	e01b      	b.n	8005c08 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005bd0:	4b42      	ldr	r3, [pc, #264]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4b41      	ldr	r3, [pc, #260]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005bd6:	4949      	ldr	r1, [pc, #292]	; (8005cfc <HAL_RCC_OscConfig+0x350>)
 8005bd8:	400a      	ands	r2, r1
 8005bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bdc:	f7fc f924 	bl	8001e28 <HAL_GetTick>
 8005be0:	0003      	movs	r3, r0
 8005be2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be6:	f7fc f91f 	bl	8001e28 <HAL_GetTick>
 8005bea:	0002      	movs	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e239      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bf8:	4b38      	ldr	r3, [pc, #224]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	2380      	movs	r3, #128	; 0x80
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4013      	ands	r3, r2
 8005c02:	d1f0      	bne.n	8005be6 <HAL_RCC_OscConfig+0x23a>
 8005c04:	e000      	b.n	8005c08 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	4013      	ands	r3, r2
 8005c10:	d047      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005c12:	4b32      	ldr	r3, [pc, #200]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2238      	movs	r2, #56	; 0x38
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b18      	cmp	r3, #24
 8005c1c:	d10a      	bne.n	8005c34 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005c1e:	4b2f      	ldr	r3, [pc, #188]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c22:	2202      	movs	r2, #2
 8005c24:	4013      	ands	r3, r2
 8005c26:	d03c      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x2f6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d138      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e21b      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d019      	beq.n	8005c70 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005c3c:	4b27      	ldr	r3, [pc, #156]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005c3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c40:	4b26      	ldr	r3, [pc, #152]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005c42:	2101      	movs	r1, #1
 8005c44:	430a      	orrs	r2, r1
 8005c46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c48:	f7fc f8ee 	bl	8001e28 <HAL_GetTick>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c52:	f7fc f8e9 	bl	8001e28 <HAL_GetTick>
 8005c56:	0002      	movs	r2, r0
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e203      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c64:	4b1d      	ldr	r3, [pc, #116]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c68:	2202      	movs	r2, #2
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d0f1      	beq.n	8005c52 <HAL_RCC_OscConfig+0x2a6>
 8005c6e:	e018      	b.n	8005ca2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005c70:	4b1a      	ldr	r3, [pc, #104]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005c72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c74:	4b19      	ldr	r3, [pc, #100]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005c76:	2101      	movs	r1, #1
 8005c78:	438a      	bics	r2, r1
 8005c7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7c:	f7fc f8d4 	bl	8001e28 <HAL_GetTick>
 8005c80:	0003      	movs	r3, r0
 8005c82:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c86:	f7fc f8cf 	bl	8001e28 <HAL_GetTick>
 8005c8a:	0002      	movs	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e1e9      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c98:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d1f1      	bne.n	8005c86 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2204      	movs	r2, #4
 8005ca8:	4013      	ands	r3, r2
 8005caa:	d100      	bne.n	8005cae <HAL_RCC_OscConfig+0x302>
 8005cac:	e0c6      	b.n	8005e3c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cae:	231f      	movs	r3, #31
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005cb6:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2238      	movs	r2, #56	; 0x38
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d11e      	bne.n	8005d00 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <HAL_RCC_OscConfig+0x330>)
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d100      	bne.n	8005cce <HAL_RCC_OscConfig+0x322>
 8005ccc:	e0b6      	b.n	8005e3c <HAL_RCC_OscConfig+0x490>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d000      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x32c>
 8005cd6:	e0b1      	b.n	8005e3c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e1c7      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	fffeffff 	.word	0xfffeffff
 8005ce4:	fffbffff 	.word	0xfffbffff
 8005ce8:	ffff80ff 	.word	0xffff80ff
 8005cec:	ffffc7ff 	.word	0xffffc7ff
 8005cf0:	00f42400 	.word	0x00f42400
 8005cf4:	20000000 	.word	0x20000000
 8005cf8:	20000004 	.word	0x20000004
 8005cfc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d00:	4bb8      	ldr	r3, [pc, #736]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	055b      	lsls	r3, r3, #21
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d101      	bne.n	8005d10 <HAL_RCC_OscConfig+0x364>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <HAL_RCC_OscConfig+0x366>
 8005d10:	2300      	movs	r3, #0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d011      	beq.n	8005d3a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005d16:	4bb3      	ldr	r3, [pc, #716]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d1a:	4bb2      	ldr	r3, [pc, #712]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005d1c:	2180      	movs	r1, #128	; 0x80
 8005d1e:	0549      	lsls	r1, r1, #21
 8005d20:	430a      	orrs	r2, r1
 8005d22:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d24:	4baf      	ldr	r3, [pc, #700]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	055b      	lsls	r3, r3, #21
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005d32:	231f      	movs	r3, #31
 8005d34:	18fb      	adds	r3, r7, r3
 8005d36:	2201      	movs	r2, #1
 8005d38:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d3a:	4bab      	ldr	r3, [pc, #684]	; (8005fe8 <HAL_RCC_OscConfig+0x63c>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	2380      	movs	r3, #128	; 0x80
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	4013      	ands	r3, r2
 8005d44:	d11a      	bne.n	8005d7c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d46:	4ba8      	ldr	r3, [pc, #672]	; (8005fe8 <HAL_RCC_OscConfig+0x63c>)
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4ba7      	ldr	r3, [pc, #668]	; (8005fe8 <HAL_RCC_OscConfig+0x63c>)
 8005d4c:	2180      	movs	r1, #128	; 0x80
 8005d4e:	0049      	lsls	r1, r1, #1
 8005d50:	430a      	orrs	r2, r1
 8005d52:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005d54:	f7fc f868 	bl	8001e28 <HAL_GetTick>
 8005d58:	0003      	movs	r3, r0
 8005d5a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d5e:	f7fc f863 	bl	8001e28 <HAL_GetTick>
 8005d62:	0002      	movs	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e17d      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d70:	4b9d      	ldr	r3, [pc, #628]	; (8005fe8 <HAL_RCC_OscConfig+0x63c>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d0f0      	beq.n	8005d5e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d106      	bne.n	8005d92 <HAL_RCC_OscConfig+0x3e6>
 8005d84:	4b97      	ldr	r3, [pc, #604]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005d86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d88:	4b96      	ldr	r3, [pc, #600]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d90:	e01c      	b.n	8005dcc <HAL_RCC_OscConfig+0x420>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	d10c      	bne.n	8005db4 <HAL_RCC_OscConfig+0x408>
 8005d9a:	4b92      	ldr	r3, [pc, #584]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005d9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d9e:	4b91      	ldr	r3, [pc, #580]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005da0:	2104      	movs	r1, #4
 8005da2:	430a      	orrs	r2, r1
 8005da4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005da6:	4b8f      	ldr	r3, [pc, #572]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005da8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005daa:	4b8e      	ldr	r3, [pc, #568]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005dac:	2101      	movs	r1, #1
 8005dae:	430a      	orrs	r2, r1
 8005db0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005db2:	e00b      	b.n	8005dcc <HAL_RCC_OscConfig+0x420>
 8005db4:	4b8b      	ldr	r3, [pc, #556]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005db6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005db8:	4b8a      	ldr	r3, [pc, #552]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005dba:	2101      	movs	r1, #1
 8005dbc:	438a      	bics	r2, r1
 8005dbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dc0:	4b88      	ldr	r3, [pc, #544]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005dc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dc4:	4b87      	ldr	r3, [pc, #540]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005dc6:	2104      	movs	r1, #4
 8005dc8:	438a      	bics	r2, r1
 8005dca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d014      	beq.n	8005dfe <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fc f828 	bl	8001e28 <HAL_GetTick>
 8005dd8:	0003      	movs	r3, r0
 8005dda:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ddc:	e009      	b.n	8005df2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dde:	f7fc f823 	bl	8001e28 <HAL_GetTick>
 8005de2:	0002      	movs	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	4a80      	ldr	r2, [pc, #512]	; (8005fec <HAL_RCC_OscConfig+0x640>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e13c      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005df2:	4b7c      	ldr	r3, [pc, #496]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df6:	2202      	movs	r2, #2
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d0f0      	beq.n	8005dde <HAL_RCC_OscConfig+0x432>
 8005dfc:	e013      	b.n	8005e26 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfe:	f7fc f813 	bl	8001e28 <HAL_GetTick>
 8005e02:	0003      	movs	r3, r0
 8005e04:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e06:	e009      	b.n	8005e1c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e08:	f7fc f80e 	bl	8001e28 <HAL_GetTick>
 8005e0c:	0002      	movs	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	4a76      	ldr	r2, [pc, #472]	; (8005fec <HAL_RCC_OscConfig+0x640>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e127      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e1c:	4b71      	ldr	r3, [pc, #452]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e20:	2202      	movs	r2, #2
 8005e22:	4013      	ands	r3, r2
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005e26:	231f      	movs	r3, #31
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d105      	bne.n	8005e3c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005e30:	4b6c      	ldr	r3, [pc, #432]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e34:	4b6b      	ldr	r3, [pc, #428]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005e36:	496e      	ldr	r1, [pc, #440]	; (8005ff0 <HAL_RCC_OscConfig+0x644>)
 8005e38:	400a      	ands	r2, r1
 8005e3a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2220      	movs	r2, #32
 8005e42:	4013      	ands	r3, r2
 8005e44:	d039      	beq.n	8005eba <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01b      	beq.n	8005e86 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e4e:	4b65      	ldr	r3, [pc, #404]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4b64      	ldr	r3, [pc, #400]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005e54:	2180      	movs	r1, #128	; 0x80
 8005e56:	03c9      	lsls	r1, r1, #15
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5c:	f7fb ffe4 	bl	8001e28 <HAL_GetTick>
 8005e60:	0003      	movs	r3, r0
 8005e62:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005e64:	e008      	b.n	8005e78 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e66:	f7fb ffdf 	bl	8001e28 <HAL_GetTick>
 8005e6a:	0002      	movs	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e0f9      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005e78:	4b5a      	ldr	r3, [pc, #360]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	2380      	movs	r3, #128	; 0x80
 8005e7e:	041b      	lsls	r3, r3, #16
 8005e80:	4013      	ands	r3, r2
 8005e82:	d0f0      	beq.n	8005e66 <HAL_RCC_OscConfig+0x4ba>
 8005e84:	e019      	b.n	8005eba <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e86:	4b57      	ldr	r3, [pc, #348]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4b56      	ldr	r3, [pc, #344]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005e8c:	4959      	ldr	r1, [pc, #356]	; (8005ff4 <HAL_RCC_OscConfig+0x648>)
 8005e8e:	400a      	ands	r2, r1
 8005e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e92:	f7fb ffc9 	bl	8001e28 <HAL_GetTick>
 8005e96:	0003      	movs	r3, r0
 8005e98:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e9c:	f7fb ffc4 	bl	8001e28 <HAL_GetTick>
 8005ea0:	0002      	movs	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e0de      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005eae:	4b4d      	ldr	r3, [pc, #308]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	2380      	movs	r3, #128	; 0x80
 8005eb4:	041b      	lsls	r3, r3, #16
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d100      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x518>
 8005ec2:	e0d2      	b.n	800606a <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ec4:	4b47      	ldr	r3, [pc, #284]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2238      	movs	r2, #56	; 0x38
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d100      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x526>
 8005ed0:	e081      	b.n	8005fd6 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d156      	bne.n	8005f88 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eda:	4b42      	ldr	r3, [pc, #264]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	4b41      	ldr	r3, [pc, #260]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005ee0:	4945      	ldr	r1, [pc, #276]	; (8005ff8 <HAL_RCC_OscConfig+0x64c>)
 8005ee2:	400a      	ands	r2, r1
 8005ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee6:	f7fb ff9f 	bl	8001e28 <HAL_GetTick>
 8005eea:	0003      	movs	r3, r0
 8005eec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef0:	f7fb ff9a 	bl	8001e28 <HAL_GetTick>
 8005ef4:	0002      	movs	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e0b4      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f02:	4b38      	ldr	r3, [pc, #224]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	049b      	lsls	r3, r3, #18
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f0e:	4b35      	ldr	r3, [pc, #212]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	4a3a      	ldr	r2, [pc, #232]	; (8005ffc <HAL_RCC_OscConfig+0x650>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	0019      	movs	r1, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	4b29      	ldr	r3, [pc, #164]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f42:	4b28      	ldr	r3, [pc, #160]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005f48:	2180      	movs	r1, #128	; 0x80
 8005f4a:	0449      	lsls	r1, r1, #17
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005f50:	4b24      	ldr	r3, [pc, #144]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	4b23      	ldr	r3, [pc, #140]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005f56:	2180      	movs	r1, #128	; 0x80
 8005f58:	0549      	lsls	r1, r1, #21
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5e:	f7fb ff63 	bl	8001e28 <HAL_GetTick>
 8005f62:	0003      	movs	r3, r0
 8005f64:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f68:	f7fb ff5e 	bl	8001e28 <HAL_GetTick>
 8005f6c:	0002      	movs	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e078      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f7a:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	2380      	movs	r3, #128	; 0x80
 8005f80:	049b      	lsls	r3, r3, #18
 8005f82:	4013      	ands	r3, r2
 8005f84:	d0f0      	beq.n	8005f68 <HAL_RCC_OscConfig+0x5bc>
 8005f86:	e070      	b.n	800606a <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f88:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4b15      	ldr	r3, [pc, #84]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005f8e:	491a      	ldr	r1, [pc, #104]	; (8005ff8 <HAL_RCC_OscConfig+0x64c>)
 8005f90:	400a      	ands	r2, r1
 8005f92:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005f94:	4b13      	ldr	r3, [pc, #76]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005f9a:	2103      	movs	r1, #3
 8005f9c:	438a      	bics	r2, r1
 8005f9e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005fa0:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005fa6:	4916      	ldr	r1, [pc, #88]	; (8006000 <HAL_RCC_OscConfig+0x654>)
 8005fa8:	400a      	ands	r2, r1
 8005faa:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fac:	f7fb ff3c 	bl	8001e28 <HAL_GetTick>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb6:	f7fb ff37 	bl	8001e28 <HAL_GetTick>
 8005fba:	0002      	movs	r2, r0
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e051      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fc8:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <HAL_RCC_OscConfig+0x638>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	2380      	movs	r3, #128	; 0x80
 8005fce:	049b      	lsls	r3, r3, #18
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	d1f0      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x60a>
 8005fd4:	e049      	b.n	800606a <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d112      	bne.n	8006004 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e044      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	40007000 	.word	0x40007000
 8005fec:	00001388 	.word	0x00001388
 8005ff0:	efffffff 	.word	0xefffffff
 8005ff4:	ffbfffff 	.word	0xffbfffff
 8005ff8:	feffffff 	.word	0xfeffffff
 8005ffc:	11c1808c 	.word	0x11c1808c
 8006000:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006004:	4b1b      	ldr	r3, [pc, #108]	; (8006074 <HAL_RCC_OscConfig+0x6c8>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2203      	movs	r2, #3
 800600e:	401a      	ands	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	429a      	cmp	r2, r3
 8006016:	d126      	bne.n	8006066 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2270      	movs	r2, #112	; 0x70
 800601c:	401a      	ands	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006022:	429a      	cmp	r2, r3
 8006024:	d11f      	bne.n	8006066 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	23fe      	movs	r3, #254	; 0xfe
 800602a:	01db      	lsls	r3, r3, #7
 800602c:	401a      	ands	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006034:	429a      	cmp	r2, r3
 8006036:	d116      	bne.n	8006066 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	23f8      	movs	r3, #248	; 0xf8
 800603c:	039b      	lsls	r3, r3, #14
 800603e:	401a      	ands	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006044:	429a      	cmp	r2, r3
 8006046:	d10e      	bne.n	8006066 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	23e0      	movs	r3, #224	; 0xe0
 800604c:	051b      	lsls	r3, r3, #20
 800604e:	401a      	ands	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006054:	429a      	cmp	r2, r3
 8006056:	d106      	bne.n	8006066 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	0f5b      	lsrs	r3, r3, #29
 800605c:	075a      	lsls	r2, r3, #29
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006062:	429a      	cmp	r2, r3
 8006064:	d001      	beq.n	800606a <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	0018      	movs	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	b008      	add	sp, #32
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40021000 	.word	0x40021000

08006078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e0e9      	b.n	8006260 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800608c:	4b76      	ldr	r3, [pc, #472]	; (8006268 <HAL_RCC_ClockConfig+0x1f0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2207      	movs	r2, #7
 8006092:	4013      	ands	r3, r2
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d91e      	bls.n	80060d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609a:	4b73      	ldr	r3, [pc, #460]	; (8006268 <HAL_RCC_ClockConfig+0x1f0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2207      	movs	r2, #7
 80060a0:	4393      	bics	r3, r2
 80060a2:	0019      	movs	r1, r3
 80060a4:	4b70      	ldr	r3, [pc, #448]	; (8006268 <HAL_RCC_ClockConfig+0x1f0>)
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80060ac:	f7fb febc 	bl	8001e28 <HAL_GetTick>
 80060b0:	0003      	movs	r3, r0
 80060b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80060b4:	e009      	b.n	80060ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b6:	f7fb feb7 	bl	8001e28 <HAL_GetTick>
 80060ba:	0002      	movs	r2, r0
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	4a6a      	ldr	r2, [pc, #424]	; (800626c <HAL_RCC_ClockConfig+0x1f4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e0ca      	b.n	8006260 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80060ca:	4b67      	ldr	r3, [pc, #412]	; (8006268 <HAL_RCC_ClockConfig+0x1f0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2207      	movs	r2, #7
 80060d0:	4013      	ands	r3, r2
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d1ee      	bne.n	80060b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2202      	movs	r2, #2
 80060de:	4013      	ands	r3, r2
 80060e0:	d015      	beq.n	800610e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2204      	movs	r2, #4
 80060e8:	4013      	ands	r3, r2
 80060ea:	d006      	beq.n	80060fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80060ec:	4b60      	ldr	r3, [pc, #384]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	4b5f      	ldr	r3, [pc, #380]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 80060f2:	21e0      	movs	r1, #224	; 0xe0
 80060f4:	01c9      	lsls	r1, r1, #7
 80060f6:	430a      	orrs	r2, r1
 80060f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060fa:	4b5d      	ldr	r3, [pc, #372]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	4a5d      	ldr	r2, [pc, #372]	; (8006274 <HAL_RCC_ClockConfig+0x1fc>)
 8006100:	4013      	ands	r3, r2
 8006102:	0019      	movs	r1, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	4b59      	ldr	r3, [pc, #356]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 800610a:	430a      	orrs	r2, r1
 800610c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2201      	movs	r2, #1
 8006114:	4013      	ands	r3, r2
 8006116:	d057      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d107      	bne.n	8006130 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006120:	4b53      	ldr	r3, [pc, #332]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	029b      	lsls	r3, r3, #10
 8006128:	4013      	ands	r3, r2
 800612a:	d12b      	bne.n	8006184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e097      	b.n	8006260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d107      	bne.n	8006148 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006138:	4b4d      	ldr	r3, [pc, #308]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	049b      	lsls	r3, r3, #18
 8006140:	4013      	ands	r3, r2
 8006142:	d11f      	bne.n	8006184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e08b      	b.n	8006260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d107      	bne.n	8006160 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006150:	4b47      	ldr	r3, [pc, #284]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4013      	ands	r3, r2
 800615a:	d113      	bne.n	8006184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e07f      	b.n	8006260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2b03      	cmp	r3, #3
 8006166:	d106      	bne.n	8006176 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006168:	4b41      	ldr	r3, [pc, #260]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 800616a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616c:	2202      	movs	r2, #2
 800616e:	4013      	ands	r3, r2
 8006170:	d108      	bne.n	8006184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e074      	b.n	8006260 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006176:	4b3e      	ldr	r3, [pc, #248]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 8006178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617a:	2202      	movs	r2, #2
 800617c:	4013      	ands	r3, r2
 800617e:	d101      	bne.n	8006184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e06d      	b.n	8006260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006184:	4b3a      	ldr	r3, [pc, #232]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2207      	movs	r2, #7
 800618a:	4393      	bics	r3, r2
 800618c:	0019      	movs	r1, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	4b37      	ldr	r3, [pc, #220]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 8006194:	430a      	orrs	r2, r1
 8006196:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006198:	f7fb fe46 	bl	8001e28 <HAL_GetTick>
 800619c:	0003      	movs	r3, r0
 800619e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a0:	e009      	b.n	80061b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a2:	f7fb fe41 	bl	8001e28 <HAL_GetTick>
 80061a6:	0002      	movs	r2, r0
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	4a2f      	ldr	r2, [pc, #188]	; (800626c <HAL_RCC_ClockConfig+0x1f4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e054      	b.n	8006260 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b6:	4b2e      	ldr	r3, [pc, #184]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2238      	movs	r2, #56	; 0x38
 80061bc:	401a      	ands	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d1ec      	bne.n	80061a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061c8:	4b27      	ldr	r3, [pc, #156]	; (8006268 <HAL_RCC_ClockConfig+0x1f0>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2207      	movs	r2, #7
 80061ce:	4013      	ands	r3, r2
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d21e      	bcs.n	8006214 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061d6:	4b24      	ldr	r3, [pc, #144]	; (8006268 <HAL_RCC_ClockConfig+0x1f0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2207      	movs	r2, #7
 80061dc:	4393      	bics	r3, r2
 80061de:	0019      	movs	r1, r3
 80061e0:	4b21      	ldr	r3, [pc, #132]	; (8006268 <HAL_RCC_ClockConfig+0x1f0>)
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80061e8:	f7fb fe1e 	bl	8001e28 <HAL_GetTick>
 80061ec:	0003      	movs	r3, r0
 80061ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061f0:	e009      	b.n	8006206 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061f2:	f7fb fe19 	bl	8001e28 <HAL_GetTick>
 80061f6:	0002      	movs	r2, r0
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	4a1b      	ldr	r2, [pc, #108]	; (800626c <HAL_RCC_ClockConfig+0x1f4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e02c      	b.n	8006260 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006206:	4b18      	ldr	r3, [pc, #96]	; (8006268 <HAL_RCC_ClockConfig+0x1f0>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2207      	movs	r2, #7
 800620c:	4013      	ands	r3, r2
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d1ee      	bne.n	80061f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2204      	movs	r2, #4
 800621a:	4013      	ands	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800621e:	4b14      	ldr	r3, [pc, #80]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	4a15      	ldr	r2, [pc, #84]	; (8006278 <HAL_RCC_ClockConfig+0x200>)
 8006224:	4013      	ands	r3, r2
 8006226:	0019      	movs	r1, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	4b10      	ldr	r3, [pc, #64]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 800622e:	430a      	orrs	r2, r1
 8006230:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006232:	f000 f829 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 8006236:	0001      	movs	r1, r0
 8006238:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <HAL_RCC_ClockConfig+0x1f8>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	0a1b      	lsrs	r3, r3, #8
 800623e:	220f      	movs	r2, #15
 8006240:	401a      	ands	r2, r3
 8006242:	4b0e      	ldr	r3, [pc, #56]	; (800627c <HAL_RCC_ClockConfig+0x204>)
 8006244:	0092      	lsls	r2, r2, #2
 8006246:	58d3      	ldr	r3, [r2, r3]
 8006248:	221f      	movs	r2, #31
 800624a:	4013      	ands	r3, r2
 800624c:	000a      	movs	r2, r1
 800624e:	40da      	lsrs	r2, r3
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <HAL_RCC_ClockConfig+0x208>)
 8006252:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <HAL_RCC_ClockConfig+0x20c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	0018      	movs	r0, r3
 800625a:	f7fb fd89 	bl	8001d70 <HAL_InitTick>
 800625e:	0003      	movs	r3, r0
}
 8006260:	0018      	movs	r0, r3
 8006262:	46bd      	mov	sp, r7
 8006264:	b004      	add	sp, #16
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40022000 	.word	0x40022000
 800626c:	00001388 	.word	0x00001388
 8006270:	40021000 	.word	0x40021000
 8006274:	fffff0ff 	.word	0xfffff0ff
 8006278:	ffff8fff 	.word	0xffff8fff
 800627c:	08009480 	.word	0x08009480
 8006280:	20000000 	.word	0x20000000
 8006284:	20000004 	.word	0x20000004

08006288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800628e:	4b3c      	ldr	r3, [pc, #240]	; (8006380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2238      	movs	r2, #56	; 0x38
 8006294:	4013      	ands	r3, r2
 8006296:	d10f      	bne.n	80062b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006298:	4b39      	ldr	r3, [pc, #228]	; (8006380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	0adb      	lsrs	r3, r3, #11
 800629e:	2207      	movs	r2, #7
 80062a0:	4013      	ands	r3, r2
 80062a2:	2201      	movs	r2, #1
 80062a4:	409a      	lsls	r2, r3
 80062a6:	0013      	movs	r3, r2
 80062a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	4835      	ldr	r0, [pc, #212]	; (8006384 <HAL_RCC_GetSysClockFreq+0xfc>)
 80062ae:	f7f9 ff3b 	bl	8000128 <__udivsi3>
 80062b2:	0003      	movs	r3, r0
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	e05d      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062b8:	4b31      	ldr	r3, [pc, #196]	; (8006380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	2238      	movs	r2, #56	; 0x38
 80062be:	4013      	ands	r3, r2
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d102      	bne.n	80062ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062c4:	4b30      	ldr	r3, [pc, #192]	; (8006388 <HAL_RCC_GetSysClockFreq+0x100>)
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	e054      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062ca:	4b2d      	ldr	r3, [pc, #180]	; (8006380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2238      	movs	r2, #56	; 0x38
 80062d0:	4013      	ands	r3, r2
 80062d2:	2b10      	cmp	r3, #16
 80062d4:	d138      	bne.n	8006348 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80062d6:	4b2a      	ldr	r3, [pc, #168]	; (8006380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	2203      	movs	r2, #3
 80062dc:	4013      	ands	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062e0:	4b27      	ldr	r3, [pc, #156]	; (8006380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	091b      	lsrs	r3, r3, #4
 80062e6:	2207      	movs	r2, #7
 80062e8:	4013      	ands	r3, r2
 80062ea:	3301      	adds	r3, #1
 80062ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d10d      	bne.n	8006310 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	4824      	ldr	r0, [pc, #144]	; (8006388 <HAL_RCC_GetSysClockFreq+0x100>)
 80062f8:	f7f9 ff16 	bl	8000128 <__udivsi3>
 80062fc:	0003      	movs	r3, r0
 80062fe:	0019      	movs	r1, r3
 8006300:	4b1f      	ldr	r3, [pc, #124]	; (8006380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	0a1b      	lsrs	r3, r3, #8
 8006306:	227f      	movs	r2, #127	; 0x7f
 8006308:	4013      	ands	r3, r2
 800630a:	434b      	muls	r3, r1
 800630c:	617b      	str	r3, [r7, #20]
        break;
 800630e:	e00d      	b.n	800632c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	481c      	ldr	r0, [pc, #112]	; (8006384 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006314:	f7f9 ff08 	bl	8000128 <__udivsi3>
 8006318:	0003      	movs	r3, r0
 800631a:	0019      	movs	r1, r3
 800631c:	4b18      	ldr	r3, [pc, #96]	; (8006380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	0a1b      	lsrs	r3, r3, #8
 8006322:	227f      	movs	r2, #127	; 0x7f
 8006324:	4013      	ands	r3, r2
 8006326:	434b      	muls	r3, r1
 8006328:	617b      	str	r3, [r7, #20]
        break;
 800632a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800632c:	4b14      	ldr	r3, [pc, #80]	; (8006380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	0f5b      	lsrs	r3, r3, #29
 8006332:	2207      	movs	r2, #7
 8006334:	4013      	ands	r3, r2
 8006336:	3301      	adds	r3, #1
 8006338:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	6978      	ldr	r0, [r7, #20]
 800633e:	f7f9 fef3 	bl	8000128 <__udivsi3>
 8006342:	0003      	movs	r3, r0
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	e015      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006348:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2238      	movs	r2, #56	; 0x38
 800634e:	4013      	ands	r3, r2
 8006350:	2b20      	cmp	r3, #32
 8006352:	d103      	bne.n	800635c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006354:	2380      	movs	r3, #128	; 0x80
 8006356:	021b      	lsls	r3, r3, #8
 8006358:	613b      	str	r3, [r7, #16]
 800635a:	e00b      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800635c:	4b08      	ldr	r3, [pc, #32]	; (8006380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2238      	movs	r2, #56	; 0x38
 8006362:	4013      	ands	r3, r2
 8006364:	2b18      	cmp	r3, #24
 8006366:	d103      	bne.n	8006370 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006368:	23fa      	movs	r3, #250	; 0xfa
 800636a:	01db      	lsls	r3, r3, #7
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	e001      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006374:	693b      	ldr	r3, [r7, #16]
}
 8006376:	0018      	movs	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	b006      	add	sp, #24
 800637c:	bd80      	pop	{r7, pc}
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	40021000 	.word	0x40021000
 8006384:	00f42400 	.word	0x00f42400
 8006388:	007a1200 	.word	0x007a1200

0800638c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006390:	4b02      	ldr	r3, [pc, #8]	; (800639c <HAL_RCC_GetHCLKFreq+0x10>)
 8006392:	681b      	ldr	r3, [r3, #0]
}
 8006394:	0018      	movs	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	20000000 	.word	0x20000000

080063a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063a0:	b5b0      	push	{r4, r5, r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80063a4:	f7ff fff2 	bl	800638c <HAL_RCC_GetHCLKFreq>
 80063a8:	0004      	movs	r4, r0
 80063aa:	f7ff faf3 	bl	8005994 <LL_RCC_GetAPB1Prescaler>
 80063ae:	0003      	movs	r3, r0
 80063b0:	0b1a      	lsrs	r2, r3, #12
 80063b2:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063b4:	0092      	lsls	r2, r2, #2
 80063b6:	58d3      	ldr	r3, [r2, r3]
 80063b8:	221f      	movs	r2, #31
 80063ba:	4013      	ands	r3, r2
 80063bc:	40dc      	lsrs	r4, r3
 80063be:	0023      	movs	r3, r4
}
 80063c0:	0018      	movs	r0, r3
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bdb0      	pop	{r4, r5, r7, pc}
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	080094c0 	.word	0x080094c0

080063cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80063d4:	2313      	movs	r3, #19
 80063d6:	18fb      	adds	r3, r7, r3
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063dc:	2312      	movs	r3, #18
 80063de:	18fb      	adds	r3, r7, r3
 80063e0:	2200      	movs	r2, #0
 80063e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	2380      	movs	r3, #128	; 0x80
 80063ea:	029b      	lsls	r3, r3, #10
 80063ec:	4013      	ands	r3, r2
 80063ee:	d100      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80063f0:	e0ad      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063f2:	2011      	movs	r0, #17
 80063f4:	183b      	adds	r3, r7, r0
 80063f6:	2200      	movs	r2, #0
 80063f8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063fa:	4b47      	ldr	r3, [pc, #284]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80063fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063fe:	2380      	movs	r3, #128	; 0x80
 8006400:	055b      	lsls	r3, r3, #21
 8006402:	4013      	ands	r3, r2
 8006404:	d110      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006406:	4b44      	ldr	r3, [pc, #272]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800640a:	4b43      	ldr	r3, [pc, #268]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800640c:	2180      	movs	r1, #128	; 0x80
 800640e:	0549      	lsls	r1, r1, #21
 8006410:	430a      	orrs	r2, r1
 8006412:	63da      	str	r2, [r3, #60]	; 0x3c
 8006414:	4b40      	ldr	r3, [pc, #256]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006418:	2380      	movs	r3, #128	; 0x80
 800641a:	055b      	lsls	r3, r3, #21
 800641c:	4013      	ands	r3, r2
 800641e:	60bb      	str	r3, [r7, #8]
 8006420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006422:	183b      	adds	r3, r7, r0
 8006424:	2201      	movs	r2, #1
 8006426:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006428:	4b3c      	ldr	r3, [pc, #240]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	4b3b      	ldr	r3, [pc, #236]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800642e:	2180      	movs	r1, #128	; 0x80
 8006430:	0049      	lsls	r1, r1, #1
 8006432:	430a      	orrs	r2, r1
 8006434:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006436:	f7fb fcf7 	bl	8001e28 <HAL_GetTick>
 800643a:	0003      	movs	r3, r0
 800643c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800643e:	e00b      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006440:	f7fb fcf2 	bl	8001e28 <HAL_GetTick>
 8006444:	0002      	movs	r2, r0
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d904      	bls.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800644e:	2313      	movs	r3, #19
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	2203      	movs	r2, #3
 8006454:	701a      	strb	r2, [r3, #0]
        break;
 8006456:	e005      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006458:	4b30      	ldr	r3, [pc, #192]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	2380      	movs	r3, #128	; 0x80
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	4013      	ands	r3, r2
 8006462:	d0ed      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006464:	2313      	movs	r3, #19
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d15e      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800646e:	4b2a      	ldr	r3, [pc, #168]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006470:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006472:	23c0      	movs	r3, #192	; 0xc0
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4013      	ands	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d019      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	429a      	cmp	r2, r3
 8006488:	d014      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800648a:	4b23      	ldr	r3, [pc, #140]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800648c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648e:	4a24      	ldr	r2, [pc, #144]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006490:	4013      	ands	r3, r2
 8006492:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006494:	4b20      	ldr	r3, [pc, #128]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006498:	4b1f      	ldr	r3, [pc, #124]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800649a:	2180      	movs	r1, #128	; 0x80
 800649c:	0249      	lsls	r1, r1, #9
 800649e:	430a      	orrs	r2, r1
 80064a0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064a2:	4b1d      	ldr	r3, [pc, #116]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80064a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064a6:	4b1c      	ldr	r3, [pc, #112]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80064a8:	491e      	ldr	r1, [pc, #120]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80064aa:	400a      	ands	r2, r1
 80064ac:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064ae:	4b1a      	ldr	r3, [pc, #104]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2201      	movs	r2, #1
 80064b8:	4013      	ands	r3, r2
 80064ba:	d016      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064bc:	f7fb fcb4 	bl	8001e28 <HAL_GetTick>
 80064c0:	0003      	movs	r3, r0
 80064c2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064c4:	e00c      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c6:	f7fb fcaf 	bl	8001e28 <HAL_GetTick>
 80064ca:	0002      	movs	r2, r0
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	4a15      	ldr	r2, [pc, #84]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d904      	bls.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80064d6:	2313      	movs	r3, #19
 80064d8:	18fb      	adds	r3, r7, r3
 80064da:	2203      	movs	r2, #3
 80064dc:	701a      	strb	r2, [r3, #0]
            break;
 80064de:	e004      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064e0:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80064e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e4:	2202      	movs	r2, #2
 80064e6:	4013      	ands	r3, r2
 80064e8:	d0ed      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80064ea:	2313      	movs	r3, #19
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064f4:	4b08      	ldr	r3, [pc, #32]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80064f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f8:	4a09      	ldr	r2, [pc, #36]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	0019      	movs	r1, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006502:	4b05      	ldr	r3, [pc, #20]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006504:	430a      	orrs	r2, r1
 8006506:	65da      	str	r2, [r3, #92]	; 0x5c
 8006508:	e016      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800650a:	2312      	movs	r3, #18
 800650c:	18fb      	adds	r3, r7, r3
 800650e:	2213      	movs	r2, #19
 8006510:	18ba      	adds	r2, r7, r2
 8006512:	7812      	ldrb	r2, [r2, #0]
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	e00f      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006518:	40021000 	.word	0x40021000
 800651c:	40007000 	.word	0x40007000
 8006520:	fffffcff 	.word	0xfffffcff
 8006524:	fffeffff 	.word	0xfffeffff
 8006528:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	2312      	movs	r3, #18
 800652e:	18fb      	adds	r3, r7, r3
 8006530:	2213      	movs	r2, #19
 8006532:	18ba      	adds	r2, r7, r2
 8006534:	7812      	ldrb	r2, [r2, #0]
 8006536:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006538:	2311      	movs	r3, #17
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d105      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006542:	4bb6      	ldr	r3, [pc, #728]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006546:	4bb5      	ldr	r3, [pc, #724]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006548:	49b5      	ldr	r1, [pc, #724]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800654a:	400a      	ands	r2, r1
 800654c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2201      	movs	r2, #1
 8006554:	4013      	ands	r3, r2
 8006556:	d009      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006558:	4bb0      	ldr	r3, [pc, #704]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800655a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655c:	2203      	movs	r2, #3
 800655e:	4393      	bics	r3, r2
 8006560:	0019      	movs	r1, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	4bad      	ldr	r3, [pc, #692]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006568:	430a      	orrs	r2, r1
 800656a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2202      	movs	r2, #2
 8006572:	4013      	ands	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006576:	4ba9      	ldr	r3, [pc, #676]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657a:	220c      	movs	r2, #12
 800657c:	4393      	bics	r3, r2
 800657e:	0019      	movs	r1, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	4ba5      	ldr	r3, [pc, #660]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006586:	430a      	orrs	r2, r1
 8006588:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2204      	movs	r2, #4
 8006590:	4013      	ands	r3, r2
 8006592:	d009      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006594:	4ba1      	ldr	r3, [pc, #644]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006598:	2230      	movs	r2, #48	; 0x30
 800659a:	4393      	bics	r3, r2
 800659c:	0019      	movs	r1, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	4b9e      	ldr	r3, [pc, #632]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065a4:	430a      	orrs	r2, r1
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2210      	movs	r2, #16
 80065ae:	4013      	ands	r3, r2
 80065b0:	d009      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065b2:	4b9a      	ldr	r3, [pc, #616]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	4a9b      	ldr	r2, [pc, #620]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	0019      	movs	r1, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	4b96      	ldr	r3, [pc, #600]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065c2:	430a      	orrs	r2, r1
 80065c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	2380      	movs	r3, #128	; 0x80
 80065cc:	015b      	lsls	r3, r3, #5
 80065ce:	4013      	ands	r3, r2
 80065d0:	d009      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80065d2:	4b92      	ldr	r3, [pc, #584]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	4a94      	ldr	r2, [pc, #592]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065d8:	4013      	ands	r3, r2
 80065da:	0019      	movs	r1, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	4b8e      	ldr	r3, [pc, #568]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065e2:	430a      	orrs	r2, r1
 80065e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	2380      	movs	r3, #128	; 0x80
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4013      	ands	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065f2:	4b8a      	ldr	r3, [pc, #552]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f6:	4a8d      	ldr	r2, [pc, #564]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	0019      	movs	r1, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006600:	4b86      	ldr	r3, [pc, #536]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006602:	430a      	orrs	r2, r1
 8006604:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	2380      	movs	r3, #128	; 0x80
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	4013      	ands	r3, r2
 8006610:	d009      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006612:	4b82      	ldr	r3, [pc, #520]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006616:	4a86      	ldr	r2, [pc, #536]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8006618:	4013      	ands	r3, r2
 800661a:	0019      	movs	r1, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006620:	4b7e      	ldr	r3, [pc, #504]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006622:	430a      	orrs	r2, r1
 8006624:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2220      	movs	r2, #32
 800662c:	4013      	ands	r3, r2
 800662e:	d009      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006630:	4b7a      	ldr	r3, [pc, #488]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006634:	4a7f      	ldr	r2, [pc, #508]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006636:	4013      	ands	r3, r2
 8006638:	0019      	movs	r1, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	4b77      	ldr	r3, [pc, #476]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006640:	430a      	orrs	r2, r1
 8006642:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2240      	movs	r2, #64	; 0x40
 800664a:	4013      	ands	r3, r2
 800664c:	d009      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800664e:	4b73      	ldr	r3, [pc, #460]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006652:	4a79      	ldr	r2, [pc, #484]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006654:	4013      	ands	r3, r2
 8006656:	0019      	movs	r1, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	4b6f      	ldr	r3, [pc, #444]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800665e:	430a      	orrs	r2, r1
 8006660:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	2380      	movs	r3, #128	; 0x80
 8006668:	01db      	lsls	r3, r3, #7
 800666a:	4013      	ands	r3, r2
 800666c:	d015      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800666e:	4b6b      	ldr	r3, [pc, #428]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	0899      	lsrs	r1, r3, #2
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800667a:	4b68      	ldr	r3, [pc, #416]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800667c:	430a      	orrs	r2, r1
 800667e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006684:	2380      	movs	r3, #128	; 0x80
 8006686:	05db      	lsls	r3, r3, #23
 8006688:	429a      	cmp	r2, r3
 800668a:	d106      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800668c:	4b63      	ldr	r3, [pc, #396]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	4b62      	ldr	r3, [pc, #392]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006692:	2180      	movs	r1, #128	; 0x80
 8006694:	0249      	lsls	r1, r1, #9
 8006696:	430a      	orrs	r2, r1
 8006698:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	2380      	movs	r3, #128	; 0x80
 80066a0:	031b      	lsls	r3, r3, #12
 80066a2:	4013      	ands	r3, r2
 80066a4:	d009      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066a6:	4b5d      	ldr	r3, [pc, #372]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066aa:	2240      	movs	r2, #64	; 0x40
 80066ac:	4393      	bics	r3, r2
 80066ae:	0019      	movs	r1, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066b4:	4b59      	ldr	r3, [pc, #356]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066b6:	430a      	orrs	r2, r1
 80066b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	2380      	movs	r3, #128	; 0x80
 80066c0:	039b      	lsls	r3, r3, #14
 80066c2:	4013      	ands	r3, r2
 80066c4:	d016      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80066c6:	4b55      	ldr	r3, [pc, #340]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	4a5c      	ldr	r2, [pc, #368]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	0019      	movs	r1, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d4:	4b51      	ldr	r3, [pc, #324]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066d6:	430a      	orrs	r2, r1
 80066d8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066de:	2380      	movs	r3, #128	; 0x80
 80066e0:	03db      	lsls	r3, r3, #15
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d106      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80066e6:	4b4d      	ldr	r3, [pc, #308]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	4b4c      	ldr	r3, [pc, #304]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	0449      	lsls	r1, r1, #17
 80066f0:	430a      	orrs	r2, r1
 80066f2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	03db      	lsls	r3, r3, #15
 80066fc:	4013      	ands	r3, r2
 80066fe:	d016      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006700:	4b46      	ldr	r3, [pc, #280]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006704:	4a4e      	ldr	r2, [pc, #312]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006706:	4013      	ands	r3, r2
 8006708:	0019      	movs	r1, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800670e:	4b43      	ldr	r3, [pc, #268]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006710:	430a      	orrs	r2, r1
 8006712:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006718:	2380      	movs	r3, #128	; 0x80
 800671a:	045b      	lsls	r3, r3, #17
 800671c:	429a      	cmp	r2, r3
 800671e:	d106      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006720:	4b3e      	ldr	r3, [pc, #248]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	4b3d      	ldr	r3, [pc, #244]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006726:	2180      	movs	r1, #128	; 0x80
 8006728:	0449      	lsls	r1, r1, #17
 800672a:	430a      	orrs	r2, r1
 800672c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	2380      	movs	r3, #128	; 0x80
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	4013      	ands	r3, r2
 8006738:	d014      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800673a:	4b38      	ldr	r3, [pc, #224]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	2203      	movs	r2, #3
 8006740:	4393      	bics	r3, r2
 8006742:	0019      	movs	r1, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1a      	ldr	r2, [r3, #32]
 8006748:	4b34      	ldr	r3, [pc, #208]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800674a:	430a      	orrs	r2, r1
 800674c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d106      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006756:	4b31      	ldr	r3, [pc, #196]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	4b30      	ldr	r3, [pc, #192]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800675c:	2180      	movs	r1, #128	; 0x80
 800675e:	0249      	lsls	r1, r1, #9
 8006760:	430a      	orrs	r2, r1
 8006762:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	019b      	lsls	r3, r3, #6
 800676c:	4013      	ands	r3, r2
 800676e:	d014      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006770:	4b2a      	ldr	r3, [pc, #168]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006774:	220c      	movs	r2, #12
 8006776:	4393      	bics	r3, r2
 8006778:	0019      	movs	r1, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800677e:	4b27      	ldr	r3, [pc, #156]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006780:	430a      	orrs	r2, r1
 8006782:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	2b04      	cmp	r3, #4
 800678a:	d106      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800678c:	4b23      	ldr	r3, [pc, #140]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	4b22      	ldr	r3, [pc, #136]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006792:	2180      	movs	r1, #128	; 0x80
 8006794:	0249      	lsls	r1, r1, #9
 8006796:	430a      	orrs	r2, r1
 8006798:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	045b      	lsls	r3, r3, #17
 80067a2:	4013      	ands	r3, r2
 80067a4:	d016      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067a6:	4b1d      	ldr	r3, [pc, #116]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067aa:	4a22      	ldr	r2, [pc, #136]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	0019      	movs	r1, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067b4:	4b19      	ldr	r3, [pc, #100]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067b6:	430a      	orrs	r2, r1
 80067b8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067be:	2380      	movs	r3, #128	; 0x80
 80067c0:	019b      	lsls	r3, r3, #6
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d106      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80067c6:	4b15      	ldr	r3, [pc, #84]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	4b14      	ldr	r3, [pc, #80]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067cc:	2180      	movs	r1, #128	; 0x80
 80067ce:	0449      	lsls	r1, r1, #17
 80067d0:	430a      	orrs	r2, r1
 80067d2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	2380      	movs	r3, #128	; 0x80
 80067da:	049b      	lsls	r3, r3, #18
 80067dc:	4013      	ands	r3, r2
 80067de:	d016      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067e0:	4b0e      	ldr	r3, [pc, #56]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e4:	4a10      	ldr	r2, [pc, #64]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	0019      	movs	r1, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067ee:	4b0b      	ldr	r3, [pc, #44]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067f0:	430a      	orrs	r2, r1
 80067f2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067f8:	2380      	movs	r3, #128	; 0x80
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d106      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006800:	4b06      	ldr	r3, [pc, #24]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006806:	2180      	movs	r1, #128	; 0x80
 8006808:	0449      	lsls	r1, r1, #17
 800680a:	430a      	orrs	r2, r1
 800680c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800680e:	2312      	movs	r3, #18
 8006810:	18fb      	adds	r3, r7, r3
 8006812:	781b      	ldrb	r3, [r3, #0]
}
 8006814:	0018      	movs	r0, r3
 8006816:	46bd      	mov	sp, r7
 8006818:	b006      	add	sp, #24
 800681a:	bd80      	pop	{r7, pc}
 800681c:	40021000 	.word	0x40021000
 8006820:	efffffff 	.word	0xefffffff
 8006824:	fffff3ff 	.word	0xfffff3ff
 8006828:	fffffcff 	.word	0xfffffcff
 800682c:	fff3ffff 	.word	0xfff3ffff
 8006830:	ffcfffff 	.word	0xffcfffff
 8006834:	ffffcfff 	.word	0xffffcfff
 8006838:	ffff3fff 	.word	0xffff3fff
 800683c:	ffbfffff 	.word	0xffbfffff
 8006840:	feffffff 	.word	0xfeffffff

08006844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e04a      	b.n	80068ec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	223d      	movs	r2, #61	; 0x3d
 800685a:	5c9b      	ldrb	r3, [r3, r2]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d107      	bne.n	8006872 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	223c      	movs	r2, #60	; 0x3c
 8006866:	2100      	movs	r1, #0
 8006868:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	0018      	movs	r0, r3
 800686e:	f7fa fe99 	bl	80015a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	223d      	movs	r2, #61	; 0x3d
 8006876:	2102      	movs	r1, #2
 8006878:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3304      	adds	r3, #4
 8006882:	0019      	movs	r1, r3
 8006884:	0010      	movs	r0, r2
 8006886:	f000 f92b 	bl	8006ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2248      	movs	r2, #72	; 0x48
 800688e:	2101      	movs	r1, #1
 8006890:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	223e      	movs	r2, #62	; 0x3e
 8006896:	2101      	movs	r1, #1
 8006898:	5499      	strb	r1, [r3, r2]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	223f      	movs	r2, #63	; 0x3f
 800689e:	2101      	movs	r1, #1
 80068a0:	5499      	strb	r1, [r3, r2]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2240      	movs	r2, #64	; 0x40
 80068a6:	2101      	movs	r1, #1
 80068a8:	5499      	strb	r1, [r3, r2]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2241      	movs	r2, #65	; 0x41
 80068ae:	2101      	movs	r1, #1
 80068b0:	5499      	strb	r1, [r3, r2]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2242      	movs	r2, #66	; 0x42
 80068b6:	2101      	movs	r1, #1
 80068b8:	5499      	strb	r1, [r3, r2]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2243      	movs	r2, #67	; 0x43
 80068be:	2101      	movs	r1, #1
 80068c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2244      	movs	r2, #68	; 0x44
 80068c6:	2101      	movs	r1, #1
 80068c8:	5499      	strb	r1, [r3, r2]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2245      	movs	r2, #69	; 0x45
 80068ce:	2101      	movs	r1, #1
 80068d0:	5499      	strb	r1, [r3, r2]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2246      	movs	r2, #70	; 0x46
 80068d6:	2101      	movs	r1, #1
 80068d8:	5499      	strb	r1, [r3, r2]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2247      	movs	r2, #71	; 0x47
 80068de:	2101      	movs	r1, #1
 80068e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	223d      	movs	r2, #61	; 0x3d
 80068e6:	2101      	movs	r1, #1
 80068e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	0018      	movs	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	b002      	add	sp, #8
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	223c      	movs	r2, #60	; 0x3c
 8006904:	5c9b      	ldrb	r3, [r3, r2]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800690a:	2302      	movs	r3, #2
 800690c:	e0df      	b.n	8006ace <HAL_TIM_PWM_ConfigChannel+0x1da>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	223c      	movs	r2, #60	; 0x3c
 8006912:	2101      	movs	r1, #1
 8006914:	5499      	strb	r1, [r3, r2]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b14      	cmp	r3, #20
 800691a:	d900      	bls.n	800691e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800691c:	e0d1      	b.n	8006ac2 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	009a      	lsls	r2, r3, #2
 8006922:	4b6d      	ldr	r3, [pc, #436]	; (8006ad8 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8006924:	18d3      	adds	r3, r2, r3
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	0011      	movs	r1, r2
 8006932:	0018      	movs	r0, r3
 8006934:	f000 f95e 	bl	8006bf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2108      	movs	r1, #8
 8006944:	430a      	orrs	r2, r1
 8006946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2104      	movs	r1, #4
 8006954:	438a      	bics	r2, r1
 8006956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6999      	ldr	r1, [r3, #24]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	691a      	ldr	r2, [r3, #16]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	619a      	str	r2, [r3, #24]
      break;
 800696a:	e0ab      	b.n	8006ac4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	0011      	movs	r1, r2
 8006974:	0018      	movs	r0, r3
 8006976:	f000 f9c7 	bl	8006d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2180      	movs	r1, #128	; 0x80
 8006986:	0109      	lsls	r1, r1, #4
 8006988:	430a      	orrs	r2, r1
 800698a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699a      	ldr	r2, [r3, #24]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4951      	ldr	r1, [pc, #324]	; (8006adc <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006998:	400a      	ands	r2, r1
 800699a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6999      	ldr	r1, [r3, #24]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	021a      	lsls	r2, r3, #8
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	619a      	str	r2, [r3, #24]
      break;
 80069b0:	e088      	b.n	8006ac4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	0011      	movs	r1, r2
 80069ba:	0018      	movs	r0, r3
 80069bc:	f000 fa28 	bl	8006e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	69da      	ldr	r2, [r3, #28]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2108      	movs	r1, #8
 80069cc:	430a      	orrs	r2, r1
 80069ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69da      	ldr	r2, [r3, #28]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2104      	movs	r1, #4
 80069dc:	438a      	bics	r2, r1
 80069de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69d9      	ldr	r1, [r3, #28]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	691a      	ldr	r2, [r3, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	61da      	str	r2, [r3, #28]
      break;
 80069f2:	e067      	b.n	8006ac4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	0011      	movs	r1, r2
 80069fc:	0018      	movs	r0, r3
 80069fe:	f000 fa8f 	bl	8006f20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69da      	ldr	r2, [r3, #28]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2180      	movs	r1, #128	; 0x80
 8006a0e:	0109      	lsls	r1, r1, #4
 8006a10:	430a      	orrs	r2, r1
 8006a12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69da      	ldr	r2, [r3, #28]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	492f      	ldr	r1, [pc, #188]	; (8006adc <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006a20:	400a      	ands	r2, r1
 8006a22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69d9      	ldr	r1, [r3, #28]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	021a      	lsls	r2, r3, #8
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	61da      	str	r2, [r3, #28]
      break;
 8006a38:	e044      	b.n	8006ac4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	0011      	movs	r1, r2
 8006a42:	0018      	movs	r0, r3
 8006a44:	f000 fad6 	bl	8006ff4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2108      	movs	r1, #8
 8006a54:	430a      	orrs	r2, r1
 8006a56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2104      	movs	r1, #4
 8006a64:	438a      	bics	r2, r1
 8006a66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a7a:	e023      	b.n	8006ac4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	0011      	movs	r1, r2
 8006a84:	0018      	movs	r0, r3
 8006a86:	f000 fb15 	bl	80070b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2180      	movs	r1, #128	; 0x80
 8006a96:	0109      	lsls	r1, r1, #4
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	490d      	ldr	r1, [pc, #52]	; (8006adc <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006aa8:	400a      	ands	r2, r1
 8006aaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	021a      	lsls	r2, r3, #8
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ac0:	e000      	b.n	8006ac4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8006ac2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	223c      	movs	r2, #60	; 0x3c
 8006ac8:	2100      	movs	r1, #0
 8006aca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	0018      	movs	r0, r3
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b004      	add	sp, #16
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	46c0      	nop			; (mov r8, r8)
 8006ad8:	080094e0 	.word	0x080094e0
 8006adc:	fffffbff 	.word	0xfffffbff

08006ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a38      	ldr	r2, [pc, #224]	; (8006bd4 <TIM_Base_SetConfig+0xf4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00c      	beq.n	8006b12 <TIM_Base_SetConfig+0x32>
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	2380      	movs	r3, #128	; 0x80
 8006afc:	05db      	lsls	r3, r3, #23
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d007      	beq.n	8006b12 <TIM_Base_SetConfig+0x32>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a34      	ldr	r2, [pc, #208]	; (8006bd8 <TIM_Base_SetConfig+0xf8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d003      	beq.n	8006b12 <TIM_Base_SetConfig+0x32>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a33      	ldr	r2, [pc, #204]	; (8006bdc <TIM_Base_SetConfig+0xfc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d108      	bne.n	8006b24 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2270      	movs	r2, #112	; 0x70
 8006b16:	4393      	bics	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a2b      	ldr	r2, [pc, #172]	; (8006bd4 <TIM_Base_SetConfig+0xf4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d01c      	beq.n	8006b66 <TIM_Base_SetConfig+0x86>
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	2380      	movs	r3, #128	; 0x80
 8006b30:	05db      	lsls	r3, r3, #23
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d017      	beq.n	8006b66 <TIM_Base_SetConfig+0x86>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <TIM_Base_SetConfig+0xf8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d013      	beq.n	8006b66 <TIM_Base_SetConfig+0x86>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a26      	ldr	r2, [pc, #152]	; (8006bdc <TIM_Base_SetConfig+0xfc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00f      	beq.n	8006b66 <TIM_Base_SetConfig+0x86>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a25      	ldr	r2, [pc, #148]	; (8006be0 <TIM_Base_SetConfig+0x100>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00b      	beq.n	8006b66 <TIM_Base_SetConfig+0x86>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a24      	ldr	r2, [pc, #144]	; (8006be4 <TIM_Base_SetConfig+0x104>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d007      	beq.n	8006b66 <TIM_Base_SetConfig+0x86>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a23      	ldr	r2, [pc, #140]	; (8006be8 <TIM_Base_SetConfig+0x108>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_Base_SetConfig+0x86>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a22      	ldr	r2, [pc, #136]	; (8006bec <TIM_Base_SetConfig+0x10c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d108      	bne.n	8006b78 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a21      	ldr	r2, [pc, #132]	; (8006bf0 <TIM_Base_SetConfig+0x110>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2280      	movs	r2, #128	; 0x80
 8006b7c:	4393      	bics	r3, r2
 8006b7e:	001a      	movs	r2, r3
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a0c      	ldr	r2, [pc, #48]	; (8006bd4 <TIM_Base_SetConfig+0xf4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00b      	beq.n	8006bbe <TIM_Base_SetConfig+0xde>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a0e      	ldr	r2, [pc, #56]	; (8006be4 <TIM_Base_SetConfig+0x104>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d007      	beq.n	8006bbe <TIM_Base_SetConfig+0xde>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a0d      	ldr	r2, [pc, #52]	; (8006be8 <TIM_Base_SetConfig+0x108>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <TIM_Base_SetConfig+0xde>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a0c      	ldr	r2, [pc, #48]	; (8006bec <TIM_Base_SetConfig+0x10c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d103      	bne.n	8006bc6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	615a      	str	r2, [r3, #20]
}
 8006bcc:	46c0      	nop			; (mov r8, r8)
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b004      	add	sp, #16
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40012c00 	.word	0x40012c00
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40002000 	.word	0x40002000
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800
 8006bf0:	fffffcff 	.word	0xfffffcff

08006bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	2201      	movs	r2, #1
 8006c04:	4393      	bics	r3, r2
 8006c06:	001a      	movs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a32      	ldr	r2, [pc, #200]	; (8006cec <TIM_OC1_SetConfig+0xf8>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2203      	movs	r2, #3
 8006c2a:	4393      	bics	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	4393      	bics	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a28      	ldr	r2, [pc, #160]	; (8006cf0 <TIM_OC1_SetConfig+0xfc>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00b      	beq.n	8006c6a <TIM_OC1_SetConfig+0x76>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a27      	ldr	r2, [pc, #156]	; (8006cf4 <TIM_OC1_SetConfig+0x100>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d007      	beq.n	8006c6a <TIM_OC1_SetConfig+0x76>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a26      	ldr	r2, [pc, #152]	; (8006cf8 <TIM_OC1_SetConfig+0x104>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d003      	beq.n	8006c6a <TIM_OC1_SetConfig+0x76>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a25      	ldr	r2, [pc, #148]	; (8006cfc <TIM_OC1_SetConfig+0x108>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d10c      	bne.n	8006c84 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	4393      	bics	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	4393      	bics	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <TIM_OC1_SetConfig+0xfc>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00b      	beq.n	8006ca4 <TIM_OC1_SetConfig+0xb0>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a19      	ldr	r2, [pc, #100]	; (8006cf4 <TIM_OC1_SetConfig+0x100>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d007      	beq.n	8006ca4 <TIM_OC1_SetConfig+0xb0>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a18      	ldr	r2, [pc, #96]	; (8006cf8 <TIM_OC1_SetConfig+0x104>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_OC1_SetConfig+0xb0>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a17      	ldr	r2, [pc, #92]	; (8006cfc <TIM_OC1_SetConfig+0x108>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d111      	bne.n	8006cc8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	4a16      	ldr	r2, [pc, #88]	; (8006d00 <TIM_OC1_SetConfig+0x10c>)
 8006ca8:	4013      	ands	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	4a15      	ldr	r2, [pc, #84]	; (8006d04 <TIM_OC1_SetConfig+0x110>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	b006      	add	sp, #24
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	fffeff8f 	.word	0xfffeff8f
 8006cf0:	40012c00 	.word	0x40012c00
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800
 8006d00:	fffffeff 	.word	0xfffffeff
 8006d04:	fffffdff 	.word	0xfffffdff

08006d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	2210      	movs	r2, #16
 8006d18:	4393      	bics	r3, r2
 8006d1a:	001a      	movs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4a2e      	ldr	r2, [pc, #184]	; (8006df0 <TIM_OC2_SetConfig+0xe8>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4a2d      	ldr	r2, [pc, #180]	; (8006df4 <TIM_OC2_SetConfig+0xec>)
 8006d3e:	4013      	ands	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	021b      	lsls	r3, r3, #8
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2220      	movs	r2, #32
 8006d52:	4393      	bics	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a24      	ldr	r2, [pc, #144]	; (8006df8 <TIM_OC2_SetConfig+0xf0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d10d      	bne.n	8006d86 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2280      	movs	r2, #128	; 0x80
 8006d6e:	4393      	bics	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2240      	movs	r2, #64	; 0x40
 8006d82:	4393      	bics	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a1b      	ldr	r2, [pc, #108]	; (8006df8 <TIM_OC2_SetConfig+0xf0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00b      	beq.n	8006da6 <TIM_OC2_SetConfig+0x9e>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a1a      	ldr	r2, [pc, #104]	; (8006dfc <TIM_OC2_SetConfig+0xf4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d007      	beq.n	8006da6 <TIM_OC2_SetConfig+0x9e>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a19      	ldr	r2, [pc, #100]	; (8006e00 <TIM_OC2_SetConfig+0xf8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d003      	beq.n	8006da6 <TIM_OC2_SetConfig+0x9e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a18      	ldr	r2, [pc, #96]	; (8006e04 <TIM_OC2_SetConfig+0xfc>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d113      	bne.n	8006dce <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <TIM_OC2_SetConfig+0x100>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	4a16      	ldr	r2, [pc, #88]	; (8006e0c <TIM_OC2_SetConfig+0x104>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	621a      	str	r2, [r3, #32]
}
 8006de8:	46c0      	nop			; (mov r8, r8)
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b006      	add	sp, #24
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	feff8fff 	.word	0xfeff8fff
 8006df4:	fffffcff 	.word	0xfffffcff
 8006df8:	40012c00 	.word	0x40012c00
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40014400 	.word	0x40014400
 8006e04:	40014800 	.word	0x40014800
 8006e08:	fffffbff 	.word	0xfffffbff
 8006e0c:	fffff7ff 	.word	0xfffff7ff

08006e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	4a35      	ldr	r2, [pc, #212]	; (8006ef4 <TIM_OC3_SetConfig+0xe4>)
 8006e20:	401a      	ands	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4a2f      	ldr	r2, [pc, #188]	; (8006ef8 <TIM_OC3_SetConfig+0xe8>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2203      	movs	r2, #3
 8006e44:	4393      	bics	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	4a29      	ldr	r2, [pc, #164]	; (8006efc <TIM_OC3_SetConfig+0xec>)
 8006e56:	4013      	ands	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	021b      	lsls	r3, r3, #8
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a25      	ldr	r2, [pc, #148]	; (8006f00 <TIM_OC3_SetConfig+0xf0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d10d      	bne.n	8006e8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	4a24      	ldr	r2, [pc, #144]	; (8006f04 <TIM_OC3_SetConfig+0xf4>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	4a20      	ldr	r2, [pc, #128]	; (8006f08 <TIM_OC3_SetConfig+0xf8>)
 8006e86:	4013      	ands	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a1c      	ldr	r2, [pc, #112]	; (8006f00 <TIM_OC3_SetConfig+0xf0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00b      	beq.n	8006eaa <TIM_OC3_SetConfig+0x9a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a1d      	ldr	r2, [pc, #116]	; (8006f0c <TIM_OC3_SetConfig+0xfc>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d007      	beq.n	8006eaa <TIM_OC3_SetConfig+0x9a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a1c      	ldr	r2, [pc, #112]	; (8006f10 <TIM_OC3_SetConfig+0x100>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d003      	beq.n	8006eaa <TIM_OC3_SetConfig+0x9a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a1b      	ldr	r2, [pc, #108]	; (8006f14 <TIM_OC3_SetConfig+0x104>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d113      	bne.n	8006ed2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	4a1a      	ldr	r2, [pc, #104]	; (8006f18 <TIM_OC3_SetConfig+0x108>)
 8006eae:	4013      	ands	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	4a19      	ldr	r2, [pc, #100]	; (8006f1c <TIM_OC3_SetConfig+0x10c>)
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	621a      	str	r2, [r3, #32]
}
 8006eec:	46c0      	nop			; (mov r8, r8)
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	b006      	add	sp, #24
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	fffffeff 	.word	0xfffffeff
 8006ef8:	fffeff8f 	.word	0xfffeff8f
 8006efc:	fffffdff 	.word	0xfffffdff
 8006f00:	40012c00 	.word	0x40012c00
 8006f04:	fffff7ff 	.word	0xfffff7ff
 8006f08:	fffffbff 	.word	0xfffffbff
 8006f0c:	40014000 	.word	0x40014000
 8006f10:	40014400 	.word	0x40014400
 8006f14:	40014800 	.word	0x40014800
 8006f18:	ffffefff 	.word	0xffffefff
 8006f1c:	ffffdfff 	.word	0xffffdfff

08006f20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	4a28      	ldr	r2, [pc, #160]	; (8006fd0 <TIM_OC4_SetConfig+0xb0>)
 8006f30:	401a      	ands	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4a22      	ldr	r2, [pc, #136]	; (8006fd4 <TIM_OC4_SetConfig+0xb4>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4a21      	ldr	r2, [pc, #132]	; (8006fd8 <TIM_OC4_SetConfig+0xb8>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	021b      	lsls	r3, r3, #8
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <TIM_OC4_SetConfig+0xbc>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	031b      	lsls	r3, r3, #12
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a19      	ldr	r2, [pc, #100]	; (8006fe0 <TIM_OC4_SetConfig+0xc0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00b      	beq.n	8006f98 <TIM_OC4_SetConfig+0x78>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a18      	ldr	r2, [pc, #96]	; (8006fe4 <TIM_OC4_SetConfig+0xc4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d007      	beq.n	8006f98 <TIM_OC4_SetConfig+0x78>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <TIM_OC4_SetConfig+0xc8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d003      	beq.n	8006f98 <TIM_OC4_SetConfig+0x78>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a16      	ldr	r2, [pc, #88]	; (8006fec <TIM_OC4_SetConfig+0xcc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d109      	bne.n	8006fac <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <TIM_OC4_SetConfig+0xd0>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	019b      	lsls	r3, r3, #6
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	46c0      	nop			; (mov r8, r8)
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	b006      	add	sp, #24
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	ffffefff 	.word	0xffffefff
 8006fd4:	feff8fff 	.word	0xfeff8fff
 8006fd8:	fffffcff 	.word	0xfffffcff
 8006fdc:	ffffdfff 	.word	0xffffdfff
 8006fe0:	40012c00 	.word	0x40012c00
 8006fe4:	40014000 	.word	0x40014000
 8006fe8:	40014400 	.word	0x40014400
 8006fec:	40014800 	.word	0x40014800
 8006ff0:	ffffbfff 	.word	0xffffbfff

08006ff4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	4a25      	ldr	r2, [pc, #148]	; (8007098 <TIM_OC5_SetConfig+0xa4>)
 8007004:	401a      	ands	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4a1f      	ldr	r2, [pc, #124]	; (800709c <TIM_OC5_SetConfig+0xa8>)
 8007020:	4013      	ands	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	4a1b      	ldr	r2, [pc, #108]	; (80070a0 <TIM_OC5_SetConfig+0xac>)
 8007032:	4013      	ands	r3, r2
 8007034:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	041b      	lsls	r3, r3, #16
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a17      	ldr	r2, [pc, #92]	; (80070a4 <TIM_OC5_SetConfig+0xb0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00b      	beq.n	8007062 <TIM_OC5_SetConfig+0x6e>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a16      	ldr	r2, [pc, #88]	; (80070a8 <TIM_OC5_SetConfig+0xb4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d007      	beq.n	8007062 <TIM_OC5_SetConfig+0x6e>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a15      	ldr	r2, [pc, #84]	; (80070ac <TIM_OC5_SetConfig+0xb8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_OC5_SetConfig+0x6e>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a14      	ldr	r2, [pc, #80]	; (80070b0 <TIM_OC5_SetConfig+0xbc>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d109      	bne.n	8007076 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	4a0c      	ldr	r2, [pc, #48]	; (8007098 <TIM_OC5_SetConfig+0xa4>)
 8007066:	4013      	ands	r3, r2
 8007068:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	4313      	orrs	r3, r2
 8007074:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	621a      	str	r2, [r3, #32]
}
 8007090:	46c0      	nop			; (mov r8, r8)
 8007092:	46bd      	mov	sp, r7
 8007094:	b006      	add	sp, #24
 8007096:	bd80      	pop	{r7, pc}
 8007098:	fffeffff 	.word	0xfffeffff
 800709c:	fffeff8f 	.word	0xfffeff8f
 80070a0:	fffdffff 	.word	0xfffdffff
 80070a4:	40012c00 	.word	0x40012c00
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40014400 	.word	0x40014400
 80070b0:	40014800 	.word	0x40014800

080070b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	4a26      	ldr	r2, [pc, #152]	; (800715c <TIM_OC6_SetConfig+0xa8>)
 80070c4:	401a      	ands	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a20      	ldr	r2, [pc, #128]	; (8007160 <TIM_OC6_SetConfig+0xac>)
 80070e0:	4013      	ands	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	021b      	lsls	r3, r3, #8
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	4a1c      	ldr	r2, [pc, #112]	; (8007164 <TIM_OC6_SetConfig+0xb0>)
 80070f4:	4013      	ands	r3, r2
 80070f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	051b      	lsls	r3, r3, #20
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a18      	ldr	r2, [pc, #96]	; (8007168 <TIM_OC6_SetConfig+0xb4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00b      	beq.n	8007124 <TIM_OC6_SetConfig+0x70>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a17      	ldr	r2, [pc, #92]	; (800716c <TIM_OC6_SetConfig+0xb8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d007      	beq.n	8007124 <TIM_OC6_SetConfig+0x70>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a16      	ldr	r2, [pc, #88]	; (8007170 <TIM_OC6_SetConfig+0xbc>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <TIM_OC6_SetConfig+0x70>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a15      	ldr	r2, [pc, #84]	; (8007174 <TIM_OC6_SetConfig+0xc0>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d109      	bne.n	8007138 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	4a14      	ldr	r2, [pc, #80]	; (8007178 <TIM_OC6_SetConfig+0xc4>)
 8007128:	4013      	ands	r3, r2
 800712a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	029b      	lsls	r3, r3, #10
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	46bd      	mov	sp, r7
 8007156:	b006      	add	sp, #24
 8007158:	bd80      	pop	{r7, pc}
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	ffefffff 	.word	0xffefffff
 8007160:	feff8fff 	.word	0xfeff8fff
 8007164:	ffdfffff 	.word	0xffdfffff
 8007168:	40012c00 	.word	0x40012c00
 800716c:	40014000 	.word	0x40014000
 8007170:	40014400 	.word	0x40014400
 8007174:	40014800 	.word	0x40014800
 8007178:	fffbffff 	.word	0xfffbffff

0800717c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	223c      	movs	r2, #60	; 0x3c
 800718a:	5c9b      	ldrb	r3, [r3, r2]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d101      	bne.n	8007194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007190:	2302      	movs	r3, #2
 8007192:	e05a      	b.n	800724a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	223c      	movs	r2, #60	; 0x3c
 8007198:	2101      	movs	r1, #1
 800719a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	223d      	movs	r2, #61	; 0x3d
 80071a0:	2102      	movs	r1, #2
 80071a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a26      	ldr	r2, [pc, #152]	; (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d108      	bne.n	80071d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4a25      	ldr	r2, [pc, #148]	; (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071c2:	4013      	ands	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2270      	movs	r2, #112	; 0x70
 80071d4:	4393      	bics	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a19      	ldr	r2, [pc, #100]	; (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d014      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	2380      	movs	r3, #128	; 0x80
 80071fa:	05db      	lsls	r3, r3, #23
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d00e      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a15      	ldr	r2, [pc, #84]	; (800725c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d009      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a14      	ldr	r2, [pc, #80]	; (8007260 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d004      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a12      	ldr	r2, [pc, #72]	; (8007264 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d10c      	bne.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2280      	movs	r2, #128	; 0x80
 8007222:	4393      	bics	r3, r2
 8007224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	4313      	orrs	r3, r2
 800722e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	223d      	movs	r2, #61	; 0x3d
 800723c:	2101      	movs	r1, #1
 800723e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	223c      	movs	r2, #60	; 0x3c
 8007244:	2100      	movs	r1, #0
 8007246:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	0018      	movs	r0, r3
 800724c:	46bd      	mov	sp, r7
 800724e:	b004      	add	sp, #16
 8007250:	bd80      	pop	{r7, pc}
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	40012c00 	.word	0x40012c00
 8007258:	ff0fffff 	.word	0xff0fffff
 800725c:	40000400 	.word	0x40000400
 8007260:	40000800 	.word	0x40000800
 8007264:	40014000 	.word	0x40014000

08007268 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	223c      	movs	r2, #60	; 0x3c
 800727a:	5c9b      	ldrb	r3, [r3, r2]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007280:	2302      	movs	r3, #2
 8007282:	e079      	b.n	8007378 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	223c      	movs	r2, #60	; 0x3c
 8007288:	2101      	movs	r1, #1
 800728a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	22ff      	movs	r2, #255	; 0xff
 8007290:	4393      	bics	r3, r2
 8007292:	001a      	movs	r2, r3
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4a38      	ldr	r2, [pc, #224]	; (8007380 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80072a0:	401a      	ands	r2, r3
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4a35      	ldr	r2, [pc, #212]	; (8007384 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80072ae:	401a      	ands	r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a33      	ldr	r2, [pc, #204]	; (8007388 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80072bc:	401a      	ands	r2, r3
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4a30      	ldr	r2, [pc, #192]	; (800738c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80072ca:	401a      	ands	r2, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4a2e      	ldr	r2, [pc, #184]	; (8007390 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80072d8:	401a      	ands	r2, r3
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4a2b      	ldr	r2, [pc, #172]	; (8007394 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80072e6:	401a      	ands	r2, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4a29      	ldr	r2, [pc, #164]	; (8007398 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80072f4:	401a      	ands	r2, r3
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a25      	ldr	r2, [pc, #148]	; (800739c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d106      	bne.n	8007318 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4a24      	ldr	r2, [pc, #144]	; (80073a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800730e:	401a      	ands	r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a1f      	ldr	r2, [pc, #124]	; (800739c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d121      	bne.n	8007366 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4a1f      	ldr	r2, [pc, #124]	; (80073a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007326:	401a      	ands	r2, r3
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	051b      	lsls	r3, r3, #20
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4a1c      	ldr	r2, [pc, #112]	; (80073a8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8007336:	401a      	ands	r2, r3
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4a1a      	ldr	r2, [pc, #104]	; (80073ac <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8007344:	401a      	ands	r2, r3
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a12      	ldr	r2, [pc, #72]	; (800739c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d106      	bne.n	8007366 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4a15      	ldr	r2, [pc, #84]	; (80073b0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800735c:	401a      	ands	r2, r3
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	223c      	movs	r2, #60	; 0x3c
 8007372:	2100      	movs	r1, #0
 8007374:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	0018      	movs	r0, r3
 800737a:	46bd      	mov	sp, r7
 800737c:	b004      	add	sp, #16
 800737e:	bd80      	pop	{r7, pc}
 8007380:	fffffcff 	.word	0xfffffcff
 8007384:	fffffbff 	.word	0xfffffbff
 8007388:	fffff7ff 	.word	0xfffff7ff
 800738c:	ffffefff 	.word	0xffffefff
 8007390:	ffffdfff 	.word	0xffffdfff
 8007394:	ffffbfff 	.word	0xffffbfff
 8007398:	fff0ffff 	.word	0xfff0ffff
 800739c:	40012c00 	.word	0x40012c00
 80073a0:	efffffff 	.word	0xefffffff
 80073a4:	ff0fffff 	.word	0xff0fffff
 80073a8:	feffffff 	.word	0xfeffffff
 80073ac:	fdffffff 	.word	0xfdffffff
 80073b0:	dfffffff 	.word	0xdfffffff

080073b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e046      	b.n	8007454 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2284      	movs	r2, #132	; 0x84
 80073ca:	589b      	ldr	r3, [r3, r2]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d107      	bne.n	80073e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2280      	movs	r2, #128	; 0x80
 80073d4:	2100      	movs	r1, #0
 80073d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	0018      	movs	r0, r3
 80073dc:	f7fa f9c6 	bl	800176c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2284      	movs	r2, #132	; 0x84
 80073e4:	2124      	movs	r1, #36	; 0x24
 80073e6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2101      	movs	r1, #1
 80073f4:	438a      	bics	r2, r1
 80073f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	0018      	movs	r0, r3
 80073fc:	f000 fa9e 	bl	800793c <UART_SetConfig>
 8007400:	0003      	movs	r3, r0
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e024      	b.n	8007454 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	0018      	movs	r0, r3
 8007416:	f000 fe11 	bl	800803c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	490d      	ldr	r1, [pc, #52]	; (800745c <HAL_UART_Init+0xa8>)
 8007426:	400a      	ands	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	212a      	movs	r1, #42	; 0x2a
 8007436:	438a      	bics	r2, r1
 8007438:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2101      	movs	r1, #1
 8007446:	430a      	orrs	r2, r1
 8007448:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	0018      	movs	r0, r3
 800744e:	f000 fea9 	bl	80081a4 <UART_CheckIdleState>
 8007452:	0003      	movs	r3, r0
}
 8007454:	0018      	movs	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	b002      	add	sp, #8
 800745a:	bd80      	pop	{r7, pc}
 800745c:	ffffb7ff 	.word	0xffffb7ff

08007460 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	; 0x28
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	603b      	str	r3, [r7, #0]
 800746c:	1dbb      	adds	r3, r7, #6
 800746e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2284      	movs	r2, #132	; 0x84
 8007474:	589b      	ldr	r3, [r3, r2]
 8007476:	2b20      	cmp	r3, #32
 8007478:	d000      	beq.n	800747c <HAL_UART_Transmit+0x1c>
 800747a:	e097      	b.n	80075ac <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <HAL_UART_Transmit+0x2a>
 8007482:	1dbb      	adds	r3, r7, #6
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e08f      	b.n	80075ae <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	2380      	movs	r3, #128	; 0x80
 8007494:	015b      	lsls	r3, r3, #5
 8007496:	429a      	cmp	r2, r3
 8007498:	d109      	bne.n	80074ae <HAL_UART_Transmit+0x4e>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d105      	bne.n	80074ae <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2201      	movs	r2, #1
 80074a6:	4013      	ands	r3, r2
 80074a8:	d001      	beq.n	80074ae <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e07f      	b.n	80075ae <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2280      	movs	r2, #128	; 0x80
 80074b2:	5c9b      	ldrb	r3, [r3, r2]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_UART_Transmit+0x5c>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e078      	b.n	80075ae <HAL_UART_Transmit+0x14e>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2280      	movs	r2, #128	; 0x80
 80074c0:	2101      	movs	r1, #1
 80074c2:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	228c      	movs	r2, #140	; 0x8c
 80074c8:	2100      	movs	r1, #0
 80074ca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2284      	movs	r2, #132	; 0x84
 80074d0:	2121      	movs	r1, #33	; 0x21
 80074d2:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074d4:	f7fa fca8 	bl	8001e28 <HAL_GetTick>
 80074d8:	0003      	movs	r3, r0
 80074da:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	1dba      	adds	r2, r7, #6
 80074e0:	2154      	movs	r1, #84	; 0x54
 80074e2:	8812      	ldrh	r2, [r2, #0]
 80074e4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1dba      	adds	r2, r7, #6
 80074ea:	2156      	movs	r1, #86	; 0x56
 80074ec:	8812      	ldrh	r2, [r2, #0]
 80074ee:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	2380      	movs	r3, #128	; 0x80
 80074f6:	015b      	lsls	r3, r3, #5
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d108      	bne.n	800750e <HAL_UART_Transmit+0xae>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d104      	bne.n	800750e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8007504:	2300      	movs	r3, #0
 8007506:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	61bb      	str	r3, [r7, #24]
 800750c:	e003      	b.n	8007516 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2280      	movs	r2, #128	; 0x80
 800751a:	2100      	movs	r1, #0
 800751c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800751e:	e02c      	b.n	800757a <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	0013      	movs	r3, r2
 800752a:	2200      	movs	r2, #0
 800752c:	2180      	movs	r1, #128	; 0x80
 800752e:	f000 fe83 	bl	8008238 <UART_WaitOnFlagUntilTimeout>
 8007532:	1e03      	subs	r3, r0, #0
 8007534:	d001      	beq.n	800753a <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e039      	b.n	80075ae <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10b      	bne.n	8007558 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	001a      	movs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	05d2      	lsls	r2, r2, #23
 800754c:	0dd2      	lsrs	r2, r2, #23
 800754e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	3302      	adds	r3, #2
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	e007      	b.n	8007568 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	3301      	adds	r3, #1
 8007566:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2256      	movs	r2, #86	; 0x56
 800756c:	5a9b      	ldrh	r3, [r3, r2]
 800756e:	b29b      	uxth	r3, r3
 8007570:	3b01      	subs	r3, #1
 8007572:	b299      	uxth	r1, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2256      	movs	r2, #86	; 0x56
 8007578:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2256      	movs	r2, #86	; 0x56
 800757e:	5a9b      	ldrh	r3, [r3, r2]
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1cc      	bne.n	8007520 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	0013      	movs	r3, r2
 8007590:	2200      	movs	r2, #0
 8007592:	2140      	movs	r1, #64	; 0x40
 8007594:	f000 fe50 	bl	8008238 <UART_WaitOnFlagUntilTimeout>
 8007598:	1e03      	subs	r3, r0, #0
 800759a:	d001      	beq.n	80075a0 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e006      	b.n	80075ae <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2284      	movs	r2, #132	; 0x84
 80075a4:	2120      	movs	r1, #32
 80075a6:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	e000      	b.n	80075ae <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80075ac:	2302      	movs	r3, #2
  }
}
 80075ae:	0018      	movs	r0, r3
 80075b0:	46bd      	mov	sp, r7
 80075b2:	b008      	add	sp, #32
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	1dbb      	adds	r3, r7, #6
 80075c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2288      	movs	r2, #136	; 0x88
 80075ca:	589b      	ldr	r3, [r3, r2]
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	d15a      	bne.n	8007686 <HAL_UART_Receive_DMA+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_UART_Receive_DMA+0x26>
 80075d6:	1dbb      	adds	r3, r7, #6
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e052      	b.n	8007688 <HAL_UART_Receive_DMA+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	689a      	ldr	r2, [r3, #8]
 80075e6:	2380      	movs	r3, #128	; 0x80
 80075e8:	015b      	lsls	r3, r3, #5
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d109      	bne.n	8007602 <HAL_UART_Receive_DMA+0x4a>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d105      	bne.n	8007602 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2201      	movs	r2, #1
 80075fa:	4013      	ands	r3, r2
 80075fc:	d001      	beq.n	8007602 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e042      	b.n	8007688 <HAL_UART_Receive_DMA+0xd0>
      }
    }

    __HAL_LOCK(huart);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2280      	movs	r2, #128	; 0x80
 8007606:	5c9b      	ldrb	r3, [r3, r2]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_UART_Receive_DMA+0x58>
 800760c:	2302      	movs	r3, #2
 800760e:	e03b      	b.n	8007688 <HAL_UART_Receive_DMA+0xd0>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2280      	movs	r2, #128	; 0x80
 8007614:	2101      	movs	r1, #1
 8007616:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a1b      	ldr	r2, [pc, #108]	; (8007690 <HAL_UART_Receive_DMA+0xd8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d025      	beq.n	8007674 <HAL_UART_Receive_DMA+0xbc>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a19      	ldr	r2, [pc, #100]	; (8007694 <HAL_UART_Receive_DMA+0xdc>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d020      	beq.n	8007674 <HAL_UART_Receive_DMA+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	2380      	movs	r3, #128	; 0x80
 800763a:	041b      	lsls	r3, r3, #16
 800763c:	4013      	ands	r3, r2
 800763e:	d019      	beq.n	8007674 <HAL_UART_Receive_DMA+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007640:	f3ef 8310 	mrs	r3, PRIMASK
 8007644:	613b      	str	r3, [r7, #16]
  return(result);
 8007646:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	2301      	movs	r3, #1
 800764c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f383 8810 	msr	PRIMASK, r3
}
 8007654:	46c0      	nop			; (mov r8, r8)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2180      	movs	r1, #128	; 0x80
 8007662:	04c9      	lsls	r1, r1, #19
 8007664:	430a      	orrs	r2, r1
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	f383 8810 	msr	PRIMASK, r3
}
 8007672:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007674:	1dbb      	adds	r3, r7, #6
 8007676:	881a      	ldrh	r2, [r3, #0]
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	0018      	movs	r0, r3
 800767e:	f000 fea3 	bl	80083c8 <UART_Start_Receive_DMA>
 8007682:	0003      	movs	r3, r0
 8007684:	e000      	b.n	8007688 <HAL_UART_Receive_DMA+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8007686:	2302      	movs	r3, #2
  }
}
 8007688:	0018      	movs	r0, r3
 800768a:	46bd      	mov	sp, r7
 800768c:	b008      	add	sp, #32
 800768e:	bd80      	pop	{r7, pc}
 8007690:	40008000 	.word	0x40008000
 8007694:	40008400 	.word	0x40008400

08007698 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b098      	sub	sp, #96	; 0x60
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 80076a0:	2301      	movs	r3, #1
 80076a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a4:	f3ef 8310 	mrs	r3, PRIMASK
 80076a8:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 80076ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80076ae:	2301      	movs	r3, #1
 80076b0:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b4:	f383 8810 	msr	PRIMASK, r3
}
 80076b8:	46c0      	nop			; (mov r8, r8)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4987      	ldr	r1, [pc, #540]	; (80078e4 <HAL_UART_Abort_IT+0x24c>)
 80076c6:	400a      	ands	r2, r1
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076cc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	f383 8810 	msr	PRIMASK, r3
}
 80076d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d6:	f3ef 8310 	mrs	r3, PRIMASK
 80076da:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80076dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80076de:	657b      	str	r3, [r7, #84]	; 0x54
 80076e0:	2301      	movs	r3, #1
 80076e2:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e6:	f383 8810 	msr	PRIMASK, r3
}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689a      	ldr	r2, [r3, #8]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	497c      	ldr	r1, [pc, #496]	; (80078e8 <HAL_UART_Abort_IT+0x250>)
 80076f8:	400a      	ands	r2, r1
 80076fa:	609a      	str	r2, [r3, #8]
 80076fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076fe:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007702:	f383 8810 	msr	PRIMASK, r3
}
 8007706:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800770c:	2b01      	cmp	r3, #1
 800770e:	d118      	bne.n	8007742 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007710:	f3ef 8310 	mrs	r3, PRIMASK
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007718:	653b      	str	r3, [r7, #80]	; 0x50
 800771a:	2301      	movs	r3, #1
 800771c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	f383 8810 	msr	PRIMASK, r3
}
 8007724:	46c0      	nop			; (mov r8, r8)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2110      	movs	r1, #16
 8007732:	438a      	bics	r2, r1
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007738:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800773a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773c:	f383 8810 	msr	PRIMASK, r3
}
 8007740:	46c0      	nop			; (mov r8, r8)
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00f      	beq.n	800776a <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	2280      	movs	r2, #128	; 0x80
 8007752:	4013      	ands	r3, r2
 8007754:	2b80      	cmp	r3, #128	; 0x80
 8007756:	d104      	bne.n	8007762 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800775c:	4a63      	ldr	r2, [pc, #396]	; (80078ec <HAL_UART_Abort_IT+0x254>)
 800775e:	639a      	str	r2, [r3, #56]	; 0x38
 8007760:	e003      	b.n	800776a <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007766:	2200      	movs	r2, #0
 8007768:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00f      	beq.n	8007792 <HAL_UART_Abort_IT+0xfa>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2240      	movs	r2, #64	; 0x40
 800777a:	4013      	ands	r3, r2
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d104      	bne.n	800778a <HAL_UART_Abort_IT+0xf2>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007784:	4a5a      	ldr	r2, [pc, #360]	; (80078f0 <HAL_UART_Abort_IT+0x258>)
 8007786:	639a      	str	r2, [r3, #56]	; 0x38
 8007788:	e003      	b.n	8007792 <HAL_UART_Abort_IT+0xfa>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800778e:	2200      	movs	r2, #0
 8007790:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2280      	movs	r2, #128	; 0x80
 800779a:	4013      	ands	r3, r2
 800779c:	2b80      	cmp	r3, #128	; 0x80
 800779e:	d12a      	bne.n	80077f6 <HAL_UART_Abort_IT+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077a0:	f3ef 8310 	mrs	r3, PRIMASK
 80077a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80077a6:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077aa:	2301      	movs	r3, #1
 80077ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	f383 8810 	msr	PRIMASK, r3
}
 80077b4:	46c0      	nop			; (mov r8, r8)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2180      	movs	r1, #128	; 0x80
 80077c2:	438a      	bics	r2, r1
 80077c4:	609a      	str	r2, [r3, #8]
 80077c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	f383 8810 	msr	PRIMASK, r3
}
 80077d0:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00d      	beq.n	80077f6 <HAL_UART_Abort_IT+0x15e>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077de:	0018      	movs	r0, r3
 80077e0:	f7fb fa72 	bl	8002cc8 <HAL_DMA_Abort_IT>
 80077e4:	1e03      	subs	r3, r0, #0
 80077e6:	d004      	beq.n	80077f2 <HAL_UART_Abort_IT+0x15a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077ec:	2200      	movs	r2, #0
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38
 80077f0:	e001      	b.n	80077f6 <HAL_UART_Abort_IT+0x15e>
      }
      else
      {
        abortcplt = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	2240      	movs	r2, #64	; 0x40
 80077fe:	4013      	ands	r3, r2
 8007800:	2b40      	cmp	r3, #64	; 0x40
 8007802:	d12c      	bne.n	800785e <HAL_UART_Abort_IT+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007804:	f3ef 8310 	mrs	r3, PRIMASK
 8007808:	60fb      	str	r3, [r7, #12]
  return(result);
 800780a:	68fb      	ldr	r3, [r7, #12]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800780c:	64bb      	str	r3, [r7, #72]	; 0x48
 800780e:	2301      	movs	r3, #1
 8007810:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f383 8810 	msr	PRIMASK, r3
}
 8007818:	46c0      	nop			; (mov r8, r8)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2140      	movs	r1, #64	; 0x40
 8007826:	438a      	bics	r2, r1
 8007828:	609a      	str	r2, [r3, #8]
 800782a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800782c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f383 8810 	msr	PRIMASK, r3
}
 8007834:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00f      	beq.n	800785e <HAL_UART_Abort_IT+0x1c6>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007842:	0018      	movs	r0, r3
 8007844:	f7fb fa40 	bl	8002cc8 <HAL_DMA_Abort_IT>
 8007848:	1e03      	subs	r3, r0, #0
 800784a:	d006      	beq.n	800785a <HAL_UART_Abort_IT+0x1c2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007850:	2200      	movs	r2, #0
 8007852:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8007854:	2301      	movs	r3, #1
 8007856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007858:	e001      	b.n	800785e <HAL_UART_Abort_IT+0x1c6>
      }
      else
      {
        abortcplt = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800785e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007860:	2b01      	cmp	r3, #1
 8007862:	d13a      	bne.n	80078da <HAL_UART_Abort_IT+0x242>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2256      	movs	r2, #86	; 0x56
 8007868:	2100      	movs	r1, #0
 800786a:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	225e      	movs	r2, #94	; 0x5e
 8007870:	2100      	movs	r1, #0
 8007872:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	671a      	str	r2, [r3, #112]	; 0x70
    huart->TxISR = NULL;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	228c      	movs	r2, #140	; 0x8c
 8007884:	2100      	movs	r1, #0
 8007886:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	220f      	movs	r2, #15
 800788e:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007894:	2380      	movs	r3, #128	; 0x80
 8007896:	059b      	lsls	r3, r3, #22
 8007898:	429a      	cmp	r2, r3
 800789a:	d107      	bne.n	80078ac <HAL_UART_Abort_IT+0x214>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	699a      	ldr	r2, [r3, #24]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2110      	movs	r1, #16
 80078a8:	430a      	orrs	r2, r1
 80078aa:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699a      	ldr	r2, [r3, #24]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2108      	movs	r1, #8
 80078b8:	430a      	orrs	r2, r1
 80078ba:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2284      	movs	r2, #132	; 0x84
 80078c0:	2120      	movs	r1, #32
 80078c2:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2288      	movs	r2, #136	; 0x88
 80078c8:	2120      	movs	r1, #32
 80078ca:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	0018      	movs	r0, r3
 80078d6:	f000 f81d 	bl	8007914 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	b018      	add	sp, #96	; 0x60
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	fffffe1f 	.word	0xfffffe1f
 80078e8:	ef7ffffe 	.word	0xef7ffffe
 80078ec:	08008847 	.word	0x08008847
 80078f0:	080088d3 	.word	0x080088d3

080078f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80078fc:	46c0      	nop			; (mov r8, r8)
 80078fe:	46bd      	mov	sp, r7
 8007900:	b002      	add	sp, #8
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800790c:	46c0      	nop			; (mov r8, r8)
 800790e:	46bd      	mov	sp, r7
 8007910:	b002      	add	sp, #8
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800791c:	46c0      	nop			; (mov r8, r8)
 800791e:	46bd      	mov	sp, r7
 8007920:	b002      	add	sp, #8
 8007922:	bd80      	pop	{r7, pc}

08007924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	000a      	movs	r2, r1
 800792e:	1cbb      	adds	r3, r7, #2
 8007930:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	46bd      	mov	sp, r7
 8007936:	b002      	add	sp, #8
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800793c:	b5b0      	push	{r4, r5, r7, lr}
 800793e:	b090      	sub	sp, #64	; 0x40
 8007940:	af00      	add	r7, sp, #0
 8007942:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007944:	231a      	movs	r3, #26
 8007946:	2220      	movs	r2, #32
 8007948:	4694      	mov	ip, r2
 800794a:	44bc      	add	ip, r7
 800794c:	4463      	add	r3, ip
 800794e:	2200      	movs	r2, #0
 8007950:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	431a      	orrs	r2, r3
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	431a      	orrs	r2, r3
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	4313      	orrs	r3, r2
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4ac1      	ldr	r2, [pc, #772]	; (8007c78 <UART_SetConfig+0x33c>)
 8007972:	4013      	ands	r3, r2
 8007974:	0019      	movs	r1, r3
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797c:	430b      	orrs	r3, r1
 800797e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	4abd      	ldr	r2, [pc, #756]	; (8007c7c <UART_SetConfig+0x340>)
 8007988:	4013      	ands	r3, r2
 800798a:	0018      	movs	r0, r3
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	68d9      	ldr	r1, [r3, #12]
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	0003      	movs	r3, r0
 8007996:	430b      	orrs	r3, r1
 8007998:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4ab6      	ldr	r2, [pc, #728]	; (8007c80 <UART_SetConfig+0x344>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d009      	beq.n	80079be <UART_SetConfig+0x82>
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4ab5      	ldr	r2, [pc, #724]	; (8007c84 <UART_SetConfig+0x348>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d004      	beq.n	80079be <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079ba:	4313      	orrs	r3, r2
 80079bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	4ab0      	ldr	r2, [pc, #704]	; (8007c88 <UART_SetConfig+0x34c>)
 80079c6:	4013      	ands	r3, r2
 80079c8:	0019      	movs	r1, r3
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d0:	430b      	orrs	r3, r1
 80079d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	220f      	movs	r2, #15
 80079dc:	4393      	bics	r3, r2
 80079de:	0018      	movs	r0, r3
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	0003      	movs	r3, r0
 80079ea:	430b      	orrs	r3, r1
 80079ec:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4aa6      	ldr	r2, [pc, #664]	; (8007c8c <UART_SetConfig+0x350>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d136      	bne.n	8007a66 <UART_SetConfig+0x12a>
 80079f8:	4ba5      	ldr	r3, [pc, #660]	; (8007c90 <UART_SetConfig+0x354>)
 80079fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fc:	2203      	movs	r2, #3
 80079fe:	4013      	ands	r3, r2
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d020      	beq.n	8007a46 <UART_SetConfig+0x10a>
 8007a04:	d827      	bhi.n	8007a56 <UART_SetConfig+0x11a>
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d00d      	beq.n	8007a26 <UART_SetConfig+0xea>
 8007a0a:	d824      	bhi.n	8007a56 <UART_SetConfig+0x11a>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <UART_SetConfig+0xda>
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d010      	beq.n	8007a36 <UART_SetConfig+0xfa>
 8007a14:	e01f      	b.n	8007a56 <UART_SetConfig+0x11a>
 8007a16:	231b      	movs	r3, #27
 8007a18:	2220      	movs	r2, #32
 8007a1a:	4694      	mov	ip, r2
 8007a1c:	44bc      	add	ip, r7
 8007a1e:	4463      	add	r3, ip
 8007a20:	2200      	movs	r2, #0
 8007a22:	701a      	strb	r2, [r3, #0]
 8007a24:	e16f      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007a26:	231b      	movs	r3, #27
 8007a28:	2220      	movs	r2, #32
 8007a2a:	4694      	mov	ip, r2
 8007a2c:	44bc      	add	ip, r7
 8007a2e:	4463      	add	r3, ip
 8007a30:	2202      	movs	r2, #2
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	e167      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007a36:	231b      	movs	r3, #27
 8007a38:	2220      	movs	r2, #32
 8007a3a:	4694      	mov	ip, r2
 8007a3c:	44bc      	add	ip, r7
 8007a3e:	4463      	add	r3, ip
 8007a40:	2204      	movs	r2, #4
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	e15f      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007a46:	231b      	movs	r3, #27
 8007a48:	2220      	movs	r2, #32
 8007a4a:	4694      	mov	ip, r2
 8007a4c:	44bc      	add	ip, r7
 8007a4e:	4463      	add	r3, ip
 8007a50:	2208      	movs	r2, #8
 8007a52:	701a      	strb	r2, [r3, #0]
 8007a54:	e157      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007a56:	231b      	movs	r3, #27
 8007a58:	2220      	movs	r2, #32
 8007a5a:	4694      	mov	ip, r2
 8007a5c:	44bc      	add	ip, r7
 8007a5e:	4463      	add	r3, ip
 8007a60:	2210      	movs	r2, #16
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	e14f      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a8a      	ldr	r2, [pc, #552]	; (8007c94 <UART_SetConfig+0x358>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d136      	bne.n	8007ade <UART_SetConfig+0x1a2>
 8007a70:	4b87      	ldr	r3, [pc, #540]	; (8007c90 <UART_SetConfig+0x354>)
 8007a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a74:	220c      	movs	r2, #12
 8007a76:	4013      	ands	r3, r2
 8007a78:	2b0c      	cmp	r3, #12
 8007a7a:	d020      	beq.n	8007abe <UART_SetConfig+0x182>
 8007a7c:	d827      	bhi.n	8007ace <UART_SetConfig+0x192>
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	d00d      	beq.n	8007a9e <UART_SetConfig+0x162>
 8007a82:	d824      	bhi.n	8007ace <UART_SetConfig+0x192>
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <UART_SetConfig+0x152>
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d010      	beq.n	8007aae <UART_SetConfig+0x172>
 8007a8c:	e01f      	b.n	8007ace <UART_SetConfig+0x192>
 8007a8e:	231b      	movs	r3, #27
 8007a90:	2220      	movs	r2, #32
 8007a92:	4694      	mov	ip, r2
 8007a94:	44bc      	add	ip, r7
 8007a96:	4463      	add	r3, ip
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
 8007a9c:	e133      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007a9e:	231b      	movs	r3, #27
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	4694      	mov	ip, r2
 8007aa4:	44bc      	add	ip, r7
 8007aa6:	4463      	add	r3, ip
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	e12b      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007aae:	231b      	movs	r3, #27
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	4694      	mov	ip, r2
 8007ab4:	44bc      	add	ip, r7
 8007ab6:	4463      	add	r3, ip
 8007ab8:	2204      	movs	r2, #4
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	e123      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007abe:	231b      	movs	r3, #27
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	4694      	mov	ip, r2
 8007ac4:	44bc      	add	ip, r7
 8007ac6:	4463      	add	r3, ip
 8007ac8:	2208      	movs	r2, #8
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	e11b      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007ace:	231b      	movs	r3, #27
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	4694      	mov	ip, r2
 8007ad4:	44bc      	add	ip, r7
 8007ad6:	4463      	add	r3, ip
 8007ad8:	2210      	movs	r2, #16
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	e113      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a6d      	ldr	r2, [pc, #436]	; (8007c98 <UART_SetConfig+0x35c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d136      	bne.n	8007b56 <UART_SetConfig+0x21a>
 8007ae8:	4b69      	ldr	r3, [pc, #420]	; (8007c90 <UART_SetConfig+0x354>)
 8007aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aec:	2230      	movs	r2, #48	; 0x30
 8007aee:	4013      	ands	r3, r2
 8007af0:	2b30      	cmp	r3, #48	; 0x30
 8007af2:	d020      	beq.n	8007b36 <UART_SetConfig+0x1fa>
 8007af4:	d827      	bhi.n	8007b46 <UART_SetConfig+0x20a>
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d00d      	beq.n	8007b16 <UART_SetConfig+0x1da>
 8007afa:	d824      	bhi.n	8007b46 <UART_SetConfig+0x20a>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <UART_SetConfig+0x1ca>
 8007b00:	2b10      	cmp	r3, #16
 8007b02:	d010      	beq.n	8007b26 <UART_SetConfig+0x1ea>
 8007b04:	e01f      	b.n	8007b46 <UART_SetConfig+0x20a>
 8007b06:	231b      	movs	r3, #27
 8007b08:	2220      	movs	r2, #32
 8007b0a:	4694      	mov	ip, r2
 8007b0c:	44bc      	add	ip, r7
 8007b0e:	4463      	add	r3, ip
 8007b10:	2200      	movs	r2, #0
 8007b12:	701a      	strb	r2, [r3, #0]
 8007b14:	e0f7      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007b16:	231b      	movs	r3, #27
 8007b18:	2220      	movs	r2, #32
 8007b1a:	4694      	mov	ip, r2
 8007b1c:	44bc      	add	ip, r7
 8007b1e:	4463      	add	r3, ip
 8007b20:	2202      	movs	r2, #2
 8007b22:	701a      	strb	r2, [r3, #0]
 8007b24:	e0ef      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007b26:	231b      	movs	r3, #27
 8007b28:	2220      	movs	r2, #32
 8007b2a:	4694      	mov	ip, r2
 8007b2c:	44bc      	add	ip, r7
 8007b2e:	4463      	add	r3, ip
 8007b30:	2204      	movs	r2, #4
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	e0e7      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007b36:	231b      	movs	r3, #27
 8007b38:	2220      	movs	r2, #32
 8007b3a:	4694      	mov	ip, r2
 8007b3c:	44bc      	add	ip, r7
 8007b3e:	4463      	add	r3, ip
 8007b40:	2208      	movs	r2, #8
 8007b42:	701a      	strb	r2, [r3, #0]
 8007b44:	e0df      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007b46:	231b      	movs	r3, #27
 8007b48:	2220      	movs	r2, #32
 8007b4a:	4694      	mov	ip, r2
 8007b4c:	44bc      	add	ip, r7
 8007b4e:	4463      	add	r3, ip
 8007b50:	2210      	movs	r2, #16
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	e0d7      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a50      	ldr	r2, [pc, #320]	; (8007c9c <UART_SetConfig+0x360>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d107      	bne.n	8007b70 <UART_SetConfig+0x234>
 8007b60:	231b      	movs	r3, #27
 8007b62:	2220      	movs	r2, #32
 8007b64:	4694      	mov	ip, r2
 8007b66:	44bc      	add	ip, r7
 8007b68:	4463      	add	r3, ip
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	e0ca      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a4a      	ldr	r2, [pc, #296]	; (8007ca0 <UART_SetConfig+0x364>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d107      	bne.n	8007b8a <UART_SetConfig+0x24e>
 8007b7a:	231b      	movs	r3, #27
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	4694      	mov	ip, r2
 8007b80:	44bc      	add	ip, r7
 8007b82:	4463      	add	r3, ip
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
 8007b88:	e0bd      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a45      	ldr	r2, [pc, #276]	; (8007ca4 <UART_SetConfig+0x368>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d107      	bne.n	8007ba4 <UART_SetConfig+0x268>
 8007b94:	231b      	movs	r3, #27
 8007b96:	2220      	movs	r2, #32
 8007b98:	4694      	mov	ip, r2
 8007b9a:	44bc      	add	ip, r7
 8007b9c:	4463      	add	r3, ip
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	701a      	strb	r2, [r3, #0]
 8007ba2:	e0b0      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a35      	ldr	r2, [pc, #212]	; (8007c80 <UART_SetConfig+0x344>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d143      	bne.n	8007c36 <UART_SetConfig+0x2fa>
 8007bae:	4b38      	ldr	r3, [pc, #224]	; (8007c90 <UART_SetConfig+0x354>)
 8007bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bb2:	23c0      	movs	r3, #192	; 0xc0
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	22c0      	movs	r2, #192	; 0xc0
 8007bba:	0112      	lsls	r2, r2, #4
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d02a      	beq.n	8007c16 <UART_SetConfig+0x2da>
 8007bc0:	22c0      	movs	r2, #192	; 0xc0
 8007bc2:	0112      	lsls	r2, r2, #4
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d82e      	bhi.n	8007c26 <UART_SetConfig+0x2ea>
 8007bc8:	2280      	movs	r2, #128	; 0x80
 8007bca:	0112      	lsls	r2, r2, #4
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d012      	beq.n	8007bf6 <UART_SetConfig+0x2ba>
 8007bd0:	2280      	movs	r2, #128	; 0x80
 8007bd2:	0112      	lsls	r2, r2, #4
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d826      	bhi.n	8007c26 <UART_SetConfig+0x2ea>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d004      	beq.n	8007be6 <UART_SetConfig+0x2aa>
 8007bdc:	2280      	movs	r2, #128	; 0x80
 8007bde:	00d2      	lsls	r2, r2, #3
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d010      	beq.n	8007c06 <UART_SetConfig+0x2ca>
 8007be4:	e01f      	b.n	8007c26 <UART_SetConfig+0x2ea>
 8007be6:	231b      	movs	r3, #27
 8007be8:	2220      	movs	r2, #32
 8007bea:	4694      	mov	ip, r2
 8007bec:	44bc      	add	ip, r7
 8007bee:	4463      	add	r3, ip
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	701a      	strb	r2, [r3, #0]
 8007bf4:	e087      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007bf6:	231b      	movs	r3, #27
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	4694      	mov	ip, r2
 8007bfc:	44bc      	add	ip, r7
 8007bfe:	4463      	add	r3, ip
 8007c00:	2202      	movs	r2, #2
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	e07f      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007c06:	231b      	movs	r3, #27
 8007c08:	2220      	movs	r2, #32
 8007c0a:	4694      	mov	ip, r2
 8007c0c:	44bc      	add	ip, r7
 8007c0e:	4463      	add	r3, ip
 8007c10:	2204      	movs	r2, #4
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e077      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007c16:	231b      	movs	r3, #27
 8007c18:	2220      	movs	r2, #32
 8007c1a:	4694      	mov	ip, r2
 8007c1c:	44bc      	add	ip, r7
 8007c1e:	4463      	add	r3, ip
 8007c20:	2208      	movs	r2, #8
 8007c22:	701a      	strb	r2, [r3, #0]
 8007c24:	e06f      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007c26:	231b      	movs	r3, #27
 8007c28:	2220      	movs	r2, #32
 8007c2a:	4694      	mov	ip, r2
 8007c2c:	44bc      	add	ip, r7
 8007c2e:	4463      	add	r3, ip
 8007c30:	2210      	movs	r2, #16
 8007c32:	701a      	strb	r2, [r3, #0]
 8007c34:	e067      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a12      	ldr	r2, [pc, #72]	; (8007c84 <UART_SetConfig+0x348>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d15b      	bne.n	8007cf8 <UART_SetConfig+0x3bc>
 8007c40:	4b13      	ldr	r3, [pc, #76]	; (8007c90 <UART_SetConfig+0x354>)
 8007c42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c44:	23c0      	movs	r3, #192	; 0xc0
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4013      	ands	r3, r2
 8007c4a:	22c0      	movs	r2, #192	; 0xc0
 8007c4c:	0092      	lsls	r2, r2, #2
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d042      	beq.n	8007cd8 <UART_SetConfig+0x39c>
 8007c52:	22c0      	movs	r2, #192	; 0xc0
 8007c54:	0092      	lsls	r2, r2, #2
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d846      	bhi.n	8007ce8 <UART_SetConfig+0x3ac>
 8007c5a:	2280      	movs	r2, #128	; 0x80
 8007c5c:	0092      	lsls	r2, r2, #2
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d02a      	beq.n	8007cb8 <UART_SetConfig+0x37c>
 8007c62:	2280      	movs	r2, #128	; 0x80
 8007c64:	0092      	lsls	r2, r2, #2
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d83e      	bhi.n	8007ce8 <UART_SetConfig+0x3ac>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d01c      	beq.n	8007ca8 <UART_SetConfig+0x36c>
 8007c6e:	2280      	movs	r2, #128	; 0x80
 8007c70:	0052      	lsls	r2, r2, #1
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d028      	beq.n	8007cc8 <UART_SetConfig+0x38c>
 8007c76:	e037      	b.n	8007ce8 <UART_SetConfig+0x3ac>
 8007c78:	cfff69f3 	.word	0xcfff69f3
 8007c7c:	ffffcfff 	.word	0xffffcfff
 8007c80:	40008000 	.word	0x40008000
 8007c84:	40008400 	.word	0x40008400
 8007c88:	11fff4ff 	.word	0x11fff4ff
 8007c8c:	40013800 	.word	0x40013800
 8007c90:	40021000 	.word	0x40021000
 8007c94:	40004400 	.word	0x40004400
 8007c98:	40004800 	.word	0x40004800
 8007c9c:	40004c00 	.word	0x40004c00
 8007ca0:	40005000 	.word	0x40005000
 8007ca4:	40013c00 	.word	0x40013c00
 8007ca8:	231b      	movs	r3, #27
 8007caa:	2220      	movs	r2, #32
 8007cac:	4694      	mov	ip, r2
 8007cae:	44bc      	add	ip, r7
 8007cb0:	4463      	add	r3, ip
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	e026      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007cb8:	231b      	movs	r3, #27
 8007cba:	2220      	movs	r2, #32
 8007cbc:	4694      	mov	ip, r2
 8007cbe:	44bc      	add	ip, r7
 8007cc0:	4463      	add	r3, ip
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	e01e      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007cc8:	231b      	movs	r3, #27
 8007cca:	2220      	movs	r2, #32
 8007ccc:	4694      	mov	ip, r2
 8007cce:	44bc      	add	ip, r7
 8007cd0:	4463      	add	r3, ip
 8007cd2:	2204      	movs	r2, #4
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	e016      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007cd8:	231b      	movs	r3, #27
 8007cda:	2220      	movs	r2, #32
 8007cdc:	4694      	mov	ip, r2
 8007cde:	44bc      	add	ip, r7
 8007ce0:	4463      	add	r3, ip
 8007ce2:	2208      	movs	r2, #8
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	e00e      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007ce8:	231b      	movs	r3, #27
 8007cea:	2220      	movs	r2, #32
 8007cec:	4694      	mov	ip, r2
 8007cee:	44bc      	add	ip, r7
 8007cf0:	4463      	add	r3, ip
 8007cf2:	2210      	movs	r2, #16
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	e006      	b.n	8007d06 <UART_SetConfig+0x3ca>
 8007cf8:	231b      	movs	r3, #27
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	4694      	mov	ip, r2
 8007cfe:	44bc      	add	ip, r7
 8007d00:	4463      	add	r3, ip
 8007d02:	2210      	movs	r2, #16
 8007d04:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4ab8      	ldr	r2, [pc, #736]	; (8007fec <UART_SetConfig+0x6b0>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d005      	beq.n	8007d1c <UART_SetConfig+0x3e0>
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4ab6      	ldr	r2, [pc, #728]	; (8007ff0 <UART_SetConfig+0x6b4>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d000      	beq.n	8007d1c <UART_SetConfig+0x3e0>
 8007d1a:	e097      	b.n	8007e4c <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d1c:	231b      	movs	r3, #27
 8007d1e:	2220      	movs	r2, #32
 8007d20:	4694      	mov	ip, r2
 8007d22:	44bc      	add	ip, r7
 8007d24:	4463      	add	r3, ip
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d015      	beq.n	8007d58 <UART_SetConfig+0x41c>
 8007d2c:	dc18      	bgt.n	8007d60 <UART_SetConfig+0x424>
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d00d      	beq.n	8007d4e <UART_SetConfig+0x412>
 8007d32:	dc15      	bgt.n	8007d60 <UART_SetConfig+0x424>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <UART_SetConfig+0x402>
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d005      	beq.n	8007d48 <UART_SetConfig+0x40c>
 8007d3c:	e010      	b.n	8007d60 <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d3e:	f7fe fb2f 	bl	80063a0 <HAL_RCC_GetPCLK1Freq>
 8007d42:	0003      	movs	r3, r0
 8007d44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d46:	e015      	b.n	8007d74 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d48:	4baa      	ldr	r3, [pc, #680]	; (8007ff4 <UART_SetConfig+0x6b8>)
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d4c:	e012      	b.n	8007d74 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d4e:	f7fe fa9b 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 8007d52:	0003      	movs	r3, r0
 8007d54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d56:	e00d      	b.n	8007d74 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d58:	2380      	movs	r3, #128	; 0x80
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d5e:	e009      	b.n	8007d74 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007d64:	231a      	movs	r3, #26
 8007d66:	2220      	movs	r2, #32
 8007d68:	4694      	mov	ip, r2
 8007d6a:	44bc      	add	ip, r7
 8007d6c:	4463      	add	r3, ip
 8007d6e:	2201      	movs	r2, #1
 8007d70:	701a      	strb	r2, [r3, #0]
        break;
 8007d72:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d100      	bne.n	8007d7c <UART_SetConfig+0x440>
 8007d7a:	e146      	b.n	800800a <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d80:	4b9d      	ldr	r3, [pc, #628]	; (8007ff8 <UART_SetConfig+0x6bc>)
 8007d82:	0052      	lsls	r2, r2, #1
 8007d84:	5ad3      	ldrh	r3, [r2, r3]
 8007d86:	0019      	movs	r1, r3
 8007d88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007d8a:	f7f8 f9cd 	bl	8000128 <__udivsi3>
 8007d8e:	0003      	movs	r3, r0
 8007d90:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	0013      	movs	r3, r2
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	189b      	adds	r3, r3, r2
 8007d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d305      	bcc.n	8007dae <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d907      	bls.n	8007dbe <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 8007dae:	231a      	movs	r3, #26
 8007db0:	2220      	movs	r2, #32
 8007db2:	4694      	mov	ip, r2
 8007db4:	44bc      	add	ip, r7
 8007db6:	4463      	add	r3, ip
 8007db8:	2201      	movs	r2, #1
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	e045      	b.n	8007e4a <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc0:	61bb      	str	r3, [r7, #24]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	61fb      	str	r3, [r7, #28]
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dca:	4b8b      	ldr	r3, [pc, #556]	; (8007ff8 <UART_SetConfig+0x6bc>)
 8007dcc:	0052      	lsls	r2, r2, #1
 8007dce:	5ad3      	ldrh	r3, [r2, r3]
 8007dd0:	613b      	str	r3, [r7, #16]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	69b8      	ldr	r0, [r7, #24]
 8007ddc:	69f9      	ldr	r1, [r7, #28]
 8007dde:	f7f8 fb19 	bl	8000414 <__aeabi_uldivmod>
 8007de2:	0002      	movs	r2, r0
 8007de4:	000b      	movs	r3, r1
 8007de6:	0e11      	lsrs	r1, r2, #24
 8007de8:	021d      	lsls	r5, r3, #8
 8007dea:	430d      	orrs	r5, r1
 8007dec:	0214      	lsls	r4, r2, #8
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	085b      	lsrs	r3, r3, #1
 8007df4:	60bb      	str	r3, [r7, #8]
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	68b8      	ldr	r0, [r7, #8]
 8007dfc:	68f9      	ldr	r1, [r7, #12]
 8007dfe:	1900      	adds	r0, r0, r4
 8007e00:	4169      	adcs	r1, r5
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	603b      	str	r3, [r7, #0]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	607b      	str	r3, [r7, #4]
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f7f8 fb00 	bl	8000414 <__aeabi_uldivmod>
 8007e14:	0002      	movs	r2, r0
 8007e16:	000b      	movs	r3, r1
 8007e18:	0013      	movs	r3, r2
 8007e1a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e1e:	23c0      	movs	r3, #192	; 0xc0
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d309      	bcc.n	8007e3a <UART_SetConfig+0x4fe>
 8007e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e28:	2380      	movs	r3, #128	; 0x80
 8007e2a:	035b      	lsls	r3, r3, #13
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d204      	bcs.n	8007e3a <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e36:	60da      	str	r2, [r3, #12]
 8007e38:	e007      	b.n	8007e4a <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 8007e3a:	231a      	movs	r3, #26
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	4694      	mov	ip, r2
 8007e40:	44bc      	add	ip, r7
 8007e42:	4463      	add	r3, ip
 8007e44:	2201      	movs	r2, #1
 8007e46:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8007e48:	e0df      	b.n	800800a <UART_SetConfig+0x6ce>
 8007e4a:	e0de      	b.n	800800a <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	69da      	ldr	r2, [r3, #28]
 8007e50:	2380      	movs	r3, #128	; 0x80
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d000      	beq.n	8007e5a <UART_SetConfig+0x51e>
 8007e58:	e074      	b.n	8007f44 <UART_SetConfig+0x608>
  {
    switch (clocksource)
 8007e5a:	231b      	movs	r3, #27
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	4694      	mov	ip, r2
 8007e60:	44bc      	add	ip, r7
 8007e62:	4463      	add	r3, ip
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b08      	cmp	r3, #8
 8007e68:	d015      	beq.n	8007e96 <UART_SetConfig+0x55a>
 8007e6a:	dc18      	bgt.n	8007e9e <UART_SetConfig+0x562>
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d00d      	beq.n	8007e8c <UART_SetConfig+0x550>
 8007e70:	dc15      	bgt.n	8007e9e <UART_SetConfig+0x562>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <UART_SetConfig+0x540>
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d005      	beq.n	8007e86 <UART_SetConfig+0x54a>
 8007e7a:	e010      	b.n	8007e9e <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e7c:	f7fe fa90 	bl	80063a0 <HAL_RCC_GetPCLK1Freq>
 8007e80:	0003      	movs	r3, r0
 8007e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e84:	e015      	b.n	8007eb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e86:	4b5b      	ldr	r3, [pc, #364]	; (8007ff4 <UART_SetConfig+0x6b8>)
 8007e88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e8a:	e012      	b.n	8007eb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e8c:	f7fe f9fc 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 8007e90:	0003      	movs	r3, r0
 8007e92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e94:	e00d      	b.n	8007eb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e96:	2380      	movs	r3, #128	; 0x80
 8007e98:	021b      	lsls	r3, r3, #8
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e9c:	e009      	b.n	8007eb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007ea2:	231a      	movs	r3, #26
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	4694      	mov	ip, r2
 8007ea8:	44bc      	add	ip, r7
 8007eaa:	4463      	add	r3, ip
 8007eac:	2201      	movs	r2, #1
 8007eae:	701a      	strb	r2, [r3, #0]
        break;
 8007eb0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d100      	bne.n	8007eba <UART_SetConfig+0x57e>
 8007eb8:	e0a7      	b.n	800800a <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ebe:	4b4e      	ldr	r3, [pc, #312]	; (8007ff8 <UART_SetConfig+0x6bc>)
 8007ec0:	0052      	lsls	r2, r2, #1
 8007ec2:	5ad3      	ldrh	r3, [r2, r3]
 8007ec4:	0019      	movs	r1, r3
 8007ec6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ec8:	f7f8 f92e 	bl	8000128 <__udivsi3>
 8007ecc:	0003      	movs	r3, r0
 8007ece:	005a      	lsls	r2, r3, #1
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	085b      	lsrs	r3, r3, #1
 8007ed6:	18d2      	adds	r2, r2, r3
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	0019      	movs	r1, r3
 8007ede:	0010      	movs	r0, r2
 8007ee0:	f7f8 f922 	bl	8000128 <__udivsi3>
 8007ee4:	0003      	movs	r3, r0
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	2b0f      	cmp	r3, #15
 8007eee:	d921      	bls.n	8007f34 <UART_SetConfig+0x5f8>
 8007ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef2:	2380      	movs	r3, #128	; 0x80
 8007ef4:	025b      	lsls	r3, r3, #9
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d21c      	bcs.n	8007f34 <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	200e      	movs	r0, #14
 8007f00:	2420      	movs	r4, #32
 8007f02:	193b      	adds	r3, r7, r4
 8007f04:	181b      	adds	r3, r3, r0
 8007f06:	210f      	movs	r1, #15
 8007f08:	438a      	bics	r2, r1
 8007f0a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	085b      	lsrs	r3, r3, #1
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	2207      	movs	r2, #7
 8007f14:	4013      	ands	r3, r2
 8007f16:	b299      	uxth	r1, r3
 8007f18:	193b      	adds	r3, r7, r4
 8007f1a:	181b      	adds	r3, r3, r0
 8007f1c:	193a      	adds	r2, r7, r4
 8007f1e:	1812      	adds	r2, r2, r0
 8007f20:	8812      	ldrh	r2, [r2, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	193a      	adds	r2, r7, r4
 8007f2c:	1812      	adds	r2, r2, r0
 8007f2e:	8812      	ldrh	r2, [r2, #0]
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	e06a      	b.n	800800a <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007f34:	231a      	movs	r3, #26
 8007f36:	2220      	movs	r2, #32
 8007f38:	4694      	mov	ip, r2
 8007f3a:	44bc      	add	ip, r7
 8007f3c:	4463      	add	r3, ip
 8007f3e:	2201      	movs	r2, #1
 8007f40:	701a      	strb	r2, [r3, #0]
 8007f42:	e062      	b.n	800800a <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f44:	231b      	movs	r3, #27
 8007f46:	2220      	movs	r2, #32
 8007f48:	4694      	mov	ip, r2
 8007f4a:	44bc      	add	ip, r7
 8007f4c:	4463      	add	r3, ip
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b08      	cmp	r3, #8
 8007f52:	d015      	beq.n	8007f80 <UART_SetConfig+0x644>
 8007f54:	dc18      	bgt.n	8007f88 <UART_SetConfig+0x64c>
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	d00d      	beq.n	8007f76 <UART_SetConfig+0x63a>
 8007f5a:	dc15      	bgt.n	8007f88 <UART_SetConfig+0x64c>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <UART_SetConfig+0x62a>
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d005      	beq.n	8007f70 <UART_SetConfig+0x634>
 8007f64:	e010      	b.n	8007f88 <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f66:	f7fe fa1b 	bl	80063a0 <HAL_RCC_GetPCLK1Freq>
 8007f6a:	0003      	movs	r3, r0
 8007f6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f6e:	e015      	b.n	8007f9c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f70:	4b20      	ldr	r3, [pc, #128]	; (8007ff4 <UART_SetConfig+0x6b8>)
 8007f72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f74:	e012      	b.n	8007f9c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f76:	f7fe f987 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 8007f7a:	0003      	movs	r3, r0
 8007f7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f7e:	e00d      	b.n	8007f9c <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f80:	2380      	movs	r3, #128	; 0x80
 8007f82:	021b      	lsls	r3, r3, #8
 8007f84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f86:	e009      	b.n	8007f9c <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007f8c:	231a      	movs	r3, #26
 8007f8e:	2220      	movs	r2, #32
 8007f90:	4694      	mov	ip, r2
 8007f92:	44bc      	add	ip, r7
 8007f94:	4463      	add	r3, ip
 8007f96:	2201      	movs	r2, #1
 8007f98:	701a      	strb	r2, [r3, #0]
        break;
 8007f9a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d033      	beq.n	800800a <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fa6:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <UART_SetConfig+0x6bc>)
 8007fa8:	0052      	lsls	r2, r2, #1
 8007faa:	5ad3      	ldrh	r3, [r2, r3]
 8007fac:	0019      	movs	r1, r3
 8007fae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007fb0:	f7f8 f8ba 	bl	8000128 <__udivsi3>
 8007fb4:	0003      	movs	r3, r0
 8007fb6:	001a      	movs	r2, r3
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	085b      	lsrs	r3, r3, #1
 8007fbe:	18d2      	adds	r2, r2, r3
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	0019      	movs	r1, r3
 8007fc6:	0010      	movs	r0, r2
 8007fc8:	f7f8 f8ae 	bl	8000128 <__udivsi3>
 8007fcc:	0003      	movs	r3, r0
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	2b0f      	cmp	r3, #15
 8007fd6:	d911      	bls.n	8007ffc <UART_SetConfig+0x6c0>
 8007fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fda:	2380      	movs	r3, #128	; 0x80
 8007fdc:	025b      	lsls	r3, r3, #9
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d20c      	bcs.n	8007ffc <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe8:	60da      	str	r2, [r3, #12]
 8007fea:	e00e      	b.n	800800a <UART_SetConfig+0x6ce>
 8007fec:	40008000 	.word	0x40008000
 8007ff0:	40008400 	.word	0x40008400
 8007ff4:	00f42400 	.word	0x00f42400
 8007ff8:	08009534 	.word	0x08009534
      }
      else
      {
        ret = HAL_ERROR;
 8007ffc:	231a      	movs	r3, #26
 8007ffe:	2220      	movs	r2, #32
 8008000:	4694      	mov	ip, r2
 8008002:	44bc      	add	ip, r7
 8008004:	4463      	add	r3, ip
 8008006:	2201      	movs	r2, #1
 8008008:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	226a      	movs	r2, #106	; 0x6a
 800800e:	2101      	movs	r1, #1
 8008010:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	2268      	movs	r2, #104	; 0x68
 8008016:	2101      	movs	r1, #1
 8008018:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	2200      	movs	r2, #0
 800801e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	2200      	movs	r2, #0
 8008024:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008026:	231a      	movs	r3, #26
 8008028:	2220      	movs	r2, #32
 800802a:	4694      	mov	ip, r2
 800802c:	44bc      	add	ip, r7
 800802e:	4463      	add	r3, ip
 8008030:	781b      	ldrb	r3, [r3, #0]
}
 8008032:	0018      	movs	r0, r3
 8008034:	46bd      	mov	sp, r7
 8008036:	b010      	add	sp, #64	; 0x40
 8008038:	bdb0      	pop	{r4, r5, r7, pc}
 800803a:	46c0      	nop			; (mov r8, r8)

0800803c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008048:	2201      	movs	r2, #1
 800804a:	4013      	ands	r3, r2
 800804c:	d00b      	beq.n	8008066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	4a4a      	ldr	r2, [pc, #296]	; (8008180 <UART_AdvFeatureConfig+0x144>)
 8008056:	4013      	ands	r3, r2
 8008058:	0019      	movs	r1, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806a:	2202      	movs	r2, #2
 800806c:	4013      	ands	r3, r2
 800806e:	d00b      	beq.n	8008088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	4a43      	ldr	r2, [pc, #268]	; (8008184 <UART_AdvFeatureConfig+0x148>)
 8008078:	4013      	ands	r3, r2
 800807a:	0019      	movs	r1, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	2204      	movs	r2, #4
 800808e:	4013      	ands	r3, r2
 8008090:	d00b      	beq.n	80080aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	4a3b      	ldr	r2, [pc, #236]	; (8008188 <UART_AdvFeatureConfig+0x14c>)
 800809a:	4013      	ands	r3, r2
 800809c:	0019      	movs	r1, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ae:	2208      	movs	r2, #8
 80080b0:	4013      	ands	r3, r2
 80080b2:	d00b      	beq.n	80080cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	4a34      	ldr	r2, [pc, #208]	; (800818c <UART_AdvFeatureConfig+0x150>)
 80080bc:	4013      	ands	r3, r2
 80080be:	0019      	movs	r1, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	2210      	movs	r2, #16
 80080d2:	4013      	ands	r3, r2
 80080d4:	d00b      	beq.n	80080ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	4a2c      	ldr	r2, [pc, #176]	; (8008190 <UART_AdvFeatureConfig+0x154>)
 80080de:	4013      	ands	r3, r2
 80080e0:	0019      	movs	r1, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f2:	2220      	movs	r2, #32
 80080f4:	4013      	ands	r3, r2
 80080f6:	d00b      	beq.n	8008110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	4a25      	ldr	r2, [pc, #148]	; (8008194 <UART_AdvFeatureConfig+0x158>)
 8008100:	4013      	ands	r3, r2
 8008102:	0019      	movs	r1, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008114:	2240      	movs	r2, #64	; 0x40
 8008116:	4013      	ands	r3, r2
 8008118:	d01d      	beq.n	8008156 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	4a1d      	ldr	r2, [pc, #116]	; (8008198 <UART_AdvFeatureConfig+0x15c>)
 8008122:	4013      	ands	r3, r2
 8008124:	0019      	movs	r1, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008136:	2380      	movs	r3, #128	; 0x80
 8008138:	035b      	lsls	r3, r3, #13
 800813a:	429a      	cmp	r2, r3
 800813c:	d10b      	bne.n	8008156 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	4a15      	ldr	r2, [pc, #84]	; (800819c <UART_AdvFeatureConfig+0x160>)
 8008146:	4013      	ands	r3, r2
 8008148:	0019      	movs	r1, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815a:	2280      	movs	r2, #128	; 0x80
 800815c:	4013      	ands	r3, r2
 800815e:	d00b      	beq.n	8008178 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	4a0e      	ldr	r2, [pc, #56]	; (80081a0 <UART_AdvFeatureConfig+0x164>)
 8008168:	4013      	ands	r3, r2
 800816a:	0019      	movs	r1, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	605a      	str	r2, [r3, #4]
  }
}
 8008178:	46c0      	nop			; (mov r8, r8)
 800817a:	46bd      	mov	sp, r7
 800817c:	b002      	add	sp, #8
 800817e:	bd80      	pop	{r7, pc}
 8008180:	fffdffff 	.word	0xfffdffff
 8008184:	fffeffff 	.word	0xfffeffff
 8008188:	fffbffff 	.word	0xfffbffff
 800818c:	ffff7fff 	.word	0xffff7fff
 8008190:	ffffefff 	.word	0xffffefff
 8008194:	ffffdfff 	.word	0xffffdfff
 8008198:	ffefffff 	.word	0xffefffff
 800819c:	ff9fffff 	.word	0xff9fffff
 80081a0:	fff7ffff 	.word	0xfff7ffff

080081a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af02      	add	r7, sp, #8
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	228c      	movs	r2, #140	; 0x8c
 80081b0:	2100      	movs	r1, #0
 80081b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081b4:	f7f9 fe38 	bl	8001e28 <HAL_GetTick>
 80081b8:	0003      	movs	r3, r0
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2208      	movs	r2, #8
 80081c4:	4013      	ands	r3, r2
 80081c6:	2b08      	cmp	r3, #8
 80081c8:	d10c      	bne.n	80081e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2280      	movs	r2, #128	; 0x80
 80081ce:	0391      	lsls	r1, r2, #14
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	4a18      	ldr	r2, [pc, #96]	; (8008234 <UART_CheckIdleState+0x90>)
 80081d4:	9200      	str	r2, [sp, #0]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f000 f82e 	bl	8008238 <UART_WaitOnFlagUntilTimeout>
 80081dc:	1e03      	subs	r3, r0, #0
 80081de:	d001      	beq.n	80081e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e023      	b.n	800822c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2204      	movs	r2, #4
 80081ec:	4013      	ands	r3, r2
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d10c      	bne.n	800820c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2280      	movs	r2, #128	; 0x80
 80081f6:	03d1      	lsls	r1, r2, #15
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	4a0e      	ldr	r2, [pc, #56]	; (8008234 <UART_CheckIdleState+0x90>)
 80081fc:	9200      	str	r2, [sp, #0]
 80081fe:	2200      	movs	r2, #0
 8008200:	f000 f81a 	bl	8008238 <UART_WaitOnFlagUntilTimeout>
 8008204:	1e03      	subs	r3, r0, #0
 8008206:	d001      	beq.n	800820c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e00f      	b.n	800822c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2284      	movs	r2, #132	; 0x84
 8008210:	2120      	movs	r1, #32
 8008212:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2288      	movs	r2, #136	; 0x88
 8008218:	2120      	movs	r1, #32
 800821a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2280      	movs	r2, #128	; 0x80
 8008226:	2100      	movs	r1, #0
 8008228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	0018      	movs	r0, r3
 800822e:	46bd      	mov	sp, r7
 8008230:	b004      	add	sp, #16
 8008232:	bd80      	pop	{r7, pc}
 8008234:	01ffffff 	.word	0x01ffffff

08008238 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b094      	sub	sp, #80	; 0x50
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	603b      	str	r3, [r7, #0]
 8008244:	1dfb      	adds	r3, r7, #7
 8008246:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008248:	e0a7      	b.n	800839a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800824a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800824c:	3301      	adds	r3, #1
 800824e:	d100      	bne.n	8008252 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008250:	e0a3      	b.n	800839a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008252:	f7f9 fde9 	bl	8001e28 <HAL_GetTick>
 8008256:	0002      	movs	r2, r0
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800825e:	429a      	cmp	r2, r3
 8008260:	d302      	bcc.n	8008268 <UART_WaitOnFlagUntilTimeout+0x30>
 8008262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008264:	2b00      	cmp	r3, #0
 8008266:	d13f      	bne.n	80082e8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008268:	f3ef 8310 	mrs	r3, PRIMASK
 800826c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008270:	647b      	str	r3, [r7, #68]	; 0x44
 8008272:	2301      	movs	r3, #1
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008278:	f383 8810 	msr	PRIMASK, r3
}
 800827c:	46c0      	nop			; (mov r8, r8)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	494e      	ldr	r1, [pc, #312]	; (80083c4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800828a:	400a      	ands	r2, r1
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008290:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	f383 8810 	msr	PRIMASK, r3
}
 8008298:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800829a:	f3ef 8310 	mrs	r3, PRIMASK
 800829e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80082a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a2:	643b      	str	r3, [r7, #64]	; 0x40
 80082a4:	2301      	movs	r3, #1
 80082a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	f383 8810 	msr	PRIMASK, r3
}
 80082ae:	46c0      	nop			; (mov r8, r8)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689a      	ldr	r2, [r3, #8]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2101      	movs	r1, #1
 80082bc:	438a      	bics	r2, r1
 80082be:	609a      	str	r2, [r3, #8]
 80082c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c6:	f383 8810 	msr	PRIMASK, r3
}
 80082ca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2284      	movs	r2, #132	; 0x84
 80082d0:	2120      	movs	r1, #32
 80082d2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2288      	movs	r2, #136	; 0x88
 80082d8:	2120      	movs	r1, #32
 80082da:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2280      	movs	r2, #128	; 0x80
 80082e0:	2100      	movs	r1, #0
 80082e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e069      	b.n	80083bc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2204      	movs	r2, #4
 80082f0:	4013      	ands	r3, r2
 80082f2:	d052      	beq.n	800839a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	69da      	ldr	r2, [r3, #28]
 80082fa:	2380      	movs	r3, #128	; 0x80
 80082fc:	011b      	lsls	r3, r3, #4
 80082fe:	401a      	ands	r2, r3
 8008300:	2380      	movs	r3, #128	; 0x80
 8008302:	011b      	lsls	r3, r3, #4
 8008304:	429a      	cmp	r2, r3
 8008306:	d148      	bne.n	800839a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2280      	movs	r2, #128	; 0x80
 800830e:	0112      	lsls	r2, r2, #4
 8008310:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008312:	f3ef 8310 	mrs	r3, PRIMASK
 8008316:	613b      	str	r3, [r7, #16]
  return(result);
 8008318:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800831a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800831c:	2301      	movs	r3, #1
 800831e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f383 8810 	msr	PRIMASK, r3
}
 8008326:	46c0      	nop			; (mov r8, r8)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4924      	ldr	r1, [pc, #144]	; (80083c4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008334:	400a      	ands	r2, r1
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800833a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	f383 8810 	msr	PRIMASK, r3
}
 8008342:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008344:	f3ef 8310 	mrs	r3, PRIMASK
 8008348:	61fb      	str	r3, [r7, #28]
  return(result);
 800834a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834c:	64bb      	str	r3, [r7, #72]	; 0x48
 800834e:	2301      	movs	r3, #1
 8008350:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	f383 8810 	msr	PRIMASK, r3
}
 8008358:	46c0      	nop			; (mov r8, r8)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2101      	movs	r1, #1
 8008366:	438a      	bics	r2, r1
 8008368:	609a      	str	r2, [r3, #8]
 800836a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800836c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	f383 8810 	msr	PRIMASK, r3
}
 8008374:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2284      	movs	r2, #132	; 0x84
 800837a:	2120      	movs	r1, #32
 800837c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2288      	movs	r2, #136	; 0x88
 8008382:	2120      	movs	r1, #32
 8008384:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	228c      	movs	r2, #140	; 0x8c
 800838a:	2120      	movs	r1, #32
 800838c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2280      	movs	r2, #128	; 0x80
 8008392:	2100      	movs	r1, #0
 8008394:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e010      	b.n	80083bc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	69db      	ldr	r3, [r3, #28]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	4013      	ands	r3, r2
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	425a      	negs	r2, r3
 80083aa:	4153      	adcs	r3, r2
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	001a      	movs	r2, r3
 80083b0:	1dfb      	adds	r3, r7, #7
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d100      	bne.n	80083ba <UART_WaitOnFlagUntilTimeout+0x182>
 80083b8:	e747      	b.n	800824a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	0018      	movs	r0, r3
 80083be:	46bd      	mov	sp, r7
 80083c0:	b014      	add	sp, #80	; 0x50
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	fffffe5f 	.word	0xfffffe5f

080083c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b090      	sub	sp, #64	; 0x40
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	1dbb      	adds	r3, r7, #6
 80083d4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	1dba      	adds	r2, r7, #6
 80083e0:	215c      	movs	r1, #92	; 0x5c
 80083e2:	8812      	ldrh	r2, [r2, #0]
 80083e4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	228c      	movs	r2, #140	; 0x8c
 80083ea:	2100      	movs	r1, #0
 80083ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2288      	movs	r2, #136	; 0x88
 80083f2:	2122      	movs	r1, #34	; 0x22
 80083f4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d02c      	beq.n	8008458 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008402:	4a40      	ldr	r2, [pc, #256]	; (8008504 <UART_Start_Receive_DMA+0x13c>)
 8008404:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800840a:	4a3f      	ldr	r2, [pc, #252]	; (8008508 <UART_Start_Receive_DMA+0x140>)
 800840c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008412:	4a3e      	ldr	r2, [pc, #248]	; (800850c <UART_Start_Receive_DMA+0x144>)
 8008414:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800841a:	2200      	movs	r2, #0
 800841c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3324      	adds	r3, #36	; 0x24
 8008428:	0019      	movs	r1, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842e:	001a      	movs	r2, r3
 8008430:	1dbb      	adds	r3, r7, #6
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	f7fa fbc2 	bl	8002bbc <HAL_DMA_Start_IT>
 8008438:	1e03      	subs	r3, r0, #0
 800843a:	d00d      	beq.n	8008458 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	228c      	movs	r2, #140	; 0x8c
 8008440:	2110      	movs	r1, #16
 8008442:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2280      	movs	r2, #128	; 0x80
 8008448:	2100      	movs	r1, #0
 800844a:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2288      	movs	r2, #136	; 0x88
 8008450:	2120      	movs	r1, #32
 8008452:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e050      	b.n	80084fa <UART_Start_Receive_DMA+0x132>
    }
  }
  __HAL_UNLOCK(huart);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2280      	movs	r2, #128	; 0x80
 800845c:	2100      	movs	r1, #0
 800845e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008460:	f3ef 8310 	mrs	r3, PRIMASK
 8008464:	613b      	str	r3, [r7, #16]
  return(result);
 8008466:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800846a:	2301      	movs	r3, #1
 800846c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f383 8810 	msr	PRIMASK, r3
}
 8008474:	46c0      	nop			; (mov r8, r8)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2180      	movs	r1, #128	; 0x80
 8008482:	0049      	lsls	r1, r1, #1
 8008484:	430a      	orrs	r2, r1
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	f383 8810 	msr	PRIMASK, r3
}
 8008492:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008494:	f3ef 8310 	mrs	r3, PRIMASK
 8008498:	61fb      	str	r3, [r7, #28]
  return(result);
 800849a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849c:	63bb      	str	r3, [r7, #56]	; 0x38
 800849e:	2301      	movs	r3, #1
 80084a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	f383 8810 	msr	PRIMASK, r3
}
 80084a8:	46c0      	nop			; (mov r8, r8)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2101      	movs	r1, #1
 80084b6:	430a      	orrs	r2, r1
 80084b8:	609a      	str	r2, [r3, #8]
 80084ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	f383 8810 	msr	PRIMASK, r3
}
 80084c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084c6:	f3ef 8310 	mrs	r3, PRIMASK
 80084ca:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ce:	637b      	str	r3, [r7, #52]	; 0x34
 80084d0:	2301      	movs	r3, #1
 80084d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	f383 8810 	msr	PRIMASK, r3
}
 80084da:	46c0      	nop			; (mov r8, r8)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2140      	movs	r1, #64	; 0x40
 80084e8:	430a      	orrs	r2, r1
 80084ea:	609a      	str	r2, [r3, #8]
 80084ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ee:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f2:	f383 8810 	msr	PRIMASK, r3
}
 80084f6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	0018      	movs	r0, r3
 80084fc:	46bd      	mov	sp, r7
 80084fe:	b010      	add	sp, #64	; 0x40
 8008500:	bd80      	pop	{r7, pc}
 8008502:	46c0      	nop			; (mov r8, r8)
 8008504:	0800865d 	.word	0x0800865d
 8008508:	08008785 	.word	0x08008785
 800850c:	080087c1 	.word	0x080087c1

08008510 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08a      	sub	sp, #40	; 0x28
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008518:	f3ef 8310 	mrs	r3, PRIMASK
 800851c:	60bb      	str	r3, [r7, #8]
  return(result);
 800851e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008520:	627b      	str	r3, [r7, #36]	; 0x24
 8008522:	2301      	movs	r3, #1
 8008524:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f383 8810 	msr	PRIMASK, r3
}
 800852c:	46c0      	nop			; (mov r8, r8)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	21c0      	movs	r1, #192	; 0xc0
 800853a:	438a      	bics	r2, r1
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f383 8810 	msr	PRIMASK, r3
}
 8008548:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800854a:	f3ef 8310 	mrs	r3, PRIMASK
 800854e:	617b      	str	r3, [r7, #20]
  return(result);
 8008550:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008552:	623b      	str	r3, [r7, #32]
 8008554:	2301      	movs	r3, #1
 8008556:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	f383 8810 	msr	PRIMASK, r3
}
 800855e:	46c0      	nop			; (mov r8, r8)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4908      	ldr	r1, [pc, #32]	; (800858c <UART_EndTxTransfer+0x7c>)
 800856c:	400a      	ands	r2, r1
 800856e:	609a      	str	r2, [r3, #8]
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	f383 8810 	msr	PRIMASK, r3
}
 800857a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2284      	movs	r2, #132	; 0x84
 8008580:	2120      	movs	r1, #32
 8008582:	5099      	str	r1, [r3, r2]
}
 8008584:	46c0      	nop			; (mov r8, r8)
 8008586:	46bd      	mov	sp, r7
 8008588:	b00a      	add	sp, #40	; 0x28
 800858a:	bd80      	pop	{r7, pc}
 800858c:	ff7fffff 	.word	0xff7fffff

08008590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08e      	sub	sp, #56	; 0x38
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008598:	f3ef 8310 	mrs	r3, PRIMASK
 800859c:	617b      	str	r3, [r7, #20]
  return(result);
 800859e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34
 80085a2:	2301      	movs	r3, #1
 80085a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	f383 8810 	msr	PRIMASK, r3
}
 80085ac:	46c0      	nop			; (mov r8, r8)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4926      	ldr	r1, [pc, #152]	; (8008654 <UART_EndRxTransfer+0xc4>)
 80085ba:	400a      	ands	r2, r1
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	f383 8810 	msr	PRIMASK, r3
}
 80085c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ca:	f3ef 8310 	mrs	r3, PRIMASK
 80085ce:	623b      	str	r3, [r7, #32]
  return(result);
 80085d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085d2:	633b      	str	r3, [r7, #48]	; 0x30
 80085d4:	2301      	movs	r3, #1
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	f383 8810 	msr	PRIMASK, r3
}
 80085de:	46c0      	nop			; (mov r8, r8)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689a      	ldr	r2, [r3, #8]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	491b      	ldr	r1, [pc, #108]	; (8008658 <UART_EndRxTransfer+0xc8>)
 80085ec:	400a      	ands	r2, r1
 80085ee:	609a      	str	r2, [r3, #8]
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	f383 8810 	msr	PRIMASK, r3
}
 80085fa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008600:	2b01      	cmp	r3, #1
 8008602:	d118      	bne.n	8008636 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008604:	f3ef 8310 	mrs	r3, PRIMASK
 8008608:	60bb      	str	r3, [r7, #8]
  return(result);
 800860a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800860c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800860e:	2301      	movs	r3, #1
 8008610:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f383 8810 	msr	PRIMASK, r3
}
 8008618:	46c0      	nop			; (mov r8, r8)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2110      	movs	r1, #16
 8008626:	438a      	bics	r2, r1
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f383 8810 	msr	PRIMASK, r3
}
 8008634:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2288      	movs	r2, #136	; 0x88
 800863a:	2120      	movs	r1, #32
 800863c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	671a      	str	r2, [r3, #112]	; 0x70
}
 800864a:	46c0      	nop			; (mov r8, r8)
 800864c:	46bd      	mov	sp, r7
 800864e:	b00e      	add	sp, #56	; 0x38
 8008650:	bd80      	pop	{r7, pc}
 8008652:	46c0      	nop			; (mov r8, r8)
 8008654:	fffffedf 	.word	0xfffffedf
 8008658:	effffffe 	.word	0xeffffffe

0800865c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b094      	sub	sp, #80	; 0x50
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008668:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2220      	movs	r2, #32
 8008672:	4013      	ands	r3, r2
 8008674:	d16f      	bne.n	8008756 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008678:	225e      	movs	r2, #94	; 0x5e
 800867a:	2100      	movs	r1, #0
 800867c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800867e:	f3ef 8310 	mrs	r3, PRIMASK
 8008682:	61bb      	str	r3, [r7, #24]
  return(result);
 8008684:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008686:	64bb      	str	r3, [r7, #72]	; 0x48
 8008688:	2301      	movs	r3, #1
 800868a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	f383 8810 	msr	PRIMASK, r3
}
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4938      	ldr	r1, [pc, #224]	; (8008780 <UART_DMAReceiveCplt+0x124>)
 80086a0:	400a      	ands	r2, r1
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	f383 8810 	msr	PRIMASK, r3
}
 80086ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b0:	f3ef 8310 	mrs	r3, PRIMASK
 80086b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b8:	647b      	str	r3, [r7, #68]	; 0x44
 80086ba:	2301      	movs	r3, #1
 80086bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	f383 8810 	msr	PRIMASK, r3
}
 80086c4:	46c0      	nop			; (mov r8, r8)
 80086c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2101      	movs	r1, #1
 80086d2:	438a      	bics	r2, r1
 80086d4:	609a      	str	r2, [r3, #8]
 80086d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	f383 8810 	msr	PRIMASK, r3
}
 80086e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086e2:	f3ef 8310 	mrs	r3, PRIMASK
 80086e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ea:	643b      	str	r3, [r7, #64]	; 0x40
 80086ec:	2301      	movs	r3, #1
 80086ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	f383 8810 	msr	PRIMASK, r3
}
 80086f6:	46c0      	nop			; (mov r8, r8)
 80086f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2140      	movs	r1, #64	; 0x40
 8008704:	438a      	bics	r2, r1
 8008706:	609a      	str	r2, [r3, #8]
 8008708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800870a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	f383 8810 	msr	PRIMASK, r3
}
 8008712:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008716:	2288      	movs	r2, #136	; 0x88
 8008718:	2120      	movs	r1, #32
 800871a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800871c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800871e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008720:	2b01      	cmp	r3, #1
 8008722:	d118      	bne.n	8008756 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008724:	f3ef 8310 	mrs	r3, PRIMASK
 8008728:	60fb      	str	r3, [r7, #12]
  return(result);
 800872a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800872e:	2301      	movs	r3, #1
 8008730:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f383 8810 	msr	PRIMASK, r3
}
 8008738:	46c0      	nop			; (mov r8, r8)
 800873a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2110      	movs	r1, #16
 8008746:	438a      	bics	r2, r1
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f383 8810 	msr	PRIMASK, r3
}
 8008754:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800875a:	2b01      	cmp	r3, #1
 800875c:	d108      	bne.n	8008770 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800875e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008760:	225c      	movs	r2, #92	; 0x5c
 8008762:	5a9a      	ldrh	r2, [r3, r2]
 8008764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008766:	0011      	movs	r1, r2
 8008768:	0018      	movs	r0, r3
 800876a:	f7ff f8db 	bl	8007924 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800876e:	e003      	b.n	8008778 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8008770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008772:	0018      	movs	r0, r3
 8008774:	f7f7 ffe8 	bl	8000748 <HAL_UART_RxCpltCallback>
}
 8008778:	46c0      	nop			; (mov r8, r8)
 800877a:	46bd      	mov	sp, r7
 800877c:	b014      	add	sp, #80	; 0x50
 800877e:	bd80      	pop	{r7, pc}
 8008780:	fffffeff 	.word	0xfffffeff

08008784 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008796:	2b01      	cmp	r3, #1
 8008798:	d10a      	bne.n	80087b0 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	225c      	movs	r2, #92	; 0x5c
 800879e:	5a9b      	ldrh	r3, [r3, r2]
 80087a0:	085b      	lsrs	r3, r3, #1
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	0011      	movs	r1, r2
 80087a8:	0018      	movs	r0, r3
 80087aa:	f7ff f8bb 	bl	8007924 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087ae:	e003      	b.n	80087b8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	0018      	movs	r0, r3
 80087b4:	f7ff f89e 	bl	80078f4 <HAL_UART_RxHalfCpltCallback>
}
 80087b8:	46c0      	nop			; (mov r8, r8)
 80087ba:	46bd      	mov	sp, r7
 80087bc:	b004      	add	sp, #16
 80087be:	bd80      	pop	{r7, pc}

080087c0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2284      	movs	r2, #132	; 0x84
 80087d2:	589b      	ldr	r3, [r3, r2]
 80087d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2288      	movs	r2, #136	; 0x88
 80087da:	589b      	ldr	r3, [r3, r2]
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	2280      	movs	r2, #128	; 0x80
 80087e6:	4013      	ands	r3, r2
 80087e8:	2b80      	cmp	r3, #128	; 0x80
 80087ea:	d10a      	bne.n	8008802 <UART_DMAError+0x42>
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	2b21      	cmp	r3, #33	; 0x21
 80087f0:	d107      	bne.n	8008802 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2256      	movs	r2, #86	; 0x56
 80087f6:	2100      	movs	r1, #0
 80087f8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	0018      	movs	r0, r3
 80087fe:	f7ff fe87 	bl	8008510 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	2240      	movs	r2, #64	; 0x40
 800880a:	4013      	ands	r3, r2
 800880c:	2b40      	cmp	r3, #64	; 0x40
 800880e:	d10a      	bne.n	8008826 <UART_DMAError+0x66>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b22      	cmp	r3, #34	; 0x22
 8008814:	d107      	bne.n	8008826 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	225e      	movs	r2, #94	; 0x5e
 800881a:	2100      	movs	r1, #0
 800881c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	0018      	movs	r0, r3
 8008822:	f7ff feb5 	bl	8008590 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	228c      	movs	r2, #140	; 0x8c
 800882a:	589b      	ldr	r3, [r3, r2]
 800882c:	2210      	movs	r2, #16
 800882e:	431a      	orrs	r2, r3
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	218c      	movs	r1, #140	; 0x8c
 8008834:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	0018      	movs	r0, r3
 800883a:	f7ff f863 	bl	8007904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800883e:	46c0      	nop			; (mov r8, r8)
 8008840:	46bd      	mov	sp, r7
 8008842:	b006      	add	sp, #24
 8008844:	bd80      	pop	{r7, pc}

08008846 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b084      	sub	sp, #16
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008852:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008858:	2200      	movs	r2, #0
 800885a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008860:	2b00      	cmp	r3, #0
 8008862:	d004      	beq.n	800886e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886a:	2b00      	cmp	r3, #0
 800886c:	d12d      	bne.n	80088ca <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2256      	movs	r2, #86	; 0x56
 8008872:	2100      	movs	r1, #0
 8008874:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	225e      	movs	r2, #94	; 0x5e
 800887a:	2100      	movs	r1, #0
 800887c:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	228c      	movs	r2, #140	; 0x8c
 8008882:	2100      	movs	r1, #0
 8008884:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	220f      	movs	r2, #15
 800888c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008892:	2380      	movs	r3, #128	; 0x80
 8008894:	059b      	lsls	r3, r3, #22
 8008896:	429a      	cmp	r2, r3
 8008898:	d107      	bne.n	80088aa <UART_DMATxAbortCallback+0x64>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	699a      	ldr	r2, [r3, #24]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2110      	movs	r1, #16
 80088a6:	430a      	orrs	r2, r1
 80088a8:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2284      	movs	r2, #132	; 0x84
 80088ae:	2120      	movs	r1, #32
 80088b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2288      	movs	r2, #136	; 0x88
 80088b6:	2120      	movs	r1, #32
 80088b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	0018      	movs	r0, r3
 80088c4:	f7ff f826 	bl	8007914 <HAL_UART_AbortCpltCallback>
 80088c8:	e000      	b.n	80088cc <UART_DMATxAbortCallback+0x86>
      return;
 80088ca:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088cc:	46bd      	mov	sp, r7
 80088ce:	b004      	add	sp, #16
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088de:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088e4:	2200      	movs	r2, #0
 80088e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d004      	beq.n	80088fa <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d127      	bne.n	800894a <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2256      	movs	r2, #86	; 0x56
 80088fe:	2100      	movs	r1, #0
 8008900:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	225e      	movs	r2, #94	; 0x5e
 8008906:	2100      	movs	r1, #0
 8008908:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	228c      	movs	r2, #140	; 0x8c
 800890e:	2100      	movs	r1, #0
 8008910:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	220f      	movs	r2, #15
 8008918:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	699a      	ldr	r2, [r3, #24]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2108      	movs	r1, #8
 8008926:	430a      	orrs	r2, r1
 8008928:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2284      	movs	r2, #132	; 0x84
 800892e:	2120      	movs	r1, #32
 8008930:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2288      	movs	r2, #136	; 0x88
 8008936:	2120      	movs	r1, #32
 8008938:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	0018      	movs	r0, r3
 8008944:	f7fe ffe6 	bl	8007914 <HAL_UART_AbortCpltCallback>
 8008948:	e000      	b.n	800894c <UART_DMARxAbortCallback+0x7a>
      return;
 800894a:	46c0      	nop			; (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800894c:	46bd      	mov	sp, r7
 800894e:	b004      	add	sp, #16
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2280      	movs	r2, #128	; 0x80
 8008960:	5c9b      	ldrb	r3, [r3, r2]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d101      	bne.n	800896a <HAL_UARTEx_DisableFifoMode+0x16>
 8008966:	2302      	movs	r3, #2
 8008968:	e027      	b.n	80089ba <HAL_UARTEx_DisableFifoMode+0x66>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2280      	movs	r2, #128	; 0x80
 800896e:	2101      	movs	r1, #1
 8008970:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2284      	movs	r2, #132	; 0x84
 8008976:	2124      	movs	r1, #36	; 0x24
 8008978:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2101      	movs	r1, #1
 800898e:	438a      	bics	r2, r1
 8008990:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	4a0b      	ldr	r2, [pc, #44]	; (80089c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008996:	4013      	ands	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2284      	movs	r2, #132	; 0x84
 80089ac:	2120      	movs	r1, #32
 80089ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2280      	movs	r2, #128	; 0x80
 80089b4:	2100      	movs	r1, #0
 80089b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	0018      	movs	r0, r3
 80089bc:	46bd      	mov	sp, r7
 80089be:	b004      	add	sp, #16
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	dfffffff 	.word	0xdfffffff

080089c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2280      	movs	r2, #128	; 0x80
 80089d6:	5c9b      	ldrb	r3, [r3, r2]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d101      	bne.n	80089e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089dc:	2302      	movs	r3, #2
 80089de:	e02e      	b.n	8008a3e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2280      	movs	r2, #128	; 0x80
 80089e4:	2101      	movs	r1, #1
 80089e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2284      	movs	r2, #132	; 0x84
 80089ec:	2124      	movs	r1, #36	; 0x24
 80089ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2101      	movs	r1, #1
 8008a04:	438a      	bics	r2, r1
 8008a06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	08d9      	lsrs	r1, r3, #3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	0018      	movs	r0, r3
 8008a20:	f000 f854 	bl	8008acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2284      	movs	r2, #132	; 0x84
 8008a30:	2120      	movs	r1, #32
 8008a32:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2280      	movs	r2, #128	; 0x80
 8008a38:	2100      	movs	r1, #0
 8008a3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	0018      	movs	r0, r3
 8008a40:	46bd      	mov	sp, r7
 8008a42:	b004      	add	sp, #16
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2280      	movs	r2, #128	; 0x80
 8008a56:	5c9b      	ldrb	r3, [r3, r2]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e02f      	b.n	8008ac0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2280      	movs	r2, #128	; 0x80
 8008a64:	2101      	movs	r1, #1
 8008a66:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2284      	movs	r2, #132	; 0x84
 8008a6c:	2124      	movs	r1, #36	; 0x24
 8008a6e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2101      	movs	r1, #1
 8008a84:	438a      	bics	r2, r1
 8008a86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	4a0e      	ldr	r2, [pc, #56]	; (8008ac8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008a90:	4013      	ands	r3, r2
 8008a92:	0019      	movs	r1, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	f000 f813 	bl	8008acc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2284      	movs	r2, #132	; 0x84
 8008ab2:	2120      	movs	r1, #32
 8008ab4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2280      	movs	r2, #128	; 0x80
 8008aba:	2100      	movs	r1, #0
 8008abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	b004      	add	sp, #16
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	f1ffffff 	.word	0xf1ffffff

08008acc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d108      	bne.n	8008aee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	226a      	movs	r2, #106	; 0x6a
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2268      	movs	r2, #104	; 0x68
 8008ae8:	2101      	movs	r1, #1
 8008aea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008aec:	e043      	b.n	8008b76 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008aee:	260f      	movs	r6, #15
 8008af0:	19bb      	adds	r3, r7, r6
 8008af2:	2208      	movs	r2, #8
 8008af4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008af6:	200e      	movs	r0, #14
 8008af8:	183b      	adds	r3, r7, r0
 8008afa:	2208      	movs	r2, #8
 8008afc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	0e5b      	lsrs	r3, r3, #25
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	240d      	movs	r4, #13
 8008b0a:	193b      	adds	r3, r7, r4
 8008b0c:	2107      	movs	r1, #7
 8008b0e:	400a      	ands	r2, r1
 8008b10:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	0f5b      	lsrs	r3, r3, #29
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	250c      	movs	r5, #12
 8008b1e:	197b      	adds	r3, r7, r5
 8008b20:	2107      	movs	r1, #7
 8008b22:	400a      	ands	r2, r1
 8008b24:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b26:	183b      	adds	r3, r7, r0
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	197a      	adds	r2, r7, r5
 8008b2c:	7812      	ldrb	r2, [r2, #0]
 8008b2e:	4914      	ldr	r1, [pc, #80]	; (8008b80 <UARTEx_SetNbDataToProcess+0xb4>)
 8008b30:	5c8a      	ldrb	r2, [r1, r2]
 8008b32:	435a      	muls	r2, r3
 8008b34:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b36:	197b      	adds	r3, r7, r5
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	4a12      	ldr	r2, [pc, #72]	; (8008b84 <UARTEx_SetNbDataToProcess+0xb8>)
 8008b3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b3e:	0019      	movs	r1, r3
 8008b40:	f7f7 fb7c 	bl	800023c <__divsi3>
 8008b44:	0003      	movs	r3, r0
 8008b46:	b299      	uxth	r1, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	226a      	movs	r2, #106	; 0x6a
 8008b4c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b4e:	19bb      	adds	r3, r7, r6
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	193a      	adds	r2, r7, r4
 8008b54:	7812      	ldrb	r2, [r2, #0]
 8008b56:	490a      	ldr	r1, [pc, #40]	; (8008b80 <UARTEx_SetNbDataToProcess+0xb4>)
 8008b58:	5c8a      	ldrb	r2, [r1, r2]
 8008b5a:	435a      	muls	r2, r3
 8008b5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b5e:	193b      	adds	r3, r7, r4
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	4a08      	ldr	r2, [pc, #32]	; (8008b84 <UARTEx_SetNbDataToProcess+0xb8>)
 8008b64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b66:	0019      	movs	r1, r3
 8008b68:	f7f7 fb68 	bl	800023c <__divsi3>
 8008b6c:	0003      	movs	r3, r0
 8008b6e:	b299      	uxth	r1, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2268      	movs	r2, #104	; 0x68
 8008b74:	5299      	strh	r1, [r3, r2]
}
 8008b76:	46c0      	nop			; (mov r8, r8)
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	b005      	add	sp, #20
 8008b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b7e:	46c0      	nop			; (mov r8, r8)
 8008b80:	0800954c 	.word	0x0800954c
 8008b84:	08009554 	.word	0x08009554

08008b88 <__errno>:
 8008b88:	4b01      	ldr	r3, [pc, #4]	; (8008b90 <__errno+0x8>)
 8008b8a:	6818      	ldr	r0, [r3, #0]
 8008b8c:	4770      	bx	lr
 8008b8e:	46c0      	nop			; (mov r8, r8)
 8008b90:	2000000c 	.word	0x2000000c

08008b94 <__libc_init_array>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	2600      	movs	r6, #0
 8008b98:	4d0c      	ldr	r5, [pc, #48]	; (8008bcc <__libc_init_array+0x38>)
 8008b9a:	4c0d      	ldr	r4, [pc, #52]	; (8008bd0 <__libc_init_array+0x3c>)
 8008b9c:	1b64      	subs	r4, r4, r5
 8008b9e:	10a4      	asrs	r4, r4, #2
 8008ba0:	42a6      	cmp	r6, r4
 8008ba2:	d109      	bne.n	8008bb8 <__libc_init_array+0x24>
 8008ba4:	2600      	movs	r6, #0
 8008ba6:	f000 fc51 	bl	800944c <_init>
 8008baa:	4d0a      	ldr	r5, [pc, #40]	; (8008bd4 <__libc_init_array+0x40>)
 8008bac:	4c0a      	ldr	r4, [pc, #40]	; (8008bd8 <__libc_init_array+0x44>)
 8008bae:	1b64      	subs	r4, r4, r5
 8008bb0:	10a4      	asrs	r4, r4, #2
 8008bb2:	42a6      	cmp	r6, r4
 8008bb4:	d105      	bne.n	8008bc2 <__libc_init_array+0x2e>
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	00b3      	lsls	r3, r6, #2
 8008bba:	58eb      	ldr	r3, [r5, r3]
 8008bbc:	4798      	blx	r3
 8008bbe:	3601      	adds	r6, #1
 8008bc0:	e7ee      	b.n	8008ba0 <__libc_init_array+0xc>
 8008bc2:	00b3      	lsls	r3, r6, #2
 8008bc4:	58eb      	ldr	r3, [r5, r3]
 8008bc6:	4798      	blx	r3
 8008bc8:	3601      	adds	r6, #1
 8008bca:	e7f2      	b.n	8008bb2 <__libc_init_array+0x1e>
 8008bcc:	080095f8 	.word	0x080095f8
 8008bd0:	080095f8 	.word	0x080095f8
 8008bd4:	080095f8 	.word	0x080095f8
 8008bd8:	080095fc 	.word	0x080095fc

08008bdc <malloc>:
 8008bdc:	b510      	push	{r4, lr}
 8008bde:	4b03      	ldr	r3, [pc, #12]	; (8008bec <malloc+0x10>)
 8008be0:	0001      	movs	r1, r0
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	f000 f860 	bl	8008ca8 <_malloc_r>
 8008be8:	bd10      	pop	{r4, pc}
 8008bea:	46c0      	nop			; (mov r8, r8)
 8008bec:	2000000c 	.word	0x2000000c

08008bf0 <memcpy>:
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	b510      	push	{r4, lr}
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d100      	bne.n	8008bfa <memcpy+0xa>
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	5ccc      	ldrb	r4, [r1, r3]
 8008bfc:	54c4      	strb	r4, [r0, r3]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	e7f8      	b.n	8008bf4 <memcpy+0x4>

08008c02 <memset>:
 8008c02:	0003      	movs	r3, r0
 8008c04:	1882      	adds	r2, r0, r2
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d100      	bne.n	8008c0c <memset+0xa>
 8008c0a:	4770      	bx	lr
 8008c0c:	7019      	strb	r1, [r3, #0]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	e7f9      	b.n	8008c06 <memset+0x4>
	...

08008c14 <_free_r>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	0005      	movs	r5, r0
 8008c18:	2900      	cmp	r1, #0
 8008c1a:	d010      	beq.n	8008c3e <_free_r+0x2a>
 8008c1c:	1f0c      	subs	r4, r1, #4
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	da00      	bge.n	8008c26 <_free_r+0x12>
 8008c24:	18e4      	adds	r4, r4, r3
 8008c26:	0028      	movs	r0, r5
 8008c28:	f000 f8ce 	bl	8008dc8 <__malloc_lock>
 8008c2c:	4a1d      	ldr	r2, [pc, #116]	; (8008ca4 <_free_r+0x90>)
 8008c2e:	6813      	ldr	r3, [r2, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d105      	bne.n	8008c40 <_free_r+0x2c>
 8008c34:	6063      	str	r3, [r4, #4]
 8008c36:	6014      	str	r4, [r2, #0]
 8008c38:	0028      	movs	r0, r5
 8008c3a:	f000 f8cd 	bl	8008dd8 <__malloc_unlock>
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	d908      	bls.n	8008c56 <_free_r+0x42>
 8008c44:	6821      	ldr	r1, [r4, #0]
 8008c46:	1860      	adds	r0, r4, r1
 8008c48:	4283      	cmp	r3, r0
 8008c4a:	d1f3      	bne.n	8008c34 <_free_r+0x20>
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	1841      	adds	r1, r0, r1
 8008c52:	6021      	str	r1, [r4, #0]
 8008c54:	e7ee      	b.n	8008c34 <_free_r+0x20>
 8008c56:	001a      	movs	r2, r3
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <_free_r+0x4e>
 8008c5e:	42a3      	cmp	r3, r4
 8008c60:	d9f9      	bls.n	8008c56 <_free_r+0x42>
 8008c62:	6811      	ldr	r1, [r2, #0]
 8008c64:	1850      	adds	r0, r2, r1
 8008c66:	42a0      	cmp	r0, r4
 8008c68:	d10b      	bne.n	8008c82 <_free_r+0x6e>
 8008c6a:	6820      	ldr	r0, [r4, #0]
 8008c6c:	1809      	adds	r1, r1, r0
 8008c6e:	1850      	adds	r0, r2, r1
 8008c70:	6011      	str	r1, [r2, #0]
 8008c72:	4283      	cmp	r3, r0
 8008c74:	d1e0      	bne.n	8008c38 <_free_r+0x24>
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	1841      	adds	r1, r0, r1
 8008c7c:	6011      	str	r1, [r2, #0]
 8008c7e:	6053      	str	r3, [r2, #4]
 8008c80:	e7da      	b.n	8008c38 <_free_r+0x24>
 8008c82:	42a0      	cmp	r0, r4
 8008c84:	d902      	bls.n	8008c8c <_free_r+0x78>
 8008c86:	230c      	movs	r3, #12
 8008c88:	602b      	str	r3, [r5, #0]
 8008c8a:	e7d5      	b.n	8008c38 <_free_r+0x24>
 8008c8c:	6821      	ldr	r1, [r4, #0]
 8008c8e:	1860      	adds	r0, r4, r1
 8008c90:	4283      	cmp	r3, r0
 8008c92:	d103      	bne.n	8008c9c <_free_r+0x88>
 8008c94:	6818      	ldr	r0, [r3, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	1841      	adds	r1, r0, r1
 8008c9a:	6021      	str	r1, [r4, #0]
 8008c9c:	6063      	str	r3, [r4, #4]
 8008c9e:	6054      	str	r4, [r2, #4]
 8008ca0:	e7ca      	b.n	8008c38 <_free_r+0x24>
 8008ca2:	46c0      	nop			; (mov r8, r8)
 8008ca4:	20000094 	.word	0x20000094

08008ca8 <_malloc_r>:
 8008ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008caa:	2303      	movs	r3, #3
 8008cac:	1ccd      	adds	r5, r1, #3
 8008cae:	439d      	bics	r5, r3
 8008cb0:	3508      	adds	r5, #8
 8008cb2:	0006      	movs	r6, r0
 8008cb4:	2d0c      	cmp	r5, #12
 8008cb6:	d21f      	bcs.n	8008cf8 <_malloc_r+0x50>
 8008cb8:	250c      	movs	r5, #12
 8008cba:	42a9      	cmp	r1, r5
 8008cbc:	d81e      	bhi.n	8008cfc <_malloc_r+0x54>
 8008cbe:	0030      	movs	r0, r6
 8008cc0:	f000 f882 	bl	8008dc8 <__malloc_lock>
 8008cc4:	4925      	ldr	r1, [pc, #148]	; (8008d5c <_malloc_r+0xb4>)
 8008cc6:	680a      	ldr	r2, [r1, #0]
 8008cc8:	0014      	movs	r4, r2
 8008cca:	2c00      	cmp	r4, #0
 8008ccc:	d11a      	bne.n	8008d04 <_malloc_r+0x5c>
 8008cce:	4f24      	ldr	r7, [pc, #144]	; (8008d60 <_malloc_r+0xb8>)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d104      	bne.n	8008ce0 <_malloc_r+0x38>
 8008cd6:	0021      	movs	r1, r4
 8008cd8:	0030      	movs	r0, r6
 8008cda:	f000 f843 	bl	8008d64 <_sbrk_r>
 8008cde:	6038      	str	r0, [r7, #0]
 8008ce0:	0029      	movs	r1, r5
 8008ce2:	0030      	movs	r0, r6
 8008ce4:	f000 f83e 	bl	8008d64 <_sbrk_r>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d12b      	bne.n	8008d44 <_malloc_r+0x9c>
 8008cec:	230c      	movs	r3, #12
 8008cee:	0030      	movs	r0, r6
 8008cf0:	6033      	str	r3, [r6, #0]
 8008cf2:	f000 f871 	bl	8008dd8 <__malloc_unlock>
 8008cf6:	e003      	b.n	8008d00 <_malloc_r+0x58>
 8008cf8:	2d00      	cmp	r5, #0
 8008cfa:	dade      	bge.n	8008cba <_malloc_r+0x12>
 8008cfc:	230c      	movs	r3, #12
 8008cfe:	6033      	str	r3, [r6, #0]
 8008d00:	2000      	movs	r0, #0
 8008d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	1b5b      	subs	r3, r3, r5
 8008d08:	d419      	bmi.n	8008d3e <_malloc_r+0x96>
 8008d0a:	2b0b      	cmp	r3, #11
 8008d0c:	d903      	bls.n	8008d16 <_malloc_r+0x6e>
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	18e4      	adds	r4, r4, r3
 8008d12:	6025      	str	r5, [r4, #0]
 8008d14:	e003      	b.n	8008d1e <_malloc_r+0x76>
 8008d16:	6863      	ldr	r3, [r4, #4]
 8008d18:	42a2      	cmp	r2, r4
 8008d1a:	d10e      	bne.n	8008d3a <_malloc_r+0x92>
 8008d1c:	600b      	str	r3, [r1, #0]
 8008d1e:	0030      	movs	r0, r6
 8008d20:	f000 f85a 	bl	8008dd8 <__malloc_unlock>
 8008d24:	0020      	movs	r0, r4
 8008d26:	2207      	movs	r2, #7
 8008d28:	300b      	adds	r0, #11
 8008d2a:	1d23      	adds	r3, r4, #4
 8008d2c:	4390      	bics	r0, r2
 8008d2e:	1ac2      	subs	r2, r0, r3
 8008d30:	4298      	cmp	r0, r3
 8008d32:	d0e6      	beq.n	8008d02 <_malloc_r+0x5a>
 8008d34:	1a1b      	subs	r3, r3, r0
 8008d36:	50a3      	str	r3, [r4, r2]
 8008d38:	e7e3      	b.n	8008d02 <_malloc_r+0x5a>
 8008d3a:	6053      	str	r3, [r2, #4]
 8008d3c:	e7ef      	b.n	8008d1e <_malloc_r+0x76>
 8008d3e:	0022      	movs	r2, r4
 8008d40:	6864      	ldr	r4, [r4, #4]
 8008d42:	e7c2      	b.n	8008cca <_malloc_r+0x22>
 8008d44:	2303      	movs	r3, #3
 8008d46:	1cc4      	adds	r4, r0, #3
 8008d48:	439c      	bics	r4, r3
 8008d4a:	42a0      	cmp	r0, r4
 8008d4c:	d0e1      	beq.n	8008d12 <_malloc_r+0x6a>
 8008d4e:	1a21      	subs	r1, r4, r0
 8008d50:	0030      	movs	r0, r6
 8008d52:	f000 f807 	bl	8008d64 <_sbrk_r>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	d1db      	bne.n	8008d12 <_malloc_r+0x6a>
 8008d5a:	e7c7      	b.n	8008cec <_malloc_r+0x44>
 8008d5c:	20000094 	.word	0x20000094
 8008d60:	20000098 	.word	0x20000098

08008d64 <_sbrk_r>:
 8008d64:	2300      	movs	r3, #0
 8008d66:	b570      	push	{r4, r5, r6, lr}
 8008d68:	4d06      	ldr	r5, [pc, #24]	; (8008d84 <_sbrk_r+0x20>)
 8008d6a:	0004      	movs	r4, r0
 8008d6c:	0008      	movs	r0, r1
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	f7f8 fe3c 	bl	80019ec <_sbrk>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d103      	bne.n	8008d80 <_sbrk_r+0x1c>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d000      	beq.n	8008d80 <_sbrk_r+0x1c>
 8008d7e:	6023      	str	r3, [r4, #0]
 8008d80:	bd70      	pop	{r4, r5, r6, pc}
 8008d82:	46c0      	nop			; (mov r8, r8)
 8008d84:	20000450 	.word	0x20000450

08008d88 <siprintf>:
 8008d88:	b40e      	push	{r1, r2, r3}
 8008d8a:	b500      	push	{lr}
 8008d8c:	490b      	ldr	r1, [pc, #44]	; (8008dbc <siprintf+0x34>)
 8008d8e:	b09c      	sub	sp, #112	; 0x70
 8008d90:	ab1d      	add	r3, sp, #116	; 0x74
 8008d92:	9002      	str	r0, [sp, #8]
 8008d94:	9006      	str	r0, [sp, #24]
 8008d96:	9107      	str	r1, [sp, #28]
 8008d98:	9104      	str	r1, [sp, #16]
 8008d9a:	4809      	ldr	r0, [pc, #36]	; (8008dc0 <siprintf+0x38>)
 8008d9c:	4909      	ldr	r1, [pc, #36]	; (8008dc4 <siprintf+0x3c>)
 8008d9e:	cb04      	ldmia	r3!, {r2}
 8008da0:	9105      	str	r1, [sp, #20]
 8008da2:	6800      	ldr	r0, [r0, #0]
 8008da4:	a902      	add	r1, sp, #8
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	f000 f880 	bl	8008eac <_svfiprintf_r>
 8008dac:	2300      	movs	r3, #0
 8008dae:	9a02      	ldr	r2, [sp, #8]
 8008db0:	7013      	strb	r3, [r2, #0]
 8008db2:	b01c      	add	sp, #112	; 0x70
 8008db4:	bc08      	pop	{r3}
 8008db6:	b003      	add	sp, #12
 8008db8:	4718      	bx	r3
 8008dba:	46c0      	nop			; (mov r8, r8)
 8008dbc:	7fffffff 	.word	0x7fffffff
 8008dc0:	2000000c 	.word	0x2000000c
 8008dc4:	ffff0208 	.word	0xffff0208

08008dc8 <__malloc_lock>:
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	4802      	ldr	r0, [pc, #8]	; (8008dd4 <__malloc_lock+0xc>)
 8008dcc:	f000 faf0 	bl	80093b0 <__retarget_lock_acquire_recursive>
 8008dd0:	bd10      	pop	{r4, pc}
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	20000458 	.word	0x20000458

08008dd8 <__malloc_unlock>:
 8008dd8:	b510      	push	{r4, lr}
 8008dda:	4802      	ldr	r0, [pc, #8]	; (8008de4 <__malloc_unlock+0xc>)
 8008ddc:	f000 fae9 	bl	80093b2 <__retarget_lock_release_recursive>
 8008de0:	bd10      	pop	{r4, pc}
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	20000458 	.word	0x20000458

08008de8 <__ssputs_r>:
 8008de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dea:	688e      	ldr	r6, [r1, #8]
 8008dec:	b085      	sub	sp, #20
 8008dee:	0007      	movs	r7, r0
 8008df0:	000c      	movs	r4, r1
 8008df2:	9203      	str	r2, [sp, #12]
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	429e      	cmp	r6, r3
 8008df8:	d83c      	bhi.n	8008e74 <__ssputs_r+0x8c>
 8008dfa:	2390      	movs	r3, #144	; 0x90
 8008dfc:	898a      	ldrh	r2, [r1, #12]
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	421a      	tst	r2, r3
 8008e02:	d034      	beq.n	8008e6e <__ssputs_r+0x86>
 8008e04:	2503      	movs	r5, #3
 8008e06:	6909      	ldr	r1, [r1, #16]
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	1a5b      	subs	r3, r3, r1
 8008e0c:	9302      	str	r3, [sp, #8]
 8008e0e:	6963      	ldr	r3, [r4, #20]
 8008e10:	9802      	ldr	r0, [sp, #8]
 8008e12:	435d      	muls	r5, r3
 8008e14:	0feb      	lsrs	r3, r5, #31
 8008e16:	195d      	adds	r5, r3, r5
 8008e18:	9b01      	ldr	r3, [sp, #4]
 8008e1a:	106d      	asrs	r5, r5, #1
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	181b      	adds	r3, r3, r0
 8008e20:	42ab      	cmp	r3, r5
 8008e22:	d900      	bls.n	8008e26 <__ssputs_r+0x3e>
 8008e24:	001d      	movs	r5, r3
 8008e26:	0553      	lsls	r3, r2, #21
 8008e28:	d532      	bpl.n	8008e90 <__ssputs_r+0xa8>
 8008e2a:	0029      	movs	r1, r5
 8008e2c:	0038      	movs	r0, r7
 8008e2e:	f7ff ff3b 	bl	8008ca8 <_malloc_r>
 8008e32:	1e06      	subs	r6, r0, #0
 8008e34:	d109      	bne.n	8008e4a <__ssputs_r+0x62>
 8008e36:	230c      	movs	r3, #12
 8008e38:	603b      	str	r3, [r7, #0]
 8008e3a:	2340      	movs	r3, #64	; 0x40
 8008e3c:	2001      	movs	r0, #1
 8008e3e:	89a2      	ldrh	r2, [r4, #12]
 8008e40:	4240      	negs	r0, r0
 8008e42:	4313      	orrs	r3, r2
 8008e44:	81a3      	strh	r3, [r4, #12]
 8008e46:	b005      	add	sp, #20
 8008e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e4a:	9a02      	ldr	r2, [sp, #8]
 8008e4c:	6921      	ldr	r1, [r4, #16]
 8008e4e:	f7ff fecf 	bl	8008bf0 <memcpy>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	4a14      	ldr	r2, [pc, #80]	; (8008ea8 <__ssputs_r+0xc0>)
 8008e56:	401a      	ands	r2, r3
 8008e58:	2380      	movs	r3, #128	; 0x80
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	9b02      	ldr	r3, [sp, #8]
 8008e60:	6126      	str	r6, [r4, #16]
 8008e62:	18f6      	adds	r6, r6, r3
 8008e64:	6026      	str	r6, [r4, #0]
 8008e66:	6165      	str	r5, [r4, #20]
 8008e68:	9e01      	ldr	r6, [sp, #4]
 8008e6a:	1aed      	subs	r5, r5, r3
 8008e6c:	60a5      	str	r5, [r4, #8]
 8008e6e:	9b01      	ldr	r3, [sp, #4]
 8008e70:	429e      	cmp	r6, r3
 8008e72:	d900      	bls.n	8008e76 <__ssputs_r+0x8e>
 8008e74:	9e01      	ldr	r6, [sp, #4]
 8008e76:	0032      	movs	r2, r6
 8008e78:	9903      	ldr	r1, [sp, #12]
 8008e7a:	6820      	ldr	r0, [r4, #0]
 8008e7c:	f000 faa5 	bl	80093ca <memmove>
 8008e80:	68a3      	ldr	r3, [r4, #8]
 8008e82:	2000      	movs	r0, #0
 8008e84:	1b9b      	subs	r3, r3, r6
 8008e86:	60a3      	str	r3, [r4, #8]
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	199e      	adds	r6, r3, r6
 8008e8c:	6026      	str	r6, [r4, #0]
 8008e8e:	e7da      	b.n	8008e46 <__ssputs_r+0x5e>
 8008e90:	002a      	movs	r2, r5
 8008e92:	0038      	movs	r0, r7
 8008e94:	f000 faac 	bl	80093f0 <_realloc_r>
 8008e98:	1e06      	subs	r6, r0, #0
 8008e9a:	d1e0      	bne.n	8008e5e <__ssputs_r+0x76>
 8008e9c:	0038      	movs	r0, r7
 8008e9e:	6921      	ldr	r1, [r4, #16]
 8008ea0:	f7ff feb8 	bl	8008c14 <_free_r>
 8008ea4:	e7c7      	b.n	8008e36 <__ssputs_r+0x4e>
 8008ea6:	46c0      	nop			; (mov r8, r8)
 8008ea8:	fffffb7f 	.word	0xfffffb7f

08008eac <_svfiprintf_r>:
 8008eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eae:	b0a1      	sub	sp, #132	; 0x84
 8008eb0:	9003      	str	r0, [sp, #12]
 8008eb2:	001d      	movs	r5, r3
 8008eb4:	898b      	ldrh	r3, [r1, #12]
 8008eb6:	000f      	movs	r7, r1
 8008eb8:	0016      	movs	r6, r2
 8008eba:	061b      	lsls	r3, r3, #24
 8008ebc:	d511      	bpl.n	8008ee2 <_svfiprintf_r+0x36>
 8008ebe:	690b      	ldr	r3, [r1, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10e      	bne.n	8008ee2 <_svfiprintf_r+0x36>
 8008ec4:	2140      	movs	r1, #64	; 0x40
 8008ec6:	f7ff feef 	bl	8008ca8 <_malloc_r>
 8008eca:	6038      	str	r0, [r7, #0]
 8008ecc:	6138      	str	r0, [r7, #16]
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d105      	bne.n	8008ede <_svfiprintf_r+0x32>
 8008ed2:	230c      	movs	r3, #12
 8008ed4:	9a03      	ldr	r2, [sp, #12]
 8008ed6:	3801      	subs	r0, #1
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	b021      	add	sp, #132	; 0x84
 8008edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ede:	2340      	movs	r3, #64	; 0x40
 8008ee0:	617b      	str	r3, [r7, #20]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	ac08      	add	r4, sp, #32
 8008ee6:	6163      	str	r3, [r4, #20]
 8008ee8:	3320      	adds	r3, #32
 8008eea:	7663      	strb	r3, [r4, #25]
 8008eec:	3310      	adds	r3, #16
 8008eee:	76a3      	strb	r3, [r4, #26]
 8008ef0:	9507      	str	r5, [sp, #28]
 8008ef2:	0035      	movs	r5, r6
 8008ef4:	782b      	ldrb	r3, [r5, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <_svfiprintf_r+0x52>
 8008efa:	2b25      	cmp	r3, #37	; 0x25
 8008efc:	d147      	bne.n	8008f8e <_svfiprintf_r+0xe2>
 8008efe:	1bab      	subs	r3, r5, r6
 8008f00:	9305      	str	r3, [sp, #20]
 8008f02:	42b5      	cmp	r5, r6
 8008f04:	d00c      	beq.n	8008f20 <_svfiprintf_r+0x74>
 8008f06:	0032      	movs	r2, r6
 8008f08:	0039      	movs	r1, r7
 8008f0a:	9803      	ldr	r0, [sp, #12]
 8008f0c:	f7ff ff6c 	bl	8008de8 <__ssputs_r>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d100      	bne.n	8008f16 <_svfiprintf_r+0x6a>
 8008f14:	e0ae      	b.n	8009074 <_svfiprintf_r+0x1c8>
 8008f16:	6962      	ldr	r2, [r4, #20]
 8008f18:	9b05      	ldr	r3, [sp, #20]
 8008f1a:	4694      	mov	ip, r2
 8008f1c:	4463      	add	r3, ip
 8008f1e:	6163      	str	r3, [r4, #20]
 8008f20:	782b      	ldrb	r3, [r5, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d100      	bne.n	8008f28 <_svfiprintf_r+0x7c>
 8008f26:	e0a5      	b.n	8009074 <_svfiprintf_r+0x1c8>
 8008f28:	2201      	movs	r2, #1
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	4252      	negs	r2, r2
 8008f2e:	6062      	str	r2, [r4, #4]
 8008f30:	a904      	add	r1, sp, #16
 8008f32:	3254      	adds	r2, #84	; 0x54
 8008f34:	1852      	adds	r2, r2, r1
 8008f36:	1c6e      	adds	r6, r5, #1
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	60e3      	str	r3, [r4, #12]
 8008f3c:	60a3      	str	r3, [r4, #8]
 8008f3e:	7013      	strb	r3, [r2, #0]
 8008f40:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f42:	2205      	movs	r2, #5
 8008f44:	7831      	ldrb	r1, [r6, #0]
 8008f46:	4854      	ldr	r0, [pc, #336]	; (8009098 <_svfiprintf_r+0x1ec>)
 8008f48:	f000 fa34 	bl	80093b4 <memchr>
 8008f4c:	1c75      	adds	r5, r6, #1
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d11f      	bne.n	8008f92 <_svfiprintf_r+0xe6>
 8008f52:	6822      	ldr	r2, [r4, #0]
 8008f54:	06d3      	lsls	r3, r2, #27
 8008f56:	d504      	bpl.n	8008f62 <_svfiprintf_r+0xb6>
 8008f58:	2353      	movs	r3, #83	; 0x53
 8008f5a:	a904      	add	r1, sp, #16
 8008f5c:	185b      	adds	r3, r3, r1
 8008f5e:	2120      	movs	r1, #32
 8008f60:	7019      	strb	r1, [r3, #0]
 8008f62:	0713      	lsls	r3, r2, #28
 8008f64:	d504      	bpl.n	8008f70 <_svfiprintf_r+0xc4>
 8008f66:	2353      	movs	r3, #83	; 0x53
 8008f68:	a904      	add	r1, sp, #16
 8008f6a:	185b      	adds	r3, r3, r1
 8008f6c:	212b      	movs	r1, #43	; 0x2b
 8008f6e:	7019      	strb	r1, [r3, #0]
 8008f70:	7833      	ldrb	r3, [r6, #0]
 8008f72:	2b2a      	cmp	r3, #42	; 0x2a
 8008f74:	d016      	beq.n	8008fa4 <_svfiprintf_r+0xf8>
 8008f76:	0035      	movs	r5, r6
 8008f78:	2100      	movs	r1, #0
 8008f7a:	200a      	movs	r0, #10
 8008f7c:	68e3      	ldr	r3, [r4, #12]
 8008f7e:	782a      	ldrb	r2, [r5, #0]
 8008f80:	1c6e      	adds	r6, r5, #1
 8008f82:	3a30      	subs	r2, #48	; 0x30
 8008f84:	2a09      	cmp	r2, #9
 8008f86:	d94e      	bls.n	8009026 <_svfiprintf_r+0x17a>
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	d111      	bne.n	8008fb0 <_svfiprintf_r+0x104>
 8008f8c:	e017      	b.n	8008fbe <_svfiprintf_r+0x112>
 8008f8e:	3501      	adds	r5, #1
 8008f90:	e7b0      	b.n	8008ef4 <_svfiprintf_r+0x48>
 8008f92:	4b41      	ldr	r3, [pc, #260]	; (8009098 <_svfiprintf_r+0x1ec>)
 8008f94:	6822      	ldr	r2, [r4, #0]
 8008f96:	1ac0      	subs	r0, r0, r3
 8008f98:	2301      	movs	r3, #1
 8008f9a:	4083      	lsls	r3, r0
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	002e      	movs	r6, r5
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	e7ce      	b.n	8008f42 <_svfiprintf_r+0x96>
 8008fa4:	9b07      	ldr	r3, [sp, #28]
 8008fa6:	1d19      	adds	r1, r3, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	9107      	str	r1, [sp, #28]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	db01      	blt.n	8008fb4 <_svfiprintf_r+0x108>
 8008fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fb2:	e004      	b.n	8008fbe <_svfiprintf_r+0x112>
 8008fb4:	425b      	negs	r3, r3
 8008fb6:	60e3      	str	r3, [r4, #12]
 8008fb8:	2302      	movs	r3, #2
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	782b      	ldrb	r3, [r5, #0]
 8008fc0:	2b2e      	cmp	r3, #46	; 0x2e
 8008fc2:	d10a      	bne.n	8008fda <_svfiprintf_r+0x12e>
 8008fc4:	786b      	ldrb	r3, [r5, #1]
 8008fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc8:	d135      	bne.n	8009036 <_svfiprintf_r+0x18a>
 8008fca:	9b07      	ldr	r3, [sp, #28]
 8008fcc:	3502      	adds	r5, #2
 8008fce:	1d1a      	adds	r2, r3, #4
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	9207      	str	r2, [sp, #28]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	db2b      	blt.n	8009030 <_svfiprintf_r+0x184>
 8008fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008fda:	4e30      	ldr	r6, [pc, #192]	; (800909c <_svfiprintf_r+0x1f0>)
 8008fdc:	2203      	movs	r2, #3
 8008fde:	0030      	movs	r0, r6
 8008fe0:	7829      	ldrb	r1, [r5, #0]
 8008fe2:	f000 f9e7 	bl	80093b4 <memchr>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d006      	beq.n	8008ff8 <_svfiprintf_r+0x14c>
 8008fea:	2340      	movs	r3, #64	; 0x40
 8008fec:	1b80      	subs	r0, r0, r6
 8008fee:	4083      	lsls	r3, r0
 8008ff0:	6822      	ldr	r2, [r4, #0]
 8008ff2:	3501      	adds	r5, #1
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	6023      	str	r3, [r4, #0]
 8008ff8:	7829      	ldrb	r1, [r5, #0]
 8008ffa:	2206      	movs	r2, #6
 8008ffc:	4828      	ldr	r0, [pc, #160]	; (80090a0 <_svfiprintf_r+0x1f4>)
 8008ffe:	1c6e      	adds	r6, r5, #1
 8009000:	7621      	strb	r1, [r4, #24]
 8009002:	f000 f9d7 	bl	80093b4 <memchr>
 8009006:	2800      	cmp	r0, #0
 8009008:	d03c      	beq.n	8009084 <_svfiprintf_r+0x1d8>
 800900a:	4b26      	ldr	r3, [pc, #152]	; (80090a4 <_svfiprintf_r+0x1f8>)
 800900c:	2b00      	cmp	r3, #0
 800900e:	d125      	bne.n	800905c <_svfiprintf_r+0x1b0>
 8009010:	2207      	movs	r2, #7
 8009012:	9b07      	ldr	r3, [sp, #28]
 8009014:	3307      	adds	r3, #7
 8009016:	4393      	bics	r3, r2
 8009018:	3308      	adds	r3, #8
 800901a:	9307      	str	r3, [sp, #28]
 800901c:	6963      	ldr	r3, [r4, #20]
 800901e:	9a04      	ldr	r2, [sp, #16]
 8009020:	189b      	adds	r3, r3, r2
 8009022:	6163      	str	r3, [r4, #20]
 8009024:	e765      	b.n	8008ef2 <_svfiprintf_r+0x46>
 8009026:	4343      	muls	r3, r0
 8009028:	0035      	movs	r5, r6
 800902a:	2101      	movs	r1, #1
 800902c:	189b      	adds	r3, r3, r2
 800902e:	e7a6      	b.n	8008f7e <_svfiprintf_r+0xd2>
 8009030:	2301      	movs	r3, #1
 8009032:	425b      	negs	r3, r3
 8009034:	e7d0      	b.n	8008fd8 <_svfiprintf_r+0x12c>
 8009036:	2300      	movs	r3, #0
 8009038:	200a      	movs	r0, #10
 800903a:	001a      	movs	r2, r3
 800903c:	3501      	adds	r5, #1
 800903e:	6063      	str	r3, [r4, #4]
 8009040:	7829      	ldrb	r1, [r5, #0]
 8009042:	1c6e      	adds	r6, r5, #1
 8009044:	3930      	subs	r1, #48	; 0x30
 8009046:	2909      	cmp	r1, #9
 8009048:	d903      	bls.n	8009052 <_svfiprintf_r+0x1a6>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0c5      	beq.n	8008fda <_svfiprintf_r+0x12e>
 800904e:	9209      	str	r2, [sp, #36]	; 0x24
 8009050:	e7c3      	b.n	8008fda <_svfiprintf_r+0x12e>
 8009052:	4342      	muls	r2, r0
 8009054:	0035      	movs	r5, r6
 8009056:	2301      	movs	r3, #1
 8009058:	1852      	adds	r2, r2, r1
 800905a:	e7f1      	b.n	8009040 <_svfiprintf_r+0x194>
 800905c:	ab07      	add	r3, sp, #28
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	003a      	movs	r2, r7
 8009062:	0021      	movs	r1, r4
 8009064:	4b10      	ldr	r3, [pc, #64]	; (80090a8 <_svfiprintf_r+0x1fc>)
 8009066:	9803      	ldr	r0, [sp, #12]
 8009068:	e000      	b.n	800906c <_svfiprintf_r+0x1c0>
 800906a:	bf00      	nop
 800906c:	9004      	str	r0, [sp, #16]
 800906e:	9b04      	ldr	r3, [sp, #16]
 8009070:	3301      	adds	r3, #1
 8009072:	d1d3      	bne.n	800901c <_svfiprintf_r+0x170>
 8009074:	89bb      	ldrh	r3, [r7, #12]
 8009076:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009078:	065b      	lsls	r3, r3, #25
 800907a:	d400      	bmi.n	800907e <_svfiprintf_r+0x1d2>
 800907c:	e72d      	b.n	8008eda <_svfiprintf_r+0x2e>
 800907e:	2001      	movs	r0, #1
 8009080:	4240      	negs	r0, r0
 8009082:	e72a      	b.n	8008eda <_svfiprintf_r+0x2e>
 8009084:	ab07      	add	r3, sp, #28
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	003a      	movs	r2, r7
 800908a:	0021      	movs	r1, r4
 800908c:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <_svfiprintf_r+0x1fc>)
 800908e:	9803      	ldr	r0, [sp, #12]
 8009090:	f000 f87c 	bl	800918c <_printf_i>
 8009094:	e7ea      	b.n	800906c <_svfiprintf_r+0x1c0>
 8009096:	46c0      	nop			; (mov r8, r8)
 8009098:	0800955c 	.word	0x0800955c
 800909c:	08009562 	.word	0x08009562
 80090a0:	08009566 	.word	0x08009566
 80090a4:	00000000 	.word	0x00000000
 80090a8:	08008de9 	.word	0x08008de9

080090ac <_printf_common>:
 80090ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ae:	0015      	movs	r5, r2
 80090b0:	9301      	str	r3, [sp, #4]
 80090b2:	688a      	ldr	r2, [r1, #8]
 80090b4:	690b      	ldr	r3, [r1, #16]
 80090b6:	000c      	movs	r4, r1
 80090b8:	9000      	str	r0, [sp, #0]
 80090ba:	4293      	cmp	r3, r2
 80090bc:	da00      	bge.n	80090c0 <_printf_common+0x14>
 80090be:	0013      	movs	r3, r2
 80090c0:	0022      	movs	r2, r4
 80090c2:	602b      	str	r3, [r5, #0]
 80090c4:	3243      	adds	r2, #67	; 0x43
 80090c6:	7812      	ldrb	r2, [r2, #0]
 80090c8:	2a00      	cmp	r2, #0
 80090ca:	d001      	beq.n	80090d0 <_printf_common+0x24>
 80090cc:	3301      	adds	r3, #1
 80090ce:	602b      	str	r3, [r5, #0]
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	069b      	lsls	r3, r3, #26
 80090d4:	d502      	bpl.n	80090dc <_printf_common+0x30>
 80090d6:	682b      	ldr	r3, [r5, #0]
 80090d8:	3302      	adds	r3, #2
 80090da:	602b      	str	r3, [r5, #0]
 80090dc:	6822      	ldr	r2, [r4, #0]
 80090de:	2306      	movs	r3, #6
 80090e0:	0017      	movs	r7, r2
 80090e2:	401f      	ands	r7, r3
 80090e4:	421a      	tst	r2, r3
 80090e6:	d027      	beq.n	8009138 <_printf_common+0x8c>
 80090e8:	0023      	movs	r3, r4
 80090ea:	3343      	adds	r3, #67	; 0x43
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	1e5a      	subs	r2, r3, #1
 80090f0:	4193      	sbcs	r3, r2
 80090f2:	6822      	ldr	r2, [r4, #0]
 80090f4:	0692      	lsls	r2, r2, #26
 80090f6:	d430      	bmi.n	800915a <_printf_common+0xae>
 80090f8:	0022      	movs	r2, r4
 80090fa:	9901      	ldr	r1, [sp, #4]
 80090fc:	9800      	ldr	r0, [sp, #0]
 80090fe:	9e08      	ldr	r6, [sp, #32]
 8009100:	3243      	adds	r2, #67	; 0x43
 8009102:	47b0      	blx	r6
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d025      	beq.n	8009154 <_printf_common+0xa8>
 8009108:	2306      	movs	r3, #6
 800910a:	6820      	ldr	r0, [r4, #0]
 800910c:	682a      	ldr	r2, [r5, #0]
 800910e:	68e1      	ldr	r1, [r4, #12]
 8009110:	2500      	movs	r5, #0
 8009112:	4003      	ands	r3, r0
 8009114:	2b04      	cmp	r3, #4
 8009116:	d103      	bne.n	8009120 <_printf_common+0x74>
 8009118:	1a8d      	subs	r5, r1, r2
 800911a:	43eb      	mvns	r3, r5
 800911c:	17db      	asrs	r3, r3, #31
 800911e:	401d      	ands	r5, r3
 8009120:	68a3      	ldr	r3, [r4, #8]
 8009122:	6922      	ldr	r2, [r4, #16]
 8009124:	4293      	cmp	r3, r2
 8009126:	dd01      	ble.n	800912c <_printf_common+0x80>
 8009128:	1a9b      	subs	r3, r3, r2
 800912a:	18ed      	adds	r5, r5, r3
 800912c:	2700      	movs	r7, #0
 800912e:	42bd      	cmp	r5, r7
 8009130:	d120      	bne.n	8009174 <_printf_common+0xc8>
 8009132:	2000      	movs	r0, #0
 8009134:	e010      	b.n	8009158 <_printf_common+0xac>
 8009136:	3701      	adds	r7, #1
 8009138:	68e3      	ldr	r3, [r4, #12]
 800913a:	682a      	ldr	r2, [r5, #0]
 800913c:	1a9b      	subs	r3, r3, r2
 800913e:	42bb      	cmp	r3, r7
 8009140:	ddd2      	ble.n	80090e8 <_printf_common+0x3c>
 8009142:	0022      	movs	r2, r4
 8009144:	2301      	movs	r3, #1
 8009146:	9901      	ldr	r1, [sp, #4]
 8009148:	9800      	ldr	r0, [sp, #0]
 800914a:	9e08      	ldr	r6, [sp, #32]
 800914c:	3219      	adds	r2, #25
 800914e:	47b0      	blx	r6
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	d1f0      	bne.n	8009136 <_printf_common+0x8a>
 8009154:	2001      	movs	r0, #1
 8009156:	4240      	negs	r0, r0
 8009158:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800915a:	2030      	movs	r0, #48	; 0x30
 800915c:	18e1      	adds	r1, r4, r3
 800915e:	3143      	adds	r1, #67	; 0x43
 8009160:	7008      	strb	r0, [r1, #0]
 8009162:	0021      	movs	r1, r4
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	3145      	adds	r1, #69	; 0x45
 8009168:	7809      	ldrb	r1, [r1, #0]
 800916a:	18a2      	adds	r2, r4, r2
 800916c:	3243      	adds	r2, #67	; 0x43
 800916e:	3302      	adds	r3, #2
 8009170:	7011      	strb	r1, [r2, #0]
 8009172:	e7c1      	b.n	80090f8 <_printf_common+0x4c>
 8009174:	0022      	movs	r2, r4
 8009176:	2301      	movs	r3, #1
 8009178:	9901      	ldr	r1, [sp, #4]
 800917a:	9800      	ldr	r0, [sp, #0]
 800917c:	9e08      	ldr	r6, [sp, #32]
 800917e:	321a      	adds	r2, #26
 8009180:	47b0      	blx	r6
 8009182:	1c43      	adds	r3, r0, #1
 8009184:	d0e6      	beq.n	8009154 <_printf_common+0xa8>
 8009186:	3701      	adds	r7, #1
 8009188:	e7d1      	b.n	800912e <_printf_common+0x82>
	...

0800918c <_printf_i>:
 800918c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800918e:	b08b      	sub	sp, #44	; 0x2c
 8009190:	9206      	str	r2, [sp, #24]
 8009192:	000a      	movs	r2, r1
 8009194:	3243      	adds	r2, #67	; 0x43
 8009196:	9307      	str	r3, [sp, #28]
 8009198:	9005      	str	r0, [sp, #20]
 800919a:	9204      	str	r2, [sp, #16]
 800919c:	7e0a      	ldrb	r2, [r1, #24]
 800919e:	000c      	movs	r4, r1
 80091a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091a2:	2a78      	cmp	r2, #120	; 0x78
 80091a4:	d806      	bhi.n	80091b4 <_printf_i+0x28>
 80091a6:	2a62      	cmp	r2, #98	; 0x62
 80091a8:	d808      	bhi.n	80091bc <_printf_i+0x30>
 80091aa:	2a00      	cmp	r2, #0
 80091ac:	d100      	bne.n	80091b0 <_printf_i+0x24>
 80091ae:	e0c0      	b.n	8009332 <_printf_i+0x1a6>
 80091b0:	2a58      	cmp	r2, #88	; 0x58
 80091b2:	d052      	beq.n	800925a <_printf_i+0xce>
 80091b4:	0026      	movs	r6, r4
 80091b6:	3642      	adds	r6, #66	; 0x42
 80091b8:	7032      	strb	r2, [r6, #0]
 80091ba:	e022      	b.n	8009202 <_printf_i+0x76>
 80091bc:	0010      	movs	r0, r2
 80091be:	3863      	subs	r0, #99	; 0x63
 80091c0:	2815      	cmp	r0, #21
 80091c2:	d8f7      	bhi.n	80091b4 <_printf_i+0x28>
 80091c4:	f7f6 ffa6 	bl	8000114 <__gnu_thumb1_case_shi>
 80091c8:	001f0016 	.word	0x001f0016
 80091cc:	fff6fff6 	.word	0xfff6fff6
 80091d0:	fff6fff6 	.word	0xfff6fff6
 80091d4:	fff6001f 	.word	0xfff6001f
 80091d8:	fff6fff6 	.word	0xfff6fff6
 80091dc:	00a8fff6 	.word	0x00a8fff6
 80091e0:	009a0036 	.word	0x009a0036
 80091e4:	fff6fff6 	.word	0xfff6fff6
 80091e8:	fff600b9 	.word	0xfff600b9
 80091ec:	fff60036 	.word	0xfff60036
 80091f0:	009efff6 	.word	0x009efff6
 80091f4:	0026      	movs	r6, r4
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	3642      	adds	r6, #66	; 0x42
 80091fa:	1d11      	adds	r1, r2, #4
 80091fc:	6019      	str	r1, [r3, #0]
 80091fe:	6813      	ldr	r3, [r2, #0]
 8009200:	7033      	strb	r3, [r6, #0]
 8009202:	2301      	movs	r3, #1
 8009204:	e0a7      	b.n	8009356 <_printf_i+0x1ca>
 8009206:	6808      	ldr	r0, [r1, #0]
 8009208:	6819      	ldr	r1, [r3, #0]
 800920a:	1d0a      	adds	r2, r1, #4
 800920c:	0605      	lsls	r5, r0, #24
 800920e:	d50b      	bpl.n	8009228 <_printf_i+0x9c>
 8009210:	680d      	ldr	r5, [r1, #0]
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	2d00      	cmp	r5, #0
 8009216:	da03      	bge.n	8009220 <_printf_i+0x94>
 8009218:	232d      	movs	r3, #45	; 0x2d
 800921a:	9a04      	ldr	r2, [sp, #16]
 800921c:	426d      	negs	r5, r5
 800921e:	7013      	strb	r3, [r2, #0]
 8009220:	4b61      	ldr	r3, [pc, #388]	; (80093a8 <_printf_i+0x21c>)
 8009222:	270a      	movs	r7, #10
 8009224:	9303      	str	r3, [sp, #12]
 8009226:	e032      	b.n	800928e <_printf_i+0x102>
 8009228:	680d      	ldr	r5, [r1, #0]
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	0641      	lsls	r1, r0, #25
 800922e:	d5f1      	bpl.n	8009214 <_printf_i+0x88>
 8009230:	b22d      	sxth	r5, r5
 8009232:	e7ef      	b.n	8009214 <_printf_i+0x88>
 8009234:	680d      	ldr	r5, [r1, #0]
 8009236:	6819      	ldr	r1, [r3, #0]
 8009238:	1d08      	adds	r0, r1, #4
 800923a:	6018      	str	r0, [r3, #0]
 800923c:	062e      	lsls	r6, r5, #24
 800923e:	d501      	bpl.n	8009244 <_printf_i+0xb8>
 8009240:	680d      	ldr	r5, [r1, #0]
 8009242:	e003      	b.n	800924c <_printf_i+0xc0>
 8009244:	066d      	lsls	r5, r5, #25
 8009246:	d5fb      	bpl.n	8009240 <_printf_i+0xb4>
 8009248:	680d      	ldr	r5, [r1, #0]
 800924a:	b2ad      	uxth	r5, r5
 800924c:	4b56      	ldr	r3, [pc, #344]	; (80093a8 <_printf_i+0x21c>)
 800924e:	270a      	movs	r7, #10
 8009250:	9303      	str	r3, [sp, #12]
 8009252:	2a6f      	cmp	r2, #111	; 0x6f
 8009254:	d117      	bne.n	8009286 <_printf_i+0xfa>
 8009256:	2708      	movs	r7, #8
 8009258:	e015      	b.n	8009286 <_printf_i+0xfa>
 800925a:	3145      	adds	r1, #69	; 0x45
 800925c:	700a      	strb	r2, [r1, #0]
 800925e:	4a52      	ldr	r2, [pc, #328]	; (80093a8 <_printf_i+0x21c>)
 8009260:	9203      	str	r2, [sp, #12]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	6821      	ldr	r1, [r4, #0]
 8009266:	ca20      	ldmia	r2!, {r5}
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	0608      	lsls	r0, r1, #24
 800926c:	d550      	bpl.n	8009310 <_printf_i+0x184>
 800926e:	07cb      	lsls	r3, r1, #31
 8009270:	d502      	bpl.n	8009278 <_printf_i+0xec>
 8009272:	2320      	movs	r3, #32
 8009274:	4319      	orrs	r1, r3
 8009276:	6021      	str	r1, [r4, #0]
 8009278:	2710      	movs	r7, #16
 800927a:	2d00      	cmp	r5, #0
 800927c:	d103      	bne.n	8009286 <_printf_i+0xfa>
 800927e:	2320      	movs	r3, #32
 8009280:	6822      	ldr	r2, [r4, #0]
 8009282:	439a      	bics	r2, r3
 8009284:	6022      	str	r2, [r4, #0]
 8009286:	0023      	movs	r3, r4
 8009288:	2200      	movs	r2, #0
 800928a:	3343      	adds	r3, #67	; 0x43
 800928c:	701a      	strb	r2, [r3, #0]
 800928e:	6863      	ldr	r3, [r4, #4]
 8009290:	60a3      	str	r3, [r4, #8]
 8009292:	2b00      	cmp	r3, #0
 8009294:	db03      	blt.n	800929e <_printf_i+0x112>
 8009296:	2204      	movs	r2, #4
 8009298:	6821      	ldr	r1, [r4, #0]
 800929a:	4391      	bics	r1, r2
 800929c:	6021      	str	r1, [r4, #0]
 800929e:	2d00      	cmp	r5, #0
 80092a0:	d102      	bne.n	80092a8 <_printf_i+0x11c>
 80092a2:	9e04      	ldr	r6, [sp, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00c      	beq.n	80092c2 <_printf_i+0x136>
 80092a8:	9e04      	ldr	r6, [sp, #16]
 80092aa:	0028      	movs	r0, r5
 80092ac:	0039      	movs	r1, r7
 80092ae:	f7f6 ffc1 	bl	8000234 <__aeabi_uidivmod>
 80092b2:	9b03      	ldr	r3, [sp, #12]
 80092b4:	3e01      	subs	r6, #1
 80092b6:	5c5b      	ldrb	r3, [r3, r1]
 80092b8:	7033      	strb	r3, [r6, #0]
 80092ba:	002b      	movs	r3, r5
 80092bc:	0005      	movs	r5, r0
 80092be:	429f      	cmp	r7, r3
 80092c0:	d9f3      	bls.n	80092aa <_printf_i+0x11e>
 80092c2:	2f08      	cmp	r7, #8
 80092c4:	d109      	bne.n	80092da <_printf_i+0x14e>
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	07db      	lsls	r3, r3, #31
 80092ca:	d506      	bpl.n	80092da <_printf_i+0x14e>
 80092cc:	6863      	ldr	r3, [r4, #4]
 80092ce:	6922      	ldr	r2, [r4, #16]
 80092d0:	4293      	cmp	r3, r2
 80092d2:	dc02      	bgt.n	80092da <_printf_i+0x14e>
 80092d4:	2330      	movs	r3, #48	; 0x30
 80092d6:	3e01      	subs	r6, #1
 80092d8:	7033      	strb	r3, [r6, #0]
 80092da:	9b04      	ldr	r3, [sp, #16]
 80092dc:	1b9b      	subs	r3, r3, r6
 80092de:	6123      	str	r3, [r4, #16]
 80092e0:	9b07      	ldr	r3, [sp, #28]
 80092e2:	0021      	movs	r1, r4
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	9805      	ldr	r0, [sp, #20]
 80092e8:	9b06      	ldr	r3, [sp, #24]
 80092ea:	aa09      	add	r2, sp, #36	; 0x24
 80092ec:	f7ff fede 	bl	80090ac <_printf_common>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d135      	bne.n	8009360 <_printf_i+0x1d4>
 80092f4:	2001      	movs	r0, #1
 80092f6:	4240      	negs	r0, r0
 80092f8:	b00b      	add	sp, #44	; 0x2c
 80092fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092fc:	2220      	movs	r2, #32
 80092fe:	6809      	ldr	r1, [r1, #0]
 8009300:	430a      	orrs	r2, r1
 8009302:	6022      	str	r2, [r4, #0]
 8009304:	0022      	movs	r2, r4
 8009306:	2178      	movs	r1, #120	; 0x78
 8009308:	3245      	adds	r2, #69	; 0x45
 800930a:	7011      	strb	r1, [r2, #0]
 800930c:	4a27      	ldr	r2, [pc, #156]	; (80093ac <_printf_i+0x220>)
 800930e:	e7a7      	b.n	8009260 <_printf_i+0xd4>
 8009310:	0648      	lsls	r0, r1, #25
 8009312:	d5ac      	bpl.n	800926e <_printf_i+0xe2>
 8009314:	b2ad      	uxth	r5, r5
 8009316:	e7aa      	b.n	800926e <_printf_i+0xe2>
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	680d      	ldr	r5, [r1, #0]
 800931c:	1d10      	adds	r0, r2, #4
 800931e:	6949      	ldr	r1, [r1, #20]
 8009320:	6018      	str	r0, [r3, #0]
 8009322:	6813      	ldr	r3, [r2, #0]
 8009324:	062e      	lsls	r6, r5, #24
 8009326:	d501      	bpl.n	800932c <_printf_i+0x1a0>
 8009328:	6019      	str	r1, [r3, #0]
 800932a:	e002      	b.n	8009332 <_printf_i+0x1a6>
 800932c:	066d      	lsls	r5, r5, #25
 800932e:	d5fb      	bpl.n	8009328 <_printf_i+0x19c>
 8009330:	8019      	strh	r1, [r3, #0]
 8009332:	2300      	movs	r3, #0
 8009334:	9e04      	ldr	r6, [sp, #16]
 8009336:	6123      	str	r3, [r4, #16]
 8009338:	e7d2      	b.n	80092e0 <_printf_i+0x154>
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	1d11      	adds	r1, r2, #4
 800933e:	6019      	str	r1, [r3, #0]
 8009340:	6816      	ldr	r6, [r2, #0]
 8009342:	2100      	movs	r1, #0
 8009344:	0030      	movs	r0, r6
 8009346:	6862      	ldr	r2, [r4, #4]
 8009348:	f000 f834 	bl	80093b4 <memchr>
 800934c:	2800      	cmp	r0, #0
 800934e:	d001      	beq.n	8009354 <_printf_i+0x1c8>
 8009350:	1b80      	subs	r0, r0, r6
 8009352:	6060      	str	r0, [r4, #4]
 8009354:	6863      	ldr	r3, [r4, #4]
 8009356:	6123      	str	r3, [r4, #16]
 8009358:	2300      	movs	r3, #0
 800935a:	9a04      	ldr	r2, [sp, #16]
 800935c:	7013      	strb	r3, [r2, #0]
 800935e:	e7bf      	b.n	80092e0 <_printf_i+0x154>
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	0032      	movs	r2, r6
 8009364:	9906      	ldr	r1, [sp, #24]
 8009366:	9805      	ldr	r0, [sp, #20]
 8009368:	9d07      	ldr	r5, [sp, #28]
 800936a:	47a8      	blx	r5
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d0c1      	beq.n	80092f4 <_printf_i+0x168>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	079b      	lsls	r3, r3, #30
 8009374:	d415      	bmi.n	80093a2 <_printf_i+0x216>
 8009376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009378:	68e0      	ldr	r0, [r4, #12]
 800937a:	4298      	cmp	r0, r3
 800937c:	dabc      	bge.n	80092f8 <_printf_i+0x16c>
 800937e:	0018      	movs	r0, r3
 8009380:	e7ba      	b.n	80092f8 <_printf_i+0x16c>
 8009382:	0022      	movs	r2, r4
 8009384:	2301      	movs	r3, #1
 8009386:	9906      	ldr	r1, [sp, #24]
 8009388:	9805      	ldr	r0, [sp, #20]
 800938a:	9e07      	ldr	r6, [sp, #28]
 800938c:	3219      	adds	r2, #25
 800938e:	47b0      	blx	r6
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d0af      	beq.n	80092f4 <_printf_i+0x168>
 8009394:	3501      	adds	r5, #1
 8009396:	68e3      	ldr	r3, [r4, #12]
 8009398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800939a:	1a9b      	subs	r3, r3, r2
 800939c:	42ab      	cmp	r3, r5
 800939e:	dcf0      	bgt.n	8009382 <_printf_i+0x1f6>
 80093a0:	e7e9      	b.n	8009376 <_printf_i+0x1ea>
 80093a2:	2500      	movs	r5, #0
 80093a4:	e7f7      	b.n	8009396 <_printf_i+0x20a>
 80093a6:	46c0      	nop			; (mov r8, r8)
 80093a8:	0800956d 	.word	0x0800956d
 80093ac:	0800957e 	.word	0x0800957e

080093b0 <__retarget_lock_acquire_recursive>:
 80093b0:	4770      	bx	lr

080093b2 <__retarget_lock_release_recursive>:
 80093b2:	4770      	bx	lr

080093b4 <memchr>:
 80093b4:	b2c9      	uxtb	r1, r1
 80093b6:	1882      	adds	r2, r0, r2
 80093b8:	4290      	cmp	r0, r2
 80093ba:	d101      	bne.n	80093c0 <memchr+0xc>
 80093bc:	2000      	movs	r0, #0
 80093be:	4770      	bx	lr
 80093c0:	7803      	ldrb	r3, [r0, #0]
 80093c2:	428b      	cmp	r3, r1
 80093c4:	d0fb      	beq.n	80093be <memchr+0xa>
 80093c6:	3001      	adds	r0, #1
 80093c8:	e7f6      	b.n	80093b8 <memchr+0x4>

080093ca <memmove>:
 80093ca:	b510      	push	{r4, lr}
 80093cc:	4288      	cmp	r0, r1
 80093ce:	d902      	bls.n	80093d6 <memmove+0xc>
 80093d0:	188b      	adds	r3, r1, r2
 80093d2:	4298      	cmp	r0, r3
 80093d4:	d303      	bcc.n	80093de <memmove+0x14>
 80093d6:	2300      	movs	r3, #0
 80093d8:	e007      	b.n	80093ea <memmove+0x20>
 80093da:	5c8b      	ldrb	r3, [r1, r2]
 80093dc:	5483      	strb	r3, [r0, r2]
 80093de:	3a01      	subs	r2, #1
 80093e0:	d2fb      	bcs.n	80093da <memmove+0x10>
 80093e2:	bd10      	pop	{r4, pc}
 80093e4:	5ccc      	ldrb	r4, [r1, r3]
 80093e6:	54c4      	strb	r4, [r0, r3]
 80093e8:	3301      	adds	r3, #1
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d1fa      	bne.n	80093e4 <memmove+0x1a>
 80093ee:	e7f8      	b.n	80093e2 <memmove+0x18>

080093f0 <_realloc_r>:
 80093f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f2:	0007      	movs	r7, r0
 80093f4:	000d      	movs	r5, r1
 80093f6:	0016      	movs	r6, r2
 80093f8:	2900      	cmp	r1, #0
 80093fa:	d105      	bne.n	8009408 <_realloc_r+0x18>
 80093fc:	0011      	movs	r1, r2
 80093fe:	f7ff fc53 	bl	8008ca8 <_malloc_r>
 8009402:	0004      	movs	r4, r0
 8009404:	0020      	movs	r0, r4
 8009406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009408:	2a00      	cmp	r2, #0
 800940a:	d103      	bne.n	8009414 <_realloc_r+0x24>
 800940c:	f7ff fc02 	bl	8008c14 <_free_r>
 8009410:	0034      	movs	r4, r6
 8009412:	e7f7      	b.n	8009404 <_realloc_r+0x14>
 8009414:	f000 f812 	bl	800943c <_malloc_usable_size_r>
 8009418:	002c      	movs	r4, r5
 800941a:	42b0      	cmp	r0, r6
 800941c:	d2f2      	bcs.n	8009404 <_realloc_r+0x14>
 800941e:	0031      	movs	r1, r6
 8009420:	0038      	movs	r0, r7
 8009422:	f7ff fc41 	bl	8008ca8 <_malloc_r>
 8009426:	1e04      	subs	r4, r0, #0
 8009428:	d0ec      	beq.n	8009404 <_realloc_r+0x14>
 800942a:	0029      	movs	r1, r5
 800942c:	0032      	movs	r2, r6
 800942e:	f7ff fbdf 	bl	8008bf0 <memcpy>
 8009432:	0029      	movs	r1, r5
 8009434:	0038      	movs	r0, r7
 8009436:	f7ff fbed 	bl	8008c14 <_free_r>
 800943a:	e7e3      	b.n	8009404 <_realloc_r+0x14>

0800943c <_malloc_usable_size_r>:
 800943c:	1f0b      	subs	r3, r1, #4
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	1f18      	subs	r0, r3, #4
 8009442:	2b00      	cmp	r3, #0
 8009444:	da01      	bge.n	800944a <_malloc_usable_size_r+0xe>
 8009446:	580b      	ldr	r3, [r1, r0]
 8009448:	18c0      	adds	r0, r0, r3
 800944a:	4770      	bx	lr

0800944c <_init>:
 800944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009452:	bc08      	pop	{r3}
 8009454:	469e      	mov	lr, r3
 8009456:	4770      	bx	lr

08009458 <_fini>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	46c0      	nop			; (mov r8, r8)
 800945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945e:	bc08      	pop	{r3}
 8009460:	469e      	mov	lr, r3
 8009462:	4770      	bx	lr
